<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Architecture on ChenSoul</title>
    <link>https://blog.chensoul.cc/categories/architecture/</link>
    <description>Recent content in Architecture on ChenSoul</description>
    <generator>Hugo -- 0.135.0</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 05 Aug 2024 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/categories/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译]关系数据库设计速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-relational-database/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-relational-database/</guid>
      <description>&lt;p&gt;原文链接：&lt;a href=&#34;https://blog.bytebytego.com/p/a-crash-course-on-relational-database&#34; target=&#34;_blank&#34;&gt;https://blog.bytebytego.com/p/a-crash-course-on-relational-database&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在当今数据驱动的世界中，高效存储和管理信息是各种规模的企业和组织的关键要求。&lt;/p&gt;
&lt;p&gt;关系数据库提供了一个强大的框架，用于根据实体之间明确定义的关系来存储和检索数据。它们提供了一种结构化的数据管理方法，使用户能够：&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]分布式系统速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-distributed-systems/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-distributed-systems/</guid>
      <description>&lt;p&gt;原文链接：&lt;a href=&#34;https://blog.bytebytego.com/p/a-crash-course-on-distributed-systems&#34; target=&#34;_blank&#34;&gt;https://blog.bytebytego.com/p/a-crash-course-on-distributed-systems&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分布式系统是多台计算机（也称为节点）的集合，它们协作执行特定任务或提供服务。&lt;/p&gt;
&lt;p&gt;这些节点在物理上是分开的，并通过网络传递消息相互通信。分布式系统可以跨越地理边界，使其能够利用来自不同位置的资源。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb145d610-0804-4a50-b74b-bf13cac6fb8f_1600x1005.png&#34; alt=&#34;img&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]数据库分片速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-sharding/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-sharding/</guid>
      <description>&lt;p&gt;原文链接：&lt;a href=&#34;https://blog.bytebytego.com/p/a-crash-course-in-database-sharding&#34; target=&#34;_blank&#34;&gt;https://blog.bytebytego.com/p/a-crash-course-in-database-sharding&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;随着应用程序越来越受欢迎，它会吸引更多活跃用户并加入更多功能。这种增长导致每日数据生成量增加，从业务角度来看，这是一个积极的指标。&lt;/p&gt;
&lt;p&gt;然而，它也给应用程序的架构带来挑战，特别是在数据库可扩展性方面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]数据库扩展策略速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-scaling/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-scaling/</guid>
      <description>&lt;p&gt;原文链接：&lt;a href=&#34;https://blog.bytebytego.com/p/a-crash-course-in-database-scaling&#34; target=&#34;_blank&#34;&gt;https://blog.bytebytego.com/p/a-crash-course-in-database-scaling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据库是现代应用程序开发的支柱。它们在存储、管理和检索数据方面发挥着至关重要的作用，使应用程序和服务能够有效运行。&lt;/p&gt;
&lt;p&gt;随着应用程序越来越受欢迎并吸引越来越多的用户群，数据库面临着处理不断增加的数据量、并发用户和复杂查询的挑战。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]领域驱动设计速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</guid>
      <description>&lt;p&gt;原文链接：&lt;a href=&#34;https://blog.bytebytego.com/p/a-crash-course-on-domain-driven-design&#34; target=&#34;_blank&#34;&gt;https://blog.bytebytego.com/p/a-crash-course-on-domain-driven-design&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为复杂领域开发软件是一项具有挑战性的任务。&lt;/p&gt;
&lt;p&gt;随着问题领域的复杂性不断增长，创建准确表示业务概念、规则和流程的软件变得越来越困难。设计不良的软件很快就会变成难以理解、难以维护和扩展的混乱代码。&lt;/p&gt;
&lt;p&gt;领域驱动设计（DDD）为这个问题提供了解决方案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis安装和部署</title>
      <link>https://blog.chensoul.cc/posts/2024/05/14/redis-install/</link>
      <pubDate>Tue, 14 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/14/redis-install/</guid>
      <description>&lt;h2 id=&#34;单机安装&#34;&gt;单机安装&lt;/h2&gt;
&lt;h3 id=&#34;通过-yum-安装&#34;&gt;通过 yum 安装&lt;/h3&gt;
&lt;p&gt;在 CentOS 7 上通过 yum 安装 Redis，可以按照以下步骤进行操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;更新系统软件包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo yum update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 Redis：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo yum install redis
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看到默认安装的 redis 版本是 3.2.12-2.el7&lt;/p&gt;
&lt;p&gt;如果需要安装 redis 7，这需要下载 yum 源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo yum install epel-release
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo yum -y install http://rpms.remirepo.net/enterprise/remi-release-7.rpm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后，在指定源进行安装：&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Twitter</title>
      <link>https://blog.chensoul.cc/posts/2023/12/14/designing-twitter/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/14/designing-twitter/</guid>
      <description>&lt;p&gt;这是一篇双语翻译的文章，原文出自 &lt;a href=&#34;https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf&#34; target=&#34;_blank&#34;&gt;grok_system_design_interview.pdf&lt;/a&gt; 的一篇文章《Designing Twitter》设计 Twitter。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let’s design a Twitter-like social networking service. Users of the service will be able to post tweets, follow other people, and favorite tweets. Difficulty Level: Medium&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让我们设计一个类似 Twitter 的社交网络服务。该服务的用户将能够发布推文、关注其他人以及喜欢的推文。难度级别：中等&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何设计一个分布式ID生成器保证ID按时间有序？</title>
      <link>https://blog.chensoul.cc/posts/2023/12/05/distributed-id-generator/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/05/distributed-id-generator/</guid>
      <description>&lt;p&gt;很多业务有生成唯一 ID 并作为数据库主键的需求。数据库会在这个字段上建立聚集索引（参考 MySQL InnoDB），即该字段会影响各条数据再物理存储上的顺序。&lt;/p&gt;
&lt;p&gt;ID还要尽可能&lt;strong&gt;短&lt;/strong&gt;，节省内存，让数据库索引效率更高。基本上64位整数能够满足绝大多数的场景，但是如果能做到比64位更短那就更好了。需要根据具体业务进行分析，预估出ID的最大值，这个最大值通常比64位整数的上限小很多，于是我们可以用更少的bit表示这个ID。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Dropbox</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-dropbox/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-dropbox/</guid>
      <description>&lt;p&gt;这是一篇双语翻译的文章，原文出自 &lt;a href=&#34;https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf&#34; target=&#34;_blank&#34;&gt;grok_system_design_interview.pdf&lt;/a&gt; 的一篇文章《Designing Dropbox》设计 Dropbox。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let’s design a file hosting service like Dropbox or Google Drive. Cloud file storage enables users to store their data on remote servers. Usually, these servers are maintained by cloud storage providers and made available to users over a network (typically through the Internet). Users pay for their cloud data storage on a monthly basis. Similar Services: OneDrive, Google Drive Difficulty Level: Medium&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Facebook Messenger</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-facebook-messenger/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-facebook-messenger/</guid>
      <description>&lt;p&gt;这是一篇双语翻译的文章，原文出自 &lt;a href=&#34;https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf&#34; target=&#34;_blank&#34;&gt;grok_system_design_interview.pdf&lt;/a&gt; 的一篇文章《Designing Facebook Messenger》设计 Facebook Messenger。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let’s design an instant messaging service like Facebook Messenger where users can send text messages to each other through web and mobile interfaces.
让我们设计一个像 Facebook Messenger 这样的即时消息服务，用户可以通过网络和移动界面互相发送短信。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Instagram</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-instagram/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-instagram/</guid>
      <description>&lt;p&gt;这是一篇双语翻译的文章，原文出自 &lt;a href=&#34;https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf&#34; target=&#34;_blank&#34;&gt;grok_system_design_interview.pdf&lt;/a&gt; 的一篇文章《Designing Instagram》设计 Instagram。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let’s design a photo-sharing service like Instagram, where users can upload photos to share them with other users. Similar Services: Flickr, Picasa Difficulty Level: Medium&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让我们设计一个像 Instagram 这样的照片共享服务，用户可以上传照片与其他用户共享。类似服务：Flickr、Picasa 难度级别：中&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Pastebin</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-pastebin/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-pastebin/</guid>
      <description>&lt;p&gt;这是一篇双语翻译的文章，原文出自 &lt;a href=&#34;https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf&#34; target=&#34;_blank&#34;&gt;grok_system_design_interview.pdf&lt;/a&gt; 的一篇文章《Designing Pastebin》设计 Pastebin。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let’s design a Pastebin like web service, where users can store plain text. Users of the service will enter a piece of text and get a randomly generated URL to access it. Similar Services: pastebin.com, pasted.co, chopapp.com Difficulty Level: Easy&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让我们设计一个类似 Pastebin 的 Web 服务，用户可以在其中存储纯文本。该服务的用户将输入一段文本并获得一个随机生成的 URL 来访问它。类似服务：pastebin.com、pasted.co、hopapp.com 难度级别：简单&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》域名系统</title>
      <link>https://blog.chensoul.cc/posts/2023/11/17/dns/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/17/dns/</guid>
      <description>&lt;p&gt;这是一篇双语翻译的文章，原文出自《Grokking the System Design Interview》教程的 &lt;a href=&#34;https://www.educative.io/courses/grokking-modern-system-design-interview-for-engineers-managers/introduction-to-domain-name-system-dns&#34; target=&#34;_blank&#34;&gt;Domain Name System&lt;/a&gt; 这篇章节。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;introduction-to-domain-name-system-dns&#34;&gt;Introduction to Domain Name System (DNS)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;域名系统 (DNS) 简介&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;the-origins-of-dns&#34;&gt;The origins of DNS&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;DNS 的起源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s consider the example of a mobile phone where a unique number is associated with each user. To make calls to friends, we can initially try to memorize some of the phone numbers. However, as the number of contacts grows, we’ll have to use a phone book to keep track of all our contacts. This way, whenever we need to make a call, we’ll refer to the phone book and dial the number we need.&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何设计一个短网址服务</title>
      <link>https://blog.chensoul.cc/posts/2023/11/17/designing-a-url-shortening-service/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/17/designing-a-url-shortening-service/</guid>
      <description>&lt;p&gt;如何生成一个短网址服务，参考 &lt;a href=&#34;https://www.educative.io/courses/grokking-modern-system-design-interview-for-engineers-managers/system-design-tinyurl&#34; target=&#34;_blank&#34;&gt;Design a URL Shortening Service / TinyURL&lt;/a&gt; 和 &lt;a href=&#34;https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b5dac93e7ae59a1af6b&#34; target=&#34;_blank&#34;&gt;Designing a URL Shortening service like TinyURL&lt;/a&gt; 两篇文章，整理如下笔记。&lt;/p&gt;
&lt;p&gt;其中主要包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计一个系统有哪些步骤
&lt;ul&gt;
&lt;li&gt;需求&lt;/li&gt;
&lt;li&gt;预估&lt;/li&gt;
&lt;li&gt;设计
&lt;ul&gt;
&lt;li&gt;高层次设计&lt;/li&gt;
&lt;li&gt;API 设计&lt;/li&gt;
&lt;li&gt;细节设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;评估&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计一个短网址服务的细节&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计步骤&#34;&gt;设计步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Requirements 需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能性需求
&lt;ul&gt;
&lt;li&gt;短 URL 生成：我们的服务应该能够为给定 URL 生成唯一的较短别名。&lt;/li&gt;
&lt;li&gt;重定向：给定一个短链接，我们的系统应该能够将用户重定向到原始 URL。&lt;/li&gt;
&lt;li&gt;自定义短链接：用户应该能够使用我们的系统为其 URL 生成自定义短链接。&lt;/li&gt;
&lt;li&gt;删除：在赋予权限的情况下，用户应该能够删除我们系统生成的短链接。&lt;/li&gt;
&lt;li&gt;更新：如果有适当的权限，用户应该能够更新与短链接关联的长 URL。&lt;/li&gt;
&lt;li&gt;过期时间：短链接必须有一个默认的过期时间，但用户应该可以根据自己的需求设置过期时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分功能性需求：可用性、可靠性、扩展性、可维护性、容错性
&lt;ul&gt;
&lt;li&gt;可用性：我们的系统应该具有高可用性，因为即使是第二次停机的一小部分也会导致 URL 重定向失败。由于我们系统的域位于 URL 中，因此我们没有停机时间的优势，并且我们的设计必须灌输容错条件。&lt;/li&gt;
&lt;li&gt;可扩展性：我们的系统应该能够随着需求的增加而水平扩展。&lt;/li&gt;
&lt;li&gt;可读性：我们的系统生成的短链接应该易于阅读、区分和输入。&lt;/li&gt;
&lt;li&gt;延迟：系统应以低延迟执行，以便为用户提供流畅的体验。&lt;/li&gt;
&lt;li&gt;不可预测性：从安全角度来看，我们的系统生成的短链接应该是高度不可预测的。这确保了下一个短 URL 不会连续生成，从而消除了有人猜测我们的系统已经生成或将生成的所有短 URL 的可能性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Estimation 估计&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》系统设计主模板</title>
      <link>https://blog.chensoul.cc/posts/2023/11/16/system-design-master-template/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/16/system-design-master-template/</guid>
      <description>&lt;p&gt;这是一篇双语翻译的文章，原文出自《Grokking the System Design Interview》教程的 &lt;a href=&#34;https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/645d5161fff33a24ccce4bb1&#34; target=&#34;_blank&#34;&gt;System Design Master Template&lt;/a&gt; 这篇章节。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;System design interviews are unstructured by design. In these interviews, you are asked to take on an open-ended design problem that doesn’t have a standard solution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;系统设计面试在设计上是非结构化的。在这些面试中，您被要求解决一个没有标准解决方案的开放式设计问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》系统设计访谈：分步指南</title>
      <link>https://blog.chensoul.cc/posts/2023/11/16/sdi-a-step-by-step-guide/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/16/sdi-a-step-by-step-guide/</guid>
      <description>&lt;p&gt;这是一篇双语翻译的文章，原文出自 &lt;a href=&#34;https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf&#34; target=&#34;_blank&#34;&gt;grok_system_design_interview.pdf&lt;/a&gt; 的一篇文章《System Design Interviews: A step by step guide》系统设计访谈：分步指南。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A lot of software engineers struggle with system design interviews (SDIs) primarily because of three reasons:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;许多软件工程师在系统设计面试（SDI）中遇到困难，主要是因为以下三个原因：&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计类似 TinyURL 的 URL 缩短服务</title>
      <link>https://blog.chensoul.cc/posts/2023/11/16/designing-a-url-shortening-service/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/16/designing-a-url-shortening-service/</guid>
      <description>&lt;p&gt;这是一篇双语翻译的文章，原文出自 &lt;a href=&#34;https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf&#34; target=&#34;_blank&#34;&gt;grok_system_design_interview.pdf&lt;/a&gt; 的一篇文章《Designing a URL Shortening service like TinyURL》设计类似 TinyURL 的 URL 缩短服务。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let’s design a URL shortening service like TinyURL. This service will provide short aliases redirecting to long URLs. Similar services: bit.ly, goo.gl, qlink.me, etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让我们设计一个像 TinyURL 这样的 URL 缩短服务。该服务将提供重定向到长 URL 的短别名。类似服务：bit.ly、goo.gl、qlink.me等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分布式基础知识</title>
      <link>https://blog.chensoul.cc/posts/2023/11/14/distributed-system-basic/</link>
      <pubDate>Tue, 14 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/14/distributed-system-basic/</guid>
      <description>&lt;h2 id=&#34;什么是分布式系统&#34;&gt;什么是分布式系统？&lt;/h2&gt;
&lt;p&gt;分布式系统是指由多个独立的计算机节点（或服务器）通过网络相互连接和协作，共同完成某个任务或提供某个服务的系统。在分布式系统中，各个节点可以同时进行计算、存储和通信，并通过消息传递等方式进行协调和同步。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》1.高层分布式系统</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-01/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-01/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p&gt;
&lt;p&gt;这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》2.抽象层次的上下</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-02/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-02/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p&gt;
&lt;p&gt;这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》3.时间及顺序</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-03/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-03/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p&gt;
&lt;p&gt;这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》4.复制</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-04/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-04/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p&gt;
&lt;p&gt;这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》5.复制：弱一致性模型协议</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-05/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-05/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p&gt;
&lt;p&gt;这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》6.进一步阅读和附录</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-06/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-06/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者Mikito Takada撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p&gt;
&lt;p&gt;这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]给年轻的工程师们的关于分布式系统的一些笔记</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/notes-on-distributed-systems-for-young-bloods/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/notes-on-distributed-systems-for-young-bloods/</guid>
      <description>&lt;p&gt;我一直在思考分布式系统工程师在工作中学到的教训。我们大部分的教导都来自于在生产环境中犯过的错误留下的伤痕。这些伤痕固然是有用的提醒，但让更多的工程师能够完整地保留手指会更好。&lt;/p&gt;
&lt;p&gt;新的系统工程师在自我学习中会遇到分布式计算的谬论和CAP定理。但这些都是抽象的概念，缺乏针对经验不足的工程师直接可行的建议。让人惊讶的是，新工程师在开始工作时所了解到的背景信息是如此之少。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》介绍</title>
      <link>https://blog.chensoul.cc/posts/2023/11/09/distributed-systems-intro/</link>
      <pubDate>Thu, 09 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/09/distributed-systems-intro/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者Mikito Takada撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p&gt;
&lt;p&gt;这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何成为一名合格的架构师</title>
      <link>https://blog.chensoul.cc/posts/2023/08/21/architecture/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/21/architecture/</guid>
      <description>&lt;h2 id=&#34;如何成为一名合格的架构师&#34;&gt;如何成为一名合格的架构师&lt;/h2&gt;
&lt;p&gt;成为一名合格的架构师需要不断学习和积累经验。以下是一些步骤和建议，可以帮助你成为一名合格的架构师：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;学习基础知识：建立坚实的计算机科学和软件工程基础，包括数据结构、算法、操作系统、数据库等。深入学习编程语言和开发技术，了解不同技术栈的优缺点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用户故事如何应用到个人管理</title>
      <link>https://blog.chensoul.cc/posts/2023/08/21/user-stories-in-self-manager/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/21/user-stories-in-self-manager/</guid>
      <description>&lt;p&gt;用户故事（User Stories）是敏捷软件开发中的一种需求表达方式，用于描述用户的需求、期望和价值。尽管用户故事主要应用于软件开发团队，但其原则和方法也可以应用到个人管理中，以帮助个人更好地管理自己的任务和目标。&lt;/p&gt;</description>
    </item>
    <item>
      <title>软件开发流程和常用开发方法</title>
      <link>https://blog.chensoul.cc/posts/2023/08/21/the-software-development-process/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/21/the-software-development-process/</guid>
      <description>&lt;p&gt;软件开发流程和常用开发方法，如敏捷开发和 DevOps，对于架构师来说非常重要。下面我将简要介绍这些概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;软件开发流程：&lt;/p&gt;
&lt;p&gt;软件开发流程是指在开发软件时，按照一定的步骤和阶段进行工作的过程。常见的软件开发流程包括瀑布模型、迭代模型和增量模型等。这些流程以不同的方式组织和管理开发过程，包括需求分析、设计、编码、测试和部署等阶段。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据库如何设计树形结构</title>
      <link>https://blog.chensoul.cc/posts/2023/08/15/tree-structure-in-database/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/15/tree-structure-in-database/</guid>
      <description>&lt;p&gt;在 MySQL 中，设计树形结构的区域表有多种方式。以下是一些常见的方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;父子关系（Parent-Child Relationship）模型：在这种模型中，每个行记录包含一个指向其父级的引用。可以使用一个额外的列来存储父级 ID，或者使用自连接表来表示关系。这种模型简单直观，易于理解和管理。&lt;/li&gt;
&lt;li&gt;路径（Path）模型：在这种模型中，每个行记录都包含一个代表其完整路径的字段。路径可以是以某种分隔符（如斜杠）分隔的字符串，例如：/地区/国家/城市。通过解析和处理路径字段，可以轻松地查询父级、子级和兄弟节点。&lt;/li&gt;
&lt;li&gt;嵌套集模型（Nested Set Model）：这是一种基于左右值的模型，通过预先计算每个节点的左右值，可以高效地查询树形结构。每个节点都有一个左值和一个右值，用于表示其在树中的位置。这种模型适用于大型树结构，但需要特殊的操作来维护左右值。&lt;/li&gt;
&lt;li&gt;物化路径（Materialized Path）模型：这是路径模型的一种改进版本，它使用额外的列来存储节点的层级关系。除了路径字段外，还可以添加一个表示节点级别的字段。这样可以更高效地进行查询，并且可以轻松地获取节点的父级、子级和兄弟节点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;父子关系parent-child-relationship模型&#34;&gt;父子关系（Parent-Child Relationship）模型&lt;/h2&gt;
&lt;p&gt;父子关系（Parent-Child Relationship）模型是一种在 MySQL 中设计树形结构的方式。在该模型中，每个区域记录包含一个指向其父级区域的引用。通过这种父子关系，可以建立区域之间的层级结构。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]微服务设计模式</title>
      <link>https://blog.chensoul.cc/posts/2023/06/26/microservice-design-patterns/</link>
      <pubDate>Mon, 26 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/26/microservice-design-patterns/</guid>
      <description>&lt;p&gt;基于微服务的应用程序的主要特征在 &lt;a href=&#34;http://web.archive.org/web/20190705163602/http://blog.arungupta.me/microservices-monoliths-noops/&#34; target=&#34;_blank&#34;&gt;微服务、单体和 NoOps&lt;/a&gt; 中定义。它们是功能分解或领域驱动设计、定义良好的接口、明确发布的接口、单一责任原则和潜在的多语言。每项服务都是完全自主和全栈的。&lt;/p&gt;
&lt;p&gt;因此，更改服务实现不会影响其他服务，因为它们使用定义良好的接口进行通信。这种应用程序有几个优点，但它不是 &lt;a href=&#34;http://web.archive.org/web/20190705163602/http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html&#34; target=&#34;_blank&#34;&gt;免费的午餐&lt;/a&gt;，需要在 NoOps 方面付出大量努力。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
