<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Architecture on ChenSoul</title>
    <link>https://blog.chensoul.cc/categories/architecture/</link>
    <description>Recent content in Architecture on ChenSoul</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 05 Aug 2024 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/categories/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译]关系数据库设计速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-relational-database/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-relational-database/</guid>
      <description>原文链接：https://blog.bytebytego.com/p/a-crash-course-on-relational-database 在当今数据驱动的世界中，高效存储和管理信息是各种规模的企</description>
    </item>
    <item>
      <title>[译]分布式系统速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-distributed-systems/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-distributed-systems/</guid>
      <description>原文链接：https://blog.bytebytego.com/p/a-crash-course-on-distributed-systems 分布式系统是多台计算机（也称为节点）的集合，它们协作执行</description>
    </item>
    <item>
      <title>[译]数据库分片速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-sharding/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-sharding/</guid>
      <description>原文链接：https://blog.bytebytego.com/p/a-crash-course-in-database-sharding 随着应用程序越来越受欢迎，它会吸引更多活跃用户并加入更多功能</description>
    </item>
    <item>
      <title>[译]数据库扩展策略速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-scaling/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-scaling/</guid>
      <description>原文链接：https://blog.bytebytego.com/p/a-crash-course-in-database-scaling 数据库是现代应用程序开发的支柱。它们在存储、管理和检索数据方面</description>
    </item>
    <item>
      <title>[译]领域驱动设计速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</guid>
      <description>原文链接：https://blog.bytebytego.com/p/a-crash-course-on-domain-driven-design 为复杂领域开发软件是一项具有挑战性的任务。 随着问题领域</description>
    </item>
    <item>
      <title>Redis安装和部署</title>
      <link>https://blog.chensoul.cc/posts/2024/05/14/redis-install/</link>
      <pubDate>Tue, 14 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/14/redis-install/</guid>
      <description>单机安装 通过 yum 安装 在 CentOS 7 上通过 yum 安装 Redis，可以按照以下步骤进行操作： 更新系统软件包： 1 sudo yum update 安装 Redis： 1 sudo yum install redis 可以看到默认安装的 redis 版本是 3.2.12-2.el7 如果需要安装 redis 7，这需要下载 yum 源： 1 2 sudo yum install epel-release sudo</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Twitter</title>
      <link>https://blog.chensoul.cc/posts/2023/12/14/designing-twitter/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/14/designing-twitter/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing Twitter》设计 Twitter。 Let’s design a Twitter-like social networking service. Users of the service will be able to post tweets, follow other people, and favorite tweets. Difficulty Level: Medium 让我们设计一个类似 Twitter 的社交网络服务。该服</description>
    </item>
    <item>
      <title>如何设计一个分布式ID生成器保证ID按时间有序？</title>
      <link>https://blog.chensoul.cc/posts/2023/12/05/distributed-id-generator/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/05/distributed-id-generator/</guid>
      <description>很多业务有生成唯一 ID 并作为数据库主键的需求。数据库会在这个字段上建立聚集索引（参考 MySQL InnoDB），即该字段会影响各条数据再物理存储上的顺序。 ID还要尽可能短，节省内存，让数据库索引效率更高。基本上6</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Dropbox</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-dropbox/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-dropbox/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing Dropbox》设计 Dropbox。 Let’s design a file hosting service like Dropbox or Google Drive. Cloud file storage enables users to store their data on remote servers. Usually, these servers are maintained by cloud storage providers and made available to users over a network (typically through the Internet). Users pay</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Facebook Messenger</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-facebook-messenger/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-facebook-messenger/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing Facebook Messenger》设计 Facebook Messenger。 Let’s design an instant messaging service like Facebook Messenger where users can send text messages to each other through web and mobile interfaces. 让我们设计一个像 Facebook Messenger 这样的即时消息</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Instagram</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-instagram/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-instagram/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing Instagram》设计 Instagram。 Let’s design a photo-sharing service like Instagram, where users can upload photos to share them with other users. Similar Services: Flickr, Picasa Difficulty Level: Medium 让我们设计一个像 Instagram 这样的照片共享服</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Pastebin</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-pastebin/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-pastebin/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing Pastebin》设计 Pastebin。 Let’s design a Pastebin like web service, where users can store plain text. Users of the service will enter a piece of text and get a randomly generated URL to access it. Similar Services: pastebin.com, pasted.co, chopapp.com Difficulty Level: Easy 让我们设</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》域名系统</title>
      <link>https://blog.chensoul.cc/posts/2023/11/17/dns/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/17/dns/</guid>
      <description>这是一篇双语翻译的文章，原文出自《Grokking the System Design Interview》教程的 Domain Name System 这篇章节。 Introduction to Domain Name System (DNS) 域名系统 (DNS) 简介 The origins of DNS DNS 的起源 Let’s consider the example of a mobile phone where a unique number is associated with each user. To make calls to friends, we can initially try</description>
    </item>
    <item>
      <title>如何设计一个短网址服务</title>
      <link>https://blog.chensoul.cc/posts/2023/11/17/designing-a-url-shortening-service/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/17/designing-a-url-shortening-service/</guid>
      <description>如何生成一个短网址服务，参考 Design a URL Shortening Service / TinyURL 和 Designing a URL Shortening service like TinyURL 两篇文章，整理如下笔记。 其中主要包括以下内容： 设计一个系统有哪些步骤 需求 预估 设计 高层次设计 API 设计 细节设计 评估 设计一个短网址服务的细节 设计步骤 Requirements</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》系统设计主模板</title>
      <link>https://blog.chensoul.cc/posts/2023/11/16/system-design-master-template/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/16/system-design-master-template/</guid>
      <description>这是一篇双语翻译的文章，原文出自《Grokking the System Design Interview》教程的 System Design Master Template 这篇章节。 System design interviews are unstructured by design. In these interviews, you are asked to take on an open-ended design problem that doesn’t have a standard solution. 系统设计面试在设计上是非结构化的。在</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》系统设计访谈：分步指南</title>
      <link>https://blog.chensoul.cc/posts/2023/11/16/sdi-a-step-by-step-guide/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/16/sdi-a-step-by-step-guide/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《System Design Interviews: A step by step guide》系统设计访谈：分步指南。 A lot of software engineers struggle with system design interviews (SDIs) primarily because of three reasons: 许多软件工程师在系统设计面试（SDI）中遇到困难，主要是因为以</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计类似 TinyURL 的 URL 缩短服务</title>
      <link>https://blog.chensoul.cc/posts/2023/11/16/designing-a-url-shortening-service/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/16/designing-a-url-shortening-service/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing a URL Shortening service like TinyURL》设计类似 TinyURL 的 URL 缩短服务。 Let’s design a URL shortening service like TinyURL. This service will provide short aliases redirecting to long URLs. Similar services: bit.ly, goo.gl, qlink.me, etc. 让我们设计一个像 TinyURL 这样的 URL 缩短</description>
    </item>
    <item>
      <title>分布式基础知识</title>
      <link>https://blog.chensoul.cc/posts/2023/11/14/distributed-system-basic/</link>
      <pubDate>Tue, 14 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/14/distributed-system-basic/</guid>
      <description>什么是分布式系统？ 分布式系统是指由多个独立的计算机节点（或服务器）通过网络相互连接和协作，共同完成某个任务或提供某个服务的系统。在分布式系统中，各个节点可以同时进行计算、存储和通信，并通过消息传递等方</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》1.高层分布式系统</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-01/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-01/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。 这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》2.抽象层次的上下</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-02/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-02/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。 这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》3.时间及顺序</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-03/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-03/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。 这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》4.复制</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-04/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-04/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。 这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》5.复制：弱一致性模型协议</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-05/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-05/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。 这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》6.进一步阅读和附录</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-06/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-06/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者Mikito Takada撰写，介绍了构建分布式系统的基本概念、原则和挑战。 这本书涵盖了与分布式系统相关的广泛主题</description>
    </item>
    <item>
      <title>[译]给年轻的工程师们的关于分布式系统的一些笔记</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/notes-on-distributed-systems-for-young-bloods/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/notes-on-distributed-systems-for-young-bloods/</guid>
      <description>我一直在思考分布式系统工程师在工作中学到的教训。我们大部分的教导都来自于在生产环境中犯过的错误留下的伤痕。这些伤痕固然是有用的提醒，但让更多的工程师能够完整地保留手指会更好。 新的系统工程师在自我学习中</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》介绍</title>
      <link>https://blog.chensoul.cc/posts/2023/11/09/distributed-systems-intro/</link>
      <pubDate>Thu, 09 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/09/distributed-systems-intro/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者Mikito Takada撰写，介绍了构建分布式系统的基本概念、原则和挑战。 这本书涵盖了与分布式系统相关的广泛主题</description>
    </item>
    <item>
      <title>如何成为一名合格的架构师</title>
      <link>https://blog.chensoul.cc/posts/2023/08/21/architecture/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/21/architecture/</guid>
      <description>如何成为一名合格的架构师 成为一名合格的架构师需要不断学习和积累经验。以下是一些步骤和建议，可以帮助你成为一名合格的架构师： 学习基础知识：建立坚实的计算机科学和软件工程基础，包括数据结构、算法、操作系统</description>
    </item>
    <item>
      <title>用户故事如何应用到个人管理</title>
      <link>https://blog.chensoul.cc/posts/2023/08/21/user-stories-in-self-manager/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/21/user-stories-in-self-manager/</guid>
      <description>用户故事（User Stories）是敏捷软件开发中的一种需求表达方式，用于描述用户的需求、期望和价值。尽管用户故事主要应用于软件开发团队，但其原则和方法也可以应用到个人管理中，以帮助个人更好地管理自己</description>
    </item>
    <item>
      <title>软件开发流程和常用开发方法</title>
      <link>https://blog.chensoul.cc/posts/2023/08/21/the-software-development-process/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/21/the-software-development-process/</guid>
      <description>软件开发流程和常用开发方法，如敏捷开发和 DevOps，对于架构师来说非常重要。下面我将简要介绍这些概念： 软件开发流程： 软件开发流程是指在开发软件时，按照一定的步骤和阶段进行工作的过程。常见的软件开发流</description>
    </item>
    <item>
      <title>数据库如何设计树形结构</title>
      <link>https://blog.chensoul.cc/posts/2023/08/15/tree-structure-in-database/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/15/tree-structure-in-database/</guid>
      <description>在 MySQL 中，设计树形结构的区域表有多种方式。以下是一些常见的方案： 父子关系（Parent-Child Relationship）模型：在这种模型中，每个行记录包含一个指向其父级的引用。可以使用一个额外的列来</description>
    </item>
    <item>
      <title>[译]微服务设计模式</title>
      <link>https://blog.chensoul.cc/posts/2023/06/26/microservice-design-patterns/</link>
      <pubDate>Mon, 26 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/26/microservice-design-patterns/</guid>
      <description>基于微服务的应用程序的主要特征在 微服务、单体和 NoOps 中定义。它们是功能分解或领域驱动设计、定义良好的接口、明确发布的接口、单一责任原则和潜在的多语言。每项服务都是完全自主和全栈的。 因此，更改服务实现不会影</description>
    </item>
  </channel>
</rss>
