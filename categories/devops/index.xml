<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Devops on ChenSoul</title>
    <link>https://blog.chensoul.cc/categories/devops/</link>
    <description>Recent content in Devops on ChenSoul</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 19 Jul 2024 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitLab Runner安装和部署</title>
      <link>https://blog.chensoul.cc/posts/2024/07/19/gitlab-runner-install/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/19/gitlab-runner-install/</guid>
      <description>介绍 GitLab Runner 是一个用于在 GitLab CI/CD（持续集成/持续交付）流水线中运行作业（Jobs）的开源工具。它充当了 GitLab CI/CD 系统中的代理，负责接收作业请求、执行作业脚本并报告结果。 下面是 GitLab Runner 的一些关键特点和功能： 多平台</description>
    </item>
    <item>
      <title>Gitlab安装和部署-使用yum源</title>
      <link>https://blog.chensoul.cc/posts/2024/07/15/install-gitlab-using-yum/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/15/install-gitlab-using-yum/</guid>
      <description>Gitlab Server 部署 1、环境配置 关闭防火墙、SELinux 开启邮件服务 1 2 $ systemctl start postfix $ systemctl enable postfix 2、手动安装 1、安装 gitlab 依赖包 centos7: 1 $ yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python gitlab-ce 10.x.x以后的版本需要依赖policycoreutils-pyt</description>
    </item>
    <item>
      <title>Git介绍</title>
      <link>https://blog.chensoul.cc/posts/2024/07/15/git/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/15/git/</guid>
      <description>Git、Github、Gitlab 的区别 Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 Github是在线的</description>
    </item>
    <item>
      <title>Git使用</title>
      <link>https://blog.chensoul.cc/posts/2024/07/15/git/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/15/git/</guid>
      <description>部署Git 服务 创建git仓库 git-server上的操作： 1 2 3 4 5 6 7 8 [root@localhost ~]# yum install git git-core gitweb -y [root@localhost ~]# useradd git [root@localhost ~]# passwd git [root@localhost ~]# mkdir /git-root/ [root@localhost ~]# cd /git-root/ [root@localhost git-root]# git init --bare shell.git Initialized empty Git repository in /git-root/shell.git/ [root@localhost git-root]# chown -R git:git shell.git 注意： git init 和 git init &amp;ndash;bare 的区别: 使用&amp;ndash</description>
    </item>
    <item>
      <title>Minikube快速入门</title>
      <link>https://blog.chensoul.cc/posts/2024/07/10/minikube-quick-start/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/10/minikube-quick-start/</guid>
      <description>安装 macos 系统使用 brew 安装 1 brew install minikube 启动集群 查看当前集群列表 1 2 3 4 5 6 $ minikube profile list |----------|-----------|---------|--------------|------|---------|---------|-------|----------------|--------------------| | Profile | VM Driver | Runtime | IP | Port | Version | Status | Nodes | Active Profile | Active Kubecontext | |----------|-----------|---------|--------------|------|---------|---------|-------|----------------|--------------------| | minikube | docker | docker | 192.168.49.2 | 8443 | v1.30.0 | Unknown | 1 | * | * | |----------|-----------|---------|--------------|------|---------|---------|-------|----------------|--------------------| 创建一个集群 1 2 # 启动一个名称为</description>
    </item>
    <item>
      <title>Docker安装和配置</title>
      <link>https://blog.chensoul.cc/posts/2024/07/09/install-docker/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/09/install-docker/</guid>
      <description>Centos7安装Docker 配置宿主机网卡转发 1 2 3 4 5 6 7 8 9 10 11 ## 配置网卡转发，看值是否为1 $ sysctl -a |grep -w net.ipv4.ip_forward net.ipv4.ip_forward = 1 ## 若未配置，需要执行如下 $ cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/sysctl.d/docker.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward=1 EOF $ sysctl -p /etc/sysctl.d/docker.conf Yum安装配置docker</description>
    </item>
    <item>
      <title>使用 Docker 容器化并运行 Spring Boot 应用程序</title>
      <link>https://blog.chensoul.cc/posts/2024/07/09/docker-for-spring-boot/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/09/docker-for-spring-boot/</guid>
      <description>本文翻译自 Docker 官方网站的《Java language-specific guide》文章，并做了一些改动。 Java 入门指南教您如何使用 Docker 创建容器化的 Spring Boot 应用程序。在本模块中，您将学习如何： 使用 Maven 容器化并运行 Spring Boot 应用程序 设置本地开发环境以将数据库</description>
    </item>
    <item>
      <title>[译]Minikube 中的 Minions - 面向 Java 开发人员的 Kubernetes 简介</title>
      <link>https://blog.chensoul.cc/posts/2024/07/08/minions-in-minikube-a-kubernetes-intro-for-java-de/</link>
      <pubDate>Mon, 08 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/08/minions-in-minikube-a-kubernetes-intro-for-java-de/</guid>
      <description>我们希望我们的微服务是可复制、可替换的工作程序，我们可以轻松升级或降级，无需停机，管理也只需最少。我们可能会说我们希望他们是我们的奴才。在本文中，我们将通过一个简单的示例来了解 Kubernetes 通过创建和编排奴才大军</description>
    </item>
    <item>
      <title>[译]面向 Java 开发人员的 Kubernetes</title>
      <link>https://blog.chensoul.cc/posts/2024/07/08/kubernetes-for-java-developers/</link>
      <pubDate>Mon, 08 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/08/kubernetes-for-java-developers/</guid>
      <description>有一类新工具可用于将应用程序 docker 化并部署到 Kubernetes，这些工具专门面向开发人员。该类别中的最新工具是 RedHat 的 JKube。 微服务是一种架构风格，由一个小型的、单独的应用程序组件组成，该组件具有单一职</description>
    </item>
    <item>
      <title>ActiveMQ安装和使用</title>
      <link>https://blog.chensoul.cc/posts/2024/07/05/install-activemq/</link>
      <pubDate>Fri, 05 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/05/install-activemq/</guid>
      <description>ActiveMQ 是一个实现了 JMS 协议的开源消息中间件，目前它有两种版本：ActiveMQ &amp;ldquo;Classic&amp;rdquo; 和 ActiveMQ Artemis。 Artemis 版本作为Classic版本的替代品而诞生，相较的提升点有： 高性能与低延迟：Artemis通过改进的设计实</description>
    </item>
    <item>
      <title>Gitlab安装和部署-使用Docker</title>
      <link>https://blog.chensoul.cc/posts/2024/06/26/install-gitlab/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/26/install-gitlab/</guid>
      <description>安装 Gitlab 安装 gitlab-ce 版本，当前最新版本为 17.2.0 配置 external_url 参考 https://docs.gitlab.com/ee/install/docker.html#install-gitlab-using-docker-compose 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 services: gitlab: image: gitlab/gitlab-ce container_name: gitlab restart: always hostname: &amp;#39;gitlab.example.com&amp;#39; environment: GITLAB_OMNIBUS_CONFIG: | external_url &amp;#39;https://gitlab.example.com&amp;#39; ports: - &amp;#39;80:80&amp;#39; - &amp;#39;443:443&amp;#39; - &amp;#39;22:22&amp;#39; volumes: - &amp;#39;/srv/gitlab/config:/etc/gitlab&amp;#39; - &amp;#39;/srv/gitlab/logs:/var/log/gitlab&amp;#39; - &amp;#39;/srv/gitlab/data:/var/opt/gitlab&amp;#39; shm_size: &amp;#39;256m&amp;#39; 停止本地的 sshd 和 nginx 服务，避免 22 、80、443端口备占用： 1</description>
    </item>
    <item>
      <title>Jenkins安装和部署-使用Docker</title>
      <link>https://blog.chensoul.cc/posts/2024/06/26/install-jenkins/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/26/install-jenkins/</guid>
      <description>使用 Docker 安装 1 2 3 $ docker volume create --name jenkins_data $ docker run -p 8080:8080 -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkins/jenkins:jdk21 第一次启动 Jenkins 时，Docker 日志将包含如下消息： 1 2 3 4 5 6 Jenkins initial setup is required. An admin user has been created and a password generated. Please use the following password to proceed to installation: 1883c809f01b4ed585fb5c3e0156543a This may also be found at: /var/jenkins_home/secrets/initialAdminPassword 那串随机的数字和字母是初始管</description>
    </item>
    <item>
      <title>Tengine动态裁剪图片</title>
      <link>https://blog.chensoul.cc/posts/2024/06/26/install-cert-manager/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/26/install-cert-manager/</guid>
      <description>软件列表 Tengine：https://github.com/alibaba/tengine Lua：http://www.lua.org/ftp/ ，这里使用 lua-5.3.1.tar.gz LuaJIT：http://luajit.</description>
    </item>
    <item>
      <title>搭建本地 Maven 仓库 Artifactory 开源版</title>
      <link>https://blog.chensoul.cc/posts/2024/06/25/install-artifactory-oss/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/25/install-artifactory-oss/</guid>
      <description>安装 Artifactory 官方下载安装地址：https://jfrog.com/community/download-artifactory-oss/ ，支持三种安装方式： Windows Installer Linux Installers tar.gz RPM Debian Docker Compose Docker Helm 手动下载并安装 安装包文件地址</description>
    </item>
    <item>
      <title>搭建本地Maven仓库Nexus</title>
      <link>https://blog.chensoul.cc/posts/2024/06/25/install-nexus/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/25/install-nexus/</guid>
      <description>使用 Docker 安装 1 2 3 $ docker volume create --name nexus_data $ docker run -d -p 8081:8081--name nexus -v nexus_data:/nexus-data sonatype/nexus3 8081 是 Nexus UI 端口 使用 Docker Compose 安装 1 2 3 4 5 6 7 8 9 10 11 12 services: nexus: image: sonatype/nexus3 platform: linux/amd64 ports: - &amp;#34;8081:8081&amp;#34; volumes: - nexus_data:/nexus-data - /etc/localtime:/etc/localtime:ro volumes: nexus_data: 访问并配置 Nexus 访问 http://127.0.0.1:8081/ 或者是 http://&amp;lt;your IP&amp;gt;:8081，用户名为 admin ，初始密码在</description>
    </item>
    <item>
      <title>Spring Boot项目创建Docker镜像并运行应用</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</link>
      <pubDate>Thu, 06 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</guid>
      <description>手动创建 Dockerfile 添加 Dockerfile 在您的 Spring Boot 项目根目录下创建一个名为 Dockerfile 的文件，并添加以下内容: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 使用 OpenJDK 21 作为基础镜像 FROM openjdk:21 # 设置工作目录 WORKDIR /app # 将 JAR 文件复制到容器中 COPY target/*.jar app.jar # 暴露 8080 端口 EXPOSE 8080 # 设置容</description>
    </item>
    <item>
      <title>Argo CD安装和部署</title>
      <link>https://blog.chensoul.cc/posts/2024/05/11/argocd/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/11/argocd/</guid>
      <description>安装 ArgoCD 安装： 1 2 $ kubectl create namespace argocd $ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml 查看安装是否成功，当argocd命名空间下Pod状态都为Running时表示安装成功。 1 kubectl get pod -A 执行如下命令，将名为argocd-server的Service类</description>
    </item>
    <item>
      <title>K8s安装Cert Manager</title>
      <link>https://blog.chensoul.cc/posts/2024/05/10/install-cert-manager/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/10/install-cert-manager/</guid>
      <description>cert-manager 为 Kubernetes 或 OpenShift 集群中的工作负载创建 TLS 证书，并在证书过期之前续订证书。 cert-manager 可以从各种证书颁发机构获取证书，包括： Let&amp;rsquo;s Encrypt、HashiCorp Vault、 Venafi和私有 PKI。 使用 cert-manager 的证书资源，私钥</description>
    </item>
    <item>
      <title>Rancher安装和部署-使用K8s </title>
      <link>https://blog.chensoul.cc/posts/2024/05/10/install-rancher/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/10/install-rancher/</guid>
      <description>前提条件 Kubernetes 集群：可以使用 RKE、RKE2、K3S 等工具安装集群 Ingress Controller：对于 RKE、RKE2 和 K3s，你不需要手动安装 Ingress Controller，因为它是默认安装的。 CLI 工具：安装 kubectl 和 helm 使用 docker</description>
    </item>
    <item>
      <title>All things about Drone</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-drone/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-drone/</guid>
      <description>Drone by Harness ™ 是一个现代化的持续集成平台，使忙碌的团队能够使用强大的云原生管道引擎自动化其构建、测试和发布工作流程。 Drone实践 Docker 容器环境下的持续集成最佳实践：构建基于 Drone + GitFlow + K8s 的云原生语义化 CI 工作流 容器</description>
    </item>
    <item>
      <title>安装k3s</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/install-k3s/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/09/install-k3s/</guid>
      <description>K3s 是轻量级的 Kubernetes。K3s 易于安装，仅需要 Kubernetes 内存的一半，所有组件都在一个小于 100 MB 的二进制文件中。 k3s 文档：https://docs.rancher.cn/docs/k3s/_index K3</description>
    </item>
    <item>
      <title>通过k3d安装k3s</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3d/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3d/</guid>
      <description>k3d是什么 k3d 是一个轻量级包装器，用于在 docker 中运行k3s（Rancher Lab 的最小 Kubernetes 发行版）。 k3d 使得在 docker 中创建单节点和多节点k3s集群变得非常容易，例如用于 Kubernetes 上的本地开发。 注意： k3d 是一个社区驱动的项目，但</description>
    </item>
    <item>
      <title>通过k3sup安装k3s</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3sup/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3sup/</guid>
      <description>k3sup是一个支持在PC、虚拟机、ARM设备上安装k3s的工具，官方网站：https://k3sup.dev/ 安装k3sup 在线安装： 1 2 curl -sLS https://get.k3sup.dev | sh sudo install k3sup /usr/local/bin/ 离线安装，下载地址：https://git</description>
    </item>
    <item>
      <title>[译]DevOps 和测试人员的 Git 面试问题</title>
      <link>https://blog.chensoul.cc/posts/2023/10/12/git-interview-questions/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/12/git-interview-questions/</guid>
      <description>欢迎来到 Git 面试准备指南，我们将在这里向初学者和经验丰富的专业人士讨论最常见的 Git 面试问题。无论您是准备参加 DevOps 或测试面试，还是希望提高 Git 技能，此资源都可以通过深入研究一些与 Git 基本概念和实践相关的最常见面试</description>
    </item>
    <item>
      <title>[译]关于 HTTP 您需要了解的一切</title>
      <link>https://blog.chensoul.cc/posts/2023/10/12/http-in-depth/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/12/http-in-depth/</guid>
      <description>HTTP 是每个 Web 开发人员都应该了解的协议，因为它为整个 Web 提供动力。了解 HTTP 当然可以帮助您开发更好的应用程序。 在本文中，我将讨论 HTTP 是什么、它是如何产生的、它今天的状况以及我们是如何走到这一步的 什么是 HTTP？ 首</description>
    </item>
    <item>
      <title>Git Flow分支模型和使用</title>
      <link>https://blog.chensoul.cc/posts/2023/05/11/git-flow-model-and-usage/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/11/git-flow-model-and-usage/</guid>
      <description>介绍 Git Flow 是由 Vincent Driessen 在 2010 年提出的一种 Git 工作流。在这之前，Git 没有一个明确的标准工作流，导致团队在使用 Git 时往往会遇到一些问题，如分支管理、版本控制等。为了解决这些问题，Vincent Driessen 提出了 Git Flow 分支模型，</description>
    </item>
    <item>
      <title>我的VPS服务部署记录</title>
      <link>https://blog.chensoul.cc/posts/2023/01/25/notes-about-deploy-services-in-vps/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/01/25/notes-about-deploy-services-in-vps/</guid>
      <description>我的 VPS 使用的是 centos 服务器，所以以下操作都是基于 centos 系统。 服务器设置 更新 yum 源： 1 yum update 安装常用软件： 1 yum install wget curl git vim -y 设置时区为 [可选] 设置系统 Swap 交换分区 因为 vps 服务器的运行内存很小，所以这里先设置下 Swap 1 2 3 4 5</description>
    </item>
    <item>
      <title>Mac开发环境配置</title>
      <link>https://blog.chensoul.cc/posts/2021/09/09/mac-development-environment-setup/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2021/09/09/mac-development-environment-setup/</guid>
      <description>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是 Mac 开发环境，所以，这篇文章主要是基于 Mac 操作系统，记录开发环境搭建过程。 系统设置 dotfile 配置 下载 dotfile 文件： 1 git clone git@github.com:chensoul/snippets.git 拷贝到用</description>
    </item>
  </channel>
</rss>
