<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on ChenSoul</title>
    <link>https://blog.chensoul.cc/categories/java/</link>
    <description>Recent content in Java on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 25 Jun 2024 08:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.cc/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>搭建本地 Maven 仓库 Artifactory 开源版</title>
      <link>https://blog.chensoul.cc/posts/2024/06/25/install-artifactory-oss/</link>
      <pubDate>Tue, 25 Jun 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/25/install-artifactory-oss/</guid>
      <description>安装 Artifactory 官方下载安装地址：https://jfrog.com/community/download-artifactory-oss/ ，支持三种安装方式：
Windows Installer Linux Installers tar.gz RPM Debian Docker Compose Docker Helm …</description>
    </item>
    
    <item>
      <title>All things about OAuth</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/all-things-about-oauth/</link>
      <pubDate>Thu, 06 Jun 2024 12:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/06/all-things-about-oauth/</guid>
      <description>OAuth 是一种开放协议，允许通过网络、移动和桌面应用程序以简单、标准的方式进行安全授权。
OAuth 2 入门 以下是一些 OAuth 2.0 指南，涵盖了理解和实现客户端和服务器所需的许多主题。
OAuth 2.0 简化版 由 Aaron Parecki 编写的*《OAuth 2.0 Simplified*》是一份专注于编写客户端的 OAuth 2.0 指南，它在入门级别上清晰地概述了规范。 …</description>
    </item>
    
    <item>
      <title>Spring Boot项目创建docker镜像</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</link>
      <pubDate>Thu, 06 Jun 2024 12:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</guid>
      <description>手动创建 Dockerfile 添加 Dockerfile
在您的 Spring Boot 项目根目录下创建一个名为 Dockerfile 的文件，并添加以下内容:
# 使用 OpenJDK 11 作为基础镜像 FROM openjdk:11 # 设置工作目录 WORKDIR /app # 将 JAR 文件复制到容器中 COPY target/*.jar app.jar # 暴露 8080 …</description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/jwt/</link>
      <pubDate>Thu, 06 Jun 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/06/jwt/</guid>
      <description>什么是 JWT？ JWT（JSON Web Token）是一种开放标准(RFC 7519)，用于在网络应用程序之间安全地传输信息。它被设计用于在两方之间传输声明，这些声明可以是身份验证和授权信息，也可以是任何其他类型的信息。
设计目的：不需要服务器端存储状态，安全地传递非敏感信息。
JWT 特点 可扩展性：可以在 payload 中携带任意的 JSON 数据 自包含性：所有用户相关信息都在 JWT …</description>
    </item>
    
    <item>
      <title>OAuth2和OIDC区别</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/oauth2-oidc/</link>
      <pubDate>Thu, 06 Jun 2024 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/06/oauth2-oidc/</guid>
      <description>认证和授权 认证 (Authentication)：
认证是验证用户、设备或系统身份的过程。 常见的认证方式包括用户名/密码、生物特征(如指纹、人脸)、单点登录(SSO)等。 认证确保只有被授权的实体才能访问系统或资源。 授权 (Authorization)：
授权是确定已认证的实体被允许执行哪些操作或访问哪些资源的过程。 授权通常基于预定义的策略和规则，如角色、权限、访问控制列表(ACL)等。  …</description>
    </item>
    
    <item>
      <title>[译]OAuth2.0服务器</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-server/</link>
      <pubDate>Wed, 05 Jun 2024 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-server/</guid>
      <description>背景 前言 作者：Aaron Parecki
我第一次接触 OAuth 是在 2010 年，当时我正在构建一个 API，我知道我希望第三方开发人员能够在其基础上构建应用程序。当时，OAuth 看起来令人生畏。OAuth 1 的实现只有少数几个，而 OAuth 2.0 仍是一个草稿。一天晚上，我决定坐下来，拿着精酿啤酒和最新草案的纸质副本，从头到尾阅读它，直到我理解它。
在仔细阅读了长达 44 页的 …</description>
    </item>
    
    <item>
      <title>[译]OAuth2简化版</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth-2-simplified/</link>
      <pubDate>Wed, 05 Jun 2024 13:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth-2-simplified/</guid>
      <description>这篇文章以简化的格式描述了 OAuth 2.0，以帮助开发人员和服务提供商实现该协议。
OAuth 2 规范读起来可能有点混乱，所以我写了这篇文章来帮助以简化的格式描述术语。核心规范将许多决策留给实现者，通常基于实现的安全权衡。这篇文章没有描述成功实施 OAuth 2 所需的所有可能决策，而是做出适用于大多数实现的决策。
注意：本文已根据 OAuth 2.0 的当前最佳实践从原始 2012 版本更 …</description>
    </item>
    
    <item>
      <title>RFC6749 | OAuth2.0授权框架中文版</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2/</link>
      <pubDate>Wed, 05 Jun 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2/</guid>
      <description>前言 摘要 OAuth2.0 授权框架允许第三方应用获取对 HTTP 服务的有限的访问权限，既可以以资源所有者名义在资源所有者和 HTTP 服务之间进行允许的交互，也可以允许第三方应用以自己的名义进行访问。本规范取代并淘汰 RFC 5849 中描述的 OAuth 1.0 协议。
本备忘录状态 这是一个互联网标准化过程文档。
本文档是互联网工程任务组（IETF）的作品。它代表了 IETF 社区的一致 …</description>
    </item>
    
    <item>
      <title>[译][译]OAuth2 with Spring 第5部分：使用PKCE保护您的Spring Boot应用程序以增强安全性</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security/</link>
      <pubDate>Wed, 05 Jun 2024 07:04:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security/</guid>
      <description>原文地址：https://mainul35.medium.com/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security-d8025cd08769
免责声明：本文技术性很强，需要清楚了解本系列前几篇文章，特别是第 1 部分和第 3 部分。 …</description>
    </item>
    
    <item>
      <title>[译]OAuth2 with Spring 第4部分：Spring授权客户端与Google授权服务器的社交登录演示</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google/</link>
      <pubDate>Wed, 05 Jun 2024 07:03:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google/</guid>
      <description>原文地址：https://mainul35.medium.com/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google-be6097ec18a5
在之前的文章中，我们学习了如何使用 OIDC 连接到我们自己的授权服务器。我们在自托管授权服务器中定义了我们自己的客户端应用程序。在今天的文 …</description>
    </item>
    
    <item>
      <title>[译]OAuth2 with Spring 第3部分：使用Spring授权服务器授予authorization_code OIDC客户端</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/</link>
      <pubDate>Wed, 05 Jun 2024 07:02:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/</guid>
      <description>原文地址：https://mainul35.medium.com/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring-67769f9dd68a
在上一篇文章中，我们讨论了使用 client_credential 的 OAuth2 授权服务器配置。在本文中，我们 …</description>
    </item>
    
    <item>
      <title>[译]OAuth2 with Spring 第2部分：授权服务器入门</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/</link>
      <pubDate>Wed, 05 Jun 2024 07:01:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/</guid>
      <description>原文地址：https://mainul35.medium.com/oauth2-with-spring-part-2-getting-started-with-authorization-server-13804910cb2a
Spring 团队最近发布了他们的授权服务器。OAuth2 一直是一个热门话题，而构建或理解授权服务器一直是一个谜。在本系列的第 1 部分中，我描述了几乎所有您需要了解的有 …</description>
    </item>
    
    <item>
      <title>[译]OAuth2 with Spring 第1部分：了解基本概念</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/</link>
      <pubDate>Wed, 05 Jun 2024 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/</guid>
      <description>原文地址：https://mainul35.medium.com/oauth2-with-spring-part-1-knowing-the-basic-concepts-5c4aa17884a
在本系列关于 Spring 的 OAuth2的文章中，我将尝试介绍和解释与 OAuth2 相关的每一个问题以及如何在 Spring 框架中实现这些问题。请记住，OAuth2 完全是一个概念性的东西，在不同 …</description>
    </item>
    
    <item>
      <title>[译]使用 Spring Boot 构建 RESTful API：集成 DDD 和六边形架构</title>
      <link>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</link>
      <pubDate>Thu, 30 May 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</guid>
      <description>原文链接：Building a RESTful API with Spring Boot: Integrating DDD and Hexagonal Architecture
介绍 在快节奏的软件开发世界中，API 扮演着至关重要的角色，可以有效地促进不同系统之间的交互和数据交换。API 创建最突出的技术之一是 Spring Boot，它是一种强大的工具，可以简化 Java 应用程序的开发，使开 …</description>
    </item>
    
    <item>
      <title>[译]如何组织代码</title>
      <link>https://blog.chensoul.cc/posts/2024/05/30/how-to-structure-our-code/</link>
      <pubDate>Thu, 30 May 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/30/how-to-structure-our-code/</guid>
      <description>原文链接：How to Structure Code
软件设计最佳实践，逐层发现包、按功能发现包以及六角形架构/端口和适配器。
在这篇博文中，我将探讨如何构建我们的代码并讨论最佳实践，涵盖三种不同的方法：按层打包、按功能打包以及六边形架构/端口和适配器及其优缺点。
在探索构建代码的不同方法之前，我们需要了解基本的软件设计原则：
内聚力：指模块内各类之间的相互关联程度。 耦合度：指不同模块之间的依赖 …</description>
    </item>
    
    <item>
      <title>All things about WebSocket</title>
      <link>https://blog.chensoul.cc/posts/2024/05/10/all-things-about-websocket/</link>
      <pubDate>Fri, 10 May 2024 16:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/10/all-things-about-websocket/</guid>
      <description>Wikipedia：WebSocket
WebSocket - Web APIs | MDN
PubNub：什么是 WebSocket？
What are WebSockets?
websocket protocol - RFC6455 - tools.ietf.org
WebSocket
Ably：What are WebSockets used for? Pusher：What are …</description>
    </item>
    
    <item>
      <title>All things about Spring Modulith</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-spring-modulith/</link>
      <pubDate>Thu, 09 May 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-spring-modulith/</guid>
      <description>VMware 推出了一个实验性的项目Spring Modulith，以便于通过模块和事件更好地组织 Spring Boot 3 应用。该项目引入了新的类和注解，但并不会生成代码。它的模块没有使用 Java Platform Module System（JPMS），而是映射到了普通的 Java 包。模块有 API，但是 Spring Modulith 鼓励使用 Spring 应用事件作为“主要的交互 …</description>
    </item>
    
    <item>
      <title>[译]探索 http2（第 2 部分）：使用 node-http2 核心和 hapijs</title>
      <link>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-2-overview/</link>
      <pubDate>Wed, 08 May 2024 11:34:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-2-overview/</guid>
      <description>原文链接：https://noobj.medium.com/exploring-http2-part-2-with-node-http2-core-and-hapijs-74e3df14249
来源：https://www.thewebmaster.com/
先决条件：了解 javascript、客户端-服务器架构。
完整的代码可以在github上找到。
第 1 部分：概述（http2 的原因、内 …</description>
    </item>
    
    <item>
      <title>[译]探索 http2（第 1 部分）：概述</title>
      <link>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-1-overview/</link>
      <pubDate>Wed, 08 May 2024 11:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-1-overview/</guid>
      <description>原文链接：https://noobj.medium.com/exploring-http2-part-1-overview-dc3e9b53968f
让我们来谈谈 http2 的内容、原因、时间和方式
完整的代码可以在github上找到。
第 1 部分：概述 第 2 部分：使用 node-http2 核心和 hapijs 进行探索
什么是http2？ **http2*是自 1999 年以来使用 …</description>
    </item>
    
    <item>
      <title>[译]比较 Socket.IO 和 HTTP：主要区别和用例</title>
      <link>https://blog.chensoul.cc/posts/2024/05/08/socketio-vs-http/</link>
      <pubDate>Wed, 08 May 2024 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/08/socketio-vs-http/</guid>
      <description>原文链接：https://ably.com/topic/socketio-vs-http
在规划实时应用程序时，您应该仔细考虑要使用哪些技术。本文对Socket.IO实时库和HTTP协议进行了比较。下面您将了解每种解决方案的功能、每种解决方案的优缺点以及何时使用它们。
什么是Socket.IO？ Socket.IO 是一个创建于 2010 年的库，提供客户端和服务器之间的实时双向通信。它允许管理连 …</description>
    </item>
    
    <item>
      <title>[译]什么是 HTTP？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/http/</link>
      <pubDate>Tue, 07 May 2024 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/http/</guid>
      <description>原文链接：https://www.pubnub.com/guides/http/
HTTP 概述 HTTP，即超文本传输协议，是互联网通信的基础。它在客户端-服务器模型上运行，其中前端客户端（例如网络浏览器）通过向服务器发送HTTP请求消息来发起请求，例如请求网页（例如搜索引擎）。然后，服务器使用包含所请求资源的 HTTP 响应消息进行响应，如果资源不可用，则使用错误消息进行响应。
HTTP 是一 …</description>
    </item>
    
    <item>
      <title>[译]什么是 OAuth？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/oauth/</link>
      <pubDate>Tue, 07 May 2024 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/oauth/</guid>
      <description>原文链接：https://www.pubnub.com/guides/oauth/
什么是 OAuth？ OAuth（开放授权）是一种开放标准授权框架，允许第三方应用程序访问用户数据，而无需用户共享其登录凭据。它为用户提供了一种安全且标准化的方式，将其在一个网站上的资源的访问权限授予另一个网站或应用程序，而无需暴露其密码。
简单来说，OAuth 充当最终用户和他们想要授予访问权限的应用程序之间的中 …</description>
    </item>
    
    <item>
      <title>[译]什么是HTTP/3？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/http3/</link>
      <pubDate>Tue, 07 May 2024 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/http3/</guid>
      <description>原文链接：https://www.pubnub.com/guides/http-3/
什么是 HTTP/3？ HTTP/3（或 HTTP-over-QUIC）是超文本传输协议 ( HTTP ) 的第三个主要版本。它是用于 Web 浏览器和服务器之间通信的应用层协议。 HTTP/3 旨在提高 Web 通信的性能和安全性。
HTTP/3的主要功能之一是它构建在用户数据报协议 (UDP)之上，而不是建立 …</description>
    </item>
    
    <item>
      <title>[译]什么是HTTP流式传输？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/http-streaming/</link>
      <pubDate>Tue, 07 May 2024 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/http-streaming/</guid>
      <description>原文链接：https://www.pubnub.com/guides/http-streaming/
什么是 HTTP 流式传输？ HTTP 流，也称为基于 HTTP 的流或 HTTP 实时流，是一种用于通过 Internet 传送实时多媒体内容（例如音频或视频）的技术。该协议允许从服务器到客户端设备的连续数据传输，使用户能够消费媒体内容而无需完整的文件下载。
与传统的文件下载方法不同，在开始播放 …</description>
    </item>
    
    <item>
      <title>[译]什么是Socket.IO？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/socket-io/</link>
      <pubDate>Tue, 07 May 2024 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/socket-io/</guid>
      <description>原文链接：https://www.pubnub.com/guides/socket-io/
什么是Socket.IO？ Socket.IO是一个开源的跨平台库，它提供客户端和服务器之间基于事件的全双工双向通信。它基于 WebSocket 协议构建，提供附加功能，例如自动重新连接以及在无法使用 WebSocket时回退到HTTP 长轮询。
Socket.IO 客户端由客户端和服务器端库组成。虽然最初 …</description>
    </item>
    
    <item>
      <title>[译]什么是WebSocket？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websockets/</link>
      <pubDate>Tue, 07 May 2024 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websockets/</guid>
      <description>原文链接：https://www.pubnub.com/guides/websockets/
什么是 WebSocket？ WebSocket 是一种通过单个TCP连接提供全双工通信通道的通信协议。它支持客户端和服务器之间的实时、事件驱动的连接。
与遵循请求-响应模型的传统 HTTP 软件不同，WebSocket 允许双向（双向）通信。这意味着客户端和服务器可以随时向对方发送数据，而无需持续轮询。 …</description>
    </item>
    
    <item>
      <title>[译]什么是长轮询？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/long-polling/</link>
      <pubDate>Tue, 07 May 2024 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/long-polling/</guid>
      <description>原文链接：https://www.pubnub.com/guides/long-polling/
什么是长轮询？ 长轮询用于实时 Web 应用程序，以实现客户端和 Web 服务器之间近乎即时的通信。它在实时更新至关重要的聊天和消息应用程序中特别有用。
在传统的HTTP通信中，客户端向服务器发送新请求并等待响应。这称为短轮询。然而，在实时场景中，短轮询可能效率不高，因为它需要频繁向服务器请求，导致不 …</description>
    </item>
    
    <item>
      <title>[译]2024年最好的WebSocket替代品</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websocket-alternatives/</link>
      <pubDate>Tue, 07 May 2024 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websocket-alternatives/</guid>
      <description>原文链接：https://ably.com/topic/websocket-alternatives
什么是 WebSocket？ 简而言之，WebSocket 是一种实时 Web 技术，可通过持久连接在客户端和服务器之间实现双向、全双工通信。 WebSocket 连接会根据需要保持活动状态（理论上，它可以永远持续），从而允许服务器和客户端以最小的开销随意发送数据。
了解更多： …</description>
    </item>
    
    <item>
      <title>[译]HTTP 的演变 – HTTP2 深入探讨</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/http2/</link>
      <pubDate>Tue, 07 May 2024 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/http2/</guid>
      <description>原文链接：https://ably.com/topic/http2
可以毫不夸张地说，超文本传输协议 (HTTP) 造就了我们所熟知的互联网。 HTTP 最初是由万维网的发明者蒂姆·伯纳斯·李 (Tim Berners-Lee) 于 1989 年提出的应用程序协议。第一个记录版本 HTTP/0.9 被称为单行协议。鉴于它催生了万维网，它现在可以被描述为有史以来最伟大的俏皮话。
随着我们对互联网的需 …</description>
    </item>
    
    <item>
      <title>[译]WebSocket与HTTP：2024年为您的项目选择哪一个</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websockets-vs-http/</link>
      <pubDate>Tue, 07 May 2024 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websockets-vs-http/</guid>
      <description>原文链接：https://ably.com/topic/websockets-vs-http
当谈到 WebSocket 与 HTTP 时，决定使用哪一种并不总是那么明确。哪一个更好？您的应用程序应该使用哪一款？
但问题的答案不一定是其中之一 - 开发人员经常根据场景在同一个应用程序中同时使用 WebSocket 和 HTTP。更重要的问题是 - 我如何确定 WebSockets 还是 HTTP  …</description>
    </item>
    
    <item>
      <title>[译]如何通过 WebSocket 将 Kafka 消息流式传输到面向互联网的客户端</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websockets-kafka/</link>
      <pubDate>Tue, 07 May 2024 10:10:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websockets-kafka/</guid>
      <description>原文链接：https://ably.com/topic/websockets-kafka
Apache Kafka 是目前最强大的异步消息传递技术之一。 Kafka 由 Jay Kreps、Jun Rao 和 Neha Narkhede 等团队于 2010 年在 LinkedIn 设计，并于 2011 年初开源。如今，该工具被众多公司（包括科技巨头，例如 Slack、Airbnb …</description>
    </item>
    
    <item>
      <title>[译]Apache Kafka、RabbitMQ 与 AWS SNSSQS：哪个消息代理最好？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs/</link>
      <pubDate>Tue, 07 May 2024 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs/</guid>
      <description>原文链接：https://ably.com/topic/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs
将消息从一个组件获取到另一个组件是微服务架构中最重要的部分之一。每个服务必须能够与任何其他服务异步、可靠且大规模地通信。
这就是消息代理的用武之地。消息代理（例如 Apache Kafka、RabbitMQ 和AWS SNS/SQS）为您提供一个通用接口和一组保 …</description>
    </item>
    
    <item>
      <title>[译]Java和WebSockets：构建可靠的实时应用程序</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websockets-java/</link>
      <pubDate>Tue, 07 May 2024 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websockets-java/</guid>
      <description>原文：https://ably.com/topic/websockets-java
在全球范围内，人们对实时传输数据的需求不断增长，WebSocket可能是此类用例中最流行的传输协议。在 WebSocket 出现之前，“实时”网络已经存在，但它很难实现，通常速度较慢，并且是通过破解现有的网络技术来实现的，而这些技术并不是为实时应用程序设计的。 WebSocket 协议为真正的实时网络铺平了道路。 …</description>
    </item>
    
    <item>
      <title>[译]WebSocket API和协议说明</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/the-websocket-api-and-protocol-explained/</link>
      <pubDate>Tue, 07 May 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/the-websocket-api-and-protocol-explained/</guid>
      <description>原文地址：https://ably.com/topic/websockets
WebSocket 标志着 Web 开发的转折点。 WebSocket 技术旨在以事件为驱动，并针对低延迟进行了优化，已成为许多寻求构建交互式实时数字体验以提供令人愉悦的用户体验的组织和开发人员的首选。本文探讨了与 WebSocket 相关的关键主题：
WebSocket 协议和 API 解释
WebSockets 是如 …</description>
    </item>
    
    <item>
      <title>[译]WebSocket与REST</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websocket-vs-rest/</link>
      <pubDate>Tue, 07 May 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websocket-vs-rest/</guid>
      <description>原文链接：https://ably.com/topic/websocket-vs-rest
无论您是将客户端连接到服务器、将微服务相互连接，还是将应用程序的一部分连接到外部服务，在通信方法方面，您几乎都会有多种选择。不过，有两个比较突出：WebSocket 和 REST。
好消息是，尽管为应用程序选择核心技术是一项严肃的责任，但由于 WebSocket 和 REST 不同的架构选择、性能特征和实现 …</description>
    </item>
    
    <item>
      <title>ThingsBoard的领域模型</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/thingsboard-domain/</link>
      <pubDate>Tue, 07 May 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/05/07/thingsboard-domain/</guid>
      <description>ThingsBoard是一个开源的物联网平台，用于管理和监控物联网设备和数据。它提供了一个可扩展的架构，可以连接各种设备，并实时收集、处理和分析设备生成的数据。
领域模型 在ThingsBoard中，领域模型是一个关键概念，用于描述物联网系统中的物理实体、属性和行为。以下是ThingsBoard中的主要领域模型组件：
租户（Tenant）：租户是ThingsBoard中的顶级组织单位。它代表了一个 …</description>
    </item>
    
    <item>
      <title>All things about ThingsBoard</title>
      <link>https://blog.chensoul.cc/posts/2024/04/29/all-things-about-thingsboard/</link>
      <pubDate>Mon, 29 Apr 2024 18:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/04/29/all-things-about-thingsboard/</guid>
      <description>thingsboard 是一款乌克兰团队基于java语言研发的开源物联网框架，开源的是ce版，企业版需要购买授权且无源码。
官方网站：
Thingsboard 官网：https://thingsboard.io/
Thingsboard社区免费版本：https://demo.thingsboard.io/
Thingsboard 企业付费版本：https://thingsboard.cloud/ …</description>
    </item>
    
    <item>
      <title>TBMQ测试和源码分析</title>
      <link>https://blog.chensoul.cc/posts/2024/04/28/thingsboard-tbmq-test/</link>
      <pubDate>Sun, 28 Apr 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/04/28/thingsboard-tbmq-test/</guid>
      <description>启动 TBMQ 程序，浏览器访问 http://localhost:8083，创建一个 Application，Credentials Type 为 BASIC，客户端 ID、用户名和密码均设置为 tbmq_app
使用 mosquitto 测试订阅消息
mosquitto_sub -d -q 1 -h localhost -p 1883 -t tbmq/demo/+ -i …</description>
    </item>
    
    <item>
      <title>ThingsBoard TBMQ本地和通过Docker运行</title>
      <link>https://blog.chensoul.cc/posts/2024/04/17/thingsboard-tbmq-local-docker-run/</link>
      <pubDate>Wed, 17 Apr 2024 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2024/04/17/thingsboard-tbmq-local-docker-run/</guid>
      <description>docker-compose 运行 参考：https://thingsboard.io/docs/mqtt-broker/install/cluster/docker-compose-setup/
下载源代码
git clone -b release-1.3.0 https://github.com/thingsboard/tbmq.git cd tbmq/docker …</description>
    </item>
    
    <item>
      <title>All things about MicroProfile</title>
      <link>https://blog.chensoul.cc/posts/2023/12/14/all-things-about-microprofile/</link>
      <pubDate>Thu, 14 Dec 2023 16:14:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/12/14/all-things-about-microprofile/</guid>
      <description>最近在一些开源项目中看到了 MicroProfile ，于是在网上查阅了相关资料加深对 MicroProfile 的理解，并做了笔记形成此文。
MicroProfile MicroProfile是一个开放的企业级Java微服务框架，旨在简化和标准化基于微服务架构的应用程序开发。它是由Eclipse Foundation主导的一个开源项目，致力于提供轻量级、可移植和可互操作的Java微服务规范和实 …</description>
    </item>
    
    <item>
      <title>JHipster安装和介绍</title>
      <link>https://blog.chensoul.cc/posts/2023/11/02/jhipster-intro/</link>
      <pubDate>Thu, 02 Nov 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/11/02/jhipster-intro/</guid>
      <description>JHipster 是一个开发平台，可以快速生成，开发和部署现代 Web 应用程序+微服务架构。
JHipster 或者称 Java Hipster，是一个应用代码产生器，能够创建 Spring Boot/Spring Cloud + React/VueJs/AngularJS 的应用。使用 JHipster，首先你要配置好 Java 、Git 以及 Maven 或者 Gradle 的环境， …</description>
    </item>
    
    <item>
      <title>Java设计模式：Circuit Breaker</title>
      <link>https://blog.chensoul.cc/posts/2023/10/26/java-design-patterns-circuit-breaker/</link>
      <pubDate>Thu, 26 Oct 2023 08:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/10/26/java-design-patterns-circuit-breaker/</guid>
      <description>本文主要介绍 Circuit Breaker 断路器模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 断路器模式（Circuit Breaker Pattern）是一种在分布式系统中处理故障和提高系统可靠性的设计模式。它的主要目标是防止故障的传递，并在故障发生时提供优雅的故障处理机制。
在一个分布式系 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Chain</title>
      <link>https://blog.chensoul.cc/posts/2023/10/16/java-design-patterns-chain/</link>
      <pubDate>Mon, 16 Oct 2023 04:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/10/16/java-design-patterns-chain/</guid>
      <description>本文主要介绍 Chain 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
目的 通过给多个对象一个处理请求的机会，避免请求的发送者和它的接收者耦合。串联接收对象并在链条中传递请求直到一个对象处理它。
介绍 责任链模式（Chain of Responsibility Pattern）是一种行为型设计模式，它 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Callback</title>
      <link>https://blog.chensoul.cc/posts/2023/10/13/java-design-patterns-callback/</link>
      <pubDate>Fri, 13 Oct 2023 07:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/10/13/java-design-patterns-callback/</guid>
      <description>本文主要介绍 Callback 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 回调（Callback）是一种设计模式，在这种模式中，一个可执行的代码被作为参数传递给其他代码，接收方的代码可以在适当的时候调用它。
在真实世界的例子中，当我们需要在任务完成时被通知时，我们可以将一个回调方法传递给调用 …</description>
    </item>
    
    <item>
      <title>[译]Spring Boot3和Spring6中的新特性</title>
      <link>https://blog.chensoul.cc/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</link>
      <pubDate>Fri, 13 Oct 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</guid>
      <description>Spring Boot 3.0 于 2022 年 11 月正式发布，包含一些新功能和改进。这是继大约 4.5 年前发布 Spring Boot 2.0 后 Spring Boot 的第一个主要版本。它也是第一个支持 Spring Framework 6.0 的 Spring Boot GA 版本。作为开发人员，我们需要了解这些更新，才能顺利使用 Spring Boot。毫无疑问，新版本中最大的转变 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security 面试问题</title>
      <link>https://blog.chensoul.cc/posts/2023/10/12/spring-security-interview-questions/</link>
      <pubDate>Thu, 12 Oct 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/10/12/spring-security-interview-questions/</guid>
      <description>本面试准备指南将讨论一些常见的 Spring Security 面试问题。无论您是准备面试还是只是想增强对 Spring Security 的了解，这些问题都将帮助您理解关键概念并指导您设计常见安全问题的解决方案。
1. Spring Security 的核心特性是什么？ Spring Security 提供的两个最突出的功能是身份验证和授权。这些功能在确保应用程序的安全性方面发挥着至关重要的作 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Caching</title>
      <link>https://blog.chensoul.cc/posts/2023/09/25/java-design-patterns-cahcing/</link>
      <pubDate>Mon, 25 Sep 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/09/25/java-design-patterns-cahcing/</guid>
      <description>本文主要介绍 Caching 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 缓存模式（Caching Pattern）是一种设计模式，旨在通过在资源使用后将其保留在某个快速访问的存储中，并在需要时重新使用资源，以避免昂贵的资源重新获取。
缓存模式的目的是减少重复获取、初始化和释放同一资源所带来的不 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Bytecode</title>
      <link>https://blog.chensoul.cc/posts/2023/09/22/java-design-patterns-bytecode/</link>
      <pubDate>Fri, 22 Sep 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/09/22/java-design-patterns-bytecode/</guid>
      <description>本文主要介绍 Bytecode 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 字节码设计模式是一种软件设计模式，它允许以数据驱动的方式定义和执行行为。在字节码设计模式中，行为被表示为一系列虚拟机指令，这些指令被编码为字节码，并在运行时执行。
字节码设计模式的目的是将行为与代码分离，使得行为可以在不 …</description>
    </item>
    
    <item>
      <title>[译]SPRING BOOT JWT - 如何使用 SPRING SECURITY 和 JSON WEB 令牌保护您的 REST API</title>
      <link>https://blog.chensoul.cc/posts/2023/09/19/spring-security-jwt/</link>
      <pubDate>Tue, 19 Sep 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/09/19/spring-security-jwt/</guid>
      <description>如果您快速搜索如何使用 JSON Web Tokens 在 Spring Boot 中保护 REST API，您会发现很多相同的结果。这些结果包含一种方法，该方法涉及编写自定义过滤器链并引入第三方库来编码和解码 JWT。
在看完这些令人费解且令人困惑的教程后，我说必须有一种更简单的方法来做到这一点。我做了任何直接接触 Spring Security 团队的人都会做的事情，我向他们寻求帮助。他们告诉 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security 与 JWT for REST API</title>
      <link>https://blog.chensoul.cc/posts/2023/09/19/spring-security-tutorial/</link>
      <pubDate>Tue, 19 Sep 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/09/19/spring-security-tutorial/</guid>
      <description>免责声明：Spring Security 5+ 已发布 OAuth JWT 支持。建议使用最新版本的 OAuth 来支持 JWT，而不是使用自定义安全性或过滤器。
Spring 被认为是 Java 生态系统中值得信赖的框架，并且被广泛使用。将 Spring 称为框架不再有效，因为它更多的是涵盖各种框架的总括术语。其中一个框架是 Spring Security，它是一个功能强大且可定制的身份验证和授 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Builder</title>
      <link>https://blog.chensoul.cc/posts/2023/09/05/java-design-patterns-builder/</link>
      <pubDate>Tue, 05 Sep 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/09/05/java-design-patterns-builder/</guid>
      <description>本文主要介绍 Builder 构造器模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 构造器模式（Builder Pattern）是一种创建型设计模式，用于将复杂对象的构建过程与其表示分离，从而可以使用相同的构建过程创建不同的表示。
在构造器模式中，通常有两个主要角色：产品（Product）和建造 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Business Delegate</title>
      <link>https://blog.chensoul.cc/posts/2023/09/05/java-design-patterns-business-delegate/</link>
      <pubDate>Tue, 05 Sep 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/09/05/java-design-patterns-business-delegate/</guid>
      <description>本文主要介绍 Business Delegate 业务委托模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 业务委托模式（Business Delegate Pattern）在表示层和业务层之间引入了一个抽象层，旨在实现这两个层之间的松散耦合，并封装了有关如何定位、连接和交互业务对象的逻辑。
在该模式 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Bridge</title>
      <link>https://blog.chensoul.cc/posts/2023/08/28/java-design-patterns-bridge/</link>
      <pubDate>Mon, 28 Aug 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/28/java-design-patterns-bridge/</guid>
      <description>本文主要介绍 Bridge 桥接模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 桥接模式（Bridge Pattern）是一种结构型设计模式，用于将抽象与其实现分离，使它们可以独立地变化。桥接模式通过创建两个独立的层次结构，一个是抽象部分，一个是实现部分，来实现这种分离。
在桥接模式中，抽象部分包含 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Balking</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/java-design-patterns-balking/</link>
      <pubDate>Fri, 25 Aug 2023 08:50:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/25/java-design-patterns-balking/</guid>
      <description>本文主要介绍 Balking 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 止步模式（Balking）是一种在对象处于特定状态时才执行操作的设计模式。它用于防止对象在不完整或不合适的状态下执行某些代码，从而确保代码的正确性和一致性。
该模式的核心思想是，在执行操作之前，检查对象的状态，并只在特定的 …</description>
    </item>
    
    <item>
      <title>[译]REST API 的自定义错误消息处理</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/global-error-handler-in-a-spring-rest-api/</link>
      <pubDate>Fri, 25 Aug 2023 08:20:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/25/global-error-handler-in-a-spring-rest-api/</guid>
      <description>1. 概述 在本教程中，我们将讨论如何为 Spring REST API 实现全局错误处理程序。
我们将使用每个异常的语义为客户端构建有意义的错误消息，其明确的目标是为客户端提供所有信息以轻松诊断问题。
2. 自定义错误消息 让我们首先实现一个用于通过线路发送错误的简单结构 — ApiError：
public class ApiError { private HttpStatus status; …</description>
    </item>
    
    <item>
      <title>[译]使用Spring进行REST的错误处理</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/exception-handling-for-rest-with-spring/</link>
      <pubDate>Fri, 25 Aug 2023 08:05:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/25/exception-handling-for-rest-with-spring/</guid>
      <description>1. 概述 本教程将说明如何使用 Spring 为 REST API 实现异常处理。我们还将获得一些历史概述，并了解不同版本引入了哪些新选项。
在 Spring 3.2 之前，Spring MVC 应用程序中处理异常的两种主要方法是 HandlerExceptionResolver 或 @ExceptionHandler 注解。两者都有一些明显的缺点。
从 3.2 开始， …</description>
    </item>
    
    <item>
      <title>[译]使用@Async进行Spring Security上下文传播</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/spring-security-async-principal-propagation/</link>
      <pubDate>Fri, 25 Aug 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/25/spring-security-async-principal-propagation/</guid>
      <description>1. 简介 在本教程中，我们将重点关注使用 @Async 传播 Spring Security 主体 默认情况下，Spring Security 身份验证绑定到 ThreadLocal - 因此，当执行流在带有 @Async 的新线程中运行时，它不会是经过身份验证的上下文。
这并不理想——让我们解决它。
2.Maven 依赖 为了在 Spring Security 中使用异步集成， …</description>
    </item>
    
    <item>
      <title>[译]Spring Events</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/spring-events/</link>
      <pubDate>Fri, 25 Aug 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/25/spring-events/</guid>
      <description>1. 概述 在本教程中，我们将讨论如何在 Spring 中使用事件。
事件是框架中最容易被忽视的功能之一，但也是最有用的功能之一。与 Spring 中的许多其他功能一样，事件发布是 ApplicationContext 提供的功能之一。
有一些简单的准则需要遵循：
如果我们使用 Spring Framework 4.2 之前的版本，事件类应该扩展 ApplicationEvent。从 4.2 版本 …</description>
    </item>
    
    <item>
      <title>[译]如何在Spring中执行@Async</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/spring-async/</link>
      <pubDate>Fri, 25 Aug 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/25/spring-async/</guid>
      <description>1. 概述 在本教程中，我们将探讨 Spring 中的异步执行支持和 @Async 注解。
简单地说，用 @Async 注解 bean 的方法将使其在单独的线程中执行。换句话说，调用者不会等待被调用方法的完成。
Spring 的一个有趣的方面是，框架中的事件支持还 支持异步处理（如果需要）。
2.启用异步支持 让我们首先通过 Java 注解启用异步处理。
我们将通过将 @EnableAsync 添 …</description>
    </item>
    
    <item>
      <title>[译]Spring Boot项目如何实现JWT认证？</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-jwt-authentication-in-spring-boot-project/</link>
      <pubDate>Fri, 18 Aug 2023 12:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-jwt-authentication-in-spring-boot-project/</guid>
      <description>没有人可以否认这样一个事实：安全性是生产就绪应用程序的一项重要功能。尽管我们可以使用内存身份验证、JDBC 身份验证或通过 UserDetailsS​​ervice 来保护一个 Web 应用程序的安全。但是，当一个应用程序在内部使用其他应用程序的服务时，使用 Web 服务概念实现安全性就变得很重要。在这种情况下，我们使用具有特定有效期的令牌来保护我们的应用程序。此外，我们将学习“ …</description>
    </item>
    
    <item>
      <title>[译]没有WebSecurityConfigurerAdapter的Spring Security.md</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</link>
      <pubDate>Fri, 18 Aug 2023 11:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</guid>
      <description>在 Spring Security 模块的上下文中，WebSecurityConfigurerAdapter 是一个抽象类，根据 Spring 官方网站 2022 年 2 月 21 日发布的公告，该类已从 Spring Security 5.7.0-M2 中弃用。它通常用于扩展 configure() 方法由自定义配置子类实现。因此，它鼓励用户转向基于组件的安全配置。为了支持对这种新配置设计的更 …</description>
    </item>
    
    <item>
      <title>[译]如何在Spring Boot2中使用UserDetailsService实现安全性？</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</link>
      <pubDate>Fri, 18 Aug 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</guid>
      <description>继续上一篇关于实现 Spring Security 的两种不同方法的文章，在本文中，我们将学习第三种方法“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现 Security？”。经过上一篇文章后，我希望我们都非常熟悉安全性的基础知识，甚至是 Spring Boot 应用程序中的安全性基础知识。这次我们将创建一个用户注册表并将用户及其角色保存到数据库中。
然后， …</description>
    </item>
    
    <item>
      <title>[译]如何在Spring Boot3中使用UserDetailsService实现安全性？</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</link>
      <pubDate>Fri, 18 Aug 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</guid>
      <description>作为有关 Spring Security 的系列文章的继续，在本文中我们将学习“如何在 Spring Boot 3 中使用 UserDetailsService 实现 Spring Boot 中的安全性？”。经过前面的文章，我希望我们都非常熟悉安全性的基础知识，甚至 Spring Boot 应用程序中的安全性基础知识。 Spring Boot 3 发布后，我们将在这里实现“使用 Spring …</description>
    </item>
    
    <item>
      <title>[译]Spring Boot项目如何实现Security？</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot-project/</link>
      <pubDate>Fri, 18 Aug 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot-project/</guid>
      <description>如今，几乎每个客户都要求在实时应用程序中实现强大的安全功能。安全功能对于保持机密性、完整性和可用性的需求是非常有效的。现实世界中有很多类型的安全性，但我们作为开发人员将重点关注应用程序/软件安全性。
此外，在应用程序安全方面，我们的工作基本上是确保两件事。首先，只有有效的用户才能访问该应用程序。其次，如果用户有效，他/她只能访问该应用程序中允许的数据/信息。我认为，没有什么可以解释它们，因为您必须 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security 和 Spring Boot 入门</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security/</link>
      <pubDate>Wed, 16 Aug 2023 14:40:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security/</guid>
      <description>Spring Security 是一个有助于保护企业应用程序安全的框架。通过与 Spring MVC、Spring Webflux 或 Spring Boot 集成，我们可以创建一个强大且高度可定制的身份验证和访问控制框架。在本文中，我们将解释核心概念并仔细研究 Spring Security 提供的默认配置及其工作原理。我们将进一步尝试自定义它们并分析它们对示例 Spring Boot 应用程序 …</description>
    </item>
    
    <item>
      <title>[译]为 Spring Boot 应用程序创建优化的 Docker 映像</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-boot-docker/</link>
      <pubDate>Wed, 16 Aug 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-boot-docker/</guid>
      <description>容器已成为打包具有所有软件和操作系统依赖项的应用程序，然后将其传送到不同环境的首选方式。
本文着眼于容器化 Spring Boot 应用程序的不同方法：
使用 Docker 文件构建 Docker 镜像， 使用 Cloud-Native Buildpack 从源代码构建 OCI 映像， 通过使用分层工具将 JAR 的各个部分拆分为不同的层，在运行时优化映像。 示例代码 本文附有 GitHub 上的 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security：深入了解身份验证和授权</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-authentication-and-authorization/</link>
      <pubDate>Wed, 16 Aug 2023 12:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-authentication-and-authorization/</guid>
      <description>您可以使用本指南来了解 Spring Security 是什么以及其核心功能（如身份验证、授权或常见漏洞保护）如何工作。此外，还有全面的常见问题解答。
（编者注：大约 6500 字，您可能不想尝试在移动设备上阅读本文。将其添加为书签，稍后再回来。）
介绍 迟早每个人都需要为其项目添加安全性，在 Spring 生态系统中，您可以借助 Spring Security 库来实现这一点。
因此， …</description>
    </item>
    
    <item>
      <title>[译]深入了解Spring事务管理：@Transactional</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</link>
      <pubDate>Wed, 16 Aug 2023 12:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</guid>
      <description>您可以使用本指南来简单实用地了解 Spring 使用 @Transactional 注释进行事务管理的工作原理。
唯一的先决条件？您需要对 ACID 有一个粗略的了解，即什么是数据库事务以及为什么使用它们。此外，这里不讨论分布式事务或反应式事务，但就 Spring 而言，一般原则仍然适用。
介绍 在本指南中，您将了解 Spring 核心事务抽象框架的主要支柱（这是一个令人困惑的术语，不是吗？） - …</description>
    </item>
    
    <item>
      <title>[译]Spring Security - JWT</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-jwt/</link>
      <pubDate>Wed, 16 Aug 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-jwt/</guid>
      <description>简介和概述 JSON Web Token 或 JWT（更常见的名称）是一种开放的互联网标准 (RFC 7519)，用于以紧凑的方式在各方之间安全地传输可信信息。令牌包含编码为 JSON 对象的声明，并使用私有密钥或公钥/私钥对进行数字签名。它们是独立且可验证的，因为它们经过数字签名。 JWT 可以进行签名和/或加密。
签名的令牌验证令牌中包含的声明的完整性，而加密的令牌则向其他方隐藏声明。
JWT …</description>
    </item>
    
    <item>
      <title>[译]Spring Security - OAuth2</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-oauth2/</link>
      <pubDate>Wed, 16 Aug 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-oauth2/</guid>
      <description>OAuth 2.0 基础知识 OAuth 2.0 由 IETF OAuth 工作组开发并于 2012 年 10 月发布。它作为一种开放授权协议，使第三方应用程序能够代表资源所有者对 HTTP 服务进行有限访问。它可以在不泄露用户身份或长期凭证的情况下做到这一点。第三方应用程序本身也可以代表其使用它。
OAuth 的工作原理包括将用户身份验证委托给托管用户帐户的服务，并授权第三方应用程序访问用户的帐 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security - 表单登录、记住我和注销</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</link>
      <pubDate>Wed, 16 Aug 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</guid>
      <description>内容 简介和概述 入门（实用指南） 简介和概述 Spring Security 附带了大量内置功能和工具，为我们提供方便。在这个例子中，我们将讨论其中三个有趣且有用的功能 -
表单登录 记住账号 登出 表单登录 基于表单的登录是 Spring Security 提供支持的一种用户名/密码身份验证形式。这是通过 Html 表单提供的。
每当用户请求受保护的资源时，Spring Security 都会 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security - 使用数据库表单登录</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-with-database/</link>
      <pubDate>Wed, 16 Aug 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-with-database/</guid>
      <description>内容 简介和概述 Spring Security 的基本组件 AuthenticationFilter 认证过滤器 AuthenticationManager 认证管理器 AuthenticationProvider 认证提供者 UserDetailsService 用户详情服务 PasswordEncoder 密码编码器 Spring 安全上下文 表单登录 使用数据库登录 登录尝试限制 入门（实 …</description>
    </item>
    
    <item>
      <title>Spring Security和OAuth2发展过程</title>
      <link>https://blog.chensoul.cc/posts/2023/08/15/spring-security-oauth2-history/</link>
      <pubDate>Tue, 15 Aug 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/15/spring-security-oauth2-history/</guid>
      <description>Spring Security 的发展过程 Spring Security 是一个功能强大且广泛使用的安全框架，为企业级应用程序提供了全面的安全性。Spring Security 最初是 Acegi Security 项目的一部分，于 2004 年发布，现在已经成为 Spring 生态系统的核心组件。 Spring Security 的发展过程可以分为三个阶段：
第一阶段：Spring …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记17：减少可变性</title>
      <link>https://blog.chensoul.cc/posts/2023/08/14/minimize-mutability/</link>
      <pubDate>Mon, 14 Aug 2023 15:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/14/minimize-mutability/</guid>
      <description>本文是 《Effective Java 3》第四章《类和接口》的学习笔记：减少可变性。
原文 不可变类是实例不能被修改的类。每个实例中包含的所有信息在对象的生命周期内都是固定的，因此永远不会观察到任何更改。Java 库包含许多不可变的类，包括 String、基本类型的包装类、BigInteger 和 BigDecimal。这么做有很好的理由：不可变类比可变类更容易设计、实现和使用。它们不太容易出 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Async Method Invocation</title>
      <link>https://blog.chensoul.cc/posts/2023/08/14/java-design-patterns-async-method-invocation/</link>
      <pubDate>Mon, 14 Aug 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/14/java-design-patterns-async-method-invocation/</guid>
      <description>本文主要介绍 Async Method Invocation 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 Async Method Invocation（异步方法调用）是一种编程模式，用于处理异步操作和并发执行。它允许在执行某个操作时不阻塞主线程，而是将操作委托给另一个线程或处理程序，并在操作完 …</description>
    </item>
    
    <item>
      <title>Java设计模式：API Gateway </title>
      <link>https://blog.chensoul.cc/posts/2023/08/13/java-design-patterns-api-gateway/</link>
      <pubDate>Sun, 13 Aug 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/13/java-design-patterns-api-gateway/</guid>
      <description>本文主要介绍 API Gateway 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
目的 API 网关设计模式旨在将所有对微服务的调用聚合到一起。客户端通过调用 API 网关来实现对多个微服务的访问，而不是直接调用每个微服务。这种模式的目的是解决以下问题：
减少客户端的网络请求：如果客户端直接调用每个微 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Arrange/Act/Assert</title>
      <link>https://blog.chensoul.cc/posts/2023/08/13/java-design-patterns-arrange-act-assert/</link>
      <pubDate>Sun, 13 Aug 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/08/13/java-design-patterns-arrange-act-assert/</guid>
      <description>本文主要介绍 Arrange/Act/Assert 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 Arrange/Act/Assert（安排/执行/断言）又称 Given/When/Then，是一种测试设计模式，用于组织和编写单元测试的结构。它提供了一种清晰的测试布局，使得测试代码易于理解和维护。 …</description>
    </item>
    
    <item>
      <title>[译]Spring Boot授权服务器 - 使用 Java 的资源服务器和客户端凭证示例</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-authorization-server/</link>
      <pubDate>Wed, 26 Jul 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-authorization-server/</guid>
      <description>概述 在本文中，我们将创建一个授权服务器，为任何客户端生成 access_token。这称为 OAuth2 的 client_credentials 流程。它主要用于服务间通信。
我们将使用 spring boot oauth2 授权服务器依赖项来创建身份验证服务器。我们还将创建一个资源服务器和客户端来对其进行端到端测试。
Spring 授权服务器 我们首先创建授权服务器。
依赖项： 让我们将以下 …</description>
    </item>
    
    <item>
      <title>[译]Spring Boot异常处理完整指南</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-exception-handling/</link>
      <pubDate>Wed, 26 Jul 2023 08:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-exception-handling/</guid>
      <description>处理异常是构建健壮应用程序的重要部分。 Spring Boot 提供了不止一种方法。
本文将探讨这些方法，并提供一些关于何时某种给定方法可能优于另一种方法的指导。
示例代码 本文附有 GitHub 上的工作代码示例。
介绍 Spring Boot 为我们提供了处理异常的工具，而不仅仅是简单的“try-catch”块。为了使用这些工具，我们应用了一些注释，使我们能够将异常处理视为横切关注点： …</description>
    </item>
    
    <item>
      <title>[译]使用 Spring 的 Null-Safety 注解保护您的代码免受 NullPointerExceptions 的影响</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</link>
      <pubDate>Wed, 26 Jul 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</guid>
      <description>NullPointerExceptions （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。
我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添加了适当的检查，以保证对象引用不能为空，或者毕竟在对象为空时采取可能的安全措施。
由于 NullPointerException 是一个运行时异常，因此在代码编译过程中很难找出这种情况。 Java 的类型系 …</description>
    </item>
    
    <item>
      <title>[译]使用 Spring Boot 和 Spring Security 配置 CORS</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-cors/</link>
      <pubDate>Wed, 26 Jul 2023 07:20:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-cors/</guid>
      <description>跨源资源共享 (CORS) 是一种基于 HTTP 标头的机制，允许服务器显式将某些源列入白名单，并帮助绕过同源策略。
这是必需的，因为浏览器默认应用同源策略以确保安全。通过在 Web 应用程序中实施 CORS，网页可以请求额外的资源并从其他域加载到浏览器中。
本文将重点介绍在基于 Spring 的应用程序中实现 CORS 的各种方式。要详细了解 CORS 的工作原理，请参阅这篇优秀的介绍性文章。
 …</description>
    </item>
    
    <item>
      <title>[译]使用Spring Boot Actuator公开有用的信息端点</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-info-endpoint/</link>
      <pubDate>Wed, 26 Jul 2023 07:05:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-info-endpoint/</guid>
      <description>在分布式、快节奏的环境中，开发团队通常希望了解他们部署应用程序的时间、部署的应用程序版本、部署的 Git 提交等等。
Spring Boot Actuator 帮助我们监控和管理应用程序。它公开了提供应用程序运行状况、指标和其他相关信息的各种端点。
在本文中，我们将了解如何使用 Spring Boot Actuator 和 Maven/Gradle 构建插件将此类信息添加到我们的项目中。 …</description>
    </item>
    
    <item>
      <title>[译]在 Spring 中实现 OAuth2：使用范围（第 2 部分）</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring-scopes/</link>
      <pubDate>Wed, 26 Jul 2023 07:05:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring-scopes/</guid>
      <description>我们在上一篇文章中了解了基本的 OAuth2 概念以及如何在 Spring 中实现和执行不同的授权。在这篇文章中，我们将介绍 OAuth2 的另一个重要概念：范围。
OAuth 范围 保护对应用程序的访问通常分两个步骤进行：身份验证和授权。要理解这两个概念，假设您在绝密政府大楼工作。在开始之前，你会得到一张卡片，可以让你进入建筑物。 OAuth 令牌可以看作是允许您访问的卡片。
一旦你进去，你决定 …</description>
    </item>
    
    <item>
      <title>[译]在 Spring 中实现 OAuth2：第 1 部分</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/</link>
      <pubDate>Wed, 26 Jul 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/</guid>
      <description>OAuth2 是一组规范，主要提供对 Rest API 的安全访问的方法。 OAuth 的主要目的是允许通过使用令牌来执行身份验证和授权，而不必为每个操作提供凭据。由于本文的重点是实现，并且为了不重新发明轮子，可以查看 OAuth RFC 或维基百科以获取更多理论背景。在这篇文章中，我们将深入探讨 Spring 中的 OAuth2 实现以及如何使用不同的授权类型，但在此之前值得提供一些重要概念的简 …</description>
    </item>
    
    <item>
      <title>[译]使用Spring Boot2和Spring Security 5以及JDBC令牌存储进行Oauth2集中授权</title>
      <link>https://blog.chensoul.cc/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</link>
      <pubDate>Fri, 14 Jul 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</guid>
      <description>在这篇文章中，我们将了解如何使用 Spring Boot 2 和 Spring Security 5 OAuth2 来实现集中授权的授权服务器以及如何通过 GUI 对其进行管理，还将提供资源服务器演示以及 github 下的整个项目。
很多示例涵盖了基于早期版本的 Spring boot 2 和 Spring Security 5 使用内存令牌实现 Oauth2，因此想法是使用 MySql 数据库 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Ambassador</title>
      <link>https://blog.chensoul.cc/posts/2023/07/06/java-design-patterns-ambassador/</link>
      <pubDate>Thu, 06 Jul 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/07/06/java-design-patterns-ambassador/</guid>
      <description>本文主要介绍 Ambassador 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java …</description>
    </item>
    
    <item>
      <title>Java设计模式：Aggregator Microservices</title>
      <link>https://blog.chensoul.cc/posts/2023/06/26/java-design-patterns-aggregator-microservices/</link>
      <pubDate>Mon, 26 Jun 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/06/26/java-design-patterns-aggregator-microservices/</guid>
      <description>本文主要介绍 Aggregator Microservices 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记15：尽量减少类和成员的可访问性</title>
      <link>https://blog.chensoul.cc/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/</link>
      <pubDate>Thu, 15 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/</guid>
      <description>本文是 《Effective Java 3》第四章《类和接口》的学习笔记：尽量减少类和成员的可访问性。
类和接口是 Java 编程语言的核心。它们是抽象的基本单位。该语言提供了许多强大的元素，你可以使用它们来设计类和接口。
介绍 《Effective Java, Third Edition》这本书中的第四章主要讲述了如何尽量减少类和成员的可访问性，以提高代码的封装性、安全性和可维护性。
尽量减少类 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记16：在公共类中，使用访问器方法，而不是公共字段</title>
      <link>https://blog.chensoul.cc/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/</link>
      <pubDate>Thu, 15 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/</guid>
      <description>本文是 《Effective Java 3》第四章《类和接口》的学习笔记：在公共类中，使用访问器方法，而不是公共字段。
介绍 与其直接将类的内部字段公开为公共字段，推荐使用访问器方法（也称为 getter 和 setter）来访问和修改对象的状态。这样可以使类对其内部表示保持控制，并为类的客户端提供一种抽象程度。
通过使用访问器方法，您可以实现以下目标：
封装内部表示（Encapsulate …</description>
    </item>
    
    <item>
      <title>Java设计模式：Adapter</title>
      <link>https://blog.chensoul.cc/posts/2023/06/10/java-design-patterns-adapter/</link>
      <pubDate>Sat, 10 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/06/10/java-design-patterns-adapter/</guid>
      <description>本文主要介绍 Adapter 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java Design …</description>
    </item>
    
    <item>
      <title>Java设计模式：Visitor</title>
      <link>https://blog.chensoul.cc/posts/2023/06/02/java-design-patterns-visitor/</link>
      <pubDate>Fri, 02 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/06/02/java-design-patterns-visitor/</guid>
      <description>本文主要介绍 Visitor 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java Design …</description>
    </item>
    
    <item>
      <title>Java设计模式：Acyclic Visitor</title>
      <link>https://blog.chensoul.cc/posts/2023/06/01/java-design-patterns-acyclic-visitor/</link>
      <pubDate>Thu, 01 Jun 2023 09:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/06/01/java-design-patterns-acyclic-visitor/</guid>
      <description>本文主要介绍 Acyclic Visitor 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Active Object</title>
      <link>https://blog.chensoul.cc/posts/2023/05/26/java-design-patterns-active-object/</link>
      <pubDate>Fri, 26 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/26/java-design-patterns-active-object/</guid>
      <description>本文主要介绍 Active Object 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记14：考虑实现 Comparable 接口</title>
      <link>https://blog.chensoul.cc/posts/2023/05/26/consider-implementing-comparable/</link>
      <pubDate>Fri, 26 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/26/consider-implementing-comparable/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：考虑实现 Comparable 接口。
介绍 与本章讨论的其他方法不同，compareTo 方法不是在 Object 中声明的。相反，它是 Comparable 接口中的唯一方法。它在性质上类似于 Object 的 equals 方法，除了简单的相等比较之外，它还允许顺序比较，而且它是通用的。 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记13：明智地覆盖 clone 方法</title>
      <link>https://blog.chensoul.cc/posts/2023/05/26/override-clone-judiciously/</link>
      <pubDate>Fri, 26 May 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/26/override-clone-judiciously/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：明智地覆盖 clone 方法。
介绍 Cloneable 接口的目的是作为 mixin 接口，用于让类来宣称它们允许克隆。不幸的是，它没有达到这个目的。它的主要缺点是缺少 clone 方法，并且 Object 类的 clone 方法是受保护的。如果不求助于反射，就不能仅仅因为对象实现了 Cloneable …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记12：当覆盖 equals 方法时，总要覆盖 hashCode 方法</title>
      <link>https://blog.chensoul.cc/posts/2023/05/26/always-override-tostring/</link>
      <pubDate>Fri, 26 May 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/26/always-override-tostring/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：始终覆盖 toString 方法。
介绍 虽然 Object 提供 toString 方法的实现，但它返回的字符串通常不是类的用户希望看到的。它由后跟「at」符号（@）的类名和 hash 代码的无符号十六进制表示（例如 PhoneNumber@163b91）组成。toString 的通用约定是这么描述的，返回的字符串应 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记11：当覆盖 equals 方法时，总要覆盖 hashCode 方法</title>
      <link>https://blog.chensoul.cc/posts/2023/05/23/always-override-hashcode-when-you-override-equals/</link>
      <pubDate>Tue, 23 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/23/always-override-hashcode-when-you-override-equals/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：当覆盖 equals 方法时，总要覆盖 hashCode 方法。
介绍 在覆盖了 equals 方法的类中，必须覆盖 hashCode 方法。 如果你没有这样做，该类将违反 hashCode 方法的一般约定，这将阻止该类在 HashMap 和 HashSet 等集合中正常运行。以下是根据 Object 规范修改的约定： …</description>
    </item>
    
    <item>
      <title>Java设计模式：Abstract Document</title>
      <link>https://blog.chensoul.cc/posts/2023/05/22/java-design-patterns-abstract-document/</link>
      <pubDate>Mon, 22 May 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/22/java-design-patterns-abstract-document/</guid>
      <description>本文主要介绍 Abstract Document 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。 …</description>
    </item>
    
    <item>
      <title>Java设计模式：Abstract Factory</title>
      <link>https://blog.chensoul.cc/posts/2023/05/22/java-design-patterns-abstract-factory/</link>
      <pubDate>Mon, 22 May 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/22/java-design-patterns-abstract-factory/</guid>
      <description>本文主要介绍 Abstract Factory 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。 …</description>
    </item>
    
    <item>
      <title>JSR 166规范</title>
      <link>https://blog.chensoul.cc/posts/2023/05/18/jsr-166/</link>
      <pubDate>Thu, 18 May 2023 16:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/18/jsr-166/</guid>
      <description>JSR 介绍 JSR，全称 Java Specification Requests， 即 Java 规范提案， 主要是用于向 JCP(Java Community Process) 提出新增标准化技术规范的正式请求。每次 JAVA 版本更新都会有对应的 JSR 更新，比如在 Java 8 版本中，其新特性 Lambda 表达式对应的是 JSR 335，新的日期和时间 API 对应的是 JSR …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记10：覆盖equals方法时应遵守的约定</title>
      <link>https://blog.chensoul.cc/posts/2023/05/17/obey-the-general-contract-when-overriding-equals/</link>
      <pubDate>Wed, 17 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/17/obey-the-general-contract-when-overriding-equals/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：覆盖 equals 方法时应遵守的约定。
介绍 覆盖 equals 方法似乎很简单，但是有很多覆盖的方式会导致出错，而且后果可能非常严重。避免问题的最简单方法是不覆盖 equals 方法，在这种情况下，类的每个实例都只等于它自己。如果符合下列任何条件，就是正确的做法：
类的每个实例本质上都是唯一的。 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记9：使用 try-with-resources 优于 try-finally</title>
      <link>https://blog.chensoul.cc/posts/2023/05/08/prefer-try-with-resources-to-try-finally/</link>
      <pubDate>Mon, 08 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/08/prefer-try-with-resources-to-try-finally/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：使用 try-with-resources 优于 try-finally。
介绍 Java 库包含许多必须通过调用 close 方法手动关闭的资源。常见的有 InputStream、OutputStream 和 java.sql.Connection。关闭资源常常会被客户端忽略，这会导致可怕的性能后果。虽然这些资源中的许多都使用终结器作 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记8：避免使用终结器和清除器</title>
      <link>https://blog.chensoul.cc/posts/2023/05/08/avoid-finalizers-and-cleaners/</link>
      <pubDate>Mon, 08 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/08/avoid-finalizers-and-cleaners/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：避免使用终结器和清除器。
介绍 终结器是不可预测的、常常是危险的，通常也是不必要的。 它们的使用可能导致不稳定的行为、低效率和可移植性问题。终结器有一些有效的用途，我们稍后会介绍，但通常情况下应该避免使用它们。从 Java 9 开始，终结器已经被弃用，但它们仍然被 Java 库使用。Java 9 中终结器的替代品是清除器。 清除器的危险 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记7：排除过时的对象引用</title>
      <link>https://blog.chensoul.cc/posts/2023/05/05/eliminate-obsolete-object-references/</link>
      <pubDate>Fri, 05 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/05/eliminate-obsolete-object-references/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：排除过时的对象引用。
介绍 &amp;ldquo;Eliminate obsolete object references&amp;rdquo; 是一条 Java 编程最佳实践的原则，指的是在代码中及时清理不再使用的对象引用，以避免内存泄漏和性能问题。当一个对象不再需要时，应该尽快将其引用设置为 null，这样 JVM 可以及时回收它所占用的内存。
考 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记4：用私有构造函数使类不可实例化</title>
      <link>https://blog.chensoul.cc/posts/2023/05/05/enforce-noninstantiability-with-a-private-constructor/</link>
      <pubDate>Fri, 05 May 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/05/05/enforce-noninstantiability-with-a-private-constructor/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：用私有构造函数使类不可实例化。
介绍 使用私有构造函数强制实现不可实例化的主要原因是防止类被意外地实例化，以使代码更加健壮和可靠。在某些情况下，我们只需要使用类中的静态方法和静态字段，而不需要创建该类的实例。如果类中没有显式地定义私有构造函数，Java 编译器将会自动为该类生成一个默认的公共构造函数，这意味着该类可以在其他类中被实例化。 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记6：避免创建不必要的对象</title>
      <link>https://blog.chensoul.cc/posts/2023/04/24/avoid-creating-unnecessary-objects/</link>
      <pubDate>Mon, 24 Apr 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/04/24/avoid-creating-unnecessary-objects/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：避免创建不必要的对象。
介绍 创建对象时，经常会复用对象。如果对象是不可变的，那么它总是可以被复用的。
下面一个例子：
String s = new String(&amp;#34;bikini&amp;#34;); // DON&amp;#39;T DO THIS! 该语句每次执行时都会创建一个新的 String 实例，而这些对象创建都不是必需 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记5：依赖注入优于硬编码资源</title>
      <link>https://blog.chensoul.cc/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/</link>
      <pubDate>Mon, 17 Apr 2023 17:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。
介绍 依赖注入是软件工程中使用的一种设计模式，用于将组件和依赖项相互解耦。而不是在组件内部创建和管理依赖项，我们从外部传递它们。这种方法可以帮助创建更模块化和灵活的代码。
相比之下，硬编码资源涉及在组件内部直接创建和管理依赖项。这种方法可能会使代码不太灵活，难以维护。
举例  …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记3：使用私有构造函数或枚举类型创建单例</title>
      <link>https://blog.chensoul.cc/posts/2023/04/11/enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type/</link>
      <pubDate>Tue, 11 Apr 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/04/11/enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。
介绍 单例是一个只实例化一次的类。单例通常表示无状态对象，比如函数或系统组件，它们在本质上是唯一的。将一个类设计为单例会使它的客户端测试时变得困难， 除非它实现了作为其类型的接口，否则无法用模拟实现来代替单例。
实现 实现单例有两种常见的方法。两者都基于保持构造函数私有和导出 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记2：使用构造器代替构造方法</title>
      <link>https://blog.chensoul.cc/posts/2023/04/03/builder-instead-of-constructors/</link>
      <pubDate>Mon, 03 Apr 2023 16:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/04/03/builder-instead-of-constructors/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。
介绍 当一个类需要多个构造函数参数时，可以考虑使用构建器模式来创建对象。构建器模式是一种创建对象的设计模式，它可以通过链式调用方法的方式来设置对象的构造参数，并最终返回一个构造完整的对象。
优点 使用构建器模式的原因有以下几点：
避免构造函数参数过多的问题：当一个类需要多个构 …</description>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记1：静态工厂方法代替构造函数</title>
      <link>https://blog.chensoul.cc/posts/2023/04/03/static-factory-methods-instead-of-constructors/</link>
      <pubDate>Mon, 03 Apr 2023 12:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.cc/posts/2023/04/03/static-factory-methods-instead-of-constructors/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。
介绍 静态工厂方法是指在类中定义一个静态方法，用于创建该类的实例。示例：
public static Boolean valueOf(boolean b) { return b ? Boolean.TRUE : Boolean.FALSE; } 与构造函数不同的是，静态工厂方 …</description>
    </item>
    
  </channel>
</rss>
