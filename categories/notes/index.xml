<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Notes on ChenSoul</title>
    <link>https://blog.chensoul.com/categories/notes/</link>
    <description>Recent content in Notes on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 17 May 2023 10:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.com/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《Effective Java 3》笔记10：覆盖equals方法时应遵守的约定</title>
      <link>https://blog.chensoul.com/posts/2023/05/17/obey-the-general-contract-when-overriding-equals/</link>
      <pubDate>Wed, 17 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/17/obey-the-general-contract-when-overriding-equals/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：覆盖 equals 方法时应遵守的约定。 介绍 覆盖 equals 方法似乎很简单，但是有很多覆盖的方式</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：覆盖 equals 方法时应遵守的约定。</p>
<h2 id="介绍">介绍</h2>
<p>覆盖 equals 方法似乎很简单，但是有很多覆盖的方式会导致出错，而且后果可能非常严重。避免问题的最简单方法是不覆盖 equals 方法，在这种情况下，类的每个实例都只等于它自己。如果符合下列任何条件，就是正确的做法：</p>
<ul>
<li>
<p><strong>类的每个实例本质上都是唯一的。</strong> 对于像 Thread 这样表示活动实体类而不是值类来说也是如此。Object 提供的 equals 实现对于这些类具有完全正确的行为。</p>
</li>
<li>
<p><strong>该类不需要提供「逻辑相等」测试。</strong> 例如，<code>java.util.regex.Pattern</code> 可以覆盖 equals 来检查两个 Pattern 实例是否表示完全相同的正则表达式，但设计人员认为客户端不需要或不需要这个功能。在这种情况下，从 Object 继承的 equals 实现是理想的。</p>
</li>
<li>
<p><strong>超类已经覆盖了 equals，超类行为适合于这个类。</strong> 例如，大多数 Set 的实现从 AbstractSet 继承其对等实现，List 从 AbstractList 继承实现，Map 从 AbstractMap 继承实现。</p>
</li>
<li>
<p><strong>类是私有的或包私有的，并且你确信它的 equals 方法永远不会被调用。</strong> 如果你非常厌恶风险，你可以覆盖 equals 方法，以确保它不会意外调用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">throw</span> <span class="k">new</span> <span class="n">AssertionError</span><span class="o">();</span> <span class="c1">// Method is never called
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>什么时候覆盖 equals 方法是合适的？当一个类有一个逻辑相等的概念，而这个概念不同于仅判断对象的同一性（相同对象的引用），并且超类还没有覆盖 equals。对于值类通常是这样。值类只是表示值的类，例如 Integer 或 String。使用 equals 方法比较引用和值对象的程序员希望发现它们在逻辑上是否等价，而不是它们是否引用相同的对象。覆盖 equals 方法不仅是为了满足程序员的期望，它还使实例能够作为 Map 的键或 Set 元素时，具有可预测的、理想的行为。</p>
<p><strong>有一个表示状态的内部类。没有覆盖 equals 方法时，equals 的结果与 s1==s2 相同，为 false，即两者并不是相同对象的引用。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">class</span> <span class="nc">Status</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">String</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Status</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Status</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Status</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Status</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">==</span><span class="n">s2</span><span class="o">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p><strong>覆盖 equals 方法后，以业务逻辑来判断是否相同，具备相同 status 字段即为相同。在使用去重功能时，也以此作为判断依据。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">class</span> <span class="nc">Status</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">String</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">status</span><span class="o">,</span> <span class="o">((</span><span class="n">Status</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">status</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Status</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Status</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Status</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Status</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">==</span><span class="n">s2</span><span class="o">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>不需要覆盖 equals 方法的一种值类是使用实例控件来确保每个值最多只存在一个对象的类。枚举类型属于这一类。对于这些类，逻辑相等与对象标识相同，因此对象的 equals 方法函数与逻辑 equals 方法相同。</p>
<p>当你覆盖 equals 方法时，你必须遵守它的通用约定。以下是具体内容，来自 Object 规范：equals 方法实现了等价关系。它应有这些属性：</p>
<ul>
<li>反射性：对于任何非空的参考值 x，<code>x.equals(x)</code> 必须返回 true。</li>
<li>对称性：对于任何非空参考值 x 和 y，<code>x.equals(y)</code> 必须在且仅当 <code>y.equals(x)</code> 返回 true 时返回 true。</li>
<li>传递性：对于任何非空的引用值 x, y, z，如果 <code>x.equals(y)</code> 返回 true，<code>y.equals(z)</code> 返回 true，那么 <code>x.equals(z)</code> 必须返回 true。</li>
<li>一致性：对于任何非空的引用值 x 和 y, <code>x.equals(y)</code> 的多次调用必须一致地返回 true 或一致地返回 false，前提是不修改 equals 中使用的信息。</li>
<li>对于任何非空引用值 x，<code>x.equals(null)</code> 必须返回 false。</li>
</ul>
<p>除非你有数学方面的倾向，否则这些起来有点可怕，但不要忽略它！如果你违反了它，你的程序很可能会出现行为异常或崩溃，并且很难确定失败的根源。用 John Donne 的话来说，没有一个类是孤立的。一个类的实例经常被传递给另一个类。许多类（包括所有集合类）依赖于传递给它们的对象遵守 equals 约定。</p>
<p>既然你已经意识到了违反 equals 约定的危险，让我们详细讨论一下。好消息是，尽管表面上看起来很复杂，但其实并不复杂。一旦你明白了，就不难坚持下去了。</p>
<p>什么是等价关系？简单地说，它是一个操作符，它将一组元素划分为子集，子集的元素被认为是彼此相等的。这些子集被称为等价类。为了使 equals 方法有用，从用户的角度来看，每个等价类中的所有元素都必须是可互换的。现在让我们依次检查以下五个需求：</p>
<ul>
<li>
<p><strong>反射性</strong> ，第一个要求仅仅是说一个对象必须等于它自己。很难想象会无意中违反了这条规则。如果你违反了它，然后将类的一个实例添加到集合中，contains 方法很可能会说该集合不包含你刚才添加的实例。</p>
</li>
<li>
<p><strong>对称性</strong> ，第二个要求是任何两个对象必须在是否相等的问题上达成一致。与第一个要求不同，无意中违反了这个要求的情况不难想象。例如，考虑下面的类，它实现了不区分大小写的字符串。字符串的情况是保留的 toString，但忽略在 equals 的比较：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken - violates symmetry!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">CaseInsensitiveString</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">s</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">CaseInsensitiveString</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">s</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Broken - violates symmetry!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">CaseInsensitiveString</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(((</span><span class="n">CaseInsensitiveString</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="c1">// One-way interoperability!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">o</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>这个类中的 equals 方法天真地尝试与普通字符串进行互操作。假设我们有一个不区分大小写的字符串和一个普通字符串：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">CaseInsensitiveString</span> <span class="n">cis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CaseInsensitiveString</span><span class="o">(</span><span class="s">&#34;Polish&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;polish&#34;</span><span class="o">;</span>
</span></span></code></pre></div><p>正如预期的那样，<code>cis.equals(s)</code> 返回 true。问题是，虽然 CaseInsensitiveString 中的 equals 方法知道普通字符串，但是 String 中的 equals 方法对不区分大小写的字符串不知情。因此，<code>s.equals(cis)</code> 返回 false，这明显违反了对称性。假设你将不区分大小写的字符串放入集合中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">CaseInsensitiveString</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cis</span><span class="o">);</span>
</span></span></code></pre></div><p>此时 <code>list.contains(s)</code> 返回什么？谁知道呢？在当前的 OpenJDK 实现中，它碰巧返回 false，但这只是一个实现案例。在另一个实现中，它可以很容易地返回 true 或抛出运行时异常。一旦你违反了 equals 约定，就不知道当其他对象面对你的对象时，会如何表现。</p>
<blockquote>
<p><strong>contains 方法在 ArrayList 中的实现源码如下</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// ArrayList 的大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 保存 ArrayList 元素的容器，一个 Object 数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">transient</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">elementData</span><span class="o">;</span> <span class="c1">// non-private to simplify nested class access
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">contains</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">indexOf</span><span class="o">(</span><span class="n">o</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">indexOf</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">indexOfRange</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">indexOfRange</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elementData</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">es</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">es</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></blockquote>
</li>
</ul>
<p>​		为了消除这个问题，只需从 equals 方法中删除与 String 互操作的错误尝试。一旦你这样做了，你可以重构方法为一个单一的返回语句：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">o</span> <span class="k">instanceof</span> <span class="n">CaseInsensitiveString</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">CaseInsensitiveString</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">s</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><strong>传递性</strong> ，equals 约定的第三个要求是，如果一个对象等于第二个对象，而第二个对象等于第三个对象，那么第一个对象必须等于第三个对象。同样，无意中违反了这个要求的情况不难想象。考虑向超类添加新的值组件时，子类的情况。换句话说，子类添加了一条影响 equals 比较的信息。让我们从一个简单的不可变二维整数点类开始：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">Point</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Point</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="n">Point</span><span class="o">)</span><span class="n">o</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>假设你想继承这个类，对一个点添加颜色的概念：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ColorPoint</span> <span class="kd">extends</span> <span class="n">Point</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Color</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ColorPoint</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="n">Color</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>equals 方法应该是什么样子？如果你完全忽略它，则实现将从 Point 类继承而来，在 equals 比较中颜色信息将被忽略。虽然这并不违反 equals 约定，但显然是不可接受的。假设你写了一个 equals 方法，该方法只有当它的参数是另一个颜色点，且位置和颜色相同时才返回 true：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken - violates symmetry!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">ColorPoint</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">o</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">ColorPoint</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">color</span> <span class="o">==</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这种方法的问题是，当你比较一个点和一个颜色点时，你可能会得到不同的结果，反之亦然。前者比较忽略颜色，而后者比较总是返回 false，因为参数的类型是不正确的。为了使问题更具体，让我们创建一个点和一个颜色点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Point</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ColorPoint</span> <span class="n">cp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ColorPoint</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
</span></span></code></pre></div><p>然后，<code>p.equals(cp)</code> 返回 true，而 <code>cp.equals(p)</code> 返回 false。当你做「混合比较」的时候，你可以通过让 <code>ColorPoint.equals</code> 忽略颜色来解决这个问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken - violates transitivity!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">Point</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// If o is a normal Point, do a color-blind comparison
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">ColorPoint</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// o is a ColorPoint; do a full comparison
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">o</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">ColorPoint</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">color</span> <span class="o">==</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这种方法确实提供了对称性，但牺牲了传递性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ColorPoint</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ColorPoint</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">Point</span> <span class="n">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ColorPoint</span> <span class="n">p3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ColorPoint</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLUE</span><span class="o">);</span>
</span></span></code></pre></div><p>现在，<code>p1.equals(p2)</code> 和 <code>p2.equals(p3)</code> 返回 true，而 <code>p1.equals(p3)</code> 返回 false，这明显违反了传递性。前两个比较是「色盲」，而第三个比较考虑了颜色。</p>
<p>同样，这种方法会导致无限的递归：假设有两个点的子类，比如 ColorPoint 和 SmellPoint，每个都使用这种 equals 方法。然后调用 <code>myColorPoint.equals(mySmellPoint)</code> 会抛出 StackOverflowError。</p>
<p>那么解决方案是什么？这是面向对象语言中等价关系的一个基本问题。<strong>除非你愿意放弃面向对象的抽象优点，否则无法继承一个可实例化的类并添加一个值组件，同时保留 equals 约定。</strong></p>
<p>你可能会听到它说你可以继承一个实例化的类并添加一个值组件，同时通过在 equals 方法中使用 getClass 测试来代替 instanceof 测试来保持 equals 约定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken - violates Liskov substitution principle (page 43)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">getClass</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Point</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="n">Point</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>只有当对象具有相同的实现类时，才会产生相等的效果。这可能看起来不是很糟糕，但其后果是不可接受的：Point 的子类的实例仍然是一个 Point，并且它仍然需要作为一个函数来工作，但是如果采用这种方法，它就不会这样做！假设我们要写一个方法来判断一个点是否在单位圆上。我们可以这样做：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Initialize unitCircle to contain all Points on the unit circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">unitCircle</span> <span class="o">=</span> <span class="n">Set</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">Point</span><span class="o">(</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">Point</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">onUnitCircle</span><span class="o">(</span><span class="n">Point</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">unitCircle</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>虽然这可能不是实现功能的最快方法，但它工作得很好。假设你以一种不添加值组件的简单方式继承 Point，例如，让它的构造函数跟踪创建了多少实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CounterPoint</span> <span class="kd">extends</span> <span class="n">Point</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">AtomicInteger</span> <span class="n">counter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">CounterPoint</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">counter</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">numberCreated</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">counter</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Liskov 替换原则指出，类型的任何重要属性都应该适用于所有子类型，因此为类型编写的任何方法都应该在其子类型上同样有效。这是我们先前做的正式声明，即点的子类（如 CounterPoint）仍然是一个 Point，并且必须作为一个 Point。但假设我们传递了一个 CounterPoint 给 onUnitCircle 方法。如果 Point 类使用基于 getclass 的 equals 方法，那么不管 CounterPoint 实例的 x 和 y 坐标如何，onUnitCircle 方法都会返回 false。这是因为大多数集合，包括 onUnitCircle 方法使用的 HashSet，都使用 equals 方法来测试包含性，没有一个 CounterPoint 实例等于任何一个点。但是，如果你在 Point 上使用了正确的基于实例的 equals 方法，那么在提供对位实例时，相同的 onUnitCircle 方法就可以很好地工作。</p>
<blockquote>
<p><strong>里氏替换原则（Liskov Substitution Principle，LSP）面向对象设计的基本原则之一。里氏替换原则指出：任何父类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当衍生类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正被复用，而衍生类也能够在父类的基础上增加新的行为。</strong></p>
</blockquote>
</li>
</ul>
<p>虽然没有令人满意的方法来继承一个可实例化的类并添加一个值组件，但是有一个很好的解决方案：遵循的建议，「Favor composition over inheritance.」。给 ColorPoint 一个私有的 Point 字段和一个 public 视图方法，而不是让 ColorPoint 继承 Point，该方法返回与这个颜色点相同位置的点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Adds a value component without violating the equals contract
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ColorPoint</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Point</span> <span class="n">point</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Color</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ColorPoint</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="n">Color</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">    * Returns the point-view of this color point.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Point</span> <span class="nf">asPoint</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">point</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">ColorPoint</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ColorPoint</span> <span class="n">cp</span> <span class="o">=</span> <span class="o">(</span><span class="n">ColorPoint</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cp</span><span class="o">.</span><span class="na">point</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">point</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">cp</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Java 库中有一些类确实继承了一个可实例化的类并添加了一个值组件。例如，<code>java.sql.Timestamp</code> 继承 <code>java.util.Date</code> 并添加了纳秒字段。如果在同一个集合中使用时间戳和日期对象，或者以其他方式混合使用时间戳和日期对象，那么时间戳的 equals 实现确实违反了对称性，并且可能导致不稳定的行为。Timestamp 类有一个免责声明，警告程序员不要混合使用日期和时间戳。虽然只要将它们分开，就不会遇到麻烦，但是没有什么可以阻止你将它们混合在一起，因此产生的错误可能很难调试。时间戳类的这种行为是错误的，不应该效仿。</p>
<p>注意，你可以向抽象类的子类添加一个值组件，而不违反 equals 约定。这对于遵循中的建议而得到的类层次结构很重要，「Prefer class hierarchies to tagged classes.」。例如，可以有一个没有值组件的抽象类形状、一个添加半径字段的子类圆和一个添加长度和宽度字段的子类矩形。只要不可能直接创建超类实例，前面显示的那种问题就不会发生。</p>
<ul>
<li>
<p><strong>非无效性</strong> ，最后的要求没有一个正式的名称，所以我冒昧地称之为「非无效性」。它说所有对象都不等于 null。虽然很难想象在响应调用 <code>o.equals(null)</code> 时意外地返回 true，但不难想象意外地抛出 NullPointerException。一般约定中禁止这样做。许多类都有相等的方法，通过显式的 null 测试来防止它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个测试是不必要的。要测试其参数是否相等，equals 方法必须首先将其参数转换为适当的类型，以便能够调用其访问器或访问其字段。在执行转换之前，方法必须使用 instanceof 运算符来检查其参数的类型是否正确：</p>
<p>如果缺少这个类型检查，并且 equals 方法传递了一个错误类型的参数，equals 方法将抛出 ClassCastException，这违反了 equals 约定。但是，如果 instanceof 操作符的第一个操作数为空，则指定该操作符返回 false，而不管第二个操作数中出现的是什么类型。因此，如果传入 null，类型检查将返回 false，因此不需要显式的 null 检查。</p>
</li>
</ul>
<p>综上所述，这里有一个高质量构建 equals 方法的秘诀：</p>
<p>1、<strong>使用 == 运算符检查参数是否是对该对象的引用。</strong> 如果是，返回 true。这只是一种性能优化，但如果比较的代价可能很高，那么这种优化是值得的。</p>
<p>2、<strong>使用 instanceof 运算符检查参数是否具有正确的类型。</strong> 如果不是，返回 false。通常，正确的类型是方法发生的类。有时候，它是由这个类实现的某个接口。如果类实现了一个接口，该接口对 equals 约定进行了改进，以允许跨实现该接口的类进行比较，则使用该接口。集合接口，如 Set、List、Map 和 Map.Entry 具有此属性。</p>
<p>3、<strong>将参数转换为正确的类型。</strong> 因为在这个强制类型转换之前有一个实例测试，所以它肯定会成功。</p>
<p>4、<strong>对于类中的每个「重要」字段，检查参数的字段是否与该对象的相应字段匹配。</strong> 如果所有这些测试都成功，返回 true；否则返回 false。如果第 2 步中的类型是接口，则必须通过接口方法访问参数的字段；如果是类，你可以根据字段的可访问性直接访问它们。</p>
<p>对于类型不是 float 或 double 的基本类型字段，使用 == 运算符进行比较；对于对象引用字段，递归调用 equals 方法；对于 float 字段，使用 <code>static Float.compare(float,float)</code> 方法；对于 double 字段，使用 <code>Double.compare(double, double)</code>。float 和 double 字段的特殊处理是由于 <code>Float.NaN</code>、-0.0f 和类似的双重值的存在而必须的；请参阅 Float.equals<code>文档。虽然你可以将 float 和 double 字段与静态方法 Float.equals 和 Double.equals 进行比较，这将需要在每个比较上进行自动装箱，这将有较差的性能。对于数组字段，将这些指导原则应用于每个元素。如果数组字段中的每个元素都很重要，那么使用</code>Arrays.equals` 方法之一。</p>
<p>一些对象引用字段可能合法地包含 null。为了避免可能出现 NullPointerException，请使用静态方法 <code>Objects.equals(Object, Object)</code> 检查这些字段是否相等。</p>
<p>对于某些类，例如上面的 CaseInsensitiveString，字段比较比简单的 equal 测试更复杂。如果是这样，你可能希望存储字段的规范形式，以便 equals 方法可以对规范形式进行廉价的精确比较，而不是更昂贵的非标准比较。这种技术最适合于不可变类；如果对象可以更改，则必须使规范形式保持最新。</p>
<p>equals 方法的性能可能会受到字段比较顺序的影响。为了获得最佳性能，你应该首先比较那些更可能不同、比较成本更低的字段，或者理想情况下两者都比较。不能比较不属于对象逻辑状态的字段，例如用于同步操作的锁字段。你不需要比较派生字段（可以从「重要字段」计算），但是这样做可能会提高 equals 方法的性能。如果派生字段相当于整个对象的摘要描述，那么如果比较失败，比较该字段将节省比较实际数据的开销。例如，假设你有一个多边形类，你缓存这个区域。如果两个多边形的面积不相等，你不需要比较它们的边和顶点。</p>
<p><strong>写完 equals 方法后，问自己三个问题：它具备对称性吗？具备传递性吗？具备一致性吗？</strong> 不要只问自己，要编写单元测试来检查，除非使用 AutoValue（第 49 页）来生成 equals 方法，在这种情况下，你可以安全地省略测试。如果属性不能保持，请找出原因，并相应地修改 equals 方法。当然，equals 方法还必须满足其他两个属性（反射性和非无效性），但这两个通常会自己处理。</p>
<p>在这个简单的 PhoneNumber 类中，根据前面的方法构造了一个 equals 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Class with a typical equals method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">short</span> <span class="n">areaCode</span><span class="o">,</span> <span class="n">prefix</span><span class="o">,</span> <span class="n">lineNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">PhoneNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">areaCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">prefix</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineNum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">areaCode</span> <span class="o">=</span> <span class="n">rangeCheck</span><span class="o">(</span><span class="n">areaCode</span><span class="o">,</span> <span class="mi">999</span><span class="o">,</span> <span class="s">&#34;area code&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">prefix</span> <span class="o">=</span> <span class="n">rangeCheck</span><span class="o">(</span><span class="n">prefix</span><span class="o">,</span> <span class="mi">999</span><span class="o">,</span> <span class="s">&#34;prefix&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">lineNum</span> <span class="o">=</span> <span class="n">rangeCheck</span><span class="o">(</span><span class="n">lineNum</span><span class="o">,</span> <span class="mi">9999</span><span class="o">,</span> <span class="s">&#34;line num&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">short</span> <span class="nf">rangeCheck</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">,</span> <span class="kt">int</span> <span class="n">max</span><span class="o">,</span> <span class="n">String</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="n">arg</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="n">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="kt">short</span><span class="o">)</span> <span class="n">val</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="k">this</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">PhoneNumber</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">PhoneNumber</span> <span class="n">pn</span> <span class="o">=</span> <span class="o">(</span><span class="n">PhoneNumber</span><span class="o">)</span><span class="n">o</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">pn</span><span class="o">.</span><span class="na">lineNum</span> <span class="o">==</span> <span class="n">lineNum</span> <span class="o">&amp;&amp;</span> <span class="n">pn</span><span class="o">.</span><span class="na">prefix</span> <span class="o">==</span> <span class="n">prefix</span> <span class="o">&amp;&amp;</span> <span class="n">pn</span><span class="o">.</span><span class="na">areaCode</span> <span class="o">==</span> <span class="n">areaCode</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>以下是一些最后的警告：</p>
<ul>
<li>
<p><strong>当你覆盖 equals 时，也覆盖 hashCode。</strong></p>
</li>
<li>
<p><strong>不要自作聪明。</strong> 如果你只是为了判断相等性而测试字段，那么遵循 equals 约定并不困难。如果你在寻求对等方面过于激进，很容易陷入麻烦。一般来说，考虑到任何形式的混叠都不是一个好主意。例如，File 类不应该尝试将引用同一文件的符号链接等同起来。值得庆幸的是，它不是。</p>
</li>
<li>
<p><strong>不要用另一种类型替换 equals 声明中的对象。</strong> 对于程序员来说，编写一个类似于这样的 equals 方法，然后花上几个小时思考为什么它不能正常工作是很常见的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken - parameter type must be Object!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">MyClass</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这里的问题是，这个方法没有覆盖其参数类型为 Object 的 Object.equals，而是重载了它。即使是普通的方法，提供这样一个「强类型的」equals 方法是不可接受的，因为它会导致子类中的重写注释产生误报并提供错误的安全性。</p>
<p>如本条目所示，一致使用 Override 注释将防止你犯此错误。这个 equals 方法不会编译，错误消息会告诉你什么是错误的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Still broken, but won’t compile
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">MyClass</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>编写和测试 equals （和 hashCode）方法很乏味，生成的代码也很单调。手动编写和测试这些方法的一个很好的替代方法是使用谷歌的开源 AutoValue 框架，它会自动为你生成这些方法，由类上的一个注释触发。在大多数情况下，AutoValue 生成的方法与你自己编写的方法基本相同。</p>
<p>IDE 也有生成 equals 和 hashCode 方法的功能，但是生成的源代码比使用 AutoValue 的代码更冗长，可读性更差，不会自动跟踪类中的变化，因此需要进行测试。也就是说，让 IDE 生成 equals（和 hashCode）方法通常比手动实现更可取，因为 IDE 不会出现粗心的错误，而人会。</p>
<p>总之，除非必须，否则不要覆盖 equals 方法：在许多情况下，从 Object 继承而来的实现正是你想要的。如果你确实覆盖了 equals，那么一定要比较类的所有重要字段，并以保留 equals 约定的所有 5 项规定的方式进行比较。</p>
</li>
</ul>
<h2 id="总结">总结</h2>
<p>《Effective Java》第三版的第10条内容讲解了在重写Java中的<code>equals</code>方法时，遵循通用协定的重要性。<code>equals</code>方法用于确定两个对象是否相等。</p>
<p>通用协定定义了<code>equals</code>方法必须具有以下特性：</p>
<ol>
<li>反射性：对于任何非空的<code>x</code>，<code>x.equals(x)</code>必须返回<code>true</code>。</li>
<li>对称性：对于任何非空引用<code>x</code>和<code>y</code>，如果<code>x.equals(y)</code>返回<code>true</code>，则<code>y.equals(x)</code>必须返回<code>true</code>。</li>
<li>传递性：对于任何非空引用<code>x</code>、<code>y</code>和<code>z</code>，如果<code>x.equals(y)</code>返回<code>true</code>并且<code>y.equals(z)</code>返回<code>true</code>，则<code>x.equals(z)</code>必须返回<code>true</code>。</li>
<li>一致性：对于任何非空引用<code>x</code>和<code>y</code>，多次调用<code>x.equals(y)</code>必须始终返回<code>true</code>或始终返回<code>false</code>，前提是在equals比较中使用的信息未被修改。</li>
<li>可空性：对于任何非空引用<code>x</code>，<code>x.equals(null)</code>必须返回<code>false</code>。</li>
</ol>
<p>在重写<code>equals</code>方法时，重要的是要确保满足这些特性。此外，建议遵循一些最佳实践，例如：</p>
<ol>
<li>
<p>比较前检查引用是否相同：如果两个对象引用相同，即它们指向同一个对象，那么它们一定相等。在比较两个对象之前，首先使用<code>==</code>运算符检查它们的引用是否相同，以提高效率。</p>
</li>
<li>
<p>比较对象类型：在比较两个对象之前，首先使用<code>instanceof</code>运算符检查它们是否属于同一个类。如果不是，那么它们不可能相等。这样可以避免在继承层次结构中出现问题。</p>
</li>
<li>
<p>比较每个重要字段：在比较两个对象时，需要比较它们的每个重要字段。对于基本类型字段，使用<code>==</code>运算符进行比较；对于对象引用字段，递归调用<code>Objects.equals()</code>方法比较；对于<code>float</code>和<code>double</code>类型的字段，使用<code>Float.compare</code>和<code>Double.compare</code>方法进行比较；对于数组字段，使用<code>Arrays.equals</code>方法进行比较。</p>
</li>
<li>
<p>覆盖<code>hashCode</code>方法：根据通用协定，如果两个对象相等，它们的<code>hashCode</code>值也必须相等。因此，在重写<code>equals</code>方法时，通常也需要重写<code>hashCode</code>方法，以确保对象的相等性被正确地判断，并且避免散列表中出现哈希冲突。</p>
</li>
<li>
<p>考虑使用<code>@Override</code>注释指示您正在覆盖<code>equals</code>方法。</p>
</li>
<li>
<p>不将<code>equals</code>方法定义为只接受特定类型的参数：<code>equals</code>方法的参数类型应该是<code>Object</code>类型，而不是具体的类或接口类型。这样可以确保<code>equals</code>方法可以比较任何类型的对象，而不仅仅是特定类型的对象。</p>
</li>
<li>
<p>不使用<code>getClass</code>方法比较对象类型：在比较两个对象的类型时，不应该使用<code>getClass</code>方法，而应该使用<code>instanceof</code>运算符。这是因为<code>getClass</code>方法可能会被子类重写，并返回不同的结果，从而导致比较结果出现问题。</p>
</li>
<li>
<p>不将<code>equals</code>方法与<code>==</code>运算符混淆：<code>equals</code>方法用于比较对象的内容，而<code>==</code>运算符用于比较对象的引用。在比较两个对象时，应该使用<code>equals</code>方法而不是<code>==</code>运算符。</p>
</li>
<li>
<p>不将<code>equals</code>方法与<code>compareTo</code>方法混淆：<code>equals</code>方法用于比较对象的内容，而<code>compareTo</code>方法用于比较对象的顺序。在比较两个对象时，应该使用适当的方法，避免混淆它们的作用。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git Flow分支模型和使用</title>
      <link>https://blog.chensoul.com/posts/2023/05/11/git-flow-model-and-usage/</link>
      <pubDate>Thu, 11 May 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/11/git-flow-model-and-usage/</guid>
      <description>介绍 Git Flow 是由Vincent Driessen在2010年提出的一种Git工作流。在这之前，Git没有一个明确的标准工作流，导致团队在使用Git</description>
      <content:encoded><![CDATA[<h2 id="介绍">介绍</h2>
<p><a href="https://nvie.com/posts/a-successful-git-branching-model/">Git Flow</a> 是由Vincent Driessen在2010年提出的一种Git工作流。在这之前，Git没有一个明确的标准工作流，导致团队在使用Git时往往会遇到一些问题，如分支管理、版本控制等。为了解决这些问题，Vincent Driessen提出了Git Flow分支模型，成为了Git在实际应用中的一种标准工作流。</p>
<p>随着时间的推移，Git Flow也在不断发展和完善。在2011年，Atlassian发布了SourceTree，这是一款图形化的Git客户端，支持Git Flow分支模型。在2013年，Git Flow的一些开发者发布了Git Flow AVH Edition，这是Git Flow的一个增强版本，提供了更多的功能和选项。此外，Git Flow还得到了其他开源工具和平台的支持，如GitHub、GitLab等。</p>
<h2 id="git-flow-分支模型">Git Flow 分支模型</h2>
<p>Git Flow分支模型定义了一种标准的Git分支模型，它将代码分为两个长期分支（master和develop）和三个短期分支（feature、release和hotfix），使得团队可以更好地管理代码的版本和发布。</p>
<p>以下是Git Flow分支模型的详细介绍：</p>
<ol>
<li>master分支
master分支是代码库的主分支，它包含了所有已发布的代码和版本。所有代码都应该在该分支上进行测试和验证，以确保代码的质量和稳定性。<code>master分支只能通过合并release或hotfix分支来更新</code>。</li>
<li>develop分支
develop分支是代码库的开发分支，它包含了所有开发中的代码和功能。所有新的代码都应该在该分支上进行开发和测试，以确保代码的可靠性和稳定性。<code>develop分支只能通过合并feature分支来更新</code>。</li>
<li>feature分支
feature分支是为开发新的功能或修复bug而创建的临时分支。<code>每个feature分支都是从develop分支分离出来的，开发完成后会合并回develop分支</code>。feature分支的命名应该清晰明确，以反映该分支所涉及的功能或问题。</li>
<li>release分支
release分支是为发布新版本而创建的临时分支。<code>每个release分支都是从develop分支分离出来的，发布完成后会合并回develop分支和master分支</code>。在release分支上可以进行一些小的修复和调整，以确保发布的代码的质量和稳定性。</li>
<li>hotfix分支
hotfix分支是为快速修复生产环境中的问题而创建的临时分支。每个hotfix分支都是从master分支分离出来的，修复完成后会合并回develop分支和master分支。<code>hotfix分支的优先级比其他分支更高，因为它们需要尽快修复生产环境中的问题。</code></li>
</ol>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/git-model@2x.png" alt="img"  />
</p>
<p>根据上面的理论，我们来实际操作一遍。首先，是 develop 分支创建一个 feature 分支。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout -b feature-test develop
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s2">&#34;feature-test&#34;</span>
</span></span></code></pre></div><p>将 feature 分支的修改合并到 develop 分支，然后删除 feature 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;develop&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git merge --no-ff feature-test
</span></span><span class="line"><span class="cl">Updating ea1b82a..05e9557
</span></span><span class="line"><span class="cl"><span class="o">(</span>Summary of changes<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git branch -d feature-test
</span></span><span class="line"><span class="cl">Deleted branch feature-test <span class="o">(</span>was 05e9557<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git push origin develop
</span></span></code></pre></div><p>合并分支时，添加<code>--no-ff</code> 参数和不添加的区别：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/merge-without-ff@2x.png" alt="img"  />
</p>
<p>从 develop 分支创建一个 release 分支，并将版本号改为 1.2 ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout -b release-1.2 develop
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s2">&#34;release-1.2&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ./bump-version.sh 1.2
</span></span><span class="line"><span class="cl">Files modified successfully, version bumped to 1.2.
</span></span><span class="line"><span class="cl">$ git commit -a -m <span class="s2">&#34;Bumped version number to 1.2&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>release-1.2 74d9424<span class="o">]</span> Bumped version number to 1.2
</span></span><span class="line"><span class="cl"><span class="m">1</span> files changed, <span class="m">1</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">1</span> deletions<span class="o">(</span>-<span class="o">)</span>
</span></span></code></pre></div><p>release 分支完成开发之后，将 release 分支合并到 master 分支，并创建一个标签：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout master
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;master&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.2
</span></span><span class="line"><span class="cl">Merge made by recursive.
</span></span><span class="line"><span class="cl"><span class="o">(</span>Summary of changes<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git tag -a 1.2
</span></span></code></pre></div><p>将 release 分支合并到 develop 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;develop&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.2
</span></span><span class="line"><span class="cl">Merge made by recursive.
</span></span><span class="line"><span class="cl"><span class="o">(</span>Summary of changes<span class="o">)</span>
</span></span></code></pre></div><p>最后删除 release 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git branch -d release-1.2
</span></span><span class="line"><span class="cl">Deleted branch release-1.2 <span class="o">(</span>was ff452fe<span class="o">)</span>.
</span></span></code></pre></div><p>对于 hoftfix 分支，操作步骤和 release 分支类似，故不在赘述。</p>
<h2 id="git-flow-工具">git-flow 工具</h2>
<p>git-flow 工具可以简化上面的操作步骤，关于 git-flow的介绍可以参考文章：<a href="https://jeffkreeftmeijer.com/git-flow/">Using git-flow to automate your git branching workflow</a>。</p>
<p>macos 上安装 git-flow：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install git-flow
</span></span></code></pre></div><p>git-flow 首先需要初始化，如果不存在 develop 分支，则会新建一个 develop 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow init
</span></span><span class="line"><span class="cl">No branches exist yet. Base branches must be created now.
</span></span><span class="line"><span class="cl">Branch name <span class="k">for</span> production releases: <span class="o">[</span>master<span class="o">]</span>
</span></span><span class="line"><span class="cl">Branch name <span class="k">for</span> <span class="s2">&#34;next release&#34;</span> development: <span class="o">[</span>develop<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">How to name your supporting branch prefixes?
</span></span><span class="line"><span class="cl">Feature branches? <span class="o">[</span>feature-<span class="o">]</span>
</span></span><span class="line"><span class="cl">Release branches? <span class="o">[</span>release-<span class="o">]</span>
</span></span><span class="line"><span class="cl">Hotfix branches? <span class="o">[</span>hotfix/<span class="o">]</span>
</span></span><span class="line"><span class="cl">Support branches? <span class="o">[</span>support/<span class="o">]</span>
</span></span><span class="line"><span class="cl">Version tag prefix? <span class="o">[]</span>
</span></span></code></pre></div><h3 id="feature-分支">feature 分支</h3>
<p>开发一个新功能，创建一个新分支 foo</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="err">$</span> <span class="nx">git</span> <span class="nx">flow</span> <span class="nx">feature</span> <span class="nx">start</span> <span class="nx">foo</span>
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#切换到develop分支,确保新的 feature 分支是基于最新的 develop 分支创建的。</span>
</span></span><span class="line"><span class="cl">$ git checkout -b feature-foo develop
</span></span></code></pre></div><p>取消正在进行中的功能分支，并且会将分支删除</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow feature delete foo
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git branch -D feature-foo
</span></span></code></pre></div><p>foo 功能自测通过后，合并到 develop</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow feature finish foo
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">//切换到 develop 分支
</span></span><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl">//将 feature-foo 分支中的更改合并到 develop 分支。 --no-ff 参数将保留 foo 分支的commit记录。
</span></span><span class="line"><span class="cl">$ git merge --no-ff feature-foo
</span></span><span class="line"><span class="cl">//删除已完成的分支
</span></span><span class="line"><span class="cl">$ git branch -d feature-foo
</span></span></code></pre></div><h3 id="release-分支">release 分支</h3>
<p>当所有新的功能和必要的修复已经被彻底的测试过了，那就开始生成一个新的 release , 在此之后不能添加新功能，只有错误修复、文档生成和其他面向发布的任务应该在该分支中进行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 1.0.0 是版本号</span>
</span></span><span class="line"><span class="cl">$ git flow release start 1.0.0
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 从 develop 分支 创建release分支</span>
</span></span><span class="line"><span class="cl">$ git checkout -b release-1.0.0 develop
</span></span></code></pre></div><p>取消正在进行中的发布分支，并且会将分支删除。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow release delete 1.0.0
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch -D release-1.0.0
</span></span></code></pre></div><p>添加完发布文档之后，完成 release</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow release finish 1.0.0
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#切换到 develop 分支。</span>
</span></span><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl"><span class="c1">#将 release-1.0.0 分支合并到 develop 分支，--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.0.0
</span></span><span class="line"><span class="cl"><span class="c1">#创建一个名为 1.0.0 的标签</span>
</span></span><span class="line"><span class="cl">$ git tag -a 1.0.0 -m <span class="s2">&#34;Release 1.0.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#切换到 master 分支。</span>
</span></span><span class="line"><span class="cl">$ git checkout master
</span></span><span class="line"><span class="cl"><span class="c1">#将 release-1.0.0 分支合并到 master 分支，--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.0.0
</span></span><span class="line"><span class="cl"><span class="c1">#删除 release-1.0.0 分支。</span>
</span></span><span class="line"><span class="cl">$ git branch -d release-1.0.0
</span></span></code></pre></div><h3 id="hotfixes-分支">Hotfixes 分支</h3>
<p>线上发生问题的时候，先回滚到之前的稳定版本，稳定局势
然后创建热修复分支开始改 BUG</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow hotfix start 1.0.1
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#从master分支 创建一个hotfix/1.0.1分支</span>
</span></span><span class="line"><span class="cl">$ git checkout -b hotfix/1.0.1 foo master
</span></span></code></pre></div><p>紧急修复完毕</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow hotfix finish 1.0.1
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#切换 master 分支</span>
</span></span><span class="line"><span class="cl">$ git checkout master
</span></span><span class="line"><span class="cl"><span class="c1">#合并热修复分支到master,--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff hotfix/ohno
</span></span><span class="line"><span class="cl"><span class="c1">#创建一个名为 1.0.1 的标签</span>
</span></span><span class="line"><span class="cl">$ git tag 1.0.1
</span></span><span class="line"><span class="cl"><span class="c1">#切换到 develop 分支</span>
</span></span><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl"><span class="c1">#合并热修复分支到 develop ,--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff hotfix/1.0.1
</span></span><span class="line"><span class="cl"><span class="c1">#删除热修复分支</span>
</span></span><span class="line"><span class="cl">$ git branch -d hotfix/1.0.1
</span></span></code></pre></div><h2 id="git-flow-avh-edition">git-flow (AVH Edition)</h2>
<p>Git-flow (AVH Edition)是Git Flow的一个增强版本，由一些Git Flow的开发者开发和维护。Git-flow (AVH Edition)在保留Git Flow基本思想的前提下，增加了一些新的功能和选项，使得Git Flow更加灵活和适用于不同的团队和项目。</p>
<p>Git-flow (AVH Edition)的主要增强功能包括：</p>
<ol>
<li>支持git-flow init命令，可以在一个新的Git仓库中快速初始化Git Flow。</li>
<li>支持git flow feature pull命令，可以拉取其他团队成员的feature分支。</li>
<li>支持git flow feature publish命令，可以将feature分支发布到远程仓库。</li>
<li>支持git flow hotfix finish命令，可以在修复生产环境问题时自动合并到develop分支和master分支并发布新版本。</li>
<li>支持git flow support分支，可以为旧版本提供长期支持。</li>
<li>允许使用Hooks and Filters来扩展和自定义Git Flow的行为。</li>
</ol>
<p>除了以上功能之外，Git-flow (AVH Edition)还提供了更多的选项和配置，使得团队可以根据不同的需求和情况来自定义Git Flow的分支模型和工作流程。</p>
<h3 id="初始化">初始化</h3>
<p>使用下面命令初始化 git fow，<code>-d</code> 是可选参数，表示使用默认参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow init <span class="o">[</span>-d<span class="o">]</span>
</span></span></code></pre></div><h3 id="创建-featurereleasehotfixsupport--分支">创建 feature/release/hotfix/support  分支</h3>
<p>查看、开始、完成、删除 feature 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow feature
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># &lt;base&gt; 参数必须是分支名称，缺失时，默认为 develop 分支</span>
</span></span><span class="line"><span class="cl">git flow feature start &lt;name&gt; <span class="o">[</span>&lt;base&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git flow feature finish &lt;name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git flow feature delete &lt;name&gt;
</span></span></code></pre></div><p>发布或者跟踪 feature 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#如果当前在 feature/name 分支，则可以省略 &lt;name&gt; 参数</span>
</span></span><span class="line"><span class="cl">git flow feature publish &lt;name&gt;
</span></span><span class="line"><span class="cl">git flow feature track &lt;name&gt;
</span></span></code></pre></div><p>当 feature 分支发布之后，其他人可以拉取该分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git pull
</span></span><span class="line"><span class="cl">git checkout feature/&lt;name&gt;
</span></span></code></pre></div><p>类似地，查看、开始、完成、删除 release 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow release
</span></span><span class="line"><span class="cl">git flow release start &lt;name&gt; <span class="o">[</span>&lt;base&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">git flow release finish &lt;name&gt;
</span></span><span class="line"><span class="cl">git flow release delete &lt;name&gt;
</span></span></code></pre></div><p>类似地，查看、开始、完成、删除 hotfix 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git flow hotfix
</span></span><span class="line"><span class="cl">git flow hotfix start &lt;name&gt; [&lt;base&gt;]
</span></span><span class="line"><span class="cl">git flow hotfix finish &lt;name&gt;
</span></span><span class="line"><span class="cl">git flow hotfix delete &lt;name&gt;
</span></span></code></pre></div><p>查看、开始 support 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow support
</span></span><span class="line"><span class="cl">git flow support start &lt;name&gt; &lt;base&gt;
</span></span></code></pre></div><h3 id="hooks-和-filters">Hooks 和 Filters</h3>
<p>Git-flow (AVH Edition)允许使用Hooks and Filters来扩展和自定义Git Flow的行为。Hooks和Filters是Git Flow中的两个关键概念，它们可以在Git Flow的不同阶段执行自定义脚本或命令，从而实现Git Flow的高度定制化。</p>
<p>Hooks是一些脚本或命令，它们会在Git Flow的不同阶段被调用。Git Flow (AVH Edition)支持以下Hooks：</p>
<ol>
<li>git-flow-init: 该Hook会在git-flow init命令执行时被调用。</li>
<li>git-flow-feature-start: 该Hook会在创建新的feature分支时被调用。</li>
<li>git-flow-feature-finish: 该Hook会在完成feature分支时被调用。</li>
<li>git-flow-release-start: 该Hook会在创建新的release分支时被调用。</li>
<li>git-flow-release-finish: 该Hook会在完成release分支时被调用。</li>
<li>git-flow-hotfix-start: 该Hook会在创建新的hotfix分支时被调用。</li>
<li>git-flow-hotfix-finish: 该Hook会在完成hotfix分支时被调用。</li>
</ol>
<p>Filters是一些命令或参数，它们会在Git Flow的不同阶段被过滤或修改。Git Flow (AVH Edition)支持以下Filters：</p>
<ol>
<li>git-flow-feature-start-message: 可以用于修改feature分支创建时的提交信息。</li>
<li>git-flow-feature-finish-message: 可以用于修改feature分支完成时的提交信息。</li>
<li>git-flow-release-start-message: 可以用于修改release分支创建时的提交信息。</li>
<li>git-flow-release-finish-message: 可以用于修改release分支完成时的提交信息。</li>
<li>git-flow-hotfix-start-message: 可以用于修改hotfix分支创建时的提交信息。</li>
<li>git-flow-hotfix-finish-message: 可以用于修改hotfix分支完成时的提交信息。</li>
</ol>
<p>下面是一些使用Hooks和Filters的例子：</p>
<ol>
<li>使用git-flow-init Hook</li>
</ol>
<p>如果需要在执行git-flow init命令时执行一些自定义脚本，可以使用git-flow-init Hook。假设我们想在git-flow init命令执行时输出一些信息，可以在<code>.git/hooks/git-flow-init</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Executing git-flow-init Hook&#34;</span>
</span></span></code></pre></div><ol start="2">
<li>使用git-flow-feature-start Hook</li>
</ol>
<p>如果需要在创建新的feature分支时执行一些自定义脚本，可以使用git-flow-feature-start Hook。假设我们想在创建新的feature分支时自动为该分支设置一些默认值，可以在<code>.git/hooks/git-flow-feature-start</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Set default values for feature branch</span>
</span></span><span class="line"><span class="cl">git config branch.<span class="nv">$GIT_BRANCH_NAME</span>.some_config_value <span class="s2">&#34;default_value&#34;</span>
</span></span></code></pre></div><ol start="3">
<li>使用git-flow-feature-finish-message Filter</li>
</ol>
<p>如果需要修改feature分支完成时的提交信息，可以使用git-flow-feature-finish-message Filter。假设我们想在feature分支完成时强制要求填写提交信息，可以在<code>.git/config</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">gitflow</span> <span class="s2">&#34;feature&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">finishmessage</span> <span class="p">=</span> <span class="nx">Please</span> <span class="nx">provide</span> <span class="nx">a</span> <span class="nx">meaningful</span> <span class="nx">commit</span> <span class="nx">message</span> <span class="nx">for</span> <span class="nx">the</span> <span class="nx">feature</span> <span class="nx">branch</span>
</span></span></code></pre></div><ol start="4">
<li>使用 git-flow-hotfix-start Hook</li>
</ol>
<p>如果需要在创建新的hotfix分支时执行一些自定义脚本，可以使用git-flow-hotfix-start Hook。假设我们想在创建新的hotfix分支时自动为该分支设置一些默认值，可以在<code>.git/hooks/git-flow-hotfix-start</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Set default values for hotfix branch</span>
</span></span><span class="line"><span class="cl">git config branch.<span class="nv">$GIT_BRANCH_NAME</span>.some_config_value <span class="s2">&#34;default_value&#34;</span>
</span></span></code></pre></div><ol start="5">
<li>使用  git-flow-hotfix-finish Hook</li>
</ol>
<p>在<code>.git/hooks/git-flow-hotfix-finish</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Update version number in package.json</span>
</span></span><span class="line"><span class="cl"><span class="nv">VERSION</span><span class="o">=</span><span class="k">$(</span>cat package.json <span class="p">|</span> jq -r <span class="s1">&#39;.version&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">NEW_VERSION</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$VERSION</span> <span class="p">|</span> awk -F. <span class="s1">&#39;{$NF++;print}&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/ /./g&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;&#39;</span> <span class="s2">&#34;s/\&#34;version\&#34;: \&#34;</span><span class="nv">$VERSION</span><span class="s2">\&#34;/\&#34;version\&#34;: \&#34;</span><span class="nv">$NEW_VERSION</span><span class="s2">\&#34;/g&#34;</span> package.json
</span></span></code></pre></div><blockquote>
<p>该脚本用于修改前端项目中的版本号。</p>
</blockquote>
<h2 id="github-flow-模型">GitHub Flow 模型</h2>
<p>GitHub Flow是一种基于GitHub的分支模型和代码开发工作流程，它是一个简单而灵活的模型，在敏捷开发和持续交付方面具有很高的效率。相比于Git Flow，GitHub Flow更加适合团队和开发者进行快速迭代和快速上线。</p>
<p>GitHub Flow的分支模型非常简单：只有一个主分支（通常是master分支）和多个特性分支。主分支始终处于稳定状态并用于生产环境。每个特性分支用于开发新功能或修复bug，并在开发人员完成相应的开发和测试工作后合并到主分支中。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/github-flow.png" alt="github flow"  />
</p>
<p>GitHub Flow 遵循以下 6 条原则：</p>
<ol>
<li><code>master</code> 分支永远是随时可部署发布的</li>
<li>需求新增基于 <code>master</code> 分支，并创建一个语义化分支</li>
<li>定期推送本地分支到远端</li>
<li>合并到 <code>master</code> 需要提 <code>PR</code></li>
<li><code>PR</code> 一旦经过 <code>code review</code> 无误后即可合并到 <code>master</code></li>
<li><code>master</code> 一旦接收到合并请求，即可立即部署发布</li>
</ol>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/github-flow-whole.png" alt="github-flow-whole"  />
</p>
<p>GitHub Flow的代码开发工作流程如下：</p>
<ol>
<li>创建特性分支：从主分支中创建一个新的特性分支，用于开发新功能或修复bug。</li>
<li>开发和测试：在特性分支上进行开发和测试，确保代码符合质量标准，并通过自动化测试。</li>
<li>发起合并请求：将特性分支合并到主分支中，发起一个合并请求（pull request），并邀请其他开发者进行代码审查和讨论。</li>
<li>代码审查：其他开发者对代码进行审查和讨论，提出意见和建议，并确保代码符合质量标准和最佳实践。</li>
<li>合并代码：在经过审查和讨论后，将特性分支合并到主分支中，并将代码部署到生产环境。</li>
<li>部署代码：在合并到主分支后，使用自动化部署工具将代码部署到生产环境。</li>
</ol>
<h2 id="gitlab-flow-模型">Gitlab flow 模型</h2>
<p>GitLab Flow是一个基于GitLab的分支模型和开发工作流程，旨在支持敏捷开发和持续交付。</p>
<p><code>GitLab</code> 在 2014 年提出 <code>11</code> 条最佳实践，更多请点击<a href="https://about.gitlab.com/topics/version-control/what-are-gitlab-flow-best-practices/">这里</a>，其相对 <code>GitHub</code> 增加了环境分支，且代码必须由<code>上游</code>（<code>master</code>）向<code>下游</code>（<code>staging</code>）发展，并且针对持续发布和版本发布都提出了相应的准则，下面是其大致流程图：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/gilab-flow-cidi.png" alt="img"  />
</p>
<p>GitLab Flow的主要特点包括：</p>
<ol>
<li>简单的分支模型：GitLab Flow使用一个简单的分支模型，包括一个主分支（通常命名为“master”或“production”）和一个开发分支（通常命名为“develop”或“staging”）。特性分支从开发分支创建，并在特性或错误修复完成并通过测试后合并回开发分支中。</li>
<li>持续集成和交付：GitLab Flow强调持续集成和交付（CI/CD），这意味着每次对代码的更改都会自动构建、测试和部署到测试环境或生产环境（如果测试通过）。</li>
<li>代码审查：GitLab Flow鼓励进行代码审查，这意味着每次对代码的更改都会由至少一个其他开发人员进行审查，以确保其符合质量标准并不会引入任何安全漏洞。</li>
<li>合并请求：GitLab Flow使用合并请求来管理将代码更改合并到主分支的过程。合并请求允许开发人员在将更改合并到主分支之前对其进行审查和讨论。</li>
<li>环境管理：GitLab Flow提供高级的环境管理功能，允许团队创建和管理不同的开发、测试、暂存和生产环境。</li>
</ol>
<blockquote>
<p>GitLab Flow提供了高级的环境管理功能，可以帮助团队更好地管理不同的开发、测试、暂存和生产环境。以下是使用GitLab Flow进行环境管理的一些方法：</p>
<ol>
<li>创建不同的环境分支：在GitLab Flow中，可以为不同的环境创建分支。例如，可以创建一个名为“develop”的开发分支，一个名为“staging”的暂存分支，和一个名为“production”的生产分支。这些分支可以帮助团队更好地管理不同环境的代码，确保每个环境都有自己的代码版本。</li>
<li>配置环境变量：在GitLab中，可以为每个环境设置不同的环境变量。这些环境变量可以用于配置不同环境中的应用程序和服务，例如数据库连接字符串、API密钥等。通过设置正确的环境变量，可以确保应用程序在不同环境中正确运行。</li>
<li>自动化部署和测试：GitLab Flow支持自动化部署和测试，可以帮助团队更快地部署代码到不同环境中。可以使用GitLab的CI/CD管道来自动化测试和部署过程，并将代码推送到正确的环境分支中。</li>
<li>环境监控和报告：GitLab Flow还支持环境监控和报告功能，可以帮助团队更好地了解不同环境的运行状况和性能。可以使用GitLab的监控和报告工具来监视不同环境的性能指标、错误率等，并及时发现和解决问题。</li>
</ol>
</blockquote>
<p>GitLab Flow的分支模型如下：</p>
<ol>
<li>主分支：主分支始终处于稳定状态，并用于生产环境。在GitLab Flow中，主分支通常是master分支或production分支。</li>
<li>特性分支：特性分支用于开发新功能或修复bug，并从主分支中创建。在GitLab Flow中，特性分支通常以feature/或fix/为前缀。</li>
<li>集成分支：集成分支用于将特性分支集成到主分支中，并进行测试和部署。在GitLab Flow中，集成分支通常是develop分支或staging分支。</li>
<li>发布分支：发布分支用于将特性分支和集成分支的代码发布到生产环境中。在GitLab Flow中，发布分支通常是release/为前缀的分支。</li>
</ol>
<p>GitLab Flow的开发工作流程如下：</p>
<ol>
<li>创建特性分支：从主分支中创建一个新的特性分支，用于开发新功能或修复bug。</li>
<li>开发和测试：在特性分支上进行开发和测试，确保代码符合质量标准，并通过自动化测试。</li>
<li>合并到集成分支：将特性分支合并到集成分支中，并进行集成测试和自动化部署。</li>
<li>发布到生产环境：将集成分支的代码发布到生产环境中，并进行最终测试和部署。</li>
<li>合并到主分支：在发布到生产环境后，将集成分支合并到主分支中，并将代码部署到生产环境。</li>
</ol>
<p>GitLab Flow强调CI/CD集成和测试自动化，以确保代码质量和快速迭代。它还支持自动化部署和环境管理，以帮助开发人员更轻松地管理不同环境和部署代码。GitLab Flow是一个灵活和强大的开发工作流程，适用于各种类型的项目和团队。</p>
<h2 id="gitlab-flowgit-flow和github-flow">GitLab Flow、Git Flow和GitHub Flow</h2>
<p>GitLab Flow、Git Flow和GitHub Flow都是三种常见的基于Git的工作流程。下面是GitLab Flow与其他工作流程的主要区别：</p>
<ol>
<li>GitLab Flow与Git Flow的比较：</li>
</ol>
<ul>
<li>
<p>GitLab Flow比Git Flow更简单和更灵活。Git Flow有一个更复杂的分支模型，包含多个长期存在的分支，而GitLab Flow只使用几个主要分支和特性分支。</p>
</li>
<li>
<p>GitLab Flow强调持续集成和持续部署（CI/CD），鼓励频繁合并到主要分支。Git Flow更注重版本控制和发布管理。</p>
</li>
<li>
<p>GitLab Flow与GitLab内置的CI/CD管道更紧密地集成在一起，更容易自动化开发工作流程。</p>
</li>
</ul>
<ol start="2">
<li>GitLab Flow与GitHub Flow的比较：</li>
</ol>
<ul>
<li>GitLab Flow和GitHub Flow有许多相似之处，例如它们都以GitHub或GitLab作为中央仓库，使用特性分支进行开发。</li>
<li>GitLab Flow强调CI/CD集成和测试自动化，而GitHub Flow更注重代码审查和协作。</li>
<li>GitLab Flow还提供更高级的环境管理、部署和监控功能，更适合于大型、复杂的项目。</li>
</ul>
<p>总体而言，GitLab Flow比Git Flow更简单和更灵活，强调CI/CD集成和自动化。与GitHub Flow相比，GitLab Flow提供更高级的环境管理和部署功能，更适合于大型、复杂的项目。选择哪种工作流程最终取决于项目和开发团队的具体需求和要求。</p>
<h2 id="其他-flow">其他 flow</h2>
<ul>
<li>TrunkBased</li>
<li>OneFlow</li>
<li>AoneFlow</li>
</ul>
<h2 id="总结">总结</h2>
<p>目前公司代码部署在自建的 gitlab 上面，对于公司的项目，个人倾向于使用 git-flow 分支模型，并且使用 git-flow (AVH Edition) 来简化操作。</p>
<p>目前，我参与的大多数项目都是 java 项目并且使用 maven 进行构建。</p>
<p>在Maven项目中，可以使用Maven版本控制器来区分release版本和snapshot版本。</p>
<ul>
<li>
<p><strong>Release版本</strong></p>
<p>对于Git Flow中的release分支，通常用于为生产环境准备代码。</p>
<p>在Maven项目中，可以使用Maven Release插件来自动化创建和发布release版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn release:prepare
</span></span><span class="line"><span class="cl">mvn release:perform
</span></span></code></pre></div><p>使用这些命令，Maven Release插件会自动更新项目版本号、创建tag、构建release版本，并发布到Maven仓库中。发布的版本号不包含 <code>-SNAPSHOT</code> 后缀。</p>
<p>或者，使用 <code>mvn versions</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set -DnewVersion<span class="o">=</span>1.0.0-SNAPSHOT
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div></li>
<li>
<p><strong>Snapshot版本</strong></p>
<p>对于Git Flow中的feature和develop分支，通常用于开发和测试新功能或bug修复，这些分支使用snapshot版本。在Maven中，snapshot版本的版本号包含 <code>-SNAPSHOT</code> 后缀，表示当前版本是正在开发的版本。</p>
</li>
</ul>
<p>对于这些项目，git-flow 操作步骤如下：</p>
<p>1、初始化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow init -d
</span></span></code></pre></div><p>2、开始 feature 分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow feature start <span class="nb">test</span>
</span></span></code></pre></div><p>设置maven项目中版本为 snapshot版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set -DnewVersion<span class="o">=</span>1.0.0-SNAPSHOT
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div><p>对于maven多模块项目，如果使用 revision 来统一定义版本号，则使用下面命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set-property -Dproperty<span class="o">=</span>revision -DnewVersion<span class="o">=</span>1.0.0-SNAPSHOT
</span></span></code></pre></div><p>3、本地在 feature 分支上完成一些开发之后，完成 feature 分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow feature finish <span class="nb">test</span>
</span></span></code></pre></div><p>4、开始 release 分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow release start 1.0.0
</span></span></code></pre></div><p>5、本地在 release 分支上完成一些开发之后，完成 feature 分支</p>
<p>设置maven项目中版本为 release 版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set -DnewVersion<span class="o">=</span>1.0.0
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div><p>对于maven多模块项目，如果使用 revision 来统一定义版本号，则使用下面命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set-property -Dproperty<span class="o">=</span>revision -DnewVersion<span class="o">=</span>1.0.0
</span></span></code></pre></div><p>另外，对于多模块项目，需要在每个模块执行下面命令将 jar 推送到 maven 中央仓库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn install -DskipTests
</span></span></code></pre></div><p>然后完成分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow release finish 1.0.0
</span></span></code></pre></div><p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python包和环境管理</title>
      <link>https://blog.chensoul.com/posts/2023/05/09/python-package-and-env-management/</link>
      <pubDate>Tue, 09 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/09/python-package-and-env-management/</guid>
      <description>发展历史 Python 包管理工具是 Python 生态系统中的一个重要组成部分，它们为 Python 开发者提供了方便、快捷的包管理方式。以下是 Python 包管理工具的发展历史概述： 1991 年：P</description>
      <content:encoded><![CDATA[<h2 id="发展历史">发展历史</h2>
<p>Python 包管理工具是 Python 生态系统中的一个重要组成部分，它们为 Python 开发者提供了方便、快捷的包管理方式。以下是 Python 包管理工具的发展历史概述：</p>
<ul>
<li>1991 年：Python 语言首次发布，Python 包管理工具还未出现。</li>
<li>1998 年：Python Distutils 工具发布，它是 Python 的第一个包管理工具，可以用于打包、安装和分发 Python 包。</li>
<li>2004 年：easy_install 工具发布，它是一种用于安装、升级和卸载 Python 包的工具，可以自动解析依赖关系并安装所需的其他包。</li>
<li>2007 年：pip 工具发布，它是 easy_install 的一个替代品，提供了更好的依赖项解析、升级和卸载功能，以及更好的用户体验。</li>
<li>2012 年：Python 软件基金会宣布，pip 将成为 Python 包管理生态系统中的标准工具，取代 easy_install。</li>
<li>2013 年：Wheel 格式发布，它是一种用于打包和分发 Python 包的格式，可以包含 C 扩展模块，并且支持多平台安装。</li>
<li>2018 年：PEP 517 和 518 发布，它们提供了一种新的 Python 包构建和分发标准，可以使包构建和分发变得更加简单和可靠。</li>
<li>2018 年：flit 工具发布，它是一种简单的 Python 包构建和分发工具，可以通过 pyproject.toml 文件来配置包的元数据和依赖项。</li>
<li>2019 年：poetry 工具发布，它是一种专注于依赖管理和项目构建的 Python 包管理工具，可以自动解析依赖关系、构建项目、生成 lock 文件等。</li>
<li>2020 年：PEP 621 发布，它是一种新的 Python 包元数据标准，可以用于定义 Python 包的元数据信息，如名称、版本、作者、许可证等。</li>
<li>2020 年：PEP 636 发布，它是一种新的 CPython 扩展模块元数据标准，可以用于定义 CPython 扩展模块的元数据信息，如名称、版本、作者、许可证等。</li>
<li>2021 年：flit 3 发布，它增加了对 PEP 621 和 PEP 636 的支持，可以使用 pyproject.toml 文件来定义 Python 包和 CPython 扩展模块的元数据信息。</li>
</ul>
<p>PyPA 是 Python Packaging Authority 的缩写，即 Python 包管理权威组织。PyPA 的目标是为 Python 社区提供一个标准的、易于使用的包管理工具和相关工具的生态系统，并提供相关的文档和规范。</p>
<p>PyPA 组织成立于 2013 年，由一些 Python 包管理工具的核心开发者组成。目前，PyPA 组织维护了一些 Python 包管理工具和相关工具的项目，包括：</p>
<ul>
<li><code>pip</code>: Python 包管理工具，用于安装和管理 Python 包。</li>
<li><code>setuptools</code>: Python 包构建和分发工具，用于打包和分发 Python 包。</li>
<li><code>wheel</code>: Python 包二进制分发格式，用于加快 Python 包的安装速度。</li>
<li><code>twine</code>: Python 包上传工具，用于将 Python 包上传到 PyPI 或其他包仓库。</li>
<li><code>virtualenv</code>: Python 虚拟环境工具，用于创建和管理 Python 虚拟环境。</li>
</ul>
<p>此外，PyPA 还制定了一些包管理的标准和规范，如：</p>
<ul>
<li><code>PEP 517</code> 和 <code>PEP 518</code>: 定义了 Python 包的构建规范和构建工具的接口规范。</li>
<li><code>PEP 440</code>: 定义了 Python 包版本号的语义化规范。</li>
<li><code>PEP 503</code>: 定义了 Python 包仓库的 URL 命名规范。</li>
<li><code>PEP 621</code>: 定义了 Python 包元数据的标准格式。</li>
</ul>
<p>PyPA 的工作对 Python 社区的包管理生态系统产生了重要的影响，使得 Python 包的构建、分发、安装和管理更加统一和规范。在使用 Python 包时，可以参考 PyPA 的相关工具和规范，以便更好地管理和使用 Python 包。</p>
<h3 id="distutils-发展历史">Distutils 发展历史</h3>
<p>Distutils 是 Python 生态系统中的第一个包管理工具，它为 Python 开发者提供了一种方便、快捷的包管理方式。以下是 Distutils 的发展历史概述：</p>
<ul>
<li>1998 年：Python 1.5.2 版本发布，它成为第一个具备模块打包功能的 Python 版本，但打包功能还比较简单。</li>
<li>1999 年：Distutils 工具发布，它是 Python 1.6 版本中的一个标准库，可以用于打包、安装和分发 Python 包。</li>
<li>2000 年：Distutils 0.9.1 版本发布，它增加了对 Windows 平台的支持，以及对 Python 2.0 版本的支持。</li>
<li>2002 年：Distutils 1.0 版本发布，它增加了对 Python 2.2 版本的支持，以及一些新特性和改进，如支持 C 扩展模块、支持自定义命令、支持打包多个模块等。</li>
<li>2007 年：setuptools 工具发布，它是 Distutils 的一个扩展，提供了更好的依赖项解析、升级和卸载功能，以及更好的插件机制和扩展性。</li>
<li>2013 年：Distutils 项目停止维护，它的代码被合并到 Python 标准库中，成为 Python 打包和分发的标准工具。</li>
</ul>
<p>总的来说，Distutils 是 Python 生态系统中第一个包管理工具，它为 Python 包的构建、打包、安装和分发提供了很多方便和支持。在其发展历史中，Distutils 不断更新迭代，增加了许多新特性和功能，以适应 Python 生态系统的变化和需求。尽管现在 Distutils 不再主动维护，但它的代码被集成到 Python 标准库中，仍然为 Python 包管理提供基础支持。</p>
<h3 id="easy_install-发展历史">easy_install 发展历史</h3>
<p>easy_install 是 Python 包管理工具之一，它的发展历史可以追溯到 2004 年，以下是 easy_install 的发展历史概述：</p>
<ul>
<li>2004 年：easy_install 首次发布，它是一种用于安装、升级和卸载 Python 包的工具，可以自动解析依赖关系并安装所需的其他包。</li>
<li>2005 年：easy_install 被纳入到 setuptools 中，成为 setuptools 的一部分。此时，easy_install 已经成为 Python 包管理生态系统中的一个核心工具。</li>
<li>2007 年：easy_install 0.6b1 发布，它引入了一些新的功能和改进，如对源码分发的支持、对 egg 格式的支持等。</li>
<li>2008 年：pip 工具发布，它是 easy_install 的一个替代品，提供了更好的依赖项解析、升级和卸载功能，以及更好的用户体验。</li>
<li>2012 年：Python 软件基金会宣布，pip 将成为 Python 包管理生态系统中的标准工具，取代 easy_install。</li>
</ul>
<p>总的来说，easy_install 是 Python 包管理生态系统中的一个重要工具，它为 Python 开发者提供了一种简单、方便的包管理方式。尽管 easy_install 的功能和性能在某些方面已经被 pip 和其他工具取代，但它仍然是 Python 包管理历史上的一个重要里程碑，对 Python 包管理工具的发展产生了积极的影响。</p>
<h3 id="setuptools-发展历史">Setuptools 发展历史</h3>
<p>setuptools 是由 Phillip J. Eby 开发的，它是 Python 的一个包管理工具，用于构建、分发和安装 Python 包。</p>
<p>Phillip J. Eby 是一位知名的 Python 社区成员和开源软件贡献者，他也是 Python Packaging Authority 的成员之一。在 2004 年，他开始开发 setuptools，这个项目的目标是为 Python 开发者提供一个更好、更方便的包管理工具，以替代原有的 distutils 工具。</p>
<p>setuptools 和 distutils 的主要区别在于 setuptools 提供了一些额外的功能，如自动发现依赖关系、支持命令扩展、支持 egg 包等。这些功能使得 Python 包的构建、分发和安装变得更加灵活和高效。</p>
<p>setuptools 从一开始就受到了 Python 社区的欢迎和支持，它的代码托管在 GitHub 上，并逐渐发展成为 Python 生态系统中使用最广泛的包管理工具之一。setuptools 也是许多其他 Python 工具和框架的基础，如 Flask、Django、numpy 等。</p>
<p>以下是 Setuptools 的发展历史概述：</p>
<ul>
<li>1994年：Python 1.0版本中没有 <code>setup.py</code>，安装 Python 包需要手动复制文件。随着 Python 的发展，用户需要更方便的方法来安装和管理包，因此开始出现了一些简单的自动化安装工具。</li>
<li>2000年：Distutils 是 Python1.6 官方的包管理工具，它提供了一组用于打包、构建和分发 Python 包的工具和命令。其中，<code>setup.py</code> 是 Distutils 的核心组件，用于定义和配置包的元数据、依赖项和入口点等信息。</li>
<li>2004 年：Setuptools 首次发布，它是 Distutils 的一个扩展，提供了一些额外的功能和扩展，如对 egg 格式的支持、对依赖项的管理、对命令扩展的支持等。</li>
<li>2008 年：Setuptools 0.6 发布，它引入了一些新的功能和改进，如对 Python 2.6 和 3.0 的支持、对 namespace packages 的支持等。</li>
<li>2010 年：Distribute 发布，它是 Setuptools 的一个分支，旨在提供更好的兼容性和易用性。Distribute 移除了一些过时的功能和选项，并添加了一些新的功能和扩展。</li>
<li>2013 年：Setuptools 0.7 发布，它借鉴了 Distribute 的一些设计和功能，并移除了一些过时的功能和选项。Setuptools 0.7 的语法与 Distribute 的语法相同。</li>
<li>2018 年：Setuptools 40.0 发布，它引入了一些新的功能和改进，并移除了一些过时的功能和选项。Setuptools 40.0 的语法与 Setuptools 0.7 相同。</li>
<li>2020 年：Setuptools 49.0 发布，它增加了对 Python 3.9 的支持，并引入了一些新的功能和改进，如对 GitLab 的支持、对环境变量的支持等。</li>
</ul>
<h3 id="setupcfg-发展历史">setup.cfg 发展历史</h3>
<p><code>setup.cfg</code> 文件是 Python 项目的元数据和构建选项的配置文件，它可以替代 <code>setup.py</code> 脚本来定义 Python 项目的元数据和构建选项。以下是 <code>setup.cfg</code> 的主要发展历史：</p>
<ul>
<li>Python 2.5：<code>setuptools</code> 扩展模块发布，引入了 <code>setup.cfg</code> 文件来定义项目的元数据和构建选项。</li>
<li>Python 3.1：<code>distutils2</code> 项目发布，旨在改进 <code>distutils</code> 模块的设计和实现，引入了 <code>setup.cfg</code> 文件作为定义项目元数据和构建选项的首选方式。</li>
<li>Python 3.4：<code>setuptools</code> 扩展模块被添加到 Python 标准库中，成为 <code>distutils</code> 的一部分，<code>setup.cfg</code> 文件成为标准的配置文件格式。</li>
</ul>
<p>随着 Python 的发展，<code>setup.cfg</code> 文件逐渐成为 Python 项目的标准配置文件格式。它提供了比 <code>setup.py</code> 脚本更简洁、更易于阅读和维护的配置方式，同时也更容易与其他工具集成。需要注意的是，<code>setup.cfg</code> 文件并不是必需的，如果没有指定该文件，则 <code>setuptools</code> 将默认使用 <code>setup.py</code> 脚本来定义项目的元数据和构建选项</p>
<h3 id="pyprojecttoml-发展历史">pyproject.toml 发展历史</h3>
<p><code>pyproject.toml</code> 是一个 TOML 格式的文件，用于定义 Python 项目的元数据和构建选项。它是 Python 中的一个新的标准文件，用于替代 <code>setup.py</code> 脚本和 <code>setup.cfg</code> 文件来定义和构建 Python 项目。以下是 <code>pyproject.toml</code> 的主要发展历史：</p>
<ul>
<li>PEP 517：该 PEP 提出了一个新的构建系统接口，用于替代 <code>setup.py</code> 和 <code>setup.cfg</code>，并引入了 <code>pyproject.toml</code> 文件作为定义 Python 项目的元数据和构建选项的标准文件格式。</li>
<li>PEP 518：该 PEP 提出了一种新的方式来定义项目的依赖关系，并引入了 <code>pyproject.toml</code> 文件作为标准的项目元数据文件格式。</li>
</ul>
<p>随着 PEP 517 和 PEP 518 的发布，<code>pyproject.toml</code> 文件逐渐成为 Python 项目的标准元数据文件格式。它提供了比 <code>setup.py</code> 脚本和 <code>setup.cfg</code> 文件更灵活、更易于配置和扩展的方式，同时也更容易与构建工具和依赖管理器集成。需要注意的是，<code>pyproject.toml</code> 文件只在使用 PEP 517 和 PEP 518 规范的构建工具中才会被识别和使用。</p>
<p>总之，<code>pyproject.toml</code> 文件是 Python 项目的标准元数据和构建选项的配置文件，它提供了比 <code>setup.py</code> 脚本和 <code>setup.cfg</code> 文件更灵活、更易于配置和扩展的方式，成为了 Python 项目的标准元数据文件格式。</p>
<h3 id="pip-发展历史">Pip 发展历史</h3>
<p>在 Python 中，pip 和 setuptools 是两个常用的包管理工具，它们在安装和管理 Python 包方面发挥着重要作用。</p>
<p>pip 是由 Ian Bicking 和其他 Python 社区成员开发的，它是 Python 的包管理器之一，用于在 Python 程序中安装和管理软件包。</p>
<p>Ian Bicking 是一位 Python 程序员和开源软件贡献者，他还是 Pylons 和 Paste 等框架的创始人之一。在 2008 年，他开始开发 pip，这个项目的目标是为 Python 社区提供一个更好、更易用的包管理器，以替代原有的 easy_install 工具。</p>
<p>pip 从一开始就受到了 Python 社区的欢迎和支持，它的代码托管在 GitHub 上，并逐渐发展成为 Python 生态系统中使用最广泛的包管理器之一。pip 支持从 PyPI（Python Package Index）等源中下载和安装 Python 包，并自动处理包之间的依赖关系，使得 Python 包的管理变得更加简单和高效。</p>
<p>目前，pip 已经成为了 Python 官方推荐的包管理器，并且已经集成到 Python 2.7.9 和 Python 3.4 以及更高版本中，可以直接使用，无需额外安装。</p>
<p>pip 与 setuptools 有密切的关系，因为它使用 setuptools 来构建和安装 Python 包。</p>
<p>setuptools 是一个 Python 包的构建和分发工具，它提供了一组 API 来定义、构建和打包 Python 包。setuptools 可以自动生成 setup.py 文件，这个文件描述了 Python 包的元数据和依赖关系，以便 pip 和其他工具可以使用它来安装和管理包。</p>
<p>在安装和管理 Python 包时，pip 会使用 setuptools 来解决依赖关系、构建和安装包。pip 会在下载包之前检查包的依赖关系，并使用 setuptools 来安装这些依赖项。如果包需要进行构建，pip 也会使用 setuptools 来构建它们</p>
<p>以下是 pip 的发展历史概述：</p>
<ul>
<li>2008 年：pip 首次发布，它是 easy_install 的一个替代品，提供了更好的依赖项解析、升级和卸载功能，以及更好的用户体验。</li>
<li>2011 年：pip 正式成为 Python 包管理的标准工具之一，并被纳入到 Python 2.7 和 Python 3.2 中。</li>
<li>2013 年：pip 1.4 发布，它引入了一些新的功能和改进，如对 wheel 格式的支持、对安装源的优化等。</li>
<li>2016 年：pip 8.0 发布，它引入了一些新的功能和改进，如对 hash 校验的支持、对源索引的优化等。</li>
<li>2018 年：pip 18.0 发布，它引入了一些新的功能和改进，如对 Python 3.7 的支持、对源索引的改进等。</li>
<li>2020 年：pip 20.0 发布，它引入了一些新的功能和改进，如对 Python 3.8 的支持、对源索引的优化等。</li>
</ul>
<h3 id="wheel-发展历史">Wheel 发展历史</h3>
<p>Wheel 是 Python 包分发的一种格式，它的发展历史可以追溯到 2012 年，以下是 Wheel 的发展历史概述：</p>
<ul>
<li>
<p>2012 年：Wheel 首次提出，它的目标是提供一种更快、更可靠、更简单的 Python 包分发格式，以取代旧的 egg 格式。</p>
</li>
<li>
<p>2013 年：Wheel 1.0 发布，它引入了一些新的功能和改进，如对 namespace packages 的支持、对多平台支持的改进等。</p>
</li>
<li>
<p>2014 年：Wheel 0.24 发布，它引入了一些新的功能和改进，如对 Python 3.4 的支持、对源码分发的改进等。</p>
</li>
<li>
<p>2016 年：Wheel 0.29 发布，它引入了一些新的功能和改进，如对 Python 3.6 的支持、对源码分发的改进等。</p>
</li>
<li>
<p>2018 年：Wheel 0.31 发布，它引入了一些新的功能和改进，如对 Python 3.7 的支持、对源码分发的改进等。</p>
</li>
<li>
<p>2020 年：Wheel 0.35 发布，它引入了一些新的功能和改进，如对 Python 3.9 的支持、对源码分发的改进等。</p>
</li>
</ul>
<p>Egg 是 Python 包分发格式之一，它的全称是 Easy Install Package，是由 setuptools 提供的一种打包和安装 Python 包的格式。Egg 格式早期是作为 Python 包管理工具 easy_install 的默认格式而出现的，但现在已逐渐被 Wheel 格式取代。</p>
<p>Egg 格式的文件扩展名为 .egg，它是一个压缩文件，可以包含 Python 模块、资源文件、文档等。与其他 Python 包分发格式相比，Egg 格式具有以下特点：</p>
<ul>
<li>Egg 格式的文件可以被 easy_install 直接安装，无需解包。</li>
<li>Egg 格式支持 Python 2.x 和 Python 3.x 的跨版本安装。</li>
<li>Egg 格式支持多版本安装，可以在同一台机器上同时安装多个版本的同一 Python 包。</li>
</ul>
<p>虽然 Egg 格式曾经是 Python 包分发生态系统中的一个重要组成部分，但是随着 setuptools 的发展和 Wheel 格式的出现，Egg 格式已经逐渐被取代。现在大部分 Python 包都已经使用 Wheel 格式进行分发，因为它比 Egg 格式更快、更可靠、更灵活，并且能够支持更多的 Python 版本和平台。</p>
<p>Wheel 是 Python 包分发格式之一，它的全称是 Python Wheel Package，是由 Python 社区提供的一种打包和安装 Python 包的格式。与其他 Python 包分发格式相比，Wheel 格式具有以下特点：</p>
<ul>
<li>Wheel 格式的文件扩展名为 .whl，它是一个压缩文件，可以包含 Python 模块、资源文件、文档等。</li>
<li>Wheel 格式支持 Python 2.x 和 Python 3.x 的跨版本安装。</li>
<li>Wheel 格式可以包含 C 扩展模块，因此可以在安装时直接编译和安装 C 扩展模块，而不需要使用其他工具。</li>
<li>Wheel 格式支持多平台安装，即可以在 Windows、Linux、macOS 等不同的操作系统上安装同一个 Wheel 包。</li>
<li>Wheel 格式的安装速度比 Egg 格式快，因为它使用了更简单、更快速的算法。</li>
<li>Wheel 格式可以通过 pip 工具直接安装，无需使用其他 Python 包管理工具。</li>
</ul>
<h2 id="twine-发展历史">Twine 发展历史</h2>
<p>Twine 是 Python 生态系统中的一个包管理工具，它主要用于将打包好的 Python 包上传到 PyPI（Python Package Index）等包仓库中。以下是 Twine 的发展历史概述：</p>
<ul>
<li>2015 年：Twine 工具发布，它是一个用于上传 Python 包到 PyPI 的命令行工具，支持 GPG 签名和 HTTPS 传输。</li>
<li>2016 年：Twine 1.4 版本发布，它增加了对 Wheel 包格式的支持，以及一些新特性和改进，如支持多个 PyPI 仓库、支持检查包重复上传等。</li>
<li>2017 年：Twine 1.8 版本发布，它增加了对 PEP 517 和 PEP 518 的支持，以及一些新特性和改进，如支持源码安装、支持上传多个包文件等。</li>
<li>2018 年：Twine 1.12 版本发布，它增加了对 Python 3.7 和 PyPI 的新特性的支持，以及一些新特性和改进，如支持使用环境变量配置 PyPI 仓库、支持使用 .pypirc 文件配置认证信息等。</li>
<li>2020 年：Twine 3.2 版本发布，它移除了 Python 2 的支持，增加了对 Python 3.9 的支持，以及一些新特性和改进，如支持使用 twine check 命令检查包是否符合 PyPI 标准、支持使用 twine register 命令在 PyPI 中注册项目等。</li>
</ul>
<h2 id="virtualenv-发展历史">virtualenv 发展历史</h2>
<p>Virtualenv 是 Python 生态系统中的一个重要工具，它提供了一种在单个系统中运行多个独立 Python 环境的方式。</p>
<p>Virtualenv 是由 Ian Bicking 开发的，它是一个 Python 虚拟环境管理工具。Ian Bicking 是一位 Python 程序员和开源软件贡献者，他还是 Pylons 和 Paste 等框架的创始人之一。</p>
<p>Virtualenv 的第一个版本于 2007 年发布，它的主要目的是为了解决 Python 包依赖性的问题。在 Python 中，不同的项目可能需要不同的 Python 版本和依赖包，而这些依赖包可能会相互冲突。Virtualenv 可以创建一个隔离的 Python 环境，使得每个项目都可以独立地安装和使用其所需的 Python 版本和依赖包，从而避免了冲突问题。</p>
<p>在 Virtualenv 发布之后，它很快成为了 Python 开发社区中的一个重要工具，受到了广泛的关注和使用。Virtualenv 后来也被集成到了 Python 官方的文档中，并且有许多其他的虚拟环境管理工具，如 Pyenv 和 Conda，也是基于 Virtualenv 的思想和实现方式开发的。</p>
<p>以下是 Virtualenv 的发展历史概述：</p>
<ul>
<li>2007 年：Virtualenv 工具发布，它是一个用于创建独立 Python 环境的工具，可以避免不同项目之间的依赖冲突。</li>
<li>2009 年：Virtualenvwrapper 工具发布，它是 Virtualenv 的一个扩展，提供了更好的虚拟环境管理方式，如创建、切换、删除虚拟环境等。</li>
<li>2010 年：Virtualenv 1.5 版本发布，它增加了对 Python 3 的支持，以及一些新特性和改进，如支持使用 requirements.txt 文件安装依赖、支持使用 pip 安装包等。</li>
<li>2011 年：Virtualenv 1.6 版本发布，它增加了对 Python 3.2 的支持，以及一些新特性和改进，如支持使用 -p 选项指定 Python 解释器、支持使用 &ndash;system-site-packages 选项共享系统 Python 包等。</li>
<li>2013 年：Virtualenv 1.10 版本发布，它增加了对 Python 3.3 的支持，以及一些新特性和改进，如支持使用 &ndash;always-copy 选项复制依赖包、支持使用 &ndash;clear 选项清空虚拟环境等。</li>
<li>2017 年：Virtualenv 16.0 版本发布，它增加了对 Python 3.6 和 pip 10 的支持，以及一些新特性和改进，如支持使用 &ndash;upgrade 选项更新包、支持使用 &ndash;prompt 选项设置虚拟环境提示符等。</li>
<li>2018 年：Virtualenv 16.1 版本发布，它增加了对 Python 3.7 的支持，以及一些新特性和改进，如支持使用 &ndash;creator 选项指定创建虚拟环境的方式、支持使用 &ndash;verbose 选项显示详细信息等。</li>
<li>2019 年：Virtualenv 16.7.0 版本发布，它增加了对 Python 3.8 的支持，以及一些新特性和改进，如支持使用 &ndash;system-site-packages 选项共享系统 Python 包、支持使用 &ndash;copies 选项复制依赖包等。</li>
<li>2020 年：Virtualenv 20.0.0 版本发布，它增加了对 Python 3.9 和 pip 20 的支持，以及一些新特性和改进，如支持使用 &ndash;prompt-cmd 选项设置虚拟环境提示符、支持使用 &ndash;no-pip 选项创建不包含 pip 的虚拟环境等。</li>
<li>2021 年：Virtualenv 20.8.1 版本发布，它增加了对 Python 3.10 的支持，以及一些新特性和改进，如支持使用 &ndash;download 选项从指定 URL 下载 Python 解释器、支持使用 &ndash;clear 选项清空虚拟环境等。</li>
</ul>
<p>总的来说，Virtualenv 是 Python 生态系统中一个非常重要的工具，它提供了一种方便、快捷的虚拟环境管理方式，为 Python 开发者提供了很多便利。在其发展历史中，Virtualenv 不断更新迭代，增加了许多新特性和功能，以适应 Python 生态系统的变化和需求。虽然现在 Virtualenv 已经不再主动维护，但它的代码被集成到其他工具中，如 venv 和 pipenv，仍然为 Python 开发者提供基础支持。</p>
<h2 id="venv-发展历史">venv 发展历史</h2>
<p>venv 是由 Python 官方开发团队开发的，它是 Python 3.3 版本引入的标准库模块，用于创建 Python 虚拟环境。</p>
<p>Python 的官方文档中对 venv 的介绍如下：</p>
<p>&ldquo;venv 模块提供了 Python 3 中的虚拟环境支持。虚拟环境是 Python 环境的隔离副本，包括 Python 解释器和一个独立的库副本。虚拟环境通常用于为不同的项目创建独立的环境，以避免项目之间的依赖冲突。&rdquo;</p>
<p>与 Virtualenv 和其他虚拟环境管理工具不同，venv 是 Python 官方提供的标准库模块，因此它的功能和用法都与 Python 解释器密切相关，并且在 Python 安装时已经预装了 venv 模块，因此不需要额外安装。</p>
<p>在使用 venv 创建虚拟环境时，可以选择使用系统中已经安装的 Python 解释器，也可以使用 venv 模块自动安装一个新的 Python 解释器。创建的虚拟环境和它所依赖的 Python 包都是独立的，不会与系统中的 Python 环境和其他虚拟环境产生冲突。</p>
<p>以下是 venv 的发展历史概述：</p>
<ul>
<li>
<p>2012 年：Python 3.3 版本发布，它引入了 venv 标准库，用于创建独立的 Python 环境，取代了 Python 2 中的 virtualenv 工具。</p>
</li>
<li>
<p>2013 年：venv 1.1 版本发布，它增加了对 Python 3.4 的支持，以及一些新特性和改进，如支持使用 &ndash;system-site-packages 选项共享系统 Python 包、支持使用 &ndash;copies 选项复制依赖包等。</p>
</li>
<li>
<p>2014 年：venv 1.2 版本发布，它增加了对 Python 3.5 的支持，以及一些新特性和改进，如支持使用 &ndash;clear 选项清空虚拟环境、支持使用 &ndash;upgrade 选项更新包等。</p>
</li>
<li>
<p>2015 年：venv 1.3 版本发布，它增加了对 Python 3.6 的支持，以及一些新特性和改进，如支持使用 &ndash;prompt 选项设置虚拟环境提示符、支持使用 &ndash;without-pip 选项创建不包含 pip 的虚拟环境等。</p>
</li>
<li>
<p>2017 年：venv 3.6.0 版本发布，它增加了对 Python 3.6 的支持，以及一些新特性和改进，如支持使用 activate.csh 和 activate.fish 脚本、支持使用 bin/python3 命令启动 Python 解释器等。</p>
</li>
<li>
<p>2018 年：venv 3.7.0 版本发布，它增加了对 Python 3.7 的支持，以及一些新特性和改进，如支持使用 venv 模块创建虚拟环境、支持使用 ensurepip 模块安装 pip 等。</p>
</li>
<li>
<p>2019 年：venv 3.8.0 版本发布，它增加了对 Python 3.8 的支持，以及一些新特性和改进，如支持使用 &ndash;symlinks 选项创建符号链接而非复制文件、支持使用 &ndash;upgrade-deps 选项更新依赖包等。</p>
</li>
<li>
<p>2020 年：venv 3.9.0 版本发布，它增加了对 Python 3.9 的支持，以及一些新特性和改进，如支持使用 &ndash;list 选项列出虚拟环境中已安装的包、支持使用 &ndash;upgrade 选项更新 pip 等。</p>
</li>
<li>
<p>2021 年：venv 3.10.0 版本发布，它增加了对 Python 3.10 的支持，以及一些新特性和改进，如支持使用 &ndash;symlink-to 选项指定符号链接目录、支持使用 &ndash;prompt-cmd 选项设置虚拟环境提示符等。</p>
</li>
</ul>
<h2 id="pyenv发展历史">Pyenv发展历史</h2>
<p>Pyenv 是一个 Python 版本管理工具，可以用于在同一系统中管理多个 Python 版本。以下是 Pyenv 的发展历史概述：</p>
<ul>
<li>2011 年：Pyenv 0.1.0 版本发布，最初由 Yasuhiro Matsumoto 开发。这个版本只支持在 Bash shell 中使用。</li>
<li>2012 年：Pyenv 0.2.0 版本发布，支持在其他 shell 中使用，如 Zsh 和 Fish。</li>
<li>2013 年：Pyenv 0.4.0 版本发布，增加了对 Python 3 的支持。</li>
<li>2014 年：Pyenv 0.4.1 版本发布，增加了对 Jython 和 Stackless Python 的支持。</li>
<li>2015 年：Pyenv 1.0.0 版本发布，它增加了对 Python 的解释器和标准库的支持，以及一些新特性和改进，如增加了 pyenv virtualenv 命令来管理虚拟环境、增加了 pyenv whence 命令来查找可执行文件的位置等。</li>
<li>2018 年：Pyenv 1.2.0 版本发布，增加了对 PyPy3 的支持，并修复了一些 bug。</li>
<li>2020 年：Pyenv 1.2.21 版本发布，增加了对 Python 3.9.0 的支持，并修复了一些 bug。</li>
</ul>
<p>Pyenv 的发展历史显示出它的长期稳定性和不断改进的趋势，以适应不断变化的 Python 生态系统和开发者需求。Pyenv 的主要特点是可以在同一系统中管理多个 Python 版本，可以很方便地切换版本，也支持使用虚拟环境来隔离不同项目的依赖。Pyenv 在 Python 开发者社区中广受欢迎，是一个不可或缺的工具之一。</p>
<h2 id="pipenv发展历史">Pipenv发展历史</h2>
<p>Pipenv 是在 2017 年由 Kenneth Reitz 开发的 Python 项目依赖管理工具。以下是 Pipenv 的发展历史概述：</p>
<ul>
<li>2017 年：Pipenv 1.0.0 版本发布，它是第一个稳定版本。Pipenv 结合了 pip 和 virtualenv 的功能，提供了一个更简单的方式来管理 Python 项目依赖。它自动为每个项目创建虚拟环境，并使用 Pipfile 和 Pipfile.lock 文件来管理项目依赖。</li>
<li>2018 年：Pipenv 2018.5.18 版本发布，它增加了许多新特性和改进，如支持使用 &ndash;skip-lock 选项跳过生成 Pipfile.lock 文件、支持使用 &ndash;deploy 选项安装 Pipfile.lock 文件中的依赖、支持使用 &ndash;update 选项更新依赖等。</li>
<li>2019 年：Pipenv 2019.6.3 版本发布，它增加了对 Python 3.8 的支持，以及一些新特性和改进，如支持使用 &ndash;use-feature 选项安装依赖、支持使用 &ndash;outdated 选项显示过期的依赖等。</li>
<li>2020 年：Pipenv 2020.6.2 版本发布，它增加了支持使用 &ndash;python 选项指定 Python 解释器版本、支持使用 &ndash;pre 选项安装预览版依赖、支持使用 &ndash;keep-outdated 选项保留过期的依赖等。</li>
<li>2021 年：Pipenv 2021.5.29 版本发布，它增加了对 Python 3.10 的支持，以及一些新特性和改进，如支持使用 &ndash;platform 选项指定安装依赖的平台、支持使用 &ndash;bundle 选项生成依赖包压缩文件等。</li>
</ul>
<h2 id="poetry-发展历史">Poetry 发展历史</h2>
<p>Poetry 是一个较新的 Python 项目依赖管理工具，在 2018 年由 Sébastien Eustace 开发。以下是 Poetry 的发展历史概述：</p>
<ul>
<li>2018 年：Poetry 0.1.0 版本发布，它是第一个公开发布的版本。Poetry 通过 pyproject.toml 文件来管理项目依赖，并使用虚拟环境来隔离项目依赖。</li>
<li>2019 年：Poetry 0.12.0 版本发布，它增加了对 Python 3.8 的支持，以及一些新特性和改进，如支持使用 &ndash;lock 选项生成锁文件、支持使用 &ndash;develop 选项安装开发依赖等。</li>
<li>2020 年：Poetry 1.0.0 版本发布，它增加了对 Python 3.9 的支持，以及一些新特性和改进，如支持使用 &ndash;experimental 选项启用实验性功能、支持使用 &ndash;remove-untracked 选项删除未跟踪的依赖等。</li>
<li>2021 年：Poetry 1.2.0 版本发布，它增加了对 Python 3.10 的支持，以及一些新特性和改进，如支持使用 &ndash;workspace 选项管理多个相关项目、支持使用 &ndash;source 选项指定依赖源等。</li>
</ul>
<p>Poetry 的发展历史显示出它的快速发展和不断改进的趋势，以适应不断变化的 Python 生态系统和开发者需求。Poetry 相较于 pipenv 和 virtualenv 等工具，它有着更加简洁的配置文件和更加易于使用的命令行接口，因此在 Python 开发者中越来越受欢迎。</p>
<h2 id="pdm发展历史">Pdm发展历史</h2>
<p>PDM 是一个比较新的 Python 项目依赖管理工具，由李辉开发，它于 2020 年首次发布。以下是 PDM 的发展历史概述：</p>
<ul>
<li>2020 年：PDM 0.1.0 版本发布，它是第一个公开发布的版本。PDM 使用 pyproject.toml 文件来管理项目依赖，并使用虚拟环境来隔离项目依赖。与其他依赖管理工具不同，PDM 可以使用多个依赖源，以便从不同的源安装依赖。</li>
<li>2021 年：PDM 1.0.0 版本发布，它增加了对 Python 3.10 的支持，以及一些新特性和改进，如支持使用 &ndash;edit 选项编辑依赖文件、支持使用 &ndash;update-prereleases 选项更新预览版依赖等。</li>
<li>2022 年：PDM 2.0.0 版本发布，它增加了对 Python 3.11 的支持，以及一些新特性和改进，如支持使用 &ndash;lockfile 选项指定锁定文件、支持使用 &ndash;find-links 选项指定依赖的本地路径或 URL 等。</li>
</ul>
<p>PDM 的发展历史显示出它的快速发展和不断改进的趋势，以适应不断变化的 Python 生态系统和开发者需求。PDM 具有类似 Poetry 的简洁配置文件和易于使用的命令行接口，但 PDM 的多源支持和依赖快照功能则是它的独特特点，这些功能使得 PDM 在一些特定场景下更加适用。</p>
<h2 id="pyflow-发展历史">Pyflow 发展历史</h2>
<p>Pyflow 是另一个 Python 项目依赖管理工具，于 2016 年首次发布。以下是 Pyflow 的发展历史概述：</p>
<ul>
<li>2016 年：Pyflow 0.1.0 版本发布，它是第一个公开发布的版本。Pyflow 使用 requirements.txt 文件来管理项目依赖，并使用虚拟环境来隔离项目依赖。与其他依赖管理工具不同，Pyflow 支持自动化的依赖解决方案，以便更轻松地安装和更新依赖。</li>
<li>2017 年：Pyflow 0.3.0 版本发布，它增加了许多新特性和改进，如支持使用 &ndash;editable 选项安装可编辑依赖、支持使用 &ndash;pre 选项安装预览版依赖等。</li>
<li>2018 年：Pyflow 2.0.0 版本发布，它增加了对 Python 3 的支持，以及一些新特性和改进，如支持使用 Pipfile.lock 文件管理依赖、支持在 Pipfile 中使用多个依赖源等。</li>
</ul>
<p>尽管 Pyflow 的开发已经停止，但是它的一些思想和特性被其他依赖管理工具所采纳，例如 Pipenv 和 Poetry。Pyflow 在其时代内曾经是一个有影响力的依赖管理工具，它的自动化依赖解决方案、虚拟环境功能和多个依赖源等特性为后来的依赖管理工具提供了启示。</p>
<h2 id="conda-发展历史">Conda 发展历史</h2>
<p>Conda 是一个开源的包管理系统和环境管理系统，用于管理 Python 包和其他科学计算相关的软件包。以下是 Conda 的发展历史：</p>
<ol>
<li>
<p>2012 年，Continuum Analytics 公司发布了第一个版本的 Conda，用于管理 Python 环境和软件包。</p>
</li>
<li>
<p>2015 年，Conda 发布了 4.0 版本，引入了虚拟环境和交叉平台支持，支持 Python、R 和其他语言的包管理。</p>
</li>
<li>
<p>2016 年，Conda 发布了 4.2 版本，引入了 Conda Forge，一个社区驱动的软件包仓库，提供了更丰富的软件包和更快的更新周期。</p>
</li>
<li>
<p>2018 年，Conda 发布了 4.5 版本，引入了命令行界面的改进和新功能，如环境快速复制和包依赖关系的可视化。</p>
</li>
<li>
<p>2019 年，Conda 发布了 4.6 版本，引入了环境锁定和自动环境激活功能，提高了环境管理的效率和可靠性。</p>
</li>
<li>
<p>2020 年，Anaconda Inc. 收购了 Quansight 公司，并将其旗下的 Mamba 包管理器与 Conda 进行整合，提高了包管理的速度和稳定性。</p>
</li>
<li>
<p>2021 年，Conda 发布了 4.10 版本，引入了 Conda 市场，一个用户界面友好的软件包搜索和安装工具，提供了更好的用户体验和社区支持。</p>
</li>
</ol>
<h2 id="总结">总结</h2>
<p>项目依赖管理工具（虚拟环境）：</p>
<ul>
<li>官方的：
<ul>
<li>venv</li>
</ul>
</li>
<li>三方的：
<ul>
<li>virtualenv</li>
<li>pyenv</li>
<li>pipenv</li>
<li>pyflow</li>
<li>poetry</li>
<li>pdm</li>
<li>Conda</li>
</ul>
</li>
</ul>
<p>包管理工具：</p>
<ul>
<li>setuptools：包构建</li>
<li>twine：包上传和发布</li>
<li>pip：包安装工具</li>
<li>pypa/build：包构建，用于替代 setuptools</li>
</ul>
<p>下面是 pdm、poetry、pipenv、venv、virtualenv、conda 的简要对比：</p>
<p>1、pdm：</p>
<p>优点：</p>
<ul>
<li>支持 Pipfile.lock 管理依赖项，可以保证依赖项的版本和环境的一致性。</li>
<li>自动创建和管理虚拟环境，可以避免环境冲突和版本问题。</li>
<li>自动安装缺失的系统依赖项，可以避免出现缺少系统库导致的问题。</li>
<li>自动审查安全漏洞，可以避免使用有安全漏洞的依赖项。</li>
</ul>
<p>缺点：</p>
<ul>
<li>还比较新，生态不够完善。</li>
<li>没有像 poetry 和 pipenv 那样支持发布包到 PyPI。</li>
</ul>
<p>2、poetry：</p>
<p>优点：</p>
<ul>
<li>支持 pyproject.toml 管理依赖项，可以保证依赖项的版本和环境的一致性。</li>
<li>自动创建和管理虚拟环境，可以避免环境冲突和版本问题。</li>
<li>自动安装缺失的系统依赖项，可以避免出现缺少系统库导致的问题。</li>
<li>自动审查安全漏洞，可以避免使用有安全漏洞的依赖项。</li>
<li>支持发布包到 PyPI。</li>
</ul>
<p>缺点：</p>
<ul>
<li>有些人觉得配置比较复杂，学习曲线比较陡峭。</li>
</ul>
<p>3、pipenv：</p>
<p>优点：</p>
<ul>
<li>支持 Pipfile 和 Pipfile.lock 管理依赖项，可以保证依赖项的版本和环境的一致性。</li>
<li>自动创建和管理虚拟环境，可以避免环境冲突和版本问题。</li>
<li>自动安装缺失的系统依赖项，可以避免出现缺少系统库导致的问题。</li>
<li>自动审查安全漏洞，可以避免使用有安全漏洞的依赖项。</li>
<li>支持发布包到 PyPI。</li>
</ul>
<p>缺点：</p>
<ul>
<li>有些人觉得速度比较慢。</li>
<li>有些人觉得配置比较复杂，学习曲线比较陡峭。</li>
</ul>
<p>4、venv：</p>
<p>优点：</p>
<ul>
<li>自带 Python，无需安装额外的依赖。</li>
<li>简单易用，命令行操作方便。</li>
<li>Python 3.3+ 后自带，不需要安装额外的库。</li>
</ul>
<p>缺点：</p>
<ul>
<li>只支持 Python 3.3+。</li>
<li>需要手动安装依赖项。</li>
</ul>
<p>5、virtualenv：</p>
<p>优点：</p>
<ul>
<li>支持 Python 2 和 Python 3。</li>
<li>可以在同一台机器上创建多个虚拟环境，可以避免环境冲突和版本问题。</li>
<li>可以在不同的 Python 版本之间切换。</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要手动安装依赖项。</li>
</ul>
<p>6、conda：</p>
<p>优点：</p>
<ul>
<li>支持多个操作系统和多个 Python 版本。</li>
<li>可以管理 Python 环境和非 Python 环境。</li>
<li>可以管理依赖项和安装包。</li>
<li>可以创建和管理虚拟环境。</li>
<li>支持发布包到 Anaconda Cloud。</li>
</ul>
<p>缺点：</p>
<ul>
<li>安装包可能比较大。</li>
<li>有些人觉得配置比较复杂，学习曲线比较陡峭。</li>
</ul>
<p>总的来说，这些工具都有各自的优缺点，可以根据自己的需求和使用习惯选择最适合自己的工具。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python安装、构建、发布、下载和运行</title>
      <link>https://blog.chensoul.com/posts/2023/05/09/python-install-build-publish-run/</link>
      <pubDate>Tue, 09 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/09/python-install-build-publish-run/</guid>
      <description>最近开始学习 python，这篇文章记录如何安装 python、搭建 python 开发环境，以及如何构建、发布 python 包。我使用的是 macos 系统，所以本篇文章中的一些命</description>
      <content:encoded><![CDATA[<p>最近开始学习 python，这篇文章记录如何安装 python、搭建 python 开发环境，以及如何构建、发布 python 包。我使用的是 macos 系统，所以本篇文章中的一些命令是基于 macos ，特此说明。</p>
<h2 id="1安装">1、安装</h2>
<p>MacOS 上通过 brew 安装 Python3：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install python3
</span></span></code></pre></div><p>查看 python3 安装路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ which python3
</span></span><span class="line"><span class="cl">/opt/homebrew/bin/python3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="nb">type</span> python3
</span></span><span class="line"><span class="cl">python3 is /opt/homebrew/bin/python3
</span></span></code></pre></div><p>查看版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python --version
</span></span></code></pre></div><p>设置环境变量，我使用的是 zsh，所以需要修改 ~/.zshrc，添加下面代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PYTHON_HOME</span><span class="o">=</span>/opt/homebrew/opt/python@3.11
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PYTHON_HOME</span>/bin:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">python</span><span class="o">=</span>python3
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">pip</span><span class="o">=</span>pip3
</span></span></code></pre></div><p>使配置生效：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h2 id="2创建项目">2、创建项目</h2>
<p>创建一个目录 chensoul_hello：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir chensoul_hello
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> chensoul_hello
</span></span></code></pre></div><p>创建一个 main.py ，打印 helloworld：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;hello world&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>试试运行 main.py：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python main.py
</span></span></code></pre></div><h2 id="3创建虚拟环境">3、创建虚拟环境</h2>
<p>使用 python venv 模块创建虚拟环境 .venv：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python -m venv .venv
</span></span></code></pre></div><p>使用 . 开头的目录或者文件为隐藏文件。<code>如果使用 git 管理项目，则需要将 .venv 添加到 .gitignore</code>。</p>
<p>激活虚拟环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span></code></pre></div><h2 id="4使用-setuptools-管理项目">4、使用 setuptools 管理项目</h2>
<p>setuptools 是 Python 的一个包管理工具，它可以帮助开发人员更方便地打包和发布 Python 代码。setuptools 提供了一些命令行工具，例如 easy_install 和 setup.py。</p>
<p><code>setup.py</code> 文件是 setuptools 用于构建、打包和发布 Python 包的核心文件之一。通过 <code>setup.py</code> 文件，开发人员可以指定包的元数据、依赖关系、安装脚本等信息，从而实现包的安装、升级和卸载等操作。</p>
<p>具体来说，<code>setup.py</code> 文件通常包含以下内容：</p>
<ul>
<li>包的元数据，例如包的名称、版本号、作者、许可证等信息。</li>
<li>包的依赖关系，例如需要依赖哪些其他 Python 包。</li>
<li>包的安装脚本，例如需要安装哪些文件、脚本等。</li>
<li>其他自定义的构建和发布选项，例如文档生成、命令行工具的生成等。</li>
</ul>
<p>通过运行 <code>python setup.py</code> 命令，可以执行一系列操作，例如将包构建为源代码或二进制分发包、将其上传到 PyPI 或其他包仓库、安装包到本地系统等。同时，setuptools 还提供了一些功能，例如自动化依赖关系管理、版本控制、命令行工具的生成和文档的生成等，可以帮助开发人员更加高效地进行 Python 开发。</p>
<p>1、安装 setuptools</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install setuptools
</span></span></code></pre></div><p>2、创建 setup.py 文件</p>
<p>在使用 setuptools 时，通常需要创建一个 setup.py 文件，用来描述包的信息、依赖关系和安装方式等。setup.py 文件通常包含一个 setup() 函数，用来定义包的元数据和依赖关系等信息。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">find_packages</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">setup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;chensoul_hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">version</span><span class="o">=</span><span class="s1">&#39;1.0.0&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">author</span><span class="o">=</span><span class="s1">&#39;chensoul&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">author_email</span><span class="o">=</span><span class="s1">&#39;chensoul@chensoul.com&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span><span class="o">=</span><span class="s1">&#39;A simple Python package&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">packages</span><span class="o">=</span><span class="n">find_packages</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;numpy&gt;=1.16.0&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;pandas&gt;=0.23.4&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;console_scripts&#39;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hello_command=chensoul_hello.cli:main&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>这个 <code>setup.py</code> 文件定义了一个名为 <code>chensoul_hello</code> 的 Python 包，指定了包的元数据、依赖关系等信息。</p>
<ul>
<li><code>name</code>：包的名称。</li>
<li><code>version</code>：包的版本号。</li>
<li><code>author</code>：包的作者。</li>
<li><code>author_email</code>：作者的电子邮件地址。</li>
<li><code>description</code>：包的简要描述。</li>
<li><code>packages</code>：包含需要打包的 Python 包的列表，使用 <code>find_packages()</code> 函数可以自动查找所有包。</li>
<li><code>install_requires</code>：包依赖的其他 Python 包。</li>
<li><code>console_scripts</code>： 是一个可选参数，用于定义包中的命令行工具。它是一个字典，键是命令的名称，值是命令对应的入口点（entry point）。入口点是一个字符串，通常是模块名和函数名的组合，例如 &ldquo;chensoul_hello.cli:main&rdquo;，表示调用 chensoul_hello 包中的 cli 模块的 main 函数。当使用 setuptools 安装包时，console_scripts 会自动创建一个可执行文件，并将入口点指向该文件。这个文件通常被放在 Python 的 bin 目录下，例如 /usr/local/bin。</li>
</ul>
<p>对于上面的例子，如果想要在命令行中使用 hello_command 命令，需要创建名为 &ldquo;chensoul_hello&rdquo; 的 Python 包：</p>
<ul>
<li>
<p>创建一个名为 &ldquo;chensoul_hello&rdquo; 的文件夹，并进入该文件夹。</p>
</li>
<li>
<p>在 &ldquo;chensoul_hello&rdquo; 文件夹中创建一个名为 <code>__init__.py</code> 的空文件。这个文件用于指示 Python 解释器该文件夹是一个 Python 包。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir chensoul_hello
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> chensoul_hello
</span></span><span class="line"><span class="cl">touch __init__.py
</span></span></code></pre></div></li>
<li>
<p>在 &ldquo;chensoul_hello&rdquo; 文件夹中创建一个名为 <code>cli.py</code> 的文件。这个文件用于定义命令行脚本的入口函数。在 <code>cli.py</code> 文件中添加以下代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello, world!&#34;</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="5使用-setuptools-构建包">5、使用 setuptools 构建包</h2>
<p>在项目的根目录，使用以下命令来构建源码分发包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python setup.py sdist
</span></span></code></pre></div><p>或者使用以下命令来构建二进制 wheel 包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python setup.py bdist_wheel
</span></span></code></pre></div><p>在执行上面两个命令之前，需要确保已经安装了 setuptools 和 wheel。如果没有安装，可以使用以下命令安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install setuptools wheel
</span></span></code></pre></div><p>也可以一起执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python setup.py sdist bdist_wheel
</span></span></code></pre></div><p>执行完成后，会在当前目录下生成 dist 目录，并在其中生成两个包文件：一个源代码包和一个二进制包。这两个包文件可以通过 pip 安装，也可以直接将它们拷贝到其他机器上使用。</p>
<h2 id="6使用-twine-发布包">6、使用 twine 发布包</h2>
<p>twine 是一个 Python 包，用于将 Python 包上传到 PyPI 或其他类似的包仓库。它可以帮助你将打包好的 Python 包上传到 PyPI 服务器或其他类似的服务器。</p>
<ol>
<li>安装 twine</li>
</ol>
<p>在终端或命令行中运行以下命令安装 twine：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install twine
</span></span></code></pre></div><ol start="2">
<li>打包 Python 包</li>
</ol>
<p>如果你已经使用 setuptools 构建了源码分发包或二进制 wheel 包，可以使用 <code>wheel</code> 工具来将其转换为 wheel 包或上传到 PyPI 或其他支持的包仓库。例如，使用以下命令将源码分发包转换为 wheel 包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip wheel dist/chensoul_hello-1.0.0.tar.gz
</span></span></code></pre></div><ol start="3">
<li>注册账号</li>
</ol>
<p>在上传包之前，你需要注册一个 PyPI 账号。如果你还没有注册，请访问 PyPI 网站（https://pypi.org/account/register/）进行注册。</p>
<p>在使用 <code>twine</code> 工具上传包时，需要先在 PyPI 网站上注册账号并获取上传凭证（例如 API 密钥或用户名密码），然后将凭证保存在本地的 <code>$HOME/.pypirc</code> 文件中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">pypi</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">username</span> <span class="p">=</span> <span class="nx">__token__</span>
</span></span><span class="line"><span class="cl">  <span class="nx">password</span> <span class="p">=</span> <span class="nx">pypi-XXXXXX</span>
</span></span></code></pre></div><ol start="4">
<li>上传 Python 包</li>
</ol>
<p><code>twine</code> 工具支持上传到以下包仓库：</p>
<ul>
<li>
<p>PyPI（Python Package Index）：PyPI 是 Python 社区的官方包仓库，提供了大量的 Python 包供用户下载和使用。PyPI 使用 <a href="https://pypi.org/">https://pypi.org/</a> 作为官方网站，可以使用 <code>twine</code> 工具将包上传到 PyPI。</p>
</li>
<li>
<p>Test PyPI：Test PyPI 是 PyPI 的一个测试环境，用于测试和验证包的上传和分发过程。Test PyPI 使用 <a href="https://test.pypi.org/">https://test.pypi.org/</a> 作为官方网站，可以使用 <code>twine</code> 工具将包上传到 Test PyPI。</p>
</li>
<li>
<p>任何支持 twine 格式的包仓库：<code>twine</code> 工具支持将包上传到任何支持 twine 格式的包仓库，只需要指定包仓库的 URL 和凭证即可。例如，可以使用 <code>twine</code> 工具将包上传到自己的私有包仓库或第三方包仓库。</p>
</li>
</ul>
<p>例如，使用以下命令将一个 wheel 包上传到 PyPI：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ twine upload dist/chensoul_hello-1.0.0-py3-none-any.whl
</span></span><span class="line"><span class="cl">Enter your username: __token__
</span></span><span class="line"><span class="cl">Enter your password:
</span></span></code></pre></div><p>或者使用以下命令将一个源码分发包上传到 PyPI：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">twine upload dist/chensoul_hello-1.0.0.tar.gz
</span></span></code></pre></div><p>同时上传wheel 包和源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">twine upload dist/*
</span></span></code></pre></div><p>这个命令将会上传 <code>dist</code> 目录下的所有包到 Test PyPI。需要注意的是，上传到不同的包仓库可能需要不同的命令和参数，具体可以参考包仓库的文档或帮助信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">twine upload --repository-url https://test.pypi.org/legacy/ dist/*
</span></span></code></pre></div><p>如果上传时提示错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Uploading distributions to https://upload.pypi.org/legacy/
</span></span><span class="line"><span class="cl">Uploading chensoul_hello-1.0.0-py3-none-any.whl
</span></span><span class="line"><span class="cl">100% ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 4.5/4.5 kB • 00:00 • ?
</span></span><span class="line"><span class="cl">WARNING  Error during upload. Retry with the --verbose option <span class="k">for</span> more details.
</span></span><span class="line"><span class="cl">ERROR    HTTPError: <span class="m">403</span> Forbidden from https://upload.pypi.org/legacy/
</span></span><span class="line"><span class="cl">        The user <span class="s1">&#39;chensoul&#39;</span> isn<span class="s1">&#39;t allowed to upload to project &#39;</span>my-package<span class="err">&#39;</span>. See https://pypi.org/help/#project-name <span class="k">for</span> more information.
</span></span></code></pre></div><p>原因是项目名称 my-package 不合法或者已存在，需要修改包名称。</p>
<p>如果项目已经存在，则可以添加参数覆盖已经存在的项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">twine upload dist/* --skip-existing
</span></span></code></pre></div><h2 id="7使用-pip-安装包">7、使用 pip 安装包</h2>
<p>如果你想安装、升级或删除 Python 包，可以使用 <code>pip</code> 工具来进行操作。</p>
<p>使用以下命令来安装本地的包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install dist/chensoul_hello-1.0.0.tar.gz
</span></span></code></pre></div><p>或者安装本地的 wheel 包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install dist/chensoul_hello-1.0.0-py3-none-any.whl
</span></span></code></pre></div><p>也可以使用以下命令来从仓库中安装一个包及其依赖项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pip install chensoul_hello
</span></span></code></pre></div><p>查看本地下载的安装包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ pip list<span class="p">|</span>grep chensoul-hello
</span></span><span class="line"><span class="cl">chensoul-hello     1.0.0
</span></span></code></pre></div><blockquote>
<p>在使用 setuptools 构建 Python 包时，包名应该符合 Python 包命名规范。具体来说，包名应该只包含小写字母、数字和短横线 <code>-</code>，不能包含其他字符，包名应该以字母开头，并且不能超过 32 个字符。</p>
<p>另外，如果你在包名中使用了短横线 <code>-</code>，在引用包时需要将其替换成下划线 <code>_</code>。例如，如果你的包名为 <code>chensoul-hello</code>，在引用包时应该使用 <code>import chensoul_hello</code>。</p>
<p>总之，在使用 setuptools 构建 Python 包时，包名应该符合 Python 包命名规范，并且如果包名中包含短横线 <code>-</code>，在引用包时应该使用下划线 <code>_</code>。</p>
</blockquote>
<p>可以使用以下命令导出当前环境中的所有依赖项列表到 requirements.txt 文件中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip freeze &gt; requirements.txt
</span></span></code></pre></div><p>可以使用以下命令根据 requirements.txt 文件中的依赖项列表安装包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install -r requirements.txt
</span></span></code></pre></div><h2 id="8运行命令">8、运行命令</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ hello_command
</span></span><span class="line"><span class="cl">Hello, world!
</span></span></code></pre></div><h2 id="9使用-pypabuild-构建包">9、使用 pypa/build 构建包</h2>
<p>执行下面命令时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python setup.py bdist_wheel
</span></span></code></pre></div><p>出现一个警告：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">        ********************************************************************************
</span></span><span class="line"><span class="cl">        Please avoid running <span class="sb">``</span>setup.py<span class="sb">``</span> directly.
</span></span><span class="line"><span class="cl">        Instead, use pypa/build, pypa/installer, pypa/build or
</span></span><span class="line"><span class="cl">        other standards-based tools.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        See https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html <span class="k">for</span> details.
</span></span><span class="line"><span class="cl">        ********************************************************************************
</span></span></code></pre></div><p>pypa/build 和 pypa/installer 是 Python Packaging Authority（PyPA）维护的两个工具，分别用于构建和安装 Python 包。pypa/build 就是 build 模块，而 pypa/installer 就是pip。</p>
<p>下面是它们的使用方法：</p>
<ol>
<li>
<p>安装 pypa/build 工具：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install build
</span></span></code></pre></div></li>
<li>
<p>运行以下命令构建包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">python -m build
</span></span></code></pre></div><p><code>python -m build</code> 是一个用于构建 Python 包的命令行工具，它是 Python 3.10 中新增的标准库模块 <code>build</code> 的入口点。使用 <code>python -m build</code> 可以方便地构建源代码发行包和二进制发行包，支持多种格式，包括 <code>sdist</code>、<code>wheel</code>、<code>zip</code>、<code>tar</code> 等。</p>
<p>在使用 <code>python -m build</code> 构建 Python 包之前，需要确保你的项目符合 Python 包的标准。具体来说，你需要在项目根目录下创建一个 <code>setup.cfg</code> 文件和一个 <code>setup.py</code> 文件，其中 <code>setup.cfg</code> 文件包含项目元数据和构建选项，<code>setup.py</code> 文件包含构建和打包的具体实现。</p>
</li>
<li>
<p>如果需要发布包到 PyPI 或其他包仓库，可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">twine upload dist/*
</span></span></code></pre></div></li>
</ol>
<h2 id="10附录">10、附录</h2>
<h3 id="pypabuild-和-setuptools-对比">pypa/build 和 setuptools 对比</h3>
<p><code>python -m build</code> 和 <code>python setup.py sdist bdist_wheel</code> 都是用于构建 Python 包的命令行工具，但它们有一些区别。</p>
<ul>
<li><code>python -m build</code> 是 Python 3.10 中新增的标准库模块 <code>build</code> 的入口点，支持多种构建格式，包括 <code>sdist</code>、<code>wheel</code>、<code>zip</code>、<code>tar</code> 等。它可以自动构建源代码发行包和二进制发行包，并支持多种平台和 Python 版本。<code>python -m build</code> 的使用方式比较简单，需要在项目根目录下创建一个 <code>setup.py</code> 文件或者 <code>pyproject.toml</code> 文件，然后在项目根目录下执行 <code>python -m build</code> 命令即可。</li>
<li><code>python setup.py sdist bdist_wheel</code> 是传统的 Python 包构建方式，需要在项目根目录下创建一个 <code>setup.py</code> 文件，其中包含构建和打包的具体实现。它支持的构建格式比较有限，只包括 <code>sdist</code> 和 <code>bdist_wheel</code> 两种格式。<code>python setup.py sdist bdist_wheel</code> 的使用方式相对较为繁琐，需要执行多个命令，并指定相应的参数和选项。</li>
</ul>
<p>总之，<code>python -m build</code> 是 Python 3.10 中新增的标准库模块 <code>build</code> 的入口点，支持多种构建格式，使用起来比较简单。而 <code>python setup.py sdist bdist_wheel</code> 是传统的 Python 包构建方式，使用起来相对较为繁琐，但仍然是一种常见的构建方式。需要根据自己的实际情况选择适合的构建工具。</p>
<p>相对于使用 <code>python setup.py sdist bdist_wheel</code> 命令，使用 <code>python -m build</code> 命令有以下几个优点：</p>
<ol>
<li>更简单的命令：<code>python -m build</code> 命令比 <code>python setup.py sdist bdist_wheel</code> 命令更加简单易用，因为它不需要你编写 <code>setup.py</code> 文件。你可以使用 <code>pyproject.toml</code> 文件来代替，这样会更简单和现代化。</li>
<li>更好的配置：<code>build</code> 模块使用 <code>pyproject.toml</code> 文件来配置包的构建，这是一种更现代和标准化的配置方式。该文件可以指定构建依赖项、包含在软件包中的其他文件以及其他元数据。</li>
<li>更多的输出格式：<code>python -m build</code> 支持比 <code>python setup.py sdist bdist_wheel</code> 更多的输出格式，包括 <code>wheel</code>、<code>sdist</code>、<code>zip</code>、<code>tar</code> 等等。</li>
<li>更好的性能：相对于 <code>python setup.py sdist bdist_wheel</code> 命令，<code>python -m build</code> 命令通常更快，特别是对于具有许多依赖项的大型项目而言。这是因为 <code>build</code> 可以并行处理某些任务，例如构建二进制软件包。</li>
<li>更好的兼容性：<code>python -m build</code> 设计为与多个 Python 版本和平台兼容，而 <code>python setup.py sdist bdist_wheel</code> 命令通常特定于特定版本或平台。</li>
</ol>
<p>综上所述，相对于 <code>python setup.py sdist bdist_wheel</code> 命令，<code>python -m build</code> 提供了一种更简单、更现代、更灵活的构建 Python 包的方式，具有更好的性能和兼容性。不过，<code>python setup.py sdist bdist_wheel</code> 命令仍然是构建软件包的常用和得到广泛支持的方法，特别是对于较老的项目或具有更复杂要求的项目而言。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记9：使用 try-with-resources 优于 try-finally</title>
      <link>https://blog.chensoul.com/posts/2023/05/08/prefer-try-with-resources-to-try-finally/</link>
      <pubDate>Mon, 08 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/08/prefer-try-with-resources-to-try-finally/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：使用 try-with-resources 优于 try-finally。 介绍 Java 库包含许多必须通过调用 close 方法手动关闭的资源。常见的</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记：使用 try-with-resources 优于 try-finally。</p>
<h2 id="介绍">介绍</h2>
<p>Java 库包含许多必须通过调用 close 方法手动关闭的资源。常见的有 InputStream、OutputStream 和 java.sql.Connection。关闭资源常常会被客户端忽略，这会导致可怕的性能后果。虽然这些资源中的许多都使用终结器作为安全网，但终结器并不能很好地工作。</p>
<p>从历史上看，try-finally 语句是确保正确关闭资源的最佳方法，即使在出现异常或返回时也是如此：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// try-finally - No longer the best way to close resources!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="n">String</span> <span class="nf">firstLineOfFile</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这可能看起来不坏，但添加第二个资源时，情况会变得更糟：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// try-finally is ugly when used with more than one resource!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="kt">void</span> <span class="nf">copy</span><span class="o">(</span><span class="n">String</span> <span class="n">src</span><span class="o">,</span> <span class="n">String</span> <span class="n">dst</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">src</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">OutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">dst</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">BUFFER_SIZE</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="o">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用 try-finally 语句关闭资源的正确代码（如前两个代码示例所示）也有一个细微的缺陷。try 块和 finally 块中的代码都能够抛出异常。例如，在 firstLineOfFile 方法中，由于底层物理设备发生故障，对 readLine 的调用可能会抛出异常，而关闭的调用也可能出于同样的原因而失败。<code>在这种情况下，第二个异常将完全覆盖第一个异常</code>。异常堆栈跟踪中没有第一个异常的记录，这可能会使实际系统中的调试变得非常复杂（而这可能是希望出现的第一个异常，以便诊断问题）。虽然可以通过编写代码来抑制第二个异常而支持第一个异常，但实际上没有人这样做，因为它太过冗长。</p>
<p>当 Java 7 引入 try-with-resources 语句时，所有这些问题都一次性解决了。要使用这个结构，资源必须实现 AutoCloseable 接口，它由一个单独的 void-return close 方法组成。Java 库和第三方库中的许多类和接口现在都实现或扩展了 AutoCloseable。如果你编写的类存在必须关闭的资源，那么也应该实现 AutoCloseable。</p>
<p>下面是使用 try-with-resources 的第一个示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// try-with-resources - the the best way to close resources!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="n">String</span> <span class="nf">firstLineOfFile</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">)))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>下面是使用 try-with-resources 的第二个示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// try-with-resources on multiple resources - short and sweet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="kt">void</span> <span class="nf">copy</span><span class="o">(</span><span class="n">String</span> <span class="n">src</span><span class="o">,</span> <span class="n">String</span> <span class="n">dst</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">src</span><span class="o">);</span><span class="n">OutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">dst</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">BUFFER_SIZE</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>和使用 try-finally 的原版代码相比，try-with-resources 为开发者提供了更好的诊断方式。考虑 firstLineOfFile 方法。如果异常是由 readLine 调用和不可见的 close 抛出的，则后一个异常将被抑制，以支持前一个异常。实际上，还可能会抑制多个异常，以保留实际希望看到的异常。这些被抑制的异常不会仅仅被抛弃；它们会被打印在堆栈跟踪中，并标记它们被抑制。可以通过编程方式使用 getSuppressed 方法访问到它们，该方法是在 Java 7 中添加到 Throwable 中的。</p>
<p>可以在带有资源的 try-with-resources 语句中放置 catch 子句，就像在常规的 try-finally 语句上一样。这允许处理异常时不必用另一层嵌套来影响代码。作为一个特指的示例，下面是我们的 firstLineOfFile 方法的一个版本，它不抛出异常，但如果无法打开文件或从中读取文件，则返回一个默认值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// try-with-resources with a catch clause
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="n">String</span> <span class="nf">firstLineOfFile</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="n">String</span> <span class="n">defaultVal</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">)))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">defaultVal</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="扩展">扩展</h2>
<p><code>try-with-resources</code> 语句是 Java 7 中引入的一种新语法，主要目的是为了简化资源管理的代码，并确保资源被正确地关闭，避免了资源泄漏和异常处理的问题。</p>
<p>在 Java 中，当使用一些需要手动释放资源的类时，例如 I/O 流、数据库连接等，我们需要在代码中显式地调用 <code>close()</code> 方法来释放资源。这种方式可能会出现一些问题，例如：</p>
<ol>
<li>忘记关闭资源：如果开发人员忘记关闭资源，可能会导致资源泄漏，占用系统资源，降低系统性能。</li>
<li>异常处理问题：如果在关闭资源之前发生异常，可能会导致资源未能正确关闭，进一步导致资源泄漏和其他问题。</li>
</ol>
<p>为了解决这些问题，Java 7 引入了 <code>try-with-resources</code> 语句。它提供了一种更简洁、更安全、更易读的方式来管理资源的关闭，避免了开发人员手动释放资源的问题，并且可以确保资源被正确地关闭。</p>
<p>使用 <code>try-with-resources</code> 语句，我们可以将资源的创建和初始化放在 <code>try</code> 语句的括号内，它们在 <code>try</code> 块执行结束后，会自动关闭资源。如果在关闭资源时发生异常，<code>try-with-resources</code> 语句会自动处理异常，确保所有资源都被正确地关闭。</p>
<p><code>try-with-resources</code> 语句使用以下语法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">Resource1</span> <span class="n">r1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource1</span><span class="o">();</span> <span class="n">Resource2</span> <span class="n">r2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource2</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// use r1 and r2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// handle the exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>Resource1</code> 和 <code>Resource2</code> 是需要在使用后关闭的资源，它们将在 <code>try</code> 块结束后自动关闭。如果发生异常，<code>catch</code> 块将处理它。</p>
<p><code>Resource1</code> 和 <code>Resource2</code> 必须实现 <code>AutoCloseable</code> 接口，该接口定义了 <code>close()</code> 方法，用于关闭资源。当 <code>try</code> 块结束时，<code>close()</code> 方法将自动被调用，以便关闭资源。</p>
<p>需要注意的是，<code>try-with-resources</code> 语句可以同时管理多个资源，资源的创建和初始化应该在 <code>try</code> 语句的括号内完成。</p>
<p><code>try-with-resources</code> 语句有以下优点：</p>
<ol>
<li>简洁性：<code>try-with-resources</code> 语句可以让代码更简洁，不需要显式地调用 <code>close()</code> 方法。</li>
<li>安全性：<code>try-with-resources</code> 语句可以确保资源被正确地关闭，避免了资源泄漏和异常处理的问题。</li>
<li>可读性：<code>try-with-resources</code> 语句可以让代码更易读，更容易理解资源的使用和管理。</li>
</ol>
<p>需要注意的是，<code>try-with-resources</code> 语句只能用于管理实现了 <code>AutoCloseable</code> 接口的资源，并且只有在 Java 7 及以上版本才支持该语法。</p>
<p>除了 I/O 流和数据库连接之外，还有一些类需要手动释放资源，例如：</p>
<ol>
<li>图形界面组件：在使用图形界面组件时，例如窗口、对话框、面板等，需要手动释放资源，例如关闭窗口、释放图形资源等。</li>
<li>线程：在使用线程时，需要手动停止线程，释放线程占用的系统资源。</li>
<li>Socket 和 ServerSocket：在使用 Socket 和 ServerSocket 时，需要手动关闭它们，以便释放网络资源。</li>
<li>文件句柄：在使用文件系统时，需要手动关闭文件句柄，以便释放系统资源。</li>
<li>JDBC Statement 和 ResultSet：在使用 JDBC 时，需要手动关闭 Statement 和 ResultSet 对象，以便释放数据库资源。</li>
<li>JNI 资源：在使用 JNI 调用本地方法时，需要手动释放 JNI 资源，例如 C/C++ 中的内存和文件句柄等。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记8：避免使用终结器和清除器</title>
      <link>https://blog.chensoul.com/posts/2023/05/08/avoid-finalizers-and-cleaners/</link>
      <pubDate>Mon, 08 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/08/avoid-finalizers-and-cleaners/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：避免使用终结器和清除器。 介绍 终结器是不可预测的、常常是危险的，通常也是不必要的。 它们的使用</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记：避免使用终结器和清除器。</p>
<h2 id="介绍">介绍</h2>
<p><strong>终结器是不可预测的、常常是危险的，通常也是不必要的。</strong> 它们的使用可能导致不稳定的行为、低效率和可移植性问题。终结器有一些有效的用途，我们稍后会介绍，但通常情况下应该避免使用它们。从 Java 9 开始，终结器已经被弃用，但它们仍然被 Java 库使用。Java 9 中终结器的替代品是清除器。 <strong>清除器的危险比终结器小，但仍然不可预测、缓慢，而且通常是不必要的。</strong></p>
<blockquote>
<p>终结器是通过在对象上实现 <code>finalize()</code> 方法来实现的，而清除器是通过使用 <code>Cleaner</code> 类来实现的。它们的工作方式有所不同：</p>
<ul>
<li>
<p>终结器是由垃圾回收器自动执行的，无法预测何时执行，也无法保证一定会执行。当垃圾回收器决定将对象回收时，它会调用对象的 <code>finalize()</code> 方法，以便对象在被销毁之前执行一些清理操作。</p>
</li>
<li>
<p>清除器是由 Java 9 虚拟机通过引用队列和 <code>Cleaner</code> 对象执行的，可以在对象被回收之前或之后执行。在对象被垃圾回收之前，Java 虚拟机会将该对象的引用添加到一个引用队列中，然后在某些时刻，Java 虚拟机会创建一个 <code>Cleaner</code> 对象，并将该引用队列与 <code>Cleaner</code> 对象关联起来。当该对象被垃圾回收时，它的引用将被添加到与 <code>Cleaner</code> 对象关联的引用队列中，<code>Cleaner</code> 对象会在某些时刻自动执行，以便对象在被销毁之前或之后执行一些清理操作。</p>
</li>
<li>
<p>在 Java 9 中，引入了 <code>java.lang.ref.Cleaner</code> 类，作为终结器的替代品，用于执行对象清理操作。相比终结器，Cleaner 具有以下优点：</p>
<ol>
<li>显式管理：Cleaner 使用明确的代码路径来管理清理操作，而不是使用隐式的终结器机制。</li>
<li>可控性：Cleaner 允许开发人员控制何时执行清理操作，而不是完全依赖于垃圾回收器的行为。</li>
<li>安全性：Cleaner 执行清理操作时，会确保类加载器已准备好，因此可以安全地执行本地清理操作。</li>
</ol>
<p>Cleaner 通过注册一个任务来执行清理操作。该任务可以是 Runnable 或者继承自 PhantomReference 类的子类对象。当对象被垃圾回收器回收时，Cleaner 将自动执行注册的任务。</p>
</li>
</ul>
</blockquote>
<p>终结器和清除器的使用场景非常有限，因为它们的执行时间不可预测，可能会导致一些问题，例如性能问题、不稳定的行为、低效率和可移植性问题。</p>
<p>终结器和清除器的主要问题是：</p>
<ul>
<li>
<p>它们无法可靠地及时执行，甚至可能根本不会执行。当对象变得不可访问，终结器或清除器对它进行操作的时间是不确定的。这意味着永远不应该在终结器或清除器中执行任何对时间要求很严格的操作。例如，依赖终结器或清除器关闭文件就是一个严重错误，因为打开的文件描述符是有限的资源。如果由于系统在运行终结器或清除器的延迟导致许多文件处于打开状态，程序可能会运行失败，因为它不能再打开其他文件。</p>
<p>终结器的另一个问题是，在终结期间抛出的未捕获异常被忽略，该对象的终结终止。未捕获的异常可能会使其他对象处于损坏状态。如果另一个线程试图使用这样一个损坏的对象，可能会导致任意的不确定性行为。正常情况下，未捕获的异常将终止线程并打印堆栈跟踪，但如果在终结器中出现，则不会打印警告。清除器没有这个问题，因为使用清除器的库可以控制它的线程。</p>
</li>
<li>
<p>它们可能会导致性能问题。终结器由垃圾回收器执行，这可能会导致垃圾回收过程中的延迟。另一方面，清除器使用单独的线程执行，这可能会导致额外的开销和同步问题。</p>
</li>
</ul>
<p>《Effective Java》第三版建议使用显式终止方法，例如 <code>close()</code>，释放系统资源。当应用程序完成对资源的使用时，可以显式调用这些方法，而不依赖于垃圾回收器来执行它们。</p>
<p>如果必须使用终结器或清除器， 《Effective Java》第三版建议使用防御性编程实现它们，即使用 try-finally 块确保执行关键的清理操作，并避免引用其他可能已被垃圾回收的对象或资源。</p>
<h2 id="扩展">扩展</h2>
<h3 id="systemgc">System.gc()</h3>
<p><code>System.gc()</code> 方法是 Java 中的一种垃圾回收机制，它可以在请求垃圾回收器运行时强制进行一次垃圾回收。</p>
<p><code>System.gc()</code> 方法不是强制垃圾回收的方法，因为 Java 虚拟机可以忽略它。Java 编程语言规范要求 <code>System.gc()</code> 方法只是一个建议，不能保证它一定会导致垃圾回收器运行。因此，它不应该被频繁地调用，因为这可能会导致性能问题。</p>
<p><code>System.gc()</code> 方法的使用场景非常有限。通常情况下，应该让垃圾回收器自行管理内存，而不是使用 <code>System.gc()</code> 方法来强制进行垃圾回收。如果需要确保某些对象在垃圾回收之前被释放，可以使用弱引用或软引用来管理这些对象，或使用显式终止方法来释放系统资源。</p>
<p>需要注意的是，<code>System.gc()</code> 方法可能会耗费较长时间，因为它可能会强制回收所有未使用的对象。因此，在实际使用中，应该谨慎使用 <code>System.gc()</code> 方法，并仅在必要时使用它。</p>
<h3 id="systemrunfinalization">System.runFinalization()</h3>
<p><code>System.runFinalization()</code> 方法是在 Java 1.2 版本中引入的。在 Java 1.2 中，引入了垃圾回收器的改进，包括使用引用类型、终结器和垃圾回收器性能的提升。<code>System.runFinalization()</code> 方法作为终结器机制的一部分，用于确保所有对象的<code>finalize()</code> 方法被执行。在垃圾回收器将对象从内存中释放之前，如果该对象具有终结器，则垃圾回收器会调用对象的 <code>finalize()</code> 方法，以便在对象被销毁之前执行一些清理操作。<code>System.runFinalization()</code> 方法可以确保所有对象的 <code>finalize()</code> 方法被执行。</p>
<p><code>System.runFinalization()</code> 方法不是强制终结器执行的方法，因为 Java 虚拟机可以忽略它。Java 编程语言规范要求 <code>System.runFinalization()</code> 方法只是一个建议，不能保证它一定会导致终结器执行。因此，它不应该被频繁地调用，因为这可能会导致性能问题。</p>
<p><code>System.runFinalization()</code> 方法的使用场景非常有限。通常情况下，应该避免使用终结器来执行清理操作，因为终结器的执行时间不可预测，可能会导致一些问题，例如性能问题、不稳定的行为、低效率和可移植性问题。相反，应该使用显式终止方法来释放系统资源。</p>
<p>需要注意的是，<code>System.runFinalization()</code> 方法可能会耗费较长时间，因为它可能会执行所有对象的终结器。因此，在实际使用中，应该谨慎使用 <code>System.runFinalization()</code> 方法，并仅在必要时使用它</p>
<h3 id="清除器和终结器使用场景">清除器和终结器使用场景</h3>
<p>使用清除器和终结器的例子并不常见，因为它们的使用场景非常有限。以下是一些可能需要使用清除器和终结器的场景：</p>
<ul>
<li>在 Java 8 及之前的版本中，<code>java.sql.Connection</code> 类中的 <code>finalize()</code> 方法被用于关闭数据库连接。在 Java 9 中，这个方法被弃用，因为终结器的使用不可靠和危险。相反，<code>Connection</code> 接口中添加了一个 <code>close()</code> 方法，应该使用这个方法来释放数据库连接。</li>
<li>在 Java 9 中，<code>java.lang.ref.Cleaner</code> 类被引入作为终结器的替代品，可以用于执行对象清理操作。例如，如果需要在对象被垃圾回收之前执行一些清理操作（例如释放本地内存或关闭文件句柄），可以使用 <code>Cleaner</code> 类来实现。以下是一个使用 <code>Cleaner</code> 类的简单示例：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Resource</span> <span class="kd">implements</span> <span class="n">AutoCloseable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Cleaner</span> <span class="n">cleaner</span> <span class="o">=</span> <span class="n">Cleaner</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">File</span> <span class="n">file</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Resource</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">file</span> <span class="o">=</span> <span class="n">file</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">cleaner</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="k">new</span> <span class="n">CleanupTask</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// release any resources held by this object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">CleanupTask</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kd">final</span> <span class="n">File</span> <span class="n">file</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="nf">CleanupTask</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">file</span> <span class="o">=</span> <span class="n">file</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// clean up the resource associated with the given file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>Resource</code> 类持有一个 <code>File</code> 对象，并在创建对象时使用 <code>Cleaner</code> 类注册了一个 <code>CleanupTask</code> 对象。当 <code>Resource</code> 对象被垃圾回收时，<code>Cleaner</code> 对象将自动调用 <code>CleanupTask</code> 对象的 <code>run()</code> 方法，以便执行 <code>File</code> 对象的清理操作（例如关闭文件句柄）。</p>
<p>需要注意的是，这仅是一个简单的示例，实际使用中需要谨慎使用和考虑清除器和终结器的局限性。通常情况下，我们应该避免使用它们，使用显式终止方法来释放系统资源。</p>
<p>以下是一些使用显式终止方法的例子：</p>
<ol>
<li>Java I/O 类。Java I/O 类通常需要使用显式终止方法来释放系统资源，例如关闭文件句柄或网络连接。例如，<code>java.io.FileInputStream</code> 类中的 <code>close()</code> 方法用于关闭打开的文件。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;example.txt&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// read from the file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// handle the exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，使用 <code>try-with-resources</code> 语句来创建 <code>FileInputStream</code> 对象，这将自动调用 <code>close()</code> 方法，以便释放文件句柄。</p>
<ol start="2">
<li>数据库连接。数据库连接通常需要使用显式终止方法来释放连接。例如，<code>java.sql.Connection</code> 接口中的 <code>close()</code> 方法用于关闭数据库连接。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">user</span><span class="o">,</span> <span class="n">password</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// use the database connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// handle the exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，使用 <code>try-with-resources</code> 语句来创建 <code>Connection</code> 对象，这将自动调用 <code>close()</code> 方法，以便释放数据库连接。</p>
<ol start="3">
<li>线程池。线程池通常需要使用显式终止方法来关闭线程池，以便释放线程资源。例如，<code>java.util.concurrent.ExecutorService</code> 接口中的 <code>shutdown()</code> 方法用于关闭线程池。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// submit tasks to the executor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，使用 <code>finally</code> 块来确保在执行完任务后关闭线程池，以便释放线程资源。</p>
<h3 id="如何避免资源泄漏">如何避免资源泄漏？</h3>
<p>资源泄漏是指在使用资源（如文件句柄、网络连接、数据库连接、线程等）时，没有正确地释放或关闭它们，导致资源长时间占用，最终可能导致程序崩溃或系统性能下降。</p>
<p>以下是一些避免资源泄漏的方法：</p>
<ol>
<li>使用 <code>try-with-resources</code> 语句。<code>try-with-resources</code> 语句是一种自动关闭资源的机制，可以确保在使用完资源后自动关闭它们。例如：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;example.txt&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// read from the file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// handle the exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>FileInputStream</code> 对象将在 <code>try</code> 块结束后自动关闭。</p>
<ol start="2">
<li>
<p>显式关闭资源。如果不能使用 <code>try-with-resources</code> 语句，应该使用显式关闭资源的方法来释放资源。例如，在使用完数据库连接后，应该调用 <code>Connection</code> 接口中的 <code>close()</code> 方法来释放连接。</p>
</li>
<li>
<p>使用防御性编程。在使用资源时，应该使用防御性编程，确保在任何情况下都能正确地释放资源。例如，在使用文件句柄时，应该确保在读取或写入文件时，使用 <code>try-finally</code> 块来确保在发生异常时关闭文件句柄。</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">FileInputStream fis = null;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">try {
</span></span><span class="line"><span class="cl">    fis = new FileInputStream(&#34;example.txt&#34;);
</span></span><span class="line"><span class="cl">    // read from the file
</span></span><span class="line"><span class="cl">} catch (IOException e) {
</span></span><span class="line"><span class="cl">    // handle the exception
</span></span><span class="line"><span class="cl">} finally {
</span></span><span class="line"><span class="cl">    if (fis != null) {
</span></span><span class="line"><span class="cl">        try {
</span></span><span class="line"><span class="cl">            fis.close();
</span></span><span class="line"><span class="cl">        } catch (IOException e) {
</span></span><span class="line"><span class="cl">            // handle the exception
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><p>在这个例子中，使用 <code>try-finally</code> 块来确保在发生异常时关闭文件句柄。</p>
<ol start="4">
<li>使用资源管理框架。一些资源管理框架，例如 Apache Commons IO 和 Google Guava，提供了一些实用工具类和方法，可以帮助避免资源泄漏。</li>
</ol>
<h2 id="总结">总结</h2>
<p>终结器和清除器都是 Java 中用于对象清理的机制，它们各有优缺点。</p>
<p>终结器的优点：</p>
<ol>
<li>无需显式调用：终结器是一种自动的机制，无需显式调用，可以在对象被垃圾回收时自动执行。</li>
<li>灵活性：终结器允许开发人员编写任意的清理代码，无需考虑清理操作的执行时间或顺序。</li>
</ol>
<p>终结器的缺点：</p>
<ol>
<li>不可控性：终结器的执行时间和顺序是不可预测的，可能会导致一些问题，例如性能问题、不稳定的行为、低效率和可移植性问题。</li>
<li>安全性问题：终结器可能会引起一些安全性问题，例如在 <code>finalize()</code> 方法中重新启动线程或打开文件等。</li>
</ol>
<p>清除器的优点：</p>
<ol>
<li>明确的代码路径：清除器使用明确的代码路径来执行清理操作，相比终结器，它更加可控和安全。</li>
<li>可控性：清除器允许开发人员控制何时执行清理操作，而不是完全依赖于垃圾回收器的行为。</li>
<li>安全性：清除器执行清理操作时，会确保类加载器已准备好，因此可以安全地执行本地清理操作。</li>
</ol>
<p>清除器的缺点：</p>
<ol>
<li>显式调用：清除器需要显式调用，开发人员需要为每个需要清理的对象注册一个清理器，这可能会增加代码的复杂性。</li>
<li>限制性：清除器只能用于执行一些清理操作，不能用于执行其他类型的操作。</li>
</ol>
<p>综上所述，终结器和清除器各有优缺点，应该根据实际需求和场景选择适当的机制来管理对象清理。<code>一般来说，应该优先使用显式终止方法来释放系统资源，只有在必要时才考虑使用终结器或清除器。</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记7：排除过时的对象引用</title>
      <link>https://blog.chensoul.com/posts/2023/05/05/eliminate-obsolete-object-references/</link>
      <pubDate>Fri, 05 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/05/eliminate-obsolete-object-references/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：排除过时的对象引用。 介绍 &amp;ldquo;Eliminate obsolete object references&amp;rdquo; 是一条Java编程最佳实践的原则，指的是在代码中及时清理不</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记：排除过时的对象引用。</p>
<h2 id="介绍">介绍</h2>
<p>&ldquo;Eliminate obsolete object references&rdquo; 是一条Java编程最佳实践的原则，指的是在代码中及时清理不再使用的对象引用，以避免内存泄漏和性能问题。当一个对象不再需要时，应该尽快将其引用设置为null，这样JVM可以及时回收它所占用的内存。</p>
<p>考虑以下简单的堆栈实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.EmptyStackException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Can you spot the &#34;memory leak&#34;?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Stack</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_INITIAL_CAPACITY</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Stack</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">elements</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="n">DEFAULT_INITIAL_CAPACITY</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">Object</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ensureCapacity</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">elements</span><span class="o">[</span><span class="n">size</span><span class="o">++]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">EmptyStackException</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">elements</span><span class="o">[--</span><span class="n">size</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * Ensure space for at least one more element, roughly
</span></span></span><span class="line"><span class="cl"><span class="cm">     * doubling the capacity each time the array needs to grow.
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">ensureCapacity</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">size</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">elements</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">size</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个程序没有明显的错误。你可以对它进行详尽的测试，它会以优异的成绩通过所有的测试，但是有一个潜在的问题。简单地说，该程序有一个「内存泄漏」问题，由于垃圾收集器活动的增加或内存占用的增加，它可以悄无声息地表现为性能的降低。在极端情况下，这种内存泄漏可能导致磁盘分页，甚至出现 OutOfMemoryError 程序故障，但这种故障相对少见。</p>
<p>那么内存泄漏在哪里呢？如果堆栈增长，然后收缩，那么从堆栈中弹出的对象将不会被垃圾收集，即使使用堆栈的程序不再引用它们。这是因为栈保留了这些对象的旧引用。一个过时的引用，是指永远不会被取消的引用。在本例中，元素数组的「活动部分」之外的任何引用都已过时。活动部分由索引小于大小的元素组成。</p>
<p>垃圾收集语言中的内存泄漏（更确切地说是无意的对象保留）是暗藏的风险。如果无意中保留了对象引用，那么对象不仅被排除在垃圾收集之外，该对象引用的任何对象也被排除在外，依此类推。即使只是无意中保留了一些对象引用，许多许多的对象也可能被阻止被垃圾收集，从而对性能产生潜在的巨大影响。</p>
<p>解决这类问题的方法很简单：一旦引用过时，就将置空。在我们的 Stack 类中，对某个项的引用一旦从堆栈中弹出就会过时。pop 方法的正确版本如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">Object</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">EmptyStackException</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[--</span><span class="n">size</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">elements</span><span class="o">[</span><span class="n">size</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// Eliminate obsolete reference
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>用 null 处理过时引用的另一个好处是，如果它们随后被错误地关联引用，程序将立即失败，出现 NullPointerException，而不是悄悄地做错误的事情。尽可能快地检测编程错误总是有益的。</p>
<p>那么，什么时候应该取消引用呢？Stack 类的哪些方面容易导致内存泄漏？简单地说，它管理自己的内存。存储池包含元素数组的元素（对象引用单元，而不是对象本身）数组的活动部分（如前面所定义的）中的元素被分配，而数组其余部分中的元素是空闲的。垃圾收集器没有办法知道这一点；对于垃圾收集器，元素数组中的所有对象引用都同样有效。只有程序员知道数组的非活动部分不重要。只要数组元素成为非活动部分的一部分，程序员就可以通过手动清空数组元素，有效地将这个事实传递给垃圾收集器。</p>
<p>一般来说，一个类管理它自己的内存时，程序员应该警惕内存泄漏。当释放一个元素时，该元素中包含的任何对象引用都应该被置为 null。</p>
<p><strong>另一个常见的内存泄漏源是缓存。</strong> 一旦将对象引用放入缓存中，就很容易忘记它就在那里，并且在它变得无关紧要之后很久仍将它留在缓存中。有几个解决这个问题的办法。如果你非常幸运地实现了一个缓存，只要缓存外有对其键的引用，那么就将缓存表示为 WeakHashMap；当条目过时后，条目将被自动删除。记住，WeakHashMap 只有在缓存条目的预期生存期由键的外部引用（而不是值）决定时才有用。</p>
<p>更常见的情况是，缓存条目的有效生存期定义不太好，随着时间的推移，条目的价值会越来越低。在这种情况下，缓存偶尔应该清理那些已经停用的条目。这可以通过后台线程（可能是 <code>ScheduledThreadPoolExecutor</code>）或向缓存添加新条目时顺便完成。LinkedHashMap 类通过其 <code>removeEldestEntry</code> 方法简化了后一种方法。对于更复杂的缓存，你可能需要直接使用 <code>java.lang.ref</code>。</p>
<p><strong>内存泄漏的第三个常见来源是侦听器和其他回调。</strong> 如果你实现了一个 API，其中客户端注册回调，但不显式取消它们，除非你采取一些行动，否则它们将累积。确保回调被及时地垃圾收集的一种方法是仅存储对它们的弱引用，例如，将它们作为键存储在 WeakHashMap 中。</p>
<h3 id="如何排除过时对象引用">如何排除过时对象引用</h3>
<p>以下是一些示例，展示了如何使用Java语言中的一些技术来排除过时的对象引用。</p>
<ol>
<li>在循环中使用局部变量</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// do something with str
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用局部变量<code>str</code>来引用列表中的元素，而不是重复地使用<code>list.get(i)</code>。这样，当循环结束时，<code>str</code>的引用将被自动清除，避免了过时的对象引用。</p>
<ol start="2">
<li>在使用完对象后及时清除引用</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">SomeObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SomeObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// do something with obj
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// clear the reference to obj
</span></span></span></code></pre></div><p>在这个示例中，我们在使用完对象后立即将其引用设置为null，以便JVM可以及时回收它所占用的内存。如果不清除引用，对象将一直存在于内存中，直到JVM进行垃圾回收。</p>
<ol start="3">
<li>使用弱引用</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">SomeObject</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">SomeObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// do something with obj
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// clear the reference to obj
</span></span></span></code></pre></div><p>在这个示例中，我们使用了一个弱引用来引用对象，以便在对象不再被强引用时可以被及时回收。当我们需要使用对象时，可以通过弱引用获取对象的引用，使用完后及时将其引用设置为null。</p>
<ol start="4">
<li>使用try-with-resources语句</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;file.txt&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// do something with in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用了try-with-resources语句来打开一个文件流，并在使用完后自动关闭它。这样可以确保在不再需要文件流时，它的引用将被清除，避免了过时的对象引用。</p>
<ol start="5">
<li>使用软引用</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SoftReference</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">SomeObject</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">SomeObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// do something with obj
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// clear the reference to obj
</span></span></span></code></pre></div><p>在这个示例中，我们使用了一个软引用来引用对象，以便在JVM需要回收内存时可以回收对象。软引用在内存不足时通常会被回收，但在内存充足时可以保留对象，避免了过时的对象引用。</p>
<ol start="6">
<li>使用虚引用</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ReferenceQueue</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReferenceQueue</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="n">PhantomReference</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PhantomReference</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">SomeObject</span><span class="o">(),</span> <span class="n">queue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">ref</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span> <span class="c1">// clear the reference to obj
</span></span></span></code></pre></div><p>在这个示例中，我们使用了一个虚引用来引用对象，以便在JVM回收对象之前可以进行一些必要的清理工作。虚引用在JVM回收对象时会被添加到一个引用队列中，因此我们可以在对象被回收之前执行必要的清理工作。</p>
<ol start="7">
<li>使用对象池</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">ObjectPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">objects</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">T</span> <span class="nf">getObject</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">T</span> <span class="n">obj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">objects</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">obj</span> <span class="o">=</span> <span class="n">createObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">obj</span> <span class="o">=</span> <span class="n">objects</span><span class="o">.</span><span class="na">iterator</span><span class="o">().</span><span class="na">next</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">objects</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">returnObject</span><span class="o">(</span><span class="n">T</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">objects</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">T</span> <span class="nf">createObject</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// create a new object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用了一个对象池来管理对象的生命周期。当需要一个对象时，我们从对象池中获取一个对象，而不是每次都创建一个新的对象。当不再需要对象时，我们将其返回到对象池中，以便其他对象可以重复使用。对象池可以避免过时的对象引用，并提高代码的性能和可伸缩性。</p>
<ol start="8">
<li>使用弱散列映射</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">SomeObject</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SomeObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// clear the reference to key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// the entry in the map may be removed if key is not strongly referenced elsewhere
</span></span></span></code></pre></div><p>在这个示例中，我们使用了一个弱散列映射来存储对象引用和相应的值。当对象不再被强引用时，它的引用可能被从映射中删除，从而避免了过时的对象引用。弱散列映射通常用于缓存和事件处理等场景。</p>
<ol start="9">
<li>使用缓存</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">SomeObjectCache</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MAX_SIZE</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">SomeObject</span><span class="o">&gt;(</span><span class="n">MAX_SIZE</span><span class="o">,</span> <span class="mf">0.75f</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">removeEldestEntry</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">eldest</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">MAX_SIZE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kd">static</span> <span class="n">SomeObject</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">SomeObject</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用了一个缓存来存储对象引用和相应的值。当缓存达到最大大小时，最旧的条目将被自动删除，从而避免了过时的对象引用。缓存通常用于频繁访问的数据和计算结果，可以提高代码的性能和可伸缩性。</p>
<ol start="10">
<li>使用对象池框架</li>
</ol>
<p>对象池框架是一种用于管理对象生命周期的通用框架，可以避免过时的对象引用和提高代码的性能和可伸缩性。一些流行的对象池框架包括Apache Commons Pool和Google Guava Cache。</p>
<h2 id="扩展">扩展</h2>
<h3 id="弱引用软引用和虚引用区别">弱引用、软引用和虚引用区别</h3>
<p>弱引用、软引用和虚引用是Java中三种不同类型的引用，它们之间的区别如下：</p>
<h4 id="弱引用weakreference">弱引用（WeakReference）</h4>
<p>弱引用是一种较弱的引用类型，当一个对象只被弱引用所引用时，它在下一次垃圾回收时会被回收。</p>
<p>弱引用通常用于需要缓存大量对象的应用场景，例如缓存和高速缓存等。在这些场景中，使用弱引用可以避免占用过多的内存，同时又可以快速访问缓存中的对象。</p>
<p>应该使用弱引用的情况包括：</p>
<ol>
<li>
<p>需要缓存大量对象：使用弱引用可以避免占用过多的内存空间，从而可以缓存更多的对象。</p>
</li>
<li>
<p>不需要快速访问缓存中的对象：由于弱引用只有在下一次垃圾回收时才会被回收，因此可能会导致较长的访问延迟。如果应用程序可以容忍这种情况，可以考虑使用弱引用。</p>
</li>
<li>
<p>需要频繁的垃圾回收：由于弱引用只有在下一次垃圾回收时才会被回收，因此可能会导致频繁的垃圾回收。如果应用程序可以容忍这种情况，可以考虑使用弱引用。</p>
</li>
</ol>
<p>例如，我们可以使用弱引用来实现一个缓存，当内存不足时，JVM会自动回收弱引用所引用的对象，从而避免内存泄漏和OOM错误。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">SomeObject</span> <span class="nf">getObject</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">SomeObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">reference</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">reference</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">obj</span> <span class="o">=</span> <span class="n">reference</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">obj</span> <span class="o">=</span> <span class="n">createObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="n">obj</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用弱引用来缓存对象，当内存不足时，JVM会自动回收弱引用所引用的对象。这样可以避免占用过多的内存，同时又可以快速访问缓存中的对象。</p>
<h4 id="软引用softreference">软引用（SoftReference）</h4>
<p>软引用是一种较强的引用类型，当一个对象只被软引用所引用时，只有在内存不足时才会被回收。</p>
<p>软引用通常用于需要缓存大量对象的应用场景，例如图片缓存、数据缓存等。在这些场景中，使用软引用可以避免占用过多的内存，同时又可以快速访问缓存中的对象。</p>
<p>应该使用软引用的情况包括：</p>
<ol>
<li>
<p>需要缓存大量对象：使用软引用可以避免占用过多的内存空间，从而可以缓存更多的对象。</p>
</li>
<li>
<p>需要快速访问缓存中的对象：使用软引用可以快速访问缓存中的对象，避免频繁地加载和计算。</p>
</li>
<li>
<p>可以容忍偶尔的垃圾回收：由于软引用只有在内存不足时才会被回收，因此可能会导致偶尔的垃圾回收。如果应用程序可以容忍这种情况，可以考虑使用软引用。</p>
</li>
</ol>
<p>例如，我们可以使用软引用来实现一个图片缓存，当内存不足时，JVM会自动回收软引用所引用的对象，从而避免内存泄漏和OOM错误。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">Bitmap</span><span class="o">&gt;&gt;</span> <span class="n">imageCache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">Bitmap</span> <span class="nf">loadImage</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">Bitmap</span><span class="o">&gt;</span> <span class="n">reference</span> <span class="o">=</span> <span class="n">imageCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">reference</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">bitmap</span> <span class="o">=</span> <span class="n">reference</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">bitmap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">bitmap</span> <span class="o">=</span> <span class="n">downloadImage</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">bitmap</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">imageCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="k">new</span> <span class="n">SoftReference</span><span class="o">&lt;&gt;(</span><span class="n">bitmap</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">bitmap</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用软引用来缓存图片，当内存不足时，JVM会自动回收软引用所引用的对象。这样可以避免占用过多的内存，同时又可以快速访问缓存中的图片。</p>
<h4 id="虚引用phantomreference">虚引用（PhantomReference）</h4>
<p>虚引用是Java中四种引用类型中最弱的一种，它主要用于跟踪对象被垃圾回收的状态。虚引用本身并不会对对象的生命周期产生影响，但可以在对象被垃圾回收时收到一个通知，从而进行一些清理或其他操作。</p>
<p>虚引用的使用场景比较少，一般用于以下几个方面：</p>
<ol>
<li><strong>对象的finalize()方法：</strong> 虚引用可以用于实现对象的finalize()方法，当对象被垃圾回收时，虚引用会收到一个通知，从而触发对象的finalize()方法。</li>
<li><strong>NIO DirectByteBuffer对象的释放：</strong> 在使用NIO编程时，可能会创建大量的DirectByteBuffer对象，这些对象可能会占用大量的内存空间。当这些对象不再使用时，需要手动调用System.gc()方法触发一次垃圾回收，才能释放这些对象的内存。使用虚引用可以避免手动调用System.gc()方法，当这些对象被垃圾回收时，虚引用会收到一个通知，从而释放这些对象的内存。</li>
<li><strong>对象池的管理：</strong> 在一些需要频繁创建和销毁对象的应用场景中，可以使用对象池来提高性能。当对象不再使用时，可以将对象放入虚引用中，当对象被垃圾回收时，虚引用会收到一个通知，从而将对象从对象池中移除。</li>
</ol>
<p>需要注意的是，虚引用不适用于缓存或其他需要快速访问对象的应用场景，因为虚引用本身并不保证对象的可用性和可访问性。</p>
<blockquote>
<p>因此，软引用和弱引用的主要区别在于它们的强度和垃圾回收的时机。软引用比弱引用更强，只有在内存不足时才会被回收，而弱引用则更弱，只有在下一次垃圾回收时才会被回收。同时，使用软引用可能会导致更少的垃圾回收，但可能会占用更多的内存空间，而使用弱引用可能会导致更频繁的垃圾回收，但可以更快地释放内存空间。</p>
</blockquote>
<h3 id="弱引用是否会影响程序的性能">弱引用是否会影响程序的性能？</h3>
<p><code>弱引用可能会影响程序的性能，因为它们可能会导致频繁的垃圾回收。</code>由于弱引用<code>只有在下一次垃圾回收时才会被回收</code>，因此当使用大量的弱引用时，可能会导致更频繁的垃圾回收，从而降低程序的性能。</p>
<p>当一个对象只被弱引用所引用时，在下一次垃圾回收时它会被回收。如果应用程序中存在大量的弱引用对象，每次垃圾回收都需要扫描这些对象，从而增加了垃圾回收的时间和开销。</p>
<p>因此，在使用弱引用时需要注意以下几点：</p>
<ol>
<li>不要过度使用弱引用：如果应用程序中存在大量的弱引用对象，可能会导致频繁的垃圾回收，从而影响程序的性能。因此，应该避免过度使用弱引用，尽可能减少弱引用对象的数量。</li>
<li>注意垃圾回收的时机：弱引用只在下一次垃圾回收时才会被回收，因此可能会导致较长的访问延迟。在使用弱引用时需要注意垃圾回收的时机，如果应用程序需要快速访问缓存中的对象，可能需要使用其他类型的引用。</li>
<li>检查弱引用是否被回收：当一个对象只被弱引用所引用时，它在下一次垃圾回收时会被回收。在使用弱引用时需要注意检查弱引用对象是否被回收，避免引用无效的对象。</li>
</ol>
<h3 id="如何检查弱引用对象是否被回收">如何检查弱引用对象是否被回收？</h3>
<p>在Java中，可以通过获取弱引用对象的get()方法返回的对象来检查引用对象是否被回收。当一个弱引用所引用的对象被回收后，get()方法返回的对象将为null。</p>
<p>例如，以下示例代码演示了如何使用弱引用检查对象是否被回收：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">weakRef</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 检查对象是否被回收
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">weakRef</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对象未被回收
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Object is alive&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对象已被回收
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Object has been collected&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们创建了一个对象，并使用弱引用来引用它。然后，我们通过检查弱引用对象的get()方法返回的对象来判断对象是否被回收。</p>
<p>当对象未被回收时，get()方法返回的对象不为null，表示对象仍然存活。当对象被回收时，get()方法返回的对象为null，表示对象已经被回收。</p>
<p>需要注意的是，由于弱引用只在下一次垃圾回收时才会被回收，因此在使用弱引用检查对象是否被回收时，需要注意垃圾回收的时机。如果应用程序需要立即检查对象是否被回收，可以手动触发一次垃圾回收，例如通过<code>System.gc()</code>方法来触发。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记4：用私有构造函数使类不可实例化</title>
      <link>https://blog.chensoul.com/posts/2023/05/05/enforce-noninstantiability-with-a-private-constructor/</link>
      <pubDate>Fri, 05 May 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/05/enforce-noninstantiability-with-a-private-constructor/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：用私有构造函数使类不可实例化。 介绍 使用私有构造函数强制实现不可实例化的主要原因是防止类被意</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记：用私有构造函数使类不可实例化。</p>
<h2 id="介绍">介绍</h2>
<p>使用私有构造函数强制实现不可实例化的主要原因是防止类被意外地实例化，以使代码更加健壮和可靠。在某些情况下，我们只需要使用类中的静态方法和静态字段，而不需要创建该类的实例。如果类中没有显式地定义私有构造函数，Java编译器将会自动为该类生成一个默认的公共构造函数，这意味着该类可以在其他类中被实例化。如果这不是我们想要的，为了防止其他人意外地实例化我们的类，我们可以将构造函数设置为私有。</p>
<p>此外，使用私有构造函数强制实现不可实例化还有以下优点：</p>
<ol>
<li>明确表明该类不可被实例化，提高了代码的可读性和可维护性。</li>
<li>防止类被子类化，从而避免了继承所带来的副作用和不必要的复杂性。</li>
<li>提高了代码的安全性，防止其他类在不合适的情况下实例化该类。</li>
</ol>
<p>这是一个实现了私有构造函数强制实现不可实例化的类的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UtilityClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 禁止默认构造函数防止实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="nf">UtilityClass</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">AssertionError</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 其他静态方法和字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>这个类中的私有构造函数会在被调用时抛出<code>AssertionError</code>。这样做可以确保构造函数永远不会从类内部或外部调用。</p>
<p>通过将构造函数设置为私有，这个类就不能从外部被实例化。这个习惯用法也防止了类被子类化。如果一个类的构造函数是私有的，那么它不能被子类调用，因为子类必须调用父类的构造函数来完成初始化。因此，如果一个类的构造函数是私有的，它就不能被子类化，因为子类不能调用父类的构造函数来完成初始化。</p>
<p>以下是一个示例，展示了如何使用私有构造函数防止类被子类化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">FinalClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">FinalClass</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，<code>FinalClass</code>被声明为<code>final</code>，因此不能被子类化。此外，它的构造函数是私有的，因此不能从子类中被调用。由于该类不能被子类化，因此它的行为不会受到子类的影响，从而避免了继承所带来的副作用和不必要的复杂性。</p>
<p>在某些情况下，将类设置为不能被实例化，但可以被子类化是有用的。这通常是因为我们希望子类化的类能够继承父类的行为和属性，同时又不希望外部能够实例化该类。以下是一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="nf">Animal</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">makeSound</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">extends</span> <span class="n">Animal</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Dog</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeSound</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Woof!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>Animal</code>类被设置为抽象类，它的构造函数被设置为<code>protected</code>，这意味着该类不能被实例化，但可以被子类化。<code>Dog</code>类继承了<code>Animal</code>类，并实现了<code>makeSound()</code>方法。由于<code>Animal</code>类的构造函数被设置为<code>protected</code>，所以<code>Dog</code>类可以调用父类的构造函数来进行初始化。</p>
<p>在这个例子中，我们希望<code>Animal</code>类能够提供一些通用的行为和属性，同时又不希望外部能够实例化该类，因为<code>Animal</code>类本身并不是一种具体的动物。而<code>Dog</code>类作为<code>Animal</code>类的子类，可以继承<code>Animal</code>类的行为和属性，并实现自己的特定行为，以实现具体的功能。</p>
<h2 id="用途">用途</h2>
<p>私有构造函数还有其他一些用途，以下是一些常见的用途：</p>
<ol>
<li>
<p>防止实例化：私有构造函数可以防止类被实例化，这对于只包含静态方法和静态字段的实用工具类非常有用。这些类可以通过将构造函数设置为私有来防止它们被实例化，从而避免不必要的对象创建和资源浪费。</p>
</li>
<li>
<p>强制实现单例：单例模式是一种常见的设计模式，它要求一个类有且仅有一个实例，并提供一个全局访问点。私有构造函数可以强制实现单例模式，因为它可以防止类被实例化，除非类的内部定义了一个静态实例并提供了一个公共的静态访问方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，<code>Singleton</code>类的构造函数是私有的，因此它不能被其他类实例化。<code>getInstance()</code>方法提供了一个全局访问点，并在需要时创建了一个静态实例。由于构造函数是私有的，因此只有<code>Singleton</code>类的内部才能创建实例，从而实现了单例模式。</p>
</li>
<li>
<p>防止子类化：私有构造函数可以防止类被子类化，从而避免了继承所带来的副作用和不必要的复杂性。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">FinalClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">FinalClass</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，<code>FinalClass</code>类被声明为<code>final</code>，它的构造函数是私有的，因此它不能被子类化。该类提供了一些静态方法，可以在其他类中调用，但是不能被子类化。</p>
</li>
<li>
<p>限制继承：如果一个类的构造函数是私有的，那么它不能被继承，这可以用来限制类的继承。</p>
</li>
<li>
<p>实现工厂方法：工厂方法是一种常见的设计模式，它提供了一个创建对象的接口，但是将具体的对象创建过程留给了子类或具体的实现类。私有构造函数可以与工厂方法一起使用，以确保只有工厂方法能够创建对象，从而使对象创建过程更加可控和安全。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Shape</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Shape</span> <span class="nf">createRectangle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Rectangle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Shape</span> <span class="nf">createCircle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Circle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Rectangle</span> <span class="kd">extends</span> <span class="n">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Rectangle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Circle</span> <span class="kd">extends</span> <span class="n">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Circle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，<code>Shape</code>类的构造函数是私有的，因此它不能被实例化。<code>Shape</code>类提供了两个静态工厂方法，<code>createRectangle()</code>和<code>createCircle()</code>，用于创建不同的形状。<code>Rectangle</code>和<code>Circle</code>类继承自<code>Shape</code>类，并实现了自己的构造函数。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记6：避免创建不必要的对象</title>
      <link>https://blog.chensoul.com/posts/2023/04/24/avoid-creating-unnecessary-objects/</link>
      <pubDate>Mon, 24 Apr 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/24/avoid-creating-unnecessary-objects/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：避免创建不必要的对象。 介绍 创建对象时，经常会复用对象。如果对象是不可变的，那么它总是可以被</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记：避免创建不必要的对象。</p>
<h2 id="介绍">介绍</h2>
<p>创建对象时，经常会复用对象。如果对象是不可变的，那么它总是可以被复用的。</p>
<p>下面一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;bikini&#34;</span><span class="o">);</span> <span class="c1">// DON&#39;T DO THIS!
</span></span></span></code></pre></div><p>该语句每次执行时都会创建一个新的 String 实例，而这些对象创建都不是必需的。String 构造函数的参数 <code>(&quot;bikini&quot;)</code> 本身就是一个 String 实例，在功能上与构造函数创建的所有对象相同。如果这种用法发生在循环或频繁调用的方法中，创建大量 String 实例是不必要的。</p>
<p>改进后的版本如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;bikini&#34;</span><span class="o">;</span>
</span></span></code></pre></div><p>这个版本使用单个 String 实例，而不是每次执行时都创建一个新的实例。此外，可以保证在同一虚拟机中运行的其他代码都可以复用该对象，只要恰好包含相同的字符串字面量。</p>
<p>通常可以通过使用静态工厂方法来避免创建不必要的对象，而不是在提供这两种方法的不可变类上使用构造函数。例如，工厂方法 <code>Boolean.valueOf(String)</code> 比构造函数 <del>Boolean(String)</del> 更可取，后者在 Java 9 中被弃用了。构造函数每次调用时都必须创建一个新对象，而工厂方法从来不需要这样做，在实际应用中也不会这样做。除了复用不可变对象之外，如果知道可变对象不会被修改，也可以复用它们。</p>
<p>有些对象的创建的代价相比而言要昂贵得多。如果你需要重复地使用这样一个「昂贵的对象」，那么最好将其缓存以供复用。</p>
<p>下面是使用正则表达式最简单的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Performance can be greatly improved!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isRomanNumeral</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">&#34;^(?=.)M*(C[MD]|D?C{0,3})&#34;</span> <span class="o">+</span> <span class="s">&#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个实现的问题是它依赖于 <code>String.matches</code> 方法。<strong>虽然 String.matches 是检查字符串是否与正则表达式匹配的最简单方法，但它不适合在性能关键的情况下重复使用。</strong> 问题在于，它在内部为正则表达式创建了一个 Pattern 实例，并且只使用一次，之后就进行垃圾收集了。创建一个 Pattern 实例是很昂贵的，因为它需要将正则表达式编译成有限的状态机。</p>
<p>为了提高性能，将正则表达式显式编译为 Pattern 实例（它是不可变的），作为类初始化的一部分，缓存它，并在每次调用 isRomanNumeral 方法时复用同一个实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Reusing expensive object for improved performance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RomanNumerals</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Pattern</span> <span class="n">ROMAN</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&#34;^(?=.)M*(C[MD]|D?C{0,3})&#34;</span> <span class="o">+</span> <span class="s">&#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isRomanNumeral</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ROMAN</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">matches</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果频繁调用 isRomanNumeral，改进版本将提供显著的性能提升。不仅性能得到了改善，清晰度也得到了提高。为不可见的 Pattern 实例创建一个静态终态字段允许我们为它命名，这比正则表达式本身更容易阅读。</p>
<p>如果加载包含改进版 isRomanNumeral 方法的类时，该方法从未被调用过，那么初始化字段 ROMAN 是不必要的。因此，可以用延迟初始化字段的方式在第一次调用 isRomanNumeral 方法时才初始化字段，而不是在类加载时初始化，<strong>但不建议这样做</strong>。通常情况下，<strong>延迟初始化会使实现复杂化，而没有明显的性能改善</strong>。</p>
<p>当一个对象是不可变的，很明显，它可以安全地复用，但在其他情况下，它远不那么明显，甚至违反直觉。考虑适配器的情况，也称为视图。适配器是委托给支持对象的对象，提供了一个替代接口。因为适配器的状态不超过其支持对象的状态，所以不需要为给定对象创建一个给定适配器的多个实例。</p>
<p>例如，Map 接口的 keySet 方法返回 Map 对象的 Set 视图，其中包含 Map 中的所有键。事实上，返回的 Set 实例通常是可变的，但所有返回的对象在功能上都是相同的，因为它们都由相同的 Map 实例支持。因此，对给定 Map 对象上的 keySet 的每次调用都可能返回相同的 Set 实例。</p>
<p>由于返回的 Set 实例在功能上是相同的，因此创建 keySet 视图对象的多个实例是不必要的，也没有好处。因此，在使用 keySet 视图的时候，我们应该尽可能地重用同一个 Set 实例，而不是每次调用 keySet 方法都创建一个新的 Set 实例。</p>
<p>以下是一个示例，展示了如何重用 keySet 视图的 Set 实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestKeySetReuse</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&#34;one&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&#34;two&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&#34;three&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">keySet1</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">keySet2</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">keySet1</span> <span class="o">==</span> <span class="n">keySet2</span><span class="o">);</span> <span class="c1">// true，说明是同一个实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">keySet1</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span> <span class="c1">// {2=two, 3=three}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">keySet2</span><span class="o">);</span> <span class="c1">// [2, 3]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们首先创建了一个 HashMap 对象，并向其中添加了一些键值对。然后，我们两次调用 keySet 方法，分别将返回的 Set 实例保存到 keySet1 和 keySet2 变量中。</p>
<p>由于 keySet1 和 keySet2 是由相同的 Map 实例支持的，因此它们是相等的，即 <code>keySet1 == keySet2</code> 返回 true。我们可以看到，实际上它们是同一个 Set 实例。</p>
<p>然后，我们从 keySet1 中删除一个键，并打印出 Map 和 keySet2 的内容。我们可以看到，当我们修改了 keySet1 中的内容时，keySet2 也被修改了，因为它们是同一个 Set 实例。</p>
<p>因此，在使用 Map 的 keySet 方法时，应该尽可能地重用同一个 Set 实例，以避免不必要的对象创建和不必要的行为。</p>
<p>另一种创建不必要对象的方法是自动装箱，它允许程序员混合基本类型和包装类型，根据需要自动装箱和拆箱。<strong>自动装箱模糊了基本类型和包装类型之间的区别，</strong> 两者有细微的语义差别和不明显的性能差别。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Hideously slow! Can you spot the object creation?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">sum</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="n">L</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个程序得到了正确的答案，但是由于一个字符的印刷错误，它的速度比实际要慢得多。变量 sum 被声明为 Long 而不是 long，这意味着程序将构造大约 231 个不必要的 Long 实例（大约每次将 Long i 添加到 Long sum 时都有一个实例）。将 sum 的声明从 Long 更改为 long，机器上的运行时间将从 6.3 秒减少到 0.59 秒。教训很清楚：<strong>基本类型优于包装类，还应提防意外的自动装箱。</strong></p>
<p>本条目不应该被曲解为是在暗示创建对象是成本昂贵的，应该避免。相反，创建和回收这些小对象的构造函数成本是很低廉的，尤其是在现代 JVM 实现上。<strong>创建额外的对象来增强程序的清晰性、简单性或功能通常是件好事。</strong></p>
<p>相反，通过维护自己的对象池来避免创建对象不是一个好主意，除非池中的对象非常重量级。证明对象池是合理的对象的典型例子是数据库连接。建立连接的成本非常高，因此复用这些对象是有意义的。然而，一般来说，维护自己的对象池会使代码混乱，增加内存占用，并损害性能。现代 JVM 实现具有高度优化的垃圾收集器，在轻量级对象上很容易胜过这样的对象池。</p>
<h2 id="总结">总结</h2>
<ol>
<li>
<p>避免创建不必要的对象可以提高性能和减少内存占用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会创建不必要的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用基本类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>如果一个对象是不可变的，可以将其缓存起来并重复使用，而不是每次需要时都创建一个新对象。</p>
<p>以下是一些常见的不可变对象和它们的缓存实现：</p>
<ul>
<li><strong>字符串常量池</strong></li>
</ul>
<p>Java 语言中的字符串是不可变的，因此字符串常量可以被缓存起来并重复使用。Java 虚拟机维护了一个字符串常量池，它缓存了所有的字符串常量，并确保相同的字符串只被创建一次。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">&#34;Hello&#34;</span><span class="o">;</span> <span class="c1">// 从字符串常量池中获取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">&#34;Hello&#34;</span><span class="o">;</span> <span class="c1">// 从字符串常量池中获取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;Hello&#34;</span><span class="o">);</span> <span class="c1">// 创建新的字符串对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span> <span class="o">==</span> <span class="n">s2</span><span class="o">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span> <span class="o">==</span> <span class="n">s3</span><span class="o">);</span> <span class="c1">// false
</span></span></span></code></pre></div><ul>
<li><strong>数字常量池</strong></li>
</ul>
<p>Java 语言中的整数、浮点数和字符等基本数据类型的值也可以被缓存起来并重复使用。Java 虚拟机维护了一个数字常量池，它缓存了一定范围内的整数、浮点数和字符等基本数据类型的值，并确保相同的值只被创建一次。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Integer</span> <span class="n">i1</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="c1">// 从数字常量池中获取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Integer</span> <span class="n">i2</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="c1">// 从数字常量池中获取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Integer</span> <span class="n">i3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span> <span class="c1">// 创建新的 Integer 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i1</span> <span class="o">==</span> <span class="n">i2</span><span class="o">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i1</span> <span class="o">==</span> <span class="n">i3</span><span class="o">);</span> <span class="c1">// false
</span></span></span></code></pre></div><p>注意：数字常量池的范围可以通过 JVM 参数 <code>-XX:AutoBoxCacheMax=&lt;size&gt;</code> 来调整，其中 <code>&lt;size&gt;</code> 是常量池的大小。</p>
<ul>
<li><strong>枚举常量</strong></li>
</ul>
<p>Java 语言中的枚举常量是不可变的，它们在枚举类型被加载时就被创建并缓存起来，而不是每次需要时都创建一个新对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">enum</span> <span class="n">Color</span> <span class="o">{</span> <span class="n">RED</span><span class="o">,</span> <span class="n">GREEN</span><span class="o">,</span> <span class="n">BLUE</span> <span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="n">Color</span> <span class="n">c1</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">;</span> <span class="c1">// 获取枚举常量 RED
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Color</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">;</span> <span class="c1">// 获取枚举常量 GREEN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Color</span> <span class="n">c3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Color</span><span class="o">(</span><span class="s">&#34;YELLOW&#34;</span><span class="o">);</span> <span class="c1">// 创建新的枚举常量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c1</span> <span class="o">==</span> <span class="n">c2</span><span class="o">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c1</span> <span class="o">==</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span> <span class="c1">// true
</span></span></span></code></pre></div><ul>
<li><strong>LocalDate、LocalTime、LocalDateTime</strong></li>
</ul>
<p>Java 8 引入的日期时间 API 中的 LocalDate、LocalTime、LocalDateTime 类型都是不可变的。这些类型的对象可以被缓存起来并重复使用，以提高程序的性能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">LocalDate</span> <span class="n">today</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span> <span class="c1">// 获取当前日期
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LocalDate</span> <span class="n">tomorrow</span> <span class="o">=</span> <span class="n">today</span><span class="o">.</span><span class="na">plusDays</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 计算明天的日期
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LocalDate</span> <span class="n">yesterday</span> <span class="o">=</span> <span class="n">today</span><span class="o">.</span><span class="na">minusDays</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 计算昨天的日期
</span></span></span></code></pre></div><p>可以使用线程安全的 ConcurrentHashMap 来实现 LocalDate 的缓存：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ConcurrentHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">LocalDate</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="n">LocalDate</span> <span class="n">date</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="s">&#34;2023-04-24&#34;</span><span class="o">,</span> <span class="n">LocalDate</span><span class="o">::</span><span class="n">parse</span><span class="o">);</span>
</span></span></code></pre></div><ul>
<li><strong>BigDecimal</strong></li>
</ul>
<p>Java 中的 BigDecimal 类型也是不可变的，它们的值在创建后不会改变。因此，可以将 BigDecimal 对象缓存起来并重复使用，以避免不必要的对象创建。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">BigDecimal</span> <span class="n">zero</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ZERO</span><span class="o">;</span> <span class="c1">// 缓存 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">BigDecimal</span> <span class="n">one</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span> <span class="c1">// 缓存 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">BigDecimal</span> <span class="n">ten</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">TEN</span><span class="o">;</span> <span class="c1">// 缓存 10
</span></span></span></code></pre></div><p>可以使用静态 final 常量来实现 BigDecimal 的缓存：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Constants</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BigDecimal</span> <span class="n">ZERO</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ZERO</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BigDecimal</span> <span class="n">ONE</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BigDecimal</span> <span class="n">TEN</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">TEN</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><strong>Immutable Collections</strong></li>
</ul>
<p>Guava 和 Java 9+ 中都提供了不可变集合类，如 ImmutableList、ImmutableSet、ImmutableMap 等。这些不可变集合类的对象是不可变的，因此可以被缓存起来并重复使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span> <span class="c1">// 创建不可变列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span> <span class="c1">// 创建不可变集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span> <span class="c1">// 创建不可变映射
</span></span></span></code></pre></div><p>可以使用静态 final 常量来实现不可变集合的缓存：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Constants</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">LIST</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">SET</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">MAP</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>避免使用装箱类型，如 Integer、Boolean 等，因为它们在自动装箱和拆箱时会创建不必要的对象。可以使用基本类型和对象包装类型之间的相互转换方法来避免这种情况。</p>
</li>
<li>
<p>对于大量的短字符串，可以考虑使用字符串池或者使用 String.intern() 方法，以避免创建大量的 String 对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会创建大量的 String 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">str</span> <span class="o">+=</span> <span class="s">&#34;a&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用 StringBuilder 和字符串池
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">intern</span><span class="o">();</span>
</span></span></code></pre></div><blockquote>
<p><strong>String.intern() 方法</strong></p>
<p>String.intern() 方法是一个 native 方法，它的作用是返回字符串对象的规范化表示形式，即返回字符串常量池中与该字符串相等的对象的引用（如果常量池中已经存在该字符串，则直接返回常量池中的对象；否则，将该字符串添加到常量池中，并返回该字符串的引用）。</p>
<p>例如，假设我们有如下代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">s2</span><span class="o">.</span><span class="na">intern</span><span class="o">();</span>
</span></span></code></pre></div><p>在这个代码中，我们首先创建了一个字符串对象 s1，它是字符串常量池中的一个对象。然后，我们通过 new 关键字创建了一个新的字符串对象 s2，它与 s1 的内容相同，但是它在堆内存中创建。接下来，我们调用 s2 的 intern() 方法，将 s2 放入字符串常量池中，并返回常量池中的对象引用。因此，s3 指向的是字符串常量池中的对象。</p>
<p>需要注意的是，由于字符串常量池中的字符串对象是唯一的，因此使用 intern() 方法可以节省内存空间。但是，由于字符串常量池的空间是有限的，如果程序中大量使用 intern() 方法，可能会导致常量池溢出的问题。因此，如果不是必须使用 intern() 方法，最好不要使用它。</p>
<p>另外，<strong>由于 intern() 方法是一个 native 方法，它的性能可能会比较低。在实际开发中，应该根据具体情况进行选择，避免滥用 intern() 方法</strong>。</p>
</blockquote>
</li>
<li>
<p>尽量使用静态工厂方法而不是构造方法创建对象，因为静态工厂方法可以重复使用已经创建的对象，从而避免创建不必要的对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，每次都创建一个新的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Date</span> <span class="n">now</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用静态工厂方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Date</span> <span class="n">now</span> <span class="o">=</span> <span class="n">Date</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
</span></span></code></pre></div></li>
<li>
<p>避免创建不必要的数组，可以使用 List、Set、Map 等集合类型来代替数组。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会创建不必要的数组对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用 List
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>如果必须创建不可变的数组，可以使用静态工厂方法 Arrays.asList() 来创建 List，从而避免创建额外的数组对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会创建不必要的数组对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">arr</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用 Arrays.asList()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>避免创建过多的临时对象，如在循环中创建的对象。可以重复使用已经创建的对象，或者使用可重用的对象池来减少对象的创建和垃圾回收。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会创建不必要的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用可重用的对象池
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sb</span><span class="o">.</span><span class="na">setLength</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>避免在类的构造方法中创建大量的对象。如果在构造方法中创建大量的对象，会导致内存占用过大，从而影响程序的性能。可以将对象的创建放在需要使用的方法中，或者使用懒加载的方式来延迟对象的创建。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会在构造方法中创建大量的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MyClass</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，将对象的创建放在需要使用的方法中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MyClass</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getList</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">list</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>避免在递归方法中创建不必要的对象。如果在递归方法中创建不必要的对象，会导致内存占用过大，从而导致栈溢出等问题。可以使用可重用的对象池来减少对象的创建和垃圾回收。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会在递归方法中创建不必要的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用可重用的对象池
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">cache</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">cache</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">,</span> <span class="n">cache</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="适配器模式">适配器模式</h2>
<p>适配器模式是一种常见的设计模式，它可以帮助我们将一个对象的接口适配成另一个对象的接口。适配器模式通常用于以下情况：</p>
<ol>
<li>当我们需要使用一个已有的类，但是它的接口与我们期望的不兼容时，我们可以使用适配器模式来将其接口适配成我们需要的接口。</li>
<li>当我们需要使用多个不兼容的类时，我们可以使用适配器模式来将它们的接口适配成一个统一的接口。</li>
</ol>
<p>在适配器模式中，适配器对象通常是不可变的，因为它们的状态不超过支持对象的状态。因此，可以安全地复用适配器对象。</p>
<p>例如，考虑一个支持英国插头的设备，但我们需要将其插入到一个美国插座上。我们可以使用一个适配器来适配英国插头到美国插座。适配器的状态不超过英国插头的状态，因此可以安全地复用适配器对象，而不必为每个设备创建一个新的适配器对象。</p>
<p>以下是一个简单的适配器示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 支持英国插头的设备
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BritishDevice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">plugIn</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Plugged in British device&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 美国插座接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">USPlug</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">plug</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 英国到美国的适配器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BritishToUSAdapter</span> <span class="kd">implements</span> <span class="n">USPlug</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BritishDevice</span> <span class="n">device</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">BritishToUSAdapter</span><span class="o">(</span><span class="n">BritishDevice</span> <span class="n">device</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">device</span> <span class="o">=</span> <span class="n">device</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">plug</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">device</span><span class="o">.</span><span class="na">plugIn</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 美国插座
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">USOutlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">plugIn</span><span class="o">(</span><span class="n">USPlug</span> <span class="n">plug</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">plug</span><span class="o">.</span><span class="na">plug</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 测试适配器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">BritishDevice</span> <span class="n">device</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BritishDevice</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">BritishToUSAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BritishToUSAdapter</span><span class="o">(</span><span class="n">device</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">USOutlet</span> <span class="n">outlet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">USOutlet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">outlet</span><span class="o">.</span><span class="na">plugIn</span><span class="o">(</span><span class="n">adapter</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们定义了一个 BritishDevice 类来模拟一个支持英国插头的设备。我们还定义了一个 USPlug 接口来表示一个美国插头，以及一个 USOutlet 类来表示一个美国插座。</p>
<p>我们使用一个适配器类 BritishToUSAdapter 来适配 BritishDevice 到 USPlug 接口。适配器类的构造函数接收一个 BritishDevice 对象，并将其保存在一个成员变量中。适配器实现了 USPlug 接口，并将 plug 方法委托给 BritishDevice 对象的 plugIn 方法。</p>
<p>在测试适配器时，我们创建了一个 BritishDevice 对象和一个适配器对象，并将适配器对象传递给 USOutlet 的 plugIn 方法。USOutlet 对象使用适配器对象来将 BritishDevice 对象适配到 USPlug 接口，从而将其插入到美国插座中。</p>
<p>在这个示例中，<strong>适配器对象是不可变的，因为它的状态不超过支持对象的状态。因此，我们可以安全地复用适配器对象，而不必为每个设备创建一个新的适配器对象。</strong></p>
<h2 id="扩展">扩展</h2>
<h3 id="java-8-的-stream-api--避免创建不必要对象">Java 8 的 Stream API  避免创建不必要对象</h3>
<p>下面这段代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">categoryStatistics</span><span class="o">.</span><span class="na">getData</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToLong</span><span class="o">(</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">t</span><span class="o">.</span><span class="na">getValue</span><span class="o">()).</span><span class="na">sum</span><span class="o">();</span>
</span></span></code></pre></div><p>在使用 <code>list.stream().mapToLong(t -&gt; t.getValue()).sum()</code> 对集合中的元素进行求和时，确实可以通过这种方式来避免创建不必要的对象。</p>
<p>具体来说，<code>mapToLong()</code> 方法会将集合中的元素映射为一个 LongStream 对象，而 LongStream 对象是一个<code>原始类型流</code>，它在内存中的占用空间比较小。因此，使用 <code>mapToLong() </code>方法可以避免创建不必要的对象，从而提高程序的性能。</p>
<p>另外，sum() 方法是一个终端操作，它会对流中的所有元素进行求和，并返回最终的结果。由于 sum() 方法是一个终端操作，它会直接对流中的元素进行求和，而不会创建新的对象。因此，使用 sum() 方法可以进一步避免创建不必要的对象，从而提高程序的性能。</p>
<blockquote>
<p>在大多数情况下，<code>list.stream().mapToLong(t -&gt; t.getValue()).sum()</code> 的性能会比 <code>list.stream().mapToLong(t -&gt; t.getValue()).reduce(0L, (a, b) -&gt; a + b)</code> 更好。</p>
<p>原因是，<code>sum()</code> 方法是一个终端操作，它会对流中的所有元素进行求和，并返回最终的结果。<strong><code>sum()</code> 方法底层使用了一些优化技术，例如使用循环展开、使用 SIMD 指令等，从而充分利用 CPU 的性能优势，提高计算速度</strong>。</p>
<p>相比之下，<code>reduce()</code> 方法是一个归约操作，它将对流中的元素进行累计计算，并返回最终的结果。由于 <code>reduce() </code>方法需要对元素进行二元操作，因此它比 <code>sum()</code> 方法更加复杂，可能会带来一些额外的开销。此外，<code>reduce()</code> 方法还需要指定一个初始值，如果初始值不当，可能会导致结果错误或者性能下降。</p>
<p>不过，对于某些特殊情况，<code>reduce()</code> 方法可能会比 <code>sum()</code> 方法更加适用。例如，如果我们需要对流中的元素进行自定义的累计计算，就需要使用 <code>reduce() </code>方法。此外，<code>reduce()</code>方法还支持并行计算，可以充分利用多核处理器的性能优势，提高计算速度。</p>
<p>综上所述，我们应该根据具体情况选择使用 <code>sum()</code> 方法还是 <code>reduce()</code> 方法。<strong>对于大多数情况下的求和操作，<code>sum()</code> 方法是一个更好的选择，因为它比<code> reduce()</code> 方法更加高效。但是，在某些特殊情况下，<code>reduce()</code> 方法可能会更加适用</strong>。</p>
</blockquote>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记5：依赖注入优于硬编码资源</title>
      <link>https://blog.chensoul.com/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/</link>
      <pubDate>Mon, 17 Apr 2023 17:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。 介绍 依赖注入是软件工程中使用的一种设计模式，用</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。</p>
<h2 id="介绍">介绍</h2>
<p>依赖注入是软件工程中使用的一种设计模式，用于将组件和依赖项相互解耦。而不是在组件内部创建和管理依赖项，我们从外部传递它们。这种方法可以帮助创建更模块化和灵活的代码。</p>
<p>相比之下，硬编码资源涉及在组件内部直接创建和管理依赖项。这种方法可能会使代码不太灵活，难以维护。</p>
<h2 id="举例">举例</h2>
<p>许多类依赖于一个或多个底层资源。例如，拼写检查程序依赖于字典。常见做法是，将这种类实现为静态实用工具类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Inappropriate use of static utility - inflexible &amp; untestable!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpellChecker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Lexicon</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="o">...;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SpellChecker</span><span class="o">()</span> <span class="o">{}</span> <span class="c1">// Noninstantiable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">suggestions</span><span class="o">(</span><span class="n">String</span> <span class="n">typo</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>类似地，我们也经常看到它们的单例实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Inappropriate use of singleton - inflexible &amp; untestable!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpellChecker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpellChecker</span><span class="o">(...);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Lexicon</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="o">...;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SpellChecker</span><span class="o">(...)</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">suggestions</span><span class="o">(</span><span class="n">String</span> <span class="n">typo</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这两种方法都不令人满意，因为它们假设只使用一个字典。在实际应用中，每种语言都有自己的字典，特殊的字典用于特殊的词汇表。另外，最好使用一个特殊的字典进行测试。</p>
<p>你可以尝试让 SpellChecker 支持多个字典：首先取消 dictionary 字段的 final 修饰，并在现有的拼写检查器中添加更改 dictionary 的方法。但是在并发环境中这种做法是笨拙的、容易出错的和不可行的。<strong>静态实用工具类和单例不适用于由底层资源参数化的类。</strong></p>
<p>所需要的是支持类的多个实例的能力（在我们的示例中是 SpellChecker），每个实例都使用客户端需要的资源（在我们的示例中是 dictionary）。满足此要求的一个简单模式是在<strong>创建新实例时将资源传递给构造函数。</strong> 这是依赖注入的一种形式：字典是拼写检查器的依赖项，在创建它时被注入到拼写检查器中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Dependency injection provides flexibility and testability
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpellChecker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Lexicon</span> <span class="n">dictionary</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SpellChecker</span><span class="o">(</span><span class="n">Lexicon</span> <span class="n">dictionary</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">dictionary</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">dictionary</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">suggestions</span><span class="o">(</span><span class="n">String</span> <span class="n">typo</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>依赖注入模式非常简单，许多程序员在不知道其名称的情况下使用了多年。虽然拼写检查器示例只有一个资源（字典），但是依赖注入可以处理任意数量的资源和任意依赖路径。它保持了不可变性，因此多个客户端可以共享依赖对象（假设客户端需要相同的底层资源）。<strong>依赖注入同样适用于构造函数、静态工厂和构建器</strong>。</p>
<p>以下是这些情况的示例：</p>
<h3 id="构造函数">构造函数</h3>
<p>在构造函数中使用依赖注入是最常见的方式。例如，假设我们有一个名为<code>UserService</code>的类，它需要一个能够验证用户的<code>UserValidator</code>接口作为依赖项。我们可以像这样在构造函数中注入<code>UserValidator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="静态工厂">静态工厂</h3>
<p>静态工厂是一种创建对象的方式，它将创建对象的逻辑封装在一个静态方法中。例如，假设我们有一个名为<code>UserServiceFactory</code>的类，它负责创建<code>UserService</code>实例。我们可以像这样在静态工厂方法中注入<code>UserValidator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="nf">createUserService</span><span class="o">(</span><span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">userValidator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="构建器">构建器</h3>
<p>构建器是一种创建对象的方式，它将创建对象的逻辑封装在一个构建器类中。例如，假设我们有一个名为<code>UserServiceBuilder</code>的类，它负责创建<code>UserService</code>实例。我们可以像这样在构建器类中注入<code>UserValidator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserServiceBuilder</span> <span class="nf">withUserValidator</span><span class="o">(</span><span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserService</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">userValidator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这样，我们可以使用构建器来创建<code>UserService</code>实例，并在构建器中注入<code>UserValidator</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">UserValidator</span> <span class="n">userValidator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomUserValidator</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceBuilder</span><span class="o">().</span><span class="na">withUserValidator</span><span class="o">(</span><span class="n">userValidator</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><p>这种模式的一个有用变体是将资源工厂传递给构造函数。资源工厂是一种创建和提供对象的方式，它可以在需要时动态地创建和返回资源。在将资源工厂传递给构造函数时，我们可以将对象的创建和配置逻辑从类中移除，从而实现更好的可测试性和可维护性。</p>
<p>以下是一个使用资源工厂传递给构造函数的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="n">ResourceFactory</span> <span class="n">resourceFactory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">resourceFactory</span><span class="o">.</span><span class="na">createUserValidator</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">resourceFactory</span><span class="o">.</span><span class="na">createDataSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">authenticate</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// perform authentication using userValidator and dataSource
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>UserService</code>类需要一个能够验证用户的<code>UserValidator</code>实例和一个<code>DataSource</code>实例。这两个依赖项都是通过资源工厂来创建的。通过将资源工厂传递给构造函数，我们可以将对象的创建和配置逻辑从类中移除，并使其更加灵活和可维护。</p>
<p>例如，假设我们有一个名为<code>MySqlResourceFactory</code>的类，它实现了<code>ResourceFactory</code>接口，并用于创建<code>UserValidator</code>和<code>DataSource</code>实例。我们可以像这样使用它来创建<code>UserService</code>实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResourceFactory</span> <span class="n">resourceFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySqlResourceFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">resourceFactory</span><span class="o">);</span>
</span></span></code></pre></div><p>使用这种方法，我们将<code>UserService</code>类与具体的资源实现解耦，并使其更加灵活和可维护。同时，我们可以轻松地模拟和测试<code>UserService</code>类，因为我们可以在测试中传递不同的资源工厂实现，而不需要依赖于外部资源。</p>
<h3 id="函数式接口">函数式接口</h3>
<p>在Java 8中，<code>Supplier&lt;T&gt;</code>是一个函数式接口，用于表示一个无参数函数，该函数返回类型为<code>T</code>。由于其函数式特性，<code>Supplier&lt;T&gt;</code>非常适合表示工厂，因为它可以提供一种通用的方式来创建对象。</p>
<p>以下是一个使用<code>Supplier&lt;T&gt;</code>表示工厂的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">UserValidator</span><span class="o">&gt;</span> <span class="n">userValidatorFactory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">userValidatorFactory</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">authenticate</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// perform authentication using userValidator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>UserService</code>类的构造函数接受一个<code>Supplier&lt;UserValidator&gt;</code>作为参数。这个<code>Supplier</code>可以在需要时动态地创建<code>UserValidator</code>实例。在<code>UserService</code>类中，我们可以通过调用<code>userValidatorFactory.get()</code>来获取<code>UserValidator</code>实例。</p>
<p>例如，假设我们有一个名为<code>CustomUserValidator</code>的类，它实现了<code>UserValidator</code>接口，并用于验证用户。我们可以像这样使用<code>UserService</code>类和<code>Supplier&lt;T&gt;</code>来创建<code>UserService</code>实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">UserValidator</span><span class="o">&gt;</span> <span class="n">userValidatorFactory</span> <span class="o">=</span> <span class="n">CustomUserValidator</span><span class="o">::</span><span class="k">new</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">userValidatorFactory</span><span class="o">);</span>
</span></span></code></pre></div><p>在上面的示例中，<code>userValidatorFactory</code>是一个<code>Supplier&lt;UserValidator&gt;</code>实例，它使用<code>CustomUserValidator::new</code>构造函数引用来创建<code>UserValidator</code>实例。通过将这个<code>Supplier</code>传递给<code>UserService</code>类的构造函数，我们可以创建<code>UserService</code>实例，而无需显式地创建<code>UserValidator</code>实例。</p>
<p>使用<code>Supplier&lt;T&gt;</code>表示工厂可以使我们的代码更加简洁和灵活。它可以使对象的创建更加通用，并允许我们在需要时动态地创建对象。同时，由于<code>Supplier&lt;T&gt;</code>是一个函数式接口，我们可以使用lambda表达式和方法引用来创建工厂，使代码更加简洁和易于理解。</p>
<h2 id="优点">优点</h2>
<p>以下是使用依赖注入比硬编码资源的优点：</p>
<ol>
<li>可测试性：使用依赖注入，很容易创建和注入模拟对象进行测试。这样，我们可以将正在测试的组件隔离开来，并专注于测试其行为，而不必担心其依赖项的行为。</li>
<li>灵活性：使用依赖注入，我们可以轻松地用不同实现替换依赖项。这在需要更改组件的行为而不更改其代码时非常有用。</li>
<li>解耦：依赖注入有助于将组件与其依赖项解耦，使代码更加模块化并易于维护。</li>
<li>关注点分离：依赖注入将依赖项的创建和管理与组件本身分离，允许更清晰地分离关注点。</li>
</ol>
<h2 id="运用">运用</h2>
<p>依赖注入是一种常见的设计模式，被广泛应用于许多开源框架中。以下是一些常见的开源框架和库，它们使用依赖注入来管理对象之间的依赖关系：</p>
<ol>
<li>Spring Framework：Spring是一个非常流行的Java框架，它使用依赖注入来管理应用程序中的对象之间的依赖关系。Spring通过<code>@Autowired</code>注解和XML配置文件来实现依赖注入。</li>
<li>Google Guice：Guice是一个轻量级的依赖注入框架，它使用Java注解来实现依赖注入。Guice提供了一个<code>Binder</code>接口，使用户可以配置注入规则。</li>
<li>Dagger：Dagger是一个基于Java和Android平台的依赖注入框架，它使用Java注解和代码生成技术来实现依赖注入。Dagger提供了一个<code>Component</code>接口，用于表示应用程序对象之间的依赖关系。</li>
<li>CDI：CDI是Java EE 6中引入的一种依赖注入框架，它使用Java注解和XML配置文件来实现依赖注入。CDI提供了一个<code>BeanManager</code>接口，使用户可以配置和管理应用程序对象之间的依赖关系。</li>
<li>Micronaut：Micronaut是一个轻量级的依赖注入框架，它使用Java注解和字节码生成技术来实现依赖注入。Micronaut提供了一个<code>@Inject</code>注解，用于标记需要注入的依赖项。</li>
<li>Weld：Weld是一个Java SE和Java EE的依赖注入框架，它使用Java注解和XML配置文件来实现依赖注入。Weld提供了一个<code>BeanManager</code>接口，用于配置和管理应用程序对象之间的依赖关系。</li>
<li>PicoContainer：PicoContainer是一个轻量级的依赖注入框架，它使用Java注解和代码生成技术来实现依赖注入。PicoContainer提供了一个<code>Container</code>接口，用于表示应用程序对象之间的依赖关系。</li>
<li>HK2：HK2是Java EE 8和Jakarta EE 9的依赖注入框架，它使用Java注解和XML配置文件来实现依赖注入。HK2提供了一个<code>ServiceLocator</code>接口，用于配置和管理应用程序对象之间的依赖关系。</li>
<li>Micrometer：Micrometer是一个用于度量应用程序性能的库，它使用依赖注入来管理度量记录器之间的依赖关系。Micrometer支持多种依赖注入框架，包括Spring和Guice。</li>
<li>Google Dagger Hilt：Dagger Hilt是一个基于Dagger 2的依赖注入库，它使用注解来管理对象之间的依赖关系。它提供了一些附加功能，例如使用<code>@ViewModelInject</code>注解来注入ViewModel依赖项。</li>
<li>Quarkus：Quarkus是一个用于构建可扩展的Java应用程序的框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括CDI、Spring和Guice。</li>
<li>Micronaut Data：Micronaut Data是一个用于管理数据库访问的库，它使用依赖注入来管理数据访问对象之间的依赖关系。它支持多种ORM框架，包括Hibernate和JDBC。</li>
<li>Akka：Akka是一个用于构建事件驱动应用程序的库，它使用依赖注入来管理Actor之间的依赖关系。它提供了一个<code>@Inject</code>注解，用于标记需要注入的依赖项。</li>
<li>JHipster：JHipster是一个用于生成现代Web应用程序的框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括Spring和Guice。</li>
<li>Vert.x：Vert.x是一个基于事件驱动的应用程序框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括CDI和Guice。</li>
<li>Quarkus Reactive：Quarkus Reactive是一个用于构建反应式应用程序的框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括CDI和Spring。</li>
<li>Micronaut Security：Micronaut Security是一个用于管理Web应用程序安全的库，它使用依赖注入来管理安全服务之间的依赖关系。它支持多种安全框架，包括Spring Security和Apache Shiro。</li>
<li>Eclipse MicroProfile：Eclipse MicroProfile是一个用于构建微服务的框架，它使用依赖注入来管理微服务之间的依赖关系。它支持多种依赖注入框架，包括CDI和Guice。</li>
<li>Kotlin Koin：Koin是一个用于Kotlin应用程序的依赖注入库，它使用DSL语法来管理应用程序对象之间的依赖关系。它支持单例、工厂和懒加载等不同的注入模式。</li>
<li>Spring Cloud：Spring Cloud是一个用于构建分布式系统的框架，它使用依赖注入来管理分布式系统之间的依赖关系。它支持多种依赖注入框架，包括Spring和Guice。</li>
<li>Micronaut HTTP Client：Micronaut HTTP Client是一个用于管理HTTP客户端的库，它使用依赖注入来管理HTTP客户端之间的依赖关系。它支持多种HTTP客户端实现，包括Apache HttpClient和Netty。</li>
<li>Quarkus Security：Quarkus Security是一个用于管理Web应用程序安全的库，它使用依赖注入来管理安全服务之间的依赖关系。它支持多种安全框架，包括Spring Security和Apache Shiro。</li>
</ol>
<p>这些框架和库都使用依赖注入来管理对象之间的依赖关系，使代码更加灵活、可维护和可测试。它们提供了一些不同的注入技术和API，以适应不同的应用场景和需求。</p>
<h3 id="spring依赖注入">Spring依赖注入</h3>
<p>在Spring框架中，依赖注入是核心特性之一。Spring使用依赖注入来管理应用程序对象之间的依赖关系，以实现松耦合、可测试和可扩展的代码。以下是Spring中使用依赖注入的方法：</p>
<ol>
<li>注解：Spring使用注解将依赖项注入到对象中。常用的注解包括<code>@Autowired</code>、<code>@Qualifier</code>和<code>@Value</code>。其中，<code>@Autowired</code>注解用于自动装配依赖项，<code>@Qualifier</code>注解用于指定依赖项的名称或限定符，<code>@Value</code>注解用于从属性文件或环境变量中注入值。</li>
<li>XML配置文件：Spring也支持使用XML配置文件来定义对象之间的依赖关系。在XML配置文件中，可以使用<code>&lt;bean&gt;</code>元素定义对象，并使用<code>&lt;property&gt;</code>元素设置对象的属性和依赖项。</li>
<li>Java配置类：Spring还支持使用Java配置类来定义对象之间的依赖关系。在Java配置类中，可以使用<code>@Configuration</code>注解定义配置类，并使用<code>@Bean</code>注解定义对象，并使用<code>@Autowired</code>注解注入依赖项。</li>
</ol>
<p>以下是一些在Spring中使用依赖注入的例子：</p>
<p><strong>1、自动装配示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kd">final</span> <span class="n">MyRepository</span> <span class="n">myRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="nf">MyService</span><span class="o">(</span><span class="n">MyRepository</span> <span class="n">myRepository</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">this</span><span class="o">.</span><span class="na">myRepository</span> <span class="o">=</span> <span class="n">myRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>MyService</code>类通过构造函数注入了<code>MyRepository</code>依赖。在<code>MyService</code>对象创建时，Spring框架自动装配并注入了<code>MyRepository</code>对象。</p>
<p><strong>2、XML配置示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.example.MyService&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&#34;myRepository&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myRepository&#34;</span> <span class="na">class=</span><span class="s">&#34;com.example.MyRepository&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>在这个例子中，<code>MyService</code>类和<code>MyRepository</code>类被定义为Spring的bean，并在XML配置文件中指定它们之间的依赖关系。在<code>MyService</code>对象创建时，Spring框架自动创建并注入了<code>MyRepository</code>对象。</p>
<p><strong>3、Java配置示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">MyService</span> <span class="nf">myService</span><span class="o">(</span><span class="n">MyRepository</span> <span class="n">myRepository</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="k">new</span> <span class="n">MyService</span><span class="o">(</span><span class="n">myRepository</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">MyRepository</span> <span class="nf">myRepository</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="k">new</span> <span class="n">MyRepository</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>AppConfig</code>类通过<code>@Bean</code>注解定义了<code>MyService</code>对象和<code>MyRepository</code>对象，并通过方法参数的方式注入了<code>MyRepository</code>依赖。在应用程序启动时，Spring框架会自动创建并注入这些对象。</p>
<h4 id="spring依赖注入意事项">Spring依赖注入意事项</h4>
<p>在使用Spring中的依赖注入时，有一些注意事项需要注意，以确保代码的正确性和可维护性。</p>
<ol>
<li>依赖项注入的顺序：如果一个类依赖于多个其他类，那么这些依赖项的注入顺序可能会影响到代码的正确性。为了避免这种情况，可以使用<code>@DependsOn</code>注解指定依赖项之间的顺序。</li>
<li>循环依赖：如果两个或多个类之间出现循环依赖，那么会导致对象无法正确创建。为了避免这种情况，可以使用构造函数注入或setter注入来解决循环依赖问题。</li>
<li>作用域：Spring提供了多种作用域，包括单例、原型和请求作用域等。在使用依赖注入时，需要了解每种作用域的区别和适用场景，并选择合适的作用域。</li>
<li>配置文件管理：在使用XML配置文件或Java配置类时，需要注意配置文件或类的管理和维护。可以使用Spring的Profile功能来管理不同的配置文件或类，并根据不同的环境或需求来选择合适的配置。</li>
<li>依赖注入类型选择：Spring支持多种依赖注入类型，包括构造函数注入、setter注入和字段注入等。需要根据情况选择合适的依赖注入类型，并考虑到代码的可测试性和可维护性。</li>
</ol>
<h4 id="如何避免循环依赖问题">如何避免循环依赖问题</h4>
<p>循环依赖是指两个或多个类之间相互依赖而导致无法正确创建对象的情况。在Spring中，可以通过以下几种方式来避免循环依赖问题：</p>
<ol>
<li>使用构造函数注入：构造函数注入是指依赖项通过构造函数的方式进行注入。这种方式可以避免循环依赖问题，因为对象的创建顺序是确定的，每个对象都必须先创建其依赖项，然后才能创建自身。</li>
<li>使用setter注入：setter注入是指依赖项通过setter方法进行注入。这种方式可以避免循环依赖问题，因为对象的创建顺序是不确定的，每个对象都可以先创建自身，然后再通过setter方法注入其依赖项。</li>
<li>使用<code>@Lazy</code>注解：<code>@Lazy</code>注解可以延迟依赖项的注入，直到对象第一次使用该依赖项时才进行注入。这种方式可以避免循环依赖问题，因为对象的创建顺序是不确定的，每个对象都可以先创建自身，然后再等待其依赖项被注入。</li>
<li>优化依赖关系：如果出现循环依赖问题，可以通过优化依赖关系来解决。例如，将依赖项抽象成接口或抽象类，然后通过不同的实现类来解决循环依赖问题。</li>
</ol>
<h4 id="spring多种依赖注入类的优缺点">Spring多种依赖注入类的优缺点</h4>
<p>Spring支持多种依赖注入类型，包括构造函数注入、setter注入和字段注入等。各种依赖注入类型的优缺点如下：</p>
<p><strong>1、构造函数注入</strong></p>
<p>优点：</p>
<ul>
<li>对象创建时依赖项已经确定，可以保证依赖项的完整性和正确性。</li>
<li>依赖项是只读的，可以保证对象的不变性。</li>
</ul>
<p>缺点：</p>
<ul>
<li>构造函数注入比较繁琐，需要在每个类中添加构造函数和依赖项参数。</li>
</ul>
<p><strong>2、setter注入</strong></p>
<p>优点：</p>
<ul>
<li>setter注入比较灵活，可以随时注入或更改依赖项。</li>
<li>可以使用默认构造函数创建对象，简化代码。</li>
</ul>
<p>缺点：</p>
<ul>
<li>对象创建时依赖项可能还未注入，需要进行null检查。</li>
<li>setter方法是公共的，可能会影响对象的不变性。</li>
</ul>
<p><strong>3、字段注入</strong></p>
<p>优点：</p>
<ul>
<li>简单方便，不需要手动编写构造函数或setter方法。</li>
<li>可以使用默认构造函数创建对象，简化代码。</li>
</ul>
<p>缺点：</p>
<ul>
<li>依赖项是公共的，可能会影响对象的不变性。</li>
<li>对象创建时依赖项可能还未注入，需要进行null检查。</li>
</ul>
<p>总的来说，**构造函数注入是最推荐的依赖注入方式，因为它可以保证对象的完整性和正确性。**setter注入和字段注入则比较灵活，但需要注意依赖项的注入时机和可能对对象不变性的影响。根据具体的情况和需求，可以选择合适的依赖注入方式。</p>
<h2 id="总结">总结</h2>
<p>总之，不要使用单例或静态实用工具类来实现依赖于一个或多个底层资源的类，这些资源的行为会影响类的行为，也不要让类直接创建这些资源。相反，将创建它们的资源或工厂传递给构造函数（或静态工厂或构建器）。这种操作称为依赖注入，它将大大增强类的灵活性、可复用性和可测试性。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记3：使用私有构造函数或枚举类型创建单例</title>
      <link>https://blog.chensoul.com/posts/2023/04/11/enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type/</link>
      <pubDate>Tue, 11 Apr 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/11/enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。 介绍 单例是一个只实例化一次的类。单例通常表示无</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。</p>
<h2 id="介绍">介绍</h2>
<p>单例是一个只实例化一次的类。单例通常表示无状态对象，比如函数或系统组件，它们在本质上是唯一的。<strong>将一个类设计为单例会使它的客户端测试时变得困难，</strong> 除非它实现了作为其类型的接口，否则无法用模拟实现来代替单例。</p>
<h2 id="实现">实现</h2>
<p>实现单例有两种常见的方法。两者都基于保持构造函数私有和导出公共静态成员以提供对唯一实例的访问。</p>
<p>在第一种方法中，成员是一个 final 字段：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Singleton with public final field
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Elvis</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Elvis</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Elvis</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Elvis</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leaveTheBuilding</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>私有构造函数只调用一次，用于初始化 <code>public static final </code>修饰的 Elvis 类型字段 <code>INSTANCE</code>。不使用 <code>public</code> 或 <code>protected</code> 的构造函数保证了「独一无二」的空间：一旦初始化了 Elvis 类，就只会存在一个 Elvis 实例，不多也不少。客户端所做的任何事情都不能改变这一点，但有一点需要注意：拥有特殊权限的客户端可以借助 <code>AccessibleObject.setAccessible</code> 方法利用反射调用私有构造函数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Constructor</span><span class="o">&lt;?&gt;[]</span> <span class="n">constructors</span> <span class="o">=</span> <span class="n">Elvis</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredConstructors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">AccessibleObject</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="n">constructors</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">constructors</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">name</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;Elvis&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Elvis</span> <span class="n">instance</span> <span class="o">=</span> <span class="o">(</span><span class="n">Elvis</span><span class="o">)</span> <span class="n">name</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">instance</span><span class="o">.</span><span class="na">leaveTheBuilding</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">});</span>
</span></span></code></pre></div><p>如果需要防范这种攻击，请修改构造函数，使其在请求创建第二个实例时抛出异常。</p>
<p>在实现单例的第二种方法中，公共成员是一种静态工厂方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Singleton with static factory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Elvis</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Elvis</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Elvis</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Elvis</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Elvis</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leaveTheBuilding</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>所有对 <code>getInstance()</code> 方法的调用都返回相同的对象引用，并且不会创建其他 Elvis 实例。</p>
<p>公共字段方法的主要优点是 API 明确了类是单例的：public static 修饰的字段是 final 的，因此它总是包含相同的对象引用。第二个优点是更简单。</p>
<p>静态工厂方法的一个优点是，它可以在不更改 API 的情况下决定类是否是单例。工厂方法返回唯一的实例，但是可以对其进行修改，为调用它的每个线程返回一个单独的实例。第二个优点是，如果应用程序需要的话，可以编写泛型的单例工厂。使用静态工厂的最后一个优点是方法引用能够作为一个提供者，例如 <code>Elvis::getInstance</code> 是 <code>Supplier&lt;Elvis&gt;</code> 的提供者。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Elvis</span><span class="o">&gt;</span> <span class="n">sup</span> <span class="o">=</span> <span class="n">Elvis</span><span class="o">::</span><span class="n">getInstance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Elvis</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">sup</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span><span class="o">.</span><span class="na">leaveTheBuilding</span><span class="o">();</span>
</span></span></code></pre></div><p>除非能够与这些优点沾边，否则使用 public 字段的方式更可取。</p>
<p>要使单例类使用这两种方法中的任何一种实现可序列化，仅仅在其声明中添加实现 <code>serializable</code> 是不够的。要维护单例保证，应声明所有实例字段为 <code>transient</code>，并提供 <code>readResolve</code> 方法。否则，每次反序列化实例时，都会创建一个新实例，在我们的示例中，这会导致出现虚假的 Elvis。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// readResolve method to preserve singleton property
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="n">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Return the one true Elvis and let the garbage collector
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// take care of the Elvis impersonator.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>实现单例的第三种方法是声明一个单元素枚举：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Enum singleton - the preferred approach
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Elvis</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leaveTheBuilding</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这种方法类似于 <code>public</code> 字段方法，但是它更简洁，默认提供了序列化机制，提供了对多个实例化的严格保证，即使面对复杂的序列化或反射攻击也是如此。这种方法可能有点不自然，但是<strong>单元素枚举类型通常是实现单例的最佳方法。</strong> 注意，如果你的单例必须扩展一个超类而不是 <code>Enum</code>（尽管你可以声明一个 Enum 来实现接口），你就不能使用这种方法。</p>
<h2 id="扩展">扩展</h2>
<p>单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点来访问该实例。在Java语言中，单例模式一般有以下几种实现方式：</p>
<h3 id="饿汉式单例模式">饿汉式单例模式</h3>
<p>在类加载时就创建单例实例，因此也称为静态初始化单例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EagerSingleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">EagerSingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EagerSingleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">EagerSingleton</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">EagerSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="懒汉式单例模式">懒汉式单例模式</h3>
<p>在第一次调用<code>getInstance()</code>方法时才创建单例实例，也称为延迟初始化单例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例代码中，我们使用了<code>synchronized</code>关键字来保证线程安全。但是这种方式会影响性能，因为每次调用<code>getInstance()</code>方法都会进行同步。因此，我们可以使用双重检查锁定来提高性能。</p>
<h3 id="双重检查锁定单例模式">双重检查锁定单例模式</h3>
<p>在懒汉式单例模式的基础上，使用双重检查锁定来保证线程安全和性能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">LazySingleton</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">LazySingleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述实现中，<code>instance</code> 字段使用 <code>volatile</code> 关键字修饰，可以确保多个线程都能够正确地处理该变量。</p>
<p>在 <code>getInstance()</code> 方法中，首先检查实例是否已经存在，如果存在则直接返回实例引用。否则，获取类对象的锁，再次检查实例是否存在。如果实例仍然不存在，则创建实例。由于 <code>synchronized</code> 关键字可以确保同一时刻只有一个线程可以进入临界区，因此可以避免多个线程同时创建实例的情况。</p>
<p>需要注意的是，在使用双重锁检测时，需要使用 <code>volatile</code> 关键字来保证多个线程都能够正确地处理共享变量。同时，为了保证所有线程都看到同一个实例，需要使用静态字段来存储单例实例。</p>
<blockquote>
<p><strong>关于  <code>volatile</code> 关键字修饰</strong></p>
<p>在 Java 中，当一个变量被多个线程共享时，如果没有采取特殊的措施，可能会出现一个线程修改了变量值，但其他线程并没有看到该变量的变化的情况。这是因为每个线程都有自己的 CPU 缓存，该变量的值可能存在于某个线程的 CPU 缓存中，但其他线程并没有及时更新缓存中的值。</p>
<p><code>volatile</code> 是一种 Java 关键字，它可以确保多个线程都能够正确地处理该变量。当一个变量被声明为 <code>volatile</code> 时，它会具有以下特性：</p>
<ol>
<li>可见性：当一个线程修改了 <code>volatile</code> 变量的值时，其他线程可以立即看到该变化。</li>
<li>禁止指令重排：编译器和 CPU 会对指令进行重排以提高执行效率，但有时这种重排可能会导致多线程程序出现问题。<code>volatile</code> 变量的写操作会在读操作之前，确保变量的修改对其他线程立即可见，从而禁止指令重排。</li>
</ol>
<p>在上述单例模式实现中，<code>instance</code> 字段被声明为 <code>volatile</code>，这是为了确保多个线程都能够正确地处理该变量。如果没有使用 <code>volatile</code>，可能会出现某个线程创建了实例，但其他线程并没有看到该变化的情况。使用 <code>volatile</code> 可以确保多个线程都能够正确地处理 <code>instance</code> 变量，从而避免出现多个实例的情况。</p>
</blockquote>
<h3 id="枚举单例模式">枚举单例模式</h3>
<p>使用枚举类型来定义单例，它保证了线程安全和序列化安全。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">EnumSingleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><strong>关于枚举</strong></p>
<p>在 Java 中，枚举是一种特殊的类，它可以用于定义一组常量。枚举常量是在枚举类被加载时创建的，且只会被创建一次。因此，枚举天然具有单例模式的特性。</p>
<p>在 Java 中，单例模式是一种常用的设计模式，它可以确保某个类只有一个实例，并提供全局访问点。单例模式的实现方式有多种，包括懒汉式、饿汉式、双重检查锁等。但是，这些实现方式都需要考虑线程安全和序列化等问题，而枚举天然具有线程安全和序列化的特性。</p>
<p>枚举类是在 Java 1.5 版本中引入的，它是一个特殊的类，可以用于定义一组常量。枚举常量是在枚举类被加载时创建的，且只会被创建一次。因此，枚举天然具有单例模式的特性，而且枚举类的实现方式非常简单，无需考虑线程安全和序列化等问题。因此，使用枚举实现单例模式是一种简单、安全、高效的方式。</p>
</blockquote>
<p>一个实际中使用的例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@AllArgsConstructor</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Getter</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">ChannelType</span> <span class="kd">implements</span> <span class="n">CodeAware</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">VMS</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&#34;语音电话&#34;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">AbstractNotificationStrategy</span> <span class="nf">strategy</span><span class="o">(</span><span class="n">Properties</span> <span class="n">properties</span><span class="o">,</span> <span class="n">NotificationTemplate</span> <span class="n">notificationTemplate</span><span class="o">,</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">NotificationUser</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">VmsNotificationStrategy</span><span class="o">(</span><span class="k">new</span> <span class="n">VmsNotificationChannel</span><span class="o">(</span><span class="n">properties</span><span class="o">),</span> <span class="n">notificationTemplate</span><span class="o">,</span> <span class="n">users</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">NotificationTemplate</span> <span class="nf">template</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">template</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">imageUrls</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">VmsNotificationTemplate</span><span class="o">(</span><span class="n">title</span><span class="o">,</span> <span class="n">template</span><span class="o">,</span> <span class="n">imageUrls</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">},</span>
</span></span><span class="line"><span class="cl">    <span class="n">FEISHU</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&#34;飞书&#34;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">AbstractNotificationStrategy</span> <span class="nf">strategy</span><span class="o">(</span><span class="n">Properties</span> <span class="n">properties</span><span class="o">,</span> <span class="n">NotificationTemplate</span> <span class="n">notificationTemplate</span><span class="o">,</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">NotificationUser</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">FeishuNotificationStrategy</span><span class="o">(</span><span class="k">new</span> <span class="n">FeishuNotificationChannel</span><span class="o">(</span><span class="n">properties</span><span class="o">),</span> <span class="n">notificationTemplate</span><span class="o">,</span> <span class="n">users</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">NotificationTemplate</span> <span class="nf">template</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">template</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">imageUrls</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">FeishuNotificationTemplate</span><span class="o">(</span><span class="n">title</span><span class="o">,</span> <span class="n">template</span><span class="o">,</span> <span class="n">imageUrls</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">code</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">AbstractNotificationStrategy</span> <span class="nf">strategy</span><span class="o">(</span><span class="n">Properties</span> <span class="n">properties</span><span class="o">,</span> <span class="n">NotificationTemplate</span> <span class="n">notificationTemplate</span><span class="o">,</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">NotificationUser</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">NotificationTemplate</span> <span class="nf">template</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">template</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">imageUrls</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="静态内部类单例模式">静态内部类单例模式</h3>
<p>静态内部类单例模式是一种常用的实现单例模式的方式，它可以保证线程安全且实现简单。在该模式中，单例实例是通过静态内部类来实现的。</p>
<blockquote>
<p>在 Java 中，静态内部类是一种特殊的类，它是在另一个类内部定义的静态类。静态内部类可以访问外部类的静态字段和方法，但不能访问外部类的非静态字段和方法。</p>
</blockquote>
<p>使用静态内部类实现单例模式的方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StaticInnerClassSingleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">StaticInnerClassSingleton</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SingletonHolder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">StaticInnerClassSingleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StaticInnerClassSingleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">StaticInnerClassSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">SingletonHolder</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述代码中，<code>SingletonHolder</code> 是静态内部类，它包含一个静态常量 <code>INSTANCE</code>，该常量是在静态内部类被加载时创建的，且只会被创建一次。由于静态内部类的加载是在需要时才进行的，因此可以实现懒加载的效果。在 <code>getInstance</code> 方法中，直接返回 <code>SingletonHolder.INSTANCE</code> 即可获取单例实例。</p>
<p>在静态内部类单例模式中，由于静态内部类的加载是在需要时才进行的，且只会被加载一次，因此可以保证单例实例的线程安全。在多线程环境下，多个线程同时调用 <code>getInstance</code> 方法时，由于静态内部类的加载是线程安全的，因此可以保证只有一个单例实例被创建。</p>
<p>此外，静态内部类单例模式的实现方式简单且易于理解，而且不需要考虑线程安全和序列化等问题，因此是一种常用的实现单例模式的方式。</p>
<h3 id="注册式单例模式">注册式单例模式</h3>
<p>使用容器来存储单例实例，通过唯一的标识符来访问单例实例。</p>
<p>总的来说，每种实现方式都有其适用的场景和优缺点，开发者需要根据具体的需求来选择合适的实现方式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingletonRegistry</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">registry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SingletonRegistry</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">Object</span> <span class="nf">getSingleton</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">registry</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例代码中，我们在<code>register()</code>方法和<code>getSingleton()</code>方法上都加了<code>synchronized</code>关键字，确保了多线程情况下的线程安全。但是这种方式会影响性能，因为每次调用<code>getSingleton()</code>方法都会进行同步。</p>
<p>以下是使用并发容器实现线程安全的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingletonRegistry</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">registry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SingletonRegistry</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">getSingleton</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">registry</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用<code>ConcurrentMap</code>的<code>computeIfAbsent</code>方法可以更加简洁地实现线程安全的注册式单例模式，它可以确保多线程情况下的线程安全，并且避免了使用<code>synchronized</code>关键字带来的性能问题。</p>
<p>以下是使用<code>ConcurrentMap</code>的<code>computeIfAbsent</code>方法实现线程安全的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingletonRegistry</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">registry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SingletonRegistry</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">getSingleton</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">registry</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">key</span> <span class="o">-&gt;</span> <span class="n">createSingleton</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">createSingleton</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// create singleton object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例代码中，我们使用<code>ConcurrentHashMap</code>来存储注册信息，并且使用了<code>putIfAbsent</code>方法来避免重复添加元素。在<code>getSingleton</code>方法中，我们使用了<code>computeIfAbsent</code>方法来获取单例实例，如果实例不存在，则调用<code>createSingleton</code>方法创建实例。由于<code>ConcurrentHashMap</code>的并发操作是线程安全的，因此使用<code>computeIfAbsent</code>方法可以确保多线程情况下的线程安全。</p>
<h2 id="运用">运用</h2>
<p>以下，整理了常见的开源框架中单例模式运用。</p>
<h3 id="log4j">Log4j</h3>
<p>Log4j 是一个用于记录日志的开源框架，它使用单例模式来管理 Logger 的实例。Logger 是一个线程安全的类，用于记录应用程序的日志信息。</p>
<p>以下是 Log4j 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Logger</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Logger</span><span class="o">&gt;</span> <span class="n">instances</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Logger</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="nf">getLogger</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Logger</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">instances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">instances</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">instance</span> <span class="o">=</span> <span class="n">instances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Logger</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instances</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Logger 使用一个 Map 来缓存所有的 Logger 实例，并在需要获取 Logger 实例时使用双重检查锁定机制来确保只有一个线程可以创建实例。</p>
<h3 id="jedis">Jedis</h3>
<p>Jedis 是一个用于连接 Redis 数据库的开源框架，它使用单例模式来管理 JedisPool 的实例。JedisPool 是一个线程安全的类，用于管理可重用的 Jedis 实例。</p>
<p>以下是 Jedis 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JedisPool</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">JedisPool</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">JedisPool</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">JedisPool</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">host</span><span class="o">,</span> <span class="kt">int</span> <span class="n">port</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">host</span> <span class="o">+</span> <span class="s">&#34;:&#34;</span> <span class="o">+</span> <span class="n">port</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">JedisPool</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JedisPool</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Jedis 使用一个 ConcurrentHashMap 来缓存所有的 JedisPool 实例，并在需要获取 JedisPool 实例时使用 synchronized 方法来确保只有一个线程可以创建实例。</p>
<h3 id="retrofit">Retrofit</h3>
<p>Retrofit 是一个用于简化 HTTP 请求的开源框架，它使用单例模式来管理 Retrofit 的实例。Retrofit 是一个线程安全的类，用于创建 HTTP 请求。</p>
<p>以下是 Retrofit 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Retrofit</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Retrofit</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Retrofit</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Retrofit</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Retrofit</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">create</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// create HTTP request using service interface
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Retrofit 使用静态变量和静态方法来获取单例实例，并在整个应用程序中共享使用。</p>
<h3 id="gson">Gson</h3>
<p>Gson 是一个用于将 JSON 字符串转换为 Java 对象的开源框架，它使用单例模式来管理 Gson 的实例。Gson 是一个线程安全的类，用于处理 JSON 数据。</p>
<p>以下是 Gson 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Gson</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Gson</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Gson</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Gson</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">fromJson</span><span class="o">(</span><span class="n">String</span> <span class="n">json</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">classOfT</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// convert JSON string to Java object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Gson 使用静态变量和静态方法来获取单例实例，并在整个应用程序中共享使用。</p>
<h3 id="spring-framework">Spring Framework</h3>
<p>Spring Framework 是一个用于构建企业级 Java 应用程序的开源框架，它使用单例模式来管理 Bean 的实例。Bean 是一个线程安全的类，用于实现应用程序的业务逻辑。</p>
<p>以下是 Spring Framework 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultListableBeanFactory</span> <span class="kd">implements</span> <span class="n">BeanFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">singletonObjects</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;(</span><span class="mi">256</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">BeansException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">bean</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">singletonObjects</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">bean</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">singletonObjects</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">bean</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">singletonObjects</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">bean</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">bean</span> <span class="o">=</span> <span class="n">createBean</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                    <span class="k">this</span><span class="o">.</span><span class="na">singletonObjects</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">bean</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">createBean</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// create Bean instance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Spring Framework 使用一个 ConcurrentHashMap 来缓存所有的 Bean 实例，并在需要获取 Bean 实例时使用双重检查锁定机制来确保只有一个线程可以创建实例。</p>
<h3 id="hibernate">Hibernate</h3>
<p>Hibernate 是一个用于处理关系数据库的开源框架，它使用单例模式来管理 SessionFactory 的实例。SessionFactory 是一个线程安全的类，用于创建和管理 Session 对象。</p>
<p>以下是 Hibernate 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">SessionFactory</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SessionFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SessionFactory</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">SessionFactory</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Session</span> <span class="nf">openSession</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// create and return new Session object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Hibernate 使用静态变量和静态方法来获取单例实例，并在整个应用程序中共享使用。</p>
<h3 id="junit">JUnit</h3>
<p>JUnit 是一个用于编写单元测试的开源框架，它使用单例模式来管理 TestSuite 的实例。TestSuite 是一个线程安全的类，用于管理测试用例的集合。</p>
<p>以下是 JUnit 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestSuite</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">TestSuite</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestSuite</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">TestCase</span><span class="o">&gt;</span> <span class="n">testCases</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">TestSuite</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">TestSuite</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addTestCase</span><span class="o">(</span><span class="n">TestCase</span> <span class="n">testCase</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">testCases</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">testCase</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">TestResult</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">TestCase</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">testCases</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">testCase</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，JUnit 使用静态变量和静态方法来获取 TestSuite 的单例实例，并在整个测试应用程序中共享使用。</p>
<h3 id="apache-commons-lang">Apache Commons Lang</h3>
<p>Apache Commons Lang 是一个用于提供常用 Java 工具类的开源库，它使用单例模式来管理 CharSet 的实例。CharSet 是一个线程安全的类，用于管理字符集编码。</p>
<p>以下是 Apache Commons Lang 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CharSet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">CharSet</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">CharSet</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">CharSet</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CharSet</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">CharSet</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CharSet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                    <span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Apache Commons Lang 使用一个 ConcurrentHashMap 来缓存所有的 CharSet 实例，并在需要获取 CharSet 实例时使用双重检查锁定机制来确保只有一个线程可以创建实例。</p>
<h3 id="apache-commons-pool">Apache Commons Pool</h3>
<p>Apache Commons Pool 是一个用于管理对象池的开源库，它使用单例模式来管理 ObjectPool 的实例。ObjectPool 是一个线程安全的类，用于管理可重用对象的池。</p>
<p>以下是 Apache Commons Pool 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GenericObjectPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">ObjectPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ObjectPool</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">GenericObjectPool</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ObjectPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">PooledObjectFactory</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">factory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ObjectPool</span><span class="o">&lt;?&gt;</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericObjectPool</span><span class="o">&lt;&gt;(</span><span class="n">factory</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">ObjectPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;)</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Apache Commons Pool 使用一个 ConcurrentHashMap 来缓存所有的 ObjectPool 实例，并在需要获取 ObjectPool 实例时使用 synchronized 方法来确保只有一个线程可以创建实例。</p>
<h3 id="tomcat">Tomcat</h3>
<p>Tomcat 是一个用于运行 Java Web 应用程序的开源服务器，它使用单例模式来管理 ServletContext 的实例。ServletContext 是一个线程安全的类，用于管理 Web 应用程序的上下文信息。</p>
<p>以下是 Tomcat 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationContext</span> <span class="kd">extends</span> <span class="n">StandardContext</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ApplicationContext</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">ApplicationContext</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ApplicationContext</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">contextPath</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">contextPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">ApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">contextPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instance</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="n">contextPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                    <span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">contextPath</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Tomcat 使用一个 ConcurrentHashMap 来缓存所有的 ServletContext 实例，并在需要获取 ServletContext 实例时使用双重检查锁定机制来确保只有一个线程可以创建实例。</p>
<h3 id="okhttp">OkHttp</h3>
<p>OkHttp 是一个用于进行网络请求的开源框架，它使用单例模式来管理 OkHttpClient 的实例。OkHttpClient 是一个线程安全的类，用于管理网络请求的配置和执行。</p>
<p>以下是 OkHttp 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OkHttpClient</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">OkHttpClient</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">OkHttpClient</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">OkHttpClient</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;default&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">OkHttpClient</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OkHttpClient</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，OkHttp 使用一个 ConcurrentHashMap 来缓存所有的 OkHttpClient 实例，并在需要获取 OkHttpClient 实例时使用 synchronized 方法来确保只有一个线程可以创建实例。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记2：使用构造器代替构造方法</title>
      <link>https://blog.chensoul.com/posts/2023/04/03/builder-instead-of-constructors/</link>
      <pubDate>Mon, 03 Apr 2023 16:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/03/builder-instead-of-constructors/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。 介绍 当一个类需要多个构造函数参数时，可以考虑使</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。</p>
<h2 id="介绍">介绍</h2>
<p>当一个类需要多个构造函数参数时，可以考虑使用<strong>构建器模式</strong>来创建对象。构建器模式是一种创建对象的设计模式，它可以通过链式调用方法的方式来设置对象的构造参数，并最终返回一个构造完整的对象。</p>
<h2 id="优点">优点</h2>
<p>使用构建器模式的原因有以下几点：</p>
<ol>
<li>避免构造函数参数过多的问题：当一个类需要多个构造函数参数时，构造函数的参数列表可能会变得很长，这会导致代码难以理解和维护。使用构建器模式可以将构造函数参数拆分成多个方法，从而使代码更加清晰易懂。</li>
<li>提高代码的可读性和可维护性：使用构建器模式可以使代码更加易懂和易维护，因为可以通过方法名来清晰地表达每个参数的含义。</li>
<li>提供更多的灵活性和可定制性：构建器模式可以提供更多的灵活性和可定制性，因为可以在构造对象时进行更多的逻辑处理和判断。例如，可以在构建器中添加验证逻辑，以确保参数的有效性。</li>
<li>支持多线程环境：构建器模式可以支持多线程环境，因为每个构建器都是独立的，不会受到其他线程的影响。</li>
</ol>
<p>以下是一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NutritionFacts</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">calories</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">fat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">sodium</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">carbohydrate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">servingSize</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">servings</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">calories</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">calories</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">fat</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">fat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">sodium</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">sodium</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">carbohydrate</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">carbohydrate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//省略 get set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Required parameters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Optional parameters - initialized to default values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">calories</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kt">int</span> <span class="n">fat</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kt">int</span> <span class="n">sodium</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kt">int</span> <span class="n">carbohydrate</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="nf">Builder</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">servingSize</span> <span class="o">=</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">servings</span> <span class="o">=</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">calories</span><span class="o">(</span><span class="kt">int</span> <span class="n">calories</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">calories</span> <span class="o">=</span> <span class="n">calories</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">fat</span><span class="o">(</span><span class="kt">int</span> <span class="n">fat</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">fat</span> <span class="o">=</span> <span class="n">fat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">sodium</span><span class="o">(</span><span class="kt">int</span> <span class="n">sodium</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">sodium</span> <span class="o">=</span> <span class="n">sodium</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">carbohydrate</span><span class="o">(</span><span class="kt">int</span> <span class="n">carbohydrate</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">carbohydrate</span> <span class="o">=</span> <span class="n">carbohydrate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">NutritionFacts</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">NutritionFacts</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述示例中，我们定义了一个名为 NutritionFacts 的类，它包含了一些营养成分的信息，例如每份的大小、总份数、卡路里、脂肪、钠和碳水化合物等成员变量。我们还定义了一个名为 Builder 的静态内部类，用于构建 NutritionFacts 对象。</p>
<p>在 Builder 类中，我们定义了一个带有两个参数的构造方法，并在其中初始化了必需的成员变量 servingSize 和 servings。我们还定义了一些可选的方法，用于设置 NutritionFacts 对象的卡路里、脂肪、钠和碳水化合物等成员变量。这些方法都支持链式调用，并返回 Builder 对象本身，以便进行多次方法调用。</p>
<p>在 Builder 类中，我们最终定义了一个 build() 方法，用于创建 NutritionFacts 对象并返回。在 build() 方法中，我们调用 NutritionFacts 的私有构造器并将 Builder 对象作为参数传递进去，从而创建 NutritionFacts 对象并初始化其成员变量。</p>
<p>现在，我们可以使用 NutritionFacts.Builder 类来创建 NutritionFacts 对象，并使用链式调用来设置 NutritionFacts 对象的成员变量。例如，我们可以使用以下代码来创建一个每份大小为 240ml、总共有 8 份、卡路里为 100、脂肪为 2、钠为 35、碳水化合物为 27 的 NutritionFacts 对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">NutritionFacts</span> <span class="n">cocaCola</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NutritionFacts</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="mi">240</span><span class="o">,</span> <span class="mi">8</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">calories</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">fat</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">sodium</span><span class="o">(</span><span class="mi">35</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">carbohydrate</span><span class="o">(</span><span class="mi">27</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><p>在上述代码中，我们首先创建了一个 NutritionFacts.Builder 对象，并在构造函数中传递了每份大小和总份数等参数。然后，我们使用链式调用来设置卡路里、脂肪、钠和碳水化合物等成员变量，并最终调用 build() 方法来创建 NutritionFacts 对象。</p>
<p>可以使用 lombok 注解来简化代码，但是，<strong>无法在构造器的构造方法里设置必要参数。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">lombok.Builder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Builder</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NutritionFacts</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">calories</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">fat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">sodium</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">carbohydrate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="缺点">缺点</h2>
<p>虽然构建器模式可以提高代码的可读性、可维护性以及提供更多的灵活性和可定制性，但它也有一些缺点，包括：</p>
<ol>
<li>增加代码复杂度：使用构建器模式会增加代码的复杂度，因为需要创建一个独立的构建器类，并且需要在构建器类中定义多个方法来设置对象的属性。这会增加代码量并且需要更多的时间来编写和维护代码。</li>
<li>增加内存开销：使用构建器模式需要创建一个独立的构建器对象，并且需要在构建器对象中保存对象的属性。这会增加内存开销，并且在创建对象时需要更多的时间和资源。</li>
<li>对于简单对象不适用：构建器模式更适用于构造复杂对象，对于简单对象来说，使用构建器模式可能会增加代码的复杂度和开销。</li>
<li>需要额外的代码：使用构建器模式需要编写额外的代码来创建构建器类和定义方法。如果只需要构造一个简单的对象，使用构建器模式可能会浪费时间和资源。</li>
</ol>
<h2 id="层次构建器">层次构建器</h2>
<p>层次构建器（Hierarchical Builder）是一种构建器模式的扩展，它允许创建层次结构的对象，并支持在父对象中嵌套子对象。它通常由一个抽象的构建器接口，多个具体的构建器实现和一个指导者（Director）组成。</p>
<p>在层次构建器中，每个构建器都负责创建特定类型的对象，并且可以在其构建方法中调用其他构建器的构建方法来创建嵌套的子对象。指导者负责协调构建器的顺序和调用构建器的方法来构建对象层次结构。</p>
<p>层次构建器模式的优点包括：</p>
<ol>
<li>支持创建复杂的对象层次结构，能够构建包含多个层次和嵌套子对象的对象。</li>
<li>提供了更好的可读性和可维护性，因为每个构建器都只需要关注一个特定类型的对象，而且可以通过方法名来清晰地表达每个参数的含义。</li>
<li>提供了更多的灵活性和可定制性，因为可以在构建器中添加验证逻辑，以确保参数的有效性，并且可以动态地组合构建器来创建不同类型的对象。</li>
</ol>
<p>层次构建器模式的缺点包括：</p>
<ol>
<li>
<p>代码量：由于层次构建器模式需要定义多个构建器类，因此代码量会比较大，尤其是在构建复杂对象时。</p>
</li>
<li>
<p>嵌套层次：层次构建器模式中的对象层次结构是通过嵌套多个构建器实现的，这会导致代码的嵌套层次较深，可能会影响代码的可读性和可维护性。</p>
</li>
<li>
<p>可能会增加内存开销：因为每个构建器都需要创建一个独立的对象，并且需要在构建器对象中保存对象的属性。对于大型对象和多级嵌套结构，开销可能会很大。</p>
</li>
<li>
<p>不适合简单对象的构建：层次构建器模式适用于构建复杂对象层次结构，但对于简单的对象构建，使用层次构建器模式可能会显得过于繁琐和不必要。</p>
</li>
</ol>
<h3 id="使用">使用</h3>
<h4 id="举例-1">举例 1</h4>
<p>1、定义抽象的构建器接口，用于创建不同类型的对象和添加子对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ComputerBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">buildCPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">buildGPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">buildMemory</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">addStorage</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">addPeripheral</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Computer</span> <span class="nf">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>2、创建具体的构建器实现，用于构建不同类型的对象和添加子对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DesktopBuilder</span> <span class="kd">implements</span> <span class="n">ComputerBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Desktop</span> <span class="n">computer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Desktop</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildCPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setCPU</span><span class="o">(</span><span class="k">new</span> <span class="n">CPU</span><span class="o">(</span><span class="n">model</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildGPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setGPU</span><span class="o">(</span><span class="k">new</span> <span class="n">GPU</span><span class="o">(</span><span class="n">model</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildMemory</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setMemory</span><span class="o">(</span><span class="k">new</span> <span class="n">Memory</span><span class="o">(</span><span class="n">size</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addStorage</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">addStorage</span><span class="o">(</span><span class="k">new</span> <span class="n">Storage</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">size</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addPeripheral</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">addPeripheral</span><span class="o">(</span><span class="k">new</span> <span class="n">Peripheral</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Computer</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">computer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LaptopBuilder</span> <span class="kd">implements</span> <span class="n">ComputerBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Laptop</span> <span class="n">computer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Laptop</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildCPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setCPU</span><span class="o">(</span><span class="k">new</span> <span class="n">CPU</span><span class="o">(</span><span class="n">model</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildGPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setGPU</span><span class="o">(</span><span class="k">new</span> <span class="n">GPU</span><span class="o">(</span><span class="n">model</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildMemory</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setMemory</span><span class="o">(</span><span class="k">new</span> <span class="n">Memory</span><span class="o">(</span><span class="n">size</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addStorage</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">addStorage</span><span class="o">(</span><span class="k">new</span> <span class="n">Storage</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">size</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addPeripheral</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">addPeripheral</span><span class="o">(</span><span class="k">new</span> <span class="n">Peripheral</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Computer</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">computer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>3、创建指导者类，用于协调构建器的顺序和调用构建器的方法来构建对象层次结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComputerDirector</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">ComputerBuilder</span> <span class="n">builder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ComputerDirector</span><span class="o">(</span><span class="n">ComputerBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">builder</span> <span class="o">=</span> <span class="n">builder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">construct</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildCPU</span><span class="o">(</span><span class="s">&#34;Intel Core i7&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildGPU</span><span class="o">(</span><span class="s">&#34;Nvidia GeForce RTX 3080&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildMemory</span><span class="o">(</span><span class="mi">16</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">addStorage</span><span class="o">(</span><span class="s">&#34;SSD&#34;</span><span class="o">,</span> <span class="mi">512</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">addPeripheral</span><span class="o">(</span><span class="s">&#34;Keyboard&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">addPeripheral</span><span class="o">(</span><span class="s">&#34;Mouse&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>4、使用层次构建器模式创建计算机系统对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ComputerBuilder</span> <span class="n">desktopBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DesktopBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">ComputerBuilder</span> <span class="n">laptopBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LaptopBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ComputerDirector</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ComputerDirector</span><span class="o">(</span><span class="n">desktopBuilder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Computer</span> <span class="n">desktop</span> <span class="o">=</span> <span class="n">desktopBuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ComputerDirector</span><span class="o">(</span><span class="n">laptopBuilder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Computer</span> <span class="n">laptop</span> <span class="o">=</span> <span class="n">laptopBuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 将两个计算机系统对象组合成一个更大的计算机系统对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ComputerSystem</span> <span class="n">system</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ComputerSystem</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">system</span><span class="o">.</span><span class="na">addComputer</span><span class="o">(</span><span class="n">desktop</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">system</span><span class="o">.</span><span class="na">addComputer</span><span class="o">(</span><span class="n">laptop</span><span class="o">);</span>
</span></span></code></pre></div><p>在上面的示例中，DesktopBuilder和LaptopBuilder分别是具体的构建器实现，用于创建桌面计算机和笔记本电脑对象。ComputerDirector是指导者类，用于协调构建器的顺序和调用构建器的方法来构建对象层次结构。使用ComputerDirector构建计算机系统对象时，可以先使用DesktopBuilder构建桌面计算机对象，再使用LaptopBuilder构建笔记本电脑对象，最后将两个计算机系统对象组合成一个更大的计算机系统对象。</p>
<p>下面是另一个使用层次构建器模式创建层次结构对象的例子，假设需要创建一个组织结构的层次结构对象，其中包含多个部门和嵌套子部门：</p>
<p>1、定义抽象的构建器接口，用于创建不同类型的对象和添加子对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DepartmentBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">buildName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">buildManager</span><span class="o">(</span><span class="n">String</span> <span class="n">manager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">addSubDepartment</span><span class="o">(</span><span class="n">Department</span> <span class="n">subDepartment</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Department</span> <span class="nf">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">DepartmentImpl</span> <span class="kd">implements</span> <span class="n">Department</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">String</span> <span class="n">manager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Department</span><span class="o">&gt;</span> <span class="n">subDepartments</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setManager</span><span class="o">(</span><span class="n">String</span> <span class="n">manager</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">manager</span> <span class="o">=</span> <span class="n">manager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSubDepartment</span><span class="o">(</span><span class="n">Department</span> <span class="n">subDepartment</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">subDepartments</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">subDepartment</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeSubDepartment</span><span class="o">(</span><span class="n">Department</span> <span class="n">subDepartment</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">subDepartments</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">subDepartment</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Department</span><span class="o">&gt;</span> <span class="nf">getSubDepartments</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">subDepartments</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getManager</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">manager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DevelopmentDepartment</span> <span class="kd">extends</span> <span class="n">DepartmentImpl</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加特定于开发部门的属性和方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SalesDepartment</span> <span class="kd">extends</span> <span class="n">DepartmentImpl</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加特定于销售部门的属性和方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>2、创建具体的构建器实现，用于构建不同类型的对象和添加子对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SalesDepartmentBuilder</span> <span class="kd">implements</span> <span class="n">DepartmentBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">SalesDepartment</span> <span class="n">department</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SalesDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildManager</span><span class="o">(</span><span class="n">String</span> <span class="n">manager</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="n">manager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSubDepartment</span><span class="o">(</span><span class="n">Department</span> <span class="n">subDepartment</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">subDepartment</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Department</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">department</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DevelopmentDepartmentBuilder</span> <span class="kd">implements</span> <span class="n">DepartmentBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">DevelopmentDepartment</span> <span class="n">department</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DevelopmentDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildManager</span><span class="o">(</span><span class="n">String</span> <span class="n">manager</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="n">manager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSubDepartment</span><span class="o">(</span><span class="n">Department</span> <span class="n">subDepartment</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">subDepartment</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Department</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">department</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>3、创建指导者类，用于协调构建器的顺序和调用构建器的方法来构建对象层次结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrganizationDirector</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">DepartmentBuilder</span> <span class="n">builder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">OrganizationDirector</span><span class="o">(</span><span class="n">DepartmentBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">builder</span> <span class="o">=</span> <span class="n">builder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">construct</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildName</span><span class="o">(</span><span class="s">&#34;Organization&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildManager</span><span class="o">(</span><span class="s">&#34;CEO&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Department</span> <span class="n">salesDept</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SalesDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">salesDept</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Sales Department&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">salesDept</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="s">&#34;Sales Manager&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">salesDept</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Department</span> <span class="n">devDept</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DevelopmentDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">devDept</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Development Department&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">devDept</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="s">&#34;Development Manager&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Department</span> <span class="n">frontendDevDept</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DevelopmentDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">frontendDevDept</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Front-end Development Department&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">frontendDevDept</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="s">&#34;Front-end Development Manager&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">devDept</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">frontendDevDept</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Department</span> <span class="n">backendDevDept</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DevelopmentDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">backendDevDept</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Back-end Development Department&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">backendDevDept</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="s">&#34;Back-end Development Manager&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">devDept</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">backendDevDept</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">devDept</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>4、使用层次构建器模式创建组织结构对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">DepartmentBuilder</span> <span class="n">salesDeptBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SalesDepartmentBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">DepartmentBuilder</span> <span class="n">devDeptBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DevelopmentDepartmentBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">OrganizationDirector</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OrganizationDirector</span><span class="o">(</span><span class="n">salesDeptBuilder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Department</span> <span class="n">salesDept</span> <span class="o">=</span> <span class="n">salesDeptBuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OrganizationDirector</span><span class="o">(</span><span class="n">devDeptBuilder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Department</span> <span class="n">devDept</span> <span class="o">=</span> <span class="n">devDeptBuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 将两个部门对象组合成一个更大的组织结构对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Organization</span> <span class="n">organization</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Organization</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">organization</span><span class="o">.</span><span class="na">addDepartment</span><span class="o">(</span><span class="n">salesDept</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">organization</span><span class="o">.</span><span class="na">addDepartment</span><span class="o">(</span><span class="n">devDept</span><span class="o">);</span>
</span></span></code></pre></div><p>在上面的示例中，SalesDepartmentBuilder和DevelopmentDepartmentBuilder分别是具体的构建器实现，用于创建销售部门和开发部门对象。OrganizationDirector是指导者类，用于协调构建器的顺序和调用构建器的方法来构建对象层次结构。使用OrganizationDirector构建组织结构对象时，可以先使用SalesDepartmentBuilder构建销售部门对象，再使用DevelopmentDepartmentBuilder构建开发部门对象，最后将两个部门对象组合成一个更大的组织结构对象。</p>
<h4 id="举例-2">举例 2</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ComputerComponent</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">manufacturer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="nf">ComputerComponent</span><span class="o">(</span><span class="n">Builder</span><span class="o">&lt;?&gt;</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">manufacturer</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">manufacturer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">model</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getManufacturer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">manufacturer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getModel</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Builder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">manufacturer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">T</span> <span class="nf">setManufacturer</span><span class="o">(</span><span class="n">String</span> <span class="n">manufacturer</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">manufacturer</span> <span class="o">=</span> <span class="n">manufacturer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">self</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">T</span> <span class="nf">setModel</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">model</span> <span class="o">=</span> <span class="n">model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">self</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="n">T</span> <span class="nf">self</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">ComputerComponent</span> <span class="nf">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Motherboard</span> <span class="kd">extends</span> <span class="n">ComputerComponent</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">socketType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="nf">Motherboard</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">socketType</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">socketType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getSocketType</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">socketType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="kd">extends</span> <span class="n">ComputerComponent</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">Builder</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">socketType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setSocketType</span><span class="o">(</span><span class="n">String</span> <span class="n">socketType</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">socketType</span> <span class="o">=</span> <span class="n">socketType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">protected</span> <span class="n">Builder</span> <span class="nf">self</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Motherboard</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Motherboard</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CPU</span> <span class="kd">extends</span> <span class="n">ComputerComponent</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">coreCount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="nf">CPU</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">coreCount</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">coreCount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCoreCount</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">coreCount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="kd">extends</span> <span class="n">ComputerComponent</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">Builder</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kt">int</span> <span class="n">coreCount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setCoreCount</span><span class="o">(</span><span class="kt">int</span> <span class="n">coreCount</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">coreCount</span> <span class="o">=</span> <span class="n">coreCount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">protected</span> <span class="n">Builder</span> <span class="nf">self</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">CPU</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">CPU</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Motherboard</span> <span class="n">motherboard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CPU</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="nf">Computer</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">motherboard</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">motherboard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cpu</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Motherboard</span> <span class="nf">getMotherboard</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">motherboard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CPU</span> <span class="nf">getCpu</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">Motherboard</span> <span class="n">motherboard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">CPU</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setMotherboard</span><span class="o">(</span><span class="n">Motherboard</span> <span class="n">motherboard</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">motherboard</span> <span class="o">=</span> <span class="n">motherboard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setCpu</span><span class="o">(</span><span class="n">CPU</span> <span class="n">cpu</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">cpu</span> <span class="o">=</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Computer</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Computer</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Motherboard</span><span class="o">.</span><span class="na">Builder</span> <span class="n">motherboardBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Motherboard</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setManufacturer</span><span class="o">(</span><span class="s">&#34;ASUS&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="s">&#34;ROG Strix Z590-E Gaming&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setSocketType</span><span class="o">(</span><span class="s">&#34;LGA 1200&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">CPU</span><span class="o">.</span><span class="na">Builder</span> <span class="n">cpuBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CPU</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setManufacturer</span><span class="o">(</span><span class="s">&#34;Intel&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="s">&#34;Core i9-11900K&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setCoreCount</span><span class="o">(</span><span class="mi">8</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Computer</span><span class="o">.</span><span class="na">Builder</span> <span class="n">computerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Computer</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setMotherboard</span><span class="o">(</span><span class="n">motherboardBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setCpu</span><span class="o">(</span><span class="n">cpuBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Computer</span> <span class="n">computer</span> <span class="o">=</span> <span class="n">computerBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><p>在这个示例中，<code>ComputerComponent</code> 类是一个抽象基类，定义了计算机组件的基本属性和方法。它还定义了一个抽象的构建器类，用于构建它的子类的实例。</p>
<p>每个 <code>ComputerComponent</code> 的具体子类都有自己的具体构建器类，该类扩展了抽象构建器类。具体构建器提供了设置相应组件属性的方法，例如主板的制造商、型号和插座类型，处理器的时钟速度和内存的容量。</p>
<p><code>Computer</code> 类代表一个完整的计算机系统，并具有用于构建 <code>Computer</code> 类的实例的构建器类。<code>Computer.Builder</code> 类提供了设置每个组件属性的方法，使用 <code>Consumer</code> 函数接口来接受配置相应构建器的 lambda 表达式。</p>
<h2 id="使用-1">使用</h2>
<p>以下是几个常见开源框架中使用建造者模式的例子：</p>
<h3 id="retrofit">Retrofit</h3>
<p>Retrofit是一个Android和Java平台上的RESTful API库，它使用建造者模式来创建RestAdapter对象。RestAdapter.Builder类是一个建造者类，它包含了一系列的方法，用于设置Retrofit的配置选项，如设置API的base URL、设置HTTP Client、设置Converter等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">RestAdapter</span> <span class="n">restAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestAdapter</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setEndpoint</span><span class="o">(</span><span class="s">&#34;https://api.github.com&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setClient</span><span class="o">(</span><span class="k">new</span> <span class="n">OkClient</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setLogLevel</span><span class="o">(</span><span class="n">RestAdapter</span><span class="o">.</span><span class="na">LogLevel</span><span class="o">.</span><span class="na">FULL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="gson">Gson</h3>
<p>Gson是一个用于在Java对象和JSON数据之间进行序列化和反序列化的库。它使用建造者模式来创建Gson对象。GsonBuilder类是一个建造者类，它包含了一系列的方法，用于配置Gson的行为，如设置日期格式、设置字段的命名策略等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GsonBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setDateFormat</span><span class="o">(</span><span class="s">&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setFieldNamingPolicy</span><span class="o">(</span><span class="n">FieldNamingPolicy</span><span class="o">.</span><span class="na">LOWER_CASE_WITH_UNDERSCORES</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="apache-httpclient">Apache HttpClient</h3>
<p>Apache HttpClient是一个用于创建HTTP客户端的库，它使用建造者模式来创建HttpClient对象。HttpClientBuilder类是一个建造者类，它包含了一系列的方法，用于配置HttpClient的行为，如设置连接池、设置代理、设置Cookie管理器等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setMaxConnTotal</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setMaxConnPerRoute</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setProxy</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpHost</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">,</span> <span class="mi">8080</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setDefaultCookieStore</span><span class="o">(</span><span class="k">new</span> <span class="n">BasicCookieStore</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="apache-kafka">Apache Kafka</h3>
<p>Apache Kafka是一个分布式消息队列系统，它使用建造者模式来创建Producer和Consumer对象。ProducerConfig和ConsumerConfig类是建造者类，它们包含了一系列的方法，用于配置Producer和Consumer的行为，如设置broker地址、设置序列化器等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Properties</span> <span class="n">producerProps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">producerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">BOOTSTRAP_SERVERS_CONFIG</span><span class="o">,</span> <span class="s">&#34;localhost:9092&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">producerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">KEY_SERIALIZER_CLASS_CONFIG</span><span class="o">,</span> <span class="n">StringSerializer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">producerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="o">,</span> <span class="n">StringSerializer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Producer</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">producer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KafkaProducer</span><span class="o">&lt;&gt;(</span><span class="n">producerProps</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Properties</span> <span class="n">consumerProps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">consumerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ConsumerConfig</span><span class="o">.</span><span class="na">BOOTSTRAP_SERVERS_CONFIG</span><span class="o">,</span> <span class="s">&#34;localhost:9092&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">consumerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ConsumerConfig</span><span class="o">.</span><span class="na">KEY_DESERIALIZER_CLASS_CONFIG</span><span class="o">,</span> <span class="n">StringDeserializer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">consumerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ConsumerConfig</span><span class="o">.</span><span class="na">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="o">,</span> <span class="n">StringDeserializer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">consumerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ConsumerConfig</span><span class="o">.</span><span class="na">GROUP_ID_CONFIG</span><span class="o">,</span> <span class="s">&#34;my-group&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Consumer</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KafkaConsumer</span><span class="o">&lt;&gt;(</span><span class="n">consumerProps</span><span class="o">);</span>
</span></span></code></pre></div><h3 id="apache-commons-configuration">Apache Commons Configuration</h3>
<p>Apache Commons Configuration是一个用于读取和写入各种配置文件的库，它使用建造者模式来创建Configuration对象。ConfigurationBuilder类是一个建造者类，它包含了一系列的方法，用于配置Configuration的行为，如设置配置文件类型、设置属性的分隔符等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Configuration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConfigurationBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setDelimiterParsingDisabled</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setFile</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&#34;config.properties&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setListDelimiterHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">DefaultListDelimiterHandler</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="guava">Guava</h3>
<p>Guava是一个Google开发的Java库，它包含了许多实用的工具类和数据结构，其中包括使用建造者模式来创建的ImmutableList、ImmutableMap和ImmutableSet等不可变集合类。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;foo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;bar&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;baz&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;foo&#34;</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;bar&#34;</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;baz&#34;</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;foo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;bar&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;baz&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="jpa">JPA</h3>
<p>Java Persistence API（JPA）是Java EE平台的一个ORM框架，它使用建造者模式来创建EntityManagerFactory对象。EntityManagerFactoryBuilder类是一个建造者类，它包含了一系列的方法，用于配置EntityManagerFactory的行为，如设置数据源、设置JPA的属性等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">EntityManagerFactory</span> <span class="n">entityManagerFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EntityManagerFactoryBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">dataSource</span><span class="o">(</span><span class="n">myDataSource</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">persistenceUnit</span><span class="o">(</span><span class="s">&#34;myPersistenceUnit&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">properties</span><span class="o">(</span><span class="n">myProperties</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="spring-framework">Spring Framework</h3>
<p>Spring Framework是一个Java平台上的开源应用程序框架，它使用建造者模式来创建RestTemplate和HttpHeaders对象。RestTemplateBuilder和HttpHeadersBuilder类是建造者类，它们包含了一系列的方法，用于配置RestTemplate和HttpHeaders的行为，如设置连接超时、设置请求头等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">RestTemplate</span> <span class="n">restTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestTemplateBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setConnectTimeout</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">10</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setReadTimeout</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">10</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeadersBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h2 id="优化">优化</h2>
<p>建造者模式的优化主要包括以下几个方面：</p>
<h3 id="使用静态内部类优化建造者模式">使用静态内部类优化建造者模式</h3>
<p>建造者模式通常使用一个Builder类来构建复杂对象，为了避免Builder类变得过于臃肿，可以将其设计为静态内部类，这样可以使代码更加清晰，同时也能够保证线程安全。</p>
<h3 id="使用流式接口优化建造者模式">使用流式接口优化建造者模式</h3>
<p>流式接口是一种链式调用的方式，它可以将多个方法调用连接起来，形成一个链式结构，使得代码更加简洁易读。在建造者模式中，可以使用流式接口来优化Builder类，使得客户端可以通过链式调用的方式来创建复杂对象，从而简化代码。</p>
<h3 id="使用默认值优化建造者模式">使用默认值优化建造者模式</h3>
<p>在建造者模式中，有些属性是必须的，而有些属性是可选的，可以使用默认值来为可选属性设置默认值，从而避免客户端必须为每个可选属性都提供值的情况，同时也能够简化客户端代码。</p>
<h3 id="使用java-8中的optional类优化建造者模式">使用Java 8中的Optional类优化建造者模式</h3>
<p>Java 8中引入了Optional类，该类可以用于处理可能为null的值，可以进一步优化建造者模式中的代码。</p>
<p>在建造者模式中，我们通常需要设置多个属性，其中有些属性可能是可选的，如果直接使用null来表示可选属性的值，可能会导致代码出现空指针异常，而使用Optional类可以避免这个问题。</p>
<p>下面是一个使用Optional类优化建造者模式的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">graphicsCard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Computer</span><span class="o">(</span><span class="n">ComputerBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cpu</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">memory</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">hardDisk</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">graphicsCard</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">graphicsCard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 省略getter方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ComputerBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">graphicsCard</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setCpu</span><span class="o">(</span><span class="n">String</span> <span class="n">cpu</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">cpu</span> <span class="o">=</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setMemory</span><span class="o">(</span><span class="n">String</span> <span class="n">memory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">memory</span> <span class="o">=</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setHardDisk</span><span class="o">(</span><span class="n">String</span> <span class="n">hardDisk</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">hardDisk</span> <span class="o">=</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setGraphicsCard</span><span class="o">(</span><span class="n">String</span> <span class="n">graphicsCard</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">graphicsCard</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">graphicsCard</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Computer</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Computer</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例代码中，我们使用 <code>Optional</code> 类来表示可选属性的值，将graphicsCard属性的类型改为<code>Optional&lt;String&gt;</code>。在 ComputerBuilder 类中，我们使用 <code>Optional.ofNullable </code>方法来将可选属性的值转换为 Optional 对象，并在调用 build 方法时，将 Optional 对象转换为普通的字符串类型。</p>
<h3 id="使用-lambda表达式优化建造者模式">使用 Lambda表达式优化建造者模式</h3>
<p>Lambda表达式是Java 8中引入的一种新的语言特性，可以进一步优化建造者模式中的代码，使得代码更加简洁易读。</p>
<p>在建造者模式中，我们通常需要定义多个属性，并在构造方法中进行初始化。使用Lambda表达式可以避免定义多个属性的问题，将属性的赋值操作通过Lambda表达式传递给构造方法。</p>
<p>下面是一个使用Lambda表达式优化建造者模式的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.function.Consumer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">graphicsCard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Computer</span><span class="o">(</span><span class="n">Consumer</span><span class="o">&lt;</span><span class="n">ComputerBuilder</span><span class="o">&gt;</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ComputerBuilder</span> <span class="n">computerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ComputerBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">computerBuilder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cpu</span> <span class="o">=</span> <span class="n">computerBuilder</span><span class="o">.</span><span class="na">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">memory</span> <span class="o">=</span> <span class="n">computerBuilder</span><span class="o">.</span><span class="na">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">hardDisk</span> <span class="o">=</span> <span class="n">computerBuilder</span><span class="o">.</span><span class="na">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">graphicsCard</span> <span class="o">=</span> <span class="n">computerBuilder</span><span class="o">.</span><span class="na">graphicsCard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 省略getter方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ComputerBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">graphicsCard</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setCpu</span><span class="o">(</span><span class="n">String</span> <span class="n">cpu</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">cpu</span> <span class="o">=</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setMemory</span><span class="o">(</span><span class="n">String</span> <span class="n">memory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">memory</span> <span class="o">=</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setHardDisk</span><span class="o">(</span><span class="n">String</span> <span class="n">hardDisk</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">hardDisk</span> <span class="o">=</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setGraphicsCard</span><span class="o">(</span><span class="n">String</span> <span class="n">graphicsCard</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">graphicsCard</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">graphicsCard</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Computer</span> <span class="n">computer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Computer</span><span class="o">(</span><span class="n">builder</span> <span class="o">-&gt;</span> <span class="n">builder</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">setCpu</span><span class="o">(</span><span class="s">&#34;Intel i7&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">setMemory</span><span class="o">(</span><span class="s">&#34;16GB&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">setHardDisk</span><span class="o">(</span><span class="s">&#34;512GB SSD&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">setGraphicsCard</span><span class="o">(</span><span class="s">&#34;NVIDIA GTX 1660&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例代码中，我们将 Computer 类的构造方法改为接收一个 <code>Consumer&lt;ComputerBuilder&gt; </code>类型的参数，这个参数表示一个包含属性赋值操作的 Lambda 表达式。在构造方法中，我们先创建一个ComputerBuilder 对象，然后通过 Lambda 表达式调用 ComputerBuilder 对象的方法来设置属性值，并最终通过 ComputerBuilder 对象创建 Computer 对象。</p>
<h3 id="使用泛型和反射优化">使用泛型和反射优化</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">EntityCreator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">classInstance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">T</span> <span class="n">entityObj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">EntityCreator</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">classInstance</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">initParams</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">classInstance</span> <span class="o">=</span> <span class="n">classInstance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">paramTypes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Class</span><span class="o">&lt;?&gt;[</span><span class="n">initParams</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="n">initParams</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">checkStr</span> <span class="o">=</span> <span class="n">initParams</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">checkStr</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;Integer&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">paramTypes</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">checkStr</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;Double&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">paramTypes</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="kt">double</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">checkStr</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;Boolean&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">paramTypes</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="kt">boolean</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">checkStr</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;String&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">paramTypes</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">initParams</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="na">getClass</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Constructor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">constructor</span> <span class="o">=</span> <span class="n">classInstance</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">(</span><span class="n">paramTypes</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">constructor</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">entityObj</span> <span class="o">=</span> <span class="n">constructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">initParams</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">EntityCreator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">setValue</span><span class="o">(</span><span class="n">String</span> <span class="n">paramName</span><span class="o">,</span> <span class="n">Object</span> <span class="n">paramValue</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Field</span> <span class="n">field</span> <span class="o">=</span> <span class="n">classInstance</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="n">paramName</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">field</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">entityObj</span><span class="o">,</span> <span class="n">paramValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">T</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">entityObj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>​		如此，可移除整个内部 Builder 类，NutritionFacts 类私有构造的参数仅包括两个必填的 servingSize、servings 字段：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NutritionFacts</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Required parameters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Optional parameters - initialized to default values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">calories</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">fat</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">sodium</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">carbohydrate</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">servingSize</span> <span class="o">=</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">servings</span> <span class="o">=</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>该案例的客户端代码改为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">NutritionFacts</span> <span class="n">cocaCola</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EntityCreator</span><span class="o">&lt;&gt;(</span><span class="n">NutritionFacts</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">240</span><span class="o">,</span> <span class="mi">8</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">&#34;calories&#34;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">&#34;sodium&#34;</span><span class="o">,</span> <span class="mi">35</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">&#34;carbohydrate&#34;</span><span class="o">,</span> <span class="mi">27</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记1：静态工厂方法代替构造函数</title>
      <link>https://blog.chensoul.com/posts/2023/04/03/static-factory-methods-instead-of-constructors/</link>
      <pubDate>Mon, 03 Apr 2023 12:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/03/static-factory-methods-instead-of-constructors/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。 介绍 静态工厂方法是指在类中定义一个静态方法，用</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。</p>
<h2 id="介绍">介绍</h2>
<p>静态工厂方法是指在类中定义一个静态方法，用于创建该类的实例。示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="n">Boolean</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">b</span> <span class="o">?</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TRUE</span> <span class="o">:</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">FALSE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>与构造函数不同的是，静态工厂方法可以有自己的名称，并且可以根据参数的不同返回不同的对象实例。</p>
<h2 id="优点">优点</h2>
<p>这本书中提到了一些静态工厂方法的优点，包括：</p>
<ol>
<li>
<p>静态工厂方法可以有意义的名称：与构造函数不同，静态工厂方法可以有自己的名称，这使得代码更具有可读性和可维护性。</p>
<blockquote>
<p>例如，BigInteger 类提供了一个返回素数的静态工厂方法 <code>BigInteger.probablePrime</code> 。</p>
</blockquote>
</li>
<li>
<p>静态工厂方法可以隐藏实现细节：静态工厂方法可以隐藏对象的创建和初始化过程，使客户端代码更加简洁和易于维护。</p>
<blockquote>
<p>这是服务提供者框架的基础。</p>
<p>服务提供者框架中有三个基本组件：服务接口，代表要实现的服务；提供者注册 API，提供者使用它来注册实现，以及服务访问
API，客户端使用它来获取服务的实例。服务访问 API 允许客户端指定选择实现的标准。在没有这些条件的情况下，API
返回一个默认实现的实例，或者允许客户端循环使用所有可用的实现。服务访问 API 是灵活的静态工厂，它构成了服务提供者框架的基础。</p>
<p>服务提供者框架的第四个可选组件是服务提供者接口，它描述了产生服务接口实例的工厂对象。在没有服务提供者接口的情况下，必须以反射的方式实例化实现。</p>
<p>在 JDBC 中，<code>Connection</code> 扮演服务接口的角色。<code>DriverManager.registerDriver</code> 是提供者注册的
API，<code>DriverManager.getConnection</code> 是服务访问 API，<code>Driver</code> 是服务提供者接口。</p>
<p>服务提供者框架模式有许多变体。例如，服务访问 API 可以向客户端返回比提供者提供的更丰富的服务接口，这是桥接模式。依赖注入框架可以看作是强大的服务提供者。由于是
Java 6，该平台包括一个通用服务提供者框架 <code>Java.util.ServiceLoader</code>，所以你不需要，通常也不应该自己写。JDBC 不使用
ServiceLoader，因为前者比后者要早。</p>
</blockquote>
</li>
<li>
<p>静态工厂方法可以返回缓存的对象：静态工厂方法可以返回缓存的对象，这避免了创建新对象的开销，提高了性能。</p>
<blockquote>
<p>这种技术类似于享元模式。如果经常请求相同的对象，特别是在创建对象的代价很高时，它可以极大地提高性能。</p>
</blockquote>
<p><strong>举例 1：使用 ConcurrentHashMap</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadSafeCache</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ThreadSafeCache</span><span class="o">&gt;</span> <span class="n">instances</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">ThreadSafeCache</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ThreadSafeCache</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instances</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">k</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ThreadSafeCache</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>computeIfAbsent</code> 方法用于计算缓存对象。如果 <code>key</code> 在 <code>instances</code> 中不存在，则使用 lambda
表达式 <code>k -&gt; new ThreadSafeCache()</code> 创建一个新的 <code>ThreadSafeCache</code> 对象，并将该对象与 <code>key</code> 关联。如果 <code>key</code>
已经存在，则直接返回与之关联的 <code>ThreadSafeCache</code> 对象。</p>
<p>使用 <code>computeIfAbsent</code> 方法可以更简洁地实现线程安全的缓存类，并且可以确保在多线程环境下的线程安全性。</p>
</li>
</ol>
<p><strong>举例 2：使用 synchronized 关键字</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadSafeCache</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ThreadSafeCache</span><span class="o">&gt;</span> <span class="n">instances</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">ThreadSafeCache</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ThreadSafeCache</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">instances</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instances</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">ThreadSafeCache</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol start="4">
<li>
<p>静态工厂方法可以返回子类对象：静态工厂方法可以返回实现了某个接口或继承了某个类的子类对象，这提高了代码的灵活性和可扩展性。</p>
<blockquote>
<p>例如，Java 的 Collections 框架有 45
个接口实用工具实现，提供了不可修改的集合、同步集合等。几乎所有这些实现都是通过一个非实例化类（<code>java.util.Collections</code>
）中的静态工厂方法导出的。返回对象的类都是私有的子类。</p>
</blockquote>
<p><strong>举例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">draw</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Circle</span> <span class="kd">implements</span> <span class="n">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Drawing Circle&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Square</span> <span class="kd">implements</span> <span class="n">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Drawing Square&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShapeFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Shape</span> <span class="nf">getShape</span><span class="o">(</span><span class="n">String</span> <span class="n">shapeType</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">shapeType</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">shapeType</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&#34;CIRCLE&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Circle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">shapeType</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&#34;SQUARE&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Square</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>ShapeFactory</code> 类使用静态工厂方法 <code>getShape</code> 来创建 <code>Shape</code> 对象。如果 <code>shapeType</code> 参数为 <code>CIRCLE</code>
，则创建 <code>Circle</code> 对象并返回，如果参数为 <code>SQUARE</code>，则创建 <code>Square</code> 对象并返回。</p>
</li>
<li>
<p>静态工厂方法可以返回不可变对象：静态工厂方法可以返回不可变对象，这确保了对象的安全性和线程安全性。</p>
<p><strong>举例</strong>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ThreadSafeImmutableClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">ThreadSafeImmutableClass</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ThreadSafeImmutableClass</span> <span class="nf">getInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">ThreadSafeImmutableClass</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>ThreadSafeImmutableClass</code> 类使用静态工厂方法 <code>getInstance</code>
来创建不可变对象。由于该类的属性都是 <code>final</code> 的，因此该对象是不可变的。由于没有任何状态可以修改，因此该对象是线程安全的。</p>
</li>
</ol>
<h2 id="缺点">缺点</h2>
<p>使用静态工厂方法也有一些缺点，例如：</p>
<ol>
<li>静态工厂方法可能会导致代码的可测试性变差，因为它们往往是静态的，难以进行模拟和替换。</li>
<li>静态工厂方法可能会使代码的扩展性变差，因为它们通常是静态的，难以扩展和修改。</li>
<li>静态工厂方法可能会使代码的可读性变差，因为它们往往是自定义的，难以理解和维护。</li>
</ol>
<p>仅提供静态工厂方法也存在一些局限：</p>
<ol>
<li>不可继承：静态工厂方法是通过类名直接调用的，因此无法通过继承来创建对象的变体或子类对象。</li>
<li>可能难以扩展：如果在实现静态工厂方法时没有考虑到所有可能的用例，那么在需要添加新功能或对象类型时可能会很难扩展。</li>
<li>可能难以测试：如果静态工厂方法中包含复杂的逻辑或依赖外部资源，那么在测试时可能会很难模拟或替换这些依赖项。</li>
<li>可能会引起混淆：如果在同一个类中定义多个静态工厂方法，它们可能具有相似的名称或参数类型，从而可能会导致混淆或误用。</li>
<li>对象创建可能较慢：如果创建对象需要进行复杂的计算或依赖大量的外部资源，那么静态工厂方法可能会导致对象创建的性能问题。</li>
</ol>
<p>所以，在选择不同的静态工厂方法时，需要考虑以下几个因素：</p>
<ol>
<li>目的：考虑每个工厂方法的目的，以及它是否符合您的需求。不同的工厂方法可能有不同的目的，例如创建新对象、返回共享实例或从一种类型转换为另一种类型。</li>
<li>灵活性：考虑每个工厂方法的灵活性。某些工厂方法可能比其他工厂方法更灵活，允许更多的自定义或配置选项。</li>
<li>可读性：考虑工厂方法的可读性。好的工厂方法应该易于阅读和理解，具有清晰的名称和明确的参数。</li>
<li>性能：考虑每个工厂方法的性能影响。根据具体的用例，某些工厂方法可能比其他工厂方法更高效或更快。</li>
<li>兼容性：考虑工厂方法是否与您现有的代码库和第三方库兼容。根据具体的技术和框架，某些工厂方法可能比其他工厂方法更兼容。</li>
<li>维护：考虑每个工厂方法的维护影响。根据实现的复杂性以及文档和支持的可用性，某些工厂方法可能比其他工厂方法更易于维护。</li>
</ol>
<h2 id="使用">使用</h2>
<p>以下是一些常见静态工厂方法的名称：</p>
<ul>
<li>
<p><code>from</code>，用于从其他类型的对象或数据源中创建一个对象，例如 <code>Date.from</code> 和 <code>Duration.from</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Date</span> <span class="n">d</span> <span class="o">=</span> <span class="n">Date</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">instant</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>of</code>，一个聚合方法，它接受多个参数并返回一个包含这些参数的实例，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Set</span><span class="o">&lt;</span><span class="n">Rank</span><span class="o">&gt;</span> <span class="n">faceCards</span> <span class="o">=</span> <span class="n">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">JACK</span><span class="o">,</span> <span class="n">QUEEN</span><span class="o">,</span> <span class="n">KING</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>valueOf</code>，一种替代 <code>from</code> 和 <code>of</code> 但更冗长的方法，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">BigInteger</span> <span class="n">prime</span> <span class="o">=</span> <span class="n">BigInteger</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>instance</code> 或 <code>getInstance</code>，返回一个实例，该实例由其参数（如果有的话）描述，但不具有相同的值，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">StackWalker</span> <span class="n">luke</span> <span class="o">=</span> <span class="n">StackWalker</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">options</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>create</code> 或 <code>newInstance</code>，与 <code>instance</code> 或 <code>getInstance</code> 类似，只是该方法保证每个调用都返回一个新实例，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="n">newArray</span> <span class="o">=</span> <span class="n">Array</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">classObject</span><span class="o">,</span> <span class="n">arrayLen</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>getType</code>，类似于 <code>getInstance</code>，但如果工厂方法位于不同的类中，则使用此方法。其类型是工厂方法返回的对象类型，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">FileStore</span> <span class="n">fs</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">getFileStore</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Runtime</span> <span class="n">runtime</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">();</span>
</span></span></code></pre></div></li>
<li>
<p><code>newType</code>，与 <code>newInstance</code> 类似，但是如果工厂方法在不同的类中使用。类型是工厂方法返回的对象类型，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">newBufferedReader</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>type</code>，一个用来替代 <code>getType</code> 和 <code>newType</code> 的比较简单的方式，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">Complaint</span><span class="o">&gt;</span> <span class="n">litany</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">list</span><span class="o">(</span><span class="n">legacyLitany</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>parse</code>：用于从字符串或其他格式中解析出一个对象，例如 <code>LocalDate.parse</code> 和 <code>NumberFormat.parse</code>。</p>
</li>
<li>
<p><code>build</code>：用于构建一个对象，例如 <code>RequestBuilder.build</code> 和 <code>ResponseBuilder.build</code>。</p>
</li>
</ul>
<p>还有一些常用的静态工厂方法名称：</p>
<ol>
<li><code>asXxx</code>：用于将该类的对象转换为其他类型的对象，例如 <code>ByteBuffer.asCharBuffer</code> 和 <code>FileChannel.asIntBuffer</code>。</li>
<li><code>toXxx</code>：用于将该类的对象转换为其他类型的对象，例如 <code>BigInteger.toByteArray</code> 和 <code>String.toCharArray</code>。</li>
<li><code>getXXX</code>：用于获取某个对象，例如 <code>TimeZone.getDefault</code>。</li>
<li><code>newXxx</code>：用于创建一个新的对象，例如 <code>File.newFile</code> 和 <code>Thread.newThread</code>。</li>
<li><code>withXxx</code>：用于创建一个修改了指定属性的对象的副本，例如 <code>LocalDate.withYear</code> 和 <code>HttpHeaders.withAccept</code>。</li>
<li><code>forXxx</code>：用于创建一个与指定参数相关的对象，例如 <code>Charset.forName</code> 和 <code>ThreadLocalRandom.forWeb</code>。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>我的VPS服务部署记录</title>
      <link>https://blog.chensoul.com/posts/2023/01/25/notes-about-deploy-services-in-vps/</link>
      <pubDate>Wed, 25 Jan 2023 10:38:34 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/01/25/notes-about-deploy-services-in-vps/</guid>
      <description>服务器设置 [可选] 设置系统 Swap 交换分区 因为 vps 服务器的运行内存很小，所以这里先设置下 Swap # 1GB RAM with 2GB Swap sudo fallocate -l 2G /swapfile &amp;amp;&amp;amp; \ sudo dd if=/dev/zero of=/swapfile bs=1024 count=2097152 &amp;amp;&amp;amp; \ sudo chmod 600 /swapfile &amp;amp;&amp;amp; \ sudo mkswap</description>
      <content:encoded><![CDATA[<h2 id="服务器设置">服务器设置</h2>
<p><strong>[可选] 设置系统 Swap 交换分区</strong></p>
<p>因为 vps 服务器的运行内存很小，所以这里先设置下 Swap</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 1GB RAM with 2GB Swap</span>
</span></span><span class="line"><span class="cl">sudo fallocate -l 2G /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/swapfile <span class="nv">bs</span><span class="o">=</span><span class="m">1024</span> <span class="nv">count</span><span class="o">=</span><span class="m">2097152</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo chmod <span class="m">600</span> /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo mkswap /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo swapon /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="nb">echo</span> <span class="s2">&#34;/swapfile swap swap defaults 0 0&#34;</span> <span class="p">|</span> sudo tee -a /etc/fstab <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo swapon --show <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo free -h
</span></span></code></pre></div><h2 id="安装并生成证书">安装并生成证书</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl https://get.acme.sh <span class="p">|</span> sh -s <span class="nv">email</span><span class="o">=</span>czj.june@gmail.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.acme.sh/acme.sh --issue --server letsencrypt --dns dns_aws -d chensoul.com -d <span class="s1">&#39;*.chensoul.com&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.acme.sh/acme.sh --installcert -d chensoul.com -d *.chensoul.com  --cert-file /usr/local/nginx/ssl/chensoul.com.cer --key-file /usr/local/nginx/ssl/chensoul.com.key --fullchain-file /usr/local/nginx/ssl/fullchain.cer --ca-file /usr/local/nginx/ssl/ca.cer   --reloadcmd <span class="s2">&#34;sudo nginx -s reload&#34;</span>
</span></span></code></pre></div><h2 id="docker-安装和配置">Docker 安装和配置</h2>
<h3 id="docker-安装">Docker 安装</h3>
<p>具体过程可以参考网上文章。</p>
<h3 id="自定义网络">自定义网络</h3>
<p>参考 <a href="https://nginxproxymanager.com/advanced-config/#best-practice-use-a-docker-network">Best Practice: Use a Docker network </a>
，创建一个自定义的网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker network create custom
</span></span></code></pre></div><p>查看 docker 网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@vps ~<span class="o">]</span><span class="c1"># docker network ls</span>
</span></span><span class="line"><span class="cl">NETWORK ID     NAME            DRIVER    SCOPE
</span></span><span class="line"><span class="cl">68f4aeaa57bd   bridge          bridge    <span class="nb">local</span>
</span></span><span class="line"><span class="cl">6a96b9d8617e   custom          bridge    <span class="nb">local</span>
</span></span><span class="line"><span class="cl">4a8679e35f4d   host            host      <span class="nb">local</span>
</span></span><span class="line"><span class="cl">ba21bef23b04   none            null      <span class="nb">local</span>
</span></span></code></pre></div><blockquote>
<p>注意：bridge、host、none 是内部预先创建的网络。</p>
</blockquote>
<p>然后，在其他服务的 docker-compose.yml 文件添加：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">default</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">custom</span><span class="w">
</span></span></span></code></pre></div><p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pgsql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:13</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5433</span><span class="p">:</span><span class="m">5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_USER=chenzj</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_PASSWORD=chenzj@vps2021</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/postgres:/var/lib/postgresql/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">default</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">custom</span><span class="w">
</span></span></span></code></pre></div><h2 id="服务部署">服务部署</h2>
<h3 id="rsshub">Rsshub</h3>
<p>直接通过 Docker 安装运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d --name rsshub -p 1200:1200 diygod/rsshub
</span></span></code></pre></div><p>配置 nginx ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">rsshub.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">rsshub.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:1200</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="kuma">Kuma</h3>
<p>参考 <a href="https://uptime.kuma.pet/">kuma</a>，使用 docker compose 部署，创建 uptime.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uptime-kuma</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">louislam/uptime-kuma:1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">uptime-kuma</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">~/.uptime-kuma:/app/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">3001</span><span class="p">:</span><span class="m">3001</span><span class="w">  </span><span class="c"># &lt;Host Port&gt;:&lt;Container Port&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span></code></pre></div><p>启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f uptime.yaml up -d
</span></span></code></pre></div><p>配置 nginx ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">uptime.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">uptime.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3001</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kn">proxy_set_header</span>   <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_http_version</span> <span class="mi">1</span><span class="s">.1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Connection</span> <span class="s">&#34;upgrade&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="postgresql">Postgresql</h3>
<p>1、参考 <a href="/posts/2022/08/19/postgresql-install-deploy/">PostgreSql安装和部署</a> ，通过 docker-compose 安装，创建
postgresql.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pgsql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:13-alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">pgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5432</span><span class="p">:</span><span class="m">5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_USER=postgres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_PASSWORD=admin@pg!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/postgres:/var/lib/postgresql/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>2、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f postgresql.yaml up -d
</span></span></code></pre></div><h3 id="umami">Umami</h3>
<p>参考 <a href="https://github.com/umami-software/umami/blob/master/docker-compose.yml">umami docker-compose.yml</a> ，使用 docker 镜像
umami:postgresql-latest 来安装 umami。</p>
<p>1、在 pqsql 容器创建 umami 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE USER umami WITH PASSWORD &#39;umami@pg&#39;;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE DATABASE umami owner=umami;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;GRANT ALL privileges ON DATABASE umami TO umami;&#34;</span>
</span></span></code></pre></div><p>然后，初始化数 umami 数据。先进入容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker exec -it pgsql bash
</span></span></code></pre></div><p>进入 umami 数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">psql -U umami -d umami
</span></span><span class="line"><span class="cl"><span class="nv">umami</span><span class="o">=</span>&gt;
</span></span></code></pre></div><p>执行 <a href="https://github.com/umami-software/umami/blob/master/sql/schema.postgresql.sql"><strong>schema.postgresql.sql</strong></a> 文件内容。</p>
<p>2、通过 docker-compose 安装，创建 umami.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">umami</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">ghcr.io/umami-software/umami:postgresql-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">umami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3000:3000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">DATABASE_URL</span><span class="p">:</span><span class="w"> </span><span class="l">postgresql://umami:umami@pg@pgsql:5432/umami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">DATABASE_TYPE</span><span class="p">:</span><span class="w"> </span><span class="l">postgresql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">HASH_SALT</span><span class="p">:</span><span class="w"> </span><span class="l">vps@2023</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f umami.yaml up -d
</span></span></code></pre></div><p>3、设置自定义域名</p>
<p>umami.chensoul.com</p>
<p>4、配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">umami.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">umami.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>5、添加网站</p>
<p>访问 <a href="https://umami.chensoul.com/">https://umami.chensoul.com/</a>，默认用户名和密码为 admin/umami。登陆之后，修改密码，并添加网站。</p>
<h3 id="cusdis">Cusdis</h3>
<blockquote>
<p>VPS IP 可能被墙，所以可以使用三方云服务部署，具体参考<a href="https://www.pseudoyu.com/zh/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></p>
</blockquote>
<p>1、在 pqsql 容器创建 cusdis 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE USER cusdis WITH PASSWORD &#39;cusdis@pg&#39;;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE DATABASE cusdis owner=cusdis;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;GRANT ALL privileges ON DATABASE cusdis TO cusdis;&#34;</span>
</span></span></code></pre></div><p>2、通过 docker-compose 安装，创建 cusdis.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cusdis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">djyde/cusdis:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3010:3000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">USERNAME=admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PASSWORD=cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">JWT_SECRET=vps@2023</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">NEXTAUTH_URL=https://cusdis.chensoul.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">HOST=https://cusdis.chensoul.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_TYPE=pgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_URL=postgresql://cusdis:cusdis@pg@pgsql:5432/cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>以下配置为 EMAIL 配置可选，下面是使用 <a href="https://cusdis.com/doc#/features/notification?id=gmail">Gmail</a>
进行配置，需要首先开启两阶段验证并创建一个应用密码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">SMTP_HOST</span><span class="o">=</span><span class="s">smtp.gmail.com</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_PORT</span><span class="o">=</span><span class="s">465</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_SECURE</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_USER</span><span class="o">=</span><span class="s">your gmail email</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_PASSWORD</span><span class="o">=</span><span class="s">&lt;app password&gt;</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_SENDER</span><span class="o">=</span><span class="s">your gmail email</span>
</span></span></code></pre></div><p>3、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f cusdis.yaml up -d
</span></span></code></pre></div><p>4、配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">cusdis.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">cusdis.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3010</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kn">proxy_pass_header</span> <span class="s">Authorization</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kn">proxy_pass_header</span> <span class="s">WWW-Authenticate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kn">if</span> <span class="s">(</span><span class="nv">$uri</span> <span class="p">=</span> <span class="s">&#39;/js/iframe.umd.js&#39;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        	<span class="kn">add_header</span> <span class="s">&#39;Access-Control-Allow-Origin&#39;</span> <span class="s">&#39;*&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        	<span class="c1">#add_header &#39;Access-Control-Allow-Origin&#39; &#39;http://localhost:1313&#39;;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>5、部署一个 Telegram 机器人，参考 <a href="https://cusdis.chensoul.com/doc#/advanced/webhook?id=official-telegram-bot">Official Telegram bot</a>。</p>
<h3 id="memos">memos</h3>
<p>通过 docker-compose 安装，创建 memos.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">memos</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">neosmemo/memos:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">memos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">~/.memos/:/var/opt/memos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5230</span><span class="p">:</span><span class="m">5230</span><span class="w">
</span></span></span></code></pre></div><p>启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f memos.yaml up -d
</span></span></code></pre></div><p>配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">memos.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">memos.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:5230</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="n8n">n8n</h3>
<p>1、在 pqsql 容器创建 n8n 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE USER n8n WITH PASSWORD &#39;n8n@pg&#39;;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE DATABASE n8n owner=n8n;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;GRANT ALL privileges ON DATABASE n8n TO n8n;&#34;</span> <span class="p">;</span>
</span></span></code></pre></div><p>2、通过 docker-compose 安装，创建 n8n.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.8&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">n8n</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">n8nio/n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_TYPE=postgresdb</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_HOST=pgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_PORT=5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_DATABASE=n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_USER=n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_PASSWORD=n8n@pg</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">N8N_BASIC_AUTH_ACTIVE=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">N8N_BASIC_AUTH_USER=admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">N8N_BASIC_AUTH_PASSWORD=chenzj</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=&#34;Asia/Shanghai&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">WEBHOOK_URL=https://n8n.chensoul.com/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5678</span><span class="p">:</span><span class="m">5678</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/n8n:/home/node/.n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">/bin/sh -c &#34;n8n start --tunnel&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>3、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f n8n.yaml up -d
</span></span></code></pre></div><p>4、设置 nginx 转发</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:5678/</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_http_version</span> <span class="mi">1</span><span class="s">.1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">chunked_transfer_encoding</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_buffering</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_cache</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">access_log</span> <span class="s">/var/log/nginx/forward.log</span> <span class="s">combined</span> <span class="s">buffer=128k</span> <span class="s">flush=5s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这里面的转发配置不对的话，会导致直接访问 5678 端口正常，但是访问 nginx 的话，workflow 会一直处于执行。</p>
<p>5、添加 workflow</p>
<p>参考这篇文章 <a href="http://stiles.cc/archives/237/">http://stiles.cc/archives/237/</a> ，目前我配置了以下 workflows，实现了 github、douban、rss、memos 同步到 Telegram。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/my-n8n-workflows.png" alt="my-n8n-workflows"  />
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>博客中如何使用图床服务</title>
      <link>https://blog.chensoul.com/posts/2022/08/19/using-images-in-blog/</link>
      <pubDate>Fri, 19 Aug 2022 12:15:54 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2022/08/19/using-images-in-blog/</guid>
      <description>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。 喜欢 Typora 的理由： 所见即所得的编辑，Markdown</description>
      <content:encoded><![CDATA[<p>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/my-typora-license.png" alt="my-typora-license"  />
</p>
<p>喜欢 Typora 的理由：</p>
<ul>
<li>
<p>所见即所得的编辑，Markdown的语法都支持快捷键操作，非常方便</p>
</li>
<li>
<p>可以自定义主题的 CSS，包括文章内容就可以粘贴到公众号里</p>
</li>
<li>
<p>上传图片，支持图床服务。可以将图片上传到指定的图床，前提是需要先安装一个客户端，这里我使用的是 PicGo。然后，PicGo支持常见的一些图床服务。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/picgo-setting-image-server.png" alt="picgo-setting-image-server"  />
</p>
</li>
<li>
<p>支持导出</p>
</li>
</ul>
<h2 id="typora-图片复制到本地">Typora 图片复制到本地</h2>
<p>接下来，聊聊 Typora 的图片上传设置：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/typora-setting-image.png" alt="typora-setting-image"  />
</p>
<p>当你插入图片时，你可以分情况对图片进行设置。比如：</p>
<p>1、对本地位置的图片，可以设置一个上传规则：复制到指定路径或者是当前路径下的一个文件夹、上传图片。</p>
<ul>
<li>如果是编写一个文档，我们就设置把图片保存到本地的 assets 文件夹内，这样方便管理。</li>
<li>如果是编写博客，图片一般是集中管理的，我们可以设置复制到一个指定路径</li>
</ul>
<p>2、类似的，对网络位置的图片也可以使用上面的规则。</p>
<p>注意，如果将图片保存到本地目录，在文章中引用图片是使用的相对或者绝对路径。如果只是在本地查看，是可以预览图片的。但是，如果将博客上传到服务器，则因为路径问题可能会出现无法预览图片的情况。</p>
<p>所以，这种情况我们需要做一些修改。通常我会设置图片复制到博客的静态页面目录下面，比如，我现在使用的是 Hugo 构建静态博客，会将图片保存到 static/img 目录下，并且，还需要修改图片的 markdown 引用路径为 <code>/images/image-20220819124422239.png</code> ，以表示绝对路径查找图片，在博客服务器上就是相对根域名目录去 img 路径下查找图片。待hugo 编译完成上传静态文件到服务器之后，可以通过 <a href="https://blog.chensoul.com/images/">https://blog.chensoul.com/images/</a> 加上图片名称的方式访问到图片。</p>
<p>但是，显然，这时候在 Typora 是无法预览图片的，因为在本地查找不到这个绝对路径地址。这时候可以在 Typora 里面设置一个绝对路径，操作方法是，在 显示 -&gt; 图片 -&gt; 图像 -&gt; 设置图片根目录 里进行设置。</p>
<p>设置完成之后，在当前文件的 md 文件的顶部元数据代码里会多一行代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;博客中如何使用图床服务&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">date</span><span class="p">:</span><span class="w"> </span><span class="ld">2022-08-19T12:15:54</span><span class="m">+08</span><span class="p">:</span><span class="m">00</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">slug</span><span class="p">:</span><span class="w"> </span><span class="l">using-images-in-blog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">categories</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">日志]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tags</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">hugo]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">draft</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">typora-root-url</span><span class="p">:</span><span class="w"> </span><span class="l">../../static</span><span class="w">
</span></span></span></code></pre></div><p>这样博客里所有的图片都会保存的博客服务器，如果博客访问量增大，则图片加载时间会变慢。为了解决这个问题，需要将图片进行压缩，并给博客设置 CDN 加速。</p>
<h2 id="typora-图片上传到网络">Typora 图片上传到网络</h2>
<p>将图片保存到本地，待博客静态页面部署到服务器上之后，可以实现正常预览情况。但是，如果我们想把 md 文件打包上传到一些云笔记，比如：语雀，你会发现上传之后会出现图片无法预览的情况。</p>
<p>这时候，我们需要将图片上传到网络。首先，我们需要安装 PicGo，然后设置图床服务，这里我使用的是 github 作为图床来保存图片，并使用  <a href="https://www.jsdelivr.com">jsDelivr</a> 的 CDN 服务进行加速访问。</p>
<p>如何利用 Github 搭建自己的免费图床？可以参考这篇 <a href="https://zhuanlan.zhihu.com/p/353775844">文章</a>。这里，记录一下我的操作步骤。</p>
<p>1、使用博客的<a href="https://github.com/chensoul/blog.chensoul.com">托管仓库</a> 的 static/img 目录来保存图片，这样方便图片的管理（比如：压缩、重命名，删除无用图片），如果图床服务不可用了，所有博客图片还有一个备份，只需要修改博客内图片的引用地址。前提是需要将仓库设置为 public。</p>
<p>2、在 github 设置里面创建一个 Token。以此打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code></p>
<p>3、在 PicGo 里设置 github 图床：</p>
<ul>
<li>
<p>设定仓库名：chensoul/blog.chensoul.com</p>
</li>
<li>
<p>设定分支：main</p>
</li>
<li>
<p>设定 Token：XXXXXXXXXXXXXXXXX</p>
</li>
<li>
<p>指定存储路径：static/images/</p>
</li>
<li>
<p>设置自定义域名：https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com</p>
</li>
</ul>
<p>4、需要修改博客文章内引用的图片地址，将 /images/ 替换为 <a href="https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/images/">https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/images/</a> ，可以使用<a href="https://dvel.me/posts/macos-replace-contents-multiple-files/">脚本批量替换</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">grep -lr --null <span class="s1">&#39;](\/img\/&#39;</span> <span class="p">|</span> xargs -0 sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/](\/img\//](https:\/\/cdn.jsdelivr.net\/gh\/chensoul\/blog.chensoul.com\/static\/img\//g&#39;</span>
</span></span></code></pre></div><blockquote>
<p>参数说明：</p>
<ul>
<li>grep
<ul>
<li><code>-i, --ignore-case</code> 查找文件时不区分大小写</li>
<li><code>-l, --files-with-matches</code> 返回文件名</li>
<li><code>-R, -r, --recursive</code> 递归搜索子目录</li>
</ul>
</li>
<li>sed
<ul>
<li><code>-i</code> 默认 <code>sed</code> 会打印到标准输出，使用 <code>-i</code> 将直接在文件内编辑替换</li>
<li><code>s</code> 替换</li>
<li><code>g</code> 全局替换标志</li>
<li><code>I</code> 大小写不敏感标志</li>
</ul>
</li>
</ul>
</blockquote>
<p>反过来，查询 <a href="https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/">https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/</a> 下的图片地址替换 <code>/img</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">grep -lr --null <span class="s1">&#39;](https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/&#39;</span> <span class="p">|</span> xargs -0 sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/](https:\/\/cdn.jsdelivr.net\/gh\/chensoul\/blog.chensoul.com\/static\/img\//](\/img\//g&#39;</span>
</span></span></code></pre></div><p>另外，在博客编译部署的流程之中，可以定制化一些步骤将博客同步发布到其他系统。当然，在发布之前，也可以先将本地图片的 url 替换成图床地址的 url。等后续实现了，再发布一篇文章。</p>
<p>如果 github 或者 jsdelivr 服务不稳定，则需要考虑使用其他图床了。</p>
<blockquote>
<p>可以通过这个地址 <a href="https://tcp.ping.pe/">https://tcp.ping.pe/</a> 来检测 IP 或者域名是否可以访问</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Mac开发环境配置</title>
      <link>https://blog.chensoul.com/posts/2021/09/09/mac-development-environment-setup/</link>
      <pubDate>Thu, 09 Sep 2021 18:14:34 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2021/09/09/mac-development-environment-setup/</guid>
      <description>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是Mac开发环境，所以，这篇文章主要是基于Mac操作系</description>
      <content:encoded><![CDATA[<p>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是Mac开发环境，所以，这篇文章主要是基于Mac操作系统，记录开发环境搭建过程。</p>
<h2 id="偏好设置">偏好设置</h2>
<ul>
<li>系统所有偏好设置
<ul>
<li>通用：关闭文稿时要求保存更改</li>
<li>Siri：关闭</li>
<li>辅助功能 - 指针控制（或鼠标与触控板） - 触控板选项：启动拖移(三指拖移)</li>
<li>触控板 &gt; 光标与点击，轻拍来点按，辅助点按</li>
<li>Dock
<ul>
<li>置于屏幕上的位置：右边</li>
<li>设置 Dock 图标更小（大小随个人喜好）</li>
</ul>
</li>
</ul>
</li>
<li>Finder
<ul>
<li>显示各种栏</li>
<li>显示所有文件扩展名</li>
<li>标题栏显示完整路径：defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES;killall Finder</li>
</ul>
</li>
<li>禁用大部分 iCloud 同步</li>
<li>键盘 -&gt; 快捷键
<ul>
<li>command + 空格：spotlight  </li>
<li>control + 空格：切换输入法</li>
</ul>
</li>
</ul>
<h2 id="安装xcode">安装XCode</h2>
<p>从 App store 或苹果开发者网站安装 <a href="https://developer.apple.com/xcode/">Xcode</a> ，然后安装 Xcode command line tools：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">xcode-select --install
</span></span></code></pre></div><p>安装完成后，你将可以直接在 terminal 中使用主要的命令，比如：<code>make, GCC, clang, perl, svn, git, size, strip, strings, libtool, cpp</code>等等。</p>
<p>如果你想了解 Xcode command line tools 包含多少可用的命令，可以通过下面命令查看：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ls /Library/Developer/CommandLineTools/usr/bin/
</span></span></code></pre></div><h2 id="homebrew">Homebrew</h2>
<p><a href="http://brew.sh/">Brew</a> 是 Mac 下面的包管理工具，通过 Github 托管适合 Mac 的编译配置以及 Patch，可以方便的安装开发工具。</p>
<p>打开终端模拟器，开始安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/bin/bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>替换 brew.git 源</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git -C <span class="s2">&#34;</span><span class="k">$(</span>brew --repo<span class="k">)</span><span class="s2">&#34;</span> remote set-url origin https://mirrors.cloud.tencent.com/homebrew/brew.git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git -C <span class="s2">&#34;</span><span class="k">$(</span>brew --repo homebrew/core<span class="k">)</span><span class="s2">&#34;</span> remote set-url origin https://mirrors.cloud.tencent.com//homebrew/homebrew-core.git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">brew update
</span></span></code></pre></div><p>设置环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;eval &#34;$(/opt/homebrew/bin/brew shellenv)&#34;&#39;</span> &gt;&gt; ~/.bash_profile
</span></span></code></pre></div><p>如果安装了zsh，则是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;eval &#34;$(/opt/homebrew/bin/brew shellenv)&#34;&#39;</span> &gt;&gt; ~/.zshrc
</span></span></code></pre></div><h2 id="终端">终端</h2>
<h3 id="iterm2">iTerm2</h3>
<p>iTerm2 是 macOS 系统终端的开源替代品，它是高度可定制化的，并且功能十分强大，应该是 macOS 最好用的终端模拟器之一。</p>
<h4 id="安装">安装</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install --cask iterm2
</span></span></code></pre></div><p>设置：</p>
<ul>
<li>Preferences &ndash;&gt; Profiles&ndash;&gt; Default &ndash;&gt; Terminal：设置 cursor 颜色为黄色</li>
<li>Preferences &ndash;&gt; Profiles &ndash;&gt; Window &ndash;&gt; Transparency：设置透明度 10%~20% 即可，太高会和桌面背景冲突。如果需要临时禁用透明度可以使用快捷键 ⌘+u。</li>
</ul>
<h4 id="字体">字体</h4>
<p>在 iTerm2 中，终端的字体可以对正常字体和非 ASCII 字体进行单独的设置，<a href="https://github.com/ryanoasis/nerd-fonts">Nerd-Fonts</a> 是一个使用大量字形（图标）修补开发人员目标字体的项目</p>
<p>分别安装  <a href="https://github.com/ryanoasis/nerd-fonts">font-fantasque-sans-mono-nerd-font</a> + <a href="https://github.com/lxgw/LxgwWenKai">霞鹜文楷</a>  这两种字体</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># brew 添加字体库</span>
</span></span><span class="line"><span class="cl">brew tap homebrew/cask-fonts
</span></span><span class="line"><span class="cl"><span class="c1"># 搜索可用 Nerd Font 字体</span>
</span></span><span class="line"><span class="cl">brew search nerd-font
</span></span><span class="line"><span class="cl"><span class="c1"># 以 font-fantasque-sans-mono-nerd-font 为例（我比较喜欢这个字体🥰）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 安装喜欢的 nerd-font 字体</span>
</span></span><span class="line"><span class="cl">brew install font-fantasque-sans-mono-nerd-font
</span></span><span class="line"><span class="cl"><span class="c1"># 安装「霞鹜文楷」字体</span>
</span></span><span class="line"><span class="cl">brew install font-lxgw-wenkai
</span></span></code></pre></div><p>重新启动 iTerm2，按 <code>⌘</code> + <code>,</code> 打开 iTerm2 的偏好设置，修改字体</p>
<h4 id="安装主题"><strong>安装主题</strong></h4>
<p><a href="https://draculatheme.com/iterm">Dracula</a> 主题很好看，下面给 iTerm2 装上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/dracula/iterm.git
</span></span></code></pre></div><p>点击 <code>import</code> 导入 <code>Dracula.itermcolors</code> 文件，然后选择 <code>Dracula</code> 主题即可</p>
<h3 id="zsh">Zsh</h3>
<p>macOS 现在默认 Shell 是 Zsh 了（以前是 Bash），下面我们可以一边验证一边修改</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># macOS 预设的 Shell</span>
</span></span><span class="line"><span class="cl">cat /etc/shells
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># List of acceptable shells for chpass(1).</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Ftpd will not allow users to connect who are not using</span>
</span></span><span class="line"><span class="cl"><span class="c1"># one of these shells.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/bin/bash
</span></span><span class="line"><span class="cl">/bin/csh
</span></span><span class="line"><span class="cl">/bin/dash
</span></span><span class="line"><span class="cl">/bin/ksh
</span></span><span class="line"><span class="cl">/bin/sh
</span></span><span class="line"><span class="cl">/bin/tcsh
</span></span><span class="line"><span class="cl">/bin/zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看当前正在使用的 Shell</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$SHELL</span>
</span></span><span class="line"><span class="cl">/bin/zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 zsh 版本</span>
</span></span><span class="line"><span class="cl">zsh --version
</span></span><span class="line"><span class="cl">zsh 5.9 <span class="o">(</span>arm-apple-darwin21.3.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将 brew 安装的 zsh 路径添加到 /etc/shells</span>
</span></span><span class="line"><span class="cl">sudo sh -c <span class="s2">&#34;echo </span><span class="k">$(</span>which zsh<span class="k">)</span><span class="s2"> &gt;&gt; /etc/shells&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 更改当前使用的 Shell</span>
</span></span><span class="line"><span class="cl">chsh -s <span class="k">$(</span>which zsh<span class="k">)</span>
</span></span><span class="line"><span class="cl">Changing shell <span class="k">for</span> dejavu.
</span></span><span class="line"><span class="cl">Password <span class="k">for</span> dejavu: <span class="c1"># 输入密码即可</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 验证当前使用的 Shell</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$SHELL</span>
</span></span><span class="line"><span class="cl">/opt/homebrew/bin/zsh
</span></span></code></pre></div><p>如果你的 macOS 系统语言是中文，终端里会使用系统语言作为 <code>locale</code> 设置，我想要终端里的 Shell 显示语言为英语，可以编辑 zsh 配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 编辑 zsh 配置用户</span>
</span></span><span class="line"><span class="cl">vim ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="c1"># 在开头加入以下配置</span>
</span></span><span class="line"><span class="cl"><span class="c1"># You may need to manually set your language environment</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span></span></code></pre></div><h3 id="oh-my-zsh">oh-my-zsh</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 通过 cURL 安装</span>
</span></span><span class="line"><span class="cl">sh -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 或是通过 Wget 安装</span>
</span></span><span class="line"><span class="cl">sh -c <span class="s2">&#34;</span><span class="k">$(</span>wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>oh-my-zsh 的默认主题是 <code>robbyrussell</code>，修改为 &ldquo;pygmalion&rdquo;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 编辑配置文件</span>
</span></span><span class="line"><span class="cl">vim ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="c1"># 找到 ZSH_THEME 字段</span>
</span></span><span class="line"><span class="cl"><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&#34;robbyrussell&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将 robbyrussell 改为 ys 即可</span>
</span></span><span class="line"><span class="cl"><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&#34;pygmalion&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使配置文件生效</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><p>接下来安装几个 Zshell + oh-my-zsh 的增强插件</p>
<h4 id="zsh-z">zsh-z</h4>
<p><a href="https://github.com/agkozak/zsh-z#known-bugs">zsh-z</a> 快速跳转到经常访问的目录，是 <a href="https://github.com/rupa/z">rupa/z</a> 的原生 Zshell 端口，具有附加功能</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 源码安装</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/agkozak/zsh-z <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/zsh-z
</span></span><span class="line"><span class="cl"><span class="c1"># 编辑配置文件</span>
</span></span><span class="line"><span class="cl">vim ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="c1"># 找到 plugins 字段，加入 zsh-autosuggestions</span>
</span></span><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>git zsh-z<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 配置文件生效</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h4 id="zsh-autosuggestions">zsh-autosuggestions</h4>
<p><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a> 可以根据历史记录对输入进行提示和建议</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 源码安装</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/zsh-users/zsh-autosuggestions <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/zsh-autosuggestions
</span></span><span class="line"><span class="cl"><span class="c1"># 编辑配置文件</span>
</span></span><span class="line"><span class="cl">vim ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="c1"># 找到 plugins 字段，加入 zsh-autosuggestions</span>
</span></span><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>git zsh-z zsh-autosuggestions<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 配置文件生效</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h4 id="zsh-syntax-highlighting">zsh-syntax-highlighting</h4>
<p><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a> 可以对 Shell 中的命令进行高亮显示</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/zsh-syntax-highlighting
</span></span></code></pre></div><p>修改 .zshrc ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>git mvn zsh-z zsh-autosuggestions zsh-syntax-highlighting<span class="o">)</span>
</span></span></code></pre></div><h2 id="git">Git</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install git
</span></span></code></pre></div><p>查看git命令位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">which git
</span></span></code></pre></div><p>配置用户名和邮箱：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;Your Name Here&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email <span class="s2">&#34;your_email@youremail.com&#34;</span>
</span></span></code></pre></div><ul>
<li>这些配置会加到 ~/.gitconfig</li>
</ul>
<p>为了将代码推送到 GitHub 仓库，建议使用HTTPS方法。如果你不想每次都输入用户名和密码的话，可以按照此 <a href="https://help.github.com/articles/set-up-git">描述</a> 说的那样，运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global credential.helper osxkeychain
</span></span></code></pre></div><p>设置默认分支名称为main：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global init.defaultBranch main
</span></span></code></pre></div><p>配置ssh秘钥：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-keygen -t rsa -C <span class="s2">&#34;your_email@example.com&#34;</span>
</span></span></code></pre></div><p>添加 SSH 公钥到 ssh-agent ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">ssh-add -K ~/.ssh/id_rsa
</span></span></code></pre></div><p>添加SSH 公钥到 GitHub 账户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pbcopy &lt; ~/.ssh/id_rsa.pub
</span></span></code></pre></div><p>打开 <a href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a>，然后添加。</p>
<p>macOS 的 Finder 会在目录下生成一些隐藏文件（如 <code>.DS_Store</code>），我们可以使用 GitHub 维护的 macOS <code>.gitignore</code> 模板，并让它对当前用户所有的 Git 存储库都生效</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl https://raw.githubusercontent.com/github/gitignore/master/Global/macOS.gitignore -o ~/.gitignore
</span></span><span class="line"><span class="cl"><span class="c1"># 附加到全局 .gitignore 文件</span>
</span></span><span class="line"><span class="cl">git config --global core.excludesfile ~/.gitignore
</span></span></code></pre></div><h2 id="java">Java</h2>
<p>下载 Oracle JDK：</p>
<ul>
<li><a href="http://support.apple.com/downloads/DL1572/en_US/JavaForOSX2013-05.dmg">jdk6</a></li>
<li><a href="http://download.oracle.com/otn-pub/java/jdk/7u60-b19/jdk-7u60-macosx-x64.dmg">jdk7</a></li>
</ul>
<p>设置 java_home 为 1.8:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;export JAVA_HOME=$(/usr/libexec/java_home -v 1.8) &#39;</span> &gt;&gt; ~/.zshrc
</span></span></code></pre></div><p>安装OpenJDK：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install openjdk
</span></span></code></pre></div><h3 id="sdkman">SDKMAN</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> curl -s <span class="s2">&#34;https://get.sdkman.io&#34;</span> <span class="p">|</span> bash
</span></span></code></pre></div><p>安装complete：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.sdkman/bin/sdkman-init.sh&#34;</span>
</span></span></code></pre></div><p>查看版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sdk version
</span></span></code></pre></div><p>使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#安装jdk</span>
</span></span><span class="line"><span class="cl">sdk install java
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#安装scala</span>
</span></span><span class="line"><span class="cl">sdk install scala 2.12.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#卸载</span>
</span></span><span class="line"><span class="cl">sdk uninstall scala 2.11.6
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#查看</span>
</span></span><span class="line"><span class="cl">sdk list
</span></span></code></pre></div><h3 id="maven">Maven</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install maven
</span></span></code></pre></div><h2 id="nodejs">Node.js</h2>
<p>安装node：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install node
</span></span></code></pre></div><h3 id="nvs">nvs</h3>
<p>Linux / macOS 环境通过 Git Clone 对应的项目即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">export</span> <span class="nv">NVS_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.nvs&#34;</span>
</span></span><span class="line"><span class="cl">$ git clone https://github.com/jasongin/nvs --depth<span class="o">=</span><span class="m">1</span> <span class="s2">&#34;</span><span class="nv">$NVS_HOME</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">$ . <span class="s2">&#34;</span><span class="nv">$NVS_HOME</span><span class="s2">/nvs.sh&#34;</span> install
</span></span></code></pre></div><p>在国内由于大家都懂的原因，需要把对应的镜像地址修改下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ nvs remote node https://npm.taobao.org/mirrors/node/
</span></span><span class="line"><span class="cl">$ nvs remote
</span></span></code></pre></div><p>通过以下命令，即可非常简单的安装 Node.js 最新的 LTS 版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装最新的 LTS 版本</span>
</span></span><span class="line"><span class="cl">$ nvs add lts
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置为默认版本</span>
</span></span><span class="line"><span class="cl">$ nvs link lts
</span></span></code></pre></div><p>安装其他版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装其他版本尝尝鲜</span>
</span></span><span class="line"><span class="cl">$ nvs add <span class="m">12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看已安装的版本</span>
</span></span><span class="line"><span class="cl">$ nvs ls
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在当前 Shell 切换版本</span>
</span></span><span class="line"><span class="cl">$ nvs use <span class="m">12</span>
</span></span></code></pre></div><p>更多指令参见 <code>nvs --help</code> 。</p>
<h2 id="go">Go</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install go
</span></span></code></pre></div><p>设置环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;export GOPATH=</span><span class="nv">$HOME</span><span class="s2">/workspace/goProjects&#34;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;export GOBIN=</span><span class="nv">$GOPATH</span><span class="s2">/bin&#34;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;export PATH=</span><span class="nv">$GOPATH</span><span class="s2">:</span><span class="nv">$GOBIN</span><span class="s2">:</span><span class="nv">$PATH</span><span class="s2">&#34;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h2 id="python">Python</h2>
<p>MacOS 上通过 brew 安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install python3
</span></span></code></pre></div><p>查看 python3 安装路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ which python3
</span></span><span class="line"><span class="cl">/opt/homebrew/bin/python3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="nb">type</span> python3
</span></span><span class="line"><span class="cl">python3 is /opt/homebrew/bin/python3
</span></span></code></pre></div><p>查看版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python --version
</span></span></code></pre></div><p>修改 ~/.zshrc，设置环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PYTHON_HOME</span><span class="o">=</span>/opt/homebrew/opt/python@3.11
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PYTHON_HOME</span>/bin:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">python</span><span class="o">=</span>python3
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">pip</span><span class="o">=</span>pip3
</span></span></code></pre></div><p>使配置生效：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="https://sourabhbajaj.com/mac-setup/">https://sourabhbajaj.com/mac-setup/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始搭建个人博客</title>
      <link>https://blog.chensoul.com/posts/2021/09/09/build-personal-blog-from-zero/</link>
      <pubDate>Thu, 09 Sep 2021 18:14:34 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2021/09/09/build-personal-blog-from-zero/</guid>
      <description>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。 域名 搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科</description>
      <content:encoded><![CDATA[<p>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。</p>
<h2 id="域名">域名</h2>
<p>搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科上的解释：</p>
<blockquote>
<p><strong>域名</strong>（英语：<strong>Domain Name</strong>），又称<strong>网域</strong>，是由一串用点分隔的名字组成的<a href="https://baike.baidu.com/item/Internet">Internet</a>上某一台<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。</p>
<p>由于<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80/150859">IP地址</a>具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（<a href="https://baike.baidu.com/item/DNS">DNS</a>，Domain Name System）来将域名和<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>相互<a href="https://baike.baidu.com/item/%E6%98%A0%E5%B0%84/20402621">映射</a>，使人更方便地访问<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91/199186">互联网</a>，而不用去记住能够被机器直接读取的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>数串。</p>
</blockquote>
<p>简单来说，IP地址可以标识一台计算机，但是不容易记忆，所以，设计出了域名。而域名就是标识因特网上的一台计算机，由网域名称系统DNS来完成域名和IP之间的映射。</p>
<p>如何注册域名？有很多网站提供域名注册服务，比如国内的：</p>
<ul>
<li><a href="https://www.alibabacloud.com/zh/domain">阿里云</a></li>
<li><a href="https://cloud.tencent.com/act/domainsales">腾讯云</a></li>
<li><a href="https://www.huaweicloud.com/">华为云</a></li>
</ul>
<p>国外的：</p>
<ul>
<li><a href="https://sg.godaddy.com/zh/offers/domain">GoDaddy</a></li>
<li><a href="https://www.namecheap.com/">Namecheap</a></li>
<li><a href="https://console.aws.amazon.com/route53/home?#DomainRegistration:">Amazon</a></li>
</ul>
<p>注册域名的建议：</p>
<ul>
<li>1、建议在正规、出名的网站注册域名，防止网站跑路。我曾经在一个小网站注册了一个域名，使用了几年之后，续期的时候，联系不上对方，导致无法使用该域名，甚至该域名被别人抢注册了。</li>
<li>2、在国内网站注册域名，都需要备案。如果不想备案，请在国外网站注册域名。我的域名 chensoul.com 就是在亚马逊上注册的。一是不想备案，二是对比了上面几个网站，发现亚马逊上的com域名价格相对便宜，所以一次性购买了5年。</li>
<li>3、建议优先注册com域名，域名尽可能的简短并且方便记忆。</li>
</ul>
<p>我曾经注册过的域名：</p>
<ul>
<li>javachen.com、javachen.space、javachen.xyz</li>
<li>huaiu.com</li>
</ul>
<h2 id="服务器">服务器</h2>
<p>注册了域名之后，需要一台服务器运行程序。服务器可以是一台物理机，比如你可以使用自己的电脑作为服务器；也可以是一台虚拟的云服务器，比如在云服务提供商购买一台独立的服务器；也可以使用第三方提供的服务器空间，比如Github上可以部署静态程序。不管哪种方式，服务器都需要有一个公网IP，这样才能在因特网上访问你服务器上部署的程序。有了服务器之后，就可以给服务器公网IP设置域名解析。</p>
<p>我的服务器是在<a href="https://bandwagonhost.com/aff.php?aff=58710">搬瓦工</a>购买的，一年49.99美元。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/bwg-plan.png" alt="bwg-plan"  />
</p>
<h2 id="程序">程序</h2>
<h3 id="安装hugo">安装Hugo</h3>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/hugo-logo.svg" alt="使用 Hugo 搭建博客"  />
</p>
<p>在 Mac 下安装 Hugo：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install hugo
</span></span></code></pre></div><h3 id="新建站点">新建站点</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo new site chensoul.github.io -y yaml
</span></span></code></pre></div><p>上述命令会生成一个名为 <code>chensoul.github.io</code> 的文件夹，下面对文件夹结构做个说明：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree chensoul.github.io
</span></span><span class="line"><span class="cl">chensoul.github.io
</span></span><span class="line"><span class="cl">├── archetypes
</span></span><span class="line"><span class="cl">│   └── default.md
</span></span><span class="line"><span class="cl">├── config.yaml
</span></span><span class="line"><span class="cl">├── content
</span></span><span class="line"><span class="cl">├── data
</span></span><span class="line"><span class="cl">├── layouts
</span></span><span class="line"><span class="cl">├── static
</span></span><span class="line"><span class="cl">└── themes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">6</span> directories, <span class="m">2</span> files
</span></span></code></pre></div><p>新建的站点，还没有加入 Git 版本管理，进入到这个目录下，执行一下如下命令，完成 Git Repo 的初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> chensoul.github.io
</span></span><span class="line"><span class="cl">git init .
</span></span></code></pre></div><p>新建站点后，我们开始添加主题。</p>
<h3 id="添加主题">添加主题</h3>
<p>在 Hugo 的官网上 <a href="https://themes.gohugo.io/">Hugo Themes</a> 有非常非常多的主题，可以根据自己的喜好选择一个主题。这里，我使用的是 hugo-theme-den 主题。</p>
<p>使用 git submodule&ndash;helper 下载主题到 theme 目录下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git submodule--helper add https://github.com/shaform/hugo-theme-den themes/den --depth<span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git submodule--helper update --init --recursive <span class="c1"># needed when you reclone your repo (submodules may not get cloned automatically)</span>
</span></span></code></pre></div><p>以后，当主题有更新时，执行下面命令更新：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule update --remote --merge
</span></span></code></pre></div><p>如果遇到异常，可以参考<a href="https://xuzhijvn.github.io/zh-cn/posts/other/git-submodule-update-init-recursive/">文章</a>解决。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">fatal: remote error: upload-pack: not our ref fc7223ca00124e8f5b5b354457379071e2fd091b
</span></span></code></pre></div><h3 id="启动">启动</h3>
<p>启动预览：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo server
</span></span></code></pre></div><p>默认是 <code>1313</code> 端口号，在浏览器中直接访问 http://localhost:1313/ 就可以访问到新建的博客了。</p>
<h2 id="定制化">定制化</h2>
<h3 id="站点信息">站点信息</h3>
<p>配置网站的基本信息，将 config.yaml 修改如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">baseURL: https://blog.chensoul.com/
</span></span><span class="line"><span class="cl">title: ChenSoul
</span></span><span class="line"><span class="cl">theme: den
</span></span><span class="line"><span class="cl">enableRobotsTXT: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">enableEmoji: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">hasCJKLanguage: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">preserveTaxonomyNames: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">rssLimit: <span class="m">100</span>
</span></span><span class="line"><span class="cl">page_view_conter: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">enableRelated: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Copyright, appears in the footer</span>
</span></span><span class="line"><span class="cl"><span class="c1"># copyright = &#34;&#34;             # default: author.name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Pagination</span>
</span></span><span class="line"><span class="cl"><span class="c1"># number of entries per page for archives, tags and categories</span>
</span></span><span class="line"><span class="cl"><span class="c1"># since we don&#39;t have list view, recommend a large value</span>
</span></span><span class="line"><span class="cl">paginate: <span class="m">20</span>
</span></span><span class="line"><span class="cl">paginatePath: <span class="s2">&#34;page&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Syntax Hightlight</span>
</span></span><span class="line"><span class="cl">PygmentsCodeFences: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">PygmentsUseClasses: <span class="nb">true</span>    <span class="c1"># required for shhighlight shortcode</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># service plugins</span>
</span></span><span class="line"><span class="cl">disqusShortname: <span class="s2">&#34;&#34;</span>         <span class="c1"># disqus_shortname</span>
</span></span><span class="line"><span class="cl">googleAnalytics: <span class="s2">&#34;&#34;</span>         <span class="c1"># UA-XXXXXXXX-X</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># language support # en / zh / other... translations present in i18n/</span>
</span></span><span class="line"><span class="cl">defaultContentLanguage: <span class="s2">&#34;zh&#34;</span>           <span class="c1"># Default language to use</span>
</span></span><span class="line"><span class="cl">defaultContentLanguageInSubdir: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">permalinks:
</span></span><span class="line"><span class="cl">  posts: /posts/:slug/
</span></span><span class="line"><span class="cl">  categories: /categories/:slug/
</span></span><span class="line"><span class="cl">  tags: /tags/:slug/
</span></span><span class="line"><span class="cl">  pages: /:slug/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">author:
</span></span><span class="line"><span class="cl">  name: chensoul
</span></span><span class="line"><span class="cl">sitemap:
</span></span><span class="line"><span class="cl">  changefreq: weekly
</span></span><span class="line"><span class="cl">  priority: 0.5
</span></span><span class="line"><span class="cl">  filename: sitemap.xml
</span></span><span class="line"><span class="cl">params:
</span></span><span class="line"><span class="cl">  since: <span class="s2">&#34;2020&#34;</span>
</span></span><span class="line"><span class="cl">  rssFullContent: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">  keywords:
</span></span><span class="line"><span class="cl">    - devops
</span></span><span class="line"><span class="cl">    - programming
</span></span><span class="line"><span class="cl">  description: Programming <span class="p">|</span> Devops
</span></span><span class="line"><span class="cl">  logoTitle: ChenSoul
</span></span><span class="line"><span class="cl">  siteLogoImage: images/fly.png
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># headerTitle = &#34;chensoul&#34;                   # default: title</span>
</span></span><span class="line"><span class="cl">  headerImage: images/background.webp
</span></span><span class="line"><span class="cl">  showAuthorCard: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">  showMenuLanguages: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">  autoLoadComments: <span class="nb">false</span>
</span></span><span class="line"><span class="cl">  paginateOriginalStyle: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># The date format to use; for a list of valid formats, see https://gohugo.io/functions/format/</span>
</span></span><span class="line"><span class="cl">  dateFormatToUse: 2006-01-02
</span></span><span class="line"><span class="cl">  google_verification: <span class="s2">&#34;D8XBzUhT4irNUQLKut79HFni0v3Xow4FY-oxUcsUlVk&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Link custom CSS and JS assets</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   (relative to /static/css and /static/js respectively)</span>
</span></span><span class="line"><span class="cl">  customCSS: <span class="o">[]</span>
</span></span><span class="line"><span class="cl">  customJS: <span class="o">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">markup:
</span></span><span class="line"><span class="cl">  goldmark:
</span></span><span class="line"><span class="cl">    renderer:
</span></span><span class="line"><span class="cl">      unsafe: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ------------------------------------- #</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ---- Related Articles --------------- #</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ------------------------------------- #</span>
</span></span><span class="line"><span class="cl">related:
</span></span><span class="line"><span class="cl">  <span class="c1"># Only include matches with rank &gt;= threshold. This is a normalized rank between 0 and 100.</span>
</span></span><span class="line"><span class="cl">  threshold: <span class="m">50</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># To get stable &#34;See also&#34; sections we, by default, exclude newer related pages.</span>
</span></span><span class="line"><span class="cl">  includeNewer: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Will lower case keywords in both queries and in the indexes.</span>
</span></span><span class="line"><span class="cl">  toLower: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  indices:
</span></span><span class="line"><span class="cl">    - name: categories
</span></span><span class="line"><span class="cl">      weight: <span class="m">200</span>
</span></span><span class="line"><span class="cl">    - name: keywords
</span></span><span class="line"><span class="cl">      weight: <span class="m">150</span>
</span></span><span class="line"><span class="cl">    - name: tags
</span></span><span class="line"><span class="cl">      weight: <span class="m">100</span>
</span></span><span class="line"><span class="cl">languages:
</span></span><span class="line"><span class="cl">  zh:
</span></span><span class="line"><span class="cl">    languageCode: zh
</span></span><span class="line"><span class="cl">    languageName: 中文
</span></span><span class="line"><span class="cl">    contentDir: content
</span></span><span class="line"><span class="cl">    weight: <span class="m">1</span>
</span></span><span class="line"><span class="cl">    params:
</span></span><span class="line"><span class="cl">      description: Devops <span class="p">|</span> Programming
</span></span><span class="line"><span class="cl">    menu:
</span></span><span class="line"><span class="cl">      main:
</span></span><span class="line"><span class="cl">        - name: 思考
</span></span><span class="line"><span class="cl">          weight: <span class="m">10</span>
</span></span><span class="line"><span class="cl">          identifier: idea
</span></span><span class="line"><span class="cl">          url: categories/idea/
</span></span><span class="line"><span class="cl">      social:
</span></span><span class="line"><span class="cl">        - name: Telegram
</span></span><span class="line"><span class="cl">          weight: <span class="m">10</span>
</span></span><span class="line"><span class="cl">          identifier: telegram
</span></span><span class="line"><span class="cl">          url: https://t.me/chensoul_share
</span></span><span class="line"><span class="cl">        - name: Twitter
</span></span><span class="line"><span class="cl">          weight: <span class="m">20</span>
</span></span><span class="line"><span class="cl">          identifier: twitter
</span></span><span class="line"><span class="cl">          url: https://twitter.com/chensoul_eth
</span></span><span class="line"><span class="cl">        - name: BiliBili
</span></span><span class="line"><span class="cl">          weight: <span class="m">40</span>
</span></span><span class="line"><span class="cl">          identifier: bilibili
</span></span><span class="line"><span class="cl">          url: https://space.bilibili.com/699805065/
</span></span><span class="line"><span class="cl">      links:
</span></span><span class="line"><span class="cl">        - name: GitHub
</span></span><span class="line"><span class="cl">          weight: <span class="m">10</span>
</span></span><span class="line"><span class="cl">          identifier: github
</span></span><span class="line"><span class="cl">          url: https://github.com/chensoul
</span></span><span class="line"><span class="cl">        - name: Services
</span></span><span class="line"><span class="cl">          weight: <span class="m">20</span>
</span></span><span class="line"><span class="cl">          identifier: services-status
</span></span><span class="line"><span class="cl">          url: https://uptime.chensoul.com/status/services
</span></span><span class="line"><span class="cl">        - name: Analytics
</span></span><span class="line"><span class="cl">          weight: <span class="m">30</span>
</span></span><span class="line"><span class="cl">          identifier: chensoul-analytics
</span></span><span class="line"><span class="cl">          url: https://data.chensoul.com/share/8YKX7FUa/pseudoyu-blog
</span></span></code></pre></div><h2 id="部署">部署</h2>
<h3 id="github-actions部署">GitHub Actions部署</h3>
<p><strong>1、首先在github里创建一个仓库：chensoul.github.io</strong></p>
<p><strong>2、将本地文件提交到github</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> chensoul.github.io
</span></span><span class="line"><span class="cl">git init .
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;# chensoul.github.io&#34;</span> &gt;&gt; README.md
</span></span><span class="line"><span class="cl">git remote add origin git@github.com:chensoul/chensoul.github.io.git
</span></span></code></pre></div><p><strong>3、将本地代码推送到仓库</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git commit -m <span class="s2">&#34;first commit&#34;</span>
</span></span><span class="line"><span class="cl">git push -u origin main
</span></span></code></pre></div><p><strong>4、创建 GitHub Actions 的 workflow</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p .github/workflows
</span></span><span class="line"><span class="cl">touch .github/workflows/gh-page.yml
</span></span></code></pre></div><p>gh-page.yml内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">timeout-minutes</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="l">latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_branch</span><span class="p">:</span><span class="w"> </span><span class="l">gh-pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span></code></pre></div><p>上面的工作流是在 gh-pages 分支上触发，当有代码提交时候，会运行 hugo 命令生成静态文件（public目录），并且将他们推送到main分支。</p>
<p>所以，我们需要基于当前分支创建一个新分支 gh-pages ，并且推送到远程仓库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch gh-pages
</span></span><span class="line"><span class="cl">git checkout gh-pages
</span></span><span class="line"><span class="cl">git push origin gh-pages
</span></span></code></pre></div><p><strong>5、修改代码，推送到仓库，触发工作流</strong></p>
<p>在本地修改某个文件，提交代码，然后在 github <a href="https://github.com/chensoul/chensoul.github.io/actions">网站</a> 查看工作流</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git push origin gh-pages
</span></span></code></pre></div><p><strong>7、设置自定义域名</strong></p>
<p>参考<a href="https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-a-subdomain">管理 GitHub Pages 站点的自定义域</a>，添加一个自定义域名：blog.chensoul.com：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/github-page-settings.png" alt="github-page-settings"  />
</p>
<p>或者，在仓库的 static 目录创建一个CNAME文件，内容为：blog.chensoul.com，然后，保存提交，Github Actions会将该文件推送到main分支。</p>
<p>然后，在亚马逊网站添加 <a href="https://console.aws.amazon.com/route53/v2/hostedzones#">CNAME记录</a>：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/amazon-dns-settings.png" alt="amazon-dns-settings"  />
</p>
<p>8、部署到 CloudFlare Pages</p>
<p>参考 <a href="https://hee.ink/p/%E4%BB%8E-github-pages-%E8%BF%81%E7%A7%BB%E5%88%B0-cloudflare-pages-%E7%9A%84%E4%BD%93%E9%AA%8C%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%B0%8F%E8%AE%B0/">从 GitHub Pages 迁移到 CloudFlare Pages 的体验与踩坑小记</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
