<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Other on ChenSoul</title>
    <link>https://blog.chensoul.cc/categories/other/</link>
    <description>Recent content in Other on ChenSoul</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 19 Aug 2022 12:15:54 +0800</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/categories/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>博客中如何使用图床服务</title>
      <link>https://blog.chensoul.cc/posts/2022/08/19/using-images-in-blog/</link>
      <pubDate>Fri, 19 Aug 2022 12:15:54 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2022/08/19/using-images-in-blog/</guid>
      <description>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。
喜欢 Typora 的理由：
所见即所得的编辑，Markdown 的语法都支持快捷键操作，非常方便
可以自定义主题的 CSS，包括文章内容就可以粘贴到公众号里
上传图片，支持图床服务。可以将图片上传到指定的图床，前提是需要先安装一个客户端，这里我使用的是 PicGo。然后，PicGo 支持常见的一些图床服务。
支持导出
Typora 图片复制到本地 接下来，聊聊 Typora 的图片上传设置：
当你插入图片时，你可以分情况对图片进行设置。比如：
1、对本地位置的图片，可以设置一个上传规则：复制到指定路径或者是当前路径下的一个文件夹、上传图片。
如果是编写一个文档，我们就设置把图片保存到本地的 assets 文件夹内，这样方便管理。 如果是编写博客，图片一般是集中管理的，我们可以设置复制到一个指定路径 2、类似的，对网络位置的图片也可以使用上面的规则。
注意，如果将图片保存到本地目录，在文章中引用图片是使用的相对或者绝对路径。如果只是在本地查看，是可以预览图片的。但是，如果将博客上传到服务器，则因为路径问题可能会出现无法预览图片的情况。
所以，这种情况我们需要做一些修改。通常我会设置图片复制到博客的静态页面目录下面，比如，我现在使用的是 Hugo 构建静态博客，会将图片保存到 static/img 目录下，并且，还需要修改图片的 markdown 引用路径为 /images/image-20220819124422239.png ，以表示绝对路径查找图片，在博客服务器上就是相对根域名目录去 img 路径下查找图片。待 hugo 编译完成上传静态文件到服务器之后，可以通过 https://blog.chensoul.cc/images/ 加上图片名称的方式访问到图片。
但是，显然，这时候在 Typora 是无法预览图片的，因为在本地查找不到这个绝对路径地址。这时候可以在 Typora 里面设置一个绝对路径，操作方法是，在 显示 -&amp;gt; 图片 -&amp;gt; 图像 -&amp;gt; 设置图片根目录 里进行设置。
设置完成之后，在当前文件的 md 文件的顶部元数据代码里会多一行代码：
title: &amp;#34;博客中如何使用图床服务&amp;#34; date: 2022-08-19T12:15:54+08:00 slug: using-images-in-blog categories: [日志] tags: [hugo] draft: true typora-root-url: ../../static 这样博客里所有的图片都会保存的博客服务器，如果博客访问量增大，则图片加载时间会变慢。为了解决这个问题，需要将图片进行压缩，并给博客设置 CDN 加速。
Typora 图片上传到网络 将图片保存到本地，待博客静态页面部署到服务器上之后，可以实现正常预览情况。但是，如果我们想把 md 文件打包上传到一些云笔记，比如：语雀，你会发现上传之后会出现图片无法预览的情况。
这时候，我们需要将图片上传到网络。首先，我们需要安装 PicGo，然后设置图床服务，这里我使用的是 github 作为图床来保存图片，并使用 jsDelivr 的 CDN 服务进行加速访问。
如何利用 Github 搭建自己的免费图床？可以参考这篇 文章。这里，记录一下我的操作步骤。
1、使用博客的托管仓库 的 static/img 目录来保存图片，这样方便图片的管理（比如：压缩、重命名，删除无用图片），如果图床服务不可用了，所有博客图片还有一个备份，只需要修改博客内图片的引用地址。前提是需要将仓库设置为 public。
2、在 github 设置里面创建一个 Token。以此打开 Settings -&amp;gt; Developer settings -&amp;gt; Personal access tokens，最后点击 generate new token</description>
    </item>
    <item>
      <title>从零开始搭建个人博客</title>
      <link>https://blog.chensoul.cc/posts/2021/09/09/build-personal-blog-from-zero/</link>
      <pubDate>Thu, 09 Sep 2021 18:14:34 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2021/09/09/build-personal-blog-from-zero/</guid>
      <description>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。
域名 搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科上的解释：
域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。
由于IP 地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP 地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP 地址数串。
简单来说，IP 地址可以标识一台计算机，但是不容易记忆，所以，设计出了域名。而域名就是标识因特网上的一台计算机，由网域名称系统 DNS 来完成域名和 IP 之间的映射。
如何注册域名？有很多网站提供域名注册服务，比如国内的：
阿里云 腾讯云 华为云 国外的：
GoDaddy Namecheap Amazon 注册域名的建议：
1、建议在正规、出名的网站注册域名，防止网站跑路。我曾经在一个小网站注册了一个域名，使用了几年之后，续期的时候，联系不上对方，导致无法使用该域名，甚至该域名被别人抢注册了。 2、在国内网站注册域名，都需要备案。如果不想备案，请在国外网站注册域名。我的域名 chensoul.cc 就是在亚马逊上注册的。一是不想备案，二是对比了上面几个网站，发现亚马逊上的 com 域名价格相对便宜，所以一次性购买了 5 年。 3、建议优先注册 com 域名，域名尽可能的简短并且方便记忆。 我曾经注册过的域名：
javachen.com、javachen.space、javachen.xyz huaiu.com 服务器 注册了域名之后，需要一台服务器运行程序。服务器可以是一台物理机，比如你可以使用自己的电脑作为服务器；也可以是一台虚拟的云服务器，比如在云服务提供商购买一台独立的服务器；也可以使用第三方提供的服务器空间，比如 Github 上可以部署静态程序。不管哪种方式，服务器都需要有一个公网 IP，这样才能在因特网上访问你服务器上部署的程序。有了服务器之后，就可以给服务器公网 IP 设置域名解析。
我的服务器是在搬瓦工购买的，一年 49.99 美元。
程序 安装 Hugo 在 Mac 下安装 Hugo：
brew install hugo 新建站点 hugo new site chensoul.github.io -y yaml 上述命令会生成一个名为 chensoul.github.io 的文件夹，下面对文件夹结构做个说明：
$ tree chensoul.github.io chensoul.github.io ├── archetypes │ └── default.md ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes 6 directories, 2 files 新建的站点，还没有加入 Git 版本管理，进入到这个目录下，执行一下如下命令，完成 Git Repo 的初始化：</description>
    </item>
  </channel>
</rss>
