<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Other on ChenSoul</title>
    <link>https://blog.chensoul.com/categories/other/</link>
    <description>Recent content in Other on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 12 Oct 2023 13:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.com/categories/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译]关于 HTTP 您需要了解的一切</title>
      <link>https://blog.chensoul.com/posts/2023/10/12/http-in-depth/</link>
      <pubDate>Thu, 12 Oct 2023 13:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/10/12/http-in-depth/</guid>
      <description>HTTP 是每个 Web 开发人员都应该了解的协议，因为它为整个 Web 提供动力。了解 HTTP 当然可以帮助您开发更好的应用程序。
在本文中，我将讨论 HTTP 是什么、它是如何产生的、它今天的状况以及我们是如何走到这一步的
什么是 HTTP？ 首先，什么是 HTTP？ HTTP 是基于 TCP/IP 的应用层通信协议，它标准化了客户端和服务器之间的通信方式。它定义了如何通过互联网请求和传输内容。通过应用层协议，我的意思是它只是一个标准化主机（客户端和服务器）通信方式的抽象层。 HTTP 本身依赖于 TCP/IP 来获取客户端和服务器之间的请求和响应。
默认情况下，使用 TCP 端口 80，但也可以使用其他端口。然而，HTTPS 使用端口 443。
HTTP/0.9 - One Liner (1991) HTTP 的第一个有记录的版本是 1991 年提出的 HTTP/0.9。它是有史以来最简单的协议；有一个名为 GET 的方法。如果客户端必须访问服务器上的某个网页，它会发出如下所示的简单请求
GET /index.html 服务器的响应如下所示
(response body) (connection closed) 也就是说，服务器将收到请求，回复 HTML 作为响应，一旦内容传输完毕，连接就会关闭。有
无标题 GET 是唯一允许的方法 响应必须是 HTML 正如您所看到的，该协议实际上只不过是未来的踏脚石。
HTTP/1.0 - 1996 1996 年，HTTP 的下一个版本（即 HTTP/1.0）得到了发展，比原始版本有了很大的改进。与仅针对 HTML 响应设计的 HTTP/0.9 不同，HTTP/1.0 现在也可以处理其他响应格式，即图像、视频文件、纯文本或任何其他内容类型。它添加了更多方法（即 POST 和 HEAD）、更改了请求/响应格式、将 HTTP 标头添加到请求和响应中、添加了状态代码来标识响应、引入了字符集支持、多部分类型、授权、缓存、内容编码等都包括在内。</description>
      <content:encoded><![CDATA[<p>HTTP 是每个 Web 开发人员都应该了解的协议，因为它为整个 Web 提供动力。了解 HTTP 当然可以帮助您开发更好的应用程序。</p>
<p>在本文中，我将讨论 HTTP 是什么、它是如何产生的、它今天的状况以及我们是如何走到这一步的</p>
<h2 id="什么是-http">什么是 HTTP？</h2>
<p>首先，什么是 HTTP？ HTTP 是基于 TCP/IP 的应用层通信协议，它标准化了客户端和服务器之间的通信方式。它定义了如何通过互联网请求和传输内容。通过应用层协议，我的意思是它只是一个标准化主机（客户端和服务器）通信方式的抽象层。 HTTP 本身依赖于 TCP/IP 来获取客户端和服务器之间的请求和响应。</p>
<p>默认情况下，使用 TCP 端口 80，但也可以使用其他端口。然而，HTTPS 使用端口 443。</p>
<h2 id="http09---one-liner-1991">HTTP/0.9 - One Liner (1991)</h2>
<p>HTTP 的第一个有记录的版本是 1991 年提出的 <a href="HTTP/0.9">HTTP/0.9</a>。它是有史以来最简单的协议；有一个名为 GET 的方法。如果客户端必须访问服务器上的某个网页，它会发出如下所示的简单请求</p>
<pre tabindex="0"><code>GET /index.html
</code></pre><p>服务器的响应如下所示</p>
<pre tabindex="0"><code>(response body)
(connection closed)
</code></pre><p>也就是说，服务器将收到请求，回复 HTML 作为响应，一旦内容传输完毕，连接就会关闭。有</p>
<ul>
<li>无标题</li>
<li><code>GET</code> 是唯一允许的方法</li>
<li>响应必须是 HTML</li>
</ul>
<p>正如您所看到的，该协议实际上只不过是未来的踏脚石。</p>
<h2 id="http10---1996">HTTP/1.0 - 1996</h2>
<p>1996 年，HTTP 的下一个版本（即 HTTP/1.0）得到了发展，比原始版本有了很大的改进。与仅针对 HTML 响应设计的 HTTP/0.9 不同，HTTP/1.0 现在也可以处理其他响应格式，即图像、视频文件、纯文本或任何其他内容类型。它添加了更多方法（即 POST 和 HEAD）、更改了请求/响应格式、将 HTTP 标头添加到请求和响应中、添加了状态代码来标识响应、引入了字符集支持、多部分类型、授权、缓存、内容编码等都包括在内。</p>
<p>以下是示例 HTTP/1.0 请求和响应的样子：</p>
<pre tabindex="0"><code>GET / HTTP/1.0
Host: cs.fyi
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)
Accept: */*
</code></pre><p>正如您所看到的，除了请求之外，客户端还发送了它的个人信息、所需的响应类型等。而在 HTTP/0.9 中，客户端永远无法发送此类信息，因为没有标头。</p>
<p>对上述请求的响应示例可能如下所示</p>
<pre tabindex="0"><code>HTTP/1.0 200 OK
Content-Type: text/plain
Content-Length: 137582
Expires: Thu, 05 Dec 1997 16:00:00 GMT
Last-Modified: Wed, 5 August 1996 15:55:28 GMT
Server: Apache 0.84

(response body)
(connection closed)
</code></pre><p>响应的开头是 HTTP/1.0（HTTP 后跟版本号），然后是状态代码 200，后跟原因短语（或者状态代码的描述，如果您愿意的话）。</p>
<p>在此较新版本中，请求和响应标头仍保留为 ASCII 编码，但响应正文可以是任何类型，即图像、视频、HTML、纯文本或任何其他内容类型。因此，现在服务器可以向客户端发送任何内容类型；推出后不久，HTTP 中的“超文本”一词就变得用词不当。 HMTP 或超媒体传输协议可能更有意义，但我想，我们终生都坚持这个名字。</p>
<p>HTTP/1.0 的主要缺点之一是每个连接不能有多个请求。也就是说，每当客户端需要从服务器获取某些内容时，它都必须打开一个新的 TCP 连接，并且在满足该单个请求后，连接将被关闭。对于任何下一个要求，都必须建立在新的连接上。为什么不好？</p>
<p>好吧，假设您访问的网页包含 10 个图像、5 个样式表和 5 个 JavaScript 文件，总共有 20 个项目需要在向该网页发出请求时获取。由于服务器在满足请求后立即关闭连接，因此将存在一系列 20 个单独的连接，其中每个项目都将在其单独的连接上一个接一个地提供服务。</p>
<p>如此大量的连接会导致严重的性能损失，因为由于三向握手和慢启动，需要新的 TCP 连接会造成显着的性能损失。</p>
<h3 id="三方握手">三方握手</h3>
<p>三向握手最简单的形式是，所有 TCP 连接都以三向握手开始，其中客户端和服务器在开始共享应用程序数据之前共享一系列数据包。</p>
<ul>
<li>SYN - 客户端选取一个随机数（假设为 x）并将其发送到服务器。</li>
<li>SYN ACK - 服务器通过将 ACK 数据包发送回客户端来确认请求，该数据包由随机数组成，假设服务器拾取 y 和数字 x+1，其中 x 是客户端发送的数字</li>
<li>ACK - 客户端递增从服务器接收到的数字 y，并发送回带有数字 y+1 的 ACK 数据包</li>
</ul>
<p>一旦三向握手完成，客户端和服务器之间的数据共享就可以开始。应该注意的是，客户端可以在发送最后一个 ACK​​ 数据包后立即开始发送应用程序数据，但服务器仍然必须等待收到 ACK 数据包才能满足请求。</p>
<p>
  <img loading="lazy" src="https://i.imgur.com/ohZthqB.png" alt="3 way handshake"  /></p>
<p>然而，HTTP/1.0 的一些实现试图通过引入一个名为 Connection: keep-alive 的新标头来克服这个问题，该标头旨在告诉服务器“嘿服务器，不要关闭此连接，我再次需要它”。但它仍然没有得到广泛的支持，问题仍然存在。</p>
<p>除了无连接之外，HTTP 也是一种无状态协议，即服务器不维护有关客户端的信息，因此每个请求都必须具有服务器自己完成请求所需的信息，而不与任何旧协议有任何关联。要求。因此，这火上浇油，即除了客户端必须打开大量连接之外，它还必须在线路上发送一些冗余数据，从而导致带宽使用量增加。</p>
<h2 id="http11---1997">HTTP/1.1 - 1997</h2>
<p>HTTP/1.0 仅仅 3 年后，下一个版本即 HTTP/1.1 于 1999 年发布；比前身做了很多改进。相对于 HTTP/1.0 的主要改进包括</p>
<ul>
<li>
<p>添加了新的 HTTP 方法，其中引入了 PUT、PATCH、OPTIONS、DELETE</p>
</li>
<li>
<p>主机名标识 在 HTTP/1.0 中，主机标头不是必需的，但 HTTP/1.1 使其成为必需的。</p>
</li>
<li>
<p>持久连接 如上所述，在 HTTP/1.0 中，每个连接只有一个请求，一旦请求完成，连接就会关闭，这会导致严重的性能影响和延迟问题。 HTTP/1.1 引入了持久连接，即连接默认情况下不会关闭，而是保持打开状态，从而允许多个连续请求。要关闭连接，请求头 Connection: close 必须可用。</p>
<p>客户端通常在最后一个请求中发送此标头以安全地关闭连接。</p>
</li>
<li>
<p>管道化 它还引入了对管道化的支持，客户端可以在同一连接上向服务器发送多个请求，而无需等待服务器的响应，并且服务器必须按照接收请求的顺序发送响应。但是，您可能会问，客户端如何知道这是第一个响应下载完成并且下一个响应内容开始的点！</p>
<p>好吧，为了解决这个问题，必须存在 Content-Length 标头，客户端可以使用它来识别响应结束的位置，并且可以开始等待下一个响应。</p>
</li>
</ul>
<blockquote>
<p>应该注意的是，为了从持久连接或管道中受益，Content-Length 标头必须在响应上可用，因为这会让客户端知道传输何时完成并且可以发送下一个请求（以正常的顺序方式）发送请求）或开始等待下一个响应（当启用管道时）。</p>
<p>但这种方法仍然存在一个问题。也就是说，如果数据是动态的并且服务器无法事先找到内容长度怎么办？那么在这种情况下，您真的无法从持久连接中受益，不是吗？！为了解决这个问题，HTTP/1.1 引入了分块编码。在这种情况下，服务器可能会省略内容长度以支持分块编码（稍后会详细介绍）。但是，如果它们都不可用，则必须在请求结束时关闭连接。</p>
</blockquote>
<ul>
<li>
<p>分块传输 在动态内容的情况下，当服务器在传输开始时无法真正找出 Content-Length 时，它可能会开始分块（逐块）发送内容，并在发送时为每个块添加 Content-Length 。当所有块都发送完毕（即整个传输已完成）时，它会发送一个空块（即 Content-Length 设置为零的块），以便识别传输已完成的客户端。</p>
<p>为了通知客户端有关分块传输的信息，服务器包含标头 Transfer-Encoding: chunked</p>
</li>
<li>
<p>与仅具有基本身份验证的 HTTP/1.0 不同，HTTP/1.1 包括摘要和代理身份验证</p>
</li>
<li>
<p>缓存</p>
</li>
<li>
<p>字节范围</p>
</li>
<li>
<p>字符集</p>
</li>
<li>
<p>语言谈判</p>
</li>
<li>
<p>客户端 cookie</p>
</li>
<li>
<p>增强的压缩支持</p>
</li>
<li>
<p>新的状态代码</p>
</li>
<li>
<p>更多</p>
</li>
</ul>
<p>我不会在这篇文章中详细介绍 HTTP/1.1 的所有功能，因为它本身就是一个主题，您已经可以找到很多相关内容。我建议您阅读的这样一份文档是 HTTP/1.0 和 HTTP/1.1 之间的关键差异，这里是优秀者的原始 RFC 链接。</p>
<p>HTTP/1.1 于 1999 年推出，多年来一直是一个标准。尽管如此，它比它的前身有了很大的改进；随着网络每天都在变化，它开始显示出它的年龄。如今加载网页比以往更加消耗资源。如今，一个简单的网页必须打开 30 多个连接。那么 HTTP/1.1 有持久连接，那为什么有这么多连接呢？你说！原因是，在 HTTP/1.1 中，任何时刻只能有一个未完成的连接。</p>
<p>HTTP/1.1 试图通过引入管道来解决这个问题，但它并没有完全解决这个问题，因为队头阻塞，缓慢或繁重的请求可能会阻塞后面的请求，一旦请求卡在管道中，它就会被阻塞。必须等待下一个请求得到满足。</p>
<p>为了克服 HTTP/1.1 的这些缺点，开发人员开始实施解决方法，例如使用 spritesheet、CSS 中的编码图像、单个庞大的 CSS/Javascript 文件、域分片等。</p>
<h2 id="spdy-2009">SPDY-2009</h2>
<p>谷歌继续尝试替代协议，以提高网络速度并提高网络安全性，同时减少网页延迟。 2009 年，他们宣布了 SPDY。</p>
<blockquote>
<p>SPDY 是 Google 的商标，而不是缩写词。</p>
</blockquote>
<p>可以看出，如果我们不断增加带宽，网络性能一开始会有所提高，但到了某个阶段，性能增益就不会太大了。但如果你对延迟也采取同样的做法，即如果我们不断降低延迟，那么性能就会持续提升。这是 SPDY 背后性能增益的核心思想，减少延迟以提高网络性能。</p>
<blockquote>
<p>对于那些不知道区别的人来说，延迟是延迟，即数据在源和目的地之间传输所需的时间（以毫秒为单位），而带宽是每秒传输的数据量（每秒比特数）。</p>
</blockquote>
<p>SPDY 的功能包括多路复用、压缩、优先级、安全性等。我不打算详细介绍 SPDY，因为当我们在下一节中深入了解 HTTP/2 的本质时，您就会明白了。据说 HTTP/2 主要是受到 SPDY 的启发。</p>
<p>SPDY 并没有真正尝试取代 HTTP；而是它是 HTTP 上的转换层，存在于应用程序层并在将请求发送到线路之前对其进行修改。它开始成为事实上的标准，大多数浏览器开始实现它。</p>
<p>2015 年，在 Google，他们不想有两个相互竞争的标准，因此决定将其合并到 HTTP 中，同时诞生了 HTTP/2 并弃用了 SPDY。</p>
<h2 id="http2---2015">HTTP/2 - 2015</h2>
<p>到现在为止，您必须确信为什么我们需要对 HTTP 协议进行另一次修订。 HTTP/2 专为低延迟内容传输而设计。与旧版本 HTTP/1.1 的主要功能或区别包括</p>
<ul>
<li>二进制而不是文本</li>
<li>多路复用 - 单个连接上的多个异步 HTTP 请求</li>
<li>使用 HPACK 进行标头压缩</li>
<li>服务器推送 - 单个请求的多个响应</li>
<li>请求优先级</li>
<li>安全</li>
</ul>
<p>
  <img loading="lazy" src="https://i.imgur.com/X1BT5eX.png" alt="img"  /></p>
<h3 id="1-二进制协议">1. 二进制协议</h3>
<p>HTTP/2 倾向于通过使其成为二进制协议来解决 HTTP/1.x 中存在的延迟增加的问题。作为一种二进制协议，它更容易解析，但与 HTTP/1.x 不同，它不再是人眼可读的。 HTTP/2 的主要构建块是帧和流</p>
<h4 id="帧和流">帧和流</h4>
<p>HTTP 消息现在由一个或多个帧组成。有一个用于元数据的 HEADERS 帧和用于有效负载的 DATA 帧，并且存在多种其他类型的帧（HEADERS、DATA、RST_STREAM、SETTINGS、PRIORITY 等），您可以通过 HTTP/2 规范进行检查。</p>
<p>每个 HTTP/2 请求和响应都会被赋予一个唯一的流 ID，并被分为帧。帧只不过是二进制数据。帧的集合称为流。每个帧都有一个流 ID，用于标识其所属的流，并且每个帧都有一个公共标头。另外，除了流 ID 是唯一的之外，值得一提的是，客户端发起的任何请求都使用奇数，而服务器响应的流 ID 则为偶数。</p>
<p>除了 HEADERS 和 DATA 之外，我认为这里值得一提的另一种帧类型是 RST_STREAM，它是一种特殊的帧类型，用于中止某些流，即客户端可以发送此帧以让服务器知道我不需要此流不再了。在 HTTP/1.1 中，使服务器停止向客户端发送响应的唯一方法是关闭连接，这会导致延迟增加，因为必须为任何连续请求打开新连接。</p>
<p>在 HTTP/2 中，客户端可以使用 RST_STREAM 并停止接收特定流，同时连接仍处于打开状态并且其他流仍将在播放中。</p>
<h3 id="2-多路复用">2. 多路复用</h3>
<p>由于 HTTP/2 现在是一个二进制协议，并且正如我上面所说，它使用帧和流来进行请求和响应，因此一旦打开 TCP 连接，所有流都将通过同一连接异步发送，而无需打开任何其他连接。反过来，服务器以相同的异步方式响应，即响应没有顺序，客户端使用分配的流 ID 来标识特定数据包所属的流。</p>
<p>这也解决了 HTTP/1.x 中存在的队头阻塞问题，即客户端不必等待需要时间的请求，而其他请求仍将得到处理。</p>
<h3 id="3-报头压缩">3. 报头压缩</h3>
<p>它是单独 RFC 的一部分，专门用于优化发送的标头。其本质是，当我们不断地从同一个客户端访问服务器时，我们会在标头中一遍又一遍地发送大量冗余数据，有时可能会有 cookie 增加标头大小，从而导致带宽使用和延迟增加。为了克服这个问题，HTTP/2 引入了标头压缩。</p>
<p>与请求和响应不同，标头不会以 gzip 或 compress 等格式压缩，但标头压缩有不同的机制，即使用霍夫曼代码对文字值进行编码，标头表由客户端和服务器以及客户端维护服务器在后续请求中省略任何重复的标头（例如用户代理等），并使用两者维护的标头表引用它们。当我们谈论标头时，让我在这里补充一点，标头仍然与 HTTP/1.1 中的相同，除了添加一些伪标头，即 <code>:method</code> 、 <code>:scheme</code> 、 <code>:host</code> 和 <code>:path</code></p>
<h3 id="4-服务器推送">4. 服务器推送</h3>
<p>服务器推送是 HTTP/2 的另一个巨大功能，服务器知道客户端将请求某个资源，可以将其推送给客户端，甚至无需客户端请求。例如，假设浏览器加载网页，它会解析整个页面以找出必须从服务器加载的远程内容，然后向服务器发送后续请求以获取该内容。</p>
<p>服务器推送允许服务器通过推送它知道客户端将需要的数据来减少往返次数。其工作原理是，服务器发送一个名为 PUSH_PROMISE 的特殊帧，通知客户端：“嘿，我即将将此资源发送给您！别向我要。” PUSH_PROMISE 帧与导致推送发生的流相关联，它包含承诺的流 ID，即服务器将在其上发送要推送的资源的流。</p>
<h3 id="5-请求优先级">5. 请求优先级</h3>
<p>客户端可以通过在打开流的 HEADERS 帧中包含优先级信息来为流分配优先级。在任何其他时间，客户端都可以发送 PRIORITY 帧来更改流的优先级。</p>
<p>没有任何优先级信息，服务器异步处理请求，即没有任何顺序。如果为流分配了优先级，则服务器根据此优先级信息决定需要分配多少资源来处理哪个请求。</p>
<h3 id="6-安全">6. 安全</h3>
<p>关于是否应该对 HTTP/2 强制执行安全性（通过 TLS）进行了广泛的讨论。最终决定不强制执行。然而，大多数供应商表示，他们仅在通过 TLS 使用 HTTP/2 时才支持 HTTP/2。因此，尽管 HTTP/2 不要求按规范进行加密，但无论如何它在默认情况下已成为强制性的。排除了这一点，HTTP/2 在通过 TLS 实现时确实提出了一些要求，即必须使用 TLS 版本 1.2 或更高版本，必须有一定水平的最小密钥大小，需要临时密钥等。</p>
<p>原文链接：<a href="https://cs.fyi/guide/http-in-depth">https://cs.fyi/guide/http-in-depth</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]DevOps 和测试人员的 Git 面试问题</title>
      <link>https://blog.chensoul.com/posts/2023/10/12/git-interview-questions/</link>
      <pubDate>Thu, 12 Oct 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/10/12/git-interview-questions/</guid>
      <description>欢迎来到 Git 面试准备指南，我们将在这里向初学者和经验丰富的专业人士讨论最常见的 Git 面试问题。无论您是准备参加 DevOps 或测试面试，还是希望提高 Git 技能，此资源都可以通过深入研究一些与 Git 基本概念和实践相关的最常见面试问题来帮助您。
我们将涵盖所有重要主题，例如分支、存储库管理、处理合并冲突和协作工作流程。通过探索这些问题，您将更深入地了解 Git 的版本控制系统，并更好地应对开发项目中的现实挑战。
1.什么是版本控制系统？ 版本控制系统 (VCS) 是一种帮助跟踪和管理文件和代码随时间变化的软件。它允许多人协作处理一个项目，跟踪修订，并在需要时轻松恢复到以前的版本。
版本控制系统主要分为三种类型：
本地版本控制系统 (LVCS)：在 LVCS 中，版本控制数据库存储在本地计算机上。更改和修订在位于用户计算机上的本地存储库中进行跟踪。但此类系统缺乏协作功能，不利于团队开发。 集中版本控制系统 (CVCS)：在 CVCS 中，版本控制数据库存储在中央服务器上。用户可以从服务器检出文件、进行更改并将其提交回服务器。这允许多个用户在同一项目上进行协作，并提供对存储库的集中控制。然而，CVCS 的一个缺点是，如果中央服务器出现故障，协作者将无法执行某些操作，直到服务器恢复为止。 分布式版本控制系统 (DVCS)：在 DVCS 中，每个用户都有一个包含整个版本历史记录的本地存储库。这意味着每个用户都拥有项目存储库的完整副本，包括所有分支和修订。用户可以在本地存储库上独立工作，并与其他存储库同步更改。 DVCS 为分布式和分散式工作流程提供更好的支持，允许用户离线工作并更有效地协作。 2. Git 中的 Origin 是什么？ 在 Git 中，“origin”是指我们从中克隆的远程存储库。当我们从远程服务器克隆存储库时，Git 会自动创建一个名为“origin”的远程引用，该引用指向原始远程存储库。
默认情况下，当我们克隆存储库时，Git 会设置“来源”并将其与我们克隆的原始存储库关联起来。我们可以通过运行命令“git remote -v”来验证这一点。此命令显示与本地存储库关联的远程存储库列表及其 URL。
git remote -v origin https://github.com/lokeshgupta1981/Spring-Boot3-Demos.git (fetch) origin https://github.com/lokeshgupta1981/Spring-Boot3-Demos.git (push) 请注意，“origin”只是一个未硬编码的别名，可以使用以下命令提示符进行更改：
git remote rename origin newName 3.我们如何在 Git 中配置全局用户名和电子邮件？ 设置全局一致的用户名和电子邮件地址非常重要，因为 Git 使用此信息将提交与正确的作者关联起来。它有助于识别每个提交的人员，并允许在项目内进行适当的协作和归属。
要在 Git 中配置全局用户名和电子邮件，我们可以使用以下命令：</description>
      <content:encoded><![CDATA[<p>欢迎来到 Git 面试准备指南，我们将在这里向初学者和经验丰富的专业人士讨论最常见的 Git 面试问题。无论您是准备参加 DevOps 或测试面试，还是希望提高 Git 技能，此资源都可以通过深入研究一些与 Git 基本概念和实践相关的最常见面试问题来帮助您。</p>
<p>我们将涵盖所有重要主题，例如分支、存储库管理、处理合并冲突和协作工作流程。通过探索这些问题，您将更深入地了解 Git 的版本控制系统，并更好地应对开发项目中的现实挑战。</p>
<h2 id="1什么是版本控制系统">1.什么是版本控制系统？</h2>
<p><a href="https://www.atlassian.com/git/tutorials/what-is-version-control">版本控制系统</a> (VCS) 是一种帮助跟踪和管理文件和代码随时间变化的软件。它允许多人协作处理一个项目，跟踪修订，并在需要时轻松恢复到以前的版本。</p>
<p>版本控制系统主要分为三种类型：</p>
<ul>
<li>本地版本控制系统 (LVCS)：在 LVCS 中，版本控制数据库存储在本地计算机上。更改和修订在位于用户计算机上的本地存储库中进行跟踪。但此类系统缺乏协作功能，不利于团队开发。</li>
</ul>
<p>
  <img loading="lazy" src="https://howtodoinjava.com/wp-content/uploads/2023/09/LocalVCS.png" alt="img"  /></p>
<ul>
<li>集中版本控制系统 (CVCS)：在 CVCS 中，版本控制数据库存储在中央服务器上。用户可以从服务器检出文件、进行更改并将其提交回服务器。这允许多个用户在同一项目上进行协作，并提供对存储库的集中控制。然而，CVCS 的一个缺点是，如果中央服务器出现故障，协作者将无法执行某些操作，直到服务器恢复为止。</li>
</ul>
<p>
  <img loading="lazy" src="https://howtodoinjava.com/wp-content/uploads/2023/09/CentralizedVCS.png" alt="img"  /></p>
<ul>
<li>分布式版本控制系统 (DVCS)：在 DVCS 中，每个用户都有一个包含整个版本历史记录的本地存储库。这意味着每个用户都拥有项目存储库的完整副本，包括所有分支和修订。用户可以在本地存储库上独立工作，并与其他存储库同步更改。 DVCS 为分布式和分散式工作流程提供更好的支持，允许用户离线工作并更有效地协作。</li>
</ul>
<p>
  <img loading="lazy" src="https://howtodoinjava.com/wp-content/uploads/2023/09/DistributedVCS-1024x751.png" alt="img"  /></p>
<h2 id="2-git-中的-origin-是什么">2. Git 中的 Origin 是什么？</h2>
<p>在 Git 中，“origin”是指我们从中克隆的远程存储库。当我们从远程服务器克隆存储库时，Git 会自动创建一个名为“origin”的远程引用，该引用指向原始远程存储库。</p>
<p>默认情况下，当我们克隆存储库时，Git 会设置“来源”并将其与我们克隆的原始存储库关联起来。我们可以通过运行命令“git remote -v”来验证这一点。此命令显示与本地存储库关联的远程存储库列表及其 URL。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git remote -v
</span></span><span class="line"><span class="cl">origin https://github.com/lokeshgupta1981/Spring-Boot3-Demos.git <span class="o">(</span>fetch<span class="o">)</span>
</span></span><span class="line"><span class="cl">origin https://github.com/lokeshgupta1981/Spring-Boot3-Demos.git <span class="o">(</span>push<span class="o">)</span>
</span></span></code></pre></div><p>请注意，“origin”只是一个未硬编码的别名，可以使用以下命令提示符进行更改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git remote rename origin newName
</span></span></code></pre></div><h2 id="3我们如何在-git-中配置全局用户名和电子邮件">3.我们如何在 Git 中配置全局用户名和电子邮件？</h2>
<p>设置全局一致的用户名和电子邮件地址非常重要，因为 Git 使用此信息将提交与正确的作者关联起来。它有助于识别每个提交的人员，并允许在项目内进行适当的协作和归属。</p>
<p>要在 Git 中配置全局用户名和电子邮件，我们可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;MyName&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email <span class="s2">&#34;myname@gmail.com&#34;</span>
</span></span></code></pre></div><p>这些命令将全局设置用户名和电子邮件，这意味着它们将用于您计算机上的所有 Git 存储库，除非在存储库级别覆盖。</p>
<p>您可以通过运行以下命令来验证更改。这些命令将分别显示配置的用户名和电子邮件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global user.name   <span class="c1"># Prints &#39;lokeshgupta1981&#39;</span>
</span></span><span class="line"><span class="cl">git config --global user.email    <span class="c1"># Prints &#39;howtodoinjava@gmail.com&#39;</span>
</span></span></code></pre></div><h2 id="4-git-中的暂存区是什么意思">4. Git 中的“暂存区”是什么意思？</h2>
<p>Git 中的“暂存区域”也称为“索引”，是一个中间区域，在将文件提交到 Git 存储库之前，在此区域准备对文件的更改。</p>
<p>当我们对项目文件进行更改时，Git 提供了一个两步过程来提交这些更改。暂存区域充当工作目录（进行修改的位置）和存储库（存储提交的位置 =&gt; .git 文件夹）之间的桥梁。</p>
<p>
  <img loading="lazy" src="https://howtodoinjava.com/wp-content/uploads/2023/07/StagingArea-1024x517.png" alt="img"  /></p>
<p>通过使用暂存区，我们可以将不相关的更改分离到多个提交中，或者有选择地包含特定修改而排除其他修改。它提供了一个在变更成为项目历史的一部分之前审查和完善我们的变更的机会。</p>
<h2 id="5-git-中的分叉分支和克隆之间的区别">5. Git 中的分叉、分支和克隆之间的区别？</h2>
<p>分叉、分支和克隆都是 Git 操作，在版本控制工作流程中具有不同的用途。在深入研究之前，让我们先对它们进行比较。</p>
<p>以下是 Git 中分叉、分支和克隆的表格比较：</p>
<table>
<thead>
<tr>
<th>特征</th>
<th>分叉</th>
<th>分枝</th>
<th>克隆</th>
</tr>
</thead>
<tbody>
<tr>
<td>目的</td>
<td>在您的 GitHub 帐户上创建远程存储库的副本。</td>
<td>在 Git 存储库中创建单独的开发线。</td>
<td>在您的计算机上创建 Git 存储库的本地副本。</td>
</tr>
<tr>
<td>所有权</td>
<td>创建一个由您拥有的完全独立的存储库。</td>
<td>在同一存储库中，分支归原始存储库所有。</td>
<td>本地副本；所有权没有变化。</td>
</tr>
<tr>
<td>起源</td>
<td>源自远程存储库，通常位于 GitHub 上。</td>
<td>源自现有的本地或远程存储库。</td>
<td>源自现有的远程或本地存储库。</td>
</tr>
<tr>
<td>改变可见性</td>
<td>在创建拉取请求之前，在分叉中所做的更改独立于原始存储库。</td>
<td>在分支中所做的更改将被隔离，直到您将它们合并回主分支。</td>
<td>在将更改推送到远程存储库之前，更改都是本地的。</td>
</tr>
<tr>
<td>用例</td>
<td>通常用于为开源项目做出贡献或创建单独的副本供个人使用。</td>
<td>用于协作环境中的功能开发、错误修复和隔离更改。</td>
<td>用于处理存储库的本地副本，通常用于个人开发。</td>
</tr>
</tbody>
</table>
<h3 id="分叉">分叉</h3>
<p>分叉是一个与远程存储库相关的概念，特别是在 GitHub、GitLab 和 Bitbucket 等平台上。分叉在我们自己的帐户中创建原始存储库的副本。</p>
<p>要在 GitHub（或类似平台）上分叉存储库，通常在存储库页面上有一个“分叉”按钮。单击此按钮将在您的 GitHub 帐户中创建原始存储库的分支。</p>
<p>当我们想要为开源项目做出贡献或创建我们自己的独立项目版本时，通常会使用分叉。分叉存储库与原始存储库分开，允许我们进行更改、实验和提交拉取请求，而不会影响原始项目。</p>
<h3 id="分枝">分枝</h3>
<p>分支允许在存储库中创建单独的开发线。它使我们能够彼此独立地处理不同的功能、错误修复或实验。</p>
<p>要在 Git 中创建分支，我们使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch &lt;branch_name&gt;
</span></span></code></pre></div><p>通过创建分支，我们实质上创建了一个新的时间线，我们可以在不影响主分支（通常称为“master”或“main”）的情况下进行更改。一旦我们对分支中所做的更改感到满意，我们就可以将分支合并回主分支以合并更改。</p>
<p>分支是协作开发的强大工具，使多个开发人员能够同时处理不同的任务，同时保持干净且有组织的提交历史记录。</p>
<h3 id="克隆">克隆</h3>
<p>克隆创建远程存储库的本地副本。当我们克隆存储库时，我们会将整个项目的历史记录、文件和分支下载到本地计算机。</p>
<p>要将远程存储库克隆到本地计算机，我们使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone &lt;repository_url&gt;
</span></span></code></pre></div><p>克隆在本地存储库和远程存储库之间建立连接，使我们能够获取更新、推送更改以及与其他人协作。当我们想要开始使用现有存储库时，通常会进行克隆。</p>
<h2 id="6-什么是-git-stash">6. 什么是 Git Stash？</h2>
<p>在 Git 中，“存储”功能允许我们临时保存对工作目录所做的更改，而无需提交它们。它提供了一种存储我们的修改并切换到不同分支或应用其他操作的方法，而无需提交不完整或实验性更改。</p>
<p>存储存储在本地，不会推送到远程存储库，这使得它们适合个人工作流程组织和实验。</p>
<p><code>git stash</code> 命令用于创建和管理存储。以下是与 Git stash 相关的一些常见用例和命令：</p>
<h3 id="creating-a-stash">Creating a stash</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git stash save <span class="s2">&#34;Stash message&#34;</span>
</span></span></code></pre></div><p>此命令将我们的修改保存在新的存储中，并带有描述存储的可选消息。 Git 将从我们的工作目录中恢复更改，使其保持干净。</p>
<h3 id="viewing-stashes">Viewing stashes</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git stash list
</span></span></code></pre></div><p>此命令显示您已创建的存储的列表，以及它们的存储引用和消息。</p>
<h3 id="applying-a-stash">Applying a stash</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git stash apply stash@<span class="o">{</span>n<span class="o">}</span> // n in <span class="o">[</span>0.....P<span class="o">]</span>
</span></span></code></pre></div><p>此命令将特定存储中的更改应用到当前分支。 <code>stash@{n}</code> 指的是列表中的存储引用。默认情况下，它适用于最新的存储。</p>
<h3 id="applying-and-removing-a-stash">Applying and removing a stash</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git stash pop stash@<span class="o">{</span>n<span class="o">}</span>
</span></span></code></pre></div><p>此命令应用特定存储中的更改，并一步将其从存储列表中删除。它相当于应用存储然后使用 <code>git stash drop</code> 将其删除。</p>
<h3 id="applying-a-stash-to-a-different-branch">Applying a stash to a different branch</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git stash branch branch-name stash@<span class="o">{</span>n<span class="o">}</span>
</span></span></code></pre></div><p>此命令创建一个新分支 ( <code>new-branch-name</code> ) 并将特定存储中的更改应用到该分支。这是切换到新分支并一步应用隐藏的更改的便捷方法。</p>
<h3 id="discarding-a-stash">Discarding a stash</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git stash drop stash@<span class="o">{</span>n<span class="o">}</span>
</span></span></code></pre></div><p>此命令从存储列表中删除特定存储，而不应用其更改。</p>
<p>当我们正在处理某件事但需要切换到不同的任务或分支时，Git stash 非常有用。它允许我们暂时保存更改、切换上下文，然后返回到保存的状态以继续我们上次中断的地方。</p>
<h2 id="7-git-fetch-和-git-pull-有什么区别">7. ‘git fetch’ 和 ‘git pull’ 有什么区别？</h2>
<p><code>git fetch</code> 和 <code>git pull</code> 都用于从远程存储库获取更改并将其合并到本地存储库中。然而，它们在处理获取的更改和更新本地分支的方式上有所不同。</p>
<p>以下是 <code>git fetch</code> 和 <code>git pull</code> 之间的主要区别：</p>
<h3 id="git-fetch-git-获取">git fetch git 获取</h3>
<ul>
<li>从远程存储库检索最新更改，包括新分支、提交和标签，而不自动将它们合并到当前分支中。</li>
<li>更新远程跟踪分支（例如 <code>origin/master</code> ）以反映远程存储库的状态。</li>
<li>不修改您的本地分支或工作目录。</li>
<li>允许我们在手动合并之前检查和审查获取的更改，从而提供决定如何集成更改的机会。</li>
</ul>
<p>要从远程存储库获取最新更改，我们使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git fetch origin
</span></span></code></pre></div><h3 id="git-pull">git pull</h3>
<ul>
<li>执行 <code>git fetch</code> ，然后将获取的更改自动合并到当前分支中。</li>
<li>更新远程跟踪分支和本地分支，合并获取的更改。</li>
<li>如果当前分支有本地修改， <code>git pull</code> 会尝试自动合并更改。如果存在冲突，则需要手动解决。</li>
<li>自动更新您的工作目录以反映合并的更改。</li>
</ul>
<p>要从远程存储库中提取最新更改，我们使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git pull
</span></span></code></pre></div><p><code>git fetch</code> 和 <code>git pull</code> 之间的选择取决于我们的工作流程以及我们想要对集成更改进行控制的级别。</p>
<ul>
<li>如果我们想在合并之前查看更改并对集成过程有更多的控制， <code>git fetch</code> 是合适的。</li>
<li>如果我们更喜欢更自动化的方法并且对自动合并更改有信心， <code>git pull</code> 可能会更方便。</li>
</ul>
<h2 id="8-解释一下-git-checkoutrebase-和-merge">8. 解释一下 Git checkout、rebase 和 merge？</h2>
<p>这是 Git 中的三个重要命令，用于管理分支并将更改从一个分支合并到另一个分支。</p>
<table>
<thead>
<tr>
<th>git 命令</th>
<th>目的</th>
<th>常见用例</th>
</tr>
</thead>
<tbody>
<tr>
<td>checkout</td>
<td>切换到不同的分支或提交，使其成为当前工作分支/提交。</td>
<td>– 分支的创建和切换 - 检查特定提交以进行检查或测试</td>
</tr>
<tr>
<td>rebase</td>
<td>将更改从一个分支重新应用到另一分支。通常用于维护线性提交历史记录。</td>
<td>– 将功能分支集成到主分支中 – 维护干净、线性的提交历史记录</td>
</tr>
<tr>
<td>merge</td>
<td>将一个分支的更改合并到另一个分支。保留提交，创建合并提交。</td>
<td>– 将功能分支集成到主分支中 – 合并多个贡献者的更改</td>
</tr>
</tbody>
</table>
<p>让我们逐一解释一下：</p>
<h3 id="git-checkout">git checkout</h3>
<p><code>git checkout</code> 用于在项目的不同分支或版本之间切换。</p>
<p>要切换到另一个分支，我们使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git checkout &lt;branch-name&gt;
</span></span></code></pre></div><ul>
<li>当您运行 <code>git checkout &lt;branch-name&gt;</code> 时，它会更新您的工作目录以匹配指定分支的内容。</li>
<li>您还可以使用 <code>git checkout</code> 切换到特定的提交或标记，从而允许您查看历史记录中特定状态的项目。</li>
<li>此外， <code>git checkout -b &lt;new-branch-name&gt;</code> 创建一个新分支并在单个命令中切换到它。</li>
</ul>
<h3 id="git-rebase">git rebase</h3>
<p><code>git rebase</code> 用于将一个分支的更改集成到另一个分支，通常用于将功能分支的更改合并到主分支中。</p>
<p>假设我们有两个分支：源分支（我们称之为“feature”）和目标分支（通常是“master”或“main”）。 “feature”分支包含一些更改，我们希望将这些更改合并到“master”分支中。但是，我们不想执行标准合并，因为我们想维护线性提交历史记录。</p>
<p>首先，您需要确保您位于目标分支（git checkout master）。在这种情况下，它将是 master，然后，启动 rebase 命令，指定要 rebase 到当前分支（目标分支）的源分支。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git rebase feature
</span></span></code></pre></div><ul>
<li>当您运行 <code>git rebase &lt;target-branch&gt;</code> 时，Git 会识别当前分支和目标分支的共同祖先，然后将当前分支的提交重新应用到目标分支之上。</li>
<li>Rebase 通过按顺序放置提交来允许线性历史记录，使其看起来好像更改是直接在目标分支之上进行的。</li>
<li>这可以帮助维护干净的提交历史记录，特别是在处理长期存在的功能分支时。</li>
</ul>
<h3 id="git-merge">git merge</h3>
<p><code>git merge</code> 将不同分支的更改合并到当前分支中。</p>
<p>要将分支的更改合并到目标分支，我们使用以下命令（在 git checkout 之后）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git merge &lt;source-branch&gt;
</span></span></code></pre></div><ul>
<li>当您运行 <code>git merge &lt;source-branch&gt;</code> 时，Git 会创建一个新的提交，将源分支中的更改合并到当前分支中。</li>
<li>合并提交保留了两个分支的历史记录，包括它们分歧的点。</li>
<li>默认情况下，如果可能，Git 会执行“快进”合并，这意味着它将当前分支指针向前移动到源分支的提交，而不创建额外的合并提交。</li>
<li>但是，如果由于不同的更改而无法进行快进合并，Git 会执行“递归”或“非快进”合并，创建一个新的合并提交。</li>
</ul>
<h2 id="9-gitcherry-pick命令的用途是什么">9. “gitcherry-pick”命令的用途是什么？</h2>
<p>“gitcherry-pick”命令用于将特定提交从一个分支应用到另一个分支。它允许我们选择单独的提交并将它们应用到不同的分支，将它们的更改合并到目标分支中。</p>
<p>以下是我们如何使用 <code>git cherry-pick</code> 命令：</p>
<ul>
<li>识别提交：确定要应用于另一个分支的提交。您可以找到提交哈希或使用其他 Git 命令（例如 <code>git log</code> 或 <code>gitk</code> ）来可视化提交历史记录。</li>
<li>切换到目标分支：确保您位于要应用所选提交的分支上。您可以使用 <code>git checkout</code> 切换到目标分支。</li>
<li>运行 <code>git cherry-pick</code> ：执行 <code>git cherry-pick</code> 命令，后跟要应用的提交的提交哈希值。例如：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git cherry-pick &lt;commit-hash&gt;
</span></span></code></pre></div><p>需要注意的是， <code>git cherry-pick</code> 会复制选定的提交并将它们作为新提交应用到目标分支上。这意味着新提交将具有不同的提交哈希值，因为它们是单独的副本，而不是原始提交的直接传输。</p>
<h2 id="10-解释-git-重置和恢复">10. 解释 Git 重置和恢复</h2>
<p>在 Git 中，重置和恢复是撤消更改的两种不同方法。它们用于纠正错误、撤消提交或将存储库恢复到以前的状态。</p>
<table>
<thead>
<tr>
<th>Action</th>
<th>Git Reset</th>
<th>Git Revert</th>
</tr>
</thead>
<tbody>
<tr>
<td>目的</td>
<td>将 HEAD 和分支指针移动到指定的提交。</td>
<td>创建一个新的提交来撤消特定提交所做的更改。</td>
</tr>
<tr>
<td>常见用例</td>
<td>– 在推送到远程存储库之前在本地撤消提交 – 重组提交历史 – 从暂存区删除更改</td>
<td>– 安全撤消提交而不更改提交历史记录 – 协作代码修正</td>
</tr>
</tbody>
</table>
<h3 id="git-reset">git reset</h3>
<p><code>git reset</code> 将当前分支指针移动到特定提交，从而有效地将分支重置为该提交。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#Let&#39;s say we have a commit history like this: A - B - C - D (master)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#To Perform a hard reset to move the branch pointer to commit B, discarding changes in C and D.</span>
</span></span><span class="line"><span class="cl">git reset --hard B
</span></span></code></pre></div><p>复位命令有三种模式：软复位、混合复位和硬复位。</p>
<ul>
<li>软重置 ( <code>git reset --soft</code> ) 将分支指针移动到指定的提交，同时保持暂存区域和工作目录中的更改不变。它允许您“撤消”提交并根据先前的状态进行其他修改。</li>
<li>混合重置（默认行为， <code>git reset --mixed</code> ）将分支指针移动到指定的提交，重置暂存区域，但保留工作目录中的更改。它“取消暂存”更改，允许您在提交之前修改并再次暂存它们。</li>
<li>硬重置 ( <code>git reset --hard</code> ) 将分支指针移动到指定的提交，丢弃暂存区域和工作目录中的任何更改。它完全删除更改，将分支和整个存储库恢复到指定提交的状态。</li>
</ul>
<h3 id="git-revert">git revert</h3>
<p><code>git revert</code> 创建一个新的提交，撤消先前提交中所做的更改。它提供了一种安全的方式来撤消提交而不更改提交历史记录。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git revert C  <span class="c1"># This command will Create a new commit that undoes the changes in commit C.</span>
</span></span></code></pre></div><p><code>git revert</code> 创建新的提交来反转指定提交引入的更改，而不是修改或删除现有提交。每个恢复提交都专门用于撤消特定提交的更改，确保提交历史记录保持完整。</p>
<h2 id="11gitignore文件的用途是什么">11.“.gitignore”文件的用途是什么？</h2>
<p><code>.gitignore</code> 文件指定不应提交到存储库的有意未跟踪的文件和目录。它允许我们定义 Git 在跟踪更改和暂存文件时应忽略的文件和目录名称模式。</p>
<p>使用“.gitignore”文件的一些常见用例和好处包括：</p>
<ul>
<li>忽略构建工件，例如编译的二进制文件、目标文件、日志文件或临时文件。</li>
<li>忽略单独管理的依赖项或库。在存储库中包含这些依赖项是不必要的，并且可能会导致存储库臃肿。</li>
<li>忽略包含 API 密钥、数据库凭据或特定于环境的设置等敏感信息的配置文件。</li>
<li>忽略与其他团队成员无关的个人开发环境文件，例如项目设置、编辑器备份文件或缓存文件。</li>
</ul>
<p>以下是包含 3 个条目的 <code>.gitignore</code> 文件的示例：</p>
<pre tabindex="0"><code># Ignore build artifacts
*.exe
*.o
*.log

# Ignore dependency directories
/node_modules
/vendor

# Ignore sensitive configuration files
config.ini
secrets.json
</code></pre><h2 id="12-git-reflog-和-log-有什么区别">12. Git reflog 和 log 有什么区别？</h2>
<p><code>git log</code> 主要用于查看特定分支或提交的提交历史记录，而 <code>git reflog</code> 更专注于跟踪整个存储库中的引用移动，这使得它对于恢复和提交特别有用。调试目的。</p>
<table>
<thead>
<tr>
<th>方面</th>
<th><code>git log</code></th>
<th><code>git reflog</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>目的</td>
<td>显示分支的提交历史记录。</td>
<td>显示存储库的参考日志。</td>
</tr>
<tr>
<td>常见用例</td>
<td>– 回顾项目历史 –检查提交消息和随时间所做的更改。</td>
<td>–恢复丢失的提交或分支 – 调试和了解存储库中的更改。</td>
</tr>
</tbody>
</table>
<h3 id="git-log">git log</h3>
<p><code>git log</code> 命令提供存储库中按时间顺序提交的列表，显示提交哈希、作者、日期和提交消息等详细信息。默认情况下，它显示当前分支的提交历史记录，从最近的提交开始并按时间倒退。各种选项和标志允许自定义，例如按作者、日期范围或分支进行过滤。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># To see the commit history for the current branch</span>
</span></span><span class="line"><span class="cl">git log
</span></span></code></pre></div><p>要以紧凑的一行格式显示提交历史记录，我们使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git log --oneline
</span></span></code></pre></div><p>
  <img loading="lazy" src="https://howtodoinjava.com/wp-content/uploads/2023/09/Git-log-output-1024x579.jpg" alt="img"  /></p>
<h3 id="git-reflog">git reflog</h3>
<p>另一方面， <code>git reflog</code> 给出了引用（分支或标签）更新和修改提交指针的其他操作的详细日志。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># To view the reflog for the repository</span>
</span></span><span class="line"><span class="cl">git reflog
</span></span></code></pre></div><p>
  <img loading="lazy" src="https://howtodoinjava.com/wp-content/uploads/2023/09/Git-reflog-output-1024x138.jpg" alt="img"  /></p>
<p>与 <code>git log</code> 不同，引用日志记录影响提交历史记录的分支移动和操作，即使不创建新的提交也是如此。它是恢复丢失的提交或可能被意外删除或移动的分支的宝贵工具，在发生错误或不可预见的事件时充当安全网。</p>
<h2 id="13git-bisect命令的用途是什么">13.“git bisect”命令的用途是什么？</h2>
<p><code>git bisect</code> 命令通过提交历史记录执行二分搜索，以识别引入错误或导致回归的特定提交。它通过有效地缩小要调查的提交范围，有助于隔离和查明负责特定问题的提交。</p>
<p>以下是 <code>git bisect</code> 工作原理的概述：</p>
<ul>
<li>识别已知的好的和坏的提交：首先识别项目历史记录中的两个提交：一个代表已知的良好状态（不存在错误或问题的提交），另一个代表已知的坏状态（不存在 bug 或问题的提交）存在错误或问题）。</li>
<li>开始二等分过程：使用 <code>git bisect start</code> 开始二等分过程。使用 <code>git bisect good &lt;commit&gt;</code> 指定已知良好状态的提交哈希，使用 <code>git bisect bad &lt;commit&gt;</code> 指定已知不良状态的提交哈希。 Git 将在已知的好状态和坏状态之间创建一系列提交。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git bisect start
</span></span><span class="line"><span class="cl">git bisect good &lt;good_commit_hash&gt;
</span></span><span class="line"><span class="cl">git bisect bad &lt;bad_commit_hash&gt;
</span></span></code></pre></div><h2 id="14-我们如何在-git-中将多个提交压缩为单个提交">14. 我们如何在 Git 中将多个提交压缩为单个提交？</h2>
<p>为了在 Git 中将多个提交压缩为单个提交，我们可以使用交互式变基功能。确保我们位于包含我们想要压缩的提交的分支上。</p>
<p>运行以下命令启动交互式变基：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git rebase -i HEAD~n
</span></span></code></pre></div><p>将 <code>n</code> 替换为我们想要压缩的提交数。例如，如果我们想压缩最后 3 次提交，请使用 <code>HEAD~3</code> 。</p>
<p>将打开一个交互式文本编辑器，显示我们在上一步中指定的提交列表。每个提交前面都会有“pick”一词。</p>
<p>
  <img loading="lazy" src="https://howtodoinjava.com/wp-content/uploads/2023/09/git-squash_pick-1024x394.png" alt="img"  /></p>
<p>要压缩提交，请将除第一个提交之外的所有提交的“pick”更改为“squash”（或“s”）。将第一个提交保留为“pick”，因为它将是生成的提交消息。如果需要，您还可以通过移动文本编辑器中的行来重新排列提交的顺序。</p>
<p>
  <img loading="lazy" src="https://howtodoinjava.com/wp-content/uploads/2023/09/git-squash_squash-1024x408.png" alt="img"  /></p>
<ul>
<li>保存并退出文本编辑器。</li>
<li>将打开另一个文本编辑器，允许您修改提交消息。您可以合并压缩提交的提交消息或写入新消息。根据需要编辑消息，保存并退出编辑器。</li>
<li>Git 将执行变基，将提交压缩为单个提交。</li>
<li>如果变基成功，您将看到一条消息，表明变基已完成。</li>
<li>如果存在任何冲突，Git 将停止 rebase 过程并允许我们解决它们。解决冲突后，使用 <code>git rebase --continue</code> 继续变基过程。</li>
<li>如有必要，将更改推送到远程存储库。</li>
</ul>
<p>警告：压缩提交时要小心，因为它会重写历史。如果提交已经被推送到共享存储库并且其他人已经基于这些提交进行了工作，通常不建议压缩它们，因为这可能会导致其他团队成员发生冲突。</p>
<h2 id="15如何判断某个分支是否已经合并到-master-中">15、如何判断某个分支是否已经合并到 Master 中？</h2>
<p>要识别某个分支是否已合并到 Git 中的 <code>master</code> 分支中，我们可以运行以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git checkout master
</span></span></code></pre></div><p>然后运行以下命令，将 <code>&lt;branch_name&gt;</code> 替换为我们要检查的分支名称：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch --merged &lt;branch_name&gt;
</span></span></code></pre></div><ul>
<li>如果分支已合并到 <code>master</code> 中，它将出现在运行此命令后显示的分支列表中。</li>
<li>如果分支尚未合并到 <code>master</code> 中，它将不会出现在合并分支列表中。</li>
</ul>
<p>或者，我们可以使用以下命令来查看合并分支的简明视图：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch --merged
</span></span></code></pre></div><p>此命令将列出已合并到当前分支的所有分支，在本例中为 <code>master</code> 。</p>
<h2 id="16-什么是-git-存储库如何初始化-git-存储库">16. 什么是 Git 存储库？如何初始化 Git 存储库？</h2>
<p>Git 存储库是 Git 跟踪和管理一组文件和目录更改的存储位置。它包含对文件所做的所有更改的完整历史记录，使我们能够跟踪和恢复更改、与其他人协作以及维护项目的不同版本。</p>
<p>要初始化目录中的 Git 存储库，我们可以使用 <code>git init</code> 命令。我们是这样做的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> /path/to/your/local-repo-path
</span></span><span class="line"><span class="cl">git init
</span></span></code></pre></div><p>此命令在当前目录中初始化一个空的 Git 存储库。 Git 创建一个隐藏的 <code>.git</code> 目录，其中存储所有存储库数据，包括提交历史记录和配置。</p>
<h2 id="17-如何显示版本库的当前状态包括修改的文件和分支信息">17. 如何显示版本库的当前状态，包括修改的文件和分支信息？</h2>
<p>要显示存储库的当前状态，包括修改的文件和分支信息，我们可以使用 <code>git status</code> 命令。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git status
</span></span><span class="line"><span class="cl"><span class="c1"># Sample Output</span>
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   spring-boot-actuator-example/pom.xml
</span></span><span class="line"><span class="cl">        modified:   spring-boot-actuator-example/src/main/java/com/howtodoinjava/demo/SimpleRestController.java
</span></span><span class="line"><span class="cl">        modified:   spring-boot-actuator-example/src/main/resources/application.properties
</span></span><span class="line"><span class="cl">        modified:   spring-webflux-demo/src/test/java/com/howtodoinjava/demo/EmployeeControllerTest.java
</span></span><span class="line"><span class="cl">no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>此命令将显示我们的存储库当前状态的摘要。它将向我们显示以下信息：</p>
<ul>
<li>我们当前所在的分支。</li>
<li>未跟踪的文件（Git 当前未跟踪的文件）。</li>
<li>已修改的文件（已修改但未暂存的文件）。</li>
<li>暂存文件（已修改并暂存以供下一次提交的文件）。</li>
<li>分支状态（例如，“您的分支已更新为‘origin/master’”）。</li>
</ul>
<h2 id="18-如何连接本地仓库到远程仓库">18. 如何连接本地仓库到远程仓库？</h2>
<p>要将本地存储库连接到远程存储库，我们需要将远程 URL 添加到本地 Git 存储库。此远程 URL 指向我们要存储和同步代码的远程存储库的位置（例如，在 GitHub、GitLab 或 Bitbucket 上）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git remote add origin &lt;remote_url&gt;
</span></span></code></pre></div><p>此命令添加一个名为“origin”的远程（如果愿意，我们可以选择不同的名称）并将其与指定的远程 URL 关联。</p>
<h2 id="19-如何列出已有的分行如何创建新分支">19. 如何列出已有的分行？如何创建新分支？</h2>
<p>要列出现有分支，我们可以使用“gitbranch”命令。它显示存储库中所有分支的列表，并突出显示当前分支。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch
</span></span></code></pre></div><p>要创建新分支，我们可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="20-如何切换到特定分支">20. 如何切换到特定分支？</h2>
<p>我们可以使用以下命令切换到特定分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> git checkout &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="21-如何将不同分支的更改合并到当前分支">21. 如何将不同分支的更改合并到当前分支？</h2>
<p>确保我们位于要合并更改的分支（例如 main 分支）后，使用 merge 命令将指定分支的更改合并到当前分支。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git checkout &lt; main-branch &gt;
</span></span><span class="line"><span class="cl">git merge &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="22如何删除-git-中的分支">22.如何删除 Git 中的分支？</h2>
<p>要删除分支，我们可以传递 <code>-d</code> 标志。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> git branch -d &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="23-如何将文件添加到暂存区">23. 如何将文件添加到暂存区？</h2>
<p>要将文件添加到暂存区，我们使用 git add 命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git add &lt;file&gt;
</span></span></code></pre></div><p>为了轻松地将所有文件添加到暂存区域，我们可以使用“.”。而不是特定的文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git add .
</span></span></code></pre></div><h2 id="24-如何使用描述性消息在暂存区提交更改">24. 如何使用描述性消息在暂存区提交更改？</h2>
<p>将文件添加到暂存区域后，我们可以使用以下命令提交更改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git commit -m <span class="s2">&#34;message&#34;</span>.
</span></span></code></pre></div><p>将“消息”替换为总结更改的描述性消息。</p>
<h2 id="25-如何将提交的更改推送到远程存储库">25. 如何将提交的更改推送到远程存储库？</h2>
<p>要将提交的更改推送到远程存储库，我们使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git push &lt;remote-name&gt; &lt;branch-name&gt;
</span></span></code></pre></div><h2 id="26-如何撤消-git-中的最后一次提交">26. 如何撤消 Git 中的最后一次提交？</h2>
<p>要撤消最后一次提交，同时将更改保留为未提交的修改，我们可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git reset HEAD~1
</span></span></code></pre></div><p>这会将 HEAD 指针向后移动一次提交。更改仍将在您的工作目录中，允许我们修改它们或进行新的提交。</p>
<h2 id="27-什么是合并冲突如何解决">27. 什么是合并冲突，如何解决？</h2>
<p>当 Git 由于同一行代码上的修改冲突而无法自动合并来自不同分支的更改时，就会发生合并冲突。</p>
<p>要解决合并冲突，我们需要手动编辑冲突文件，以选择所需的更改。解决冲突后，我们可以添加并提交更改以完成合并。</p>
<h2 id="28-如何从远程存储库中提取更改">28. 如何从远程存储库中提取更改？</h2>
<p>要从 Git 中的远程存储库提取更改，我们可以使用 <code>git pull</code> 命令。 <code>git pull</code> 命令从远程存储库获取最新更改并将它们合并到我们的本地分支中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git pull origin &lt;branch-name&gt;
</span></span></code></pre></div><p>例如，如果我们想从 <code>master</code> 分支中提取更改，我们可以使用 <code>git pull origin master</code> 。如果我们克隆存储库，默认远程名称通常为 <code>origin</code> ，但如果您自定义它，它可能会有所不同。</p>
<p>如果有任何冲突，Git 会通知我们，我们需要手动解决冲突。如果合并成功，我们的本地分支将使用远程存储库中的最新更改进行更新。</p>
<p>在拉取更改之前，建议提交或存储本地更改以避免冲突。如果您有未提交的更改，Git 可能会拒绝拉取，直到您提交或存储它们。</p>
<h2 id="29-如何显示两次提交之间的差异">29. 如何显示两次提交之间的差异？</h2>
<p>要显示两个 Git 提交之间的差异，可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> git diff &lt;commit1&gt; &lt;commit2&gt;
</span></span></code></pre></div><h2 id="30-如何在-git-中恢复提交">30. 如何在 Git 中恢复提交？</h2>
<p>要恢复提交并创建一个撤消更改的新提交，我们可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> git revert &lt;commit-hash&gt;
</span></span></code></pre></div><p>将 替换为您要恢复的提交哈希。 Git 将创建一个新的提交来撤消在指定提交中所做的更改。</p>
<h2 id="31如何查看-git-中的提交历史记录">31.如何查看 Git 中的提交历史记录？</h2>
<p>Git 中的每个分支都维护自己的提交历史记录。要访问和查看与特定分支关联的提交，我们可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> git log branch-name
</span></span></code></pre></div><p>以下是使用“git log”的不同场景：</p>
<ul>
<li>不指定分支名称：“git log”显示当前签出的分支的提交历史记录。如果没有签出分支，它会显示整个存储库的提交历史记录。</li>
<li>使用特定分支名称：“git log ”显示指定分支的提交历史记录，包括其父分支共享的任何提交。</li>
</ul>
<h2 id="32-如何取消暂存文件">32. 如何取消暂存文件？</h2>
<p>要在 Git 中取消暂存文件，我们可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git reset HEAD -- path/to/file
</span></span></code></pre></div><p>与递归使用“git add”类似，您可以按目录取消暂存文件或执行批量取消暂存操作。要立即取消所有内容，请从存储库的根目录运行以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git reset HEAD -- .
</span></span></code></pre></div><h2 id="33-如何从远程存储库中删除文件">33. 如何从远程存储库中删除文件？</h2>
<p>要从远程存储库中删除文件，可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> git rm &lt;file&gt;
</span></span></code></pre></div><p>这将从工作目录和 Git 存储库中删除该文件。删除文件后，您需要提交并推送更改以更新远程存储库。</p>
<h2 id="结论">结论</h2>
<p>总之，这份关于常见 Git 面试问题和答案的综合指南对 Git 版本控制系统中的基本概念和实践进行了彻底的探索。</p>
<p>通过深入研究存储库管理、分支、合并、解决冲突和协作工作流程等主题，您可以对 Git 的关键方面有深入的了解。</p>
<p>快乐学习！</p>
<p>原文链接：<a href="https://howtodoinjava.com/interview-questions/git-interview-questions/">Git Interview Questions for DevOps and Testers </a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git Flow分支模型和使用</title>
      <link>https://blog.chensoul.com/posts/2023/05/11/git-flow-model-and-usage/</link>
      <pubDate>Thu, 11 May 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/11/git-flow-model-and-usage/</guid>
      <description>介绍 Git Flow 是由 Vincent Driessen 在 2010 年提出的一种 Git 工作流。在这之前，Git 没有一个明确的标准工作流，导致团队在使用 Git 时往往会遇到一些问题，如分支管理、版本控制等。为了解决这些问题，Vincent Driessen 提出了 Git Flow 分支模型，成为了 Git 在实际应用中的一种标准工作流。
随着时间的推移，Git Flow 也在不断发展和完善。在 2011 年，Atlassian 发布了 SourceTree，这是一款图形化的 Git 客户端，支持 Git Flow 分支模型。在 2013 年，Git Flow 的一些开发者发布了 Git Flow AVH Edition，这是 Git Flow 的一个增强版本，提供了更多的功能和选项。此外，Git Flow 还得到了其他开源工具和平台的支持，如 GitHub、GitLab 等。
Git Flow 分支模型 Git Flow 分支模型定义了一种标准的 Git 分支模型，它将代码分为两个长期分支（master 和 develop）和三个短期分支（feature、release 和 hotfix），使得团队可以更好地管理代码的版本和发布。
以下是 Git Flow 分支模型的详细介绍：
master 分支 master 分支是代码库的主分支，它包含了所有已发布的代码和版本。所有代码都应该在该分支上进行测试和验证，以确保代码的质量和稳定性。master分支只能通过合并release或hotfix分支来更新。 develop 分支 develop 分支是代码库的开发分支，它包含了所有开发中的代码和功能。所有新的代码都应该在该分支上进行开发和测试，以确保代码的可靠性和稳定性。develop分支只能通过合并feature分支来更新。 feature 分支 feature 分支是为开发新的功能或修复 bug 而创建的临时分支。每个feature分支都是从develop分支分离出来的，开发完成后会合并回develop分支。feature 分支的命名应该清晰明确，以反映该分支所涉及的功能或问题。 release 分支 release 分支是为发布新版本而创建的临时分支。每个release分支都是从develop分支分离出来的，发布完成后会合并回develop分支和master分支。在 release 分支上可以进行一些小的修复和调整，以确保发布的代码的质量和稳定性。 hotfix 分支 hotfix 分支是为快速修复生产环境中的问题而创建的临时分支。每个 hotfix 分支都是从 master 分支分离出来的，修复完成后会合并回 develop 分支和 master 分支。hotfix分支的优先级比其他分支更高，因为它们需要尽快修复生产环境中的问题。 根据上面的理论，我们来实际操作一遍。首先，是 develop 分支创建一个 feature 分支。</description>
      <content:encoded><![CDATA[<h2 id="介绍">介绍</h2>
<p><a href="https://nvie.com/posts/a-successful-git-branching-model/">Git Flow</a> 是由 Vincent Driessen 在 2010 年提出的一种 Git 工作流。在这之前，Git 没有一个明确的标准工作流，导致团队在使用 Git 时往往会遇到一些问题，如分支管理、版本控制等。为了解决这些问题，Vincent Driessen 提出了 Git Flow 分支模型，成为了 Git 在实际应用中的一种标准工作流。</p>
<p>随着时间的推移，Git Flow 也在不断发展和完善。在 2011 年，Atlassian 发布了 SourceTree，这是一款图形化的 Git 客户端，支持 Git Flow 分支模型。在 2013 年，Git Flow 的一些开发者发布了 Git Flow AVH Edition，这是 Git Flow 的一个增强版本，提供了更多的功能和选项。此外，Git Flow 还得到了其他开源工具和平台的支持，如 GitHub、GitLab 等。</p>
<h2 id="git-flow-分支模型">Git Flow 分支模型</h2>
<p>Git Flow 分支模型定义了一种标准的 Git 分支模型，它将代码分为两个长期分支（master 和 develop）和三个短期分支（feature、release 和 hotfix），使得团队可以更好地管理代码的版本和发布。</p>
<p>以下是 Git Flow 分支模型的详细介绍：</p>
<ol>
<li>master 分支
master 分支是代码库的主分支，它包含了所有已发布的代码和版本。所有代码都应该在该分支上进行测试和验证，以确保代码的质量和稳定性。<code>master分支只能通过合并release或hotfix分支来更新</code>。</li>
<li>develop 分支
develop 分支是代码库的开发分支，它包含了所有开发中的代码和功能。所有新的代码都应该在该分支上进行开发和测试，以确保代码的可靠性和稳定性。<code>develop分支只能通过合并feature分支来更新</code>。</li>
<li>feature 分支
feature 分支是为开发新的功能或修复 bug 而创建的临时分支。<code>每个feature分支都是从develop分支分离出来的，开发完成后会合并回develop分支</code>。feature 分支的命名应该清晰明确，以反映该分支所涉及的功能或问题。</li>
<li>release 分支
release 分支是为发布新版本而创建的临时分支。<code>每个release分支都是从develop分支分离出来的，发布完成后会合并回develop分支和master分支</code>。在 release 分支上可以进行一些小的修复和调整，以确保发布的代码的质量和稳定性。</li>
<li>hotfix 分支
hotfix 分支是为快速修复生产环境中的问题而创建的临时分支。每个 hotfix 分支都是从 master 分支分离出来的，修复完成后会合并回 develop 分支和 master 分支。<code>hotfix分支的优先级比其他分支更高，因为它们需要尽快修复生产环境中的问题。</code></li>
</ol>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/git-model@2x.png" alt="img"  /></p>
<p>根据上面的理论，我们来实际操作一遍。首先，是 develop 分支创建一个 feature 分支。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout -b feature-test develop
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s2">&#34;feature-test&#34;</span>
</span></span></code></pre></div><p>将 feature 分支的修改合并到 develop 分支，然后删除 feature 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;develop&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git merge --no-ff feature-test
</span></span><span class="line"><span class="cl">Updating ea1b82a..05e9557
</span></span><span class="line"><span class="cl"><span class="o">(</span>Summary of changes<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git branch -d feature-test
</span></span><span class="line"><span class="cl">Deleted branch feature-test <span class="o">(</span>was 05e9557<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git push origin develop
</span></span></code></pre></div><p>合并分支时，添加<code>--no-ff</code> 参数和不添加的区别：</p>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/merge-without-ff@2x.png" alt="img"  /></p>
<p>从 develop 分支创建一个 release 分支，并将版本号改为 1.2 ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout -b release-1.2 develop
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s2">&#34;release-1.2&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ./bump-version.sh 1.2
</span></span><span class="line"><span class="cl">Files modified successfully, version bumped to 1.2.
</span></span><span class="line"><span class="cl">$ git commit -a -m <span class="s2">&#34;Bumped version number to 1.2&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>release-1.2 74d9424<span class="o">]</span> Bumped version number to 1.2
</span></span><span class="line"><span class="cl"><span class="m">1</span> files changed, <span class="m">1</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">1</span> deletions<span class="o">(</span>-<span class="o">)</span>
</span></span></code></pre></div><p>release 分支完成开发之后，将 release 分支合并到 master 分支，并创建一个标签：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout master
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;master&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.2
</span></span><span class="line"><span class="cl">Merge made by recursive.
</span></span><span class="line"><span class="cl"><span class="o">(</span>Summary of changes<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git tag -a 1.2
</span></span></code></pre></div><p>将 release 分支合并到 develop 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;develop&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.2
</span></span><span class="line"><span class="cl">Merge made by recursive.
</span></span><span class="line"><span class="cl"><span class="o">(</span>Summary of changes<span class="o">)</span>
</span></span></code></pre></div><p>最后删除 release 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git branch -d release-1.2
</span></span><span class="line"><span class="cl">Deleted branch release-1.2 <span class="o">(</span>was ff452fe<span class="o">)</span>.
</span></span></code></pre></div><p>对于 hoftfix 分支，操作步骤和 release 分支类似，故不在赘述。</p>
<h2 id="git-flow-工具">git-flow 工具</h2>
<p>git-flow 工具可以简化上面的操作步骤，关于 git-flow 的介绍可以参考文章：<a href="https://jeffkreeftmeijer.com/git-flow/">Using git-flow to automate your git branching workflow</a>。</p>
<p>macos 上安装 git-flow：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install git-flow
</span></span></code></pre></div><p>git-flow 首先需要初始化，如果不存在 develop 分支，则会新建一个 develop 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow init
</span></span><span class="line"><span class="cl">No branches exist yet. Base branches must be created now.
</span></span><span class="line"><span class="cl">Branch name <span class="k">for</span> production releases: <span class="o">[</span>master<span class="o">]</span>
</span></span><span class="line"><span class="cl">Branch name <span class="k">for</span> <span class="s2">&#34;next release&#34;</span> development: <span class="o">[</span>develop<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">How to name your supporting branch prefixes?
</span></span><span class="line"><span class="cl">Feature branches? <span class="o">[</span>feature-<span class="o">]</span>
</span></span><span class="line"><span class="cl">Release branches? <span class="o">[</span>release-<span class="o">]</span>
</span></span><span class="line"><span class="cl">Hotfix branches? <span class="o">[</span>hotfix/<span class="o">]</span>
</span></span><span class="line"><span class="cl">Support branches? <span class="o">[</span>support/<span class="o">]</span>
</span></span><span class="line"><span class="cl">Version tag prefix? <span class="o">[]</span>
</span></span></code></pre></div><h3 id="feature-分支">feature 分支</h3>
<p>开发一个新功能，创建一个新分支 foo</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="err">$</span> <span class="nx">git</span> <span class="nx">flow</span> <span class="nx">feature</span> <span class="nx">start</span> <span class="nx">foo</span>
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#切换到develop分支,确保新的 feature 分支是基于最新的 develop 分支创建的。</span>
</span></span><span class="line"><span class="cl">$ git checkout -b feature-foo develop
</span></span></code></pre></div><p>取消正在进行中的功能分支，并且会将分支删除</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow feature delete foo
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git branch -D feature-foo
</span></span></code></pre></div><p>foo 功能自测通过后，合并到 develop</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow feature finish foo
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">//切换到 develop 分支
</span></span><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl">//将 feature-foo 分支中的更改合并到 develop 分支。 --no-ff 参数将保留 foo 分支的commit记录。
</span></span><span class="line"><span class="cl">$ git merge --no-ff feature-foo
</span></span><span class="line"><span class="cl">//删除已完成的分支
</span></span><span class="line"><span class="cl">$ git branch -d feature-foo
</span></span></code></pre></div><h3 id="release-分支">release 分支</h3>
<p>当所有新的功能和必要的修复已经被彻底的测试过了，那就开始生成一个新的 release , 在此之后不能添加新功能，只有错误修复、文档生成和其他面向发布的任务应该在该分支中进行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 1.0.0 是版本号</span>
</span></span><span class="line"><span class="cl">$ git flow release start 1.0.0
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 从 develop 分支 创建release分支</span>
</span></span><span class="line"><span class="cl">$ git checkout -b release-1.0.0 develop
</span></span></code></pre></div><p>取消正在进行中的发布分支，并且会将分支删除。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow release delete 1.0.0
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch -D release-1.0.0
</span></span></code></pre></div><p>添加完发布文档之后，完成 release</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow release finish 1.0.0
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#切换到 develop 分支。</span>
</span></span><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl"><span class="c1">#将 release-1.0.0 分支合并到 develop 分支，--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.0.0
</span></span><span class="line"><span class="cl"><span class="c1">#创建一个名为 1.0.0 的标签</span>
</span></span><span class="line"><span class="cl">$ git tag -a 1.0.0 -m <span class="s2">&#34;Release 1.0.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#切换到 master 分支。</span>
</span></span><span class="line"><span class="cl">$ git checkout master
</span></span><span class="line"><span class="cl"><span class="c1">#将 release-1.0.0 分支合并到 master 分支，--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.0.0
</span></span><span class="line"><span class="cl"><span class="c1">#删除 release-1.0.0 分支。</span>
</span></span><span class="line"><span class="cl">$ git branch -d release-1.0.0
</span></span></code></pre></div><h3 id="hotfixes-分支">Hotfixes 分支</h3>
<p>线上发生问题的时候，先回滚到之前的稳定版本，稳定局势
然后创建热修复分支开始改 BUG</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow hotfix start 1.0.1
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#从master分支 创建一个hotfix/1.0.1分支</span>
</span></span><span class="line"><span class="cl">$ git checkout -b hotfix/1.0.1 foo master
</span></span></code></pre></div><p>紧急修复完毕</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow hotfix finish 1.0.1
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#切换 master 分支</span>
</span></span><span class="line"><span class="cl">$ git checkout master
</span></span><span class="line"><span class="cl"><span class="c1">#合并热修复分支到master,--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff hotfix/ohno
</span></span><span class="line"><span class="cl"><span class="c1">#创建一个名为 1.0.1 的标签</span>
</span></span><span class="line"><span class="cl">$ git tag 1.0.1
</span></span><span class="line"><span class="cl"><span class="c1">#切换到 develop 分支</span>
</span></span><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl"><span class="c1">#合并热修复分支到 develop ,--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff hotfix/1.0.1
</span></span><span class="line"><span class="cl"><span class="c1">#删除热修复分支</span>
</span></span><span class="line"><span class="cl">$ git branch -d hotfix/1.0.1
</span></span></code></pre></div><h2 id="git-flow-avh-edition">git-flow (AVH Edition)</h2>
<p>Git-flow (AVH Edition)是 Git Flow 的一个增强版本，由一些 Git Flow 的开发者开发和维护。Git-flow (AVH Edition)在保留 Git Flow 基本思想的前提下，增加了一些新的功能和选项，使得 Git Flow 更加灵活和适用于不同的团队和项目。</p>
<p>Git-flow (AVH Edition)的主要增强功能包括：</p>
<ol>
<li>支持 git-flow init 命令，可以在一个新的 Git 仓库中快速初始化 Git Flow。</li>
<li>支持 git flow feature pull 命令，可以拉取其他团队成员的 feature 分支。</li>
<li>支持 git flow feature publish 命令，可以将 feature 分支发布到远程仓库。</li>
<li>支持 git flow hotfix finish 命令，可以在修复生产环境问题时自动合并到 develop 分支和 master 分支并发布新版本。</li>
<li>支持 git flow support 分支，可以为旧版本提供长期支持。</li>
<li>允许使用 Hooks and Filters 来扩展和自定义 Git Flow 的行为。</li>
</ol>
<p>除了以上功能之外，Git-flow (AVH Edition)还提供了更多的选项和配置，使得团队可以根据不同的需求和情况来自定义 Git Flow 的分支模型和工作流程。</p>
<h3 id="初始化">初始化</h3>
<p>使用下面命令初始化 git fow，<code>-d</code> 是可选参数，表示使用默认参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow init <span class="o">[</span>-d<span class="o">]</span>
</span></span></code></pre></div><h3 id="创建-featurereleasehotfixsupport-分支">创建 feature/release/hotfix/support 分支</h3>
<p>查看、开始、完成、删除 feature 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow feature
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># &lt;base&gt; 参数必须是分支名称，缺失时，默认为 develop 分支</span>
</span></span><span class="line"><span class="cl">git flow feature start &lt;name&gt; <span class="o">[</span>&lt;base&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git flow feature finish &lt;name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git flow feature delete &lt;name&gt;
</span></span></code></pre></div><p>发布或者跟踪 feature 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#如果当前在 feature/name 分支，则可以省略 &lt;name&gt; 参数</span>
</span></span><span class="line"><span class="cl">git flow feature publish &lt;name&gt;
</span></span><span class="line"><span class="cl">git flow feature track &lt;name&gt;
</span></span></code></pre></div><p>当 feature 分支发布之后，其他人可以拉取该分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git pull
</span></span><span class="line"><span class="cl">git checkout feature/&lt;name&gt;
</span></span></code></pre></div><p>类似地，查看、开始、完成、删除 release 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow release
</span></span><span class="line"><span class="cl">git flow release start &lt;name&gt; <span class="o">[</span>&lt;base&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">git flow release finish &lt;name&gt;
</span></span><span class="line"><span class="cl">git flow release delete &lt;name&gt;
</span></span></code></pre></div><p>类似地，查看、开始、完成、删除 hotfix 分支：</p>
<pre tabindex="0"><code>git flow hotfix
git flow hotfix start &lt;name&gt; [&lt;base&gt;]
git flow hotfix finish &lt;name&gt;
git flow hotfix delete &lt;name&gt;
</code></pre><p>查看、开始 support 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow support
</span></span><span class="line"><span class="cl">git flow support start &lt;name&gt; &lt;base&gt;
</span></span></code></pre></div><h3 id="hooks-和-filters">Hooks 和 Filters</h3>
<p>Git-flow (AVH Edition)允许使用 Hooks and Filters 来扩展和自定义 Git Flow 的行为。Hooks 和 Filters 是 Git Flow 中的两个关键概念，它们可以在 Git Flow 的不同阶段执行自定义脚本或命令，从而实现 Git Flow 的高度定制化。</p>
<p>Hooks 是一些脚本或命令，它们会在 Git Flow 的不同阶段被调用。Git Flow (AVH Edition)支持以下 Hooks：</p>
<ol>
<li>git-flow-init: 该 Hook 会在 git-flow init 命令执行时被调用。</li>
<li>git-flow-feature-start: 该 Hook 会在创建新的 feature 分支时被调用。</li>
<li>git-flow-feature-finish: 该 Hook 会在完成 feature 分支时被调用。</li>
<li>git-flow-release-start: 该 Hook 会在创建新的 release 分支时被调用。</li>
<li>git-flow-release-finish: 该 Hook 会在完成 release 分支时被调用。</li>
<li>git-flow-hotfix-start: 该 Hook 会在创建新的 hotfix 分支时被调用。</li>
<li>git-flow-hotfix-finish: 该 Hook 会在完成 hotfix 分支时被调用。</li>
</ol>
<p>Filters 是一些命令或参数，它们会在 Git Flow 的不同阶段被过滤或修改。Git Flow (AVH Edition)支持以下 Filters：</p>
<ol>
<li>git-flow-feature-start-message: 可以用于修改 feature 分支创建时的提交信息。</li>
<li>git-flow-feature-finish-message: 可以用于修改 feature 分支完成时的提交信息。</li>
<li>git-flow-release-start-message: 可以用于修改 release 分支创建时的提交信息。</li>
<li>git-flow-release-finish-message: 可以用于修改 release 分支完成时的提交信息。</li>
<li>git-flow-hotfix-start-message: 可以用于修改 hotfix 分支创建时的提交信息。</li>
<li>git-flow-hotfix-finish-message: 可以用于修改 hotfix 分支完成时的提交信息。</li>
</ol>
<p>下面是一些使用 Hooks 和 Filters 的例子：</p>
<ol>
<li>使用 git-flow-init Hook</li>
</ol>
<p>如果需要在执行 git-flow init 命令时执行一些自定义脚本，可以使用 git-flow-init Hook。假设我们想在 git-flow init 命令执行时输出一些信息，可以在<code>.git/hooks/git-flow-init</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Executing git-flow-init Hook&#34;</span>
</span></span></code></pre></div><ol start="2">
<li>使用 git-flow-feature-start Hook</li>
</ol>
<p>如果需要在创建新的 feature 分支时执行一些自定义脚本，可以使用 git-flow-feature-start Hook。假设我们想在创建新的 feature 分支时自动为该分支设置一些默认值，可以在<code>.git/hooks/git-flow-feature-start</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Set default values for feature branch</span>
</span></span><span class="line"><span class="cl">git config branch.<span class="nv">$GIT_BRANCH_NAME</span>.some_config_value <span class="s2">&#34;default_value&#34;</span>
</span></span></code></pre></div><ol start="3">
<li>使用 git-flow-feature-finish-message Filter</li>
</ol>
<p>如果需要修改 feature 分支完成时的提交信息，可以使用 git-flow-feature-finish-message Filter。假设我们想在 feature 分支完成时强制要求填写提交信息，可以在<code>.git/config</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">gitflow</span> <span class="s2">&#34;feature&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">finishmessage</span> <span class="p">=</span> <span class="nx">Please</span> <span class="nx">provide</span> <span class="nx">a</span> <span class="nx">meaningful</span> <span class="nx">commit</span> <span class="nx">message</span> <span class="nx">for</span> <span class="nx">the</span> <span class="nx">feature</span> <span class="nx">branch</span>
</span></span></code></pre></div><ol start="4">
<li>使用 git-flow-hotfix-start Hook</li>
</ol>
<p>如果需要在创建新的 hotfix 分支时执行一些自定义脚本，可以使用 git-flow-hotfix-start Hook。假设我们想在创建新的 hotfix 分支时自动为该分支设置一些默认值，可以在<code>.git/hooks/git-flow-hotfix-start</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Set default values for hotfix branch</span>
</span></span><span class="line"><span class="cl">git config branch.<span class="nv">$GIT_BRANCH_NAME</span>.some_config_value <span class="s2">&#34;default_value&#34;</span>
</span></span></code></pre></div><ol start="5">
<li>使用 git-flow-hotfix-finish Hook</li>
</ol>
<p>在<code>.git/hooks/git-flow-hotfix-finish</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Update version number in package.json</span>
</span></span><span class="line"><span class="cl"><span class="nv">VERSION</span><span class="o">=</span><span class="k">$(</span>cat package.json <span class="p">|</span> jq -r <span class="s1">&#39;.version&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">NEW_VERSION</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$VERSION</span> <span class="p">|</span> awk -F. <span class="s1">&#39;{$NF++;print}&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/ /./g&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;&#39;</span> <span class="s2">&#34;s/\&#34;version\&#34;: \&#34;</span><span class="nv">$VERSION</span><span class="s2">\&#34;/\&#34;version\&#34;: \&#34;</span><span class="nv">$NEW_VERSION</span><span class="s2">\&#34;/g&#34;</span> package.json
</span></span></code></pre></div><blockquote>
<p>该脚本用于修改前端项目中的版本号。</p>
</blockquote>
<h2 id="github-flow-模型">GitHub Flow 模型</h2>
<p>GitHub Flow 是一种基于 GitHub 的分支模型和代码开发工作流程，它是一个简单而灵活的模型，在敏捷开发和持续交付方面具有很高的效率。相比于 Git Flow，GitHub Flow 更加适合团队和开发者进行快速迭代和快速上线。</p>
<p>GitHub Flow 的分支模型非常简单：只有一个主分支（通常是 master 分支）和多个特性分支。主分支始终处于稳定状态并用于生产环境。每个特性分支用于开发新功能或修复 bug，并在开发人员完成相应的开发和测试工作后合并到主分支中。</p>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/github-flow.png" alt="github flow"  /></p>
<p>GitHub Flow 遵循以下 6 条原则：</p>
<ol>
<li><code>master</code> 分支永远是随时可部署发布的</li>
<li>需求新增基于 <code>master</code> 分支，并创建一个语义化分支</li>
<li>定期推送本地分支到远端</li>
<li>合并到 <code>master</code> 需要提 <code>PR</code></li>
<li><code>PR</code> 一旦经过 <code>code review</code> 无误后即可合并到 <code>master</code></li>
<li><code>master</code> 一旦接收到合并请求，即可立即部署发布</li>
</ol>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/github-flow-whole.png" alt="github-flow-whole"  /></p>
<p>GitHub Flow 的代码开发工作流程如下：</p>
<ol>
<li>创建特性分支：从主分支中创建一个新的特性分支，用于开发新功能或修复 bug。</li>
<li>开发和测试：在特性分支上进行开发和测试，确保代码符合质量标准，并通过自动化测试。</li>
<li>发起合并请求：将特性分支合并到主分支中，发起一个合并请求（pull request），并邀请其他开发者进行代码审查和讨论。</li>
<li>代码审查：其他开发者对代码进行审查和讨论，提出意见和建议，并确保代码符合质量标准和最佳实践。</li>
<li>合并代码：在经过审查和讨论后，将特性分支合并到主分支中，并将代码部署到生产环境。</li>
<li>部署代码：在合并到主分支后，使用自动化部署工具将代码部署到生产环境。</li>
</ol>
<h2 id="gitlab-flow-模型">Gitlab flow 模型</h2>
<p>GitLab Flow 是一个基于 GitLab 的分支模型和开发工作流程，旨在支持敏捷开发和持续交付。</p>
<p><code>GitLab</code> 在 2014 年提出 <code>11</code> 条最佳实践，更多请点击<a href="https://about.gitlab.com/topics/version-control/what-are-gitlab-flow-best-practices/">这里</a>，其相对 <code>GitHub</code> 增加了环境分支，且代码必须由<code>上游</code>（<code>master</code>）向<code>下游</code>（<code>staging</code>）发展，并且针对持续发布和版本发布都提出了相应的准则，下面是其大致流程图：</p>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/gilab-flow-cidi.png" alt="img"  /></p>
<p>GitLab Flow 的主要特点包括：</p>
<ol>
<li>简单的分支模型：GitLab Flow 使用一个简单的分支模型，包括一个主分支（通常命名为“master”或“production”）和一个开发分支（通常命名为“develop”或“staging”）。特性分支从开发分支创建，并在特性或错误修复完成并通过测试后合并回开发分支中。</li>
<li>持续集成和交付：GitLab Flow 强调持续集成和交付（CI/CD），这意味着每次对代码的更改都会自动构建、测试和部署到测试环境或生产环境（如果测试通过）。</li>
<li>代码审查：GitLab Flow 鼓励进行代码审查，这意味着每次对代码的更改都会由至少一个其他开发人员进行审查，以确保其符合质量标准并不会引入任何安全漏洞。</li>
<li>合并请求：GitLab Flow 使用合并请求来管理将代码更改合并到主分支的过程。合并请求允许开发人员在将更改合并到主分支之前对其进行审查和讨论。</li>
<li>环境管理：GitLab Flow 提供高级的环境管理功能，允许团队创建和管理不同的开发、测试、暂存和生产环境。</li>
</ol>
<blockquote>
<p>GitLab Flow 提供了高级的环境管理功能，可以帮助团队更好地管理不同的开发、测试、暂存和生产环境。以下是使用 GitLab Flow 进行环境管理的一些方法：</p>
<ol>
<li>创建不同的环境分支：在 GitLab Flow 中，可以为不同的环境创建分支。例如，可以创建一个名为“develop”的开发分支，一个名为“staging”的暂存分支，和一个名为“production”的生产分支。这些分支可以帮助团队更好地管理不同环境的代码，确保每个环境都有自己的代码版本。</li>
<li>配置环境变量：在 GitLab 中，可以为每个环境设置不同的环境变量。这些环境变量可以用于配置不同环境中的应用程序和服务，例如数据库连接字符串、API 密钥等。通过设置正确的环境变量，可以确保应用程序在不同环境中正确运行。</li>
<li>自动化部署和测试：GitLab Flow 支持自动化部署和测试，可以帮助团队更快地部署代码到不同环境中。可以使用 GitLab 的 CI/CD 管道来自动化测试和部署过程，并将代码推送到正确的环境分支中。</li>
<li>环境监控和报告：GitLab Flow 还支持环境监控和报告功能，可以帮助团队更好地了解不同环境的运行状况和性能。可以使用 GitLab 的监控和报告工具来监视不同环境的性能指标、错误率等，并及时发现和解决问题。</li>
</ol>
</blockquote>
<p>GitLab Flow 的分支模型如下：</p>
<ol>
<li>主分支：主分支始终处于稳定状态，并用于生产环境。在 GitLab Flow 中，主分支通常是 master 分支或 production 分支。</li>
<li>特性分支：特性分支用于开发新功能或修复 bug，并从主分支中创建。在 GitLab Flow 中，特性分支通常以 feature/或 fix/为前缀。</li>
<li>集成分支：集成分支用于将特性分支集成到主分支中，并进行测试和部署。在 GitLab Flow 中，集成分支通常是 develop 分支或 staging 分支。</li>
<li>发布分支：发布分支用于将特性分支和集成分支的代码发布到生产环境中。在 GitLab Flow 中，发布分支通常是 release/为前缀的分支。</li>
</ol>
<p>GitLab Flow 的开发工作流程如下：</p>
<ol>
<li>创建特性分支：从主分支中创建一个新的特性分支，用于开发新功能或修复 bug。</li>
<li>开发和测试：在特性分支上进行开发和测试，确保代码符合质量标准，并通过自动化测试。</li>
<li>合并到集成分支：将特性分支合并到集成分支中，并进行集成测试和自动化部署。</li>
<li>发布到生产环境：将集成分支的代码发布到生产环境中，并进行最终测试和部署。</li>
<li>合并到主分支：在发布到生产环境后，将集成分支合并到主分支中，并将代码部署到生产环境。</li>
</ol>
<p>GitLab Flow 强调 CI/CD 集成和测试自动化，以确保代码质量和快速迭代。它还支持自动化部署和环境管理，以帮助开发人员更轻松地管理不同环境和部署代码。GitLab Flow 是一个灵活和强大的开发工作流程，适用于各种类型的项目和团队。</p>
<h2 id="gitlab-flowgit-flow-和-github-flow">GitLab Flow、Git Flow 和 GitHub Flow</h2>
<p>GitLab Flow、Git Flow 和 GitHub Flow 都是三种常见的基于 Git 的工作流程。下面是 GitLab Flow 与其他工作流程的主要区别：</p>
<ol>
<li>GitLab Flow 与 Git Flow 的比较：</li>
</ol>
<ul>
<li>
<p>GitLab Flow 比 Git Flow 更简单和更灵活。Git Flow 有一个更复杂的分支模型，包含多个长期存在的分支，而 GitLab Flow 只使用几个主要分支和特性分支。</p>
</li>
<li>
<p>GitLab Flow 强调持续集成和持续部署（CI/CD），鼓励频繁合并到主要分支。Git Flow 更注重版本控制和发布管理。</p>
</li>
<li>
<p>GitLab Flow 与 GitLab 内置的 CI/CD 管道更紧密地集成在一起，更容易自动化开发工作流程。</p>
</li>
</ul>
<ol start="2">
<li>GitLab Flow 与 GitHub Flow 的比较：</li>
</ol>
<ul>
<li>GitLab Flow 和 GitHub Flow 有许多相似之处，例如它们都以 GitHub 或 GitLab 作为中央仓库，使用特性分支进行开发。</li>
<li>GitLab Flow 强调 CI/CD 集成和测试自动化，而 GitHub Flow 更注重代码审查和协作。</li>
<li>GitLab Flow 还提供更高级的环境管理、部署和监控功能，更适合于大型、复杂的项目。</li>
</ul>
<p>总体而言，GitLab Flow 比 Git Flow 更简单和更灵活，强调 CI/CD 集成和自动化。与 GitHub Flow 相比，GitLab Flow 提供更高级的环境管理和部署功能，更适合于大型、复杂的项目。选择哪种工作流程最终取决于项目和开发团队的具体需求和要求。</p>
<h2 id="其他-flow">其他 flow</h2>
<ul>
<li>TrunkBased</li>
<li>OneFlow</li>
<li>AoneFlow</li>
</ul>
<h2 id="总结">总结</h2>
<p>目前公司代码部署在自建的 gitlab 上面，对于公司的项目，个人倾向于使用 git-flow 分支模型，并且使用 git-flow (AVH Edition) 来简化操作。</p>
<p>目前，我参与的大多数项目都是 java 项目并且使用 maven 进行构建。</p>
<p>在 Maven 项目中，可以使用 Maven 版本控制器来区分 release 版本和 snapshot 版本。</p>
<ul>
<li>
<p><strong>Release 版本</strong></p>
<p>对于 Git Flow 中的 release 分支，通常用于为生产环境准备代码。</p>
<p>在 Maven 项目中，可以使用 Maven Release 插件来自动化创建和发布 release 版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn release:prepare
</span></span><span class="line"><span class="cl">mvn release:perform
</span></span></code></pre></div><p>使用这些命令，Maven Release 插件会自动更新项目版本号、创建 tag、构建 release 版本，并发布到 Maven 仓库中。发布的版本号不包含 <code>-SNAPSHOT</code> 后缀。</p>
<p>或者，使用 <code>mvn versions</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set -DnewVersion<span class="o">=</span>1.0.0-SNAPSHOT
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div></li>
<li>
<p><strong>Snapshot 版本</strong></p>
<p>对于 Git Flow 中的 feature 和 develop 分支，通常用于开发和测试新功能或 bug 修复，这些分支使用 snapshot 版本。在 Maven 中，snapshot 版本的版本号包含 <code>-SNAPSHOT</code> 后缀，表示当前版本是正在开发的版本。</p>
</li>
</ul>
<p>对于这些项目，git-flow 操作步骤如下：</p>
<p>1、初始化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow init -d
</span></span></code></pre></div><p>2、开始 feature 分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow feature start <span class="nb">test</span>
</span></span></code></pre></div><p>设置 maven 项目中版本为 snapshot 版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set -DnewVersion<span class="o">=</span>1.0.0-SNAPSHOT
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div><p>对于 maven 多模块项目，如果使用 revision 来统一定义版本号，则使用下面命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set-property -Dproperty<span class="o">=</span>revision -DnewVersion<span class="o">=</span>1.0.0-SNAPSHOT
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div><p>3、本地在 feature 分支上完成一些开发之后，完成 feature 分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow feature finish <span class="nb">test</span>
</span></span></code></pre></div><p>4、开始 release 分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow release start 1.0.0
</span></span></code></pre></div><p>5、本地在 release 分支上完成一些开发之后，完成 feature 分支</p>
<p>设置 maven 项目中版本为 release 版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set -DnewVersion<span class="o">=</span>1.0.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div><p>对于 maven 多模块项目，如果使用 revision 来统一定义版本号，则使用下面命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set-property -Dproperty<span class="o">=</span>revision -DnewVersion<span class="o">=</span>1.0.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div><p>另外，对于多模块项目，需要在每个模块执行下面命令将 jar 推送到 maven 中央仓库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn deploy -DskipTests
</span></span></code></pre></div><p>然后完成分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow release finish 1.0.0
</span></span></code></pre></div><p>6、推送主分支和开发分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git push origin develop
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git checkout main
</span></span><span class="line"><span class="cl">git push origin main
</span></span></code></pre></div><p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>我的VPS服务部署记录</title>
      <link>https://blog.chensoul.com/posts/2023/01/25/notes-about-deploy-services-in-vps/</link>
      <pubDate>Wed, 25 Jan 2023 10:38:34 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/01/25/notes-about-deploy-services-in-vps/</guid>
      <description>服务器设置 [可选] 设置系统 Swap 交换分区
因为 vps 服务器的运行内存很小，所以这里先设置下 Swap
# 1GB RAM with 2GB Swap sudo fallocate -l 2G /swapfile &amp;amp;&amp;amp; \ sudo dd if=/dev/zero of=/swapfile bs=1024 count=2097152 &amp;amp;&amp;amp; \ sudo chmod 600 /swapfile &amp;amp;&amp;amp; \ sudo mkswap /swapfile &amp;amp;&amp;amp; \ sudo swapon /swapfile &amp;amp;&amp;amp; \ echo &amp;#34;/swapfile swap swap defaults 0 0&amp;#34; | sudo tee -a /etc/fstab &amp;amp;&amp;amp; \ sudo swapon --show &amp;amp;&amp;amp; \ sudo free -h 安装并生成证书 curl https://get.</description>
      <content:encoded><![CDATA[<h2 id="服务器设置">服务器设置</h2>
<p><strong>[可选] 设置系统 Swap 交换分区</strong></p>
<p>因为 vps 服务器的运行内存很小，所以这里先设置下 Swap</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 1GB RAM with 2GB Swap</span>
</span></span><span class="line"><span class="cl">sudo fallocate -l 2G /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/swapfile <span class="nv">bs</span><span class="o">=</span><span class="m">1024</span> <span class="nv">count</span><span class="o">=</span><span class="m">2097152</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo chmod <span class="m">600</span> /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo mkswap /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo swapon /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="nb">echo</span> <span class="s2">&#34;/swapfile swap swap defaults 0 0&#34;</span> <span class="p">|</span> sudo tee -a /etc/fstab <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo swapon --show <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo free -h
</span></span></code></pre></div><h2 id="安装并生成证书">安装并生成证书</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl https://get.acme.sh <span class="p">|</span> sh -s <span class="nv">email</span><span class="o">=</span>czj.june@gmail.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.acme.sh/acme.sh --issue --server letsencrypt --dns dns_aws -d chensoul.com -d <span class="s1">&#39;*.chensoul.com&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.acme.sh/acme.sh --installcert -d chensoul.com -d *.chensoul.com  --cert-file /usr/local/nginx/ssl/chensoul.com.cer --key-file /usr/local/nginx/ssl/chensoul.com.key --fullchain-file /usr/local/nginx/ssl/fullchain.cer --ca-file /usr/local/nginx/ssl/ca.cer   --reloadcmd <span class="s2">&#34;sudo nginx -s reload&#34;</span>
</span></span></code></pre></div><h2 id="docker-安装和配置">Docker 安装和配置</h2>
<h3 id="docker-安装">Docker 安装</h3>
<p>具体过程可以参考网上文章。</p>
<h3 id="自定义网络">自定义网络</h3>
<p>参考 <a href="https://nginxproxymanager.com/advanced-config/#best-practice-use-a-docker-network">Best Practice: Use a Docker network </a>
，创建一个自定义的网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker network create custom
</span></span></code></pre></div><p>查看 docker 网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@vps ~<span class="o">]</span><span class="c1"># docker network ls</span>
</span></span><span class="line"><span class="cl">NETWORK ID     NAME            DRIVER    SCOPE
</span></span><span class="line"><span class="cl">68f4aeaa57bd   bridge          bridge    <span class="nb">local</span>
</span></span><span class="line"><span class="cl">6a96b9d8617e   custom          bridge    <span class="nb">local</span>
</span></span><span class="line"><span class="cl">4a8679e35f4d   host            host      <span class="nb">local</span>
</span></span><span class="line"><span class="cl">ba21bef23b04   none            null      <span class="nb">local</span>
</span></span></code></pre></div><blockquote>
<p>注意：bridge、host、none 是内部预先创建的网络。</p>
</blockquote>
<p>然后，在其他服务的 docker-compose.yml 文件添加：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><h2 id="服务部署">服务部署</h2>
<h3 id="mysql">MySQL</h3>
<p>1、使用 docker-compose 安装</p>
<p>mysql.yaml</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mysql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mysql:8.1.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/volumes/mysql/:/var/lib/mysql/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_ROOT_HOST</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;%&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_ROOT_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="l">admin@mysql!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3306:3306&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8mb4 --explicit_defaults_for_timestamp --default-authentication-plugin=mysql_native_password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">healthcheck</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">test</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s1">&#39;CMD&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;mysql&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;-e&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;SHOW DATABASES;&#39;</span><span class="w"> </span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">interval</span><span class="p">:</span><span class="w"> </span><span class="l">5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">timeout</span><span class="p">:</span><span class="w"> </span><span class="l">5s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">retries</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>注意：<a href="https://www.cnblogs.com/atuotuo/p/9402132.html">修改 Docker-MySQL 容器的 默认用户加密规则</a></p>
</blockquote>
<p>2、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f postgresql.yaml up -d
</span></span></code></pre></div><h3 id="rsshub">Rsshub</h3>
<p>直接通过 Docker 安装运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d --name rsshub -p 1200:1200 diygod/rsshub
</span></span></code></pre></div><p>配置 nginx ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">rsshub.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">rsshub.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:1200</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="uptime-kuma">Uptime Kuma</h3>
<p>参考 <a href="https://uptime.kuma.pet/">kuma</a>，使用 docker compose 部署，创建 uptime.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uptime-kuma</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">louislam/uptime-kuma:1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">uptime-kuma</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">~/.uptime-kuma:/app/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">3001</span><span class="p">:</span><span class="m">3001</span><span class="w"> </span><span class="c"># &lt;Host Port&gt;:&lt;Container Port&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span></code></pre></div><p>启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f uptime.yaml up -d
</span></span></code></pre></div><p>配置 nginx ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">uptime.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">uptime.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3001</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kn">proxy_set_header</span>   <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_http_version</span> <span class="mi">1</span><span class="s">.1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Connection</span> <span class="s">&#34;upgrade&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f uptime.yaml down
</span></span><span class="line"><span class="cl">docker pull louislam/uptime-kuma:1
</span></span><span class="line"><span class="cl">docker-compose -f uptime.yaml up -d
</span></span></code></pre></div><h3 id="umami">Umami</h3>
<p>1、在 mysql 容器创建 umami 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it mysql bash
</span></span><span class="line"><span class="cl">mysql -uroot -p 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">CREATE USER <span class="s1">&#39;umami&#39;</span>@<span class="s1">&#39;%&#39;</span> IDENTIFIED BY <span class="s1">&#39;umami@mysql!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">CREATE DATABASE umami<span class="p">;</span>
</span></span><span class="line"><span class="cl">GRANT ALL ON umami.* TO <span class="s1">&#39;umami&#39;</span>@<span class="s1">&#39;%&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ALTER USER <span class="s1">&#39;umami&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="s1">&#39;umami@mysql!&#39;</span><span class="p">;</span>
</span></span></code></pre></div><blockquote>
<p>参考：<a href="https://support.hcltechsw.com/csm?id=kb_article&amp;sysparm_article=KB0102948">HCL SafeLinx Server with MySQL 8.0 causes &ldquo;Authentication plugin &lsquo;caching_sha2_password&rsquo; reported error: Authentication requires secure connection.&rdquo;</a></p>
</blockquote>
<p>2、通过 docker-compose 安装，创建 umami.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">umami</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">ghcr.io/umami-software/umami:mysql-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">umami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3000:3000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">DATABASE_URL</span><span class="p">:</span><span class="w"> </span><span class="l">mysql://umami:umami@mysql!@mysql:3306/umami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">DATABASE_TYPE</span><span class="p">:</span><span class="w"> </span><span class="l">mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">HASH_SALT</span><span class="p">:</span><span class="w"> </span><span class="l">vps@2023</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">TRACKER_SCRIPT_NAME</span><span class="p">:</span><span class="w"> </span><span class="l">random-string.js</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>参考 <a href="https://eallion.com/umami/">https://eallion.com/umami/</a>，Umami 的默认跟踪代码是被大多数的广告插件屏蔽的，被屏蔽了你就统计不到访客信息了。如果需要反屏蔽，需要在 docker-compose.yml 文件中添加环境变量：TRACKER_SCRIPT_NAME，如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">    environment:
</span></span><span class="line"><span class="cl">      TRACKER_SCRIPT_NAME: random-string.js
</span></span></code></pre></div><p>然后获取到的跟踪代码的 src 会变成：</p>
<pre tabindex="0"><code>srcipt.js =&gt; random-string.js
</code></pre><p>启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f umami.yaml up -d
</span></span></code></pre></div><p>3、设置自定义域名</p>
<p>umami.chensoul.com</p>
<p>4、配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">umami.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">umami.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Proto</span> <span class="nv">$scheme</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">REMOTE-HOST</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">add_header</span> <span class="s">X-Cache</span> <span class="nv">$upstream_cache_status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 缓存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kn">add_header</span> <span class="s">Cache-Control</span> <span class="s">no-cache</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">expires</span> <span class="s">12h</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>5、添加网站</p>
<p>访问 <a href="https://umami.chensoul.com/">https://umami.chensoul.com/</a>，默认用户名和密码为 admin/umami。登陆之后，修改密码，并添加网站。</p>
<p>6、升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f umami.yaml down
</span></span><span class="line"><span class="cl">docker pull ghcr.io/umami-software/umami:postgresql-latest
</span></span><span class="line"><span class="cl">docker-compose -f umami.yaml up -d
</span></span></code></pre></div><h3 id="cusdis">Cusdis</h3>
<blockquote>
<p>VPS IP 可能被墙，所以可以使用三方云服务部署，具体参考<a href="https://www.pseudoyu.com/zh/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></p>
</blockquote>
<p>1、在 mysql 容器创建 cusdis 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it mysql bash
</span></span><span class="line"><span class="cl">mysql -uroot -p 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">CREATE USER <span class="s1">&#39;cusdis&#39;</span>@<span class="s1">&#39;%&#39;</span> IDENTIFIED BY <span class="s1">&#39;cusdis@mysql!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">CREATE DATABASE cusdis<span class="p">;</span>
</span></span><span class="line"><span class="cl">GRANT ALL ON cusdis.* TO <span class="s1">&#39;cusdis&#39;</span>@<span class="s1">&#39;%&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>2、通过 docker-compose 安装，创建 cusdis.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cusdis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">djyde/cusdis:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3010:3000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">USERNAME=admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PASSWORD=cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">JWT_SECRET=vps@2023</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">NEXTAUTH_URL=https://cusdis.chensoul.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">HOST=https://cusdis.chensoul.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_TYPE=mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_URL=mysql://cusdis:cusdis@mysql!@mysql:3306/cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>以下配置为 EMAIL 配置可选，下面是使用 <a href="https://cusdis.com/doc#/features/notification?id=gmail">Gmail</a>
进行配置，需要首先开启两阶段验证并创建一个应用密码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">SMTP_HOST</span><span class="o">=</span><span class="s">smtp.gmail.com</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_PORT</span><span class="o">=</span><span class="s">465</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_SECURE</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_USER</span><span class="o">=</span><span class="s">your gmail email</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_PASSWORD</span><span class="o">=</span><span class="s">&lt;app password&gt;</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_SENDER</span><span class="o">=</span><span class="s">your gmail email</span>
</span></span></code></pre></div><p>3、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f cusdis.yaml up -d
</span></span></code></pre></div><p>4、配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">cusdis.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">cusdis.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3010</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kn">proxy_pass_header</span> <span class="s">Authorization</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kn">proxy_pass_header</span> <span class="s">WWW-Authenticate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kn">if</span> <span class="s">(</span><span class="nv">$uri</span> <span class="p">=</span> <span class="s">&#39;/js/iframe.umd.js&#39;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        	<span class="kn">add_header</span> <span class="s">&#39;Access-Control-Allow-Origin&#39;</span> <span class="s">&#39;*&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        	<span class="c1">#add_header &#39;Access-Control-Allow-Origin&#39; &#39;http://localhost:1313&#39;;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>5、部署一个 Telegram 机器人，参考 <a href="https://cusdis.chensoul.com/doc#/advanced/webhook?id=official-telegram-bot">Official Telegram bot</a>。</p>
<p>6、升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f cusdis.yaml down
</span></span><span class="line"><span class="cl">docker pull djyde/cusdis:latest
</span></span><span class="line"><span class="cl">docker-compose -f cusdis.yaml up -d
</span></span></code></pre></div><h3 id="memos">memos</h3>
<p>1、在 mysql 容器创建 n8n 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it mysql bash
</span></span><span class="line"><span class="cl">mysql -uroot -p 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">CREATE USER <span class="s1">&#39;memos&#39;</span>@<span class="s1">&#39;%&#39;</span> IDENTIFIED BY <span class="s1">&#39;memos@mysql!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">CREATE DATABASE memos<span class="p">;</span>
</span></span><span class="line"><span class="cl">GRANT ALL ON memos.* TO <span class="s1">&#39;memos&#39;</span>@<span class="s1">&#39;%&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>2、通过 docker-compose 安装，创建 memos.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">memos</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">neosmemo/memos:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">memos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">MEMOS_DRIVER=mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">MEMOS_DSN=memos:memos@mysql!@tcp(mysql)/memos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">~/.memos/:/var/opt/memos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5230</span><span class="p">:</span><span class="m">5230</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f memos.yaml up -d
</span></span></code></pre></div><p>配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">memos.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">memos.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:5230</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f memos.yaml down
</span></span><span class="line"><span class="cl">docker pull neosmemo/memos:latest
</span></span><span class="line"><span class="cl">docker-compose -f memos.yaml up -d
</span></span></code></pre></div><h3 id="n8n">n8n</h3>
<p>1、在 mysql 容器创建 n8n 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it mysql bash
</span></span><span class="line"><span class="cl">mysql -uroot -p 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">CREATE USER <span class="s1">&#39;n8n&#39;</span>@<span class="s1">&#39;%&#39;</span> IDENTIFIED BY <span class="s1">&#39;n8n@mysql!&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">CREATE DATABASE n8n<span class="p">;</span>
</span></span><span class="line"><span class="cl">GRANT ALL ON n8n.* TO <span class="s1">&#39;n8n&#39;</span>@<span class="s1">&#39;%&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>2、通过 docker 安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">docker run -d  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> --name n8n <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> --network<span class="o">=</span>custom <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -p 5678:5678 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_TYPE</span><span class="o">=</span>mysqldb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_POSTGRESDB_DATABASE</span><span class="o">=</span>n8n <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_POSTGRESDB_HOST</span><span class="o">=</span>mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_POSTGRESDB_PORT</span><span class="o">=</span><span class="m">3306</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_POSTGRESDB_USER</span><span class="o">=</span>n8n <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_POSTGRESDB_PASSWORD</span><span class="o">=</span>n8n@mysql! <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">GENERIC_TIMEZONE</span><span class="o">=</span><span class="s2">&#34;Asia/Shanghai&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">WEBHOOK_URL</span><span class="o">=</span>https://n8n.chensoul.com/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -v ~/.n8n:/home/node/.n8n <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> docker.n8n.io/n8nio/n8n <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> n8n start<span class="err">
</span></span></span></code></pre></div><p>通过 docker-compose 安装，创建 n8n.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.8&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">n8n</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">n8nio/n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_TYPE=mysqldb</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_MYSQLDB_HOST=mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_MYSQLDB_PORT=3306</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_MYSQLDB_DATABASE=n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_MYSQLDB_USER=n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_MYSQLDB_PASSWORD=n8n@mysql!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=&#34;Asia/Shanghai&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">GENERIC_TIMEZONE=&#34;Asia/Shanghai&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">WEBHOOK_URL=https://n8n.chensoul.com/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5678</span><span class="p">:</span><span class="m">5678</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">~/.n8n:/home/node/.n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>3、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f n8n.yaml up -d
</span></span></code></pre></div><p>4、设置 nginx 转发</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">n8n.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">n8n.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:5678</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">chunked_transfer_encoding</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_buffering</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_cache</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">				<span class="kn">access_log</span> <span class="s">/var/log/nginx/n8n.log</span> <span class="s">combined</span> <span class="s">buffer=128k</span> <span class="s">flush=5s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="kn">proxy_http_version</span> <span class="mi">1</span><span class="s">.1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    		<span class="kn">proxy_set_header</span> <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    		<span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="s">&#34;Upgrade&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这里面的转发配置不对的话，会导致直接访问 5678 端口正常，但是访问 nginx 的话，workflow 会一直处于执行。</p>
<p>5、添加 workflow</p>
<p>参考这篇文章 <a href="http://stiles.cc/archives/237/">http://stiles.cc/archives/237/</a> ，目前我配置了以下 workflows，实现了 github、douban、rss、memos 同步到 Telegram。</p>
<p>
  <img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/my-n8n-workflows.png" alt="my-n8n-workflows"  /></p>
<p>workflows 参考：</p>
<ul>
<li><a href="https://reorx.com/blog/sharing-my-footprints-automation/">Reorx</a></li>
<li><a href="https://www.pseudoyu.com/zh/2022/09/19/weekly_review_20220919/">Pseudoyu</a></li>
<li><a href="https://raye.xlog.app/gou-jian-ge-xing-hua-de-shu-zi-ri-ji--zi-dong-hua-gong-zuo-liu-shi-xian-xin-xi-ju-he">raye</a></li>
<li><a href="https://zeabur.com/docs/marketplace/n8n">Zeabur</a></li>
</ul>
<p>6、升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f n8n.yaml down
</span></span><span class="line"><span class="cl">docker pull n8nio/n8n
</span></span><span class="line"><span class="cl">docker-compose -f n8n.yaml up -d
</span></span></code></pre></div><p>7、备份</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nv">DATE</span><span class="o">=</span><span class="k">$(</span>date +%Y%m%d_%H%M%S<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">BACKUP_DIR</span><span class="o">=</span><span class="s2">&#34;/opt/backup/n8n&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">EXPORT_DIR</span><span class="o">=</span><span class="s2">&#34;workflow-</span><span class="si">${</span><span class="nv">DATE</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -u node -it n8n n8n export:workflow --backup --output<span class="o">=</span>./<span class="nv">$EXPORT_DIR</span>/
</span></span><span class="line"><span class="cl">docker cp n8n:/home/node/<span class="nv">$EXPORT_DIR</span> <span class="si">${</span><span class="nv">BACKUP_DIR</span><span class="si">}</span>/<span class="nv">$EXPORT_DIR</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#docker exec -u node -it n8n n8n export:credentials --all --output=./credentials.json</span>
</span></span><span class="line"><span class="cl"><span class="c1">#docker cp n8n:/home/node/credentials.json .</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> <span class="nv">$BACKUP_DIR</span>/<span class="nv">$EXPORT_DIR</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> file in *<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="nv">filename</span><span class="o">=</span><span class="k">$(</span>cat <span class="s2">&#34;</span><span class="nv">$file</span><span class="s2">&#34;</span> <span class="p">|</span> jq -r <span class="s1">&#39;.name&#39;</span><span class="k">)</span>  <span class="c1"># 使用-r选项以纯文本形式输出字段值</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$filename</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    mv <span class="s2">&#34;</span><span class="nv">$file</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$filename</span><span class="s2">&#34;</span>.json
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></div><h2 id="数据库备份">数据库备份</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># 容器名称</span>
</span></span><span class="line"><span class="cl"><span class="nv">CONTAINER_NAME</span><span class="o">=</span><span class="s2">&#34;mysql&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 备份目录</span>
</span></span><span class="line"><span class="cl"><span class="nv">BACKUP_DIR</span><span class="o">=</span><span class="s2">&#34;/opt/backup/mysql&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 日期时间</span>
</span></span><span class="line"><span class="cl"><span class="nv">DATE</span><span class="o">=</span><span class="k">$(</span>date +%Y%m%d_%H%M%S<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 备份文件名后缀</span>
</span></span><span class="line"><span class="cl"><span class="nv">BACKUP_POSTFIX</span><span class="o">=</span><span class="s2">&#34;backup_</span><span class="si">${</span><span class="nv">DATE</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># MySQL连接参数</span>
</span></span><span class="line"><span class="cl"><span class="nv">DB_USER</span><span class="o">=</span><span class="s2">&#34;root&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">DB_PASSWORD</span><span class="o">=</span><span class="s2">&#34;admin@mysql!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 要备份的数据库列表</span>
</span></span><span class="line"><span class="cl"><span class="nv">DATABASES</span><span class="o">=(</span><span class="s2">&#34;memos&#34;</span> <span class="s2">&#34;n8n&#34;</span> <span class="s2">&#34;umami&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 创建备份目录</span>
</span></span><span class="line"><span class="cl">mkdir -p <span class="nv">$BACKUP_DIR</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 遍历数据库列表进行备份</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> DB_NAME in <span class="s2">&#34;</span><span class="si">${</span><span class="nv">DATABASES</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># 备份文件名</span>
</span></span><span class="line"><span class="cl">  <span class="nv">BACKUP_FILE</span><span class="o">=</span><span class="s2">&#34;</span><span class="si">${</span><span class="nv">DB_NAME</span><span class="si">}</span><span class="s2">_</span><span class="si">${</span><span class="nv">BACKUP_POSTFIX</span><span class="si">}</span><span class="s2">.sql&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># 执行备份</span>
</span></span><span class="line"><span class="cl">  docker <span class="nb">exec</span> <span class="nv">$CONTAINER_NAME</span> mysqldump -u <span class="nv">$DB_USER</span> --password<span class="o">=</span><span class="nv">$DB_PASSWORD</span> <span class="nv">$DB_NAME</span> &gt; <span class="nv">$BACKUP_DIR</span>/<span class="nv">$BACKUP_FILE</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># 检查备份是否成功</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;数据库 </span><span class="nv">$DB_NAME</span><span class="s2"> 备份成功: </span><span class="nv">$BACKUP_FILE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;数据库 </span><span class="nv">$DB_NAME</span><span class="s2"> 备份失败&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>博客中如何使用图床服务</title>
      <link>https://blog.chensoul.com/posts/2022/08/19/using-images-in-blog/</link>
      <pubDate>Fri, 19 Aug 2022 12:15:54 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2022/08/19/using-images-in-blog/</guid>
      <description>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。
喜欢 Typora 的理由：
所见即所得的编辑，Markdown 的语法都支持快捷键操作，非常方便
可以自定义主题的 CSS，包括文章内容就可以粘贴到公众号里
上传图片，支持图床服务。可以将图片上传到指定的图床，前提是需要先安装一个客户端，这里我使用的是 PicGo。然后，PicGo 支持常见的一些图床服务。
支持导出
Typora 图片复制到本地 接下来，聊聊 Typora 的图片上传设置：
当你插入图片时，你可以分情况对图片进行设置。比如：
1、对本地位置的图片，可以设置一个上传规则：复制到指定路径或者是当前路径下的一个文件夹、上传图片。
如果是编写一个文档，我们就设置把图片保存到本地的 assets 文件夹内，这样方便管理。 如果是编写博客，图片一般是集中管理的，我们可以设置复制到一个指定路径 2、类似的，对网络位置的图片也可以使用上面的规则。
注意，如果将图片保存到本地目录，在文章中引用图片是使用的相对或者绝对路径。如果只是在本地查看，是可以预览图片的。但是，如果将博客上传到服务器，则因为路径问题可能会出现无法预览图片的情况。
所以，这种情况我们需要做一些修改。通常我会设置图片复制到博客的静态页面目录下面，比如，我现在使用的是 Hugo 构建静态博客，会将图片保存到 static/img 目录下，并且，还需要修改图片的 markdown 引用路径为 /images/image-20220819124422239.png ，以表示绝对路径查找图片，在博客服务器上就是相对根域名目录去 img 路径下查找图片。待 hugo 编译完成上传静态文件到服务器之后，可以通过 https://blog.chensoul.com/images/ 加上图片名称的方式访问到图片。
但是，显然，这时候在 Typora 是无法预览图片的，因为在本地查找不到这个绝对路径地址。这时候可以在 Typora 里面设置一个绝对路径，操作方法是，在 显示 -&amp;gt; 图片 -&amp;gt; 图像 -&amp;gt; 设置图片根目录 里进行设置。
设置完成之后，在当前文件的 md 文件的顶部元数据代码里会多一行代码：
title: &amp;#34;博客中如何使用图床服务&amp;#34; date: 2022-08-19T12:15:54+08:00 slug: using-images-in-blog categories: [日志] tags: [hugo] draft: true typora-root-url: .</description>
      <content:encoded><![CDATA[<p>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。</p>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/my-typora-license.png" alt="my-typora-license"  /></p>
<p>喜欢 Typora 的理由：</p>
<ul>
<li>
<p>所见即所得的编辑，Markdown 的语法都支持快捷键操作，非常方便</p>
</li>
<li>
<p>可以自定义主题的 CSS，包括文章内容就可以粘贴到公众号里</p>
</li>
<li>
<p>上传图片，支持图床服务。可以将图片上传到指定的图床，前提是需要先安装一个客户端，这里我使用的是 PicGo。然后，PicGo 支持常见的一些图床服务。</p>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/picgo-setting-image-server.png" alt="picgo-setting-image-server"  /></p>
</li>
<li>
<p>支持导出</p>
</li>
</ul>
<h2 id="typora-图片复制到本地">Typora 图片复制到本地</h2>
<p>接下来，聊聊 Typora 的图片上传设置：</p>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/typora-setting-image.png" alt="typora-setting-image"  /></p>
<p>当你插入图片时，你可以分情况对图片进行设置。比如：</p>
<p>1、对本地位置的图片，可以设置一个上传规则：复制到指定路径或者是当前路径下的一个文件夹、上传图片。</p>
<ul>
<li>如果是编写一个文档，我们就设置把图片保存到本地的 assets 文件夹内，这样方便管理。</li>
<li>如果是编写博客，图片一般是集中管理的，我们可以设置复制到一个指定路径</li>
</ul>
<p>2、类似的，对网络位置的图片也可以使用上面的规则。</p>
<p>注意，如果将图片保存到本地目录，在文章中引用图片是使用的相对或者绝对路径。如果只是在本地查看，是可以预览图片的。但是，如果将博客上传到服务器，则因为路径问题可能会出现无法预览图片的情况。</p>
<p>所以，这种情况我们需要做一些修改。通常我会设置图片复制到博客的静态页面目录下面，比如，我现在使用的是 Hugo 构建静态博客，会将图片保存到 static/img 目录下，并且，还需要修改图片的 markdown 引用路径为 <code>/images/image-20220819124422239.png</code> ，以表示绝对路径查找图片，在博客服务器上就是相对根域名目录去 img 路径下查找图片。待 hugo 编译完成上传静态文件到服务器之后，可以通过 <a href="https://blog.chensoul.com/images/">https://blog.chensoul.com/images/</a> 加上图片名称的方式访问到图片。</p>
<p>但是，显然，这时候在 Typora 是无法预览图片的，因为在本地查找不到这个绝对路径地址。这时候可以在 Typora 里面设置一个绝对路径，操作方法是，在 显示 -&gt; 图片 -&gt; 图像 -&gt; 设置图片根目录 里进行设置。</p>
<p>设置完成之后，在当前文件的 md 文件的顶部元数据代码里会多一行代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;博客中如何使用图床服务&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">date</span><span class="p">:</span><span class="w"> </span><span class="ld">2022-08-19T12:15:54</span><span class="m">+08</span><span class="p">:</span><span class="m">00</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">slug</span><span class="p">:</span><span class="w"> </span><span class="l">using-images-in-blog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">categories</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">日志]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tags</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">hugo]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">draft</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">typora-root-url</span><span class="p">:</span><span class="w"> </span><span class="l">../../static</span><span class="w">
</span></span></span></code></pre></div><p>这样博客里所有的图片都会保存的博客服务器，如果博客访问量增大，则图片加载时间会变慢。为了解决这个问题，需要将图片进行压缩，并给博客设置 CDN 加速。</p>
<h2 id="typora-图片上传到网络">Typora 图片上传到网络</h2>
<p>将图片保存到本地，待博客静态页面部署到服务器上之后，可以实现正常预览情况。但是，如果我们想把 md 文件打包上传到一些云笔记，比如：语雀，你会发现上传之后会出现图片无法预览的情况。</p>
<p>这时候，我们需要将图片上传到网络。首先，我们需要安装 PicGo，然后设置图床服务，这里我使用的是 github 作为图床来保存图片，并使用 <a href="https://www.jsdelivr.com">jsDelivr</a> 的 CDN 服务进行加速访问。</p>
<p>如何利用 Github 搭建自己的免费图床？可以参考这篇 <a href="https://zhuanlan.zhihu.com/p/353775844">文章</a>。这里，记录一下我的操作步骤。</p>
<p>1、使用博客的<a href="https://github.com/chensoul/blog.chensoul.com">托管仓库</a> 的 static/img 目录来保存图片，这样方便图片的管理（比如：压缩、重命名，删除无用图片），如果图床服务不可用了，所有博客图片还有一个备份，只需要修改博客内图片的引用地址。前提是需要将仓库设置为 public。</p>
<p>2、在 github 设置里面创建一个 Token。以此打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code></p>
<p>3、在 PicGo 里设置 github 图床：</p>
<ul>
<li>
<p>设定仓库名：chensoul/blog.chensoul.com</p>
</li>
<li>
<p>设定分支：main</p>
</li>
<li>
<p>设定 Token：XXXXXXXXXXXXXXXXX</p>
</li>
<li>
<p>指定存储路径：static/images/</p>
</li>
<li>
<p>设置自定义域名：https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com</p>
</li>
</ul>
<p>4、需要修改博客文章内引用的图片地址，将 /images/ 替换为 <a href="https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/images/">https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/images/</a> ，可以使用<a href="https://dvel.me/posts/macos-replace-contents-multiple-files/">脚本批量替换</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">grep -lr --null <span class="s1">&#39;](\/img\/&#39;</span> <span class="p">|</span> xargs -0 sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/](\/img\//](https:\/\/cdn.jsdelivr.net\/gh\/chensoul\/blog.chensoul.com\/static\/img\//g&#39;</span>
</span></span></code></pre></div><blockquote>
<p>参数说明：</p>
<ul>
<li>grep
<ul>
<li><code>-i, --ignore-case</code> 查找文件时不区分大小写</li>
<li><code>-l, --files-with-matches</code> 返回文件名</li>
<li><code>-R, -r, --recursive</code> 递归搜索子目录</li>
</ul>
</li>
<li>sed
<ul>
<li><code>-i</code> 默认 <code>sed</code> 会打印到标准输出，使用 <code>-i</code> 将直接在文件内编辑替换</li>
<li><code>s</code> 替换</li>
<li><code>g</code> 全局替换标志</li>
<li><code>I</code> 大小写不敏感标志</li>
</ul>
</li>
</ul>
</blockquote>
<p>反过来，查询 <a href="https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/">https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/</a> 下的图片地址替换 <code>/img</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">grep -lr --null <span class="s1">&#39;](https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/&#39;</span> <span class="p">|</span> xargs -0 sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/](https:\/\/cdn.jsdelivr.net\/gh\/chensoul\/blog.chensoul.com\/static\/img\//](\/img\//g&#39;</span>
</span></span></code></pre></div><p>另外，在博客编译部署的流程之中，可以定制化一些步骤将博客同步发布到其他系统。当然，在发布之前，也可以先将本地图片的 url 替换成图床地址的 url。等后续实现了，再发布一篇文章。</p>
<p>如果 github 或者 jsdelivr 服务不稳定，则需要考虑使用其他图床了。</p>
<blockquote>
<p>可以通过这个地址 <a href="https://tcp.ping.pe/">https://tcp.ping.pe/</a> 来检测 IP 或者域名是否可以访问</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Mac开发环境配置</title>
      <link>https://blog.chensoul.com/posts/2021/09/09/mac-development-environment-setup/</link>
      <pubDate>Thu, 09 Sep 2021 18:14:34 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2021/09/09/mac-development-environment-setup/</guid>
      <description>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是 Mac 开发环境，所以，这篇文章主要是基于 Mac 操作系统，记录开发环境搭建过程。
系统设置 dotfile 配置 下载 dotfile 文件：
git clone git@github.com:chensoul/snippets.git 拷贝到用户目录：
cd dotfiles sh bootstrap.sh macos 系统设置：
. .macos 安装软件 安装 brew、nvs sh install.sh 安装 MySQL 安装 MySQL：
# 搜索可以安装的版本 ➜ brew search mysql # 安装对应的版本 ➜ brew install mysql@5.7 # 写入环境变量 echo &amp;#39;export PATH=&amp;#34;/opt/homebrew/opt/mysql@5.7/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc # 为了让编译器找到 mysql@5.7 还需要写入 echo &amp;#39;export LDFLAGS=&amp;#34;-L/opt/homebrew/opt/mysql@5.7/lib&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;export CPPFLAGS=&amp;#34;-I/opt/homebrew/opt/mysql@5.7/include&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc # 为了让 pkg-config 找到 mysql@5.7 还需要写入 echo &amp;#39;PKG_CONFIG_PATH=&amp;#34;/opt/homebrew/opt/mysql@5.</description>
      <content:encoded><![CDATA[<p>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是 Mac 开发环境，所以，这篇文章主要是基于 Mac 操作系统，记录开发环境搭建过程。</p>
<h2 id="系统设置">系统设置</h2>
<h3 id="dotfile-配置">dotfile 配置</h3>
<p>下载 dotfile 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone git@github.com:chensoul/snippets.git
</span></span></code></pre></div><p>拷贝到用户目录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> dotfiles
</span></span><span class="line"><span class="cl">sh bootstrap.sh
</span></span></code></pre></div><p>macos 系统设置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">. .macos
</span></span></code></pre></div><h2 id="安装软件">安装软件</h2>
<h3 id="安装-brewnvs">安装 brew、nvs</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh install.sh
</span></span></code></pre></div><h3 id="安装-mysql">安装 MySQL</h3>
<p>安装 MySQL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-BASH" data-lang="BASH"><span class="line"><span class="cl"><span class="c1"># 搜索可以安装的版本</span>
</span></span><span class="line"><span class="cl">➜ brew search mysql
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装对应的版本</span>
</span></span><span class="line"><span class="cl">➜ brew install mysql@5.7
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 写入环境变量</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;export PATH=&#34;/opt/homebrew/opt/mysql@5.7/bin:$PATH&#34;&#39;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 为了让编译器找到 mysql@5.7 还需要写入</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;export LDFLAGS=&#34;-L/opt/homebrew/opt/mysql@5.7/lib&#34;&#39;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;export CPPFLAGS=&#34;-I/opt/homebrew/opt/mysql@5.7/include&#34;&#39;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 为了让 pkg-config 找到 mysql@5.7 还需要写入</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;PKG_CONFIG_PATH=&#34;/opt/homebrew/opt/mysql@5.7/lib/pkgconfig&#34;&#39;</span> &gt;&gt; ~/.zshrc
</span></span></code></pre></div><p>MySQL 服务相关：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-BASH" data-lang="BASH"><span class="line"><span class="cl"><span class="c1"># 查看 MySQL 服务状态</span>
</span></span><span class="line"><span class="cl">➜ brew services info mysql@5.7
</span></span><span class="line"><span class="cl">➜ mysql.server status
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动 MySQL 服务</span>
</span></span><span class="line"><span class="cl">➜ brew services start mysql@5.7
</span></span><span class="line"><span class="cl">➜ mysql.server start
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重启 MySQL 服务</span>
</span></span><span class="line"><span class="cl">➜ brew services restart mysql@5.7
</span></span><span class="line"><span class="cl">➜ mysql.server restart
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 停止 MySQL 服务</span>
</span></span><span class="line"><span class="cl">➜ brew services stop mysql@5.7
</span></span><span class="line"><span class="cl">➜ mysql.server stop
</span></span></code></pre></div><p>接着初始化 MySQL 设置，主要配置一下 root 密码已经是否远程登录登，根据提示来操作就行了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-BASH" data-lang="BASH"><span class="line"><span class="cl">mysql_secure_installation
</span></span></code></pre></div><p>数据库外连，这是个可选操作 根据自己的实际情况自行决定是否开启（有被攻击的风险）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="n">mysql</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="k">grant</span><span class="w"> </span><span class="k">all</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="o">*</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">root</span><span class="o">@</span><span class="s1">&#39;%&#39;</span><span class="w"> </span><span class="n">identified</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="s1">&#39;你设置的密码&#39;</span><span class="w"> </span><span class="k">with</span><span class="w"> </span><span class="k">grant</span><span class="w"> </span><span class="k">option</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">mysql</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">flush</span><span class="w"> </span><span class="k">privileges</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="安装-redis">安装 Redis</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-BASH" data-lang="BASH"><span class="line"><span class="cl"><span class="c1"># 安装 redis</span>
</span></span><span class="line"><span class="cl">➜ brew install redis
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 redis 服务状态</span>
</span></span><span class="line"><span class="cl">➜ brew services info redis
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动 redis 服务端</span>
</span></span><span class="line"><span class="cl">➜ brew services start redis
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动 redis 客户端</span>
</span></span><span class="line"><span class="cl">➜ redis-cli
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 编辑默认配置文件</span>
</span></span><span class="line"><span class="cl">➜ sudo vim /opt/homebrew/etc/redis.conf
</span></span></code></pre></div><h2 id="系统备份">系统备份</h2>
<p>1、备份 maven 仓库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">zip -r m2.zip ~/.m2
</span></span></code></pre></div><p>2、备份代码空间</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-BASH" data-lang="BASH"><span class="line"><span class="cl">find ~/workspace -type d -name <span class="s2">&#34;target&#34;</span> -exec rm -rf <span class="o">{}</span> +
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">zip -r workspace.zip ~/workspace
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始搭建个人博客</title>
      <link>https://blog.chensoul.com/posts/2021/09/09/build-personal-blog-from-zero/</link>
      <pubDate>Thu, 09 Sep 2021 18:14:34 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2021/09/09/build-personal-blog-from-zero/</guid>
      <description>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。
域名 搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科上的解释：
域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。
由于IP 地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP 地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP 地址数串。
简单来说，IP 地址可以标识一台计算机，但是不容易记忆，所以，设计出了域名。而域名就是标识因特网上的一台计算机，由网域名称系统 DNS 来完成域名和 IP 之间的映射。
如何注册域名？有很多网站提供域名注册服务，比如国内的：
阿里云 腾讯云 华为云 国外的：
GoDaddy Namecheap Amazon 注册域名的建议：
1、建议在正规、出名的网站注册域名，防止网站跑路。我曾经在一个小网站注册了一个域名，使用了几年之后，续期的时候，联系不上对方，导致无法使用该域名，甚至该域名被别人抢注册了。 2、在国内网站注册域名，都需要备案。如果不想备案，请在国外网站注册域名。我的域名 chensoul.com 就是在亚马逊上注册的。一是不想备案，二是对比了上面几个网站，发现亚马逊上的 com 域名价格相对便宜，所以一次性购买了 5 年。 3、建议优先注册 com 域名，域名尽可能的简短并且方便记忆。 我曾经注册过的域名：
javachen.com、javachen.space、javachen.xyz huaiu.com 服务器 注册了域名之后，需要一台服务器运行程序。服务器可以是一台物理机，比如你可以使用自己的电脑作为服务器；也可以是一台虚拟的云服务器，比如在云服务提供商购买一台独立的服务器；也可以使用第三方提供的服务器空间，比如 Github 上可以部署静态程序。不管哪种方式，服务器都需要有一个公网 IP，这样才能在因特网上访问你服务器上部署的程序。有了服务器之后，就可以给服务器公网 IP 设置域名解析。
我的服务器是在搬瓦工购买的，一年 49.99 美元。
程序 安装 Hugo 在 Mac 下安装 Hugo：
brew install hugo 新建站点 hugo new site chensoul.github.io -y yaml 上述命令会生成一个名为 chensoul.github.io 的文件夹，下面对文件夹结构做个说明：</description>
      <content:encoded><![CDATA[<p>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。</p>
<h2 id="域名">域名</h2>
<p>搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科上的解释：</p>
<blockquote>
<p><strong>域名</strong>（英语：<strong>Domain Name</strong>），又称<strong>网域</strong>，是由一串用点分隔的名字组成的<a href="https://baike.baidu.com/item/Internet">Internet</a>上某一台<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。</p>
<p>由于<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80/150859">IP 地址</a>具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（<a href="https://baike.baidu.com/item/DNS">DNS</a>，Domain Name System）来将域名和<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP 地址</a>相互<a href="https://baike.baidu.com/item/%E6%98%A0%E5%B0%84/20402621">映射</a>，使人更方便地访问<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91/199186">互联网</a>，而不用去记住能够被机器直接读取的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP 地址</a>数串。</p>
</blockquote>
<p>简单来说，IP 地址可以标识一台计算机，但是不容易记忆，所以，设计出了域名。而域名就是标识因特网上的一台计算机，由网域名称系统 DNS 来完成域名和 IP 之间的映射。</p>
<p>如何注册域名？有很多网站提供域名注册服务，比如国内的：</p>
<ul>
<li><a href="https://www.alibabacloud.com/zh/domain">阿里云</a></li>
<li><a href="https://cloud.tencent.com/act/domainsales">腾讯云</a></li>
<li><a href="https://www.huaweicloud.com/">华为云</a></li>
</ul>
<p>国外的：</p>
<ul>
<li><a href="https://sg.godaddy.com/zh/offers/domain">GoDaddy</a></li>
<li><a href="https://www.namecheap.com/">Namecheap</a></li>
<li><a href="https://console.aws.amazon.com/route53/home?#DomainRegistration:">Amazon</a></li>
</ul>
<p>注册域名的建议：</p>
<ul>
<li>1、建议在正规、出名的网站注册域名，防止网站跑路。我曾经在一个小网站注册了一个域名，使用了几年之后，续期的时候，联系不上对方，导致无法使用该域名，甚至该域名被别人抢注册了。</li>
<li>2、在国内网站注册域名，都需要备案。如果不想备案，请在国外网站注册域名。我的域名 chensoul.com 就是在亚马逊上注册的。一是不想备案，二是对比了上面几个网站，发现亚马逊上的 com 域名价格相对便宜，所以一次性购买了 5 年。</li>
<li>3、建议优先注册 com 域名，域名尽可能的简短并且方便记忆。</li>
</ul>
<p>我曾经注册过的域名：</p>
<ul>
<li>javachen.com、javachen.space、javachen.xyz</li>
<li>huaiu.com</li>
</ul>
<h2 id="服务器">服务器</h2>
<p>注册了域名之后，需要一台服务器运行程序。服务器可以是一台物理机，比如你可以使用自己的电脑作为服务器；也可以是一台虚拟的云服务器，比如在云服务提供商购买一台独立的服务器；也可以使用第三方提供的服务器空间，比如 Github 上可以部署静态程序。不管哪种方式，服务器都需要有一个公网 IP，这样才能在因特网上访问你服务器上部署的程序。有了服务器之后，就可以给服务器公网 IP 设置域名解析。</p>
<p>我的服务器是在<a href="https://bandwagonhost.com/aff.php?aff=58710">搬瓦工</a>购买的，一年 49.99 美元。</p>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/bwg-plan.png" alt="bwg-plan"  /></p>
<h2 id="程序">程序</h2>
<h3 id="安装-hugo">安装 Hugo</h3>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/hugo-logo.svg" alt="使用 Hugo 搭建博客"  /></p>
<p>在 Mac 下安装 Hugo：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install hugo
</span></span></code></pre></div><h3 id="新建站点">新建站点</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo new site chensoul.github.io -y yaml
</span></span></code></pre></div><p>上述命令会生成一个名为 <code>chensoul.github.io</code> 的文件夹，下面对文件夹结构做个说明：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree chensoul.github.io
</span></span><span class="line"><span class="cl">chensoul.github.io
</span></span><span class="line"><span class="cl">├── archetypes
</span></span><span class="line"><span class="cl">│   └── default.md
</span></span><span class="line"><span class="cl">├── config.yaml
</span></span><span class="line"><span class="cl">├── content
</span></span><span class="line"><span class="cl">├── data
</span></span><span class="line"><span class="cl">├── layouts
</span></span><span class="line"><span class="cl">├── static
</span></span><span class="line"><span class="cl">└── themes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">6</span> directories, <span class="m">2</span> files
</span></span></code></pre></div><p>新建的站点，还没有加入 Git 版本管理，进入到这个目录下，执行一下如下命令，完成 Git Repo 的初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> chensoul.github.io
</span></span><span class="line"><span class="cl">git init .
</span></span></code></pre></div><p>新建站点后，我们开始添加主题。</p>
<h3 id="添加主题">添加主题</h3>
<p>在 Hugo 的官网上 <a href="https://themes.gohugo.io/">Hugo Themes</a> 有非常非常多的主题，可以根据自己的喜好选择一个主题。这里，我使用的是 hugo-theme-den 主题。</p>
<p>使用 git submodule&ndash;helper 下载主题到 theme 目录下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git submodule--helper add https://github.com/shaform/hugo-theme-den themes/den --depth<span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git submodule--helper update --init --recursive <span class="c1"># needed when you reclone your repo (submodules may not get cloned automatically)</span>
</span></span></code></pre></div><p>以后，当主题有更新时，执行下面命令更新：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule update --remote --merge
</span></span></code></pre></div><p>如果遇到异常，可以参考<a href="https://xuzhijvn.github.io/zh-cn/posts/other/git-submodule-update-init-recursive/">文章</a>解决。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">fatal: remote error: upload-pack: not our ref fc7223ca00124e8f5b5b354457379071e2fd091b
</span></span></code></pre></div><h3 id="启动">启动</h3>
<p>启动预览：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo server
</span></span></code></pre></div><p>默认是 <code>1313</code> 端口号，在浏览器中直接访问 http://localhost:1313/ 就可以访问到新建的博客了。</p>
<h2 id="定制化">定制化</h2>
<h3 id="站点信息">站点信息</h3>
<p>配置网站的基本信息，将 config.yaml 修改如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">baseURL: https://blog.chensoul.com/
</span></span><span class="line"><span class="cl">title: ChenSoul
</span></span><span class="line"><span class="cl">theme: den
</span></span><span class="line"><span class="cl">enableRobotsTXT: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">enableEmoji: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">hasCJKLanguage: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">preserveTaxonomyNames: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">rssLimit: <span class="m">100</span>
</span></span><span class="line"><span class="cl">page_view_conter: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">enableRelated: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Copyright, appears in the footer</span>
</span></span><span class="line"><span class="cl"><span class="c1"># copyright = &#34;&#34;             # default: author.name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Pagination</span>
</span></span><span class="line"><span class="cl"><span class="c1"># number of entries per page for archives, tags and categories</span>
</span></span><span class="line"><span class="cl"><span class="c1"># since we don&#39;t have list view, recommend a large value</span>
</span></span><span class="line"><span class="cl">paginate: <span class="m">20</span>
</span></span><span class="line"><span class="cl">paginatePath: <span class="s2">&#34;page&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Syntax Hightlight</span>
</span></span><span class="line"><span class="cl">PygmentsCodeFences: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">PygmentsUseClasses: <span class="nb">true</span>    <span class="c1"># required for shhighlight shortcode</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># service plugins</span>
</span></span><span class="line"><span class="cl">disqusShortname: <span class="s2">&#34;&#34;</span>         <span class="c1"># disqus_shortname</span>
</span></span><span class="line"><span class="cl">googleAnalytics: <span class="s2">&#34;&#34;</span>         <span class="c1"># UA-XXXXXXXX-X</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># language support # en / zh / other... translations present in i18n/</span>
</span></span><span class="line"><span class="cl">defaultContentLanguage: <span class="s2">&#34;zh&#34;</span>           <span class="c1"># Default language to use</span>
</span></span><span class="line"><span class="cl">defaultContentLanguageInSubdir: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">permalinks:
</span></span><span class="line"><span class="cl">  posts: /posts/:slug/
</span></span><span class="line"><span class="cl">  categories: /categories/:slug/
</span></span><span class="line"><span class="cl">  tags: /tags/:slug/
</span></span><span class="line"><span class="cl">  pages: /:slug/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">author:
</span></span><span class="line"><span class="cl">  name: chensoul
</span></span><span class="line"><span class="cl">sitemap:
</span></span><span class="line"><span class="cl">  changefreq: weekly
</span></span><span class="line"><span class="cl">  priority: 0.5
</span></span><span class="line"><span class="cl">  filename: sitemap.xml
</span></span><span class="line"><span class="cl">params:
</span></span><span class="line"><span class="cl">  since: <span class="s2">&#34;2020&#34;</span>
</span></span><span class="line"><span class="cl">  rssFullContent: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">  keywords:
</span></span><span class="line"><span class="cl">    - devops
</span></span><span class="line"><span class="cl">    - programming
</span></span><span class="line"><span class="cl">  description: Programming <span class="p">|</span> Devops
</span></span><span class="line"><span class="cl">  logoTitle: ChenSoul
</span></span><span class="line"><span class="cl">  siteLogoImage: images/fly.png
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># headerTitle = &#34;chensoul&#34;                   # default: title</span>
</span></span><span class="line"><span class="cl">  headerImage: images/background.webp
</span></span><span class="line"><span class="cl">  showAuthorCard: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">  showMenuLanguages: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">  autoLoadComments: <span class="nb">false</span>
</span></span><span class="line"><span class="cl">  paginateOriginalStyle: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># The date format to use; for a list of valid formats, see https://gohugo.io/functions/format/</span>
</span></span><span class="line"><span class="cl">  dateFormatToUse: 2006-01-02
</span></span><span class="line"><span class="cl">  google_verification: <span class="s2">&#34;D8XBzUhT4irNUQLKut79HFni0v3Xow4FY-oxUcsUlVk&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Link custom CSS and JS assets</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   (relative to /static/css and /static/js respectively)</span>
</span></span><span class="line"><span class="cl">  customCSS: <span class="o">[]</span>
</span></span><span class="line"><span class="cl">  customJS: <span class="o">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">markup:
</span></span><span class="line"><span class="cl">  goldmark:
</span></span><span class="line"><span class="cl">    renderer:
</span></span><span class="line"><span class="cl">      unsafe: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ------------------------------------- #</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ---- Related Articles --------------- #</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ------------------------------------- #</span>
</span></span><span class="line"><span class="cl">related:
</span></span><span class="line"><span class="cl">  <span class="c1"># Only include matches with rank &gt;= threshold. This is a normalized rank between 0 and 100.</span>
</span></span><span class="line"><span class="cl">  threshold: <span class="m">50</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># To get stable &#34;See also&#34; sections we, by default, exclude newer related pages.</span>
</span></span><span class="line"><span class="cl">  includeNewer: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Will lower case keywords in both queries and in the indexes.</span>
</span></span><span class="line"><span class="cl">  toLower: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  indices:
</span></span><span class="line"><span class="cl">    - name: categories
</span></span><span class="line"><span class="cl">      weight: <span class="m">200</span>
</span></span><span class="line"><span class="cl">    - name: keywords
</span></span><span class="line"><span class="cl">      weight: <span class="m">150</span>
</span></span><span class="line"><span class="cl">    - name: tags
</span></span><span class="line"><span class="cl">      weight: <span class="m">100</span>
</span></span><span class="line"><span class="cl">languages:
</span></span><span class="line"><span class="cl">  zh:
</span></span><span class="line"><span class="cl">    languageCode: zh
</span></span><span class="line"><span class="cl">    languageName: 中文
</span></span><span class="line"><span class="cl">    contentDir: content
</span></span><span class="line"><span class="cl">    weight: <span class="m">1</span>
</span></span><span class="line"><span class="cl">    params:
</span></span><span class="line"><span class="cl">      description: Devops <span class="p">|</span> Programming
</span></span><span class="line"><span class="cl">    menu:
</span></span><span class="line"><span class="cl">      main:
</span></span><span class="line"><span class="cl">        - name: 思考
</span></span><span class="line"><span class="cl">          weight: <span class="m">10</span>
</span></span><span class="line"><span class="cl">          identifier: idea
</span></span><span class="line"><span class="cl">          url: categories/idea/
</span></span><span class="line"><span class="cl">      social:
</span></span><span class="line"><span class="cl">        - name: Telegram
</span></span><span class="line"><span class="cl">          weight: <span class="m">10</span>
</span></span><span class="line"><span class="cl">          identifier: telegram
</span></span><span class="line"><span class="cl">          url: https://t.me/chensoul_share
</span></span><span class="line"><span class="cl">        - name: Twitter
</span></span><span class="line"><span class="cl">          weight: <span class="m">20</span>
</span></span><span class="line"><span class="cl">          identifier: twitter
</span></span><span class="line"><span class="cl">          url: https://twitter.com/chensoul_eth
</span></span><span class="line"><span class="cl">        - name: BiliBili
</span></span><span class="line"><span class="cl">          weight: <span class="m">40</span>
</span></span><span class="line"><span class="cl">          identifier: bilibili
</span></span><span class="line"><span class="cl">          url: https://space.bilibili.com/699805065/
</span></span><span class="line"><span class="cl">      links:
</span></span><span class="line"><span class="cl">        - name: GitHub
</span></span><span class="line"><span class="cl">          weight: <span class="m">10</span>
</span></span><span class="line"><span class="cl">          identifier: github
</span></span><span class="line"><span class="cl">          url: https://github.com/chensoul
</span></span><span class="line"><span class="cl">        - name: Services
</span></span><span class="line"><span class="cl">          weight: <span class="m">20</span>
</span></span><span class="line"><span class="cl">          identifier: services-status
</span></span><span class="line"><span class="cl">          url: https://uptime.chensoul.com/status/services
</span></span><span class="line"><span class="cl">        - name: Analytics
</span></span><span class="line"><span class="cl">          weight: <span class="m">30</span>
</span></span><span class="line"><span class="cl">          identifier: chensoul-analytics
</span></span><span class="line"><span class="cl">          url: https://data.chensoul.com/share/8YKX7FUa/pseudoyu-blog
</span></span></code></pre></div><h2 id="部署">部署</h2>
<h3 id="github-actions-部署">GitHub Actions 部署</h3>
<p><strong>1、首先在 github 里创建一个仓库：chensoul.github.io</strong></p>
<p><strong>2、将本地文件提交到 github</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> chensoul.github.io
</span></span><span class="line"><span class="cl">git init .
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;# chensoul.github.io&#34;</span> &gt;&gt; README.md
</span></span><span class="line"><span class="cl">git remote add origin git@github.com:chensoul/chensoul.github.io.git
</span></span></code></pre></div><p><strong>3、将本地代码推送到仓库</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git commit -m <span class="s2">&#34;first commit&#34;</span>
</span></span><span class="line"><span class="cl">git push -u origin main
</span></span></code></pre></div><p><strong>4、创建 GitHub Actions 的 workflow</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p .github/workflows
</span></span><span class="line"><span class="cl">touch .github/workflows/gh-page.yml
</span></span></code></pre></div><p>gh-page.yml 内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">timeout-minutes</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="l">latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_branch</span><span class="p">:</span><span class="w"> </span><span class="l">gh-pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span></code></pre></div><p>上面的工作流是在 gh-pages 分支上触发，当有代码提交时候，会运行 hugo 命令生成静态文件（public 目录），并且将他们推送到 main 分支。</p>
<p>所以，我们需要基于当前分支创建一个新分支 gh-pages ，并且推送到远程仓库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch gh-pages
</span></span><span class="line"><span class="cl">git checkout gh-pages
</span></span><span class="line"><span class="cl">git push origin gh-pages
</span></span></code></pre></div><p><strong>5、修改代码，推送到仓库，触发工作流</strong></p>
<p>在本地修改某个文件，提交代码，然后在 github <a href="https://github.com/chensoul/chensoul.github.io/actions">网站</a> 查看工作流</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git push origin gh-pages
</span></span></code></pre></div><p><strong>7、设置自定义域名</strong></p>
<p>参考<a href="https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-a-subdomain">管理 GitHub Pages 站点的自定义域</a>，添加一个自定义域名：blog.chensoul.com：</p>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/github-page-settings.png" alt="github-page-settings"  /></p>
<p>或者，在仓库的 static 目录创建一个 CNAME 文件，内容为：blog.chensoul.com，然后，保存提交，Github Actions 会将该文件推送到 main 分支。</p>
<p>然后，在亚马逊网站添加 <a href="https://console.aws.amazon.com/route53/v2/hostedzones#">CNAME 记录</a>：</p>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/amazon-dns-settings.png" alt="amazon-dns-settings"  /></p>
<p>8、部署到 CloudFlare Pages</p>
<p>参考 <a href="https://hee.ink/p/%E4%BB%8E-github-pages-%E8%BF%81%E7%A7%BB%E5%88%B0-cloudflare-pages-%E7%9A%84%E4%BD%93%E9%AA%8C%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%B0%8F%E8%AE%B0/">从 GitHub Pages 迁移到 CloudFlare Pages 的体验与踩坑小记</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
