<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>ChenSoul</title><link>https://blog.chensoul.com/</link><description>Recent content on ChenSoul</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Fri, 19 Aug 2022 17:16:56 +0800</lastBuildDate><atom:link href="https://blog.chensoul.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Greenplum CC Web安装和部署</title><link>https://blog.chensoul.com/posts/greenplum-cc-web-install-deploy/</link><pubDate>Fri, 19 Aug 2022 17:16:56 +0800</pubDate><guid>https://blog.chensoul.com/posts/greenplum-cc-web-install-deploy/</guid><description>安装 1、下载安装文件 从 https://network.pivotal.io/products/pivotal-gpdb 下载，当前最新版本为 6.3.0。 2、解压安装文件 unzip greenplum-cc-web-6.3.0-gp6-rhel7-x86_64.zip 3、进入安装目录 cd greenplum-cc-web-6.3.0-gp6-rhel7-x86_64 4、创建配置文件 install.conf，用</description><content:encoded><![CDATA[<h2 id="安装">安装</h2>
<p>1、下载安装文件</p>
<p>从 <a href="https://network.pivotal.io/products/pivotal-gpdb">https://network.pivotal.io/products/pivotal-gpdb</a> 下载，当前最新版本为 6.3.0。</p>
<p>2、解压安装文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">unzip greenplum-cc-web-6.3.0-gp6-rhel7-x86_64.zip
</span></span></code></pre></div><p>3、进入安装目录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> greenplum-cc-web-6.3.0-gp6-rhel7-x86_64
</span></span></code></pre></div><p>4、创建配置文件 install.conf，用于设置安装参数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat &gt;&gt; install.conf <span class="s">&lt;&lt; EOF 
</span></span></span><span class="line"><span class="cl"><span class="s">path = /usr/local
</span></span></span><span class="line"><span class="cl"><span class="s"># Set the display_name param to the string to display in the GPCC UI.
</span></span></span><span class="line"><span class="cl"><span class="s"># The default is &#34;gpcc&#34;
</span></span></span><span class="line"><span class="cl"><span class="s"># display_name = gpcc
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">master_port = 5432
</span></span></span><span class="line"><span class="cl"><span class="s">web_port = 28080
</span></span></span><span class="line"><span class="cl"><span class="s">rpc_port = 8899
</span></span></span><span class="line"><span class="cl"><span class="s">enable_ssl = false
</span></span></span><span class="line"><span class="cl"><span class="s"># Uncomment and set the ssl_cert_file if you set enable_ssl to true.
</span></span></span><span class="line"><span class="cl"><span class="s"># ssl_cert_file = /etc/certs/mycert
</span></span></span><span class="line"><span class="cl"><span class="s">enable_kerberos = false
</span></span></span><span class="line"><span class="cl"><span class="s"># Uncomment and set the following parameters if you set enable_kerberos to true.
</span></span></span><span class="line"><span class="cl"><span class="s"># webserver_url = &lt;webserver_service_url&gt;
</span></span></span><span class="line"><span class="cl"><span class="s"># krb_mode = 1
</span></span></span><span class="line"><span class="cl"><span class="s"># keytab = &lt;path_to_keytab&gt;
</span></span></span><span class="line"><span class="cl"><span class="s"># krb_service_name = postgres
</span></span></span><span class="line"><span class="cl"><span class="s"># User interface language: 1=English, 2=Chinese, 3=Korean, 4=Russian, 5=Japanese
</span></span></span><span class="line"><span class="cl"><span class="s">language = 1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><p>6、执行安装命令</p>
<p>通过配置文件安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># -W 设置密码，输入gpmon</span>
</span></span><span class="line"><span class="cl">./gpccinstall-6.3.0 -auto -W
</span></span></code></pre></div><p>执行完之后，会发现创建了gpperfmon数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">CREATING SUPERUSER <span class="s1">&#39;gpmon&#39;</span>...
</span></span><span class="line"><span class="cl">CREATING COMMAND CENTER DATABASE <span class="s1">&#39;gpperfmon&#39;</span>...
</span></span><span class="line"><span class="cl">RELOADING pg_hba.conf. PLEASE WAIT ...
</span></span></code></pre></div><p>7、设置环境变量</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;source /usr/local/greenplum-cc/gpcc_path.sh&#34;</span> &gt;&gt; ~/.bashrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span>  ~/.bashrc
</span></span></code></pre></div><p>8、同步配置文件</p>
<p>查看生成的文件 .pgpass</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat ~/.pgpass
</span></span><span class="line"><span class="cl">*:5432:gpperfmon:gpmon:gpmon
</span></span></code></pre></div><blockquote>
<p>可以看到创建了gpmon用户，密码为changeme。</p>
</blockquote>
<p>可以修改该文件中密码为gpmon，或者通过环境变量设置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">PGPASSWORD</span><span class="o">=</span>gpmon
</span></span></code></pre></div><p>也可以修改数据库中密码和~/.pgpass一致：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">alter user gpmon encrypted password <span class="s1">&#39;gpmon&#39;</span>
</span></span></code></pre></div><p>将该文件同步到Standby Master节点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">scp ~/.pgpass gpadmin@dw-test-node002:~
</span></span><span class="line"><span class="cl">ssh dw-prod-node001 <span class="s2">&#34;chmod 600 ~/.pgpass&#34;</span>
</span></span></code></pre></div><p>9、查看配置文件</p>
<ul>
<li><code>$MASTER_DATA_DIRECTORY/gpperfmon/conf/gpperfmon.conf</code></li>
<li><code>$GPCC_HOME/conf/app.conf</code></li>
<li><code>$MASTER_DATA_DIRECTORY/gpmetrics/gpcc.conf</code></li>
<li><code>$MASTER_DATA_DIRECTORY/postgresql.conf</code></li>
</ul>
<p>查看$GPCC_HOME/conf/app.conf</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat <span class="nv">$GPCC_HOME</span>/conf/app.conf
</span></span><span class="line"><span class="cl"><span class="nv">appname</span>         <span class="o">=</span> gpccws
</span></span><span class="line"><span class="cl"><span class="nv">listentcp4</span>      <span class="o">=</span> <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="nv">runmode</span>         <span class="o">=</span> prod
</span></span><span class="line"><span class="cl"><span class="nv">session</span>         <span class="o">=</span> <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="nv">enablexsrf</span>      <span class="o">=</span> <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="nv">xsrfexpire</span>      <span class="o">=</span> <span class="m">2592000</span>
</span></span><span class="line"><span class="cl"><span class="nv">xsrfkey</span>         <span class="o">=</span> 61oETzKXQAGaYdkL5gEmGeJJFuYh7EQnp2XdTP1o
</span></span><span class="line"><span class="cl"><span class="nv">rendertype</span>      <span class="o">=</span> json
</span></span><span class="line"><span class="cl"><span class="nv">printallsqls</span>    <span class="o">=</span> <span class="nb">false</span>
</span></span><span class="line"><span class="cl"><span class="nv">master_port</span>     <span class="o">=</span> <span class="m">5432</span>
</span></span><span class="line"><span class="cl"><span class="nv">master_host</span>     <span class="o">=</span> dw-test-node001
</span></span><span class="line"><span class="cl"><span class="nv">path</span>            <span class="o">=</span> /usr/local
</span></span><span class="line"><span class="cl"><span class="nv">display_name</span>    <span class="o">=</span> gpcc
</span></span><span class="line"><span class="cl"><span class="nv">enable_kerberos</span> <span class="o">=</span> <span class="nb">false</span>
</span></span><span class="line"><span class="cl"><span class="nv">EnableHTTPS</span>     <span class="o">=</span> <span class="nb">false</span>
</span></span><span class="line"><span class="cl"><span class="nv">EnableHTTP</span>      <span class="o">=</span> <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="nv">httpport</span>        <span class="o">=</span> <span class="m">28080</span>
</span></span><span class="line"><span class="cl"><span class="nv">rpc_port</span>        <span class="o">=</span> <span class="m">8899</span>
</span></span><span class="line"><span class="cl"><span class="nv">language</span>        <span class="o">=</span> English
</span></span><span class="line"><span class="cl"><span class="nv">log_level</span>       <span class="o">=</span> INFO
</span></span><span class="line"><span class="cl"><span class="nv">ws_perf_port</span>    <span class="o">=</span> <span class="m">6162</span>
</span></span><span class="line"><span class="cl"><span class="nv">agent_perf_port</span> <span class="o">=</span> <span class="m">616</span>
</span></span></code></pre></div><p>修改 $MASTER_DATA_DIRECTORY/pg_hba.conf：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">local</span>   gpperfmon       gpmon   md5
</span></span><span class="line"><span class="cl">host    gpperfmon       gpmon   0.0.0.0/0     md5
</span></span><span class="line"><span class="cl">host    gpperfmon       gpmon   ::1/128       md5
</span></span></code></pre></div><blockquote>
<p>需要重启gp数据库：gpstop -r</p>
</blockquote>
<p>登陆测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">psql -d gpperfmon -U gpmon -h -W
</span></span></code></pre></div><p>10、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nv">PGPASSWORD</span><span class="o">=</span>gpmon gpcc start
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 也可以输入密码登陆</span>
</span></span><span class="line"><span class="cl">$ gpcc start -W
</span></span></code></pre></div><p>查看状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gpcc status
</span></span><span class="line"><span class="cl">2019-12-16 18:37:19 GPCC webserver: running
</span></span><span class="line"><span class="cl">2019-12-16 18:37:19 GPCC agents: 3/3 agents running
</span></span></code></pre></div><p>查看日志：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tailf <span class="nv">$GPCC_HOME</span>/logs/gpccws.log
</span></span></code></pre></div><p>11、访问浏览器 http://192.168.56.141:28080 ，用户名和密码为 gpmon</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1g9zl5upkvbj316u0u00xe.jpg" alt="image-20191217120230168"></p>
<p>12、查看配置参数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gpcc --settings
</span></span><span class="line"><span class="cl">Install path:   /usr/local
</span></span><span class="line"><span class="cl">Display Name:   gpcc
</span></span><span class="line"><span class="cl">GPCC port:      <span class="m">28080</span>
</span></span><span class="line"><span class="cl">Kerberos:       disabled
</span></span><span class="line"><span class="cl">SSL:            disabled
</span></span></code></pre></div><h2 id="禁用gpperfmon">禁用gpperfmon</h2>
<p>1、安装</p>
<p>使用gpperfmon_install命令可以创建名称为gpperfmon的数据库，默认使用gpmon用户。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpperfmon_install --enable --password gpmon --port <span class="m">5432</span>
</span></span></code></pre></div><p>当然，在前面运行gpccinstall-6.1.0的时候，已经创建了该数据库。</p>
<p>2、查看gpperfmon是否开启</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpconfig -s gp_enable_gpperfmon
</span></span></code></pre></div><p>3、 Greenplum Command Center不再需要gpperfmon agent搜集的历史数据，所以需要禁用gp_enable_gpperfmon</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpconfig -c gp_enable_perform -v off
</span></span></code></pre></div><p>4、然后重启数据库</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpstop -ar 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#强制重启</span>
</span></span><span class="line"><span class="cl">gpstop -Ma immediate
</span></span></code></pre></div><h2 id="设置gpmon角色日志参数">设置gpmon角色日志参数</h2>
<p>连接gpperfmon数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">psql -d gpperfmon -p <span class="m">5432</span> -U gpadmin
</span></span></code></pre></div><p>修改角色：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">psql -d gpperfmon -U gpmon
</span></span><span class="line"><span class="cl">psql <span class="o">(</span>9.4.24<span class="o">)</span>
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;help&#34;</span> <span class="k">for</span> help.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">gpperfmon</span><span class="o">=</span><span class="c1"># ALTER ROLE gpmon SET log_statement TO DDL;</span>
</span></span><span class="line"><span class="cl">ALTER ROLE
</span></span><span class="line"><span class="cl"><span class="nv">gpperfmon</span><span class="o">=</span><span class="c1"># ALTER ROLE gpmon SET log_min_messages to FATAL;</span>
</span></span><span class="line"><span class="cl">ALTER ROLE
</span></span></code></pre></div><h2 id="卸载">卸载</h2>
<p>1、停止</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpcc stop
</span></span></code></pre></div><p>2、删除安装目录</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">rm -rf /usr/local/greenplum-cc-web-6.1.0
</span></span></code></pre></div><p>3、禁用采集数据agent</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">su - gpadmin
</span></span><span class="line"><span class="cl">gpconfig -c gp_enable_gpperfmon -v off
</span></span></code></pre></div><p>4、删除pg_hba.conf中gpmon条目</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#local     gpperfmon     gpmon     md5  </span>
</span></span><span class="line"><span class="cl"><span class="c1">#host      gpperfmon     gpmon    0.0.0.0/0    md5</span>
</span></span></code></pre></div><p>5、删除角色</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">psql template1 -c <span class="s1">&#39;DROP ROLE gpmon;&#39;</span>
</span></span></code></pre></div><p>6、重启数据库</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpstop -r
</span></span></code></pre></div><p>7、删除未提交的的数据和日志</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">rm -rf <span class="nv">$MASTER_DATA_DIRECTORY</span>/gpperfmon/data/* 
</span></span><span class="line"><span class="cl">rm -rf <span class="nv">$MASTER_DATA_DIRECTORY</span>/gpperfmon/logs/*
</span></span></code></pre></div><p>8、删除数据库</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dropdb gpperfmon
</span></span></code></pre></div>]]></content:encoded></item><item><title>Greenplum安装和部署</title><link>https://blog.chensoul.com/posts/greenplum-install-deploy/</link><pubDate>Fri, 19 Aug 2022 17:14:18 +0800</pubDate><guid>https://blog.chensoul.com/posts/greenplum-install-deploy/</guid><description>本文主要介绍如何快速安装部署单节点的 Greenplum过程，以及Greenplum的一些常用命令及工具。 环境准备 环境说明 操作系统：Cento</description><content:encoded><![CDATA[<p>本文主要介绍如何快速安装部署单节点的 Greenplum过程，以及Greenplum的一些常用命令及工具。</p>
<h2 id="环境准备">环境准备</h2>
<h3 id="环境说明">环境说明</h3>
<p>操作系统：Centos7</p>
<p>节点环境：</p>
<table>
<thead>
<tr>
<th>ip</th>
<th>hostname</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.56.141</td>
<td>dw-test-node001</td>
<td>master</td>
</tr>
<tr>
<td>192.168.56.142</td>
<td>dw-test-node002</td>
<td>segment</td>
</tr>
<tr>
<td>192.168.56.143</td>
<td>dw-test-node003</td>
<td>segment</td>
</tr>
</tbody>
</table>
<p>安装用户：root</p>
<h3 id="配置系统参数">配置系统参数</h3>
<p>在每台服务器上执行以下操作。</p>
<h4 id="配置hosts文件">配置hosts文件</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat &gt; /etc/hosts <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">192.168.56.141 dw-test-node001
</span></span></span><span class="line"><span class="cl"><span class="s">192.168.56.142 dw-test-node002
</span></span></span><span class="line"><span class="cl"><span class="s">192.168.56.143 dw-test-node003
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><h4 id="关闭selinux">关闭selinux</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">setenforce <span class="m">0</span>  &gt;/dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;s/^SELINUX=enforcing/SELINUX=disabled/g&#39;</span> /etc/sysconfig/selinux
</span></span><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;s/^SELINUX=enforcing/SELINUX=disabled/g&#39;</span> /etc/selinux/config
</span></span></code></pre></div><h4 id="关闭防火墙">关闭防火墙</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl stop firewalld.service <span class="o">&amp;&amp;</span> systemctl disable firewalld.service
</span></span></code></pre></div><h4 id="设置时钟同步">设置时钟同步</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install ntp -y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat &gt; /etc/ntp.conf <span class="s">&lt;&lt; EOF
</span></span></span><span class="line"><span class="cl"><span class="s">#在与上级时间服务器联系时所花费的时间，记录在driftfile参数后面的文件
</span></span></span><span class="line"><span class="cl"><span class="s">driftfile /var/lib/ntp/drift
</span></span></span><span class="line"><span class="cl"><span class="s">#默认关闭所有的 NTP 联机服务
</span></span></span><span class="line"><span class="cl"><span class="s">restrict default ignore
</span></span></span><span class="line"><span class="cl"><span class="s">restrict -6 default ignore
</span></span></span><span class="line"><span class="cl"><span class="s">#如从loopback网口请求，则允许NTP的所有操作
</span></span></span><span class="line"><span class="cl"><span class="s">restrict 127.0.0.1
</span></span></span><span class="line"><span class="cl"><span class="s">restrict -6 ::1
</span></span></span><span class="line"><span class="cl"><span class="s">#使用指定的时间服务器
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp1.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp2.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp3.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">#允许指定的时间服务器查询本时间服务器的信息
</span></span></span><span class="line"><span class="cl"><span class="s">restrict ntp1.aliyun.com nomodify notrap nopeer noquery
</span></span></span><span class="line"><span class="cl"><span class="s">#其它认证信息
</span></span></span><span class="line"><span class="cl"><span class="s">includefile /etc/ntp/crypto/pw
</span></span></span><span class="line"><span class="cl"><span class="s">keys /etc/ntp/keys
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl start ntpd <span class="o">&amp;&amp;</span> systemctl <span class="nb">enable</span> ntpd
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;* */6 * * * /usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /sbin/hwclock --systohc &gt; /dev/null 2&gt;&amp;1&#39;</span> &gt;&gt; /var/spool/cron/<span class="sb">`</span>whoami<span class="sb">`</span>
</span></span></code></pre></div><h4 id="配置内核参数">配置内核参数</h4>
<p>参考 <a href="https://segmentfault.com/a/1190000020654036?utm_source=tag-newest">https://segmentfault.com/a/1190000020654036?utm_source=tag-newest</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#设置内核参数</span>
</span></span><span class="line"><span class="cl">cat &gt; greenplum.conf <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">kernel.shmall = 2033299
</span></span></span><span class="line"><span class="cl"><span class="s">kernel.shmmax = 8328392704
</span></span></span><span class="line"><span class="cl"><span class="s">kernel.shmmni = 4096
</span></span></span><span class="line"><span class="cl"><span class="s">kernel.sem = 500 1024000 200 4096
</span></span></span><span class="line"><span class="cl"><span class="s">kernel.sysrq = 1
</span></span></span><span class="line"><span class="cl"><span class="s">kernel.core_uses_pid = 1
</span></span></span><span class="line"><span class="cl"><span class="s">kernel.msgmnb = 65536
</span></span></span><span class="line"><span class="cl"><span class="s">kernel.msgmax = 65536
</span></span></span><span class="line"><span class="cl"><span class="s">kernel.msgmni = 31764
</span></span></span><span class="line"><span class="cl"><span class="s">net.ipv4.tcp_syncookies = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.ipv4.conf.default.accept_source_route = 0
</span></span></span><span class="line"><span class="cl"><span class="s">net.ipv4.tcp_tw_recycle = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.ipv4.tcp_max_syn_backlog = 4096
</span></span></span><span class="line"><span class="cl"><span class="s">net.ipv4.conf.all.arp_filter = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.ipv4.ip_local_port_range = 10000 65535
</span></span></span><span class="line"><span class="cl"><span class="s">net.core.netdev_max_backlog = 10000
</span></span></span><span class="line"><span class="cl"><span class="s">net.core.rmem_max = 2097152
</span></span></span><span class="line"><span class="cl"><span class="s">net.core.wmem_max = 2097152
</span></span></span><span class="line"><span class="cl"><span class="s">vm.overcommit_memory = 2
</span></span></span><span class="line"><span class="cl"><span class="s">vm.overcommit_ratio = 95 
</span></span></span><span class="line"><span class="cl"><span class="s">vm.swappiness = 0
</span></span></span><span class="line"><span class="cl"><span class="s">vm.zone_reclaim_mode = 0
</span></span></span><span class="line"><span class="cl"><span class="s">#这个时候，后台进行在脏数据达到3%时就开始异步清理，但在10%之前系统不会强制同步写磁盘。刷脏进程3秒起来一次，脏数据存活超过10秒就会开始刷。
</span></span></span><span class="line"><span class="cl"><span class="s">vm.dirty_expire_centisecs = 500
</span></span></span><span class="line"><span class="cl"><span class="s">vm.dirty_writeback_centisecs = 100
</span></span></span><span class="line"><span class="cl"><span class="s">vm.dirty_background_ratio = 3
</span></span></span><span class="line"><span class="cl"><span class="s">vm.dirty_ratio = 10
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mv greenplum.conf /etc/sysctl.d/greenplum.conf
</span></span><span class="line"><span class="cl">sysctl -p /etc/sysctl.d/greenplum.conf
</span></span></code></pre></div><p>生产环境的配置，需要详细参考官方文档的说明：https://gpdb.docs.pivotal.io/6-1/install_guide/prep_os.html#topic3__sysctl_file</p>
<p>kernel.shmall（共享内存页总数）
kernel.shmmax (共享内存段的最大值)
一般来讲，这两个参数的值应该是物理内存的一半，可以通过操作系统的值_PHYS_PAGES和PAGE_SIZE计算得出。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kernel.shmall <span class="o">=</span> <span class="o">(</span> _PHYS_PAGES / 2<span class="o">)</span>
</span></span><span class="line"><span class="cl">kernel.shmmax <span class="o">=</span> <span class="o">(</span> _PHYS_PAGES / 2<span class="o">)</span> * PAGE_SIZE
</span></span></code></pre></div><p>也可以通过以下两个命令得出这两个参数的值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="k">$(</span>expr <span class="k">$(</span>getconf _PHYS_PAGES<span class="k">)</span> / 2<span class="k">)</span> 
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="k">$(</span>expr <span class="k">$(</span>getconf _PHYS_PAGES<span class="k">)</span> / <span class="m">2</span> <span class="se">\*</span> <span class="k">$(</span>getconf PAGE_SIZE<span class="k">))</span>
</span></span></code></pre></div><p>如果得出的kernel.shmmax值小于系统的默认值，则引用系统默认值即可</p>
<p>对于64G内存的操作系统，建议配置如下值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vm.dirty_background_ratio <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">vm.dirty_ratio <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">vm.dirty_background_bytes <span class="o">=</span> <span class="m">1610612736</span> <span class="c1"># 1.5GB</span>
</span></span><span class="line"><span class="cl">vm.dirty_bytes <span class="o">=</span> <span class="m">4294967296</span> <span class="c1"># 4GB</span>
</span></span></code></pre></div><p>对于小于64G内存的操作系统，建议配置如下值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vm.dirty_background_ratio <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">vm.dirty_ratio <span class="o">=</span> <span class="m">10</span>
</span></span></code></pre></div><h4 id="设置文件句柄数">设置文件句柄数</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat &gt;/etc/security/limits.d/file.conf<span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">*       soft    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">*       hard    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">*       soft    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">*       hard    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    soft    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    hard    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    soft    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    hard    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><h4 id="设置ssh连接">设置SSH连接</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/#MaxStartups 10:30:100/MaxStartups 10:30:200/g&#39;</span> /etc/ssh/sshd_config
</span></span><span class="line"><span class="cl">service sshd restart
</span></span></code></pre></div><h3 id="配置-greenplum-要求的参数">配置 Greenplum 要求的参数</h3>
<h4 id="磁盘io设置">磁盘IO设置</h4>
<p>设置磁盘预读</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fdisk -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/sbin/blockdev --setra <span class="m">16384</span> /dev/sdb
</span></span></code></pre></div><p>调整IO调度算法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> deadline &gt; /sys/block/sdb/queue/scheduler
</span></span><span class="line"><span class="cl">grubby --update-kernel<span class="o">=</span>ALL --args<span class="o">=</span><span class="s2">&#34;elevator=deadline&#34;</span>
</span></span></code></pre></div><h4 id="设置transparent-huge-pages">设置Transparent Huge Pages</h4>
<p>禁止透明大页，Redhat 6以及更高版本默认激活THP，THP会降低GP database性能，通过修改文件/boot/grub/grub.conf添加参数transparent_hugepage=never禁止THP的应用，但需要重新启动系统</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;echo never &gt; /sys/kernel/mm/*transparent_hugepage/defrag&#34;</span> &gt;/etc/rc.local
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;echo never &gt; /sys/kernel/mm/*transparent_hugepage/enabled&#34;</span> &gt;/etc/rc.local
</span></span><span class="line"><span class="cl">grubby --update-kernel<span class="o">=</span>ALL --args<span class="o">=</span><span class="s2">&#34;transparent_hugepage=never&#34;</span>
</span></span></code></pre></div><blockquote>
<p>需要重启系统</p>
</blockquote>
<p>查看是否禁用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat /sys/kernel/mm/*transparent_hugepage/enabled
</span></span><span class="line"><span class="cl">always madvise <span class="o">[</span>never<span class="o">]</span>
</span></span></code></pre></div><p>检查内核参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ grubby --info<span class="o">=</span>ALL
</span></span><span class="line"><span class="cl"><span class="nv">index</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="nv">kernel</span><span class="o">=</span>/boot/vmlinuz-4.4.202-1.el7.elrepo.x86_64
</span></span><span class="line"><span class="cl"><span class="nv">args</span><span class="o">=</span><span class="s2">&#34;ro elevator=deadline no_timer_check crashkernel=auto rd.lvm.lv=centos_centos7/root rd.lvm.lv=centos_centos7/swap biosdevname=0 net.ifnames=0 rhgb quiet numa=off transparent_hugepage=never&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">root</span><span class="o">=</span>/dev/mapper/centos_centos7-root
</span></span><span class="line"><span class="cl"><span class="nv">initrd</span><span class="o">=</span>/boot/initramfs-4.4.202-1.el7.elrepo.x86_64.img
</span></span><span class="line"><span class="cl"><span class="nv">title</span><span class="o">=</span>CentOS Linux <span class="o">(</span>4.4.202-1.el7.elrepo.x86_64<span class="o">)</span> <span class="m">7</span> <span class="o">(</span>Core<span class="o">)</span>
</span></span></code></pre></div><h4 id="关闭removeipc">关闭RemoveIPC</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/#RemoveIPC=no/RemoveIPC=no/g&#39;</span> /etc/systemd/logind.conf
</span></span><span class="line"><span class="cl">service systemd-logind restart
</span></span></code></pre></div><h4 id="挂载磁盘">挂载磁盘</h4>
<p>先查看磁盘挂载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fdisk -l
</span></span></code></pre></div><p>如果没有磁盘，则需要挂载磁盘。官方建议使用XFS磁盘类型，当然其他磁盘类型也是可以。</p>
<p>配置/etc/fstab文件以使Linux系统启动默认挂载磁盘，如下配置添加到文件/etc/fstab：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkfs.xfs -f /dev/sdb
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir /data
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;/dev/sdb /data xfs  nodev,noatime,nobarrier,inode64 0 0&#34;</span> &gt;&gt; /etc/fstab
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mount -a
</span></span></code></pre></div><h3 id="创建greenplum管理员用户">创建Greenplum管理员用户</h3>
<p>使用root用户创建用户 gpadmin，这里密码也设置为 gpadmin</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">USER</span><span class="o">=</span>gpadmin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">groupadd <span class="nv">$USER</span>
</span></span><span class="line"><span class="cl">useradd <span class="nv">$USER</span> -r -m -g <span class="nv">$USER</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$USER</span><span class="p">|</span>passwd <span class="nv">$USER</span> --stdin &gt;/dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span></code></pre></div><p>添加sudo权限：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$USER</span><span class="s2"> ALL = (root) NOPASSWD:ALL&#34;</span> <span class="p">|</span> sudo tee /etc/sudoers.d/<span class="nv">$USER</span>
</span></span></code></pre></div><p>切换到 gpadmin 用户，生成ssh密钥：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">su gpadmin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span> ! -f ~/.ssh/id_rsa.pub <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">(</span>yes<span class="p">|</span>ssh-keygen -f ~/.ssh/id_rsa -t rsa -N <span class="s2">&#34;&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span> chmod <span class="m">600</span> ~/.ssh/id_rsa.pub <span class="o">)</span> <span class="o">&amp;&amp;</span> cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
</span></span></code></pre></div><h2 id="安装数据库">安装数据库</h2>
<h3 id="安装">安装</h3>
<p>1、下载页面：https://network.pivotal.io/products/pivotal-gpdb/ ，当前最新版本为6.21.2，对应的rpm文件 greenplum-db-6.21.2-rhel7-x86_64.rpm。</p>
<p>拷贝到每个节点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">scp greenplum-db-6.21.2-rhel7-x86_64.rpm gpadmin@dw-test-node001:~
</span></span><span class="line"><span class="cl">scp greenplum-db-6.21.2-rhel7-x86_64.rpm gpadmin@dw-test-node002:~
</span></span><span class="line"><span class="cl">scp greenplum-db-6.21.2-rhel7-x86_64.rpm gpadmin@dw-test-node003:~
</span></span></code></pre></div><p>2、每个节点安装RPM</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh dw-test-node001 <span class="s2">&#34;sudo yum install greenplum-db-6.21.2-rhel7-x86_64.rpm -y&#34;</span>
</span></span><span class="line"><span class="cl">ssh dw-test-node002 <span class="s2">&#34;sudo yum install greenplum-db-6.21.2-rhel7-x86_64.rpm -y&#34;</span>
</span></span><span class="line"><span class="cl">ssh dw-test-node003 <span class="s2">&#34;sudo yum install greenplum-db-6.21.2-rhel7-x86_64.rpm -y&#34;</span>
</span></span></code></pre></div><p>3、修改安装目录权限</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh dw-test-node001 <span class="s2">&#34;sudo chown -R gpadmin:gpadmin /usr/local/greenplum*&#34;</span>
</span></span><span class="line"><span class="cl">ssh dw-test-node002 <span class="s2">&#34;sudo chown -R gpadmin:gpadmin /usr/local/greenplum*&#34;</span>
</span></span><span class="line"><span class="cl">ssh dw-test-node003 <span class="s2">&#34;sudo chown -R gpadmin:gpadmin /usr/local/greenplum*&#34;</span>
</span></span></code></pre></div><h3 id="确保无密码登陆">确保无密码登陆</h3>
<p>1、dw-test-node001节点上配置gpadmin用户无密码登陆到其他节点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">su gpadmin
</span></span><span class="line"><span class="cl">ssh-copy-id dw-test-node001
</span></span><span class="line"><span class="cl">ssh-copy-id dw-test-node002
</span></span><span class="line"><span class="cl">ssh-copy-id dw-test-node003
</span></span></code></pre></div><p>2、设置greenplum环境变量使其生效</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
</span></span></code></pre></div><p>3、配置hostfile_all文件，将所有的服务器名记录在里面。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat &gt; hostfile_all <span class="s">&lt;&lt; EOF
</span></span></span><span class="line"><span class="cl"><span class="s">dw-test-node001
</span></span></span><span class="line"><span class="cl"><span class="s">dw-test-node002
</span></span></span><span class="line"><span class="cl"><span class="s">dw-test-node003
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><p>hostfile_segment只保存segment节点的hostname</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat &gt; hostfile_segment <span class="s">&lt;&lt; EOF
</span></span></span><span class="line"><span class="cl"><span class="s">dw-test-node002
</span></span></span><span class="line"><span class="cl"><span class="s">dw-test-node003
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><p>4、使用gpssh-exkeys打通所有服务器，配置所有GP节点之间ssh互信：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gpssh-exkeys -f hostfile_all 
</span></span><span class="line"><span class="cl"><span class="o">[</span>STEP <span class="m">1</span> of 5<span class="o">]</span> create <span class="nb">local</span> ID and authorize on <span class="nb">local</span> host
</span></span><span class="line"><span class="cl">  ... /home/gpadmin/.ssh/id_rsa file exists ... key generation skipped
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>STEP <span class="m">2</span> of 5<span class="o">]</span> keyscan all hosts and update known_hosts file
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>STEP <span class="m">3</span> of 5<span class="o">]</span> retrieving credentials from remote hosts
</span></span><span class="line"><span class="cl">  ... send to dw-test-node001
</span></span><span class="line"><span class="cl">  ... send to dw-test-node002
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>STEP <span class="m">4</span> of 5<span class="o">]</span> determine common authentication file content
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>STEP <span class="m">5</span> of 5<span class="o">]</span> copy authentication files to all remote hosts
</span></span><span class="line"><span class="cl">  ... finished key exchange with dw-test-node001
</span></span><span class="line"><span class="cl">  ... finished key exchange with dw-test-node002
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> completed successfully
</span></span></code></pre></div><p>在打通所有机器通道之后，我们就可以使用gpssh命令对所有机器进行批量操作了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpssh -f hostfile_all <span class="s2">&#34;ls -l /usr/local/greenplum-db&#34;</span>
</span></span></code></pre></div><h3 id="创建存储">创建存储</h3>
<p>master上创建目录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpssh -h dw-test-node001 -e <span class="s1">&#39;sudo mkdir -p /gpdata/master &amp;&amp; sudo chown gpadmin:gpadmin /gpdata/master&#39;</span> 
</span></span></code></pre></div><p>数据节点创建目录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpssh -f hostfile_segment -e <span class="s1">&#39;sudo mkdir -p /gpdata/primary{0,1} /gpdata/mirror{0,1} &amp;&amp; sudo chown -R gpadmin:gpadmin /gpdata/*&#39;</span>
</span></span></code></pre></div><h3 id="初始化数据库">初始化数据库</h3>
<h4 id="创建模板">创建模板</h4>
<p>配置文件的模板可以在 $GPHOME/docs/cli_help/gpconfigs/ 目录下找到。gpinitsystem_config文件是初始化Greenplum的模板，在这个模板中，Mirror Segment的配置都被注释掉了，模板中基本初始化数据库的参数都是有的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat &gt; gpinitsystem_config <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">#数据库的代号
</span></span></span><span class="line"><span class="cl"><span class="s">ARRAY_NAME=&#34;Greenplum Data Platform&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">#Segment的名称前缀
</span></span></span><span class="line"><span class="cl"><span class="s">SEG_PREFIX=gpseg
</span></span></span><span class="line"><span class="cl"><span class="s">#Primary Segment起始的端口号
</span></span></span><span class="line"><span class="cl"><span class="s">PORT_BASE=40000
</span></span></span><span class="line"><span class="cl"><span class="s">#指定Primary Segment的数据目录，配置几次资源目录就是每个子节点有几个实例（推荐4-8个，这里配置了4个，primary与mirror文件夹个数对应）
</span></span></span><span class="line"><span class="cl"><span class="s">declare -a DATA_DIRECTORY=(/gpdata/primary0 /gpdata/primary1)
</span></span></span><span class="line"><span class="cl"><span class="s">#Master所在机器的Hostname
</span></span></span><span class="line"><span class="cl"><span class="s">MASTER_HOSTNAME=dw-test-node001
</span></span></span><span class="line"><span class="cl"><span class="s">#指定Master的数据目录
</span></span></span><span class="line"><span class="cl"><span class="s">MASTER_DIRECTORY=/gpdata/master
</span></span></span><span class="line"><span class="cl"><span class="s">#Master的端口
</span></span></span><span class="line"><span class="cl"><span class="s">MASTER_PORT=5432
</span></span></span><span class="line"><span class="cl"><span class="s">#指定Bash的版本
</span></span></span><span class="line"><span class="cl"><span class="s">TRUSTED_SHELL=ssh
</span></span></span><span class="line"><span class="cl"><span class="s">#设置的是检查点段的大小，较大的检查点段可以改善大数据量装载的性能，同时会加长灾难事务恢复的时间。
</span></span></span><span class="line"><span class="cl"><span class="s">CHECK_POINT_SEGMENTS=8
</span></span></span><span class="line"><span class="cl"><span class="s">#字符集
</span></span></span><span class="line"><span class="cl"><span class="s">ENCODING=utf-8
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">#Mirror Segment起始的端口号
</span></span></span><span class="line"><span class="cl"><span class="s">MIRROR_PORT_BASE=41000
</span></span></span><span class="line"><span class="cl"><span class="s">#Primary Segment主备同步的起始端口号
</span></span></span><span class="line"><span class="cl"><span class="s">REPLICATION_PORT_BASE=42000
</span></span></span><span class="line"><span class="cl"><span class="s">#Mirror Segment主备同步的起始端口号
</span></span></span><span class="line"><span class="cl"><span class="s">MIRROR_REPLICATION_PORT_BASE=43000
</span></span></span><span class="line"><span class="cl"><span class="s">#Mirror Segment的数据目录,配置几次资源目录就是每个子节点有几个实例（推荐4-8个，这里配置了4个，primary与mirror文件夹个数对应）
</span></span></span><span class="line"><span class="cl"><span class="s">declare -a MIRROR_DATA_DIRECTORY=(/gpdata/mirror0 /gpdata/mirror1)
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">MASTER_MAX_CONNECT=250
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><blockquote>
<p>如果是挂载了多个磁盘，则数据路径需要使用独立的路径。</p>
</blockquote>
<h4 id="初始化数据库-1">初始化数据库</h4>
<p>使用gpinitsystem脚本来初始化数据库，命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpinitsystem -c gpinitsystem_config -h hostfile_segment
</span></span></code></pre></div><p>也可以指定standby master ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-BASH" data-lang="BASH"><span class="line"><span class="cl">gpinitsystem -c gpinitsystem_config -h hostfile_segment -s dw-test-node002
</span></span></code></pre></div><blockquote>
<p>如果不想手动确认，可以添加 <code>-a</code> 参数。</p>
</blockquote>
<p>后期添加standby master：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#在不同机器增加standby master节点</span>
</span></span><span class="line"><span class="cl">gpinitstandby -S /gdata/master/gpseg1 -s dw-test-node001
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#在同一机器增加standby master节点</span>
</span></span><span class="line"><span class="cl">gpinitstandby -S /gdata/master/gpseg1 -P <span class="m">5433</span> -s dw-test-node001
</span></span></code></pre></div><h4 id="设置环境变量">设置环境变量</h4>
<p>切换到gpadmin用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">su - gpadmin 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat &gt;&gt;  ~/.bashrc <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">source /usr/local/greenplum-db/greenplum_path.sh
</span></span></span><span class="line"><span class="cl"><span class="s">export GPHOME=/usr/local/greenplum-db
</span></span></span><span class="line"><span class="cl"><span class="s">export MASTER_DATA_DIRECTORY=/gpdata/master/gpseg1
</span></span></span><span class="line"><span class="cl"><span class="s">export PGPORT=5432
</span></span></span><span class="line"><span class="cl"><span class="s">export PGUSER=gpadmin
</span></span></span><span class="line"><span class="cl"><span class="s">export PGDATABASE=postgres
</span></span></span><span class="line"><span class="cl"><span class="s">export LD_PRELOAD=/lib64/libz.so.1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.bashrc
</span></span></code></pre></div><p>如果配置了 standby master节点，则拷贝到standby master节点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">scp ~/.bashrc dw-test-node002:~
</span></span><span class="line"><span class="cl">ssh dw-test-node002 <span class="s2">&#34;source ~/.bashrc&#34;</span>
</span></span></code></pre></div><h4 id="设置数据库时区">设置数据库时区</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpconfig -s TimeZone
</span></span><span class="line"><span class="cl">gpconfig -c TimeZone -v <span class="s1">&#39;Asia/Shanghai&#39;</span>
</span></span></code></pre></div><h3 id="修改配置">修改配置</h3>
<h4 id="设置远程用户访问">设置远程用户访问</h4>
<p>查看/gpdata/master/gpseg1/pg_hba.conf：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">local</span>    all         gpadmin         ident
</span></span><span class="line"><span class="cl">host     all         gpadmin         127.0.0.1/28    trust
</span></span><span class="line"><span class="cl">host     all         gpadmin         192.168.56.141/32       trust
</span></span><span class="line"><span class="cl"><span class="nb">local</span>    replication gpadmin         ident
</span></span><span class="line"><span class="cl">host     replication gpadmin         samehost       trust
</span></span><span class="line"><span class="cl">host     replication gpadmin         192.168.56.141/32       trust
</span></span></code></pre></div><p>修改为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">local</span>    all         gpadmin         ident
</span></span><span class="line"><span class="cl">host     all         gpadmin         127.0.0.1/28    trust
</span></span><span class="line"><span class="cl">host     all         gpadmin         192.168.56.141/32       trust
</span></span><span class="line"><span class="cl"><span class="nb">local</span>    replication gpadmin         ident
</span></span><span class="line"><span class="cl">host     replication gpadmin         samehost       trust
</span></span><span class="line"><span class="cl">host     replication gpadmin         192.168.56.141/32       trust
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">host     all         all		         192.168.56.141/32       trust  <span class="c1">#add this</span>
</span></span></code></pre></div><blockquote>
<p>添加一行，设置192.168.56.141/32可以访问所有数据库</p>
</blockquote>
<h4 id="设置监听ip和port">设置监听IP和Port</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vi /gpdata/master/gpseg1/postgresql.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置监听IP (* 生产环境慎用)</span>
</span></span><span class="line"><span class="cl"><span class="nv">listen_addresses</span> <span class="o">=</span> <span class="s1">&#39;${ host ip address } &#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">port</span> <span class="o">=</span> <span class="m">5432</span>
</span></span></code></pre></div><h3 id="启动与关闭">启动与关闭</h3>
<p>启动数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpstart -a
</span></span></code></pre></div><p>关闭数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpstop -a
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpstop -M fast
</span></span></code></pre></div><p>重启数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpstop -ar
</span></span></code></pre></div><p>重新加载配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> gpstop -u
</span></span></code></pre></div><p>设置开机启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat &gt; greenplum.service <span class="s">&lt;&lt;EOF 
</span></span></span><span class="line"><span class="cl"><span class="s">[Unit]
</span></span></span><span class="line"><span class="cl"><span class="s">Description=greenplum server daemon
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">[Service]
</span></span></span><span class="line"><span class="cl"><span class="s">Restart=on-failure
</span></span></span><span class="line"><span class="cl"><span class="s">ExecStart=/usr/local/greenplum-db/bin/gpstart -a
</span></span></span><span class="line"><span class="cl"><span class="s"> 
</span></span></span><span class="line"><span class="cl"><span class="s">[Install]
</span></span></span><span class="line"><span class="cl"><span class="s">WantedBy=multi-user.target
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo mv greenplum.service /usr/lib/systemd/system/
</span></span></code></pre></div><h3 id="测试">测试</h3>
<h4 id="客户端访问">客户端访问</h4>
<p>在本地访问：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">psql -p <span class="m">5432</span> -U gpadmin -d postgres
</span></span></code></pre></div><p>在其他机器访问：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">psql -p <span class="m">5432</span> -h 192.168.56.141 -U gpadmin -d postgres
</span></span></code></pre></div><h3 id="清空数据">清空数据</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#如有报错需重新初始化，清理以下内容：</span>
</span></span><span class="line"><span class="cl"><span class="nb">kill</span> -9 <span class="k">$(</span>ps -ef <span class="p">|</span>grep greenplum<span class="p">|</span>awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">gpssh -f hostfile_all -e <span class="s2">&#34;rm -rf /gpdata/master/*&#34;</span>
</span></span><span class="line"><span class="cl">gpssh -f hostfile_segment -e <span class="s2">&#34;rm -rf /gpdata/{mirror*,primary*}/*&#34;</span>
</span></span><span class="line"><span class="cl">rm  -f /tmp/.s.PGSQL*.lock
</span></span></code></pre></div><h3 id="升级">升级</h3>
<p>1、登陆：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">su - gpadmin
</span></span></code></pre></div><p>2、停止数据库</p>
<p>master节点执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpstop -a
</span></span></code></pre></div><p>3、安装新版本</p>
<p>从https://github.com/greenplum-db/gpdb/releases 下载最新版本，并拷贝到每个阶段。在每个节点运行下面命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo yum install greenplum-db-6.21.2-rhel7-x86_64.rpm -y
</span></span></code></pre></div><p>4、设置目录权限</p>
<p>每个节点执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo chown -R gpadmin:gpadmin /usr/local/greenplum*
</span></span></code></pre></div><p>5、设置环境变量</p>
<p>重新设置软连接：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">rm /usr/local/greenplum-db
</span></span><span class="line"><span class="cl">ln -s /usr/local/greenplum-db-6.21.2 /usr/local/greenplum-db
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.bashrc
</span></span></code></pre></div><p>6、启动数据库</p>
<p>master节点执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gpstart -a
</span></span></code></pre></div><h3 id="常用命令">常用命令</h3>
<h4 id="查看数据库状态">查看数据库状态</h4>
<p>1、查看segment</p>
<p>列出当前状态为down的Segment：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">gp_segment_configuration</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">status</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s1">&#39;u&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>检查当前处于改变跟踪模式的Segment。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">gp_segment_configuration</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="k">mode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;c&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>检查当前在重新同步的Segment。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">gp_segment_configuration</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="k">mode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;r&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>检查没有以其最优角色运转的Segment。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">gp_segment_configuration</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">preferred_role</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="k">role</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>运行一个分布式查询来测试它运行在所有Segment上。对每个主Segment都应返回一行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">gp_segment_id</span><span class="p">,</span><span class="w"> </span><span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">gp_dist_random</span><span class="p">(</span><span class="s1">&#39;pg_class&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>2、查看数据库连接</p>
<p>查看到当前数据库连接的IP 地址，用户名，提交的查询等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">pg_stat_activity</span><span class="w"> 
</span></span></span></code></pre></div><p>3、查看表存储结构</p>
<p>查看表的存储结构:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="k">distinct</span><span class="w"> </span><span class="n">relstorage</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">pg_class</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>查询当前数据库有哪些AO表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">t2</span><span class="p">.</span><span class="n">nspname</span><span class="p">,</span><span class="w"> </span><span class="n">t1</span><span class="p">.</span><span class="n">relname</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">pg_class</span><span class="w"> </span><span class="n">t1</span><span class="p">,</span><span class="w"> </span><span class="n">pg_namespace</span><span class="w"> </span><span class="n">t2</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">t1</span><span class="p">.</span><span class="n">relnamespace</span><span class="o">=</span><span class="n">t2</span><span class="p">.</span><span class="n">oid</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">relstorage</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;a&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>查询当前数据库有哪些堆表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">t2</span><span class="p">.</span><span class="n">nspname</span><span class="p">,</span><span class="w"> </span><span class="n">t1</span><span class="p">.</span><span class="n">relname</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">pg_class</span><span class="w"> </span><span class="n">t1</span><span class="p">,</span><span class="w"> </span><span class="n">pg_namespace</span><span class="w"> </span><span class="n">t2</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">t1</span><span class="p">.</span><span class="n">relnamespace</span><span class="o">=</span><span class="n">t2</span><span class="p">.</span><span class="n">oid</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">relstorage</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">)</span><span class="w">  </span><span class="k">and</span><span class="w"> </span><span class="n">relkind</span><span class="o">=</span><span class="s1">&#39;r&#39;</span><span class="p">;</span><span class="w"> 
</span></span></span></code></pre></div><h4 id="维护数据库">维护数据库</h4>
<p>检查表上缺失的统计信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">gp_toolkit</span><span class="p">.</span><span class="n">gp_stats_missing</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>检查数据文件中出现膨胀（死亡空间）且无法用常规VACUUM命令恢复的表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">gp_toolkit</span><span class="p">.</span><span class="n">gp_bloat_diag</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>清理用户表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">VACUUM</span><span class="w"> </span><span class="o">&lt;</span><span class="k">table</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>分析用户表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">analyzedb</span><span class="w"> </span><span class="o">-</span><span class="n">d</span><span class="w"> </span><span class="o">&lt;</span><span class="k">database</span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="n">a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">analyzedb</span><span class="w"> </span><span class="o">-</span><span class="n">s</span><span class="w"> </span><span class="n">pg_catalog</span><span class="w"> </span><span class="o">-</span><span class="n">d</span><span class="w"> </span><span class="o">&lt;</span><span class="k">database</span><span class="o">&gt;</span><span class="w">
</span></span></span></code></pre></div><p>推荐周期性地在系统目录上运行VACUUM和REINDEX来清理系统表和索引中已删除对象所占用的空间：</p>
<p>下面的示例脚本在一个Greenplum数据库系统目录上执行一次VACUUM、REINDEX以及ANALYZE：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">DBNAME</span><span class="o">=</span><span class="s2">&#34;&lt;database-name&gt;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">SYSTABLES</span><span class="o">=</span><span class="s2">&#34;&#39; pg_catalog.&#39; || relname || &#39;;&#39; from pg_class a, pg_namespace b 
</span></span></span><span class="line"><span class="cl"><span class="s2">where a.relnamespace=b.oid and b.nspname=&#39;pg_catalog&#39; and a.relkind=&#39;r&#39;&#34;</span>
</span></span><span class="line"><span class="cl">psql -tc <span class="s2">&#34;SELECT &#39;VACUUM&#39; || </span><span class="nv">$SYSTABLES</span><span class="s2">&#34;</span> <span class="nv">$DBNAME</span> <span class="p">|</span> psql -a <span class="nv">$DBNAME</span>
</span></span><span class="line"><span class="cl">reindexdb --system -d <span class="nv">$DBNAME</span>
</span></span><span class="line"><span class="cl">analyzedb -s pg_catalog -d <span class="nv">$DBNAME</span>
</span></span></code></pre></div><h4 id="查看磁盘空间">查看磁盘空间</h4>
<p>1、检查磁盘空间使用</p>
<p>以使用gp_toolkit管理方案中的gp_disk_free外部表来检查Segment主机文件系统中的剩余空闲空间（以千字节计）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">dw_lps</span><span class="o">=#</span><span class="w"> </span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">gp_toolkit</span><span class="p">.</span><span class="n">gp_disk_free</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">dfsegment</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">dfsegment</span><span class="w"> </span><span class="o">|</span><span class="w">    </span><span class="n">dfhostname</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">dfdevice</span><span class="w">  </span><span class="o">|</span><span class="w">  </span><span class="n">dfspace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-----------+------------------+-----------+-----------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">         </span><span class="mi">0</span><span class="w"> </span><span class="o">|</span><span class="w">  </span><span class="n">dw</span><span class="o">-</span><span class="n">test</span><span class="o">-</span><span class="n">node001</span><span class="w"> </span><span class="o">|</span><span class="w">  </span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">sdb</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">472594712</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="mi">1</span><span class="w"> </span><span class="o">|</span><span class="w">  </span><span class="n">dw</span><span class="o">-</span><span class="n">test</span><span class="o">-</span><span class="n">node001</span><span class="w"> </span><span class="o">|</span><span class="w">  </span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">sdb</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">472594712</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="mi">2</span><span class="w"> </span><span class="k">rows</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><p>2、查看数据库的磁盘空间使用</p>
<p>要查看一个数据库的总尺寸（以字节计），使用<em>gp_toolkit</em>管理方案中的<em>gp_size_of_database</em>视图。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">dw_lps</span><span class="o">=#</span><span class="w"> </span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">gp_toolkit</span><span class="p">.</span><span class="n">gp_size_of_database</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">sodddatname</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">sodddatname</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">sodddatsize</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-------------+-------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w"> </span><span class="n">dw_lps</span><span class="w">      </span><span class="o">|</span><span class="w">  </span><span class="mi">3833874988</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">gpperfmon</span><span class="w">   </span><span class="o">|</span><span class="w">    </span><span class="mi">63310532</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="mi">2</span><span class="w"> </span><span class="k">rows</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><p>查看某个数据库占用空间：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">dw_lps</span><span class="o">=#</span><span class="w"> </span><span class="k">select</span><span class="w"> </span><span class="n">pg_size_pretty</span><span class="p">(</span><span class="n">pg_database_size</span><span class="p">(</span><span class="s1">&#39;dw_lps&#39;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">pg_size_pretty</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">----------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w"> </span><span class="mi">3656</span><span class="w"> </span><span class="n">MB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="mi">1</span><span class="w"> </span><span class="k">row</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><p>3、查看一个表的磁盘空间使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">relname</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">sotdsize</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">size</span><span class="p">,</span><span class="w"> </span><span class="n">sotdtoastsize</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">AS</span><span class="w"> </span><span class="k">toast</span><span class="p">,</span><span class="w"> </span><span class="n">sotdadditionalsize</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">other</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">FROM</span><span class="w"> </span><span class="n">gp_toolkit</span><span class="p">.</span><span class="n">gp_size_of_table_disk</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">sotd</span><span class="p">,</span><span class="w"> </span><span class="n">pg_class</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">WHERE</span><span class="w"> </span><span class="n">sotd</span><span class="p">.</span><span class="n">sotdoid</span><span class="o">=</span><span class="n">pg_class</span><span class="p">.</span><span class="n">oid</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">relname</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>4、查看索引的磁盘空间使用</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">soisize</span><span class="p">,</span><span class="w"> </span><span class="n">relname</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">indexname</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">FROM</span><span class="w"> </span><span class="n">pg_class</span><span class="p">,</span><span class="w"> </span><span class="n">gp_toolkit</span><span class="p">.</span><span class="n">gp_size_of_index</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">WHERE</span><span class="w"> </span><span class="n">pg_class</span><span class="p">.</span><span class="n">oid</span><span class="o">=</span><span class="n">gp_size_of_index</span><span class="p">.</span><span class="n">soioid</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">AND</span><span class="w"> </span><span class="n">pg_class</span><span class="p">.</span><span class="n">relkind</span><span class="o">=</span><span class="s1">&#39;i&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h4 id="查看数据分布">查看数据分布</h4>
<p>1、查看某个表的数据分布：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">dw_lps</span><span class="o">=#</span><span class="w"> </span><span class="k">select</span><span class="w"> </span><span class="n">gp_segment_id</span><span class="p">,</span><span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">ods_lps_bill</span><span class="w"> </span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">gp_segment_id</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"> </span><span class="n">gp_segment_id</span><span class="w"> </span><span class="o">|</span><span class="w">  </span><span class="k">count</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">---------------+---------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">             </span><span class="mi">0</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1440129</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">             </span><span class="mi">1</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="mi">1439143</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="mi">2</span><span class="w"> </span><span class="k">rows</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></div><p>2、查询压缩率：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="n">get_ao_compression_ratio</span><span class="p">(</span><span class="s1">&#39;ods_lps_bill&#39;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>3、查看AO表的膨胀率</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">gp_toolkit</span><span class="p">.</span><span class="n">__gp_aovisimap_compaction_info</span><span class="p">(</span><span class="s1">&#39;ods_lps_bill&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>膨胀率超过千分之2的AO表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">(</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">t2</span><span class="p">.</span><span class="n">nspname</span><span class="p">,</span><span class="w"> </span><span class="n">t1</span><span class="p">.</span><span class="n">relname</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="n">gp_toolkit</span><span class="p">.</span><span class="n">__gp_aovisimap_compaction_info</span><span class="p">(</span><span class="n">t1</span><span class="p">.</span><span class="n">oid</span><span class="p">)).</span><span class="o">*</span><span class="w">   
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">from</span><span class="w"> </span><span class="n">pg_class</span><span class="w"> </span><span class="n">t1</span><span class="p">,</span><span class="w"> </span><span class="n">pg_namespace</span><span class="w"> </span><span class="n">t2</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">t1</span><span class="p">.</span><span class="n">relnamespace</span><span class="o">=</span><span class="n">t2</span><span class="p">.</span><span class="n">oid</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">relstorage</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="w">   
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="n">t</span><span class="w">   
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="n">percent_hidden</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">.</span><span class="mi">2</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h4 id="查看元数据">查看元数据</h4>
<p>1、查看表元数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="err">\</span><span class="n">d</span><span class="o">+</span><span class="w"> </span><span class="n">ods_lps_bill</span><span class="w">
</span></span></span></code></pre></div><p>2、查看某一个表上执行的操作</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">schemaname</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">schema</span><span class="p">,</span><span class="w"> </span><span class="n">objname</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">table</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">usename</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">role</span><span class="p">,</span><span class="w"> </span><span class="n">actionname</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">action</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">subtype</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">type</span><span class="p">,</span><span class="w"> </span><span class="n">statime</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">time</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">FROM</span><span class="w"> </span><span class="n">pg_stat_operations</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">WHERE</span><span class="w"> </span><span class="n">objname</span><span class="o">=</span><span class="s1">&#39;ods_lps_bill&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h3 id="参考文章">参考文章</h3>
<ul>
<li><a href="https://blog.csdn.net/q936889811/article/details/85603814">greenplum集群的rpm（生产环境）部署及参数优化</a></li>
<li><a href="https://gpdb.docs.pivotal.io/6-1/install_guide/install_gpdb.html">Installing the Greenplum Database Software</a></li>
</ul>
]]></content:encoded></item><item><title>PostgreSql安装和部署</title><link>https://blog.chensoul.com/posts/postgresql-install-deploy/</link><pubDate>Fri, 19 Aug 2022 17:11:19 +0800</pubDate><guid>https://blog.chensoul.com/posts/postgresql-install-deploy/</guid><description>yum安装 安装PostgreSQL 12 yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm yum install postgresql12 postgresql12-server -y 安装路径在 /usr/pgsql-12/ 安装完之后，初始化数据库并设置开机启动： /usr/pgsql-12/bin/postgresql-12-setup initdb systemctl enable postgresql-12 systemctl start postgresql-12 安装PostgreS</description><content:encoded><![CDATA[<h2 id="yum安装">yum安装</h2>
<h3 id="安装postgresql-12">安装PostgreSQL 12</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
</span></span><span class="line"><span class="cl">yum install postgresql12 postgresql12-server -y
</span></span></code></pre></div><p>安装路径在 /usr/pgsql-12/</p>
<p>安装完之后，初始化数据库并设置开机启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/usr/pgsql-12/bin/postgresql-12-setup initdb 
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> postgresql-12 
</span></span><span class="line"><span class="cl">systemctl start postgresql-12
</span></span></code></pre></div><h3 id="安装postgresql-96">安装PostgreSQL 9.6</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo yum install postgresql96 postgresql96-server -y
</span></span></code></pre></div><p>安装路径在 /usr/pgsql-9/</p>
<p>安装完之后，初始化数据库并设置开机启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/usr/pgsql-9.6/bin/postgresql96-setup initdb
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> postgresql-9.6
</span></span><span class="line"><span class="cl">systemctl start postgresql-9.6
</span></span></code></pre></div><h3 id="配置数据库">配置数据库</h3>
<p>查找路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">find / -name pg_hba.conf /var/lib/pgsql/12/data/pg_hba.conf
</span></span></code></pre></div><p>修改 <code>pg_hba.conf</code>，设置远程用户访问权限：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s2">&#34;s/127.0.0.1\/32/0.0.0.0\/0/&#34;</span> /var/lib/pgsql/12/data/pg_hba.conf
</span></span><span class="line"><span class="cl">sed -i <span class="s2">&#34;s/ident/trust/&#34;</span> /var/lib/pgsql/12/data/pg_hba.conf
</span></span><span class="line"><span class="cl">sed -i <span class="s2">&#34;s/peer/trust/&#34;</span> /var/lib/pgsql/12/data/pg_hba.conf
</span></span></code></pre></div><ul>
<li>md5并提供加密的密码验证</li>
<li>trust意思不用密码验证</li>
</ul>
<p>修改postgresql.conf，配置监听地址：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">CONF_FILE</span><span class="o">=</span>/var/lib/pgsql/12/data/postgresql.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo sed -i <span class="s2">&#34;s/#port = 5432/port = 5432/&#34;</span> <span class="nv">$CONF_FILE</span>
</span></span><span class="line"><span class="cl">sudo sed -i <span class="s2">&#34;s/max_connections = 100/max_connections = 600/&#34;</span> <span class="nv">$CONF_FILE</span>
</span></span><span class="line"><span class="cl">sudo sed -i <span class="s2">&#34;s/#listen_addresses = &#39;localhost&#39;/listen_addresses = &#39;*&#39;/&#34;</span> <span class="nv">$CONF_FILE</span>
</span></span><span class="line"><span class="cl">sudo sed -i <span class="s2">&#34;s/shared_buffers = 32MB/shared_buffers = 256MB/&#34;</span> <span class="nv">$CONF_FILE</span>
</span></span></code></pre></div><p>重启数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl restart postgresql-12
</span></span></code></pre></div><h3 id="创建数据库">创建数据库</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">CREATE USER <span class="nb">test</span> WITH PASSWORD <span class="s1">&#39;test&#39;</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">CREATE DATABASE dataware <span class="nv">owner</span><span class="o">=</span>test<span class="p">;</span> 
</span></span><span class="line"><span class="cl">GRANT ALL privileges ON DATABASE dataware TO test<span class="p">;</span>
</span></span></code></pre></div><h3 id="自动化运行脚本">自动化运行脚本</h3>
<p>以下是按照hive时，配置hive元数据的数据库时的自动化安装脚本，仅供参考：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">readonly</span> <span class="nv">PROGNAME</span><span class="o">=</span><span class="k">$(</span>basename <span class="nv">$0</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">readonly</span> <span class="nv">PROGDIR</span><span class="o">=</span><span class="k">$(</span>readlink -m <span class="k">$(</span>dirname <span class="nv">$0</span><span class="k">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">readonly</span> <span class="nv">ARGS</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="sb">`</span>id -u<span class="sb">`</span> -ne <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;must run as root&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">get_postgresql_major_version<span class="o">(){</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">psql_output</span><span class="o">=</span><span class="sb">`</span>psql --version<span class="sb">`</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">regex</span><span class="o">=</span><span class="s2">&#34;^psql \(PostgreSQL\) ([[:digit:]]+)\..*&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$psql_output</span> <span class="o">=</span>~ <span class="nv">$regex</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">      <span class="nb">echo</span> <span class="si">${</span><span class="nv">BASH_REMATCH</span><span class="p">[1]</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">get_standard_conforming_strings<span class="o">(){</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">psql_version</span><span class="o">=</span><span class="k">$(</span>get_postgresql_major_version<span class="k">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$psql_version</span> -gt <span class="m">8</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;# This is needed to make Hive work with Postgresql 9.1 and above&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;# See OPSAPS-11795&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> <span class="s2">&#34;standard_conforming_strings=off&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">check_postgresql_installed<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> -e <span class="s2">&#34;Install postgresql-server&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> ! rpm -q postgresql-server &gt;/dev/null <span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">	    yum install postgresql-server postgresql-jdbc -y &gt;/dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">        ln -s /usr/share/java/postgresql-jdbc.jar /usr/lib/hive/lib/postgresql-jdbc.jar
</span></span><span class="line"><span class="cl">		chkconfig postgresql on
</span></span><span class="line"><span class="cl">	<span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	pkill -9 postgres
</span></span><span class="line"><span class="cl">	rm -rf /var/lib/pgsql/data /var/run/postgresql/.s.PGSQL.<span class="nv">$DB_PORT</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> -e <span class="s2">&#34;Init postgresql database&#34;</span>
</span></span><span class="line"><span class="cl">	postgresql-setup initdb
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">configure_postgresql_conf<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> -e <span class="s2">&#34;Configure postgresql conf&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	sed -i <span class="s2">&#34;s/#port = 5432/port = </span><span class="nv">$DB_PORT</span><span class="s2">/&#34;</span> <span class="nv">$CONF_FILE</span>
</span></span><span class="line"><span class="cl">	sed -i <span class="s2">&#34;s/max_connections = 100/max_connections = 600/&#34;</span> <span class="nv">$CONF_FILE</span>
</span></span><span class="line"><span class="cl">	sed -i <span class="s2">&#34;s/#listen_addresses = &#39;localhost&#39;/listen_addresses = &#39;*&#39;/&#34;</span> <span class="nv">$CONF_FILE</span>
</span></span><span class="line"><span class="cl">	sed -i <span class="s2">&#34;s/shared_buffers = 32MB/shared_buffers = 256MB/&#34;</span> <span class="nv">$CONF_FILE</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nb">local</span> <span class="nv">SCS</span><span class="o">=</span><span class="k">$(</span>get_standard_conforming_strings<span class="k">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$SCS</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">		<span class="nb">echo</span> -e <span class="nv">$SCS</span>
</span></span><span class="line"><span class="cl">		sed -i <span class="s2">&#34;s/#standard_conforming_strings = on/standard_conforming_strings = off/&#34;</span> <span class="nv">$CONF_FILE</span>
</span></span><span class="line"><span class="cl">	<span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">enable_remote_connections<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> -e <span class="s2">&#34;Enable remote connections&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	sed -i <span class="s2">&#34;s/127.0.0.1\/32/0.0.0.0\/0/&#34;</span> /var/lib/pgsql/data/pg_hba.conf
</span></span><span class="line"><span class="cl">	sed -i <span class="s2">&#34;s/ident/trust/&#34;</span> /var/lib/pgsql/data/pg_hba.conf
</span></span><span class="line"><span class="cl">  sed -i <span class="s2">&#34;s/peer/trust/&#34;</span> /var/lib/pgsql/data/pg_hba.conf
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">create_db<span class="o">(){</span>
</span></span><span class="line"><span class="cl">	<span class="nv">DB_NAME</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">	<span class="nv">DB_USER</span><span class="o">=</span><span class="nv">$2</span>
</span></span><span class="line"><span class="cl">	<span class="nv">DB_PASSWORD</span><span class="o">=</span><span class="nv">$3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> -e <span class="s2">&#34;Create database </span><span class="nv">$DB_NAME</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">cd</span> /var/lib/pgsql/data
</span></span><span class="line"><span class="cl">	su -c <span class="s2">&#34;/usr/bin/pg_ctl start -w -m fast -D /var/lib/pgsql/data&#34;</span> postgres
</span></span><span class="line"><span class="cl">	su -c <span class="s2">&#34;/usr/bin/psql --command \&#34;CREATE USER </span><span class="nv">$DB_USER</span><span class="s2"> WITH PASSWORD &#39;</span><span class="nv">$DB_PASSWORD</span><span class="s2">&#39;; \&#34; &#34;</span> postgres
</span></span><span class="line"><span class="cl">	su -c <span class="s2">&#34;/usr/bin/psql --command \&#34;CREATE DATABASE </span><span class="nv">$DB_NAME</span><span class="s2"> owner=</span><span class="nv">$DB_USER</span><span class="s2">;\&#34; &#34;</span> postgres
</span></span><span class="line"><span class="cl">	su -c <span class="s2">&#34;/usr/bin/psql --command \&#34;GRANT ALL privileges ON DATABASE </span><span class="nv">$DB_NAME</span><span class="s2"> TO </span><span class="nv">$DB_USER</span><span class="s2">;\&#34; &#34;</span> postgres
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">init_hive_metastore<span class="o">(){</span>
</span></span><span class="line"><span class="cl">	<span class="nv">DB_NAME</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">	<span class="nv">DB_USER</span><span class="o">=</span><span class="nv">$2</span>
</span></span><span class="line"><span class="cl">	<span class="nv">DB_FILE</span><span class="o">=</span><span class="nv">$3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> -e <span class="s2">&#34;Init hive metastore using </span><span class="nv">$DB_FILE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">	su -c <span class="s2">&#34;/usr/bin/psql -U </span><span class="nv">$DB_USER</span><span class="s2"> -d </span><span class="nv">$DB_NAME</span><span class="s2"> -f </span><span class="nv">$DB_FILE</span><span class="s2">&#34;</span> postgres
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">manager_db<span class="o">(){</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> -e <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2"> postgres&#34;</span>
</span></span><span class="line"><span class="cl">	su -c <span class="s2">&#34;/usr/bin/pg_ctl </span><span class="nv">$1</span><span class="s2"> -w -m fast -D /var/lib/pgsql/data&#34;</span> postgres
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">readonly</span> <span class="nv">DB_HOST</span><span class="o">=</span><span class="k">$(</span>hostname -f<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">readonly</span> <span class="nv">DB_PORT</span><span class="o">=</span><span class="si">${</span><span class="nv">DB_PORT</span><span class="k">:-</span><span class="nv">5432</span><span class="si">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">readonly</span> <span class="nv">DB_HOSTPORT</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$DB_HOST</span><span class="s2">:</span><span class="nv">$DB_PORT</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">CONF_FILE</span><span class="o">=</span><span class="s2">&#34;/var/lib/pgsql/data/postgresql.conf&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">check_postgresql_installed
</span></span><span class="line"><span class="cl">configure_postgresql_conf
</span></span><span class="line"><span class="cl">enable_remote_connections
</span></span><span class="line"><span class="cl">create_db metastore hive hive
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">manager_db restart
</span></span><span class="line"><span class="cl">init_hive_metastore metastore hive <span class="sb">`</span>ls /usr/lib/hive/scripts/metastore/upgrade/postgres/hive-schema-* <span class="p">|</span>tail -n 1<span class="sb">`</span>
</span></span></code></pre></div><h2 id="docker安装">docker安装</h2>
<p>使用docker-compose安装，postgresql.yaml</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">db</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:13</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5432</span><span class="p">:</span><span class="m">5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_USER=chenzj</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_PASSWORD=chenzj@vps2021</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/postgres:/var/lib/postgresql/data</span><span class="w">
</span></span></span></code></pre></div><p>运行容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f postgresql.yaml up -d
</span></span></code></pre></div>]]></content:encoded></item><item><title>MySql安装和部署</title><link>https://blog.chensoul.com/posts/mysql-install-deploy/</link><pubDate>Fri, 19 Aug 2022 17:03:40 +0800</pubDate><guid>https://blog.chensoul.com/posts/mysql-install-deploy/</guid><description>yum安装 1、安装 wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm yum localinstall mysql80-community-release-el7-1.noarch.rpm 查看仓库中 mysql 版本： yum repolist all | grep mysql yum repolist enabled | grep mysql 禁用 mysql8 仓库，启用 mysql5 仓库： yum install yum-utils -y yum-config-manager --disable mysql80-community yum-config-manager --enable mysql57-community 安装 mysql 数据库和客户端： yum install</description><content:encoded><![CDATA[<h2 id="yum安装">yum安装</h2>
<h3 id="1安装">1、安装</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm
</span></span><span class="line"><span class="cl">yum localinstall mysql80-community-release-el7-1.noarch.rpm
</span></span></code></pre></div><p>查看仓库中 mysql 版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum repolist all <span class="p">|</span> grep mysql
</span></span><span class="line"><span class="cl">yum repolist enabled <span class="p">|</span> grep mysql
</span></span></code></pre></div><p>禁用 mysql8 仓库，启用 mysql5 仓库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install yum-utils -y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">yum-config-manager --disable mysql80-community
</span></span><span class="line"><span class="cl">yum-config-manager --enable mysql57-community
</span></span></code></pre></div><p>安装 mysql 数据库和客户端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install mysql-community-server -y  
</span></span></code></pre></div><p>启动数据库并设置开机启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl start mysqld
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> mysqld
</span></span></code></pre></div><h3 id="2查看密码">2、查看密码</h3>
<p>在 MySQL 服务器初始启动时，如果服务器的数据目录为空，则会发生以下情况：</p>
<ul>
<li>
<p>MySQL 服务器已初始化。</p>
</li>
<li>
<p>在数据目录中生成SSL证书和密钥文件。</p>
</li>
<li>
<p>该<a href="https://dev.mysql.com/doc/refman/8.0/en/validate-password.html">validate_password插件</a>安装并启用。</p>
</li>
<li>
<p>将创建一个超级用户 帐户<code>'root'@'localhost'</code>。并会设置超级用户的密码，将其存储在错误日志文件中。要显示它，请使用以下命令</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ grep <span class="s1">&#39;temporary password&#39;</span> /var/log/mysqld.log 
</span></span><span class="line"><span class="cl">2019-11-21T06:26:36.414908Z <span class="m">1</span> <span class="o">[</span>Note<span class="o">]</span> A temporary password is generated <span class="k">for</span> root@localhost: -*mN,epg4N<span class="o">)</span>F
</span></span></code></pre></div><h3 id="3取消密码复杂度">3、取消密码复杂度</h3>
<p>编辑 /etc/my.cnf配置文件, 在 [mysqld]配置块儿中添加如下内容</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">plugin-load<span class="o">=</span>validate_password.so  
</span></span><span class="line"><span class="cl">validate-password<span class="o">=</span>OFF
</span></span></code></pre></div><p>保存退出后，重启服务。</p>
<h3 id="4修改密码">4、修改密码</h3>
<p>通过上面日志中的临时密码登录并为超级用户帐户设置自定义密码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysqladmin -u root -p<span class="s1">&#39;-*mN,epg4N)F&#39;</span> password <span class="s1">&#39;1q2w3e4r&#39;</span>
</span></span></code></pre></div><p>注意: MySQL的 validate_password 插件默认安装。这将要求密码包含至少一个大写字母，一个小写字母，一个数字和一个特殊字符，并且密码总长度至少为8个字符。</p>
<p>如果不行的话，则先修改配置文件设置不使用密码，登陆进去之后再修改密码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -u root -p 
</span></span><span class="line"><span class="cl">mysql&gt; update mysql.user <span class="nb">set</span> <span class="nv">authentication_string</span><span class="o">=</span>PASSWORD<span class="o">(</span><span class="s1">&#39;123456&#39;</span><span class="o">)</span> where <span class="nv">user</span><span class="o">=</span><span class="s1">&#39;root&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>退出mysql，注释掉/etc/my.cnf中的 skip-grant-tables=true 这一行后，保存并重启mysql，使用新密码登录即可</p>
<h3 id="5不使用密码">5、不使用密码</h3>
<p>修改 /etc/my.cnf 文件，添加如下内容，之后重启服务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">skip-grant-tables<span class="o">=</span><span class="nb">true</span>
</span></span></code></pre></div><h3 id="6配置默认编码为-utf8">6、配置默认编码为 utf8</h3>
<p>MySQL 默认为 latin1, 一般修改为 UTF-8</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">shell&gt; vi /etc/my.cnf 
</span></span><span class="line"><span class="cl"><span class="o">[</span>mysqld<span class="o">]</span> 
</span></span><span class="line"><span class="cl"><span class="c1"># 在myslqd下添加如下键值对 </span>
</span></span><span class="line"><span class="cl"><span class="nv">character_set_server</span><span class="o">=</span>utf8 
</span></span><span class="line"><span class="cl"><span class="nv">init_connect</span><span class="o">=</span><span class="s1">&#39;SET NAMES utf8&#39;</span>
</span></span></code></pre></div><p>重启 MySQL 服务，使配置生效</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl restart mysqld
</span></span></code></pre></div><h3 id="7查看字符集">7、查看字符集</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">mysql</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">VARIABLES</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;character%&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">--------------------------+----------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">Variable_name</span><span class="w">            </span><span class="o">|</span><span class="w"> </span><span class="n">Value</span><span class="w">                      </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">--------------------------+----------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">|</span><span class="w"> </span><span class="n">character_set_client</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="n">utf8</span><span class="w">                       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="n">character_set_connection</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">utf8</span><span class="w">                       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="n">character_set_database</span><span class="w">   </span><span class="o">|</span><span class="w"> </span><span class="n">utf8</span><span class="w">                       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="n">character_set_filesystem</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="nb">binary</span><span class="w">                     </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="n">character_set_results</span><span class="w">    </span><span class="o">|</span><span class="w"> </span><span class="n">utf8</span><span class="w">                       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="n">character_set_server</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="n">utf8</span><span class="w">                       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="n">character_set_system</span><span class="w">     </span><span class="o">|</span><span class="w"> </span><span class="n">utf8</span><span class="w">                       </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">|</span><span class="w"> </span><span class="n">character_sets_dir</span><span class="w">       </span><span class="o">|</span><span class="w"> </span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="k">share</span><span class="o">/</span><span class="n">mysql</span><span class="o">/</span><span class="n">charsets</span><span class="o">/</span><span class="w"> </span><span class="o">|</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">+</span><span class="c1">--------------------------+----------------------------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">8</span><span class="w"> </span><span class="k">rows</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="w"> </span><span class="n">sec</span><span class="w">
</span></span></span></code></pre></div><h2 id="docker安装">docker安装</h2>
<h3 id="1下载镜像">1、下载镜像</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker pull mysql
</span></span></code></pre></div><h3 id="2运行容器">2、运行容器</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d -p 3306:3306  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /data/docker/mysql/conf:/etc/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /data/docker/mysql/logs:/var/log/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /data/docker/mysql/data:/var/lib/mysql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span><span class="m">123456</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name mysql mysql
</span></span></code></pre></div><p>命令参数：</p>
<ul>
<li><code>-p 3306:3306</code>：将容器的3306端口映射到主机的3306端口</li>
<li><code>-v /data/docker/mysql/conf:/etc/mysql</code>：将主机当前目录下的 conf 挂载到容器的 /etc/mysql</li>
<li><code>-v /data/docker/mysql/logs:/var/log/mysql</code>：将主机当前目录下的 logs 目录挂载到容器的 /var/log/mysql</li>
<li><code>-v /data/docker/mysql/data:/var/lib/mysql</code>：将主机当前目录下的 data 目录挂载到容器的 /var/lib/mysql</li>
<li><code>-e MYSQL_ROOT_PASSWORD=123456</code>：初始化root用户的密码</li>
</ul>
<h3 id="3查看容器启动情况">3、查看容器启动情况</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker ps
</span></span></code></pre></div><h3 id="4配置防火墙">4、配置防火墙</h3>
<p>防火墙开启3306端口</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">firewall-cmd --add-port<span class="o">=</span>3306/tcp
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">firewall-cmd --zone<span class="o">=</span>public --add-port<span class="o">=</span>3306/tcp --permanent
</span></span></code></pre></div><h3 id="5修改字符集">5、修改字符集</h3>
<p>/data/docker/mysql/conf下创建my.cnf</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>client<span class="o">]</span>
</span></span><span class="line"><span class="cl">default-character-set<span class="o">=</span>utf8mb4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>mysqld<span class="o">]</span>
</span></span><span class="line"><span class="cl">character-set-client-handshake <span class="o">=</span> FALSE
</span></span><span class="line"><span class="cl">character-set-server <span class="o">=</span> utf8mb4
</span></span><span class="line"><span class="cl">collation-server <span class="o">=</span> utf8mb4_unicode_ci
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>mysql<span class="o">]</span>
</span></span><span class="line"><span class="cl">default-character-set<span class="o">=</span>utf8mb4
</span></span></code></pre></div><p>重新启动容器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker restart mysql
</span></span></code></pre></div><h3 id="6访问数据库">6、访问数据库</h3>
<p>进入容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it mysql bash
</span></span></code></pre></div><p>在宿主机上登陆mysql：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#登录mysql</span>
</span></span><span class="line"><span class="cl">mysql -h192.168.56.100 -p3306 -uroot -p123456
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#添加远程登录用户</span>
</span></span><span class="line"><span class="cl">CREATE USER <span class="s1">&#39;test&#39;</span>@<span class="s1">&#39;%&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="s1">&#39;123456&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">GRANT ALL PRIVILEGES ON *.* TO <span class="s1">&#39;test&#39;</span>@<span class="s1">&#39;%&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#查看编码</span>
</span></span><span class="line"><span class="cl">showvariables like <span class="s2">&#34;%char%&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">flush privileges<span class="p">;</span>
</span></span></code></pre></div><h2 id="docker-compose安装">docker-compose安装</h2>
<p>docker-compose.yml配置文件如下</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">db</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">mysql </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_ROOT_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>--<span class="l">default-authentication-plugin=mysql_native_password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>--<span class="l">character-set-server=utf8mb4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>--<span class="l">collation-server=utf8mb4_general_ci</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>--<span class="l">explicit_defaults_for_timestamp=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>--<span class="l">lower_case_table_names=1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">3306</span><span class="p">:</span><span class="m">3306</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/docker/mysql/conf:/etc/mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/docker/mysql/logs:/var/log/mysql </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/docker/mysql/data:/var/lib/mysql</span><span class="w">
</span></span></span></code></pre></div>]]></content:encoded></item><item><title>博客中如何使用图床服务</title><link>https://blog.chensoul.com/posts/using-images-in-blog/</link><pubDate>Fri, 19 Aug 2022 12:15:54 +0800</pubDate><guid>https://blog.chensoul.com/posts/using-images-in-blog/</guid><description>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。 喜欢 Typora 的理由： 所见即所得的编辑，Markdown</description><content:encoded><![CDATA[<p>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。</p>
<p><img src="/images/my-typora-license.png" alt="my-typora-license"></p>
<p>喜欢 Typora 的理由：</p>
<ul>
<li>
<p>所见即所得的编辑，Markdown的语法都支持快捷键操作，非常方便</p>
</li>
<li>
<p>可以自定义主题的 CSS，包括文章内容就可以粘贴到公众号里</p>
</li>
<li>
<p>上传图片，支持图床服务。可以将图片上传到指定的图床，前提是需要先安装一个客户端，这里我使用的是 PicGo。然后，PicGo支持常见的一些图床服务。</p>
<p><img src="/images/picgo-setting-image-server.png" alt="picgo-setting-image-server"></p>
</li>
<li>
<p>支持导出</p>
</li>
</ul>
<h2 id="typora-图片复制到本地">Typora 图片复制到本地</h2>
<p>接下来，聊聊 Typora 的图片上传设置：</p>
<p><img src="/images/typora-setting-image.png" alt="typora-setting-image"></p>
<p>当你插入图片时，你可以分情况对图片进行设置。比如：</p>
<p>1、对本地位置的图片，可以设置一个上传规则：复制到指定路径或者是当前路径下的一个文件夹、上传图片。</p>
<ul>
<li>如果是编写一个文档，我们就设置把图片保存到本地的 assets 文件夹内，这样方便管理。</li>
<li>如果是编写博客，图片一般是集中管理的，我们可以设置复制到一个指定路径</li>
</ul>
<p>2、类似的，对网络位置的图片也可以使用上面的规则。</p>
<p>注意，如果将图片保存到本地目录，在文章中引用图片是使用的相对或者绝对路径。如果只是在本地查看，是可以预览图片的。但是，如果将博客上传到服务器，则因为路径问题可能会出现无法预览图片的情况。</p>
<p>所以，这种情况我们需要做一些修改。通常我会设置图片复制到博客的静态页面目录下面，比如，我现在使用的是 Hugo 构建静态博客，会将图片保存到 static/img 目录下，并且，还需要修改图片的 markdown 引用路径为 <code>/images/image-20220819124422239.png</code> ，以表示绝对路径查找图片，在博客服务器上就是相对根域名目录去 img 路径下查找图片。待hugo 编译完成上传静态文件到服务器之后，可以通过 <a href="https://blog.chensoul.com/images/">https://blog.chensoul.com/images/</a> 加上图片名称的方式访问到图片。</p>
<p>但是，显然，这时候在 Typora 是无法预览图片的，因为在本地查找不到这个绝对路径地址。这时候可以在 Typora 里面设置一个绝对路径，操作方法是，在 显示 -&gt; 图片 -&gt; 图像 -&gt; 设置图片根目录 里进行设置。</p>
<p>设置完成之后，在当前文件的 md 文件的顶部元数据代码里会多一行代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;博客中如何使用图床服务&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">date</span><span class="p">:</span><span class="w"> </span><span class="ld">2022-08-19T12:15:54</span><span class="m">+08</span><span class="p">:</span><span class="m">00</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">slug</span><span class="p">:</span><span class="w"> </span><span class="l">using-images-in-blog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">categories</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">日志]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tags</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">hugo]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">draft</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">typora-root-url</span><span class="p">:</span><span class="w"> </span><span class="l">../../static</span><span class="w">
</span></span></span></code></pre></div><p>这样博客里所有的图片都会保存的博客服务器，如果博客访问量增大，则图片加载时间会变慢。为了解决这个问题，需要将图片进行压缩，并给博客设置 CDN 加速。</p>
<h2 id="typora-图片上传到网络">Typora 图片上传到网络</h2>
<p>将图片保存到本地，待博客静态页面部署到服务器上之后，可以实现正常预览情况。但是，如果我们想把 md 文件打包上传到一些云笔记，比如：语雀，你会发现上传之后会出现图片无法预览的情况。</p>
<p>这时候，我们需要将图片上传到网络。首先，我们需要安装 PicGo，然后设置图床服务，这里我使用的是 github 作为图床来保存图片，并使用  <a href="https://www.jsdelivr.com">jsDelivr</a> 的 CDN 服务进行加速访问。</p>
<p>如何利用 Github 搭建自己的免费图床？可以参考这篇 <a href="https://zhuanlan.zhihu.com/p/353775844">文章</a>。这里，记录一下我的操作步骤。</p>
<p>1、使用博客的<a href="https://github.com/chensoul/blog.chensoul.com">托管仓库</a> 的 static/img 目录来保存图片，这样方便图片的管理（比如：压缩、重命名，删除无用图片），如果图床服务不可用了，所有博客图片还有一个备份，只需要修改博客内图片的引用地址。前提是需要将仓库设置为 public。</p>
<p>2、在 github 设置里面创建一个 Token。以此打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code></p>
<p>3、在 PicGo 里设置 github 图床：</p>
<ul>
<li>
<p>设定仓库名：chensoul/blog.chensoul.com</p>
</li>
<li>
<p>设定分支：main</p>
</li>
<li>
<p>设定 Token：XXXXXXXXXXXXXXXXX</p>
</li>
<li>
<p>指定存储路径：static/images/</p>
</li>
<li>
<p>设置自定义域名：https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com</p>
</li>
</ul>
<p>4、需要修改博客文章内引用的图片地址，将 /images/ 替换为 <a href="https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/images/">https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/images/</a> ，可以使用<a href="https://dvel.me/posts/macos-replace-contents-multiple-files/">脚本批量替换</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">grep -lr --null <span class="s1">&#39;](\/img\/&#39;</span> <span class="p">|</span> xargs -0 sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/](\/img\//](https:\/\/cdn.jsdelivr.net\/gh\/chensoul\/blog.chensoul.com\/static\/img\//g&#39;</span>
</span></span></code></pre></div><blockquote>
<p>参数说明：</p>
<ul>
<li>grep
<ul>
<li><code>-i, --ignore-case</code> 查找文件时不区分大小写</li>
<li><code>-l, --files-with-matches</code> 返回文件名</li>
<li><code>-R, -r, --recursive</code> 递归搜索子目录</li>
</ul>
</li>
<li>sed
<ul>
<li><code>-i</code> 默认 <code>sed</code> 会打印到标准输出，使用 <code>-i</code> 将直接在文件内编辑替换</li>
<li><code>s</code> 替换</li>
<li><code>g</code> 全局替换标志</li>
<li><code>I</code> 大小写不敏感标志</li>
</ul>
</li>
</ul>
</blockquote>
<p>反过来，查询 <a href="https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/">https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/</a> 下的图片地址替换 <code>/img</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">grep -lr --null <span class="s1">&#39;](https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/&#39;</span> <span class="p">|</span> xargs -0 sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/](https:\/\/cdn.jsdelivr.net\/gh\/chensoul\/blog.chensoul.com\/static\/img\//](\/img\//g&#39;</span>
</span></span></code></pre></div><p>另外，在博客编译部署的流程之中，可以定制化一些步骤将博客同步发布到其他系统。当然，在发布之前，也可以先将本地图片的 url 替换成图床地址的 url。等后续实现了，再发布一篇文章。</p>
<p>如果 github 或者 jsdelivr 服务不稳定，则需要考虑使用其他图床了。</p>
<blockquote>
<p>可以通过这个地址 <a href="https://tcp.ping.pe/">https://tcp.ping.pe/</a> 来检测 IP 或者域名是否可以访问</p>
</blockquote>
]]></content:encoded></item><item><title>Doris集群弹性扩缩容</title><link>https://blog.chensoul.com/posts/doris-cluster-elastic-expansion/</link><pubDate>Thu, 18 Aug 2022 11:26:27 +0800</pubDate><guid>https://blog.chensoul.com/posts/doris-cluster-elastic-expansion/</guid><description>Doris 可以很方便的扩容和缩容 FE、BE、Broker 实例，本文主要是对此做一些测试，记录笔记。 集群说明 在测试环境安装和部署了三个节点的集群，每个</description><content:encoded><![CDATA[<p>Doris 可以很方便的扩容和缩容 FE、BE、Broker 实例，本文主要是对此做一些测试，记录笔记。</p>
<h2 id="集群说明">集群说明</h2>
<p>在测试环境安装和部署了三个节点的集群，每个节点混合部署了 FE 和 BE：</p>
<ul>
<li>192.168.1.107：部署了 FE、BE</li>
<li>192.168.1.108：部署了 FE、BE</li>
<li>192.168.1.109：部署了 FE、BE</li>
</ul>
<p>在操作集群之前，有必要了解 doris 的架构：</p>
<p><img src="/images/doris-overview.png" alt="doris架构"></p>
<p>Doris 有两种进程：</p>
<ul>
<li>FE：主要负责用户请求的接入、查询解析规划、元数据的管理、节点管理相关工作。FE 节点个数至少为为1，最好必须为奇数，因为多个 FE 需要进行选举。根据选举出来的结果，分为两种角色：
<ul>
<li>Follower：可以为一个或者多个。如果只有一个，则当前 Follower 默认为 Master。如果存在多个 FE，则进行选举之后，会选出一个 FE 作为 Master。同一个时间，有且只有一个 Master。当 Master FE 宕掉之后，会重新选举出下一个 Master。所以，为了保证 FE 的高可用，一般建议 FE 部署多个节点（大于等于3）。</li>
<li>Observer：可以为0个或者多个。Observer 的存在是为了保证读高可用。</li>
</ul>
</li>
<li>BE：主要负责数据存储、查询计划的执行。</li>
</ul>
<h2 id="集群状态">集群状态</h2>
<p>通过 mysql 客户端连接 FE master，查询当前集群状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -h 192.168.1.107 -P <span class="m">9030</span> -uroot
</span></span></code></pre></div><p>查询 BE 状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">mysql</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">PROC</span><span class="w"> </span><span class="s1">&#39;/backends&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>结果如下：</p>
<p><img src="/images/doris-be-status.png.png" alt="doris-be-status"></p>
<p>查询 FE 状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">mysql</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">PROC</span><span class="w"> </span><span class="s1">&#39;/frontends&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>结果如下：</p>
<p><img src="/images/doris-fe-status.png" alt="doris-fe-status"></p>
<p>从上面可以看到：</p>
<ul>
<li>IP</li>
<li>HostName：主机名称</li>
<li>Role：角色，所有节点都是 Follower 角色</li>
<li>IsMaster：192.168.1.107 节点为 Master Follower</li>
<li>Join：三个 FE 是否加入了集群</li>
</ul>
<p>也可以通过 http://192.168.1.107:8030/System?path=//frontends 和 http://192.168.1.107:8030/System?path=//backends 来查看 FE 和 BE 状态。</p>
<h2 id="fe-扩容和缩容">FE 扩容和缩容</h2>
<p>FE 节点的扩容和缩容过程，不影响当前系统运行。</p>
<p>FE 分为 Follower 和 Observer 两种角色。 默认一个集群，可以有多个 Follower 和 Observer。其中多个 Follower 组成一个 Paxos 选择组，集群启动时，Follower 会选举出一个 Master。如果 Master 宕机，则剩下的 Follower 会自动选出新的 Master，保证写入高可用。Observer 同步 Master 的数据，但是不参加选举。如果只部署一个 FE，则 FE 默认就是 Master。</p>
<p>第一个启动的 FE 自动成为 Master。在此基础上，可以添加若干 Follower 和 Observer。</p>
<h4 id="增加-fe-节点">增加 FE 节点</h4>
<p><strong>1、配置及启动 Follower 或 Observer</strong></p>
<p>Follower 和 Observer 的配置是相同的，都是通过  fe/conf/fe.conf 进行配置。</p>
<p>在新添加的节点上启动 FE，使用下面的命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fe/bin/start_fe.sh --helper leader_fe_host:edit_log_port --daemon
</span></span></code></pre></div><blockquote>
<p>说明：</p>
<p>其中 leader_fe_host 为 Leader 所在节点 ip，edit_log_port 在 Leader 的配置文件 fe.conf 中。<code>--helper</code> 参数仅在 follower 和 observer 第一次启动时才需要。</p>
</blockquote>
<p>测试过程中，我是选择 192.168.1.107 作为 FE Master，新添加的节点为 192.168.1.110，所以，在 192.168.1.110 节点第一次启动 FE 命令如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fe/bin/start_fe.sh --daemon --helper 192.168.1.107:9010 
</span></span></code></pre></div><p><strong>2、将 Follower 或 Observer 加入到集群</strong></p>
<p>使用 mysql 客户端连接 FE Master：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -h 192.168.1.107 -P <span class="m">9030</span> -uroot
</span></span></code></pre></div><p>然后，执行下面命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ALTER SYSTEM ADD FOLLOWER <span class="s2">&#34;192.168.1.110:9010&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 或者</span>
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD OBSERVER <span class="s2">&#34;192.168.1.110:9010&#34;</span><span class="p">;</span>
</span></span></code></pre></div><p>使用上面哪个命令，取决于你想让新节点以 FOLLOWER 角色还是 OBSERVER 角色加入集群。</p>
<blockquote>
<p><strong>FE 扩容注意事项：</strong></p>
<ol>
<li>Follower FE（包括 Master）的数量必须为奇数，建议最多部署 3 个组成高可用（HA）模式即可。</li>
<li>当 FE 处于高可用部署时（1个 Master，2个 Follower），我们建议通过增加 Observer FE 来扩展 FE 的读服务能力。当然也可以继续增加 Follower FE，但几乎是不必要的。</li>
<li>通常一个 FE 节点可以应对 10-20 台 BE 节点。建议总的 FE 节点数量在 10 个以下。而通常 3 个即可满足绝大部分需求。</li>
<li>helper 不能指向 FE 自身，必须指向一个或多个已存在并且正常运行中的 Master/Follower FE。</li>
</ol>
</blockquote>
<h4 id="删除-fe-节点">删除 FE 节点</h4>
<p>使用以下命令删除对应的 FE 节点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">SYSTEM</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="n">FOLLOWER</span><span class="p">[</span><span class="n">OBSERVER</span><span class="p">]</span><span class="w"> </span><span class="s2">&#34;fe_host:edit_log_port&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p><strong>FE 缩容注意事项：</strong></p>
<ol>
<li>删除 Follower FE 时，确保最终剩余的 Follower（包括 Master）节点为奇数。</li>
</ol>
</blockquote>
<h4 id="测试增加和删除-fe-节点">测试增加和删除 FE 节点</h4>
<p><strong>1、测试 3 个 FE 节点情况下，删除1个FE</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">mysql</span><span class="w"> </span><span class="o">-</span><span class="n">h</span><span class="w"> </span><span class="mi">192</span><span class="p">.</span><span class="mi">168</span><span class="p">.</span><span class="mi">1</span><span class="p">.</span><span class="mi">107</span><span class="w"> </span><span class="o">-</span><span class="n">P</span><span class="w"> </span><span class="mi">9030</span><span class="w"> </span><span class="o">-</span><span class="n">uroot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">mysql</span><span class="o">&gt;</span><span class="w"> </span><span class="k">ALTER</span><span class="w"> </span><span class="k">SYSTEM</span><span class="w"> </span><span class="k">drop</span><span class="w"> </span><span class="n">FOLLOWER</span><span class="w"> </span><span class="s2">&#34;192.168.1.109:9010&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>查看 FE 状态，可以看到还有两个 FE，192.168.1.107 还是为 Master。</p>
<p><img src="/images/doris-fe-status-01.png" alt="doris-fe-status-01"></p>
<p>根据上面的 <strong>FE 缩容注意事项</strong>，如果删除 FE 节点，需要保证最终剩余的 FE 的总数为奇数。在删除一个节点之后，FE 个数为 2，FE 状态均为正常。</p>
<p>这时候，如果 Master 宕机了，剩下一个 FE 会成为 Master 吗？我们来停止 192.168.1.107 的 FE。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fe/bin/stop_fe.sh
</span></span></code></pre></div><p>然后，再来连接 FE Master，猜测这时候的 Master 应该为 192.168.1.108</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -h 192.168.1.108 -P <span class="m">9030</span> -uroot
</span></span></code></pre></div><p>查看 FE 状态，却提示异常，说明剩下的2个节点（其中一个节点为宕机状态）无法选举出 Master。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">mysql</span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">PROC</span><span class="w"> </span><span class="s1">&#39;/frontends&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">ERROR</span><span class="w"> </span><span class="mi">1105</span><span class="w"> </span><span class="p">(</span><span class="n">HY000</span><span class="p">):</span><span class="w"> </span><span class="k">Exception</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p">:</span><span class="w"> </span><span class="n">Failed</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">get</span><span class="w"> </span><span class="n">master</span><span class="w"> </span><span class="n">client</span><span class="p">.</span><span class="w">
</span></span></span></code></pre></div><p>这时候再将 192.168.1.107 的 FE 启动起来：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fe/bin/start_fe.sh --daemon
</span></span></code></pre></div><p>再通过客户端连接 FE，查看 FE 状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -h 192.168.1.108 -P <span class="m">9030</span> -uroot
</span></span></code></pre></div><p>可以看到 变成了 Master：</p>
<p><img src="/images/doris-fe-status-02.png" alt="doris-fe-status-02"></p>
<p>这说明，<strong>剩余偶数个 FE 时，还是能选举出 Master？</strong></p>
<p>这时候，如果把不是 Master 的 FE 停止，会出现什么情况呢？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -h 192.168.1.108 -P <span class="m">9030</span> -uroot
</span></span><span class="line"><span class="cl">mysql&gt; SHOW PROC <span class="s1">&#39;/frontends&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>可以看到如下结果：</p>
<p><img src="/images/doris-fe-status-03.png" alt="doris-fe-status-03"></p>
<p>说明：非 Master 节点宕机，不影响 Master FE 节点的运行，宕机的 FE 的 Alive 状态为 false，异常信息不为空，这里为：<code>socket is closed by peer.</code></p>
<p>稍等一会，会提示无法连接到服务：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">RROR <span class="m">2013</span> <span class="o">(</span>HY000<span class="o">)</span>: Lost connection to MySQL server during query
</span></span><span class="line"><span class="cl">No connection. Trying to reconnect...
</span></span><span class="line"><span class="cl">ERROR <span class="m">2003</span> <span class="o">(</span>HY000<span class="o">)</span>: Can<span class="s1">&#39;t connect to MySQL server on &#39;</span>192.168.1.108:9030<span class="s1">&#39; (111)
</span></span></span><span class="line"><span class="cl"><span class="s1">ERROR:
</span></span></span><span class="line"><span class="cl"><span class="s1">Can&#39;</span>t connect to the server
</span></span></code></pre></div><p>原因是 Master FE 也就是 192.168.1.108 节点上的 FE 宕机了，查看日志：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">com.sleepycat.je.rep.InsufficientReplicasException: <span class="o">(</span>JE 18.3.12<span class="o">)</span> Commit policy: SIMPLE_MAJORITY required <span class="m">1</span> replica. But none were active with this master.
</span></span><span class="line"><span class="cl">at com.sleepycat.je.rep.impl.node.DurabilityQuorum.ensureReplicasForCommit<span class="o">(</span>DurabilityQuorum.java:116<span class="o">)</span> ~<span class="o">[</span>je-18.3.12.jar:18.3.12<span class="o">]</span>
</span></span><span class="line"><span class="cl">	at com.sleepycat.je.rep.impl.RepImpl.txnBeginHook<span class="o">(</span>RepImpl.java:1171<span class="o">)</span> ~<span class="o">[</span>je-18.3.12.jar:18.3.12<span class="o">]</span>
</span></span><span class="line"><span class="cl">	at com.sleepycat.je.rep.txn.MasterTxn.txnBeginHook<span class="o">(</span>MasterTxn.java:195<span class="o">)</span> ~<span class="o">[</span>je-18.3.12.jar:18.3.12<span class="o">]</span>
</span></span><span class="line"><span class="cl">	at com.sleepycat.je.txn.Txn.initTxn<span class="o">(</span>Txn.java:384<span class="o">)</span> ~<span class="o">[</span>je-18.3.12.jar:18.3.12<span class="o">]</span>
</span></span></code></pre></div><p>手动启动 192.168.1.108 的FE 之后，查看日志：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2022-08-18 18:22:54,958 INFO <span class="o">(</span>UNKNOWN 192.168.1.108_9010_1660793829444<span class="o">(</span>-1<span class="o">)</span><span class="p">|</span>1<span class="o">)</span> <span class="o">[</span>Catalog.waitForReady<span class="o">()</span>:876<span class="o">]</span> <span class="nb">wait</span> catalog to be ready. FE type: UNKNOWN. is ready: <span class="nb">false</span>
</span></span></code></pre></div><p>说明：192.168.1.108 的 FE 还没有获得正确的 FE 类型。原因应该是，目前集群只注册了两个 FE，却只有一个 FE 是存活状态，无法选举出 Master FE。</p>
<p>在 192.168.1.107 节点查看 FE 状态，发现 FE 也挂了，这时候手动启动 FE。发现，可以再次连接  FE。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mysql -h 192.168.1.108 -P <span class="m">9030</span> -uroot
</span></span></code></pre></div><p><strong>总结：</strong></p>
<ul>
<li>1、删除 Follower FE 时，需要确保最终剩余的 Follower（包括 Master）节点为奇数。</li>
<li>2、删除 Follower FE 时，如果剩余的 Follower 不为奇数（目前测试的是剩余 2 个情况下），如果有一个 FE 宕掉，则另一个 FE 也会宕掉。所以，<strong>需要在 FE 宕掉之后，能够自动启动</strong>。也就是，在集群里，为了保证高可用，需要<strong>所有实例都应使用守护进程启动，以保证进程退出后，会被自动拉起</strong>。</li>
</ul>
<p><strong>2、测试 1 个 FE 节点情况下，添加 FE 节点</strong></p>
<h2 id="be-扩容和缩容">BE 扩容和缩容</h2>
<p>BE 节点的扩容和缩容过程，不影响当前系统运行以及正在执行的任务，并且不会影响当前系统的性能。数据均衡会自动进行。根据集群现有数据量的大小，集群会在几个小时到1天不等的时间内，恢复到负载均衡的状态。</p>
<h4 id="增加-be-节点">增加 BE 节点</h4>
<p>BE 节点的增加方式同 <strong>BE 部署</strong> 一节中的方式，通过 <code>ALTER SYSTEM ADD BACKEND</code> 命令增加 BE 节点。</p>
<blockquote>
<p>BE 扩容注意事项：</p>
<ol>
<li>BE 扩容后，Doris 会自动根据负载情况，进行数据均衡，期间不影响使用。</li>
</ol>
</blockquote>
<h4 id="删除-be-节点">删除 BE 节点</h4>
<p>删除 BE 节点有两种方式：DROP 和 DECOMMISSION</p>
<p>DROP 语句如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">SYSTEM</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="n">BACKEND</span><span class="w"> </span><span class="s2">&#34;be_host:be_heartbeat_service_port&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p><strong>注意：DROP BACKEND 会直接删除该 BE，并且其上的数据将不能再恢复！！！所以我们强烈不推荐使用 DROP BACKEND 这种方式删除 BE 节点。当你使用这个语句时，会有对应的防误操作提示。</strong></p>
<p>DECOMMISSION 语句如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">SYSTEM</span><span class="w"> </span><span class="n">DECOMMISSION</span><span class="w"> </span><span class="n">BACKEND</span><span class="w"> </span><span class="s2">&#34;be_host:be_heartbeat_service_port&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>DECOMMISSION 命令说明：</p>
<ol>
<li>该命令用于安全删除 BE 节点。命令下发后，Doris 会尝试将该 BE 上的数据向其他 BE 节点迁移，当所有数据都迁移完成后，Doris 会自动删除该节点。</li>
<li>该命令是一个异步操作。执行后，可以通过 <code>SHOW PROC '/backends';</code> 看到该 BE 节点的 <code>SystemDecommissioned</code> 状态为 true。表示该节点正在进行下线。</li>
<li>该命令<strong>不一定执行成功</strong>。比如剩余 BE 存储空间不足以容纳下线 BE 上的数据，或者剩余机器数量不满足最小副本数时，该命令都无法完成，并且 BE 会一直处于 <code>SystemDecommissioned</code> 为 true 的状态。</li>
<li>DECOMMISSION 的进度，可以通过 <code>SHOW PROC '/backends';</code> 中的 TabletNum 查看，如果正在进行，TabletNum 将不断减少。</li>
<li>该操作可以通过:
<code>CANCEL DECOMMISSION BACKEND &quot;be_host:be_heartbeat_service_port&quot;;</code>
命令取消。取消后，该 BE 上的数据将维持当前剩余的数据量。后续 Doris 重新进行负载均衡</li>
</ol>
</blockquote>
<p><strong>对于多租户部署环境下，BE 节点的扩容和缩容，请参阅 <a href="https://doris.apache.org/zh-CN/docs/admin-manual/multi-tenant">多租户设计文档</a>。</strong></p>
<h2 id="broker-扩容缩容">Broker 扩容缩容</h2>
<p>Broker 实例的数量没有硬性要求。通常每台物理机部署一个即可。Broker 的添加和删除可以通过以下命令完成：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">SYSTEM</span><span class="w"> </span><span class="k">ADD</span><span class="w"> </span><span class="n">BROKER</span><span class="w"> </span><span class="n">broker_name</span><span class="w"> </span><span class="s2">&#34;broker_host:broker_ipc_port&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">SYSTEM</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="n">BROKER</span><span class="w"> </span><span class="n">broker_name</span><span class="w"> </span><span class="s2">&#34;broker_host:broker_ipc_port&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">SYSTEM</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="k">ALL</span><span class="w"> </span><span class="n">BROKER</span><span class="w"> </span><span class="n">broker_name</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Broker 是无状态的进程，可以随意启停。当然，停止后，正在其上运行的作业会失败，重试即可。</p>
]]></content:encoded></item><item><title>Doris通过外部表同步数据</title><link>https://blog.chensoul.com/posts/doris-external-table-load/</link><pubDate>Thu, 18 Aug 2022 10:27:21 +0800</pubDate><guid>https://blog.chensoul.com/posts/doris-external-table-load/</guid><description>Doris 可以创建通过 ODBC 协议访问的外部表。创建完成后，可以通过 SELECT 语句直接查询外部表的数据，也可以通过 INSERT INTO SELECT 的方式导入外部表的数据。 目前支持的数据源包</description><content:encoded><![CDATA[<p>Doris 可以创建通过 ODBC 协议访问的外部表。创建完成后，可以通过 SELECT 语句直接查询外部表的数据，也可以通过 <code>INSERT INTO SELECT</code> 的方式导入外部表的数据。</p>
<p>目前支持的数据源包括：</p>
<ul>
<li>MySQL</li>
<li>Oracle</li>
<li>PostgreSQL</li>
<li>SQLServer</li>
<li>Hive(1.0版本支持)</li>
</ul>
<p>开始之前，<strong>特别说明</strong>，本文是在 centos7.8 操作系统和 doris 1.1 版本下进行测试。</p>
<h2 id="安装-odbc-驱动">安装 ODBC 驱动</h2>
<h3 id="安装-mysql-odbc">安装 mysql odbc</h3>
<p><a href="https://doris.apache.org/zh-CN/docs/faq/install-faq">官方文档运维常见问题</a>中有提到：Doris 升级到1.0 以后版本通过ODBC访问MySQL外表报错 Failed to set ciphers to use (2026)：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ERROR <span class="m">1105</span> <span class="o">(</span>HY000<span class="o">)</span>: <span class="nv">errCode</span> <span class="o">=</span> 2, <span class="nv">detailMessage</span> <span class="o">=</span> driver connect Error: HY000 <span class="o">[</span>MySQL<span class="o">][</span>ODBC 8.0<span class="o">(</span>w<span class="o">)</span> Driver<span class="o">]</span>SSL connection error: Failed to <span class="nb">set</span> ciphers to use <span class="o">(</span>2026<span class="o">)</span>
</span></span></code></pre></div><p>解决方式是使用<code>Connector/ODBC 8.0.28</code> 版本的 ODBC Connector， 并且在操作系统处选择 <code>Linux - Generic</code>, 这个版本的 ODBC Driver 使用 openssl 1.1 版本。或者使用低版本的 ODBC Connector，比如<a href="https://dev.mysql.com/downloads/connector/odbc/5.3.html">Connector/ODBC 5.3.14</a>。</p>
<p>可以通过如下方式验证 MySQL ODBC Driver 使用的 openssl 版本</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ldd /path/to/libmyodbc8w.so <span class="p">|</span>grep libssl.so
</span></span></code></pre></div><p>如果输出包含 <code>libssl.so.10</code> 则使用过程中可能出现问题， 如果包含<code>libssl.so.1.1</code> 则与doris 1.0 兼容。</p>
<p>在这里，参考 <a href="https://qq52o.me/2732.html">解决报错libssl.so.1.1: cannot open shared object file: No such file or directory</a>，直接将 openssl 升级到1.1：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">wget https://www.openssl.org/source/openssl-1.1.1q.tar.gz
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">tar -xvf openssl-1.1.1q.tar.gz 
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> openssl-1.1.1q 
</span></span><span class="line"><span class="cl">./config shared --openssldir<span class="o">=</span>/usr/local/openssl --prefix<span class="o">=</span>/usr/local/openssl 
</span></span><span class="line"><span class="cl">make <span class="o">&amp;&amp;</span> make install
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mv /usr/bin/openssl /usr/bin/openssl.old 
</span></span><span class="line"><span class="cl">mv /usr/lib/openssl /usr/lib/openssl.old 
</span></span><span class="line"><span class="cl">ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl 
</span></span><span class="line"><span class="cl">ln -s /usr/local/openssl/include/openssl /usr/include/openssl 
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;/usr/local/openssl/lib&#34;</span> &gt;&gt; /etc/ld.so.conf 
</span></span><span class="line"><span class="cl">ldconfig -v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl version 
</span></span></code></pre></div><p>接下来，下载 mysql-connector-odbc-8.0.28 版本的 odbc 驱动，并安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">wget https://dev.mysql.com/get/Downloads/Connector-ODBC/8.0/mysql-connector-odbc-8.0.28-1.el7.x86_64.rpm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">rpm -ivh mysql-connector-odbc-8.0.28-1.el7.x86_64.rpm
</span></span></code></pre></div><p>创建测试文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">[mysql]
</span></span></span><span class="line"><span class="cl"><span class="s2">Driver = MySQL ODBC 8.0 Unicode Driver
</span></span></span><span class="line"><span class="cl"><span class="s2">Description = MyODBC 8.0 Driver
</span></span></span><span class="line"><span class="cl"><span class="s2">SERVER = 127.0.0.1
</span></span></span><span class="line"><span class="cl"><span class="s2">PORT = 3306
</span></span></span><span class="line"><span class="cl"><span class="s2">USER = root
</span></span></span><span class="line"><span class="cl"><span class="s2">Password = 123456
</span></span></span><span class="line"><span class="cl"><span class="s2">Database = test
</span></span></span><span class="line"><span class="cl"><span class="s2">OPTION = 3
</span></span></span><span class="line"><span class="cl"><span class="s2">charset=UTF8
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;</span> &gt; /etc/odbc.ini
</span></span></code></pre></div><p>执行命令，看驱动是否安装成功：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">isql -v mysql
</span></span></code></pre></div><p>查看 doris 中 MySQL ODBC Driver 使用的 openssl 版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">cat /opt/doris/be/conf/odbcinst.ini
</span></span><span class="line"><span class="cl">ldd /usr/lib64/libmyodbc8w.so<span class="p">|</span>grep libssl
</span></span></code></pre></div><blockquote>
<p>**注意：**我是将 doris 安装在 /opt/doris 目录。</p>
</blockquote>
<h3 id="安装-postgresql-odbc">安装 postgresql odbc</h3>
<p>安装驱动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">yum install -y unixODBC.x86_64 postgresql-odbc.x86_64
</span></span></code></pre></div><p>查看odbc配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">odbcinst -j
</span></span></code></pre></div><p>创建测试文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">[postgresql]
</span></span></span><span class="line"><span class="cl"><span class="s2">Driver = PostgreSQL
</span></span></span><span class="line"><span class="cl"><span class="s2">Description = Test to gp
</span></span></span><span class="line"><span class="cl"><span class="s2">Servername = 127.0.0.1
</span></span></span><span class="line"><span class="cl"><span class="s2">Trace = Yes
</span></span></span><span class="line"><span class="cl"><span class="s2">TraceFile = /tmp/sql.log
</span></span></span><span class="line"><span class="cl"><span class="s2">Database = test
</span></span></span><span class="line"><span class="cl"><span class="s2">Username = pgadmin
</span></span></span><span class="line"><span class="cl"><span class="s2">Password = 123456
</span></span></span><span class="line"><span class="cl"><span class="s2">Port = 5432
</span></span></span><span class="line"><span class="cl"><span class="s2">ReadOnly = 0
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;</span> &gt; /etc/odbc.ini
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">isql -v postgresql
</span></span></code></pre></div><h2 id="创建-odbc-resource">创建 ODBC Resource</h2>
<p>ODBC Resource 的目的是用于统一管理外部表的连接信息。</p>
<p>创建一个 mysql 的外部资源：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">CREATE EXTERNAL RESOURCE <span class="sb">`</span>mysql_odbc_test<span class="sb">`</span>
</span></span><span class="line"><span class="cl">PROPERTIES <span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;type&#34;</span> <span class="o">=</span> <span class="s2">&#34;odbc_catalog&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;host&#34;</span> <span class="o">=</span> <span class="s2">&#34;127.0.0.1&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;port&#34;</span> <span class="o">=</span> <span class="s2">&#34;3306&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;user&#34;</span> <span class="o">=</span> <span class="s2">&#34;root&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;password&#34;</span> <span class="o">=</span> <span class="s2">&#34;123456&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;database&#34;</span> <span class="o">=</span> <span class="s2">&#34;test&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;odbc_type&#34;</span> <span class="o">=</span> <span class="s2">&#34;mysql&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;driver&#34;</span> <span class="o">=</span> <span class="s2">&#34;MySQL ODBC 8.0 Unicode Driver&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span><span class="p">;</span>
</span></span></code></pre></div><p>创建一个 postgresql 的外部资源：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">CREATE EXTERNAL RESOURCE <span class="sb">`</span>postgresql_odbc_test<span class="sb">`</span>
</span></span><span class="line"><span class="cl"> PROPERTIES <span class="o">(</span>
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;host&#34;</span> <span class="o">=</span> <span class="s2">&#34;127.0.0.1&#34;</span>,
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;port&#34;</span> <span class="o">=</span> <span class="s2">&#34;5432&#34;</span>,
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;user&#34;</span> <span class="o">=</span> <span class="s2">&#34;pgadmin&#34;</span>,
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;password&#34;</span> <span class="o">=</span> <span class="s2">&#34;123456&#34;</span>,
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;database&#34;</span> <span class="o">=</span> <span class="s2">&#34;test&#34;</span>,
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;driver&#34;</span> <span class="o">=</span> <span class="s2">&#34;PostgreSQL&#34;</span>,  
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;odbc_type&#34;</span> <span class="o">=</span> <span class="s2">&#34;postgresql&#34;</span>,
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;type&#34;</span> <span class="o">=</span> <span class="s2">&#34;odbc_catalog&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="o">)</span><span class="p">;</span>
</span></span></code></pre></div><h5 id="odbc-相关参数如下">ODBC 相关参数如下：</h5>
<ul>
<li><code>type</code>: 必填，且必须为<code>odbc_catalog</code>。作为resource的类型标识。</li>
<li><code>user</code>: 外部表的账号，必填。</li>
<li><code>password</code>: 外部表的密码，必填。</li>
<li><code>host</code>: 外部表的连接ip地址，必填。</li>
<li><code>port</code>: 外部表的连接端口，必填。</li>
<li><code>odbc_type</code>: 标示外部表的类型，当前doris支持<code>mysql</code>与<code>oracle</code>，未来可能支持更多的数据库。引用该resource的ODBC外表必填，旧的mysql外表选填。</li>
<li><code>driver</code>: 标示外部表使用的 driver 动态库，引用该resource的ODBC外表必填，旧的mysql外表选填。<strong>必须与 <code>be/conf/odbcinst.ini</code> 中 odbc 的名称保持一致。</strong></li>
</ul>
<p>资源管理主要有三个命令：</p>
<ul>
<li>CREATE RESOURCE</li>
<li>DROP RESOURCE</li>
<li>SHOW RESOURCES</li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">drop</span><span class="w"> </span><span class="n">resource</span><span class="w"> </span><span class="n">postgresql_odbc_lps</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">show</span><span class="w"> </span><span class="n">RESOURCES</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><h2 id="创建外部表">创建外部表</h2>
<p>doris 目前支持的外部表有 MYSQL、POSTGRESQL、BROKER、HIVE、ICEBERG 、HUDI 等。</p>
<p>创建 mysql 的外部表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">CREATE EXTERNAL TABLE <span class="sb">`</span>ext_sys_shop<span class="sb">`</span> <span class="o">(</span>
</span></span><span class="line"><span class="cl">  <span class="sb">`</span>id<span class="sb">`</span> bigint NOT NULL COMMENT <span class="s2">&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">  <span class="sb">`</span>name<span class="sb">`</span> varchar<span class="o">(</span>32<span class="o">)</span> NOT NULL COMMENT <span class="s2">&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">  <span class="sb">`</span>code<span class="sb">`</span> varchar<span class="o">(</span>32<span class="o">)</span> NOT NULL COMMENT <span class="s2">&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">  <span class="sb">`</span>tenant_id<span class="sb">`</span> varchar<span class="o">(</span>10<span class="o">)</span> NOT NULL COMMENT <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="nv">ENGINE</span><span class="o">=</span>ODBC
</span></span><span class="line"><span class="cl">COMMENT <span class="s2">&#34;ODBC&#34;</span>
</span></span><span class="line"><span class="cl">PROPERTIES <span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;odbc_catalog_resource&#34;</span> <span class="o">=</span> <span class="s2">&#34;mysql_odbc_test&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;database&#34;</span> <span class="o">=</span> <span class="s2">&#34;test&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;table&#34;</span> <span class="o">=</span> <span class="s2">&#34;sys_shop&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span><span class="p">;</span>
</span></span></code></pre></div><h2 id="创建-doris-表">创建 Doris 表</h2>
<p>创建 doris 表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">`</span><span class="n">doris_sys_shop</span><span class="o">`</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="nb">bigint</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">code</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="o">`</span><span class="n">tenant_id</span><span class="o">`</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">COMMENT</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">COMMENT</span><span class="w"> </span><span class="s2">&#34;Doris Table&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">DISTRIBUTED</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">HASH</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w"> </span><span class="n">BUCKETS</span><span class="w"> </span><span class="mi">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">PROPERTIES</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;replication_num&#34;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">&#34;1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>从外部表导入数据到 doris 表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">doris_sys_shop</span><span class="w"> </span><span class="k">SELECT</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">code</span><span class="p">,</span><span class="n">tenant_id</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">ext_sys_shop</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>INSERT 命令是同步命令，返回成功，即表示导入成功。</p>
<h2 id="注意事项">注意事项</h2>
<ol>
<li>必须保证外部 ODBC 数据源与 Doris 集群是可以互通，包括BE节点和外部数据源的网络是互通的。</li>
<li>ODBC 外部表本质上是通过单一 ODBC 客户端访问数据源，因此并不合适一次性导入大量的数据，建议分批多次导入。</li>
</ol>
]]></content:encoded></item><item><title>Doris安装和部署</title><link>https://blog.chensoul.com/posts/doris-install-deploy/</link><pubDate>Thu, 18 Aug 2022 09:47:03 +0800</pubDate><guid>https://blog.chensoul.com/posts/doris-install-deploy/</guid><description>《后来的我们 - 五月天》 一、环境准备 1、安装要求 CPU：2C（最低）8C（推荐） 内存：4G（最低）48G（推荐） 硬盘：100G（最低）400G</description><content:encoded><![CDATA[<figure >
    <audio controls preload="metadata">
        
        <source src="/audios/here_after_us.mp3" type="audio/mpeg">
    </audio>
    <p><figcaption>《后来的我们 - 五月天》</figcaption></p>
</figure>
<h2 id="一环境准备">一、环境准备</h2>
<h3 id="1安装要求">1、安装要求</h3>
<ul>
<li>CPU：2C（最低）8C（推荐）</li>
<li>内存：4G（最低）48G（推荐）</li>
<li>硬盘：100G（最低）400G（推荐）</li>
<li>平台：MacOS（Intel）、LinuxOS、Windows 虚拟机</li>
<li>系统：CentOS（7.1及以上）、Ubuntu（16.04 及以上）</li>
<li>软件：JDK（1.8及以上）、GCC（4.8.2 及以上）</li>
</ul>
<h3 id="2环境规划">2、环境规划</h3>
<p>开发测试环境</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>CPU</th>
<th>内存</th>
<th>磁盘</th>
<th>网络</th>
<th>实例数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>Frontend</td>
<td>8核+</td>
<td>8GB+</td>
<td>SSD 或 SATA，10GB+ *</td>
<td>千兆网卡</td>
<td>1</td>
</tr>
<tr>
<td>Backend</td>
<td>8核+</td>
<td>16GB+</td>
<td>SSD 或 SATA，50GB+ *</td>
<td>千兆网卡</td>
<td>1-3 *</td>
</tr>
</tbody>
</table>
<p>生产环境</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>CPU</th>
<th>内存</th>
<th>磁盘</th>
<th>网络</th>
<th>实例数量（最低要求）</th>
</tr>
</thead>
<tbody>
<tr>
<td>Frontend</td>
<td>16核+</td>
<td>64GB+</td>
<td>SSD 或 RAID 卡，100GB+ *</td>
<td>万兆网卡</td>
<td>1-5 *</td>
</tr>
<tr>
<td>Backend</td>
<td>16核+</td>
<td>64GB+</td>
<td>SSD 或 SATA，100G+ *</td>
<td>万兆网卡</td>
<td>10-100 *</td>
</tr>
</tbody>
</table>
<blockquote>
<p>说明：</p>
<ul>
<li>FE 的磁盘空间主要用于存储元数据，包括日志和 image。通常从几百 MB 到几个 GB 不等。</li>
<li>BE 的磁盘空间主要用于存放用户数据，总磁盘空间按用户总数据量 * 3（3副本）计算，然后再预留额外 40% 的空间用作后台压缩以及一些中间数据的存放。</li>
<li>一台机器上可以部署多个 BE 实例，但是<strong>只能部署一个 FE</strong>。如果需要 3 副本数据，那么至少需要 3 台机器各部署一个 BE 实例（而不是1台机器部署3个BE实例）。<strong>多个FE所在服务器的时钟必须保持一致（允许最多5</strong>秒的时钟偏差）</li>
<li>测试环境也可以仅适用一个 BE 进行测试。实际生产环境，BE 实例数量直接决定了整体查询延迟。</li>
<li>所有部署节点关闭 Swap。</li>
<li>Follower 的数量<strong>必须</strong>为奇数，至少为1，Observer 数量随意。</li>
<li><strong>如果 FE 和 BE 混部，需注意资源竞争问题，并保证元数据目录和数据目录分属不同磁盘。</strong></li>
</ul>
</blockquote>
<h3 id="3网络规划">3、网络规划</h3>
<p>Doris 各个实例直接通过网络进行通讯。</p>
<table>
<thead>
<tr>
<th>实例</th>
<th>端口名称</th>
<th>端口</th>
<th>通讯方向</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>BE</td>
<td>be_port</td>
<td>9060</td>
<td>FE &ndash;&gt; BE</td>
<td>BE 上 thrift server 的端口，用于接收来自 FE 的请求</td>
</tr>
<tr>
<td>BE</td>
<td>webserver_port</td>
<td>8040</td>
<td>BE &lt;&ndash;&gt; BE</td>
<td>BE 上的 http server 的端口</td>
</tr>
<tr>
<td>BE</td>
<td>heartbeatport</td>
<td>9050</td>
<td>FE &ndash;&gt; BE</td>
<td>BE 上心跳服务端口（thrift），用于接收来自 FE 的心跳</td>
</tr>
<tr>
<td>BE</td>
<td>brpc_port</td>
<td>8060</td>
<td>FE &lt;&ndash;&gt; BE, BE &lt;&ndash;&gt; BE</td>
<td>BE 上的 brpc 端口，用于 BE 之间通讯</td>
</tr>
<tr>
<td>FE</td>
<td>http_port</td>
<td>8030</td>
<td>FE &lt;&ndash;&gt; FE，用户 &lt;&ndash;&gt; FE</td>
<td>FE 上的 http server 端口</td>
</tr>
<tr>
<td>FE</td>
<td>rpc_port</td>
<td>9020</td>
<td>BE &ndash;&gt; FE, FE &lt;&ndash;&gt; FE</td>
<td>FE 上的 thrift server 端口，每个fe的配置需要保持一致</td>
</tr>
<tr>
<td>FE</td>
<td>query_port</td>
<td>9030</td>
<td>用户 &lt;&ndash;&gt; FE</td>
<td>FE 上的 mysql server 端口</td>
</tr>
<tr>
<td>FE</td>
<td>edit_log_port</td>
<td>9010</td>
<td>FE &lt;&ndash;&gt; FE</td>
<td>FE 上的 bdbje 之间通信用的端口</td>
</tr>
<tr>
<td>Broker</td>
<td>broker_ipc_port</td>
<td>8000</td>
<td>FE &ndash;&gt; Broker, BE &ndash;&gt; Broker</td>
<td>Broker 上的 thrift server，用于接收请求</td>
</tr>
</tbody>
</table>
<h3 id="4服务器配置">4、服务器配置</h3>
<p>作为测试，服务器相关配置如下：</p>
<ul>
<li>服务器：4C/8G</li>
<li>IP地址：192.168.1.107</li>
<li>操作系统：Centos 7.9</li>
<li>JDK版本：OpenJDK 1.8</li>
<li>操作用户：root</li>
</ul>
<h2 id="二单机部署">二、单机部署</h2>
<h3 id="1系统设置">1、系统设置</h3>
<ul>
<li>设置系统最大打开文件句柄数</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">cat &gt;&gt; /etc/security/limits.conf<span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">*       soft    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">*       hard    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">*       soft    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">*       hard    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    soft    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    hard    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    soft    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    hard    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><ul>
<li>设置时钟同步</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl"><span class="c1"># 设置时钟同步</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">yum erase -y ntp
</span></span><span class="line"><span class="cl">yum install -y chrony
</span></span><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;/^server/d&#39;</span> /etc/chrony.conf
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;server ntp1.aliyun.com iburst&#34;</span> &gt;&gt; /etc/chrony.conf
</span></span><span class="line"><span class="cl">egrep -v <span class="s2">&#34;^#|^</span>$<span class="s2">&#34;</span> /etc/chrony.conf 
</span></span><span class="line"><span class="cl">systemctl start chronyd <span class="o">&amp;&amp;</span> systemctl <span class="nb">enable</span> chronyd
</span></span><span class="line"><span class="cl">ss -tulp <span class="p">|</span> grep chronyd
</span></span><span class="line"><span class="cl">chronyc tracking
</span></span><span class="line"><span class="cl">chronyc sources
</span></span><span class="line"><span class="cl">chronyc sourcestats
</span></span></code></pre></div><ul>
<li>关闭交换分区</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">sysctl -w vm.swappiness<span class="o">=</span><span class="m">0</span> &gt;/dev/null
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> vm.swappiness <span class="o">=</span> <span class="m">0</span> &gt;&gt; /etc/sysctl.conf
</span></span><span class="line"><span class="cl">swapoff -a <span class="o">&amp;&amp;</span> sed -i <span class="s1">&#39;/swap/s/^/#/&#39;</span> /etc/fstab
</span></span></code></pre></div><ul>
<li>Liunx文件系统。在安装操作系统的时候，请选择ext4文件系统</li>
</ul>
<h3 id="2安装jdk">2、安装jdk</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF | sudo tee -a /etc/profile
</span></span></span><span class="line"><span class="cl"><span class="s">export JAVA_HOME=/usr/lib/jvm/java
</span></span></span><span class="line"><span class="cl"><span class="s">export CLASSPATH=.:\$JAVA_HOME/lib:\$JAVA_HOME/jre/lib:\$CLASSPATH
</span></span></span><span class="line"><span class="cl"><span class="s">export PATH=\$JAVA_HOME/bin:\$JAVA_HOME/jre/bin:\$PATH
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> /etc/profile
</span></span></code></pre></div><h3 id="3下载安装包">3、下载安装包</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">wget https://mirrors.aliyun.com/apache/doris/1.1/1.1.1-rc03/apache-doris-1.1.1-bin-x86.tar.gz
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">tar zxvf apache-doris-1.1.1-bin-x86.tar.gz
</span></span><span class="line"><span class="cl">mv apache-doris-1.1.1-bin-x86 /opt/doris
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /opt/doris
</span></span></code></pre></div><h3 id="4配置-fe-和-be">4、配置 FE 和 BE</h3>
<blockquote>
<p>注意：</p>
<p>FE 和 BE 是混合部署在一台服务器上时，数据目录需要使用不同的磁盘。</p>
</blockquote>
<p>修改 FE，做出以下配置：</p>
<ul>
<li>设置网络</li>
<li>设置元数据目录<code>meta_dir</code>。默认值为 <code>${DORIS_HOME}/doris-meta</code>，需<strong>手动创建</strong>该目录。<strong>注意：生产环境强烈建议单独指定目录不要放在Doris安装目录下，最好是</strong>单独的磁盘（如果有SSD最好），测试<strong>开发</strong>环境可以使用默认<strong>配置</strong>。</li>
<li>数据库表名支持小写</li>
<li>支持导出数据到本地目录</li>
<li>fe.conf 中 JAVA_OPTS 默认 java 最大堆内存为 4GB，<strong>建议生产环境调整至 8G 以上</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;/^priority_networks/d&#39;</span> fe/conf/fe.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir /meta
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat &gt;&gt; fe/conf/fe.conf <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">priority_networks=192.168.1.0/24
</span></span></span><span class="line"><span class="cl"><span class="s">meta_dir=/meta
</span></span></span><span class="line"><span class="cl"><span class="s">lower_case_table_names=1
</span></span></span><span class="line"><span class="cl"><span class="s">enable_outfile_to_local=true
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><p>修改 BE，做出以下配置：</p>
<ul>
<li>设置网络。</li>
<li>设置数据存储根目录<code>storage_root_path</code>。默认在be/storage下，需要<strong>手动创建</strong>该目录。多个路径之间使用英文状态的分号分隔。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;/^priority_networks/d&#39;</span> be/conf/be.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir /data/doris
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat &gt;&gt; be/conf/be.conf <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">priority_networks=192.168.1.0/24
</span></span></span><span class="line"><span class="cl"><span class="s">storage_root_path=/data/doris
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><h3 id="5启动-fe-和-be">5、启动 FE 和 BE</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">fe/bin/start_fe.sh --daemon
</span></span><span class="line"><span class="cl">be/bin/start_be.sh --daemon
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<p><strong>在生产环境中，所有实例都应使用守护进程启动，以保证进程退出后，会被自动拉起。</strong></p>
<p>参考文章：<a href="https://www.cnblogs.com/lenmom/p/9973401.html">Apache Doris通过supervisor进行进程管理 - 老董 - 博客园</a></p>
</blockquote>
<p>可以通过如下链接查看 FE 是否启动成功：http://192.168.1.107:8030/api/bootstrap</p>
<p>通过如下链接查看 BE 是否启动成功：http://192.168.1.107:8040/api/health</p>
<h3 id="6安装-mysql-客户端">6、安装 MySql 客户端</h3>
<p>选择一台服务器，安装 mysql 8 客户端，这里我是在 192.168.1.107 上安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm
</span></span><span class="line"><span class="cl">yum localinstall mysql80-community-release-el7-1.noarch.rpm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">yum repolist all <span class="p">|</span> grep mysql
</span></span><span class="line"><span class="cl">yum repolist enabled <span class="p">|</span> grep mysql
</span></span><span class="line"><span class="cl">yum install yum-utils -y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">yum-config-manager --enable mysql80-community
</span></span><span class="line"><span class="cl">yum-config-manager --disable mysql57-community
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
</span></span><span class="line"><span class="cl">yum install mysql-community-client -y
</span></span></code></pre></div><h3 id="7在-fe-上添加-be-节点">7、在 FE 上添加 BE 节点</h3>
<p>在 192.168.1.107 节点连接 FE，并且注册 BE 节点</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">mysql -h 192.168.1.107 -P <span class="m">9030</span> -uroot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD BACKEND <span class="s2">&#34;192.168.1.107:9050&#34;</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="8访问-web-ui">8、访问 Web UI</h3>
<p>FE 节点Web UI：http://192.168.1.107:8030</p>
<p>BE 节点Web UI：http://192.168.1.107:8040</p>
<h3 id="9mysql-客户端访问">9、MySQL 客户端访问</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-SQL" data-lang="SQL"><span class="line"><span class="cl"><span class="n">mysql</span><span class="w"> </span><span class="o">-</span><span class="n">h</span><span class="w"> </span><span class="mi">192</span><span class="p">.</span><span class="mi">168</span><span class="p">.</span><span class="mi">1</span><span class="p">.</span><span class="mi">107</span><span class="w"> </span><span class="o">-</span><span class="n">P</span><span class="w"> </span><span class="mi">9030</span><span class="w"> </span><span class="o">-</span><span class="n">uroot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">DATABASES</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">&gt;</span><span class="w"> </span><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="n">example_db</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">&gt;</span><span class="w"> </span><span class="n">USE</span><span class="w"> </span><span class="n">example_db</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="err">查看</span><span class="n">BE</span><span class="err">状态</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">&gt;</span><span class="w"> </span><span class="k">SHOW</span><span class="w"> </span><span class="n">PROC</span><span class="w"> </span><span class="s1">&#39;/backends&#39;</span><span class="w">
</span></span></span></code></pre></div><h2 id="三集群部署">三、集群部署</h2>
<p>FE 角色：</p>
<ul>
<li>Follower：所有 Follower 角色的 FE 节点会组成一个可选择组，组内选择出一个 master 或者叫做 leader。当 Master 挂了，会自动选择新的 Follower 作为 Master。</li>
<li>Observer：Observer仅仅作为观察者来同步已经成功写入的元数据日志，并且提供元数据读服务。他不会参与多数写的逻辑。Observer 也不会参与选举。</li>
</ul>
<p>通常情况下，可以部署 1 Follower + 2 Observer 或者 3 Follower + N Observer。前者运维简单，几乎不会出现 Follower 之间的一致性协议导致这种复杂错误情况（企业大多使用这种方式）。后者可以保证元数据写的高可用，如果是高并发查询场景，可以适当增加 Observer。</p>
<h3 id="1在其他服务器上安装-doris">1、在其他服务器上安装 doris</h3>
<p>集群三个节点：</p>
<ul>
<li>192.168.1.107 FE（master follower）、BE</li>
<li>192.168.1.108 FE（follower）、BE</li>
<li>192.168.1.109 FE（follower）、BE</li>
</ul>
<p>在集群每个节点配置 hosts：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">192.168.1.107 doris-01
</span></span><span class="line"><span class="cl">192.168.1.108 doris-02
</span></span><span class="line"><span class="cl">192.168.1.109 doris-03
</span></span></code></pre></div><p>参考单机部署步骤，在其他服务器上安装 doris 。</p>
<h3 id="2启动-be">2、启动 BE</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">be/bin/start_be.sh --daemon
</span></span></code></pre></div><h3 id="3fe-扩容">3、FE 扩容</h3>
<p>通过 mysql 客户端登陆 Master FE 也就是 192.168.1.107</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">mysql -h 192.168.1.107 -P <span class="m">9030</span> -uroot
</span></span></code></pre></div><p>查看 FE 节点情况：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">mysql&gt; SHOW PROC <span class="s1">&#39;/frontends&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>也可以通过 http://192.168.1.107:8030/System?path=//frontends 查看</p>
<p><img src="/images/doris-fe-web.jpg" alt="img"></p>
<p>在 192.168.1.108 和  192.168.1.109 节点上启动 FE ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">fe/bin/start_fe.sh --helper 192.168.1.107:9010 --daemon
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<p>第一次启动需要指定 <code>--helper</code>，之后不需要。</p>
</blockquote>
<p>然后，登陆 Master FE，添加 FE 到集群：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">mysql -h 192.168.1.107 -P <span class="m">9030</span> -uroot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD FOLLOWER  <span class="s2">&#34;192.168.1.108:9010&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD FOLLOWER  <span class="s2">&#34;192.168.1.109:9010&#34;</span><span class="p">;</span>
</span></span></code></pre></div><p>查看 FE 状态</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">SHOW PROC <span class="s1">&#39;/frontends&#39;</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="4在-fe-中添加-be-节点">4、在 FE 中添加 BE 节点</h3>
<p>登陆 Master FE，注册 BE 节点</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">mysql -h 192.168.1.107 -P <span class="m">9030</span> -uroot
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD BACKEND <span class="s2">&#34;192.168.1.107:9050&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD BACKEND <span class="s2">&#34;192.168.1.108:9050&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD BACKEND <span class="s2">&#34;192.168.1.109:9050&#34;</span><span class="p">;</span>
</span></span></code></pre></div><p>查看BE状态</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">SHOW PROC <span class="s1">&#39;/backends&#39;</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="5停止-fe-和-be">5、停止 FE 和 BE</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">fe/bin/stop_fe.sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">be/bin/stop_be.sh
</span></span></code></pre></div><h3 id="6重新初始化集群">6、重新初始化集群</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl"><span class="nb">cd</span> /opt/doris
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">fe/bin/stop_fe.sh
</span></span><span class="line"><span class="cl">be/bin/stop_be.sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">rm -rf /meta/* /data/doris/*
</span></span><span class="line"><span class="cl">mkdir -p /meta /data/doris
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># FE master</span>
</span></span><span class="line"><span class="cl">fe/bin/start_fe.sh --daemon
</span></span><span class="line"><span class="cl">be/bin/start_be.sh --daemon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># FE follwer</span>
</span></span><span class="line"><span class="cl">fe/bin/start_fe.sh --helper 192.168.1.107:9010 --daemon
</span></span><span class="line"><span class="cl">be/bin/start_be.sh --daemon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mysql -h 192.168.1.107 -P <span class="m">9030</span> -uroot
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD BACKEND <span class="s2">&#34;192.168.1.107:9050&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD BACKEND <span class="s2">&#34;192.168.1.108:9050&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD BACKEND <span class="s2">&#34;192.168.1.109:9050&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD FOLLOWER  <span class="s2">&#34;192.168.1.108:9010&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">ALTER SYSTEM ADD FOLLOWER  <span class="s2">&#34;192.168.1.109:9010&#34;</span><span class="p">;</span>
</span></span></code></pre></div><h2 id="四总结">四、总结</h2>
<p>安装 doris 完整安装脚本如下，你可以按照你的需求进行修改：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">cat &gt;&gt; /etc/security/limits.conf<span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">*       soft    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">*       hard    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">*       soft    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">*       hard    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    soft    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    hard    nproc   131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    soft    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">root    hard    nofile  131072
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置时钟同步</span>
</span></span><span class="line"><span class="cl">yum erase -y ntp
</span></span><span class="line"><span class="cl">yum install -y chrony
</span></span><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;/^server/d&#39;</span> /etc/chrony.conf
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;server ntp1.aliyun.com iburst&#34;</span> &gt;&gt; /etc/chrony.conf
</span></span><span class="line"><span class="cl">egrep -v <span class="s2">&#34;^#|^</span>$<span class="s2">&#34;</span> /etc/chrony.conf 
</span></span><span class="line"><span class="cl">systemctl start chronyd <span class="o">&amp;&amp;</span> systemctl <span class="nb">enable</span> chronyd
</span></span><span class="line"><span class="cl">ss -tulp <span class="p">|</span> grep chronyd
</span></span><span class="line"><span class="cl">chronyc tracking
</span></span><span class="line"><span class="cl">chronyc sources
</span></span><span class="line"><span class="cl">chronyc sourcestats
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 JDK </span>
</span></span><span class="line"><span class="cl">yum install -y java-1.8.0-openjdk java-1.8.0-openjdk-devel
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF | sudo tee -a /etc/profile
</span></span></span><span class="line"><span class="cl"><span class="s">export JAVA_HOME=/usr/lib/jvm/java
</span></span></span><span class="line"><span class="cl"><span class="s">export CLASSPATH=.:\$JAVA_HOME/lib:\$JAVA_HOME/jre/lib:\$CLASSPATH
</span></span></span><span class="line"><span class="cl"><span class="s">export PATH=\$JAVA_HOME/bin:\$JAVA_HOME/jre/bin:\$PATH
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> /etc/profile
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">wget https://mirrors.aliyun.com/apache/doris/1.1/1.1.1-rc03/apache-doris-1.1.1-bin-x86.tar.gz
</span></span><span class="line"><span class="cl">tar zxvf apache-doris-1.1.1-bin-x86.tar.gz
</span></span><span class="line"><span class="cl">mv apache-doris-1.1.1-bin-x86 /opt/doris
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /opt/doris
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;/^priority_networks/d&#39;</span> fe/conf/fe.conf
</span></span><span class="line"><span class="cl">mkdir /meta
</span></span><span class="line"><span class="cl">cat &gt;&gt; fe/conf/fe.conf <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">priority_networks=192.168.1.0/24
</span></span></span><span class="line"><span class="cl"><span class="s">meta_dir=/meta
</span></span></span><span class="line"><span class="cl"><span class="s">lower_case_table_names=1
</span></span></span><span class="line"><span class="cl"><span class="s">enable_outfile_to_local=true
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;/^priority_networks/d&#39;</span> be/conf/be.conf
</span></span><span class="line"><span class="cl">mkdir /data/doris
</span></span><span class="line"><span class="cl">cat &gt;&gt; be/conf/be.conf <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">priority_networks=192.168.1.0/24
</span></span></span><span class="line"><span class="cl"><span class="s">storage_root_path=/data/doris
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">fe/bin/start_fe.sh --daemon
</span></span><span class="line"><span class="cl">be/bin/start_be.sh --daemon
</span></span></code></pre></div>]]></content:encoded></item><item><title>Linux设置时钟同步</title><link>https://blog.chensoul.com/posts/config-ntp-on-linux/</link><pubDate>Tue, 16 Aug 2022 10:13:42 +0800</pubDate><guid>https://blog.chensoul.com/posts/config-ntp-on-linux/</guid><description>NTP 是 Network Time Protocol 的缩写，也即网络时间协议，一种在 Linux 上保持准确时间的协议，它和网络上可用的 NTP 服务器保持着时钟同步。 用于同步日期和时间的 ntpd 服务，在新的</description><content:encoded><![CDATA[<p>NTP 是 Network Time Protocol 的缩写，也即网络时间协议，一种在 Linux 上保持准确时间的协议，它和网络上可用的 NTP 服务器保持着时钟同步。</p>
<p>用于同步日期和时间的 ntpd 服务，在新的Linux发行版 ( centos8、Ubuntu 20.04、Fedora 30 ) 中已经废弃了，取而代之的是 chrony。</p>
<p>Chrony 和 NTP 的区别如下：</p>
<table>
<thead>
<tr>
<th><code>ntp name</code></th>
<th><code>chrony name</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc/ntp.conf</td>
<td>/etc/chrony.conf</td>
</tr>
<tr>
<td>/etc/ntp/keys</td>
<td>/etc/chrony.keys</td>
</tr>
<tr>
<td>ntpd</td>
<td>chronyd</td>
</tr>
<tr>
<td>ntpq</td>
<td>chronyc</td>
</tr>
<tr>
<td>ntpd.service</td>
<td>chronyd.service</td>
</tr>
<tr>
<td>ntp-wait.service</td>
<td>chrony-wait.service</td>
</tr>
</tbody>
</table>
<h2 id="ntp">NTP</h2>
<h3 id="1安装-ntp-服务">1、安装 NTP 服务</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install -y ntp
</span></span></code></pre></div><p>接下来可以使用 ntpdate 命令来更新时间，比如，在联网环境下，可以通过网络上的校时服务器来同步时间。</p>
<blockquote>
<p>常见的校时服务器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 国家授时中心</span>
</span></span><span class="line"><span class="cl">210.72.145.44
</span></span><span class="line"><span class="cl"><span class="c1"># 阿里云</span>
</span></span><span class="line"><span class="cl">ntp.aliyun.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">s1a.time.edu.cn <span class="c1">#北京邮电大学</span>
</span></span><span class="line"><span class="cl">s1b.time.edu.cn <span class="c1">#清华大学</span>
</span></span><span class="line"><span class="cl">s1c.time.edu.cn <span class="c1">#北京大学</span>
</span></span><span class="line"><span class="cl">s1d.time.edu.cn <span class="c1">#东南大学</span>
</span></span><span class="line"><span class="cl">s1e.time.edu.cn <span class="c1">#清华大学</span>
</span></span><span class="line"><span class="cl">s2a.time.edu.cn <span class="c1">#清华大学</span>
</span></span><span class="line"><span class="cl">s2b.time.edu.cn <span class="c1">#清华大学</span>
</span></span><span class="line"><span class="cl">s2c.time.edu.cn <span class="c1">#北京邮电大学</span>
</span></span><span class="line"><span class="cl">s2d.time.edu.cn <span class="c1">#西南地区网络中心</span>
</span></span><span class="line"><span class="cl">s2e.time.edu.cn <span class="c1">#西北地区网络中心</span>
</span></span><span class="line"><span class="cl">s2f.time.edu.cn <span class="c1">#东北地区网络中心</span>
</span></span><span class="line"><span class="cl">s2g.time.edu.cn <span class="c1">#华东南地区网络中心</span>
</span></span><span class="line"><span class="cl">s2h.time.edu.cn <span class="c1">#四川大学网络管理中心</span>
</span></span><span class="line"><span class="cl">s2j.time.edu.cn <span class="c1">#大连理工大学网络中心</span>
</span></span><span class="line"><span class="cl">s2k.time.edu.cn <span class="c1">#CERNET桂林主节点</span>
</span></span><span class="line"><span class="cl">s2m.time.edu.cn <span class="c1">#北京大学</span>
</span></span><span class="line"><span class="cl">ntp.sjtu.edu.cn <span class="c1">#上海交通大学</span>
</span></span></code></pre></div></blockquote>
<p>下面是采用微软的校时服务器调整系统时间</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ntpdate time.windows.com 
</span></span></code></pre></div><h3 id="2内网搭建时钟服务器">2、内网搭建时钟服务器</h3>
<p>如果是在内网不能连接外网，则可以在内网选择一台服务器作为时钟服务器，其他服务器都作为客户端同步这台时钟服务器的时间。</p>
<p>修改 <code>/etc/ntp.conf</code> 配置，注释或者删除 <code>server</code> 开头的配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s2">&#34;/^server/ d&#34;</span> /etc/ntp.conf
</span></span></code></pre></div><p>使用本地时钟作为ntp服务器时间，这里的 127.127.1.0 在 ntp 中代表本机</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF | sudo tee -a /etc/ntp.conf
</span></span></span><span class="line"><span class="cl"><span class="s">server 127.127.1.0
</span></span></span><span class="line"><span class="cl"><span class="s">fudge 127.127.1.0 stratum 10
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></div><p>启动 ntp 服务，并设置开机启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl start ntpd
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> ntpd
</span></span></code></pre></div><p>配置客户端。同样，需要先安装 ntp 服务，然后修改 <code>/etc/ntp.conf</code> 文件，注释或者删除 <code>server</code> 开头的配置，并添加一行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s2">&#34;/^server/ d&#34;</span> /etc/ntp.conf
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF | sudo tee -a /etc/ntp.conf
</span></span></span><span class="line"><span class="cl"><span class="s">server 192.168.1.107
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">sudo systemctl start ntpd
</span></span><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> ntpd
</span></span><span class="line"><span class="cl">ntpdate -u ntp1.aliyun.com
</span></span><span class="line"><span class="cl">hwclock --systohc
</span></span></code></pre></div><p>启动 ntp 服务，并设置开机启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl start ntpd
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> ntpd
</span></span></code></pre></div><p>向时钟服务器发送请求，同步时间</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ntpdate 192.168.1.107
</span></span></code></pre></div><h3 id="3使用网络时钟服务器">3、使用网络时钟服务器</h3>
<p>如果内网服务器可以联网，则可以将所有服务器配置为客户端连接网络上的时钟服务器。</p>
<p>这里使用阿里云的时钟服务器，所有服务器作为客户端同步阿里云的时钟服务器的时间。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i <span class="s2">&#34;/^server/ d&#34;</span> /etc/ntp.conf
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF | sudo tee -a /etc/ntp.conf
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp1.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp2.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp3.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp4.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">sudo systemctl start ntpd
</span></span><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> ntpd
</span></span><span class="line"><span class="cl">ntpdate -u ntp1.aliyun.com
</span></span></code></pre></div><h3 id="4查看状态">4、查看状态</h3>
<p>检测ntpd服务的端口情况，默认端口是123：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -tunlp<span class="p">|</span>grep ntp
</span></span></code></pre></div><p>查看 ntp 服务器有无和上层 ntp 连通，使用 <code>ntpstat</code> 行查询</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ntpstat
</span></span></code></pre></div><p><code>ntpq -p</code>可以查看本地NTP需进行同步的公网 NTP 服务器状态。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ntpq -p 
</span></span></code></pre></div><blockquote>
<h6 id="tpq--p-参数详解">tpq -p 参数详解</h6>
<ul>
<li>remote ：本地主机所连接的上层NTP服务器，最左边的符号如下：
如果有[*] 代表目前正在使用当中的上层NTP服务器。
如果有[+] 代表也有连上上层NTP服务器，可以作为提高时间更新的候选NTP服务器
如果有[-] 代表同步的该NTP服务器被认为是不合格的NTP Server
如果有<input checked="" disabled="" type="checkbox"> 代表同步的外网NTP服务器不可用</li>
<li>refid  ：指的是给上层NTP服务器提供时间校对的服务器。</li>
<li>St:上层NTP服务器的级别</li>
<li>When: 上一次与上层NTP服务器进行时间校对的时间（单位：s)</li>
<li>Poll :本地主机与上层NTP服务器进行时间校对的周期（单位：s）</li>
<li>reach：八进制数，表示最近8次时钟同步包接收情况（1表示接收成功，0表示接收失败。每接收一个包左移一位。对于一个运行较长时间的NTP client而言，这个值应该是377-&gt;11,111,111，即最近8次包接收均成功；否则表示有丢包情况发生）</li>
<li>delay：网络传输过程当中延迟的时间，单位为 10^(-6) 秒</li>
<li>offset：时间补偿的结果，单位为10^(-6) 秒</li>
<li>jitter：Linux 系统时间与 BIOS 硬件时间的差异时间， 单位为 10^(-6) 秒。</li>
</ul>
</blockquote>
<p>检查同步是否成功。查看与时间同步服务器的时间偏差，offset 偏差小，同步成功。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ntpdc -c loopinfo
</span></span></code></pre></div><h3 id="5配置自动同步">5、配置自动同步</h3>
<p>设置自动同步，同步频率：每十分钟同步一次。编辑 crontab：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># crontab -e </span>
</span></span><span class="line"><span class="cl">*/10 * * * * /usr/sbin/ntpdate ntp1.aliyun.com <span class="o">&amp;&amp;</span> hwclock -w &gt;&gt; /tmp/crontab.log
</span></span></code></pre></div><h3 id="6系统时钟与硬件时钟之间同步">6、系统时钟与硬件时钟之间同步</h3>
<p>设置硬件时钟</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># -w,--systohc</span>
</span></span><span class="line"><span class="cl">hwclock -w
</span></span></code></pre></div><p>设置系统时钟：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># -s, --hctosys</span>
</span></span><span class="line"><span class="cl">hwclock -s
</span></span></code></pre></div><h2 id="chrony">chrony</h2>
<h3 id="1安装服务">1、安装服务</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum erase -y ntp
</span></span><span class="line"><span class="cl">yum install -y chrony
</span></span></code></pre></div><h3 id="2使用网络时钟服务器">2、使用网络时钟服务器</h3>
<p>这里使用网络时钟服务器，在每台服务器上修改配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;/^server/d&#39;</span> /etc/chrony.conf
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;server ntp1.aliyun.com iburst&#34;</span> &gt;&gt; /etc/chrony.conf
</span></span><span class="line"><span class="cl">egrep -v <span class="s2">&#34;^#|^</span>$<span class="s2">&#34;</span> /etc/chrony.conf 
</span></span></code></pre></div><p>启动服务，并设置开机启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">systemctl start chronyd <span class="o">&amp;&amp;</span> systemctl <span class="nb">enable</span> chronyd
</span></span></code></pre></div><h3 id="3查看状态">3、查看状态</h3>
<p>查看端口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -tulp <span class="p">|</span> grep chronyd
</span></span></code></pre></div><p>查看同步状态，显示刚刚配置的ip 并且ip前面有，*星号即为成功 ，这个符号 ^ 为失败</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chronyc sources
</span></span><span class="line"><span class="cl">chronyc sources -v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chronyc sourcestats
</span></span></code></pre></div><p>跟踪时间同步过程：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chronyc tracking
</span></span></code></pre></div><h2 id="其他">其他</h2>
<p>配置时区</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 配置时区</span>
</span></span><span class="line"><span class="cl">timedatectl set-timezone Asia/Shanghai
</span></span></code></pre></div><p>将硬件时钟调整为UTC时间，1为本地时钟：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 将硬件时钟调整为UTC时间，1为本地时钟</span>
</span></span><span class="line"><span class="cl">timedatectl set-local-rtc <span class="m">0</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<h3 id="ntp-安装和设置完整脚本">ntp 安装和设置完整脚本</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#设置时钟同步</span>
</span></span><span class="line"><span class="cl">yum install -y ntp
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sed -i <span class="s2">&#34;/^server/ d&#34;</span> /etc/ntp.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF | sudo tee -a /etc/ntp.conf
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp1.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp2.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp3.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">server ntp4.aliyun.com
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl start ntpd
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> ntpd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ntpdate -u ntp1.aliyun.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">hwclock --systohc
</span></span></code></pre></div><h3 id="chrony-安装和设置完整脚本">chrony 安装和设置完整脚本</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 设置时钟同步</span>
</span></span><span class="line"><span class="cl">yum erase -y ntp
</span></span><span class="line"><span class="cl">yum install -y chrony
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;/^server/d&#39;</span> /etc/chrony.conf
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;server ntp1.aliyun.com iburst&#34;</span> &gt;&gt; /etc/chrony.conf
</span></span><span class="line"><span class="cl">egrep -v <span class="s2">&#34;^#|^</span>$<span class="s2">&#34;</span> /etc/chrony.conf 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl start chronyd <span class="o">&amp;&amp;</span> systemctl <span class="nb">enable</span> chronyd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ss -tulp <span class="p">|</span> grep chronyd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chronyc tracking
</span></span><span class="line"><span class="cl">chronyc sources
</span></span><span class="line"><span class="cl">chronyc sourcestats
</span></span></code></pre></div>]]></content:encoded></item><item><title>Mac开发环境配置</title><link>https://blog.chensoul.com/posts/mac-development-environment-setup/</link><pubDate>Thu, 09 Sep 2021 18:14:34 +0800</pubDate><guid>https://blog.chensoul.com/posts/mac-development-environment-setup/</guid><description>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是Mac开发环境，所以，这篇文章主要是基于Mac操作系</description><content:encoded><![CDATA[<p>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是Mac开发环境，所以，这篇文章主要是基于Mac操作系统，记录开发环境搭建过程。</p>
<h2 id="偏好设置">偏好设置</h2>
<ul>
<li>系统所有偏好设置
<ul>
<li>通用：关闭文稿时要求保存更改</li>
<li>Siri：关闭</li>
<li>辅助功能 - 指针控制（或鼠标与触控板） - 触控板选项：启动拖移(三指拖移)</li>
<li>触控板 &gt; 光标与点击，轻拍来点按，辅助点按</li>
<li>Dock
<ul>
<li>置于屏幕上的位置：右边</li>
<li>设置 Dock 图标更小（大小随个人喜好）</li>
</ul>
</li>
</ul>
</li>
<li>Finder
<ul>
<li>显示各种栏</li>
<li>显示所有文件扩展名</li>
<li>标题栏显示完整路径：defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES;killall Finder</li>
</ul>
</li>
<li>禁用大部分 iCloud 同步</li>
<li>键盘 -&gt; 快捷键
<ul>
<li>command + 空格：spotlight  </li>
<li>control + 空格：切换输入法</li>
</ul>
</li>
</ul>
<h2 id="xcode">XCode</h2>
<p>从 App store 或苹果开发者网站安装 <a href="https://developer.apple.com/xcode/">Xcode</a> ，然后安装 Xcode command line tools：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">xcode-select --install
</span></span></code></pre></div><p>安装完成后，你将可以直接在 terminal 中使用主要的命令，比如：<code>make, GCC, clang, perl, svn, git, size, strip, strings, libtool, cpp</code>等等。</p>
<p>如果你想了解 Xcode command line tools 包含多少可用的命令，可以通过下面命令查看：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ls /Library/Developer/CommandLineTools/usr/bin/
</span></span></code></pre></div><h2 id="homebrew">Homebrew</h2>
<p><a href="http://brew.sh/">Brew</a> 是 Mac 下面的包管理工具，通过 Github 托管适合 Mac 的编译配置以及 Patch，可以方便的安装开发工具。</p>
<p>Linux也支持Homebrew了，请参考 <a href="https://docs.brew.sh/Homebrew-on-Linux">https://docs.brew.sh/Homebrew-on-Linux</a>。</p>
<h3 id="安装">安装</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/usr/bin/ruby -e <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>替换brew.git</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git -C <span class="s2">&#34;</span><span class="k">$(</span>brew --repo<span class="k">)</span><span class="s2">&#34;</span> remote set-url origin https://mirrors.cloud.tencent.com/homebrew/brew.git 
</span></span><span class="line"><span class="cl">git -C <span class="s2">&#34;</span><span class="k">$(</span>brew --repo homebrew/core<span class="k">)</span><span class="s2">&#34;</span> remote set-url origin https://mirrors.cloud.tencent.com//homebrew/homebrew-core.git brew update
</span></span></code></pre></div><p>设置环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;PATH=&#34;/usr/local/bin:$PATH&#34;&#39;</span> &gt;&gt; ~/.bash_profile
</span></span></code></pre></div><p>如果安装了zsh，则是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;PATH=&#34;/usr/local/bin:$PATH&#34;&#39;</span> &gt;&gt; ~/.zshrc
</span></span></code></pre></div><h3 id="cask">Cask</h3>
<p><a href="https://github.com/phinze/homebrew-cask">Brew cask</a> 是类似 Brew 的管理工具， 直接提供 dmg 级别的二进制包，（Brew 是不带源码，只有对应项目所在的 URL）。我们可以通过 Homebrew Cask 优雅、简单、快速的安装和管理 OS X 图形界面程序，比如 Google Chrome 和 Dropbox。</p>
<p>Brew cask 安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew tap phinze/homebrew-cask
</span></span></code></pre></div><p>可以通过 Brew cask 安装的软件有：</p>
<ul>
<li>QQ</li>
<li>qqmusic</li>
<li>google-chrome</li>
<li>virtualbox</li>
<li>vagrant</li>
<li>iterm2</li>
<li>the-unarchiver</li>
<li>switchhosts</li>
<li>aerial</li>
<li>fliqlo</li>
</ul>
<h2 id="iterm2">iTerm2</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install --cask iterm2
</span></span></code></pre></div><p>设置：</p>
<ul>
<li>Preferences &ndash;&gt; Profiles&ndash;&gt; Default &ndash;&gt; Terminal：设置 cursor 颜色为黄色</li>
<li>Preferences &ndash;&gt; Profiles &ndash;&gt; Window &ndash;&gt; Transparency：设置透明度 10%~20% 即可，太高会和桌面背景冲突。如果需要临时禁用透明度可以使用快捷键 ⌘+u。</li>
</ul>
<h3 id="zsh">Zsh</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install zsh
</span></span></code></pre></div><p><strong>安装Oh My Zsh：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>设置zsh为默认：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo sh -c <span class="s2">&#34;echo </span><span class="k">$(</span>which zsh<span class="k">)</span><span class="s2"> &gt;&gt; /etc/shells&#34;</span>  
</span></span><span class="line"><span class="cl">chsh -s <span class="k">$(</span>which zsh<span class="k">)</span>
</span></span></code></pre></div><p>bash切换到zsh</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chsh -s /bin/zsh
</span></span></code></pre></div><p>使设置生效：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><p><strong>安装<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins">Oh My Zsh 插件</a></strong>，修改 .zshrc ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>git mvn colorize encode64 urltools wd last-working-dir sublime vagrant Z zsh-syntax-highlighting brew osx<span class="o">)</span>
</span></span></code></pre></div><p>安装 zsh-syntax-highlighting：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/zsh-syntax-highlighting
</span></span></code></pre></div><p>安装 zsh-autosuggestions：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/zsh-users/zsh-autosuggestions <span class="nv">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions
</span></span></code></pre></div><p>安装git-open</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/paulirish/git-open.git <span class="nv">$ZSH_CUSTOM</span>/plugins/git-open
</span></span></code></pre></div><p>修改主题，更多主题参考 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">Oh My Zsh Wiki</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">ZSH_THEME</span><span class="o">=</span>pygmalion
</span></span></code></pre></div><h3 id="tree">tree</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install tree
</span></span></code></pre></div><h3 id="fzf">fzf</h3>
<p>安装 fzf：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install fzf
</span></span></code></pre></div><p>fzf用法：</p>
<ul>
<li>1、切换到指定目录</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># fd - cd to selected directory</span>
</span></span><span class="line"><span class="cl">fd<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">local</span> dir
</span></span><span class="line"><span class="cl">  <span class="nv">dir</span><span class="o">=</span><span class="k">$(</span>find <span class="si">${</span><span class="nv">1</span><span class="k">:-</span><span class="p">.</span><span class="si">}</span> -path <span class="s1">&#39;*/\.*&#39;</span> -prune <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                  -o -type d -print 2&gt; /dev/null <span class="p">|</span> fzf +m<span class="k">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">cd</span> <span class="s2">&#34;</span><span class="nv">$dir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>2、查看历史命令，并且执行选中的命令</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># fh - search in your command history and execute selected command</span>
</span></span><span class="line"><span class="cl">fh<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">eval</span> <span class="k">$(</span> <span class="o">([</span> -n <span class="s2">&#34;</span><span class="nv">$ZSH_NAME</span><span class="s2">&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">fc</span> -l <span class="m">1</span> <span class="o">||</span> <span class="nb">history</span><span class="k">)</span> <span class="p">|</span> fzf +s --tac <span class="p">|</span> sed <span class="s1">&#39;s/ *[0-9]* *//&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>3、查看Chrome历史</li>
</ul>
<blockquote>
<p>提示：查看 <a href="https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/">blog post</a>。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># ch - browse chrome history</span>
</span></span><span class="line"><span class="cl">ch<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">local</span> cols sep
</span></span><span class="line"><span class="cl">  <span class="nv">cols</span><span class="o">=</span><span class="k">$((</span> COLUMNS <span class="o">/</span> <span class="m">3</span> <span class="k">))</span>
</span></span><span class="line"><span class="cl">  <span class="nv">sep</span><span class="o">=</span><span class="s1">&#39;{::}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  cp -f ~/Library/Application<span class="se">\ </span>Support/Google/Chrome/Default/History /tmp/h
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  sqlite3 -separator <span class="nv">$sep</span> /tmp/h <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="s2">&#34;select substr(title, 1, </span><span class="nv">$cols</span><span class="s2">), url
</span></span></span><span class="line"><span class="cl"><span class="s2">     from urls order by last_visit_time desc&#34;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">  awk -F <span class="nv">$sep</span> <span class="s1">&#39;{printf &#34;%-&#39;</span><span class="nv">$cols</span><span class="s1">&#39;s  \x1b[36m%s\x1b[m\n&#34;, $1, $2}&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">  fzf --ansi --multi <span class="p">|</span> sed <span class="s1">&#39;s#.*\(https*://\)#\1#&#39;</span> <span class="p">|</span> xargs open
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>注意：</p>
<ul>
<li>请确认Chrome的历史记录的地址是正确的。</li>
<li>更多说明，参考 <a href="https://stackoverflow.com/a/16742333/1564365">StackOverflow</a>。</li>
</ul>
<p>fzf更多用法，参考  <strong><a href="https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh">official repo</a></strong>。</p>
<h3 id="ack">ack</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install ack
</span></span></code></pre></div><p>搜索 js 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ack --js pancakes
</span></span></code></pre></div><p>搜索不包含 brew 的文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ack -L brew
</span></span></code></pre></div><p>排序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">--sort-files
</span></span></code></pre></div><p>结果高亮显示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">--sort-files
</span></span></code></pre></div><p>自定义类型：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">--type-set<span class="o">=</span><span class="nv">markdown</span><span class="o">=</span>.md,.mkd,.markdown
</span></span></code></pre></div><p>查看ack配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ack --dump
</span></span></code></pre></div><h2 id="git">Git</h2>
<h3 id="安装和配置">安装和配置</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install git
</span></span></code></pre></div><p>查看git命令位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">which git
</span></span></code></pre></div><p>配置用户名和邮箱：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;Your Name Here&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email <span class="s2">&#34;your_email@youremail.com&#34;</span>
</span></span></code></pre></div><ul>
<li>这些配置会加到 ~/.gitconfig</li>
</ul>
<p>为了将代码推送到 GitHub 仓库，建议使用HTTPS方法。如果你不想每次都输入用户名和密码的话，可以按照此 <a href="https://help.github.com/articles/set-up-git">描述</a> 说的那样，运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global credential.helper osxkeychain
</span></span></code></pre></div><p>设置默认分支名称为main：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global init.defaultBranch main
</span></span></code></pre></div><p>配置ssh秘钥：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-keygen -t rsa -C <span class="s2">&#34;your_email@example.com&#34;</span>
</span></span></code></pre></div><p>添加 SSH 公钥到 ssh-agent ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">ssh-add -K ~/.ssh/id_rsa
</span></span></code></pre></div><p>添加SSH 公钥到 GitHub 账户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pbcopy &lt; ~/.ssh/id_rsa.pub
</span></span></code></pre></div><p>打开 <a href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a>，然后添加。</p>
<h2 id="bash-completion">Bash Completion</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install bash-completion
</span></span></code></pre></div><p>查看更多 completion ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ brew search completion
</span></span></code></pre></div><p>然后，安装，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install docker-completion
</span></span></code></pre></div><h2 id="vim">Vim</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install vim
</span></span></code></pre></div><h3 id="vimrc">vimrc</h3>
<p>下载 <a href="https://github.com/amix/vimrc">The Ultimate vimrc</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/amix/vimrc.git ~/.vim_runtime
</span></span></code></pre></div><p>安装 complete 版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh ~/.vim_runtime/install_awesome_vimrc.sh
</span></span></code></pre></div><p>安装 bash 版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh ~/.vim_runtime/install_basic_vimrc.sh
</span></span></code></pre></div><p>更新 vimrc ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> ~/.vim_runtime <span class="o">&amp;&amp;</span> git pull --rebase <span class="o">&amp;&amp;</span> <span class="nb">cd</span> -
</span></span></code></pre></div><h3 id="maximum-awesome">Maximum Awesome</h3>
<p>安装<a href="https://github.com/square/maximum-awesome">Maximum Awesome</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/square/maximum-awesome.git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> maximum-awesome
</span></span><span class="line"><span class="cl">rake
</span></span></code></pre></div><h2 id="visual-studio-code">Visual Studio Code</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install --cask visual-studio-code
</span></span></code></pre></div><p>从命令行启动vscode：</p>
<ul>
<li>启动vscode，输入 <strong>Command Palette</strong> (Cmd+Shift+P)，查找 <strong>Shell Command: Install &lsquo;code&rsquo; command in PATH</strong></li>
<li>重启 vscode 使环境变量生效</li>
<li>在命令行输入 <code>code .</code>，在当前目录启动 vscode，也可以这样打开文件 <code>code myfile.txt</code></li>
</ul>
<p>安装扩展：</p>
<ul>
<li>JavaScript
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier</a></li>
</ul>
</li>
<li>SQL
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=bradymholt.pgformatter">PostgreSQL formatter</a></li>
</ul>
</li>
<li>Markdown
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">Markdown Preview</a></li>
</ul>
</li>
<li>GitLens
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a></li>
</ul>
</li>
<li>Docker
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker">Docker</a></li>
</ul>
</li>
<li>JSON
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=quicktype.quicktype">Paste JSON as Code</a></li>
</ul>
</li>
<li>Live Server
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a></li>
</ul>
</li>
<li>VS Code Icons
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">vscode-icons</a></li>
</ul>
</li>
</ul>
<h2 id="jetbrains-ides">JetBrains IDEs</h2>
<p>下载地址：https://www.jetbrains.com/products.html?fromMenu#type=ide</p>
<p>破解插件：https://github.com/osvax/ide-eval-resetter</p>
<h2 id="vagrant">Vagrant</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install --cask virtualbox
</span></span><span class="line"><span class="cl">brew install --cask vagrant
</span></span><span class="line"><span class="cl">brew install --cask vagrant-manager
</span></span></code></pre></div><p>使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vagrant box add precise64 https://vagrantcloud.com/hashicorp/boxes/precise64/versions/1.1.0/providers/virtualbox.box
</span></span><span class="line"><span class="cl">vagrant init precise64
</span></span><span class="line"><span class="cl">vagrant up
</span></span><span class="line"><span class="cl">vagrant ssh
</span></span><span class="line"><span class="cl">vagrant halt
</span></span></code></pre></div><h2 id="mysql">MySQL</h2>
<p>安装mysql：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install mysql
</span></span></code></pre></div><p>如果想安装mysql5.7：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install mysql@5.7
</span></span></code></pre></div><p>使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#设置开机启动</span>
</span></span><span class="line"><span class="cl">brew services start mysql
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#启动</span>
</span></span><span class="line"><span class="cl">mysql.server start
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#停止</span>
</span></span><span class="line"><span class="cl">mysql.server stop
</span></span></code></pre></div><p>使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#登录mysql</span>
</span></span><span class="line"><span class="cl">mysql -hlocalhost -p3306 -uroot -p123456
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#添加远程登录用户</span>
</span></span><span class="line"><span class="cl">CREATE USER <span class="s1">&#39;test&#39;</span>@<span class="s1">&#39;%&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="s1">&#39;123456&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">GRANT ALL PRIVILEGES ON *.* TO <span class="s1">&#39;test&#39;</span>@<span class="s1">&#39;%&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#查看编码</span>
</span></span><span class="line"><span class="cl">showvariables like <span class="s2">&#34;%char%&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">flush privileges<span class="p">;</span>
</span></span></code></pre></div><p>安装 sequel-pro：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install --cask sequel-pro
</span></span></code></pre></div><h2 id="postgresql">PostgreSQL</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install postgres
</span></span></code></pre></div><p>查看版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">postgres -V
</span></span></code></pre></div><p>使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#启动</span>
</span></span><span class="line"><span class="cl">pg_ctl -D /usr/local/var/postgres start
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#开启启动</span>
</span></span><span class="line"><span class="cl">brew services start postgresql
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#停止</span>
</span></span><span class="line"><span class="cl">pg_ctl -D /usr/local/var/postgres stop
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#重启</span>
</span></span><span class="line"><span class="cl">pg_ctl -D /usr/local/var/postgres restart
</span></span><span class="line"><span class="cl">brew services restart postgresql
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#启动 PostgreSQL console</span>
</span></span><span class="line"><span class="cl">psql
</span></span></code></pre></div><p>安装客户端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install psequel
</span></span></code></pre></div><h2 id="java">Java</h2>
<p>下载 Oracle JDK：</p>
<ul>
<li><a href="http://support.apple.com/downloads/DL1572/en_US/JavaForOSX2013-05.dmg">jdk6</a></li>
<li><a href="http://download.oracle.com/otn-pub/java/jdk/7u60-b19/jdk-7u60-macosx-x64.dmg">jdk7</a></li>
</ul>
<p>设置 java_home 为 1.8:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;export JAVA_HOME=$(/usr/libexec/java_home -v 1.8) &#39;</span> &gt;&gt; ~/.zshrc
</span></span></code></pre></div><p>安装OpenJDK：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install openjdk
</span></span></code></pre></div><h3 id="sdkman">SDKMAN</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> curl -s <span class="s2">&#34;https://get.sdkman.io&#34;</span> <span class="p">|</span> bash
</span></span></code></pre></div><p>安装complete：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.sdkman/bin/sdkman-init.sh&#34;</span>
</span></span></code></pre></div><p>查看版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sdk version
</span></span></code></pre></div><p>使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#安装jdk</span>
</span></span><span class="line"><span class="cl">sdk install java
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#安装scala</span>
</span></span><span class="line"><span class="cl">sdk install scala 2.12.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#卸载</span>
</span></span><span class="line"><span class="cl">sdk uninstall scala 2.11.6
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#查看</span>
</span></span><span class="line"><span class="cl">sdk list
</span></span></code></pre></div><h2 id="maven">Maven</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install maven
</span></span></code></pre></div><h2 id="nodejs">Node.js</h2>
<p>安装node：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install node
</span></span></code></pre></div><h3 id="nvm">nvm</h3>
<p>安装nvm：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install nvm
</span></span></code></pre></div><p>使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> ~/.bashrc        <span class="c1"># source your bashrc/zshrc to add nvm to PATH</span>
</span></span><span class="line"><span class="cl"><span class="nb">command</span> -v nvm          <span class="c1"># check the nvm use message</span>
</span></span><span class="line"><span class="cl">nvm install node        <span class="c1"># install most recent Node stable version</span>
</span></span><span class="line"><span class="cl">nvm ls                  <span class="c1"># list installed Node version</span>
</span></span><span class="line"><span class="cl">nvm use node            <span class="c1"># use stable as current version</span>
</span></span><span class="line"><span class="cl">nvm ls-remote           <span class="c1"># list all the Node versions you can install</span>
</span></span><span class="line"><span class="cl">nvm <span class="nb">alias</span> default node  <span class="c1"># set the installed stable version as the default Node</span>
</span></span></code></pre></div><h3 id="nvs">nvs</h3>
<p>Linux / macOS 环境通过 Git Clone 对应的项目即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">export</span> <span class="nv">NVS_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.nvs&#34;</span>
</span></span><span class="line"><span class="cl">$ git clone https://github.com/jasongin/nvs --depth<span class="o">=</span><span class="m">1</span> <span class="s2">&#34;</span><span class="nv">$NVS_HOME</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">$ . <span class="s2">&#34;</span><span class="nv">$NVS_HOME</span><span class="s2">/nvs.sh&#34;</span> install
</span></span></code></pre></div><p>在国内由于大家都懂的原因，需要把对应的镜像地址修改下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ nvs remote node https://npm.taobao.org/mirrors/node/
</span></span><span class="line"><span class="cl">$ nvs remote
</span></span></code></pre></div><p>通过以下命令，即可非常简单的安装 Node.js 最新的 LTS 版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装最新的 LTS 版本</span>
</span></span><span class="line"><span class="cl">$ nvs add lts
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置为默认版本</span>
</span></span><span class="line"><span class="cl">$ nvs link lts
</span></span></code></pre></div><p>安装其他版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装其他版本尝尝鲜</span>
</span></span><span class="line"><span class="cl">$ nvs add <span class="m">12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看已安装的版本</span>
</span></span><span class="line"><span class="cl">$ nvs ls
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在当前 Shell 切换版本</span>
</span></span><span class="line"><span class="cl">$ nvs use <span class="m">12</span>
</span></span></code></pre></div><p>更多指令参见 <code>nvs --help</code> 。</p>
<h2 id="go">Go</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install go
</span></span></code></pre></div><p>设置环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;export GOPATH=/something-else&#34;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;export PATH=</span><span class="nv">$PATH</span><span class="s2">:</span><span class="k">$(</span>go env GOPATH<span class="k">)</span><span class="s2">/bin&#34;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h2 id="python">Python</h2>
<p>安装python3：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install python
</span></span></code></pre></div><p>安装python2.7：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install python@2
</span></span></code></pre></div><p>升级 setuptools：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install --upgrade setuptools
</span></span><span class="line"><span class="cl">pip install --upgrade pip
</span></span></code></pre></div><h3 id="pyenv">pyenv</h3>
<p>安装<a href="https://github.com/yyuu/pyenv"><code>pyenv</code></a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install pyenv
</span></span></code></pre></div><p>设置环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;eval &#34;$(pyenv init -)&#34;&#39;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="nb">exec</span> <span class="nv">$SHELL</span>
</span></span></code></pre></div><p>查看python版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pyenv install --list
</span></span></code></pre></div><p>安装指定版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pyenv install 2.7.12
</span></span><span class="line"><span class="cl">pyenv install 3.5.2
</span></span></code></pre></div><p>设置全局版本，例如，设置2.7.12 优先级高于3.5.2 ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pyenv global 2.7.12 3.5.2
</span></span><span class="line"><span class="cl">pyenv rehash
</span></span></code></pre></div><p>查看版本优先级：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pyenv versions
</span></span></code></pre></div><h3 id="pip">pip</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl https://bootstrap.pypa.io/get-pip.py &gt; get-pip.py
</span></span><span class="line"><span class="cl">sudo python get-pip.py
</span></span></code></pre></div><h3 id="virtualenv">virtualenv</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install virtualenv
</span></span></code></pre></div><p>使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> my-project/
</span></span><span class="line"><span class="cl">virtualenv venv
</span></span></code></pre></div><p>如果想virtualenv继承全局安装的包，可以执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-BASH" data-lang="BASH"><span class="line"><span class="cl">virtualenv venv --system-site-packages
</span></span></code></pre></div><p>上面命令会创建一个 venv/ 目录，激活配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> venv/bin/activate
</span></span></code></pre></div><p>离开虚拟环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">deactivate
</span></span></code></pre></div><p>安装Virtualenvwrapper：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install virtualenvwrapper
</span></span></code></pre></div><h3 id="numpy-scipy">Numpy-Scipy</h3>
<p>安装<a href="https://sourabhbajaj.com/mac-setup/Python/numpy.html">Numpy-Scipy</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python -m pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose
</span></span></code></pre></div><p>使用 MacPort 安装python3.5：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo port install py35-numpy py35-scipy py35-matplotlib py35-ipython +notebook py35-pandas py35-sympy py35-nose
</span></span></code></pre></div><h3 id="ipython">IPython</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install ipython
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pip install <span class="s1">&#39;ipython[zmq,qtconsole,notebook,test]&#39;</span>
</span></span></code></pre></div><h2 id="heroku">Heroku</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install heroku/brew/heroku
</span></span></code></pre></div><p>配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">heroku login
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir ~/.ssh
</span></span><span class="line"><span class="cl">ssh-keygen -t rsa
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">heroku keys:add
</span></span></code></pre></div><p>使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">cd</span> myapp/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create the app on Heroku</span>
</span></span><span class="line"><span class="cl">$ heroku create myapp
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Deploy it</span>
</span></span><span class="line"><span class="cl">$ git push heroku master
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Check its status</span>
</span></span><span class="line"><span class="cl">$ heroku ps
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Check the logs</span>
</span></span><span class="line"><span class="cl">$ heroku logs -t
</span></span></code></pre></div><h2 id="其他应用">其他应用</h2>
<h3 id="开发工具">开发工具</h3>
<ul>
<li><a href="https://www.google.com/intl/en/chrome/browser/">Google Chrome</a></li>
<li><a href="https://agilebits.com/onepassword">1Password</a>：密码</li>
<li><a href="http://wakaba.c3.cx/s/apps/unarchiver.html">Unarchiver</a>：解压缩软件</li>
<li>百度云网盘</li>
<li>搜狗输入法</li>
<li>Typora</li>
<li>飞书</li>
<li>xmind</li>
<li>PostMan</li>
<li>语雀</li>
<li>TablePlus</li>
<li>V2rayU</li>
<li>Staruml</li>
<li>PicGo</li>
<li>Sublime Text</li>
</ul>
<h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="https://sourabhbajaj.com/mac-setup/">https://sourabhbajaj.com/mac-setup/</a></li>
</ul>
]]></content:encoded></item><item><title>从零开始搭建个人博客</title><link>https://blog.chensoul.com/posts/build-personal-blog-from-zero/</link><pubDate>Thu, 09 Sep 2021 18:14:34 +0800</pubDate><guid>https://blog.chensoul.com/posts/build-personal-blog-from-zero/</guid><description>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。 域名 搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科</description><content:encoded><![CDATA[<p>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。</p>
<h2 id="域名">域名</h2>
<p>搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科上的解释：</p>
<blockquote>
<p><strong>域名</strong>（英语：<strong>Domain Name</strong>），又称<strong>网域</strong>，是由一串用点分隔的名字组成的<a href="https://baike.baidu.com/item/Internet">Internet</a>上某一台<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。</p>
<p>由于<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80/150859">IP地址</a>具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（<a href="https://baike.baidu.com/item/DNS">DNS</a>，Domain Name System）来将域名和<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>相互<a href="https://baike.baidu.com/item/%E6%98%A0%E5%B0%84/20402621">映射</a>，使人更方便地访问<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91/199186">互联网</a>，而不用去记住能够被机器直接读取的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>数串。</p>
</blockquote>
<p>简单来说，IP地址可以标识一台计算机，但是不容易记忆，所以，设计出了域名。而域名就是标识因特网上的一台计算机，由网域名称系统DNS来完成域名和IP之间的映射。</p>
<p>如何注册域名？有很多网站提供域名注册服务，比如国内的：</p>
<ul>
<li><a href="https://www.alibabacloud.com/zh/domain">阿里云</a></li>
<li><a href="https://cloud.tencent.com/act/domainsales">腾讯云</a></li>
<li><a href="https://www.huaweicloud.com/">华为云</a></li>
</ul>
<p>国外的：</p>
<ul>
<li><a href="https://sg.godaddy.com/zh/offers/domain">GoDaddy</a></li>
<li><a href="https://www.namecheap.com/">Namecheap</a></li>
<li><a href="https://console.aws.amazon.com/route53/home?#DomainRegistration:">Amazon</a></li>
</ul>
<p>注册域名的建议：</p>
<ul>
<li>1、建议在正规、出名的网站注册域名，防止网站跑路。我曾经在一个小网站注册了一个域名，使用了几年之后，续期的时候，联系不上对方，导致无法使用该域名，甚至该域名被别人抢注册了。</li>
<li>2、在国内网站注册域名，都需要备案。如果不想备案，请在国外网站注册域名。我的域名 chensoul.com 就是在亚马逊上注册的。一是不想备案，二是对比了上面几个网站，发现亚马逊上的com域名价格相对便宜，所以一次性购买了5年。</li>
<li>3、建议优先注册com域名，域名尽可能的简短并且方便记忆。</li>
</ul>
<p>我曾经注册过的域名：</p>
<ul>
<li>javachen.com、javachen.space、javachen.xyz</li>
<li>huaiu.com</li>
</ul>
<h2 id="服务器">服务器</h2>
<p>注册了域名之后，需要一台服务器运行程序。服务器可以是一台物理机，比如你可以使用自己的电脑作为服务器；也可以是一台虚拟的云服务器，比如在云服务提供商购买一台独立的服务器；也可以使用第三方提供的服务器空间，比如Github上可以部署静态程序。不管哪种方式，服务器都需要有一个公网IP，这样才能在因特网上访问你服务器上部署的程序。有了服务器之后，就可以给服务器公网IP设置域名解析。</p>
<p>我的服务器是在<a href="https://bandwagonhost.com/aff.php?aff=58710">搬瓦工</a>购买的，一年49.99美元。</p>
<p><img src="/images/bwg-plan.png" alt="bwg-plan"></p>
<h2 id="程序">程序</h2>
<h3 id="安装hugo">安装Hugo</h3>
<p><img src="/images/hugo-logo.svg" alt="使用 Hugo 搭建博客"></p>
<p>在 Mac 下安装 Hugo：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install hugo
</span></span></code></pre></div><h3 id="新建站点">新建站点</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo new site chensoul.github.io
</span></span></code></pre></div><p>上述命令会生成一个名为 <code>chensoul.github.io</code> 的文件夹，下面对文件夹结构做个说明：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree chensoul.github.io
</span></span><span class="line"><span class="cl">chensoul.github.io
</span></span><span class="line"><span class="cl">├── archetypes
</span></span><span class="line"><span class="cl">│   └── default.md
</span></span><span class="line"><span class="cl">├── config.toml
</span></span><span class="line"><span class="cl">├── content
</span></span><span class="line"><span class="cl">├── data
</span></span><span class="line"><span class="cl">├── layouts
</span></span><span class="line"><span class="cl">├── static
</span></span><span class="line"><span class="cl">└── themes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">6</span> directories, <span class="m">2</span> files
</span></span></code></pre></div><p>新建的站点，还没有加入 Git 版本管理，进入到这个目录下，执行一下如下命令，完成 Git Repo 的初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> chensoul.github.io
</span></span><span class="line"><span class="cl">git init . 
</span></span></code></pre></div><p>新建站点后，我们开始添加主题。</p>
<h3 id="添加主题">添加主题</h3>
<p>在 Hugo 的官网上 <a href="https://themes.gohugo.io/">Hugo Themes</a> 有非常非常多的主题，可以根据自己的喜好选择一个主题。这里，我使用的是 hugo-ivy 主题。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule add https://github.com/yihui/hugo-ivy.git themes/hugo-ivy --depth<span class="o">=</span><span class="m">1</span>
</span></span></code></pre></div><h3 id="启动">启动</h3>
<p>克隆完成后，使用如下命令完成配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 将示例内容拷贝到新建站点中</span>
</span></span><span class="line"><span class="cl">cp -r themes/hugo-ivy/exampleSite/content ./
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将默认配置拷贝到新建站点的配置中</span>
</span></span><span class="line"><span class="cl">cp themes/hugo-ivy/exampleSite/config.toml ./
</span></span></code></pre></div><p>然后启动预览：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo server
</span></span></code></pre></div><p>默认是 <code>1313</code> 端口号，在浏览器中直接访问 http://localhost:1313/ 就可以访问到新建的博客了。</p>
<h2 id="定制化">定制化</h2>
<h3 id="站点信息">站点信息</h3>
<p>配置网站的基本信息，将 config.toml 重命名为 config.yaml，并修改如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">baseURL: <span class="s1">&#39;https://blog.chensoul.com/&#39;</span>
</span></span><span class="line"><span class="cl">languageCode: zh-cn
</span></span><span class="line"><span class="cl">title: 六月陈书
</span></span><span class="line"><span class="cl">theme: hugo-ivy
</span></span><span class="line"><span class="cl">hasCJKLanguage: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">enableEmoji: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">enableRobotsTXT: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">preserveTaxonomyNames: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">footnotereturnlinkcontents: <span class="s2">&#34;↩&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">frontmatter:
</span></span><span class="line"><span class="cl">  date:
</span></span><span class="line"><span class="cl">    - <span class="s1">&#39;:filename&#39;</span>
</span></span><span class="line"><span class="cl">    - <span class="s1">&#39;:default&#39;</span>
</span></span><span class="line"><span class="cl">    - <span class="s1">&#39;:fileModTime&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">permalinks:
</span></span><span class="line"><span class="cl">  post: <span class="s1">&#39;post/:slug&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">menu:
</span></span><span class="line"><span class="cl">  main:
</span></span><span class="line"><span class="cl">    - name: 标签
</span></span><span class="line"><span class="cl">      weight: <span class="m">30</span>
</span></span><span class="line"><span class="cl">      identifier: tags
</span></span><span class="line"><span class="cl">      url: /tags/
</span></span><span class="line"><span class="cl">    - name: 分类
</span></span><span class="line"><span class="cl">      weight: <span class="m">40</span>
</span></span><span class="line"><span class="cl">      identifier: categories
</span></span><span class="line"><span class="cl">      url: /categories/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">params:
</span></span><span class="line"><span class="cl">  author: 六月陈书
</span></span><span class="line"><span class="cl">  description: <span class="s2">&#34;Personal website of Chensoul&#34;</span>
</span></span><span class="line"><span class="cl">  footer: <span class="s2">&#34;&amp;copy; [六月陈书](/) 2002 - {Year}&#34;</span>
</span></span><span class="line"><span class="cl">  customJS:
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;fix-toc.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;center-img.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;right-quote.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;no-highlight.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;fix-footnote.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;math-code.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;hash-notes.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;toggle-notes.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;post-nav.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;external-link.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;alt-title.js&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># - &#34;header-link.js&#34;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  <span class="c1"># options for highlight.js (version, additional languages, and theme)</span>
</span></span><span class="line"><span class="cl">  highlightjsVersion: <span class="s2">&#34;9.12.0&#34;</span>
</span></span><span class="line"><span class="cl">  highlightjsCDN: <span class="s2">&#34;//cdnjs.cloudflare.com/ajax/libs&#34;</span>
</span></span><span class="line"><span class="cl">  highlightjsLang: <span class="o">[</span><span class="s2">&#34;yaml&#34;</span>, <span class="s2">&#34;bash&#34;</span>, <span class="s2">&#34;java&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">  highlightjsTheme: <span class="s2">&#34;github&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">blackfriday:
</span></span><span class="line"><span class="cl">    extensionsmask: <span class="o">[</span><span class="s2">&#34;noIntraEmphasis&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">    fractions: <span class="nb">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">markup:
</span></span><span class="line"><span class="cl">  highlight:
</span></span><span class="line"><span class="cl">    codeFences: <span class="nb">false</span>
</span></span><span class="line"><span class="cl">  goldmark:
</span></span><span class="line"><span class="cl">    renderer:
</span></span><span class="line"><span class="cl">      unsafe: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">    parser:
</span></span><span class="line"><span class="cl">      autoHeadingIDType: blackfriday
</span></span><span class="line"><span class="cl">  tableOfContents:
</span></span><span class="line"><span class="cl">    startLevel: <span class="m">1</span>
</span></span></code></pre></div><h3 id="文章链接">文章链接</h3>
<p>配置文章标题使用从文件中解析得到的slug，这里不要日期：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>permalinks<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#post = &#34;/:year/:month/:day/:slug&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">post</span> <span class="o">=</span> <span class="s2">&#34;:slug&#34;</span>
</span></span></code></pre></div><p><strong>注意：</strong></p>
<p>上面的slug来自文章的md文件顶部frontmatter的定义，例如这篇文章：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">title: <span class="s2">&#34;从零开始搭建个人博客&#34;</span>
</span></span><span class="line"><span class="cl">slug: <span class="s2">&#34;build-personal-blog-hand-by-hand&#34;</span>
</span></span><span class="line"><span class="cl">date: 2021-09-09T18:14:34+08:00
</span></span><span class="line"><span class="cl">tags: <span class="o">[</span>mac<span class="o">]</span>
</span></span><span class="line"><span class="cl">categories: <span class="o">[</span>技术<span class="o">]</span>
</span></span></code></pre></div><p>如果不想在每个人文章里面定义slug，则可以使用文章的标题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">posts</span> <span class="o">=</span> <span class="s2">&#34;:filename&#34;</span>
</span></span></code></pre></div><p>Hugo的文章都在content/post目录，为了方便查找，我们可以创建一些子目录对md文件进行分类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">content/post
</span></span><span class="line"><span class="cl">└── tech
</span></span><span class="line"><span class="cl">    ├── Mac开发环境配置.md
</span></span><span class="line"><span class="cl">    └── 从零开始搭建博客.md
</span></span></code></pre></div><p>请注意：</p>
<ul>
<li>md文件名称是不包括日期的</li>
<li>md文件名就是文章的名称</li>
<li>这样组织文件和文件夹的好处是：将来可以把所有的文章打包成zip包文件上传到其他平台，比如语雀、印象笔记。当然，这时候md文件中最上面的frontmatter部分是不需要的，我们可以使用一些脚本去除他们。也就是类似下面这部分内容。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;从零开始搭建个人博客&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">slug</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;build-personal-blog-hand-by-hand&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">date</span><span class="p">:</span><span class="w"> </span><span class="ld">2021-09-09T18:14:34</span><span class="m">+08</span><span class="p">:</span><span class="m">00</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tags</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">mac]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">categories</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">技术]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span></code></pre></div><blockquote>
<p>扩展：</p>
<p>有没有可能，在每篇文章的md文件中不定义frontmatter？例如：title 从md文件名称读取；date和lastmod从文件本身的创建时间读取；keywords通过对文件内容进行分词，找出出现频次最高的三个词；tags和categories 从md文件的目录读取，等等。</p>
</blockquote>
<p>修改 frontmatter 中 date 变量的定义，首先从文件名中解析日期，同时也会解析 slug；失败时再从 frontmatter 中解析，更多用法可参考<a href="https://gohugo.io/getting-started/configuration/#configure-dates">官方文档 Configure Dates</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>frontmatter<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">date</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;:filename&#34;</span>, <span class="s2">&#34;:default&#34;</span>, <span class="s2">&#34;:fileModTime&#34;</span><span class="o">]</span>
</span></span></code></pre></div><h3 id="rss全文输出">RSS全文输出</h3>
<p>默认 Hugo 生成的 RSS 链接为 <code>/index.xml</code>，只会把文章的摘要输出到 RSS，如果想输出全文，可以修改 RSS <a href="https://gohugo.io/templates/rss/#the-embedded-rss-xml">模板</a>。</p>
<p>在创建layouts目录创建_default目录，并在这个目录下面创建 rss.xml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p layouts/_default
</span></span><span class="line"><span class="cl">touch layouts/_default/rss.xml
</span></span></code></pre></div><p>rss.xml内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">{{- $pctx := . -}}
</span></span><span class="line"><span class="cl">{{- if .IsHome -}}{{ $pctx = .Site }}{{- end -}}
</span></span><span class="line"><span class="cl">{{- $pages := slice -}}
</span></span><span class="line"><span class="cl">{{- if or $.IsHome $.IsSection -}}
</span></span><span class="line"><span class="cl">{{- $pages = $pctx.RegularPages -}}
</span></span><span class="line"><span class="cl">{{- else -}}
</span></span><span class="line"><span class="cl">{{- $pages = $pctx.Pages -}}
</span></span><span class="line"><span class="cl">{{- end -}}
</span></span><span class="line"><span class="cl">{{- $limit := .Site.Config.Services.RSS.Limit -}}
</span></span><span class="line"><span class="cl">{{- if ge $limit 1 -}}
</span></span><span class="line"><span class="cl">{{- $pages = $pages | first $limit -}}
</span></span><span class="line"><span class="cl">{{- end -}}
</span></span><span class="line"><span class="cl">{{- printf &#34;<span class="cp">&lt;?xml version=\&#34;1.0\&#34; encoding=\&#34;utf-8\&#34; standalone=\&#34;yes\&#34;?&gt;</span>&#34; | safeHTML }}
</span></span><span class="line"><span class="cl"><span class="nt">&lt;rss</span> <span class="na">version=</span><span class="s">&#34;2.0&#34;</span> <span class="na">xmlns:atom=</span><span class="s">&#34;http://www.w3.org/2005/Atom&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;channel&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;title&gt;</span>{{ if eq  .Title  .Site.Title }}{{ .Site.Title }}{{ else }}{{ with .Title }}{{.}} on {{ end }}{{ .Site.Title }}{{ end }}<span class="nt">&lt;/title&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;link&gt;</span>{{ .Permalink }}<span class="nt">&lt;/link&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;description&gt;</span>Recent content {{ if ne  .Title  .Site.Title }}{{ with .Title }}in {{.}} {{ end }}{{ end }}on {{ .Site.Title }}<span class="nt">&lt;/description&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;generator&gt;</span>Hugo -- gohugo.io<span class="nt">&lt;/generator&gt;</span>{{ with .Site.LanguageCode }}
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;language&gt;</span>{{.}}<span class="nt">&lt;/language&gt;</span>{{end}}{{ with .Site.Author.email }}
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;managingEditor&gt;</span>{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}<span class="nt">&lt;/managingEditor&gt;</span>{{end}}{{ with .Site.Author.email }}
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;webMaster&gt;</span>{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}<span class="nt">&lt;/webMaster&gt;</span>{{end}}{{ with .Site.Copyright }}
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;copyright&gt;</span>{{.}}<span class="nt">&lt;/copyright&gt;</span>{{end}}{{ if not .Date.IsZero }}
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;lastBuildDate&gt;</span>{{ .Date.Format &#34;Mon, 02 Jan 2006 15:04:05 -0700&#34; | safeHTML }}<span class="nt">&lt;/lastBuildDate&gt;</span>{{ end }}
</span></span><span class="line"><span class="cl">    {{- with .OutputFormats.Get &#34;RSS&#34; -}}
</span></span><span class="line"><span class="cl">    {{ printf &#34;<span class="nt">&lt;atom:link</span> <span class="na">href=</span><span class="s">%q</span> <span class="na">rel=</span><span class="s">\&#34;self\&#34;</span> <span class="na">type=</span><span class="s">%q</span> <span class="nt">/&gt;</span>&#34; .Permalink .MediaType | safeHTML }}
</span></span><span class="line"><span class="cl">    {{- end -}}
</span></span><span class="line"><span class="cl">    {{ range $pages }}
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;item&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;title&gt;</span>{{ .Title }}<span class="nt">&lt;/title&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;link&gt;</span>{{ .Permalink }}<span class="nt">&lt;/link&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;pubDate&gt;</span>{{ .Date.Format &#34;Mon, 02 Jan 2006 15:04:05 -0700&#34; | safeHTML }}<span class="nt">&lt;/pubDate&gt;</span>
</span></span><span class="line"><span class="cl">      {{ with .Site.Author.email }}<span class="nt">&lt;author&gt;</span>{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}<span class="nt">&lt;/author&gt;</span>{{end}}
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;guid&gt;</span>{{ .Permalink }}<span class="nt">&lt;/guid&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;description&gt;</span>{{ .Content | html }}<span class="nt">&lt;/description&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/item&gt;</span>
</span></span><span class="line"><span class="cl">    {{ end }}
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/channel&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/rss&gt;</span>
</span></span></code></pre></div><h2 id="部署">部署</h2>
<h3 id="github-actions部署">GitHub Actions部署</h3>
<p><strong>1、首先在github里创建一个仓库：chensoul.github.io</strong></p>
<p><strong>2、将本地文件提交到github</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> chensoul.github.io
</span></span><span class="line"><span class="cl">git init .
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;# chensoul.github.io&#34;</span> &gt;&gt; README.md
</span></span><span class="line"><span class="cl">git remote add origin git@github.com:chensoul/chensoul.github.io.git
</span></span></code></pre></div><p><strong>3、添加 .gitignore 和 .gitmodules</strong></p>
<p>.gitignore 文件如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">_theme_packages/*
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Thumbs.db
</span></span><span class="line"><span class="cl">.DS_Store
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">!.gitkeep
</span></span><span class="line"><span class="cl">.rbenv-version
</span></span><span class="line"><span class="cl">.rvmrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">*.log
</span></span><span class="line"><span class="cl">node_modules
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">public
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">db.json
</span></span><span class="line"><span class="cl">/resources
</span></span></code></pre></div><p><strong>4、将本地代码推送到仓库</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git commit -m <span class="s2">&#34;first commit&#34;</span>
</span></span><span class="line"><span class="cl">git push -u origin main
</span></span></code></pre></div><p><strong>5、创建 GitHub Actions 的 workflow</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p .github/workflows
</span></span><span class="line"><span class="cl">touch .github/workflows/gh-page.yml
</span></span></code></pre></div><p>gh-page.yml内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">timeout-minutes</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0.83.1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">if</span><span class="p">:</span><span class="w"> </span><span class="l">github.ref == &#39;refs/heads/hugo&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_branch</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span></code></pre></div><p>上面的工作流是在 hugo 分支上触发，当有代码提交时候，会运行hugo命令生成静态文件（public目录），并且将他们推送到main分支。</p>
<p>所以，我们需要基于当前分支创建一个新分支hugo，并且推送到远程仓库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch hugo
</span></span><span class="line"><span class="cl">git checkout hugo
</span></span><span class="line"><span class="cl">git push origin hugo
</span></span></code></pre></div><p><strong>6、修改代码，推送到仓库，触发工作流</strong></p>
<p>在本地修改某个文件，提交代码，然后在 github <a href="https://github.com/chensoul/chensoul.github.io/actions">网站</a> 查看工作流</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git push origin hugo
</span></span></code></pre></div><p>另外，我们还可以把 hugo 分支设为默认分支。</p>
<p><strong>7、设置自定义域名</strong></p>
<p>参考<a href="https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-a-subdomain">管理 GitHub Pages 站点的自定义域</a>，添加一个自定义域名：blog.chensoul.com：</p>
<p><img src="/images/github-page-settings.png" alt="github-page-settings"></p>
<p>或者，在仓库的 static 目录创建一个CNAME文件，内容为：blog.chensoul.com，然后，保存提交，Github Actions会将该文件推送到main分支。</p>
<p>然后，在亚马逊网站添加 <a href="https://console.aws.amazon.com/route53/v2/hostedzones#">CNAME记录</a>：</p>
<p><img src="/images/amazon-dns-settings.png" alt="amazon-dns-settings"></p>
<p>8、部署到 CloudFlare Pages</p>
<p>参考 <a href="https://hee.ink/p/%E4%BB%8E-github-pages-%E8%BF%81%E7%A7%BB%E5%88%B0-cloudflare-pages-%E7%9A%84%E4%BD%93%E9%AA%8C%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%B0%8F%E8%AE%B0/">从 GitHub Pages 迁移到 CloudFlare Pages 的体验与踩坑小记</a></p>
]]></content:encoded></item></channel></rss>