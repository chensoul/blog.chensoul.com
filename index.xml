<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ChenSoul</title>
    <link>https://blog.chensoul.com/</link>
    <description>Recent content on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 26 Jun 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译]微服务设计模式</title>
      <link>https://blog.chensoul.com/posts/2023/06/26/microservice-design-patterns/</link>
      <pubDate>Mon, 26 Jun 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/26/microservice-design-patterns/</guid>
      <description>基于微服务的应用程序的主要特征在 微服务、单体和 NoOps 中定义。它们是功能分解或领域驱动设计、定义良好的接口、明确发布的接口、单一责任原则和潜在的多</description>
      <content:encoded><![CDATA[<p>基于微服务的应用程序的主要特征在 <a href="http://web.archive.org/web/20190705163602/http://blog.arungupta.me/microservices-monoliths-noops/">微服务、单体和 NoOps</a> 中定义。它们是功能分解或领域驱动设计、定义良好的接口、明确发布的接口、单一责任原则和潜在的多语言。每项服务都是完全自主和全栈的。</p>
<p>因此，更改服务实现不会影响其他服务，因为它们使用定义良好的接口进行通信。这种应用程序有几个优点，但它不是 <a href="http://web.archive.org/web/20190705163602/http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html">免费的午餐</a>，需要在 NoOps 方面付出大量努力。</p>
<p>但是假设您了解构建此类应用程序所需的工作或至少其中的一部分，并且愿意跳槽。你做什么工作？您构建此类应用程序的方法是什么？</p>
<p>是否有任何关于这些微服务如何相互协作的设计模式？</p>
<p>应用程序和团队的功能分解是构建成功的微服务架构的关键。</p>
<p>这允许您实现松耦合（REST 接口）和高内聚（多个服务可以相互组合以定义更高级别的服务或应用程序）。</p>
<p>应用程序的动词（例如 Checkout）或名词（Product）是实现现有应用程序分解的有效方法之一。</p>
<p>例如，产品、目录和结帐可以是三个独立的微服务，然后相互协作以提供完整的购物车体验。</p>
<p>功能分解提供了敏捷性、灵活性、可扩展性和其他能力，但业务目标仍然是创建应用程序。因此，一旦识别出不同的微服务，您如何组合它们以提供应用程序的功能？</p>
<p>本博客将讨论一些关于如何将微服务组合在一起的推荐模式。</p>
<h2 id="聚合微服务设计模式">聚合微服务设计模式</h2>
<p>第一个，也可能是最常见的，是聚合器微服务设计模式。</p>
<p>在其最简单的形式中，聚合器将是一个简单的网页，它调用多个服务来实现应用程序所需的功能。由于每个服务（服务 A、服务 B 和服务 C）都使用轻量级 REST 机制公开，因此网页可以检索数据并相应地处理/显示数据。如果需要某种处理，比如将业务逻辑应用于从各个服务接收的数据，那么您可能有一个 CDI bean 可以转换数据，以便网页可以显示它。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/microservices-aggregator.png" alt="microservices-aggregator"  />
</p>
<p>聚合器的另一个选择是不需要显示，它只是一个更高级别的复合微服务，可以被其他服务使用。</p>
<p>在这种情况下，聚合器只需从每个单独的微服务收集数据，对其应用业务逻辑，然后将其进一步发布为 REST 端点。然后可以由需要它的其他服务使用。</p>
<p>这种设计模式遵循 DRY 原则。</p>
<p>如果有多个服务需要访问服务 A、B 和 C，那么建议将该逻辑抽象为一个复合微服务，并将该逻辑聚合到一个服务中。在此级别进行抽象的一个优点是各个服务，即服务 A、B 和 C，并且可以独立发展，业务需求仍然由组合微服务提供。</p>
<p>请注意，每个单独的微服务都有自己的（可选）缓存和数据库。如果聚合器是一个复合微服务，那么它也可能有自己的缓存和数据库层。</p>
<p>聚合器也可以在 X 轴和 Z 轴上独立缩放。因此，如果它是一个网页，那么您可以启动额外的 Web 服务器，或者如果它是一个使用 Java EE 的复合微服务，那么您可以启动额外的 WildFly 实例来满足不断增长的需求。</p>
<h2 id="代理微服务设计模式">代理微服务设计模式</h2>
<p>代理微服务设计模式是聚合器的一种变体。在这种情况下，客户端不需要进行聚合，但可以根据业务需要调用不同的微服务。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/microservices-proxy.png" alt="microservices-proxy"  />
</p>
<p>就像 Aggregator 一样，Proxy 也可以在 X 轴和 Z 轴上独立扩展。您可能喜欢这样做，因为每个单独的服务都不需要向消费者公开，而是应该通过一个界面。</p>
<p>代理可能是一个哑代理，在这种情况下，它只是将请求委托给其中一项服务。或者，它可能是一个智能代理，在将响应提供给客户端之前应用一些数据转换。一个很好的例子就是可以将不同设备的表示层封装在智能代理中。</p>
<h2 id="链式微服务设计模式">链式微服务设计模式</h2>
<p>链式微服务设计模式对请求产生单一的综合响应。在这种情况下，来自客户端的请求由服务 A 接收，然后服务 A 与服务 B 通信，而服务 B 又可能与服务 C 通信。</p>
<p>所有服务都可能使用同步 HTTP 请求/响应消息传递。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/microservices-chain.png" alt="microservices-chain"  />
</p>
<p>要记住的关键部分是客户端被阻塞，直到完成请求/响应链，即服务&lt;-&gt;服务B和服务B&lt;-&gt;服务C，完成。从服务 B 到服务 C 的请求可能看起来与从服务 A 到服务 B 的请求完全不同。</p>
<p>同样，服务 B 对服务 A 的响应可能看起来与服务 C 对服务 B 的响应完全不同。无论如何，这就是不同服务增加其业务价值的全部要点。</p>
<p>这里要理解的另一个重要方面是不要让链条太长。这一点很重要，因为链的同步特性在客户端看起来像是一个漫长的等待，特别是如果它是一个等待显示响应的网页。</p>
<p>这个阻塞请求/响应有变通方法，并在后续设计模式中讨论。</p>
<p>具有单个微服务的链称为单例链。这可能允许链在以后扩展。</p>
<h2 id="分支微服务设计模式">分支微服务设计模式</h2>
<p>分支微服务设计模式扩展了聚合器设计模式，并允许同时处理来自两个可能互斥的微服务链的响应。此模式还可用于根据业务需求调用不同的链或单个链。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/microservices-branch.png" alt="microservices-branch"  />
</p>
<p>服务 A（网页或复合微服务）可以同时调用两个不同的链，在这种情况下，这类似于聚合器设计模式。或者，服务 A 可以根据从客户端收到的请求仅调用一个链。</p>
<p>这可以使用 JAX-RS 或 Camel 端点的路由进行配置，并且需要动态配置。</p>
<h2 id="共享数据微服务设计模式">共享数据微服务设计模式</h2>
<p>微服务的设计原则之一是自治。这意味着该服务是全栈式的，并且可以控制所有组件——UI、中间件、持久性、事务。这允许服务是多语言的，并使用正确的工具来完成正确的工作。</p>
<p>例如，如果可以使用 NoSQL 数据存储而不是将数据塞入 SQL 数据库中更合适的话。</p>
<p>然而，一个典型的问题，尤其是在从现有的单体应用程序重构时，是数据库规范化，这样每个微服务都有正确数量的数据——仅此而已。</p>
<p>即使在单体应用程序中仅使用 SQL 数据库，对数据库进行非规范化也会导致数据重复，并可能导致不一致。在过渡阶段，一些应用程序可能会受益于共享数据微服务设计模式。</p>
<p>在这种设计模式中，一些微服务（可能在一个链中）可以共享缓存和数据库存储。</p>
<p>这只有在两种服务之间存在强耦合时才有意义。有些人可能认为这是一种反模式，但在某些情况下业务需求可能需要遵循这一点。对于基于微服务设计的全新应用程序，这肯定是一种反模式。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/microservices-branch-shared-data.png" alt="microservices-branch-shared-data"  />
</p>
<p>这也可以看作是一个过渡阶段，直到微服务过渡到完全自主。</p>
<h2 id="异步消息微服务设计模式">异步消息微服务设计模式</h2>
<p>虽然 REST 设计模式非常普遍且易于理解，但它具有同步和阻塞的局限性。</p>
<p>可以实现异步，但这是以特定于应用程序的方式完成的。因此，一些微服务架构可能会选择使用消息队列而不是 REST 请求/响应。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/microservices-async-messaging.png" alt="microservices-async-messaging"  />
</p>
<p>在这种设计模式中，服务 A 可以同步调用服务 C，然后服务 C 使用共享消息队列与服务 B 和 D 异步通信。</p>
<p>服务 A -&gt; 服务 C 通信可能是异步的，可能使用 WebSockets，以实现所需的可伸缩性。</p>
<p>可以使用 REST 请求/响应和发布/订阅消息传递的组合来完成业务需求。</p>
<p><a href="http://web.archive.org/web/20190705163602/https://www.voxxed.com/blog/2015/04/coupling-versus-autonomy-in-microservices/">Coupling vs Autonomy in Microservices</a> 是一本关于为您的微服务选择哪种消息传递模式的好读物。</p>
<p>希望您发现这些设计模式很有用。</p>
<p>您使用什么微服务设计模式？</p>
<p>善于交际，分享！</p>
<p>原文链接：<a href="http://web.archive.org/web/20190705163602/http://blog.arungupta.me/microservice-design-patterns/">http://web.archive.org/web/20190705163602/http://blog.arungupta.me/microservice-design-patterns/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Aggregator Microservices</title>
      <link>https://blog.chensoul.com/posts/2023/06/26/java-design-patterns-aggregator-microservices/</link>
      <pubDate>Mon, 26 Jun 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/26/java-design-patterns-aggregator-microservices/</guid>
      <description>本文主要介绍 Aggregator Microservices 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计</description>
      <content:encoded><![CDATA[<p>本文主要介绍 Aggregator Microservices 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="意图">意图</h2>
<p>用户对聚合器服务进行一次调用，然后聚合器将调用每个相关的微服务。</p>
<blockquote>
<p>Aggregator Microservices 是一种微服务架构模式，用于解决大型分布式系统中的数据聚合问题。该模式通常用于有多个数据源的场景，例如电子商务网站中的产品列表页面，其中需要从多个服务中获取产品信息并组合在一起显示。</p>
<p>Aggregator Microservices 模式包括一个聚合器服务和多个后端服务。聚合器服务负责从多个后端服务中收集数据，并将数据组合成一个聚合的响应。后端服务则负责提供特定的数据源，例如产品信息、库存信息、价格信息等。</p>
</blockquote>
<h2 id="解释">解释</h2>
<p>真实世界例子</p>
<blockquote>
<p>我们的网络市场需要有关产品及其当前库存的信息。 它调用聚合服务，聚合服务依次调用产品信息微服务和产品库存微服务，返回组合信息。</p>
</blockquote>
<p>通俗地说</p>
<blockquote>
<p>聚合器微服务从各种微服务中收集数据，并返回一个聚合数据以进行处理。</p>
</blockquote>
<p>Stack Overflow上说</p>
<blockquote>
<p>聚合器微服务调用多个服务以实现应用程序所需的功能。</p>
</blockquote>
<p><strong>程序示例</strong></p>
<p>让我们从数据模型开始。 这是我们的<code>产品</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">int</span> <span class="n">productInventories</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// getters and setters -&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>接下来，我们将介绍我们的聚合器微服务。 它包含用于调用相应微服务的客户端<code>ProductInformationClient</code>和<code> ProductInventoryClient</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Aggregator</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Resource</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">ProductInformationClient</span> <span class="n">informationClient</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Resource</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">ProductInventoryClient</span> <span class="n">inventoryClient</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">&#34;/product&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Product</span> <span class="nf">getProduct</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">var</span> <span class="n">product</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Product</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">var</span> <span class="n">productTitle</span> <span class="o">=</span> <span class="n">informationClient</span><span class="o">.</span><span class="na">getProductTitle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">var</span> <span class="n">productInventory</span> <span class="o">=</span> <span class="n">inventoryClient</span><span class="o">.</span><span class="na">getProductInventories</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//Fallback to error message
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">product</span><span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="n">requireNonNullElse</span><span class="o">(</span><span class="n">productTitle</span><span class="o">,</span> <span class="s">&#34;Error: Fetching Product Title Failed&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//Fallback to default error inventory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">product</span><span class="o">.</span><span class="na">setProductInventories</span><span class="o">(</span><span class="n">requireNonNullElse</span><span class="o">(</span><span class="n">productInventory</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">product</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这是产品信息微服务的精华实现。 库存微服务类似，它只返回库存计数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InformationController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/information&#34;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getProductTitle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;The Product Title.&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在调用我们的聚合器 REST API 会返回产品信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl http://localhost:50004/product
</span></span><span class="line"><span class="cl"><span class="o">{</span><span class="s2">&#34;title&#34;</span>:<span class="s2">&#34;The Product Title.&#34;</span>,<span class="s2">&#34;productInventories&#34;</span>:5<span class="o">}</span>
</span></span></code></pre></div><h2 id="特点">特点</h2>
<p>以下是该模式的一些关键特点：</p>
<ul>
<li>多个后端服务：Aggregator Microservices 模式通常涉及多个后端服务，每个后端服务负责提供特定类型的数据。</li>
<li>数据聚合：聚合器服务负责从多个后端服务中收集数据，并将数据组合成一个聚合的响应。</li>
<li>透明的组合：聚合器服务应该尽可能透明地组合数据，使其对调用方看起来像是一个单一的数据源。</li>
<li>异步通信：由于后端服务可能位于不同的网络位置，聚合器服务通常使用异步通信来收集数据。</li>
</ul>
<p>Aggregator Microservices 模式可以带来许多好处，例如：</p>
<ul>
<li>可伸缩性：由于聚合器服务可以并行地从多个后端服务中收集数据，因此该模式可以通过增加后端服务来实现可伸缩性。</li>
<li>低耦合性：后端服务和聚合器服务之间的低耦合性使得系统更加灵活，可以更轻松地添加、修改或删除后端服务。</li>
<li>可定制性：聚合器服务可以根据需要自定义数据聚合的逻辑，以满足特定的业务需求。</li>
</ul>
<h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/aggregator-service-4c5a6036.png" alt="alt text"  />
</p>
<h2 id="适用性">适用性</h2>
<p>Aggregator Microservices 模式可以应用于各种不同的场景，以下是一些常见的应用：</p>
<ol>
<li>电子商务平台：在电子商务平台中，通常需要从多个供应商那里获取产品信息和价格，并将其聚合到一个统一的产品列表中。Aggregator Microservices 可以用来处理这些数据源，并将数据聚合到一个共同的产品列表中。</li>
<li>新闻聚合平台：在新闻聚合平台中，需要从不同的新闻来源获取新闻内容，并将其聚合到一个统一的新闻列表中。Aggregator Microservices 可以用来处理这些新闻来源，并将新闻内容聚合到一个共同的新闻列表中。</li>
<li>金融数据分析：在金融数据分析中，需要从多个数据源中获取数据，例如股票市场数据、货币汇率数据、经济指标数据等，并将数据聚合到一个统一的数据分析工具中。Aggregator Microservices 可以用来处理这些数据源，并将数据聚合到一个共同的数据分析工具中。</li>
<li>物联网平台：在物联网平台中，需要从多个传感器获取数据，并将其聚合到一个统一的数据中心中。Aggregator Microservices 可以用来处理这些传感器数据源，并将数据聚合到一个共同的数据中心中。</li>
</ol>
<p>Aggregator Microservices 可以使用多种实现方式来实现数据聚合，以下是一些常见的实现方式：</p>
<ol>
<li>同步阻塞方式：在这种方式下，聚合器服务按照顺序从多个后端服务中收集数据，每次收集完一个服务的数据后再收集下一个服务的数据，直到所有数据都被收集完毕。这种方式的缺点是效率较低，因为所有操作都是同步阻塞的。</li>
<li>异步非阻塞方式：在这种方式下，聚合器服务使用异步非阻塞的方式从多个后端服务中收集数据，这可以提高效率和性能。例如，聚合器服务可以使用 Java 8 的 CompletableFuture 和流式 API 来实现异步通信并行收集数据。</li>
<li>数据库方式：在这种方式下，每个后端服务负责将数据写入数据库中，聚合器服务再从数据库中读取数据并进行聚合。这种方式的优点是可以使用数据库的高效查询语句来聚合数据，但缺点是需要额外的数据库管理开销。</li>
<li>消息队列方式：在这种方式下，每个后端服务将数据发送到一个共享的消息队列中，聚合器服务再从队列中获取数据并进行聚合。这种方式的优点是可以实现异步通信，并且可以使用消息队列的高效消息传递机制来实现数据聚合，但缺点是需要额外的消息队列管理开销。</li>
<li>边缘计算方式：在这种方式下，聚合器服务可以在边缘设备中运行，直接从多个传感器或设备中收集数据并进行聚合。这种方式的优点是可以减少数据传输和存储的开销，但缺点是需要处理边缘设备的硬件和软件限制。</li>
</ol>
<p>当使用消息队列方式来实现 Aggregator Microservices 时，可以应用于以下一些实际的场景：</p>
<ol>
<li>
<p>日志聚合：在一个分布式系统中，可能会生成大量的日志数据，如果将所有的日志数据发送到中心服务器上进行聚合，这会导致中心服务器的压力非常大。使用消息队列方式，可以将日志数据发送到消息队列中，再由聚合器服务从消息队列中获取数据来进行聚合，这样可以降低中心服务器的压力，提高系统的可伸缩性和性能。</p>
</li>
<li>
<p>电商平台订单处理：在一个电商平台中，订单数据可能会分散在多个订单系统中，使用消息队列方式，可以将订单数据发送到消息队列中，再由聚合器服务从消息队列中获取数据来进行聚合，这样可以实现订单数据的统一处理，提高系统的可靠性和可维护性。</p>
</li>
<li>
<p>物联网数据聚合：在一个物联网系统中，可能需要从多个传感器中获取数据，并将数据聚合到一个共同的数据中心中。使用消息队列方式，可以将传感器数据发送到消息队列中，再由聚合器服务从消息队列中获取数据来进行聚合，这样可以提高系统的可伸缩性和性能，并且缓解边缘设备的负载压力。</p>
</li>
<li>
<p>实时数据处理：在一个实时数据处理系统中，可能需要从多个数据源中获取数据，并将数据聚合到一个共同的数据处理中心中。使用消息队列方式，可以将实时数据发送到消息队列中，再由聚合器服务从消息队列中获取数据来进行聚合，这样可以实现实时数据的快速处理和分析。</p>
</li>
</ol>
<p>一个异步聚合服务示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 聚合器服务类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AggregatorService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 后端服务列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">BackendService</span><span class="o">&gt;</span> <span class="n">backendServices</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">AggregatorService</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BackendService</span><span class="o">&gt;</span> <span class="n">backendServices</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">backendServices</span> <span class="o">=</span> <span class="n">backendServices</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 聚合数据的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Product</span><span class="o">&gt;</span> <span class="nf">getProducts</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 并行收集数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Product</span><span class="o">&gt;&gt;&gt;</span> <span class="n">futures</span> <span class="o">=</span> <span class="n">backendServices</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">backendService</span> <span class="o">-&gt;</span> <span class="n">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">backendService</span><span class="o">.</span><span class="na">getProducts</span><span class="o">()))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 等待所有异步操作完成并聚合数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">CompletableFuture</span><span class="o">.</span><span class="na">allOf</span><span class="o">(</span><span class="n">futures</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">CompletableFuture</span><span class="o">[</span><span class="n">futures</span><span class="o">.</span><span class="na">size</span><span class="o">()]))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">futures</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">CompletableFuture</span><span class="o">::</span><span class="n">join</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">products</span><span class="o">::</span><span class="n">addAll</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">products</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 后端服务接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BackendService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Product</span><span class="o">&gt;</span> <span class="nf">getProducts</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 后端服务实现类1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BackendServiceA</span> <span class="kd">implements</span> <span class="n">BackendService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Product</span><span class="o">&gt;</span> <span class="nf">getProducts</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 从数据库获取产品信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">products</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="s">&#34;Product A1&#34;</span><span class="o">,</span> <span class="mf">10.0</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">products</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="s">&#34;Product A2&#34;</span><span class="o">,</span> <span class="mf">20.0</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">products</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="s">&#34;Product A3&#34;</span><span class="o">,</span> <span class="mf">30.0</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">products</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 后端服务实现类2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BackendServiceB</span> <span class="kd">implements</span> <span class="n">BackendService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Product</span><span class="o">&gt;</span> <span class="nf">getProducts</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 从API获取产品信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Product</span><span class="o">&gt;</span> <span class="n">products</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">products</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="s">&#34;Product B1&#34;</span><span class="o">,</span> <span class="mf">15.0</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">products</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="s">&#34;Product B2&#34;</span><span class="o">,</span> <span class="mf">25.0</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">products</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 产品类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">price</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Product</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">double</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 省略 getter 和 setter 方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在上述示例代码中，我们定义了一个聚合器服务类 <code>AggregatorService</code>，它包含了多个后端服务接口 <code>BackendService</code> 的实现类 <code>BackendServiceA</code> 和 <code>BackendServiceB</code>。聚合器服务类的 <code>getProducts()</code> 方法负责从多个后端服务中收集产品数据，并将数据组合成一个聚合的响应。在收集数据时，我们使用了 Java 8 的 <code>CompletableFuture</code> 和流式 API 来实现异步通信并行收集数据。最后，我们定义了一个简单的产品类 <code>Product</code>，用于封装产品信息。</p>
<p>Aggregator Microservices 模式已经得到了广泛的应用和支持，以下是一些常见的开源框架和工具，它们提供了 Aggregator Microservices 模式的实现：</p>
<ol>
<li>
<p>Apache Camel：是一个基于 Java 的开源框架，用于快速实现各种企业集成模式（EIP），包括聚合器模式。Apache Camel 提供了多种聚合器组件，例如 Aggregator、Splitter、Resequencer 等，可以灵活地聚合和处理数据。</p>
</li>
<li>
<p>Spring Integration：是 Spring 生态系统中的一个集成框架，也支持 Aggregator Microservices 模式。Spring Integration 提供了多种聚合器组件，例如 Aggregator、Barrier、ReleaseStrategy 等，可以用来聚合和处理消息。</p>
</li>
<li>
<p>Apache Kafka：是一个分布式流处理平台，用于处理高吞吐量的实时数据流，也支持 Aggregator Microservices 模式。Apache Kafka 提供了消息队列和流处理功能，可以用来聚合和处理数据流。</p>
</li>
<li>
<p>RabbitMQ：是一个开源的消息队列系统，支持多种消息协议和消息模式，也支持 Aggregator Microservices 模式。RabbitMQ 提供了多种消息协议和消息模式，可以用来聚合和处理消息。</p>
</li>
<li>
<p>Apache Spark：是一个分布式计算框架，用于处理大规模数据集，也支持 Aggregator Microservices 模式。Apache Spark 提供了多种数据处理和聚合功能，可以用来聚合和处理大规模数据集。</p>
</li>
</ol>
<h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="http://web.archive.org/web/20190705163602/http://blog.arungupta.me/microservice-design-patterns/">Microservice Design Patterns</a></li>
<li><a href="https://www.amazon.com/gp/product/1617294543/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=javadesignpat-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=1617294543&amp;linkId=8b4e570267bc5fb8b8189917b461dc60">Microservices Patterns: With examples in Java</a></li>
<li><a href="https://www.amazon.com/gp/product/B077T7V8RC/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=javadesignpat-20&amp;creative=9325&amp;linkCode=as2&amp;creativeASIN=B077T7V8RC&amp;linkId=c34d204bfe1b277914b420189f09c1a4">Architectural Patterns: Uncover essential patterns in the most indispensable realm of enterprise architecture</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Python模块和包-简介</title>
      <link>https://blog.chensoul.com/posts/2023/06/25/python-modules-packages/</link>
      <pubDate>Sun, 25 Jun 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/25/python-modules-packages/</guid>
      <description>本文探讨了 Python 模块和 Python 包，这两种机制有助于模块化编程。 模块化编程是指将大型、笨重的编程任务分解为单独的、更小的、更易于管理的子任务或模块的过程</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://files.realpython.com/media/Python-Modules-and-Packages-An-Introduction_Watermarked.20936240a94d.jpg" alt="Python Modules &amp;amp; Packages"  />
</p>
<p>本文探讨了 Python 模块和 Python 包，这两种机制有助于模块化编程。</p>
<p>模块化编程是指将大型、笨重的编程任务分解为单独的、更小的、更易于管理的子任务或模块的过程。然后可以像构建块一样将各个模块拼凑在一起以创建更大的应用程序。</p>
<p>在大型应用程序中模块化代码有几个优点：</p>
<ul>
<li>
<p>简单性：模块通常不会专注于手头的整个问题，而是专注于问题的一个相对较小的部分。如果您正在处理单个模块，那么您将有一个较小的问题域来解决问题。这使得开发更容易并且更不容易出错。</p>
</li>
<li>
<p>可维护性：模块通常设计为在不同问题域之间强制执行逻辑边界。如果模块是以最小化相互依赖的方式编写的，那么对单个模块的修改对程序的其他部分产生影响的可能性就会降低。（您甚至可以在不了解该模块之外的应用程序的情况下对该模块进行更改。）这使得由许多程序员组成的团队在大型应用程序上协同工作变得更加可行。</p>
</li>
<li>
<p>可重用性：在单个模块中定义的功能可以很容易地被应用程序的其他部分重用（通过适当定义的接口）。这消除了重复代码的需要。</p>
</li>
<li>
<p>作用域：模块通常定义一个单独的<a href="https://realpython.com/python-namespaces-scope/">名称空间</a>，这有助于避免程序不同区域中标识符之间的冲突。 （<a href="https://realpython.com/zen-of-python/">Python 之禅</a>的信条之一是命名空间是一个非常棒的想法——让我们做更多这样的事情吧！）</p>
</li>
</ul>
<p>函数、模块和包都是 Python 中促进代码模块化的构造。</p>
<h2 id="python-模块概述">Python 模块：概述</h2>
<p>在 Python 中实际上有三种不同的方式来定义模块：</p>
<ul>
<li>
<p>模块可以用 Python 本身编写。</p>
</li>
<li>
<p>模块可以用 C 语言编写并在运行时动态加载，例如 <code>re</code> （<a href="https://realpython.com/regex-python/">正则表达式</a>）模块。</p>
</li>
<li>
<p>内置模块本质上包含在解释器中，例如 <code>itertools</code> 模块。</p>
</li>
</ul>
<p>在所有三种情况下，模块的内容都以相同的方式访问：使用 <code>import</code> 语句。</p>
<p>在这里，重点将主要放在用 Python 编写的模块上。用 Python 编写的模块的妙处在于它们的构建非常简单。</p>
<p>您需要做的就是创建一个包含合法 Python 代码的文件，然后为该文件指定一个带有 <code>.py</code> 扩展名的名称。就是这样！不需要特殊的语法或巫术。</p>
<p>例如，假设您创建了一个名为 <code>mod.py</code> 的文件，其中包含以下内容：</p>
<p>mod.py</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="s2">&#34;If Comrade Napoleon says it, it must be right.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;arg = </span><span class="si">{</span><span class="n">arg</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p><code>mod.py</code> 中定义了几个对象：</p>
<ul>
<li><code>s</code> （字符串）</li>
<li><code>a</code> （列表）</li>
<li><code>foo()</code> （函数）</li>
<li><code>Foo</code> （类）</li>
</ul>
<p>假设 <code>mod.py</code> 位于适当的位置（您很快就会了解更多信息），可以通过导入模块来访问这些对象，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; print<span class="o">(</span>mod.s<span class="o">)</span>
</span></span><span class="line"><span class="cl">If Comrade Napoleon says it, it must be right.
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod.a
</span></span><span class="line"><span class="cl"><span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod.foo<span class="o">([</span><span class="s1">&#39;quux&#39;</span>, <span class="s1">&#39;corge&#39;</span>, <span class="s1">&#39;grault&#39;</span><span class="o">])</span>
</span></span><span class="line"><span class="cl"><span class="nv">arg</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;quux&#39;</span>, <span class="s1">&#39;corge&#39;</span>, <span class="s1">&#39;grault&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">x</span> <span class="o">=</span> mod.Foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; x
</span></span><span class="line"><span class="cl">&lt;mod.Foo object at 0x03C181F0&gt;
</span></span></code></pre></div><h2 id="模块搜索路径">模块搜索路径</h2>
<p>继续上面的例子，我们来看看Python执行语句时会发生什么：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mod</span>
</span></span></code></pre></div><p>当解释器执行上述 <code>import</code> 语句时，它会在由以下来源组装的目录列表中搜索 <code>mod.py</code> ：</p>
<ul>
<li>运行输入脚本的目录或当前目录（如果解释器正在交互式运行）</li>
<li><code>PYTHONPATH</code> 环境变量中包含的目录列表（如果已设置）。 （ <code>PYTHONPATH</code> 的格式取决于操作系统，但应模仿 <code>PATH</code> 环境变量。）</li>
<li>安装 Python 时配置的依赖于安装的目录列表</li>
</ul>
<p>生成的搜索路径可在 Python 变量 <code>sys.path</code> 中访问，该变量是从名为 <code>sys</code> 的模块获取的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import sys
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; sys.path
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;&#39;</span>, <span class="s1">&#39;C:\\Users\\john\\Documents\\Python\\doc&#39;</span>, <span class="s1">&#39;C:\\Python36\\Lib\\idlelib&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;C:\\Python36\\python36.zip&#39;</span>, <span class="s1">&#39;C:\\Python36\\DLLs&#39;</span>, <span class="s1">&#39;C:\\Python36\\lib&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;C:\\Python36&#39;</span>, <span class="s1">&#39;C:\\Python36\\lib\\site-packages&#39;</span><span class="o">]</span>
</span></span></code></pre></div><blockquote>
<p>注意： <code>sys.path</code> 的具体内容取决于安装。几乎可以肯定，上面的内容在您的计算机上看起来会略有不同。</p>
</blockquote>
<p>因此，为确保找到您的模块，您需要执行以下操作之一：</p>
<ul>
<li>将 <code>mod.py</code> 放入输入脚本所在目录或当前目录，如果是交互式的</li>
<li>在启动解释器之前修改 <code>PYTHONPATH</code> 环境变量以包含 <code>mod.py</code> 所在目录
<ul>
<li>或者：将 <code>mod.py</code> 放入 <code>PYTHONPATH</code> 变量中已包含的目录之一</li>
</ul>
</li>
<li>将 <code>mod.py</code> 放入依赖于安装的目录之一，您可能有也可能没有写入权限，具体取决于操作系统</li>
</ul>
<p>实际上还有一个附加选项：您可以将模块文件放在您选择的任何目录中，然后在运行时修改 <code>sys.path</code> 以使其包含该目录。例如，在这种情况下，您可以将 <code>mod.py</code> 放入目录 <code>C:\Users\john</code> 中，然后发出以下语句：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; sys.path.append<span class="o">(</span>r<span class="s1">&#39;C:\Users\john&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; sys.path
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;&#39;</span>, <span class="s1">&#39;C:\\Users\\john\\Documents\\Python\\doc&#39;</span>, <span class="s1">&#39;C:\\Python36\\Lib\\idlelib&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;C:\\Python36\\python36.zip&#39;</span>, <span class="s1">&#39;C:\\Python36\\DLLs&#39;</span>, <span class="s1">&#39;C:\\Python36\\lib&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;C:\\Python36&#39;</span>, <span class="s1">&#39;C:\\Python36\\lib\\site-packages&#39;</span>, <span class="s1">&#39;C:\\Users\\john&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span></code></pre></div><p>导入模块后，您可以使用模块的 <code>__file__</code> 属性确定找到它的位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod.__file__
</span></span><span class="line"><span class="cl"><span class="s1">&#39;C:\\Users\\john\\mod.py&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; import re
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; re.__file__
</span></span><span class="line"><span class="cl"><span class="s1">&#39;C:\\Python36\\lib\\re.py&#39;</span>
</span></span></code></pre></div><p><code>__file__</code> 的目录部分应该是 <code>sys.path</code> 中的目录之一。</p>
<h2 id="import-声明"><code>import</code> 声明</h2>
<p>模块内容可通过 <code>import</code> 语句提供给调用者。 <code>import</code> 语句有多种不同的形式，如下所示。</p>
<h3 id="import-module_name"><code>import &lt;module_name&gt;</code></h3>
<p>最简单的形式是上面已经显示的形式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span>
</span></span></code></pre></div><p>请注意，这不会使调用者直接访问模块内容。每个模块都有自己的私有符号表，作为模块中定义的所有对象的全局符号表。因此，如前所述，模块创建了一个单独的名称空间。</p>
<p>语句 <code>import &lt;module_name&gt;</code> 仅将 <code>&lt;module_name&gt;</code> 放入调用者的符号表中。模块中定义的对象保留在模块的私有符号表中。</p>
<p>对于调用者来说，只有通过点符号以 <code>&lt;module_name&gt;</code> 为前缀时才能访问模块中的对象，如下所示。</p>
<p>在以下 <code>import</code> 语句之后， <code>mod</code> 被放入本地符号表中。因此， <code>mod</code> 在调用者的本地上下文中有意义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod
</span></span><span class="line"><span class="cl">&lt;module <span class="s1">&#39;mod&#39;</span> from <span class="s1">&#39;C:\\Users\\john\\Documents\\Python\\doc\\mod.py&#39;</span>&gt;
</span></span></code></pre></div><p>但是 <code>s</code> 和 <code>foo</code> 保留在模块的私有符号表中，并且在本地上下文中没有意义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; s
</span></span><span class="line"><span class="cl">NameError: name <span class="s1">&#39;s&#39;</span> is not defined
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; foo<span class="o">(</span><span class="s1">&#39;quux&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">NameError: name <span class="s1">&#39;foo&#39;</span> is not defined
</span></span></code></pre></div><p>要在本地上下文中访问，模块中定义的对象名称必须以 <code>mod</code> 为前缀：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; mod.s
</span></span><span class="line"><span class="cl"><span class="s1">&#39;If Comrade Napoleon says it, it must be right.&#39;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod.foo<span class="o">(</span><span class="s1">&#39;quux&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">arg</span> <span class="o">=</span> quux
</span></span></code></pre></div><p>可以在单个 <code>import</code> 语句中指定多个以逗号分隔的模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">import &lt;module_name&gt;<span class="o">[</span>, &lt;module_name&gt; ...<span class="o">]</span>
</span></span></code></pre></div><h3 id="from-module_name-import-names"><code>from &lt;module_name&gt; import &lt;name(s)&gt;</code></h3>
<p><code>import</code> 语句的另一种形式允许将模块中的各个对象直接导入到调用者的符号表中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="o">&lt;</span><span class="n">name</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">&gt;</span>
</span></span></code></pre></div><p>执行上述语句后，可以在调用者的环境中引用 <code>&lt;name(s)&gt;</code> ，而无需使用 <code>&lt;module_name&gt;</code> 前缀：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; from mod import s, foo
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; s
</span></span><span class="line"><span class="cl"><span class="s1">&#39;If Comrade Napoleon says it, it must be right.&#39;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; foo<span class="o">(</span><span class="s1">&#39;quux&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">arg</span> <span class="o">=</span> quux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from mod import Foo
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">x</span> <span class="o">=</span> Foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; x
</span></span><span class="line"><span class="cl">&lt;mod.Foo object at 0x02E3AD50&gt;
</span></span></code></pre></div><p>因为这种形式的 <code>import</code> 将对象名称直接放入调用者的符号表中，因此任何已存在的同名对象都将被覆盖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">a</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;foo&#39;</span>, <span class="s1">&#39;bar&#39;</span>, <span class="s1">&#39;baz&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; a
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;foo&#39;</span>, <span class="s1">&#39;bar&#39;</span>, <span class="s1">&#39;baz&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from mod import a
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; a
</span></span><span class="line"><span class="cl"><span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span></code></pre></div><p>甚至可以不加区别地一次性 <code>import</code> 模块中的所有内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="o">*</span>
</span></span></code></pre></div><p>这会将 <code>&lt;module_name&gt;</code> 中的所有对象的名称放入本地符号表中，但以下划线 ( <code>_</code> ) 字符开头的对象除外。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; from mod import *
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; s
</span></span><span class="line"><span class="cl"><span class="s1">&#39;If Comrade Napoleon says it, it must be right.&#39;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; a
</span></span><span class="line"><span class="cl"><span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; foo
</span></span><span class="line"><span class="cl">&lt;<span class="k">function</span> foo at 0x03B449C0&gt;
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; Foo
</span></span><span class="line"><span class="cl">&lt;class <span class="s1">&#39;mod.Foo&#39;</span>&gt;
</span></span></code></pre></div><p>在大规模生产代码中不一定推荐这样做。这有点危险，因为您正在将名称一起输入到本地符号表中。除非您非常了解它们并且可以确信不会发生冲突，否则您很有可能会无意中覆盖现有名称。</p>
<p>但是，当您只是为了测试或发现目的而使用交互式解释器时，这种语法非常方便，因为它可以让您快速访问模块必须提供的所有内容，而无需进行大量输入。</p>
<h3 id="from-module_name-import-name-as-alt_name"><code>from &lt;module_name&gt; import &lt;name&gt; as &lt;alt_name&gt;</code></h3>
<p>也可以 <code>import</code> 单个对象，但使用备用名称将它们输入到本地符号表中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="k">as</span> <span class="o">&lt;</span><span class="n">alt_name</span><span class="o">&gt;</span><span class="p">[,</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="k">as</span> <span class="o">&lt;</span><span class="n">alt_name</span><span class="o">&gt;</span> <span class="err">…</span><span class="p">]</span>
</span></span></code></pre></div><p>这使得将名称直接放入本地符号表成为可能，但避免与以前存在的名称发生冲突：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">s</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">a</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;foo&#39;</span>, <span class="s1">&#39;bar&#39;</span>, <span class="s1">&#39;baz&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from mod import s as string, a as alist
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; s
</span></span><span class="line"><span class="cl"><span class="s1">&#39;foo&#39;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; string
</span></span><span class="line"><span class="cl"><span class="s1">&#39;If Comrade Napoleon says it, it must be right.&#39;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; a
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;foo&#39;</span>, <span class="s1">&#39;bar&#39;</span>, <span class="s1">&#39;baz&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; alist
</span></span><span class="line"><span class="cl"><span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span></code></pre></div><h3 id="import-module_name-as-alt_name"><code>import &lt;module_name&gt; as &lt;alt_name&gt;</code></h3>
<p>您还可以使用备用名称导入整个模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span> <span class="k">as</span> <span class="o">&lt;</span><span class="n">alt_name</span><span class="o">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import mod as my_module
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; my_module.a
</span></span><span class="line"><span class="cl"><span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; my_module.foo<span class="o">(</span><span class="s1">&#39;qux&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">arg</span> <span class="o">=</span> qux
</span></span></code></pre></div><p>模块内容可以从函数定义中导入。在这种情况下，在调用该函数之前， <code>import</code> 不会发生：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; def bar<span class="o">()</span>:
</span></span><span class="line"><span class="cl">...     from mod import foo
</span></span><span class="line"><span class="cl">...     foo<span class="o">(</span><span class="s1">&#39;corge&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; bar<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">arg</span> <span class="o">=</span> corge
</span></span></code></pre></div><p>然而，Python 3 不允许函数内不加区别地使用 <code>import *</code> 语法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; def bar<span class="o">()</span>:
</span></span><span class="line"><span class="cl">...     from mod import *
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">SyntaxError: import * only allowed at module level
</span></span></code></pre></div><p>最后，带有 <code>except ImportError</code> 子句的 <code>try</code> 语句可用于防止不成功的 <code>import</code> 尝试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; try:
</span></span><span class="line"><span class="cl">...     <span class="c1"># Non-existent module</span>
</span></span><span class="line"><span class="cl">...     import baz
</span></span><span class="line"><span class="cl">... except ImportError:
</span></span><span class="line"><span class="cl">...     print<span class="o">(</span><span class="s1">&#39;Module not found&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Module not found
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; try:
</span></span><span class="line"><span class="cl">...     <span class="c1"># Existing module, but non-existent object</span>
</span></span><span class="line"><span class="cl">...     from mod import baz
</span></span><span class="line"><span class="cl">... except ImportError:
</span></span><span class="line"><span class="cl">...     print<span class="o">(</span><span class="s1">&#39;Object not found in module&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Object not found in module
</span></span></code></pre></div><h2 id="dir-函数"><code>dir()</code> 函数</h2>
<p>内置函数 <code>dir()</code> 返回命名空间中已定义名称的列表。如果没有参数，它会在当前本地符号表中生成按字母顺序排序的名称列表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">qux</span> <span class="o">=</span> <span class="o">[</span>1, 2, 3, 4, 5<span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span>, <span class="s1">&#39;qux&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; class Bar<span class="o">()</span>:
</span></span><span class="line"><span class="cl">...     pass
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">x</span> <span class="o">=</span> Bar<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;Bar&#39;</span>, <span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span>, <span class="s1">&#39;qux&#39;</span>, <span class="s1">&#39;x&#39;</span><span class="o">]</span>
</span></span></code></pre></div><p>请注意上面对 <code>dir()</code> 的第一次调用如何列出解释器启动时自动定义且已在命名空间中的几个名称。当定义新名称（ <code>qux</code> 、 <code>Bar</code> 、 <code>x</code> ）时，它们会出现在 <code>dir()</code> 的后续调用中。</p>
<p>这对于识别 import 语句到底添加到命名空间中的内容非常有用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span>, <span class="s1">&#39;mod&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod.s
</span></span><span class="line"><span class="cl"><span class="s1">&#39;If Comrade Napoleon says it, it must be right.&#39;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod.foo<span class="o">([</span>1, 2, 3<span class="o">])</span>
</span></span><span class="line"><span class="cl"><span class="nv">arg</span> <span class="o">=</span> <span class="o">[</span>1, 2, 3<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from mod import a, Foo
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;Foo&#39;</span>, <span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span>, <span class="s1">&#39;a&#39;</span>, <span class="s1">&#39;mod&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; a
</span></span><span class="line"><span class="cl"><span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">x</span> <span class="o">=</span> Foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; x
</span></span><span class="line"><span class="cl">&lt;mod.Foo object at 0x002EAD50&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from mod import s as string
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;Foo&#39;</span>, <span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span>, <span class="s1">&#39;a&#39;</span>, <span class="s1">&#39;mod&#39;</span>, <span class="s1">&#39;string&#39;</span>, <span class="s1">&#39;x&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; string
</span></span><span class="line"><span class="cl"><span class="s1">&#39;If Comrade Napoleon says it, it must be right.&#39;</span>
</span></span></code></pre></div><p>当给定一个模块名称的参数时， <code>dir()</code> 列出模块中定义的名称：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">(</span>mod<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;Foo&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__cached__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__file__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__name__&#39;</span>, <span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span>, <span class="s1">&#39;a&#39;</span>, <span class="s1">&#39;foo&#39;</span>, <span class="s1">&#39;s&#39;</span><span class="o">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from mod import *
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;Foo&#39;</span>, <span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span>, <span class="s1">&#39;a&#39;</span>, <span class="s1">&#39;foo&#39;</span>, <span class="s1">&#39;s&#39;</span><span class="o">]</span>
</span></span></code></pre></div><h2 id="从脚本执行模块">从脚本执行模块</h2>
<p>任何包含模块的 <code>.py</code> 文件本质上也是一个 Python 脚本，并且没有任何理由不能像脚本一样执行。</p>
<p>这里又是上面定义的 <code>mod.py</code> ：</p>
<p><em>mod.py</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="s2">&#34;If Comrade Napoleon says it, it must be right.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;arg = </span><span class="si">{</span><span class="n">arg</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p>这可以作为脚本运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\U</span>sers<span class="se">\j</span>ohn<span class="se">\D</span>ocuments&gt;python mod.py
</span></span><span class="line"><span class="cl">C:<span class="se">\U</span>sers<span class="se">\j</span>ohn<span class="se">\D</span>ocuments&gt;
</span></span></code></pre></div><p>没有错误，所以它显然有效。当然，这并不是很有趣。正如它所写的，它只定义了对象。它不会对它们做任何事情，也不会生成任何输出。</p>
<p>让我们修改上面的 Python 模块，以便它在作为脚本运行时生成一些输出：</p>
<p>mod.py</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="s2">&#34;If Comrade Napoleon says it, it must be right.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;arg = </span><span class="si">{</span><span class="n">arg</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">foo</span><span class="p">(</span><span class="s1">&#39;quux&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><p>现在应该更有趣了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\U</span>sers<span class="se">\j</span>ohn<span class="se">\D</span>ocuments&gt;python mod.py
</span></span><span class="line"><span class="cl">If Comrade Napoleon says it, it must be right.
</span></span><span class="line"><span class="cl"><span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">arg</span> <span class="o">=</span> quux
</span></span><span class="line"><span class="cl">&lt;__main__.Foo object at 0x02F101D0&gt;
</span></span></code></pre></div><p>不幸的是，现在它在作为模块导入时也会生成输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl">If Comrade Napoleon says it, it must be right.
</span></span><span class="line"><span class="cl"><span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">arg</span> <span class="o">=</span> quux
</span></span><span class="line"><span class="cl">&lt;mod.Foo object at 0x0169AD50&gt;
</span></span></code></pre></div><p>这可能不是您想要的。模块在导入时通常不会生成输出。</p>
<p>如果您能够区分文件何时作为模块加载以及何时作为独立脚本运行，岂不是很好？</p>
<p>祈求，你们就会收到。</p>
<p>当 <code>.py</code> 文件作为模块导入时，Python 会将特殊的 dunder 变量 <code>__name__</code> 设置为模块的名称。但是，如果文件作为独立脚本运行，则 <code>__name__</code> （创造性地）设置为字符串 <code>'__main__'</code> 。利用这一事实，您可以辨别运行时的情况并相应地改变行为：</p>
<p><em>mod.py</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="s2">&#34;If Comrade Napoleon says it, it must be right.&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;arg = </span><span class="si">{</span><span class="n">arg</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Executing as standalone script&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">foo</span><span class="p">(</span><span class="s1">&#39;quux&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><p>现在，如果您作为脚本运行，您将得到输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\U</span>sers<span class="se">\j</span>ohn<span class="se">\D</span>ocuments&gt;python mod.py
</span></span><span class="line"><span class="cl">Executing as standalone script
</span></span><span class="line"><span class="cl">If Comrade Napoleon says it, it must be right.
</span></span><span class="line"><span class="cl"><span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">arg</span> <span class="o">=</span> quux
</span></span><span class="line"><span class="cl">&lt;__main__.Foo object at 0x03450690&gt;
</span></span></code></pre></div><p>但如果您作为模块导入，则不会：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod.foo<span class="o">(</span><span class="s1">&#39;grault&#39;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">arg</span> <span class="o">=</span> grault
</span></span></code></pre></div><p>模块通常设计为能够作为独立脚本运行，以测试模块中包含的功能。这称为单元测试。例如，假设您创建了一个包含阶乘函数的模块 <code>fact.py</code> ，如下所示：</p>
<p>fact.py</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fact</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">n</span> <span class="o">*</span> <span class="n">fact</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">fact</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
</span></span></code></pre></div><p>该文件可以被视为一个模块，并导入 <code>fact()</code> 函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; from fact import fact
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; fact<span class="o">(</span>6<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="m">720</span>
</span></span></code></pre></div><p>但它也可以通过在命令行上传递整数参数来独立运行以进行测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\U</span>sers<span class="se">\j</span>ohn<span class="se">\D</span>ocuments&gt;python fact.py <span class="m">6</span>
</span></span><span class="line"><span class="cl"><span class="m">720</span>
</span></span></code></pre></div><h2 id="重新加载模块">重新加载模块</h2>
<p>出于效率原因，每个解释器会话仅加载一个模块一次。这对于函数和类定义来说很好，它们通常构成了模块的大部分内容。但模块也可以包含可执行语句，通常用于初始化。</p>
<p>请注意，这些语句仅在第一次导入模块时执行。</p>
<p>考虑以下文件 <code>mod.py</code> ：</p>
<p><em>mod.py</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;a =&#39;</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl"><span class="nv">a</span> <span class="o">=</span> <span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod.a
</span></span><span class="line"><span class="cl"><span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span></code></pre></div><p>后续导入时不会执行 <code>print()</code> 语句。 （就此而言，赋值语句也不是，但正如 <code>mod.a</code> 值的最终显示所示，这并不重要。一旦进行赋值，它就会保留。）</p>
<p>如果您对模块进行更改并需要重新加载它，则需要重新启动解释器或使用模块 <code>importlib</code> 中名为 <code>reload()</code> 的函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl"><span class="nv">a</span> <span class="o">=</span> <span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; import mod
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; import importlib
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; importlib.reload<span class="o">(</span>mod<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">a</span> <span class="o">=</span> <span class="o">[</span>100, 200, 300<span class="o">]</span>
</span></span><span class="line"><span class="cl">&lt;module <span class="s1">&#39;mod&#39;</span> from <span class="s1">&#39;C:\\Users\\john\\Documents\\Python\\doc\\mod.py&#39;</span>&gt;
</span></span></code></pre></div><h2 id="python-包">Python 包</h2>
<p>假设您开发了一个非常大的应用程序，其中包含许多模块。随着模块数量的增加，如果将它们转储到一个位置，则很难跟踪所有模块。如果它们具有相似的名称或功能，则尤其如此。</p>
<p>您可能希望有一种对它们进行分组和组织的方法。</p>
<p>包允许使用点表示法对模块名称空间进行分层结构。就像模块有助于避免全局变量名称之间的冲突一样，包也有助于避免模块名称之间的冲突。</p>
<p>创建包非常简单，因为它利用了操作系统固有的分层文件结构。考虑以下安排：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/pkg1.9af1c7aea48f.png" alt="Image of a Python package"  />
</p>
<p>这里有一个名为 <code>pkg</code> 的目录，其中包含两个模块： <code>mod1.py</code> 和 <code>mod2.py</code> 。模块的内容是：</p>
<p><em>mod1.py</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[mod1] foo()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p><em>mod2.py</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">bar</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[mod2] bar()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Bar</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p>给定此结构，如果 <code>pkg</code> 目录位于可以找到它的位置（ <code>sys.path</code> 中包含的目录之一），则可以用点符号引用这两个模块（ <code>pkg.mod1</code> 、 <code>pkg.mod2</code> ) 并使用您已经熟悉的语法导入它们：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span><span class="p">[,</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import pkg.mod1, pkg.mod2
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; pkg.mod1.foo<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod1<span class="o">]</span> foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">x</span> <span class="o">=</span> pkg.mod2.Bar<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; x
</span></span><span class="line"><span class="cl">&lt;pkg.mod2.Bar object at 0x033F7290&gt;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="o">&lt;</span><span class="n">name</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; from pkg.mod1 import foo
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; foo<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod1<span class="o">]</span> foo<span class="o">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="o">&lt;</span><span class="n">name</span><span class="o">&gt;</span> <span class="k">as</span> <span class="o">&lt;</span><span class="n">alt_name</span><span class="o">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; from pkg.mod2 import Bar as Qux
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">x</span> <span class="o">=</span> Qux<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; x
</span></span><span class="line"><span class="cl">&lt;pkg.mod2.Bar object at 0x036DFFD0&gt;
</span></span></code></pre></div><p>您也可以使用这些语句导入模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="o">&lt;</span><span class="n">package_name</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="o">&lt;</span><span class="n">modules_name</span><span class="o">&gt;</span><span class="p">[,</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span> <span class="o">...</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="o">&lt;</span><span class="n">package_name</span><span class="o">&gt;</span> <span class="kn">import</span> <span class="o">&lt;</span><span class="n">module_name</span><span class="o">&gt;</span> <span class="k">as</span> <span class="o">&lt;</span><span class="n">alt_name</span><span class="o">&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; from pkg import mod1
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod1.foo<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod1<span class="o">]</span> foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from pkg import mod2 as quux
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; quux.bar<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod2<span class="o">]</span> bar<span class="o">()</span>
</span></span></code></pre></div><p>从技术上讲，您也可以导入该包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import pkg
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; pkg
</span></span><span class="line"><span class="cl">&lt;module <span class="s1">&#39;pkg&#39;</span> <span class="o">(</span>namespace<span class="o">)</span>&gt;
</span></span></code></pre></div><p>但这收效甚微。虽然严格来说，这是一个语法正确的 Python 语句，但它并没有做任何有用的事情。特别是，它不会将 <code>pkg</code> 中的任何模块放入本地命名空间中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; pkg.mod1
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;&lt;pyshell#34&gt;&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    pkg.mod1
</span></span><span class="line"><span class="cl">AttributeError: module <span class="s1">&#39;pkg&#39;</span> has no attribute <span class="s1">&#39;mod1&#39;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; pkg.mod1.foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;&lt;pyshell#35&gt;&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    pkg.mod1.foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">AttributeError: module <span class="s1">&#39;pkg&#39;</span> has no attribute <span class="s1">&#39;mod1&#39;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; pkg.mod2.Bar<span class="o">()</span>
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;&lt;pyshell#36&gt;&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    pkg.mod2.Bar<span class="o">()</span>
</span></span><span class="line"><span class="cl">AttributeError: module <span class="s1">&#39;pkg&#39;</span> has no attribute <span class="s1">&#39;mod2&#39;</span>
</span></span></code></pre></div><p>要实际导入模块或其内容，您需要使用上面显示的表单之一。</p>
<h2 id="包初始化">包初始化</h2>
<p>如果包目录中存在名为 <code>__init__.py</code> 的文件，则在导入包或包中的模块时会调用该文件。这可用于执行包初始化代码，例如包级数据的初始化。</p>
<p>例如，考虑以下 <code>__init__.py</code> 文件：</p>
<p><em><strong><strong>init</strong>.py</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Invoking __init__.py for </span><span class="si">{</span><span class="vm">__name__</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;quux&#39;</span><span class="p">,</span> <span class="s1">&#39;corge&#39;</span><span class="p">,</span> <span class="s1">&#39;grault&#39;</span><span class="p">]</span>
</span></span></code></pre></div><p>我们将此文件添加到上面示例中的 <code>pkg</code> 目录中：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/pkg2.dab97c2f9c58.png" alt="Illustration of hierarchical file structure of Python packages"  />
</p>
<p>现在，当导入包时，全局列表 <code>A</code> 被初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import pkg
</span></span><span class="line"><span class="cl">Invoking __init__.py <span class="k">for</span> pkg
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; pkg.A
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;quux&#39;</span>, <span class="s1">&#39;corge&#39;</span>, <span class="s1">&#39;grault&#39;</span><span class="o">]</span>
</span></span></code></pre></div><p>包中的模块可以通过依次导入来访问全局变量：</p>
<p><em>mod1.py</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="kn">from</span> <span class="nn">pkg</span> <span class="kn">import</span> <span class="n">A</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[mod1] foo() / A = &#39;</span><span class="p">,</span> <span class="n">A</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; from pkg import mod1
</span></span><span class="line"><span class="cl">Invoking __init__.py <span class="k">for</span> pkg
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod1.foo<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod1<span class="o">]</span> foo<span class="o">()</span> / <span class="nv">A</span> <span class="o">=</span>  <span class="o">[</span><span class="s1">&#39;quux&#39;</span>, <span class="s1">&#39;corge&#39;</span>, <span class="s1">&#39;grault&#39;</span><span class="o">]</span>
</span></span></code></pre></div><p><code>__init__.py</code> 还可以用于实现从包中自动导入模块。例如，之前您看到语句 <code>import pkg</code> 仅将名称 <code>pkg</code> 放入调用者的本地符号表中，并且不导入任何模块。但如果 <code>pkg</code> 目录中的 <code>__init__.py</code> 包含以下内容：</p>
<p><em><strong><strong>init</strong>.py</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;Invoking __init__.py for </span><span class="si">{</span><span class="vm">__name__</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pkg.mod1</span><span class="o">,</span> <span class="nn">pkg.mod2</span>
</span></span></code></pre></div><p>然后当您执行 <code>import pkg</code> 时，会自动导入模块 <code>mod1</code> 和 <code>mod2</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import pkg
</span></span><span class="line"><span class="cl">Invoking __init__.py <span class="k">for</span> pkg
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; pkg.mod1.foo<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod1<span class="o">]</span> foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; pkg.mod2.bar<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod2<span class="o">]</span> bar<span class="o">()</span>
</span></span></code></pre></div><blockquote>
<p>注意：许多 Python 文档都指出，创建包时，包目录中必须存在 <code>__init__.py</code> 文件。这曾经是真的。过去， <code>__init__.py</code> 的存在对于 Python 来说就意味着正在定义一个包。该文件可以包含初始化代码，甚至可以为空，但它必须存在。</p>
<p>从 Python 3.3 开始，<a href="https://www.python.org/dev/peps/pep-0420">引入了隐式命名空间包</a>。这些允许创建没有任何 <code>__init__.py</code> 文件的包。当然，如果需要包初始化，它仍然可以存在。但不再需要了。查看<a href="https://realpython.com/python-namespace-package/">什么是 Python 命名空间包，它有什么用？</a>了解更多。</p>
</blockquote>
<h2 id="从包中导入-">从包中导入 <code>*</code></h2>
<p>为了以下讨论的目的，先前定义的包被扩展以包含一些附加模块：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/pkg3.d2160908ae77.png" alt="Illustration of hierarchical file structure of Python packages"  />
</p>
<p>现在 <code>pkg</code> 目录中定义了四个模块。它们的内容如下所示：</p>
<p><em><strong>mod1.py</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[mod1] foo()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p><em><strong>mod2.py</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">bar</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[mod2] bar()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Bar</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p><em><strong>mod3.py</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">baz</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[mod3] baz()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Baz</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p><em><strong>mod4.py</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">qux</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[mod4] qux()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Qux</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p>那有什么作用？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from pkg import *
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span><span class="o">]</span>
</span></span></code></pre></div><p>哼。不多。您可能期望（假设您有任何期望）Python 会深入到包目录中，找到它能找到的所有模块，并将它们全部导入。但正如您所看到的，默认情况下不会发生这种情况。</p>
<p>相反，Python 遵循此约定：如果包目录中的 <code>__init__.py</code> 文件包含名为 <code>__all__</code> 的列表，则在遇到语句 <code>from &lt;package_name&gt; import *</code> 时，它被视为应导入的模块列表。</p>
<p>对于本示例，假设您在 <code>pkg</code> 目录中创建一个 <code>__init__.py</code> ，如下所示：</p>
<p><em><strong>pkg/<strong>init</strong>.py</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;mod1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;mod2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;mod3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;mod4&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span></code></pre></div><p>现在 <code>from pkg import *</code> 导入所有四个模块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from pkg import *
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span>, <span class="s1">&#39;mod1&#39;</span>, <span class="s1">&#39;mod2&#39;</span>, <span class="s1">&#39;mod3&#39;</span>, <span class="s1">&#39;mod4&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod2.bar<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod2<span class="o">]</span> bar<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod4.Qux
</span></span><span class="line"><span class="cl">&lt;class <span class="s1">&#39;pkg.mod4.Qux&#39;</span>&gt;
</span></span></code></pre></div><p>使用 <code>import *</code> 仍然不被认为是一种很好的形式，对于包来说比对于模块来说更是如此。但此功能至少使包的创建者可以对指定 <code>import *</code> 时发生的情况进行一些控制。 （事实上，它提供了完全禁止它的功能，只需完全拒绝定义 <code>__all__</code> 即可。正如您所看到的，包的默认行为是不导入任何内容。）</p>
<p>顺便说一句， <code>__all__</code> 也可以在模块中定义，并具有相同的目的：控制使用 <code>import *</code> 导入的内容。例如，修改 <code>mod1.py</code> 如下：</p>
<p><em><strong>pkg/mod1.py</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[mod1] foo()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><p>现在，来自 <code>pkg.mod1</code> 的 <code>import *</code> 语句将仅导入 <code>__all__</code> 中包含的内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from pkg.mod1 import *
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; dir<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="s1">&#39;__annotations__&#39;</span>, <span class="s1">&#39;__builtins__&#39;</span>, <span class="s1">&#39;__doc__&#39;</span>, <span class="s1">&#39;__loader__&#39;</span>, <span class="s1">&#39;__name__&#39;</span>,
</span></span><span class="line"><span class="cl"><span class="s1">&#39;__package__&#39;</span>, <span class="s1">&#39;__spec__&#39;</span>, <span class="s1">&#39;foo&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; foo<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod1<span class="o">]</span> foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; Foo
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;&lt;pyshell#37&gt;&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    Foo
</span></span><span class="line"><span class="cl">NameError: name <span class="s1">&#39;Foo&#39;</span> is not defined
</span></span></code></pre></div><p><code>foo()</code> （函数）现在定义在本地命名空间中，但 <code>Foo</code> （类）不是，因为后者不在 <code>__all__</code> 中。</p>
<p>总之，包和模块都使用 <code>__all__</code> 来控制指定 <code>import *</code> 时导入的内容。但默认行为有所不同：</p>
<ul>
<li>对于包来说，当 <code>__all__</code> 未定义时， <code>import *</code> 不会导入任何内容。</li>
<li>对于模块，当未定义 <code>__all__</code> 时， <code>import *</code> 会导入所有内容（除了——你猜对了——以下划线开头的名称）。</li>
</ul>
<h2 id="子包">子包</h2>
<p>包可以包含任意深度的嵌套子包。例如，我们对示例包目录再做一个修改，如下：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/pkg4.a830d6e144bf.png" alt="Illustration of hierarchical file structure of Python packages"  />
</p>
<p>四个模块（ <code>mod1.py</code> 、 <code>mod2.py</code> 、 <code>mod3.py</code> 和 <code>mod4.py</code> ）的定义如前。但现在，它们不再被集中到 <code>pkg</code> 目录中，而是分成两个子包目录： <code>sub_pkg1</code> 和 <code>sub_pkg2</code> 。</p>
<p>导入仍然与之前所示的一样。语法类似，但使用额外的点符号将包名称与子包名称分开：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; import pkg.sub_pkg1.mod1
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; pkg.sub_pkg1.mod1.foo<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod1<span class="o">]</span> foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from pkg.sub_pkg1 import mod2
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod2.bar<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod2<span class="o">]</span> bar<span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from pkg.sub_pkg2.mod3 import baz
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; baz<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod3<span class="o">]</span> baz<span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; from pkg.sub_pkg2.mod4 import qux as grault
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; grault<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod4<span class="o">]</span> qux<span class="o">()</span>
</span></span></code></pre></div><p>此外，一个子包中的模块可以引用同级子包中的对象（如果同级子包包含您需要的某些功能）。例如，假设您想从模块 <code>mod3</code> 中导入并执行函数 <code>foo()</code> （在模块 <code>mod1</code> 中定义）。您可以使用绝对导入：</p>
<p><em><strong>pkg/sub__pkg2/mod3.py</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">baz</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[mod3] baz()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Baz</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pkg.sub_pkg1.mod1</span> <span class="kn">import</span> <span class="n">foo</span>
</span></span><span class="line"><span class="cl"><span class="n">foo</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;&gt;&gt; from pkg.sub_pkg2 import mod3
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod1<span class="o">]</span> foo<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; mod3.foo<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>mod1<span class="o">]</span> foo<span class="o">()</span>
</span></span></code></pre></div><p>或者您可以使用相对导入，其中 <code>..</code> 指的是上一级的包。从子包 <code>sub_pkg2</code> 中的 <code>mod3.py</code> 中，</p>
<ul>
<li>
<p><code>..</code> 计算父包 ( <code>pkg</code> )，并且</p>
</li>
<li>
<p><code>..sub_pkg1</code> 计算为父包的子包 <code>sub_pkg1</code> 。</p>
</li>
</ul>
<p><em><strong>pkg/sub__pkg2/mod3.py</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">baz</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[mod3] baz()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Baz</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">..</span> <span class="kn">import</span> <span class="n">sub_pkg1</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">sub_pkg1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">..sub_pkg1.mod1</span> <span class="kn">import</span> <span class="n">foo</span>
</span></span><span class="line"><span class="cl"><span class="n">foo</span><span class="p">()</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">pkg.sub_pkg2</span> <span class="kn">import</span> <span class="n">mod3</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">module</span> <span class="s1">&#39;pkg.sub_pkg1&#39;</span> <span class="p">(</span><span class="n">namespace</span><span class="p">)</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">mod1</span><span class="p">]</span> <span class="n">foo</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="结论">结论</h2>
<p>在本教程中，您涵盖了以下主题：</p>
<ul>
<li>
<p>如何创建 Python 模块</p>
</li>
<li>
<p>Python 解释器搜索模块的位置</p>
</li>
<li>
<p>如何使用 <code>import</code> 语句获取对模块中定义的对象的访问权限</p>
</li>
<li>
<p>如何创建可作为独立脚本执行的模块</p>
</li>
<li>
<p>如何将模块组织成包和子包</p>
</li>
<li>
<p>如何控制包初始化</p>
</li>
</ul>
<p>这有望让您更好地了解如何访问 Python 中可用的许多第三方和内置模块中可用的功能。</p>
<p>此外，如果您正在开发自己的应用程序，创建自己的模块和包将帮助您组织和模块化代码，从而使编码、维护和调试更加容易。</p>
<p>如果您想了解更多信息，请查看 Python.org 上的以下文档：</p>
<ul>
<li><a href="https://docs.python.org/3/reference/import.html">The import system</a></li>
<li><a href="https://docs.python.org/3/tutorial/modules.html">The Python tutorial: Modules</a></li>
</ul>
<p>快乐的Python！</p>
<p>原文链接：<a href="https://realpython.com/python-modules-packages">https://realpython.com/python-modules-packages</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python学习5：函数</title>
      <link>https://blog.chensoul.com/posts/2023/06/25/python-function/</link>
      <pubDate>Sun, 25 Jun 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/25/python-function/</guid>
      <description>函数的定义 在 Python 中，函数是一段可重复使用的代码块，它接受一些输入（也称为参数）并产生一些输出。函数可以通过 def 关键字来定义，语法如下： def function_name(parameters): &amp;#34;&amp;#34;&amp;#34;This is a</description>
      <content:encoded><![CDATA[<h2 id="函数的定义">函数的定义</h2>
<p>在 Python 中，函数是一段可重复使用的代码块，它接受一些输入（也称为参数）并产生一些输出。函数可以通过 <code>def</code> 关键字来定义，语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">function_name</span><span class="p">(</span><span class="n">parameters</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  	<span class="s2">&#34;&#34;&#34;This is a function&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># function body</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">value</span>
</span></span></code></pre></div><p>其中，<code>function_name</code> 是函数的名称，<code>parameters</code> 是函数的参数列表，<code>function body</code> 是函数的主体部分，包括需要执行的代码和可能的返回语句，<code>return value</code> 是函数的返回值（如果有的话）。</p>
<p>下列代码创建一个可以输出限定数值内的斐波那契数列函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>    <span class="c1"># write Fibonacci series up to n</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Print a Fibonacci series up to n.&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">fib</span><span class="p">(</span><span class="mi">2000</span><span class="p">)</span> <span class="c1"># 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 159</span>
</span></span></code></pre></div><p><em>定义</em> 函数使用关键字 <code>def</code>，后跟函数名与括号内的形参列表。函数语句从下一行开始，并且必须缩进。</p>
<p>函数内的第一条语句是字符串时，该字符串就是文档字符串，也称为 <em>docstring</em>。利用文档字符串可以自动生成在线文档或打印版文档，还可以让开发者在浏览代码时直接查阅文档；Python 开发者最好养成在代码中加入文档字符串的好习惯。</p>
<p>函数在 <em>执行</em> 时使用函数局部变量符号表，所有函数变量赋值都存在局部符号表中；引用变量时，首先，在局部符号表里查找变量，然后，是外层函数局部符号表，再是全局符号表，最后是内置名称符号表。因此，尽管可以引用全局变量和外层函数的变量，但最好不要在函数内直接赋值（除非是 <code>global</code> 语句定义的全局变量，或 <code>nonlocal</code> 语句定义的外层函数变量）。</p>
<p>在调用函数时会将实际参数（实参）引入到被调用函数的局部符号表中；因此，实参是使用 <em>按值调用</em> 来传递的（其中的 <em>值</em> 始终是对象的 <em>引用</em> 而不是对象的值）。 <a href="https://docs.python.org/zh-cn/3/tutorial/controlflow.html#id2">1</a> 当一个函数调用另外一个函数时，会为该调用创建一个新的局部符号表。</p>
<p>函数定义在当前符号表中把函数名与函数对象关联在一起。解释器把函数名指向的对象作为用户自定义函数。还可以使用其他名称指向同一个函数对象，并访问访该函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">fib</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="n">fib</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="c1"># 0 1 1 2 3 5 8 13 21 34 55 89</span>
</span></span></code></pre></div><p><code>fib</code> 不返回值，因此，其他语言不把它当作函数，而是当作过程。事实上，没有 <code>return</code> 语句的函数也返回值，只不过这个值比较是 <code>None</code> （是一个内置名称）。一般来说，解释器不会输出单独的返回值 <code>None</code> ，如需查看该值，可以使用 <code>print()</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span></span></code></pre></div><h2 id="函数参数">函数参数</h2>
<h3 id="默认值参数">默认值参数</h3>
<p>在 Python 中，函数参数可以具有默认值，这意味着如果在函数调用期间未提供该参数的值，则使用默认值。定义具有默认值的函数参数的语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">function_name</span><span class="p">(</span><span class="n">param1</span><span class="p">,</span> <span class="n">param2</span><span class="o">=</span><span class="n">default_value</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># function body</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">value</span>
</span></span></code></pre></div><p>其中，param1 是必需的参数，它没有默认值；param2 是可选参数，如果未提供，则使用默认值 default_value。如果调用函数时提供了 param2 的值，则使用提供的值覆盖默认值。</p>
<p>以下是一个使用默认参数值的 Python 函数示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">greeting</span><span class="o">=</span><span class="s2">&#34;Hello&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">greeting</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">greet</span><span class="p">(</span><span class="s2">&#34;Alice&#34;</span><span class="p">)</span>  <span class="c1"># output: Hello, Alice!</span>
</span></span><span class="line"><span class="cl"><span class="n">greet</span><span class="p">(</span><span class="s2">&#34;Bob&#34;</span><span class="p">,</span> <span class="s2">&#34;Hi&#34;</span><span class="p">)</span>  <span class="c1"># output: Hi, Bob!</span>
</span></span></code></pre></div><p>需要注意的是，当函数参数具有默认值时，应该将具有默认值的参数放在参数列表的末尾。这样可以使函数更加易于使用，并避免在调用函数时出现混淆。</p>
<p>以下是一个具有多个默认参数值的 Python 函数的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_user</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">18</span><span class="p">,</span> <span class="n">gender</span><span class="o">=</span><span class="s2">&#34;male&#34;</span><span class="p">,</span> <span class="n">email</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">user</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="s2">&#34;age&#34;</span><span class="p">:</span> <span class="n">age</span><span class="p">,</span> <span class="s2">&#34;gender&#34;</span><span class="p">:</span> <span class="n">gender</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">email</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">user</span><span class="p">[</span><span class="s2">&#34;email&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">email</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">user</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">user1</span> <span class="o">=</span> <span class="n">create_user</span><span class="p">(</span><span class="s2">&#34;Alice&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">user2</span> <span class="o">=</span> <span class="n">create_user</span><span class="p">(</span><span class="s2">&#34;Bob&#34;</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">user3</span> <span class="o">=</span> <span class="n">create_user</span><span class="p">(</span><span class="s2">&#34;Charlie&#34;</span><span class="p">,</span> <span class="n">gender</span><span class="o">=</span><span class="s2">&#34;female&#34;</span><span class="p">,</span> <span class="n">email</span><span class="o">=</span><span class="s2">&#34;charlie@example.com&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">user1</span><span class="p">)</span>  <span class="c1"># output: {&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 18, &#39;gender&#39;: &#39;male&#39;}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">user2</span><span class="p">)</span>  <span class="c1"># output: {&#39;name&#39;: &#39;Bob&#39;, &#39;age&#39;: 20, &#39;gender&#39;: &#39;male&#39;}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">user3</span><span class="p">)</span>  <span class="c1"># output: {&#39;name&#39;: &#39;Charlie&#39;, &#39;age&#39;: 18, &#39;gender&#39;: &#39;female&#39;, &#39;email&#39;: &#39;charlie@example.com&#39;}</span>
</span></span></code></pre></div><h3 id="关键字参数">关键字参数</h3>
<p><code>kwarg=value</code> 形式的关键字参数也可以用于调用函数。函数示例如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">parrot</span><span class="p">(</span><span class="n">voltage</span><span class="p">,</span> <span class="n">state</span><span class="o">=</span><span class="s1">&#39;a stiff&#39;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s1">&#39;voom&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s1">&#39;Norwegian Blue&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-- This parrot wouldn&#39;t&#34;</span><span class="p">,</span> <span class="n">action</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;if you put&#34;</span><span class="p">,</span> <span class="n">voltage</span><span class="p">,</span> <span class="s2">&#34;volts through it.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-- Lovely plumage, the&#34;</span><span class="p">,</span> <span class="nb">type</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-- It&#39;s&#34;</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="s2">&#34;!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>该函数接受一个必选参数（<code>voltage</code>）和三个可选参数（<code>state</code>, <code>action</code> 和 <code>type</code>）。该函数可用下列方式调用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>                                          <span class="c1"># 1 positional argument</span>
</span></span><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">(</span><span class="n">voltage</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>                                  <span class="c1"># 1 keyword argument</span>
</span></span><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">(</span><span class="n">voltage</span><span class="o">=</span><span class="mi">1000000</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s1">&#39;VOOOOOM&#39;</span><span class="p">)</span>             <span class="c1"># 2 keyword arguments</span>
</span></span><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="s1">&#39;VOOOOOM&#39;</span><span class="p">,</span> <span class="n">voltage</span><span class="o">=</span><span class="mi">1000000</span><span class="p">)</span>             <span class="c1"># 2 keyword arguments</span>
</span></span><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">(</span><span class="s1">&#39;a million&#39;</span><span class="p">,</span> <span class="s1">&#39;bereft of life&#39;</span><span class="p">,</span> <span class="s1">&#39;jump&#39;</span><span class="p">)</span>         <span class="c1"># 3 positional arguments</span>
</span></span><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">(</span><span class="s1">&#39;a thousand&#39;</span><span class="p">,</span> <span class="n">state</span><span class="o">=</span><span class="s1">&#39;pushing up the daisies&#39;</span><span class="p">)</span>  <span class="c1"># 1 positional, 1 keyword</span>
</span></span></code></pre></div><p>以下调用函数的方式都无效：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">()</span>                     <span class="c1"># required argument missing</span>
</span></span><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">(</span><span class="n">voltage</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span> <span class="s1">&#39;dead&#39;</span><span class="p">)</span>  <span class="c1"># non-keyword argument after a keyword argument</span>
</span></span><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">(</span><span class="mi">110</span><span class="p">,</span> <span class="n">voltage</span><span class="o">=</span><span class="mi">220</span><span class="p">)</span>     <span class="c1"># duplicate value for the same argument</span>
</span></span><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">(</span><span class="n">actor</span><span class="o">=</span><span class="s1">&#39;John Cleese&#39;</span><span class="p">)</span>  <span class="c1"># unknown keyword argument</span>
</span></span></code></pre></div><p>函数调用时，关键字参数必须跟在位置参数后面。所有传递的关键字参数都必须匹配一个函数接受的参数（比如，<code>actor</code> 不是函数 <code>parrot</code> 的有效参数），关键字参数的顺序并不重要。这也包括必选参数，（比如，<code>parrot(voltage=1000)</code> 也有效）。不能对同一个参数多次赋值，下面就是一个因此限制而失败的例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">function</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     <span class="k">pass</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">a</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Traceback (most recent call last):</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  File &#34;&lt;stdin&gt;&#34;, line 1, in &lt;module&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#TypeError: function() got multiple values for argument &#39;a&#39;</span>
</span></span></code></pre></div><p>最后一个形参为 <code>**name</code> 形式时，接收一个字典，该字典包含与函数中已定义形参对应之外的所有关键字参数。<code>**name</code> 形参可以与 <code>*name</code> 形参（下一小节介绍）组合使用（<code>*name</code> 必须在 <code>**name</code> 前面）， <code>*name</code> 形参接收一个元组，该元组包含形参列表之外的位置参数。例如，可以定义下面这样的函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">cheeseshop</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="o">*</span><span class="n">arguments</span><span class="p">,</span> <span class="o">**</span><span class="n">keywords</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-- Do you have any&#34;</span><span class="p">,</span> <span class="n">kind</span><span class="p">,</span> <span class="s2">&#34;?&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-- I&#39;m sorry, we&#39;re all out of&#34;</span><span class="p">,</span> <span class="n">kind</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">arguments</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-&#34;</span> <span class="o">*</span> <span class="mi">40</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">kw</span> <span class="ow">in</span> <span class="n">keywords</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">kw</span><span class="p">,</span> <span class="s2">&#34;:&#34;</span><span class="p">,</span> <span class="n">keywords</span><span class="p">[</span><span class="n">kw</span><span class="p">])</span>
</span></span></code></pre></div><p>该函数可以用如下方式调用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cheeseshop</span><span class="p">(</span><span class="s2">&#34;Limburger&#34;</span><span class="p">,</span> <span class="s2">&#34;It&#39;s very runny, sir.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="s2">&#34;It&#39;s really very, VERY runny, sir.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">shopkeeper</span><span class="o">=</span><span class="s2">&#34;Michael Palin&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">client</span><span class="o">=</span><span class="s2">&#34;John Cleese&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">sketch</span><span class="o">=</span><span class="s2">&#34;Cheese Shop Sketch&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>输出结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">-- Do you have any Limburger ?
</span></span><span class="line"><span class="cl">-- I<span class="s1">&#39;m sorry, we&#39;</span>re all out of Limburger
</span></span><span class="line"><span class="cl">It<span class="s1">&#39;s very runny, sir.
</span></span></span><span class="line"><span class="cl"><span class="s1">It&#39;</span>s really very, VERY runny, sir.
</span></span><span class="line"><span class="cl">----------------------------------------
</span></span><span class="line"><span class="cl">shopkeeper : Michael Palin
</span></span><span class="line"><span class="cl">client : John Cleese
</span></span><span class="line"><span class="cl">sketch : Cheese Shop Sketch
</span></span></code></pre></div><p>注意，关键字参数在输出结果中的顺序与调用函数时的顺序一致。</p>
<h3 id="特殊参数">特殊参数</h3>
<p>默认情况下，参数可以按位置或显式关键字传递给 Python 函数。为了让代码易读、高效，最好限制参数的传递方式，这样，开发者只需查看函数定义，即可确定参数项是仅按位置、按位置或关键字，还是仅按关键字传递。</p>
<p>函数定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">pos1</span><span class="p">,</span> <span class="n">pos2</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="n">pos_or_kwd</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">kwd1</span><span class="p">,</span> <span class="n">kwd2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="o">-----------</span>    <span class="o">----------</span>     <span class="o">----------</span>
</span></span><span class="line"><span class="cl">        <span class="o">|</span>             <span class="o">|</span>                  <span class="o">|</span>
</span></span><span class="line"><span class="cl">        <span class="o">|</span>        <span class="n">Positional</span> <span class="ow">or</span> <span class="n">keyword</span>   <span class="o">|</span>
</span></span><span class="line"><span class="cl">        <span class="o">|</span>                                <span class="o">-</span> <span class="n">Keyword</span> <span class="n">only</span>
</span></span><span class="line"><span class="cl">         <span class="o">--</span> <span class="n">Positional</span> <span class="n">only</span>
</span></span></code></pre></div><p><code>/</code> 和 <code>*</code> 是可选的。这些符号表明形参如何把参数值传递给函数：位置、位置或关键字、关键字。关键字形参也叫作命名形参。</p>
<ul>
<li>
<p>位置或关键字参数。函数定义中未使用 <code>/</code> 和 <code>*</code> 时，参数可以按位置或关键字传递给函数。</p>
</li>
<li>
<p>仅位置参数。特定形参可以标记为 <em>仅限位置</em>。<em>仅限位置</em> 时，形参的顺序很重要，且这些形参不能用关键字传递。仅限位置形参应放在 <code>/</code> （正斜杠）前。<code>/</code> 用于在逻辑上分割仅限位置形参与其它形参。如果函数定义中没有 <code>/</code>，则表示没有仅限位置形参。<code>/</code> 后可以是 <em>位置或关键字</em> 或 <em>仅限关键字</em> 形参。</p>
</li>
<li>
<p>仅限关键字参数。把形参标记为 <em>仅限关键字</em>，表明必须以关键字参数形式传递该形参，应在参数列表中第一个 <em>仅限关键字</em> 形参前添加 <code>*</code>。</p>
</li>
</ul>
<p>请看下面的函数定义示例，注意 <code>/</code> 和 <code>*</code> 标记：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">standard_arg</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     <span class="nb">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">pos_only_arg</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="o">/</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     <span class="nb">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">kwd_only_arg</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     <span class="nb">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">combined_example</span><span class="p">(</span><span class="n">pos_only</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="n">standard</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">kwd_only</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     <span class="nb">print</span><span class="p">(</span><span class="n">pos_only</span><span class="p">,</span> <span class="n">standard</span><span class="p">,</span> <span class="n">kwd_only</span><span class="p">)</span>
</span></span></code></pre></div><p>第一个函数定义 <code>standard_arg</code> 是最常见的形式，对调用方式没有任何限制，可以按位置也可以按关键字传递参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">standard_arg</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># 2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">standard_arg</span><span class="p">(</span><span class="n">arg</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># 2</span>
</span></span></code></pre></div><p>第二个函数 <code>pos_only_arg</code> 的函数定义中有 <code>/</code>，仅限使用位置形参：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pos_only_arg</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># 1</span>
</span></span></code></pre></div><p>第三个函数 <code>kwd_only_args</code> 的函数定义通过 <code>*</code> 表明仅限关键字参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">kwd_only_arg</span><span class="p">(</span><span class="n">arg</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># 3</span>
</span></span></code></pre></div><p>最后一个函数在同一个函数定义中，使用了全部三种调用惯例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">combined_example</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">kwd_only</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># 1 2 3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">combined_example</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">standard</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">kwd_only</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#1 2 3</span>
</span></span></code></pre></div><p>下面的函数定义中，<code>kwds</code> 把 <code>name</code> 当作键，因此，可能与位置参数 <code>name</code> 产生潜在冲突：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s1">&#39;name&#39;</span> <span class="ow">in</span> <span class="n">kwds</span>
</span></span></code></pre></div><p>调用该函数不可能返回 <code>True</code>，因为关键字 <code>'name'</code> 总与第一个形参绑定。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">**</span><span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="c1">#Traceback (most recent call last):</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  File &#34;&lt;stdin&gt;&#34;, line 1, in &lt;module&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#TypeError: foo() got multiple values for argument &#39;name&#39;</span>
</span></span></code></pre></div><p>加上 <code>/</code> （仅限位置参数）后，就可以了。此时，函数定义把 <code>name</code> 当作位置参数，<code>'name'</code> 也可以作为关键字参数的键：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="s1">&#39;name&#39;</span> <span class="ow">in</span> <span class="n">kwds</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">**</span><span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span> <span class="c1"># True</span>
</span></span></code></pre></div><p>换句话说，仅限位置形参的名称可以在 <code>**kwds</code> 中使用，而不产生歧义。</p>
<h2 id="任意实参列表">任意实参列表</h2>
<p>调用函数时，使用任意数量的实参是最少见的选项。这些实参包含在元组中。在可变数量的实参之前，可能有若干个普通参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">write_multiple_items</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">separator</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">separator</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">args</span><span class="p">))</span>
</span></span></code></pre></div><p><em>variadic</em> 参数用于采集传递给函数的所有剩余参数，因此，它们通常在形参列表的末尾。<code>*args</code> 形参后的任何形式参数只能是仅限关键字参数，即只能用作关键字参数，不能用作位置参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">concat</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s2">&#34;/&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">concat</span><span class="p">(</span><span class="s2">&#34;earth&#34;</span><span class="p">,</span> <span class="s2">&#34;mars&#34;</span><span class="p">,</span> <span class="s2">&#34;venus&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">concat</span><span class="p">(</span><span class="s2">&#34;earth&#34;</span><span class="p">,</span> <span class="s2">&#34;mars&#34;</span><span class="p">,</span> <span class="s2">&#34;venus&#34;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s2">&#34;.&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="解包实参列表">解包实参列表</h2>
<p>函数调用要求独立的位置参数，但实参在列表或元组里时，要执行相反的操作。例如，内置的 <code>range()</code> 函数要求独立的 <em>start</em> 和 <em>stop</em> 实参。如果这些参数不是独立的，则要在调用函数时，用 <code>*</code> 操作符把实参从列表或元组解包出来：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>            <span class="c1"># normal call with separate arguments</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">))</span>            <span class="c1"># call with arguments unpacked from a list</span>
</span></span></code></pre></div><p>同样，字典可以用 <code>**</code> 操作符传递关键字参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">parrot</span><span class="p">(</span><span class="n">voltage</span><span class="p">,</span> <span class="n">state</span><span class="o">=</span><span class="s1">&#39;a stiff&#39;</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s1">&#39;voom&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;-- This parrot wouldn&#39;t&#34;</span><span class="p">,</span> <span class="n">action</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;if you put&#34;</span><span class="p">,</span> <span class="n">voltage</span><span class="p">,</span> <span class="s2">&#34;volts through it.&#34;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;E&#39;s&#34;</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="s2">&#34;!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;voltage&#34;</span><span class="p">:</span> <span class="s2">&#34;four million&#34;</span><span class="p">,</span> <span class="s2">&#34;state&#34;</span><span class="p">:</span> <span class="s2">&#34;bleedin&#39; demised&#34;</span><span class="p">,</span> <span class="s2">&#34;action&#34;</span><span class="p">:</span> <span class="s2">&#34;VOOM&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">parrot</span><span class="p">(</span><span class="o">**</span><span class="n">d</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="lambda-函数">Lambda 函数</h2>
<p>Python 中还有一种特殊的函数称为 lambda 函数，它是一种匿名函数，用于创建简短的函数。以下是一个 lambda 函数示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">add_numbers</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">add_numbers</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span></code></pre></div><p>在上面的示例中，我们使用 <code>lambda</code> 关键字创建了一个匿名函数 <code>add_numbers</code>，它接受两个参数 <code>x</code> 和 <code>y</code>，并返回它们的和。我们可以使用 <code>add_numbers(2, 3)</code> 调用这个匿名函数，并将结果存储在变量 <code>result</code> 中。</p>
<h2 id="函数注解">函数注解</h2>
<p>Python 函数注解是一种在函数定义中添加元数据的功能。这些注解可以用于指定函数参数和返回值的类型、参数的默认值、函数的文档字符串等信息。虽然注解并不会影响 Python 函数的行为，但它们可以提供有用的信息，使代码更加清晰易读。</p>
<p>Python 函数注解使用的语法是在函数定义的参数列表后面添加冒号和注解。以下是一个函数注解的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">add_numbers</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></span></code></pre></div><p>在上面的示例中，我们使用注解指定了函数 <code>add_numbers()</code> 的两个参数 <code>x</code> 和 <code>y</code> 的类型为 <code>int</code>，并指定函数返回值的类型也为 <code>int</code>。在函数体中，我们使用加法运算符将这两个参数相加，并返回结果。</p>
<p>函数注解还可以包含参数的默认值、参数的可变性和函数的文档字符串等信息。以下是一个包含这些信息的函数注解示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s2">&#34;World&#34;</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">times</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Greet a person by name and optionally repeat the greeting multiple times.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    :param name: The name of the person to greet. Default is &#34;World&#34;.
</span></span></span><span class="line"><span class="cl"><span class="s2">    :param times: The number of times to repeat the greeting. Default is 1.
</span></span></span><span class="line"><span class="cl"><span class="s2">    :return: A string containing the greeting message.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span> <span class="o">=</span> <span class="s2">&#34;Hello, &#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s2">&#34;!</span><span class="se">\n</span><span class="s2">&#34;</span> <span class="o">*</span> <span class="n">times</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">message</span>
</span></span></code></pre></div><p>在上面的示例中，我们使用注解指定了函数 <code>greet()</code> 的参数 <code>name</code> 和 <code>times</code> 的类型为 <code>str</code> 和 <code>int</code>，并指定了参数 <code>name</code> 的默认值为 <code>&quot;World&quot;</code>，参数 <code>times</code> 的默认值为 <code>1</code>。我们还使用了函数的文档字符串来提供更详细的函数说明。</p>
<p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-function-annotation">标注</a> 以字典的形式存放在函数的 <code>__annotations__</code> 属性中，并且不会影响函数的任何其他部分。 形参标注的定义方式是在形参名后加冒号，后面跟一个表达式，该表达式会被求值为标注的值。 返回值标注的定义方式是加组合符号 <code>-&gt;</code>，后面跟一个表达式，该标注位于形参列表和表示 <code>def</code> 语句结束的冒号之间。 下面的示例有一个必须的参数，一个可选的关键字参数以及返回值都带有相应的标注:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">ham</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">eggs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s1">&#39;eggs&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Annotations:&#34;</span><span class="p">,</span> <span class="n">f</span><span class="o">.</span><span class="vm">__annotations__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Arguments:&#34;</span><span class="p">,</span> <span class="n">ham</span><span class="p">,</span> <span class="n">eggs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ham</span> <span class="o">+</span> <span class="s1">&#39; and &#39;</span> <span class="o">+</span> <span class="n">eggs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="s1">&#39;spam&#39;</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>[译]用 Bottle 开发</title>
      <link>https://blog.chensoul.com/posts/2023/06/25/developing-with-bottle/</link>
      <pubDate>Sun, 25 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/25/developing-with-bottle/</guid>
      <description>我喜欢 bottle。它是一个简单、快速且功能强大的 Python 微框架，非常适合小型 Web 应用程序和快速原型设计。对于那些刚刚开始 Web 开发的人来说，它也是一个</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://files.realpython.com/media/bottle-logo.4c5ab3d2ae78.png" alt="Bottle logo"  />
</p>
<p>我喜欢 <a href="http://bottlepy.org/docs/stable/">bottle</a>。它是一个简单、快速且功能强大的 Python 微框架，非常适合小型 Web 应用程序和快速原型设计。对于那些刚刚开始 Web 开发的人来说，它也是一个出色的学习工具。</p>
<p>让我们看一个简单的例子。</p>
<blockquote>
<p>注意：本教程假设您正在运行基于 Unix 的环境 - 例如 Mac OS X、Linux 版本或通过虚拟机支持的 Linux 版本。</p>
</blockquote>
<p><strong>06/13/2015更新</strong>：更新了代码示例和解释。</p>
<h2 id="启动">启动</h2>
<p>首先，让我们创建一个工作目录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ mkdir bottle <span class="o">&amp;&amp;</span> <span class="nb">cd</span> bottle
</span></span></code></pre></div><p>接下来，您需要安装 <a href="https://realpython.com/what-is-pip/">pip</a>、virtualenv 和 git。</p>
<p><a href="https://pypi.python.org/pypi/virtualenv">virtualenv</a> 是一个 Python 工具，可以<a href="https://realpython.com/python-virtual-environments-a-primer/">轻松管理特定项目所需的Python包</a>；它可以防止一个项目中的包与其他项目中的包发生冲突。同时，pip 是一个包管理器，用于管理 Python <a href="https://realpython.com/python-modules-packages/">包的安装</a>。</p>
<p>如需在 Unix 环境中安装 pip（及其依赖项）的帮助，请按照 <a href="https://gist.github.com/mjhea0/5692708">此 Gist</a> 中的说明进行操作。如果您使用的是 Windows 环境，请观看此视频以获取帮助。</p>
<p>安装 <a href="https://realpython.com/courses/what-is-pip/">pip</a> 后，运行以下命令来安装 virtualenv：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ pip install <span class="nv">virtualenv</span><span class="o">==</span>12.0.7
</span></span></code></pre></div><p>现在我们可以轻松设置本地环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ virtualenv venv
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> venv/bin/activate
</span></span></code></pre></div><p>安装 bottle：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ pip install <span class="nv">bottle</span><span class="o">==</span>0.12.8
</span></span><span class="line"><span class="cl">$ pip freeze &gt; requirements.txt
</span></span></code></pre></div><p>最后，让我们使用 Git 将我们的应用程序置于版本控制之下。有关 Git 的更多信息，请 <a href="https://realpython.com/python-git-github-intro/">查看本文</a>，其中还包括安装说明。</p>
<h2 id="编写你的应用程序">编写你的应用程序</h2>
<p>我们准备好编写我们的瓶子应用程序了。打开 Sublime Text 3 或您选择的文本编辑器。创建您的应用程序文件 app.py，它将保存我们第一个应用程序的全部内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">route</span><span class="p">,</span> <span class="n">run</span><span class="p">,</span> <span class="n">template</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">index_html</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;My first web app! By &lt;strong&gt;{{ author }}&lt;/strong&gt;.&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@route</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">template</span><span class="p">(</span><span class="n">index_html</span><span class="p">,</span> <span class="n">author</span><span class="o">=</span><span class="s1">&#39;Real Python&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@route</span><span class="p">(</span><span class="s1">&#39;/name/&lt;name&gt;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">template</span><span class="p">(</span><span class="n">index_html</span><span class="p">,</span> <span class="n">author</span><span class="o">=</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;PORT&#39;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><p>保存文件。</p>
<p>现在您可以在本地运行您的应用程序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python app.py
</span></span></code></pre></div><p>您应该能够连接到 <a href="http://localhost:8080/">http://localhost:8080/</a> 并看到您的应用程序正在运行！</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">My first web app! By RealPython.
</span></span></code></pre></div><p>因此， <code>@route</code> <a href="https://realpython.com/primer-on-python-decorators/">装饰器</a>将一个函数绑定到路由。在第一个路由 <code>/</code> 中， <code>index()</code> 函数绑定到该路由，该路由渲染 <code>index_html</code> 模板并传入<a href="https://realpython.com/python-variables/">变量</a> <code>author</code> 作为关键字参数。然后可以在模板中访问该变量。</p>
<p>现在导航到下一条路由，确保在路由末尾添加您的名字 - 即 http://localhost:8080/name/Michael。您应该看到类似以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">My first web app! By Michael.
</span></span></code></pre></div><p><strong>这是怎么回事？</strong></p>
<ul>
<li>
<p>同样， <code>@route</code> 装饰器将一个函数绑定到路由。在本例中，我们使用包含通配符 <code>&lt;name&gt;</code> 的动态路由。</p>
</li>
<li>
<p>然后，该通配符作为参数传递给视图函数 - <code>def name(name)</code> 。</p>
</li>
<li>
<p>然后我们将其作为关键字参数传递给模板 - <code>author=name</code></p>
</li>
<li>
<p>然后模板渲染作者变量 - <code>{{ author }}</code> 。</p>
</li>
</ul>
<h2 id="shell-脚本">Shell 脚本</h2>
<p>想快速入门吗？使用此 Shell 脚本在几秒钟内生成入门应用程序。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir bottle
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> bottle
</span></span><span class="line"><span class="cl">pip install <span class="nv">virtualenv</span><span class="o">==</span>12.0.7
</span></span><span class="line"><span class="cl">virtualenv venv
</span></span><span class="line"><span class="cl"><span class="nb">source</span> venv/bin/activate
</span></span><span class="line"><span class="cl">pip install <span class="nv">bottle</span><span class="o">==</span>0.12.8
</span></span><span class="line"><span class="cl">pip freeze &gt; requirements.txt
</span></span><span class="line"><span class="cl">git init
</span></span><span class="line"><span class="cl">git add .
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;initial commit&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat &gt;app.py <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">import os
</span></span></span><span class="line"><span class="cl"><span class="s">from bottle import route, run, template
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">index_html = &#39;&#39;&#39;My first web app! By &lt;strong&gt;{{ author }}&lt;/strong&gt;.&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">@route(&#39;/&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s">def index():
</span></span></span><span class="line"><span class="cl"><span class="s">    return template(index_html, author=&#39;Real Python&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">@route(&#39;/name/&lt;name&gt;&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s">def name(name):
</span></span></span><span class="line"><span class="cl"><span class="s">    return template(index_html, author=name)
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">if __name__ == &#39;__main__&#39;:
</span></span></span><span class="line"><span class="cl"><span class="s">    port = int(os.environ.get(&#39;PORT&#39;, 8080))
</span></span></span><span class="line"><span class="cl"><span class="s">    run(host=&#39;0.0.0.0&#39;, port=port, debug=True)
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod a+x app.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git init
</span></span><span class="line"><span class="cl">git add .
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;Updated&#34;</span>
</span></span></code></pre></div><p>从<a href="https://gist.github.com/mjhea0/5784132">此要点</a>下载此脚本，然后使用以下命令运行它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ bash bottle.sh
</span></span></code></pre></div><h2 id="下一步">下一步</h2>
<p>从这一点来看，创建新页面就像添加新的 <code>@route</code> 装饰函数一样简单。</p>
<p>创建 HTML 很简单：在上面的应用程序中，我们只是将 HTML 内联到文件本身中。修改它以从文件加载模板很容易。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@route</span><span class="p">(</span><span class="s1">&#39;/main&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">template</span><span class="p">(</span><span class="s1">&#39;main_template&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>这将加载模板文件 <code>main_template.tpl</code> ，该文件必须放置在项目结构中的 <code>views</code> 文件夹中，并将其呈现给最终用户。</p>
<p>有关详细信息，请参阅 bottle <a href="http://bottlepy.org/docs/dev/">文档</a>。</p>
<h2 id="基本设置">基本设置</h2>
<p>首先从第 1 部分下载此 <a href="https://gist.github.com/mjhea0/5784132">Gist</a>，然后使用以下命令运行它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ bash bottle.sh
</span></span></code></pre></div><p>这将创建一个基本的项目结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">├── app.py
</span></span><span class="line"><span class="cl">├── requirements.txt
</span></span><span class="line"><span class="cl">└── testenv
</span></span></code></pre></div><p>激活虚拟环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">cd</span> bottle
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> testenv/bin/activate
</span></span></code></pre></div><p>安装要求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ pip install -r requirements.txt
</span></span></code></pre></div><p>导航到 <a href="https://www.plot.ly/api">https://www.plot.ly/api</a>，注册一个新帐户，登录，然后创建一个新的 API 密钥：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/plotly-api-credentials.03a477bfd4d1.png" alt="Plotly API credentials"  />
</p>
<p>复制该密钥。</p>
<p>安装plot.ly：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ pip install <span class="nv">plotly</span><span class="o">==</span>1.2.6
</span></span></code></pre></div><p>接下来更新app.py中的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">run</span><span class="p">,</span> <span class="n">template</span><span class="p">,</span> <span class="n">get</span><span class="p">,</span> <span class="n">post</span><span class="p">,</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.plotly</span> <span class="k">as</span> <span class="nn">py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">plotly.graph_objs</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># add your username and api key</span>
</span></span><span class="line"><span class="cl"><span class="n">py</span><span class="o">.</span><span class="n">sign_in</span><span class="p">(</span><span class="s2">&#34;realpython&#34;</span><span class="p">,</span> <span class="s2">&#34;lijlflx93&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@get</span><span class="p">(</span><span class="s1">&#39;/plot&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">form</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s1">&#39;&#39;&#39;&lt;h2&gt;Graph via Plot.ly&lt;/h2&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">              &lt;form method=&#34;POST&#34; action=&#34;https://blog.chensoul.com/plot&#34;&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">                Name: &lt;input name=&#34;name1&#34; type=&#34;text&#34; /&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">                Age: &lt;input name=&#34;age1&#34; type=&#34;text&#34; /&gt;&lt;br/&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">                Name: &lt;input name=&#34;name2&#34; type=&#34;text&#34; /&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">                Age: &lt;input name=&#34;age2&#34; type=&#34;text&#34; /&gt;&lt;br/&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">                Name: &lt;input name=&#34;name3&#34; type=&#34;text&#34; /&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">                Age: &lt;input name=&#34;age3&#34; type=&#34;text&#34; /&gt;&lt;br/&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">                &lt;input type=&#34;submit&#34; /&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">              &lt;/form&gt;&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@post</span><span class="p">(</span><span class="s1">&#39;/plot&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">submit</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># grab data from form</span>
</span></span><span class="line"><span class="cl">    <span class="n">name1</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;name1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">age1</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;age1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name2</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;name2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">age2</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;age2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">name3</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;name3&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">age3</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;age3&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">Data</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">        <span class="n">Bar</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="n">name1</span><span class="p">,</span> <span class="n">name2</span><span class="p">,</span> <span class="n">name3</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="n">age1</span><span class="p">,</span> <span class="n">age2</span><span class="p">,</span> <span class="n">age3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># make api call</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">py</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="s1">&#39;basic-bar&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">response</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">template</span><span class="p">(</span><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            &lt;h1&gt;Congrats!&lt;/h1&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">            &lt;div&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">              View your graph here: &lt;a href=&#34;{{response}}&#34;&lt;/a&gt;{{response}}
</span></span></span><span class="line"><span class="cl"><span class="s1">            &lt;/div&gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">            &#39;&#39;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">response</span><span class="o">=</span><span class="n">response</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;PORT&#39;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><p>这里发生了什么？</p>
<ul>
<li>第一个函数 <code>form()</code> 创建一个 HTML 表单，用于捕获制作简单条形图所需的数据。</li>
<li>与此同时，第二个函数 <code>submit()</code> 抓取表单输入，将它们分配给变量，然后调用plot.ly API，传递我们的凭据和数据，以生成新图表。确保将我的用户名和 API 密钥替换为您自己的凭据。不要使用我的。不起作用。</li>
</ul>
<h3 id="测试">测试</h3>
<p>在本地运行您的应用程序， <code>python app.py</code> ，并将浏览器指向 <a href="http://localhost:8080/plot">http://localhost:8080/plot</a>。</p>
<p>输入三个人的姓名及其各自的年龄。按“提交”，如果一切顺利，您应该会看到一条祝贺消息和一个 URL。单击 URL 查看您的图表：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/plotly-ages-barplot.c0b4b77d41cf.png" alt="Plotly ages bar plot"  />
</p>
<p>如果您收到此消息的 500 错误 - <code>Aw, snap! Looks like you supplied the wrong API key. Want to try again? You can always view your key at https://plot.ly/api/key. When you display your key at https://plot.ly/api/key, make sure that you're logged in as realpython.</code> - 您需要更新您的 API 密钥。</p>
<blockquote>
<p>另外，如果这是一个真正的、面向客户端的应用程序，您会希望比这更优雅地处理错误。仅供参考。</p>
</blockquote>
<h2 id="群组分析">群组分析</h2>
<p>接下来，让我们看一个更复杂的示例，为以下队列分析统计数据创建图表：</p>
<table>
<thead>
<tr>
<th>Cohort</th>
<th>2011</th>
<th>2012</th>
<th>2013</th>
<th>2014</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>310</td>
<td>348</td>
<td>228</td>
<td>250</td>
</tr>
<tr>
<td>1</td>
<td>55</td>
<td>157</td>
<td>73</td>
<td>34</td>
</tr>
<tr>
<td>2</td>
<td>18</td>
<td>37</td>
<td>33</td>
<td>34</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>4</td>
<td>4</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>我们将基于同一个应用程序 - app.py 进行构建，但创建一个新文件：打开 app.py，然后“另存为”cohort.py。</p>
<p>首先升级到<a href="http://bottlepy.org/docs/dev/stpl.html">简单模板引擎</a>，这样我们就可以将样式和 Javascript 文件添加到我们的模板中。添加一个名为“views”的新文件夹，然后在该目录中创建一个名为 template.tpl 的新文件。将以下代码添加到该文件中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{ title }}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">media</span><span class="o">=</span><span class="s">&#34;screen&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">body</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">padding</span><span class="p">:</span> <span class="mi">60</span><span class="kt">px</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Graph via Plot.ly<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;form&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/plot&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>2011<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-group&#34;</span> <span class="err">&#34;</span><span class="na">col-md-2</span><span class="err">&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y01&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y02&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 1&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y03&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 2&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y04&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 3&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>2012<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-group&#34;</span> <span class="err">&#34;</span><span class="na">col-md-2</span><span class="err">&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y11&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y12&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 1&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y13&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 2&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y44&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 3&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>2013<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-group&#34;</span> <span class="err">&#34;</span><span class="na">col-md-2</span><span class="err">&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y21&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y22&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 1&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y23&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 2&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y24&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 3&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>2014<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-group&#34;</span> <span class="err">&#34;</span><span class="na">col-md-2</span><span class="err">&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y31&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y32&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 1&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y33&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 2&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;number&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;Y34&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Cohort 3&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">              <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">td</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">          <span class="p">&lt;/</span><span class="nt">tr</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">table</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-default&#34;</span><span class="p">&gt;</span>Submit<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;http://code.jquery.com/jquery-1.10.2.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>您可能知道，这看起来就像一个 HTML 文件。不同之处在于我们可以使用语法 - <code>{{ python_variable }}</code> 将 Python 变量传递到文件。</p>
<p>创建 data.json 文件并添加您的 Plot.ly 用户名和 API 密钥。您可以在 <a href="https://github.com/mjhea0/bottle-plotly-python/blob/master/bottle/data_sample.json">此处</a> 查看示例文件。</p>
<p>将以下代码添加到 cohort.py 中，以便在我们进行 API 调用时访问 data.json 以使用凭据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">run</span><span class="p">,</span> <span class="n">template</span><span class="p">,</span> <span class="n">get</span><span class="p">,</span> <span class="n">post</span><span class="p">,</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.plotly</span> <span class="k">as</span> <span class="nn">py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">plotly.graph_objs</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># grab username and key from config/data file</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data.json&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">config_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">config_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">config_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">username</span> <span class="o">=</span> <span class="n">config_data</span><span class="p">[</span><span class="s2">&#34;user&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="n">config_data</span><span class="p">[</span><span class="s2">&#34;key&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">py</span><span class="o">.</span><span class="n">sign_in</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span></span></code></pre></div><p>现在我们不必将我们的密钥暴露给整个宇宙。只要确保使其不受版本控制即可。</p>
<p>接下来更新功能：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">bottle</span> <span class="kn">import</span> <span class="n">run</span><span class="p">,</span> <span class="n">template</span><span class="p">,</span> <span class="n">get</span><span class="p">,</span> <span class="n">post</span><span class="p">,</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">plotly.plotly</span> <span class="k">as</span> <span class="nn">py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">plotly.graph_objs</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># grab username and key from config/data file</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;data.json&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">config_file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">config_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">config_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">username</span> <span class="o">=</span> <span class="n">config_data</span><span class="p">[</span><span class="s2">&#34;user&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="n">config_data</span><span class="p">[</span><span class="s2">&#34;key&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">py</span><span class="o">.</span><span class="n">sign_in</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@get</span><span class="p">(</span><span class="s1">&#39;/plot&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">form</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">template</span><span class="p">(</span><span class="s1">&#39;template&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Plot.ly Graph&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@post</span><span class="p">(</span><span class="s1">&#39;/plot&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">submit</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># grab data from form</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y01</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y01&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y02</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y02&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y03</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y03&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y04</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y04&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y11</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y11&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y12</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y12&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y13</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y13&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y14</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y14&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y21</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y21&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y22</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y22&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y23</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y23&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y24</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y24&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y31</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y31&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y32</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y32&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y33</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y33&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Y34</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">forms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;Y34&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">trace1</span> <span class="o">=</span> <span class="n">Scatter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="n">Y01</span><span class="p">,</span> <span class="n">Y02</span><span class="p">,</span> <span class="n">Y03</span><span class="p">,</span> <span class="n">Y04</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace2</span> <span class="o">=</span> <span class="n">Scatter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="n">Y11</span><span class="p">,</span> <span class="n">Y12</span><span class="p">,</span> <span class="n">Y13</span><span class="p">,</span> <span class="n">Y14</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace3</span> <span class="o">=</span> <span class="n">Scatter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="n">Y21</span><span class="p">,</span> <span class="n">Y22</span><span class="p">,</span> <span class="n">Y23</span><span class="p">,</span> <span class="n">Y24</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">trace4</span> <span class="o">=</span> <span class="n">Scatter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span><span class="o">=</span><span class="p">[</span><span class="n">Y31</span><span class="p">,</span> <span class="n">Y32</span><span class="p">,</span> <span class="n">Y33</span><span class="p">,</span> <span class="n">Y34</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">Data</span><span class="p">([</span><span class="n">trace1</span><span class="p">,</span> <span class="n">trace2</span><span class="p">,</span> <span class="n">trace3</span><span class="p">,</span> <span class="n">trace4</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># api call</span>
</span></span><span class="line"><span class="cl">    <span class="n">plot_url</span> <span class="o">=</span> <span class="n">py</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="s1">&#39;basic-line&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">template</span><span class="p">(</span><span class="s1">&#39;template2&#39;</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s1">&#39;Plot.ly Graph&#39;</span><span class="p">,</span> <span class="n">plot_url</span><span class="o">=</span><span class="nb">str</span><span class="p">(</span><span class="n">plot_url</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;PORT&#39;</span><span class="p">,</span> <span class="mi">8080</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><p>请注意 <code>return</code> 声明。我们传入模板的名称以及任何变量。让我们创建一个名为 template2.tpl 的新模板：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>{{ title }}<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">media</span><span class="o">=</span><span class="s">&#34;screen&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">body</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">padding</span><span class="p">:</span> <span class="mi">60</span><span class="kt">px</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Graph via Plot.ly<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/plot&#34;</span><span class="p">&gt;&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-default&#34;</span><span class="p">&gt;</span>Back<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">br</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">iframe</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;igraph&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">{{plot_url}}</span> <span class="na">width</span><span class="o">=</span><span class="s">&#34;900&#34;</span> <span class="na">height</span><span class="o">=</span><span class="s">&#34;450&#34;</span> <span class="na">seamless</span><span class="o">=</span><span class="s">&#34;seamless&#34;</span> <span class="na">scrolling</span><span class="o">=</span><span class="s">&#34;no&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">iframe</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;http://code.jquery.com/jquery-1.10.2.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;http://netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>因此，iframe 允许我们更新表单，然后显示实际内容/图表以及更新后的更改。换句话说，我们不必离开站点即可查看图表。</p>
<p>运行。将值添加到表单中。然后提交。您的图表现在应如下所示：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/plotly-final-graph.4c43b1ac0563.png" alt="Plotly example final graph"  />
</p>
<h2 id="结论">结论</h2>
<p>您可以从此<a href="https://github.com/mjhea0/bottle-plotly-python">存储库</a>中获取所有文件。</p>
<p>下次见！</p>
<p>原文链接：</p>
<ul>
<li><a href="https://realpython.com/developing-with-bottle-part-1/">https://realpython.com/developing-with-bottle-part-1/</a></li>
<li><a href="https://realpython.com/developing-with-bottle-part-2-plot-ly-api">https://realpython.com/developing-with-bottle-part-2-plot-ly-api</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-24｜如果没有疼痛</title>
      <link>https://blog.chensoul.com/posts/2023/06/21/weekly_review_24/</link>
      <pubDate>Wed, 21 Jun 2023 17:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/21/weekly_review_24/</guid>
      <description>前言 本篇是对 2023-06-12 到 2023-06-18 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 读书、健身、投资、帮朋友、陪家人。 读书 本周尚未读</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-06-12</code> 到 <code>2023-06-18</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<blockquote>
<p>读书、健身、投资、帮朋友、陪家人。</p>
</blockquote>
<h2 id="读书">读书</h2>
<p>本周尚未读书。</p>
<h2 id="健身">健身</h2>
<blockquote>
<p>我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2个省份 2个城市。更多跑步数据在我的 <a href="https://run.chensoul.com/">跑步</a> 主页。</p>
</blockquote>
<p>本周尚未跑步。</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 1264 元，明细如下：</p>
<ul>
<li>
<p>6月18日：338元</p>
</li>
<li>
<p>6月17日：508元</p>
</li>
<li>
<p>6月16日：262元</p>
</li>
<li>
<p>6月15日：27元</p>
</li>
<li>
<p>6月14日：41元</p>
</li>
<li>
<p>6月13日：40元</p>
</li>
<li>
<p>6月12日：48元</p>
</li>
</ul>
<h2 id="陪家人">陪家人</h2>
<p>本周因为老爸出院后需要人照料，所以我每天早晚往返于家（阳逻）和公司（光谷）之间。每天早上五点多就醒了，然后煮粥、招呼老爸吃饭喝药，六点半出门开车走三环去上班。这周请婶娘白天帮忙照顾老爸，主要是中午和晚上老爸要吃饭和喝药。我早上出门晚、晚上下班回来再照顾老爸。老爸胃溃疡，需要修养一个多月，另外最近痛风发作，身体多处关节疼痛。因为吃西药和打针都会伤胃，所以只能吃中药。中药见效慢，需要时间。而婶娘身上也有病，不能长期照顾，如果老爸这周痛风不能恢复，那下周只能老婆放下手上工作回来照顾老爸。老婆工作也是非常忙碌，也不能照顾太久，估计也就一个星期。如果过了一个星期，老爸还是不能恢复、不能生活自理，真不知道该怎么办了！很久之前就想到老爸可能会成为我的负担，影响我的工作，没有想到会来的这么快。有时候想抱怨，但抱怨有什么用？面对眼前的这一切，只能迎难面对。造成眼前这样的现状，我自己有一部分责任。都只怪我平时没有关心老爸，没有叮嘱老爸不要喝酒，在老爸身边陪伴的时间太少了。</p>
<p>周六去给岳父岳母送端午节，周日回去看望癌症转移到全身的六舅。六舅是乳腺癌，在经历了去年新冠疫情之后，癌细胞转移到肺部。年后没有引起足够的重视，直到痛的不行的时候才去医院做手术，错过了最佳治疗时机。上一次见到六舅还是四月份的时候，我开车带老婆一起回去看望老爸。那时候六舅还在菜园里面朝黄土背朝天，六舅给了我一些莴笋、包菜，老婆给六舅3百块钱，六舅硬是不要，拉扯了半天。走之前，六舅还叫何舅塞了20多个鸡蛋给我们。这次，再见六舅，六舅躺在床上全身疼痛，只能吃些流食，意识模糊，知道谁来看望她，却不能说话。每次开车上下班的时候，想起六舅这样子，心里就很难受，眼泪直打转。面对生老病死，成年人的崩溃只在一瞬间。昨日还在你面前混蹦乱跳的人，明天可能就不在了。为了不留遗憾，要善待身边的每一位亲人，常回家看看。感谢老婆总是提醒我要回家看望老爸，正是因为这个，每次回家看望老爸的时候，我都会去看下六舅。</p>
<p>如果没有疼痛，老爸和六舅就不会痛苦了，身边的人也就不会心痛。</p>
<h2 id="工作">工作</h2>
<p>最近在学习的内容清单：</p>
<ul>
<li><a href="https://github.com/clxering/Effective-Java-3rd-edition-Chinese-English-bilingual/tree/dev">Effective Java（第 3 版）</a></li>
<li><a href="https://java-design-patterns.com/zh/">Java Design Patterns (中文)</a></li>
<li><a href="https://realpython.com/">Real Python</a></li>
</ul>
<p>本周完成四篇博客：</p>
<ul>
<li>
<p><a href="/posts/2023/06/21/modern-css-explained-for-dinosaurs/">[译]为恐龙解释现代CSS</a></p>
</li>
<li>
<p><a href="/posts/2023/06/20/modern-html-explained-for-dinosaurs/">[译]为恐龙解释现代HTML</a></p>
</li>
<li>
<p><a href="/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/">[译]为恐龙解释现代JavaScript</a></p>
</li>
<li>
<p><a href="/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/">《Effective Java 3》笔记15：尽量减少类和成员的可访问性</a></p>
</li>
</ul>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">Memos</a> 中。我写了一个 Python 脚本从 Memos 读取最近一周带有 <code>#memos</code> 标签的记录，分享到这里。</p>
<ul>
<li>📌<code>2023-06-14</code> 现代 JavaScript 教程，以最新的 JavaScript 标准为基准。通过简单但足够详细的内容，为你讲解从基础到高阶的 JavaScript 相关知识。 <a href="https://zh.javascript.info/">https://zh.javascript.info/</a>  <code>#memos</code> <code>#javascript</code></li>
<li>📌<code>2023-06-14</code> 推荐几个远程办公招聘网站，国外的 <a href="https://nomadlist.com/">https://nomadlist.com/</a> <a href="https://remotive.com/">https://remotive.com/</a> <a href="https://remoteok.com/">https://remoteok.com/</a> <a href="https://www.huntsbot.com/">https://www.huntsbot.com/</a> <a href="https://www.freelancer.cn/jobs">https://www.freelancer.cn/jobs</a>  <code>#memos</code></li>
<li>📌<code>2023-06-14</code> 拒绝 996，谈谈远程办公一年多的感受  <a href="https://www.v2ex.com/t/947355">https://www.v2ex.com/t/947355</a>    <code>#memos</code></li>
<li>📌<code>2023-06-14</code> 新手入门Python该如何学，学什么，学多久？看完这些你就明白了<code>#memos</code> <code>#python</code> <a href="https://blog.csdn.net/libaiup/article/details/131083707">https://blog.csdn.net/libaiup/article/details/131083707</a></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]为恐龙解释现代CSS</title>
      <link>https://blog.chensoul.com/posts/2023/06/21/modern-css-explained-for-dinosaurs/</link>
      <pubDate>Wed, 21 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/21/modern-css-explained-for-dinosaurs/</guid>
      <description>奇怪的是，CSS 被认为是作为 Web 开发人员最容易学习和最难学习的语言之一。开始使用它当然很容易 - 您可以定义样式属性和值以应用于特定元素，然后&amp;h</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://peterxjang.com/img/1__kXsiGLMHSS4jUx4W6yBOlw.png" alt="Dinosaur comic panel 1"  />
</p>
<p>奇怪的是，CSS 被认为是作为 Web 开发人员最容易学习和最难学习的语言之一。开始使用它当然很容易 - 您可以定义样式属性和值以应用于特定元素，然后&hellip;&hellip;这几乎就是您开始所需的一切！但是，对于大型项目，以有意义的方式组织 CSS 会变得纠结和复杂。更改任何一行 CSS 以设置一个页面上元素的样式通常会导致其他页面上的元素发生意外更改。</p>
<p>为了处理 CSS 固有的复杂性，已经建立了各种不同的最佳实践。问题在于，对于哪些最佳实践实际上是最好的，没有任何强烈的共识，其中许多似乎完全相互矛盾。如果你是第一次尝试学习 CSS，至少可以说这可能会让人迷失方向。</p>
<p>本文的目的是提供一个历史背景，说明 CSS 方法和工具如何在 2018 年发展到今天的样子。通过了解这段历史，将更容易理解每种方法以及如何使用它们来为您带来好处。让我们开始吧！</p>
<blockquote>
<p>更新：我制作了本文的新视频课程版本，该版本更深入地介绍了材料，请在此处查看：
<a href="https://firstclass.actualize.co/p/modern-css-explained-for-dinosaurs">https://firstclass.actualize.co/p/modern-css-explained-for-dinosaurs</a></p>
</blockquote>
<h3 id="使用-css-进行基本样式设置">使用 CSS 进行基本样式设置</h3>
<p>让我们从一个基本网站开始，仅使用一个简单的 <code>index.html</code> 文件链接到一个单独的 <code>index.css</code> 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Modern CSS<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;index.css&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;</span>This is the header.<span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">main</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>This is the main content.<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">nav</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>This is the navigation section.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">nav</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">aside</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>This is an aside section.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">aside</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">footer</span><span class="p">&gt;</span>This is the footer.<span class="p">&lt;/</span><span class="nt">footer</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>现在我们在 HTML 中没有使用任何类或 ID，只是 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element#Content_sectioning">语义标签</a>。没有任何 CSS，网站看起来像这样（使用占位符文本）：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__MwOy9E5LacvhGEtIUb9pXQ.png" alt="Example webpage without styling"  />
</p>
<p>功能齐全，但不是很漂亮。我们可以添加 CSS 来改进 <code>index.css</code> 中的基本排版：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="c">/* BASIC TYPOGRAPHY                       */</span>  
</span></span><span class="line"><span class="cl"><span class="c">/* from https://github.com/oxalorg/sakura */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">html</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="mf">62.5</span><span class="kt">%</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-family</span><span class="p">:</span> <span class="kc">serif</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">body</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="mf">1.8</span><span class="kt">rem</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">line-height</span><span class="p">:</span> <span class="mf">1.618</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">max-width</span><span class="p">:</span> <span class="mi">38</span><span class="kt">em</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">margin</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#4a4a4a</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#f9f9f9</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">13</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">media</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">684px</span><span class="o">)</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">body</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="k">font-size</span><span class="p">:</span> <span class="mf">1.53</span><span class="kt">rem</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">media</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">382px</span><span class="o">)</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">body</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="k">font-size</span><span class="p">:</span> <span class="mf">1.35</span><span class="kt">rem</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">line-height</span><span class="p">:</span> <span class="mf">1.1</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-family</span><span class="p">:</span> <span class="n">Verdana</span><span class="p">,</span> <span class="n">Geneva</span><span class="p">,</span> <span class="kc">sans-serif</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-weight</span><span class="p">:</span> <span class="mi">700</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">overflow-wrap</span><span class="p">:</span> <span class="kc">break-word</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">word-wrap</span><span class="p">:</span> <span class="kc">break-word</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="kp">-ms-</span><span class="k">word-break</span><span class="p">:</span> <span class="n">break-all</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">word-break</span><span class="p">:</span> <span class="kc">break-word</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="kp">-ms-</span><span class="k">hyphens</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="kp">-moz-</span><span class="k">hyphens</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="kp">-webkit-</span><span class="k">hyphens</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">hyphens</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">h1</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="mf">2.35</span><span class="kt">em</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">h2</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="mi">2</span><span class="kt">em</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">h3</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="mf">1.75</span><span class="kt">em</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">h4</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="mf">1.5</span><span class="kt">em</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">h5</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="mf">1.25</span><span class="kt">em</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">h6</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="mi">1</span><span class="kt">em</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在这里，大多数 CSS 都是样式排版（具有大小，行高等的字体），并带有一些颜色样式和居中布局。你必须研究设计才能知道要为每个属性选择的好值（这些样式来自 <a href="https://github.com/oxalorg/sakura">sakura.css</a>），但这里应用的 CSS 本身并不太复杂。结果如下所示：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1____rykiEopx6MCsnOAAcT8MA.png" alt="Example webpage with basic typography styling"  />
</p>
<p>如此不同！这就是 CSS 的承诺 - 一种向文档添加样式的简单方法，无需编程或复杂的逻辑。不幸的是，当我们使用 CSS 不仅仅是排版和颜色时，事情开始变得更加毛茸茸（我们将在下面解决）。</p>
<h3 id="使用-css-进行布局">使用 CSS 进行布局</h3>
<p>在 1990 年代，在 CSS 被广泛采用之前，在页面上布局内容的选项并不多。HTML 最初被设计为一种创建普通文档的语言，而不是带有侧边栏，列等的动态网站。在早期，布局通常使用 HTML 表格完成——整个网页将位于一个表格中，可用于在行和列中组织内容。这种方法奏效了，但缺点是内容和呈现的紧密耦合——如果你想改变网站的布局，就需要重写大量的 HTML。</p>
<p>一旦 CSS 进入场景，就强烈推动将内容（用 HTML 编写）与演示（用 CSS 编写）分开。因此，人们找到了将所有布局代码从 HTML（不再有表格）移动到 CSS 中的方法。需要注意的是，与 HTML 一样，CSS 也不是真正设计为在页面上布局内容，因此早期尝试这种关注点分离很难优雅地实现。</p>
<p>让我们通过上面的例子来看看这在实践中是如何工作的。在我们定义任何 CSS 布局之前，我们将首先重置任何边距和填充（这会影响布局计算），并为部分提供不同的颜色（不是为了让它漂亮，而是为了让每个部分在测试不同的布局时在视觉上脱颖而出）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="c">/* RESET LAYOUT AND ADD COLORS */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">body</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">margin</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">max-width</span><span class="p">:</span> <span class="kc">inherit</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">background</span><span class="p">:</span> <span class="mh">#fff</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#4a4a4a</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">header</span><span class="o">,</span> <span class="nt">footer</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">font-size</span><span class="p">:</span> <span class="kc">large</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">text-align</span><span class="p">:</span> <span class="kc">center</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mf">0.3</span><span class="kt">em</span> <span class="mi">0</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">background-color</span><span class="p">:</span> <span class="mh">#4a4a4a</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">color</span><span class="p">:</span> <span class="mh">#f9f9f9</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">nav</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">background</span><span class="p">:</span> <span class="mh">#eee</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">main</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">background</span><span class="p">:</span> <span class="mh">#f9f9f9</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">aside</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">background</span><span class="p">:</span> <span class="mh">#eee</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>现在网站暂时看起来像：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__Ii8mtqbLaS5GIB3VJTpqSw.png" alt="Example website with css reset"  />
</p>
<center>单击<a href='https://codepen.io/peterxjang/pen/jZWzEV?editors=1100'>此处</a>查看实时示例</center>
<p>现在，我们已准备好使用 CSS 在页面上布局内容。我们将按时间顺序介绍三种不同的方法，从经典的基于 float 的布局开始。</p>
<h4 id="基于-float-的布局">基于 float 的布局</h4>
<p>CSS float 属性最初是为了在左侧或右侧的文本列内浮动图像（您经常在报纸上看到的）。2000 年代初期的 Web 开发人员利用了这样一个事实，即您不仅可以浮动图像，还可以浮动任何元素，这意味着您可以通过浮动整个内容 div 来创建行和列的错觉。但同样，浮动不是为此目的而设计的，因此很难以一致的方式创造这种错觉。</p>
<p>2006年，<a href="https://alistapart.com/">A List Apart </a>发表了一篇受欢迎的文章《<a href="https://alistapart.com/article/holygrail">寻找圣杯</a>》，其中概述了一种详细而彻底的方法来创建所谓的圣杯布局 - 一个页眉，三列和一个页脚。认为听起来相当简单的布局被称为圣杯是相当疯狂的，但这确实是当时使用纯 CSS 创建一致的布局是多么困难。</p>
<p>下面是基于该文章中描述的技术的示例的基于 float 的布局：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="c">/* FLOAT-BASED LAYOUT */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">body</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding-left</span><span class="p">:</span> <span class="mi">200</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding-right</span><span class="p">:</span> <span class="mi">190</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">min-width</span><span class="p">:</span> <span class="mi">240</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">header</span><span class="o">,</span> <span class="nt">footer</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">margin-left</span><span class="p">:</span> <span class="mi">-200</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">margin-right</span><span class="p">:</span> <span class="mi">-190</span><span class="kt">px</span><span class="p">;</span>     
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">main</span><span class="o">,</span> <span class="nt">nav</span><span class="o">,</span> <span class="nt">aside</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">position</span><span class="p">:</span> <span class="kc">relative</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">float</span><span class="p">:</span> <span class="kc">left</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">main</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">20</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">width</span><span class="p">:</span> <span class="mi">100</span><span class="kt">%</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">nav</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">width</span><span class="p">:</span> <span class="mi">180</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">right</span><span class="p">:</span> <span class="mi">240</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">margin-left</span><span class="p">:</span> <span class="mi">-100</span><span class="kt">%</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">aside</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">width</span><span class="p">:</span> <span class="mi">130</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">margin-right</span><span class="p">:</span> <span class="mi">-100</span><span class="kt">%</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">footer</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">clear</span><span class="p">:</span> <span class="kc">both</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">*</span> <span class="nt">html</span> <span class="nt">nav</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">left</span><span class="p">:</span> <span class="mi">150</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>看看C SS，你可以看到有很多技巧需要让它工作（负边距， <code>clear: both</code> 属性，硬编码宽度计算等）——这篇 <a href="https://alistapart.com/article/holygrail">文章</a> 很好地详细解释了每个原因。结果如下所示：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1____2LrWDjxL8Q33fL6Ci4hIw.png" alt="Example website with float based layout"  />
</p>
<center>单击<a href='https://codepen.io/peterxjang/pen/VQeXYg?editors=1100'>此处</a>查看实时示例</center>
<p>这很好，但您可以从颜色中看到三列的高度不相等，并且页面没有填满屏幕的高度。这些问题是基于浮动的方法所固有的。浮动所能做的就是将内容放在一个部分的左侧或右侧——CSS 无法推断其他部分中内容的高度。这个问题直到多年后才有了直接的解决方案，采用了基于弹性框的布局。</p>
<h4 id="基于弹性框的布局">基于弹性框的布局</h4>
<p>flexbox CSS 属性于 2009 年首次提出，但直到 2015 年左右才被广泛采用。Flexbox 旨在定义空间在单个列或行中的分布方式，与使用浮动相比，这使其成为定义布局的更好候选项。这意味着在使用基于浮动的布局大约十年之后，Web开发人员终于能够使用 CSS 进行布局，而无需使用浮动所需的技巧。</p>
<p>下面是基于弹性框的示例布局，基于站点上描述的技术 <a href="https://philipwalton.github.io/solved-by-flexbox/demos/holy-grail/">由弹性框解决</a> （一个展示不同弹性框示例的流行资源）。请注意，为了使 flexbox 工作，我们需要在 HTML 中的三列周围增加一个包装器 div：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Modern CSS<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;index.css&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">header</span><span class="p">&gt;</span>This is the header.<span class="p">&lt;/</span><span class="nt">header</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">main</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>This is the main content.<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">nav</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>This is the navigation section.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">nav</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">aside</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">h4</span><span class="p">&gt;</span>This is an aside section.<span class="p">&lt;/</span><span class="nt">h4</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>...<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">aside</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">footer</span><span class="p">&gt;</span>This is the footer.<span class="p">&lt;/</span><span class="nt">footer</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>这是 CSS 中的弹性框代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="c">/* FLEXBOX-BASED LAYOUT */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">body</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">min-height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">vh</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">flex-direction</span><span class="p">:</span> <span class="kc">column</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="nc">container</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">display</span><span class="p">:</span> <span class="kc">flex</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">flex</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">main</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">flex</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">20</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">nav</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">flex</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">180</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">order</span><span class="p">:</span> <span class="mi">-1</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">aside</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">flex</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">130</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>也就是说，与基于浮动的布局方法相比，更紧凑！flexbox 的属性和值乍一看有点令人困惑，但它消除了对许多技巧的需求，例如基于浮动的布局所必需的负边距——这是一个巨大的胜利。结果如下所示：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__I6qa6O31X__jlilGCrcSTsQ.png" alt="Example website with flexbox based layout"  />
</p>
<center>单击<a href='https://codepen.io/peterxjang/pen/xYZWGz?editors=1100'>此处</a>查看实时示例</center>
<p>好多了！这些列的高度都相等，并占据页面的整个高度。从某种意义上说，这似乎是完美的，但这种方法有几个小缺点。一个是浏览器支持 - 目前每个现代浏览器都支持f lexbox，但一些较旧的浏览器永远不会。幸运的是，浏览器供应商正在加大力度终止对这些旧浏览器的支持，为网页设计师提供更一致的开发体验。另一个缺点是我们需要将 <code>&lt;div class=&quot;container&quot;&gt;</code> 添加到标记中——避免它会很好。在理想的世界中，任何 CSS 布局都根本不需要更改 HTML 标记。</p>
<p>最大的缺点是 CSS 本身的代码 - flexbox 消除了许多浮动黑客，但代码并不像定义布局那样富有表现力。很难阅读 flexbox CSS 并直观地理解所有元素在页面上的布局方式。这会导致在编写基于 flexbox 的布局时进行大量猜测和检查。</p>
<p>再次需要注意的是，flexbox 旨在将元素间隔在单个列或行内 - 它不是为整个页面布局设计的！尽管它做了一个有用的工作（比基于浮动的布局好得多），但专门开发了不同的规范来处理具有多行和多列的布局。此规范称为 CSS 网格。</p>
<h4 id="基于网格的布局">基于网格的布局</h4>
<p>CSS 网格于 2011 年首次提出（在 flexbox 提案之后不久），但花了很长时间才在浏览器中得到广泛采用。截至2018年初，大多数现代浏览器都支持 CSS 网格（甚至比一两年前有了巨大的改进）。</p>
<p>下面是基于此 <a href="https://css-tricks.com/css-grid-one-layout-multiple-ways/">CSS 技巧文章</a> 中的第一种方法的示例的基于网格的布局。请注意，对于此示例，我们可以摆脱必须为基于 flexbox 的布局添加的 <code>&lt;div class=&quot;container&quot;&gt;</code> — 我们可以简单地使用原始 HTML，而无需修改。以下是 CSS 的外观：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="c">/* GRID-BASED LAYOUT */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">body</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">display</span><span class="p">:</span> <span class="k">grid</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">min-height</span><span class="p">:</span> <span class="mi">100</span><span class="kt">vh</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-template-columns</span><span class="p">:</span> <span class="mi">200</span><span class="kt">px</span> <span class="mi">1</span><span class="n">fr</span> <span class="mi">150</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-template-rows</span><span class="p">:</span> <span class="n">min-content</span> <span class="mi">1</span><span class="n">fr</span> <span class="n">min-content</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">header</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-row</span><span class="p">:</span> <span class="mi">1</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-column</span><span class="p">:</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">4</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">nav</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-row</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-column</span><span class="p">:</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">main</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-row</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-column</span><span class="p">:</span> <span class="mi">2</span> <span class="o">/</span> <span class="mi">3</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">20</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">aside</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-row</span><span class="p">:</span> <span class="mi">2</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-column</span><span class="p">:</span> <span class="mi">3</span> <span class="o">/</span> <span class="mi">4</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">padding</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">10</span><span class="kt">px</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">footer</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-row</span><span class="p">:</span> <span class="mi">3</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="k">grid-column</span><span class="p">:</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">4</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>结果在视觉上与基于弹性框的布局相同。但是，这里的 CSS 在清楚地表达所需布局的意义上得到了很大的改进。列和行的大小和形状在正文选择器中定义，网格中的每个项目都由其位置直接定义。</p>
<p>可能令人困惑的一件事是 <code>grid-column</code> 属性，它定义了列的起点/终点。这可能会令人困惑，因为在此示例中，有 3 列，但数字范围从 1 到 4。当你看下面的图片时，它会变得更加清晰：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__GOJJrm9Mhp__Qr319Bc7V9Q.png" alt="Example website with grid based layout"  />
</p>
<center>单击<a href='https://codepen.io/peterxjang/pen/vdLROM?editors=1100'>此处</a>查看实时示例</center>
<p>第一列从 1 开始，到 2 结束，第二列从 2 开始，到 3 结束，第三列从 3 开始，到 4 结束。标题的 <code>grid-column</code> 为 <code>1 / 4</code> 以跨越整个页面，导航具有 <code>grid-column</code> of <code>1 / 2</code> 以跨越第一列，依此类推。</p>
<p>一旦你习惯了网格语法，它显然成为在 CSS 中表达布局的理想方式。基于网格的布局唯一真正的缺点是浏览器支持，在过去一年中再次有了很大的改进。CSS 网格作为 CSS 中第一个真正为布局而设计的工具的重要性怎么强调都不为过。从某种意义上说，网页设计师在制作创意布局时总是必须非常保守，因为到目前为止的工具一直很脆弱，使用各种黑客和解决方法。现在 CSS 网格已经存在，有可能出现以前从未有过的创意布局设计的新浪潮 - 激动人心的时代！</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__JGkKSd3Hs7Pq17Qt5xTEzw.png" alt="Dinosaur comic panel 2"  />
</p>
<h3 id="将-css-预处理器用于新语法">将 CSS 预处理器用于新语法</h3>
<p>到目前为止，我们已经介绍了使用 CSS 进行基本样式和布局。现在，我们将介绍为帮助改善将 CSS 作为语言本身使用的体验而创建的工具，从 CSS 预处理器开始。</p>
<p>CSS 预处理器允许您使用不同的语言编写样式，该语言被转换为浏览器可以理解的 CSS。这在浏览器实现新功能非常缓慢的时代至关重要。第一个主要的 CSS 预处理器是 <a href="http://sass-lang.com/">Sass</a>，于2006年发布。它具有新的简洁语法（缩进而不是括号，没有分号等），并添加了 CSS 中缺少的高级功能，例如变量，帮助程序函数和计算。下面是我们前面示例的颜色部分使用带有变量的 Sass 的样子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sass" data-lang="sass"><span class="line"><span class="cl"><span class="na">$dark-color</span><span class="o">:</span> <span class="mh">#4a4a4a</span>  
</span></span><span class="line"><span class="cl"><span class="na">$light-color</span><span class="o">:</span> <span class="mh">#f9f9f9</span>  
</span></span><span class="line"><span class="cl"><span class="na">$side-color</span><span class="o">:</span> <span class="mh">#eee</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">body</span>  
</span></span><span class="line"><span class="cl"><span class="err">  </span><span class="na">color</span><span class="o">:</span> <span class="nv">$dark-color</span>  
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nt">header</span><span class="o">,</span> <span class="nt">footer</span>  
</span></span><span class="line"><span class="cl"><span class="err">  </span><span class="na">background-color</span><span class="o">:</span> <span class="nv">$dark-color</span>  
</span></span><span class="line"><span class="cl"><span class="err">  </span><span class="na">color</span><span class="o">:</span> <span class="nv">$light-color</span>  
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="nt">main</span>  
</span></span><span class="line"><span class="cl"><span class="err">  </span><span class="na">background</span><span class="o">:</span> <span class="nv">$light-color</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">nav</span><span class="o">,</span> <span class="nt">aside</span>  
</span></span><span class="line"><span class="cl"><span class="err">  </span><span class="na">background</span><span class="o">:</span> <span class="nv">$side-color</span>
</span></span></code></pre></div><p>请注意如何使用 <code>$</code> 符号定义可重用变量，并删除括号和分号，从而使语法看起来更简洁。Sass 中更简洁的语法很好，但是像变量这样的功能在当时是革命性的，因为它们为编写干净和可维护的 CSS 开辟了新的可能性。</p>
<p>要使用 Sass，您需要 <a href="https://www.ruby-lang.org/en/documentation/installation/">安装 Ruby</a>，这是一种用于将 Sass 代码编译为常规 CSS 的编程语言。然后，您需要安装 <a href="http://sass-lang.com/install">Sass gem</a>，然后<a href="http://sass-lang.com/guide#topic-1">在命令行中运行命令</a>以将 <code>.sass</code> 文件转换为 <code>.css</code> 文件。下面是命令的外观示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sass --watch index.sass index.css
</span></span></code></pre></div><p>此命令会将编写在名为 <code>index.sass</code> 的文件中的 Sass 代码转换为名为 <code>index.css</code> 的文件中的常规 CSS（ <code>--watch</code> 参数告诉它在保存时输入更改时随时运行，这很方便）。</p>
<p>这个过程被称为构建步骤，这在 2006 年是一个相当大的进入障碍。如果您习惯了像 Ruby 这样的编程语言，那么这个过程非常简单。但是当时许多前端开发人员只使用 HTM L和 CSS，不需要任何这样的工具。因此，让某人学习整个生态系统以获得 CSS 预处理器提供的功能是一个很大的要求。</p>
<p>2009年，<a href="http://lesscss.org/">Less</a> CSS 预处理器发布。它也是用 Ruby 编写的，并提供了与 Sass 类似的功能。关键的区别在于语法，它被设计为尽可能接近 CSS。这意味着任何 CSS 代码都是有效的 Less 代码。下面是使用 Less 语法编写的相同示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">@dark-color: #4a4a4a;  
</span></span><span class="line"><span class="cl">@light-color: #f9f9f9;  
</span></span><span class="line"><span class="cl">@side-color: #eee;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">body {  
</span></span><span class="line"><span class="cl">  color: @dark-color;  
</span></span><span class="line"><span class="cl">}  
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">header, footer {  
</span></span><span class="line"><span class="cl">  background-color: @dark-color;  
</span></span><span class="line"><span class="cl">  color: @light-color;  
</span></span><span class="line"><span class="cl">}  
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">main {  
</span></span><span class="line"><span class="cl">  background: @light-color;  
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nav, aside {  
</span></span><span class="line"><span class="cl">  background: @side-color;  
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><p>它几乎相同（变量的前缀为 <code>@</code> 而不是 <code>$</code> ），但不像 Sass 示例那样漂亮，具有与 CSS 相同的大括号和分号。然而，它更接近 CSS 的事实使开发人员更容易采用它。2012年，Less 被重写为使用 JavaScript（特别是 <a href="https://nodejs.org/en/">Node.js</a>）而不是 Ruby 进行编译。这使得 Less 比它的 Ruby 同行更快，并且对已经在工作流程中使用 Node.js 的开发人员更具吸引力。</p>
<p>要将此代码转换为常规 CSS，您首先需要 <a href="https://nodejs.org/en/download/">安装 Node.js</a>，然后 <a href="http://lesscss.org/#using-less-installation">安装 Less</a>，然后运行如下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lessc index.less index.css
</span></span></code></pre></div><p>此命令会将在名为 <code>index.less</code> 的文件中编写的较少代码转换为名为 <code>index.css</code> 的文件中的常规 CSS。请注意， <code>lessc</code> 命令没有监视文件更改的方法（与 <code>sass</code> 命令不同），这意味着您需要安装不同的工具来自动监视和编译 <code>.less</code> 个文件，这增加了过程的复杂性。同样，对于习惯使用命令行工具的程序员来说，这并不困难，但对于只想使用 CSS 预处理器的其他人来说，这是一个重要的进入障碍。</p>
<p>随着 Less 获得思想份额，Sass 开发人员在 2010 年通过添加一个名为 <a href="http://sass-lang.com/documentation/file.SASS_CHANGELOG.html#SCSS__Sassy_CSS_">SCSS</a> 的新语法（这是一个类似于 Less 的 CSS 超集）进行了调整。他们还发布了 <a href="http://sass-lang.com/libsass">LibSass</a>，这是 Ruby Sass 引擎的 C/C++ 端口，这使得它更快，能够在各种语言中使用。</p>
<p>另一个替代的 CSS 预处理器是 <a href="http://stylus-lang.com/">Stylus</a>，它于2010年问世，用 Node.js 编写，与 Sass or Less 相比，它专注于更简洁的语法。通常关于 CSS 预处理器的讨论集中在这三种最流行的（Sass，Less 和 Stylus）上。最后，它们在提供的功能方面都非常相似，因此选择它们中的任何一个都不会出错。</p>
<p>然而，有些人认为 CSS 预处理器变得越来越不必要，因为浏览器终于开始实现它们的一些功能（如变量和计算）。此外，还有一种称为 CSS 后处理的不同方法，它有可能使 CSS 预处理器过时（显然并非没有争议），我们接下来将讨论。</p>
<h3 id="将-css-后处理器用于变革性功能">将 CSS 后处理器用于变革性功能</h3>
<p>CSS 后处理器使用 JavaScript 来分析您的 CSS 并将其转换为有效的 CSS。从这个意义上说，它与 CSS 预处理器非常相似 - 您可以将其视为解决相同问题的不同方法。关键的区别在于，虽然 CSS 预处理器使用特殊语法来标识需要转换的内容，但 CSS 后处理器可以解析常规 CSS 并转换它，而无需任何特殊语法。最好用一个例子来说明这一点。让我们看一下我们最初在上面定义的用于设置标题标签样式的 CSS 的一部分：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="kp">-ms-</span><span class="k">hyphens</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="kp">-moz-</span><span class="k">hyphens</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">  <span class="kp">-webkit-</span><span class="k">hyphens</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>    
</span></span><span class="line"><span class="cl">  <span class="k">hyphens</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>粗体中的项目称为供应商前缀。浏览器在实验性地添加新的 CSS 功能时会使用供应商前缀，从而为开发人员提供了一种在最终实现时使用这些新 CSS 属性的方法。这里的前缀 <code>-ms</code> 代表 Microsoft Internet Explorer， <code>-moz</code> 前缀代表 Mozilla Firefox， <code>-webkit</code> 前缀代表使用 webkit 渲染引擎的浏览器（如 Google Chrome、Safari 和较新版本的 Opera）。</p>
<p>记住输入所有这些不同的供应商前缀来使用这些 CSS 属性是非常烦人的。拥有一个可以根据需要自动放入供应商前缀的工具会很好。我们可以用 CSS 预处理器来实现这一点。例如，您可以使用 SCSS 执行以下操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-scss" data-lang="scss"><span class="line"><span class="cl"><span class="k">@mixin</span><span class="nf"> hyphens</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="na">-ms-hyphens</span><span class="o">:</span> <span class="nv">$value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">-moz-hyphens</span><span class="o">:</span> <span class="nv">$value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">-webkit-hyphens</span><span class="o">:</span> <span class="nv">$value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="na">hyphens</span><span class="o">:</span> <span class="nv">$value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">@include</span><span class="nd"> hyphens</span><span class="p">(</span><span class="ni">auto</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在这里，我们使用 <a href="http://sass-lang.com/guide#topic-6">Sass 的 mixin 功能</a>，它允许您定义一次 CSS 块并在其他任何地方重用它。当此文件编译为常规 CSS 时，任何 <code>@include</code> 语句都将替换为匹配 <code>@mixin</code> 的 CSS。总的来说，这不是一个糟糕的解决方案，但您负责在第一次为任何需要供应商前缀的 CSS 属性定义每个 mixin。这些 mixin 定义将需要维护，因为您可能希望在浏览器更新其 CSS 兼容性时删除不再需要的特定供应商前缀。</p>
<p>与其使用 mixins，不如简单地编写普通的 CSS 并让工具自动识别需要前缀的属性并相应地添加它们。CSS 后处理器能够做到这一点。例如，如果您将 <a href="http://postcss.org/">PostCSS</a> 与 <a href="https://github.com/postcss/autoprefixer">自动前缀插件</a> 一起使用，则可以编写完全正常的 CSS，而无需任何供应商前缀，并让后处理器完成其余的工作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">  <span class="k">hyphens</span><span class="p">:</span> <span class="kc">auto</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>当您在此代码上运行 CSS 后处理器时，结果是 <code>hyphens: auto;</code> 行被替换为所有适当的供应商前缀（如自动前缀插件中定义的那样，您不需要直接管理）。这意味着您可以编写常规 CSS，而不必担心任何兼容性或特殊语法，这很好！</p>
<p>除了 PostCSS 的自动前缀之外，还有一些插件可以让你做非常酷的事情。<a href="http://cssnext.io/">cssnext</a> 插件允许您使用实验性的 CSS 功能。<a href="https://github.com/css-modules/css-modules">CSS 模块 </a>插件会自动更改类以避免名称冲突。<a href="https://stylelint.io/">stylelint</a> 插件可识别 CSS 中的错误和不一致的约定。这些工具在过去一两年才真正开始起飞，展示了以前从未有过的开发人员工作流程！</p>
<p>然而，这一进展是要付出代价的。与使用 CSS 预处理器相比，安装和使用 CSS 后处理器（如 PostCSS）更为复杂。您不仅必须使用命令行安装和运行工具，还需要安装和配置单个插件并定义一组更复杂的规则（例如您要针对的浏览器等）。许多开发人员不是直接从命令行运行PostCSS，而是将其集成到可配置的构建系统中，如 <a href="https://github.com/postcss/postcss#runners">Grunt</a>，<a href="https://github.com/postcss/postcss#gulp">Gulp</a> 或 <a href="https://github.com/postcss/postcss#webpack">webpack</a>，这有助于管理您可能在前端工作流程中使用的所有不同构建工具。</p>
<blockquote>
<p>注意：如果您以前从未使用过现代前端构建系统，那么学习使现代前端构建系统工作的所有必要部分可能会非常不知所措。如果你想从头开始，请查看我的文章 <a href="https://peterxjang.com/blog/modern-javascript-explained-for-dinosaurs.html">Modern JavaScript Explain For Dinosaurs</a>，其中介绍了前端开发人员利用这些现代功能所需的所有 JavaScript 工具。</p>
</blockquote>
<p>值得注意的是，围绕 CSS 后处理器存在一些争论。有些人认为这个术语令人困惑（<a href="https://css-tricks.com/the-trouble-with-preprocessing-based-on-future-specs/">一种观点</a>认为它们都应该被称为 CSS 预处理器，<a href="https://medium.com/@ddprrt/deconfusing-pre-and-post-processing-d68e3bd078a3">另一种观点</a>是它们应该简单地称为 CSS 处理器等）。有些人认为 CSS 后处理器完全消除了对 CSS 预处理器的需求，有些人认为它们应该一起使用。无论如何，很明显，如果你有兴趣推动 CSS 的可能性，那么学习如何使用 CSS 后处理器是值得的。</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__53X7__j093ePj9MOxrkA5sw.png" alt="Dinosaur comic panels 3 and 4"  />
</p>
<h3 id="使用-css-方法实现可维护性">使用 CSS 方法实现可维护性</h3>
<p>像 CSS 预处理器和 CSS 后处理器这样的工具在改善 CSS 开发体验方面大有帮助。但是仅靠这些工具不足以解决维护大型 CSS 代码库的问题。为了解决这个问题，人们开始记录关于如何编写 CSS 的不同指南，通常称为 CSS 方法。</p>
<p>在我们深入研究任何特定的 CSS 方法之前，重要的是要了解是什么让 CSS 随着时间的推移难以维护。关键问题是 CSS 的全局性质 — 您定义的每个样式都全局应用于页面的每个部分。你的工作是提出一个详细的命名约定来维护唯一的类名，或者与 <a href="https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/">特异性规则</a> 争论，以确定应用哪种样式来应用任何给定的元素。CSS 方法提供了一种有组织的方式来编写 CSS，以避免这些带有大型代码库的痛点。让我们按时间顺序大致看一下一些流行的方法。</p>
<h4 id="oocss">OOCSS</h4>
<p><a href="https://github.com/stubbornella/oocss/wiki">OOCSS</a>（面向对象的CSS）于2009年首次提出，是一种围绕两个主要原则组织的方法论。第一个原则是分离结构和皮肤。这意味着定义结构（如布局）的 CSS 不应与定义皮肤的 CSS （如颜色、字体等）混合在一起。这样可以更轻松地“重新换肤”应用程序。第二个原则是单独的容器和内容。这意味着将元素视为可重用的对象，其关键思想是无论对象在页面上的位置如何，它都应该看起来相同。</p>
<p>OOCSS 提供了经过深思熟虑的指导方针，但对方法的细节不是很规范。后来的方法，如 SMACSS 采用了核心概念，并添加了更多细节，使其更容易上手。</p>
<h4 id="smacss">SMACSS</h4>
<p><a href="https://smacss.com/">SMACSS</a>（CSS 的可扩展和模块化架构）于 2011 年推出，作为一种基于在 5 个不同类别中编写 CSS 的方法——基本规则、布局规则、模块、状态规则和主题规则。SMACSS 方法还推荐了一些命名约定。对于布局规则，应在类名前面加上 <code>l-</code> 或 <code>layout-</code> 。对于状态规则，应在描述状态的类名（如 <code>is-hidden</code> 或 <code>is-collapsed</code> ）前面添加前缀。</p>
<p>与 OOCSS 相比，SMACSS 的方法有更多的细节，但在决定哪些 CSS 规则应该归入哪个类别时，它仍然需要仔细考虑。后来像 BEM 这样的方法取消了一些决策，使其更容易采用。</p>
<h4 id="bem">BEM</h4>
<p><a href="https://en.bem.info/">BEM</a>（块，元素，修饰符）于2010年推出，作为一种围绕将用户界面划分为独立块的想法组织的方法。块是可重用的组件（例如搜索表单，定义为 <code>&lt;form class=&quot;search-form&quot;&gt;&lt;/form&gt;</code> ）。元素是块的较小部分，不能单独重用（例如搜索表单中的按钮，定义为 <code>&lt;button class=&quot;search-form__button&quot;&gt;Search&lt;/button&gt;</code> ）。修饰符是定义块或元素的外观、状态或行为的实体（例如，定义为 <code>&lt;button class=&quot;search-form__button search-form__button--disabled&quot;&gt;Search&lt;/button&gt;</code> 的禁用搜索表单按钮）。</p>
<p>BEM 方法易于理解，具有特定的命名约定，允许新手应用它，而无需做出复杂的决策。某些人的缺点是类名可能非常冗长，并且不遵循 <a href="https://css-tricks.com/semantic-class-names/">编写语义类名</a> 的传统规则。后来的方法，如 Atomic CSS，将把这种非传统的方法带到一个全新的层次！</p>
<h4 id="atomic-css">Atomic CSS</h4>
<p><a href="https://www.smashingmagazine.com/2013/10/challenging-css-best-practices-atomic-approach/">Atomic CSS</a>（也称为函数式 CSS）于2014年推出，作为一种围绕创建小型单一用途类（名称基于视觉功能）的想法进行组织的方法。这种方法与 OOCSS，SMACS S和 BEM 完全相反 - Atomic CSS 不是将页面上的元素视为可重用的对象，而是完全忽略这些对象，并使用可重用的单一用途实用程序类来设置每个元素的样式。因此，您将拥有类似 <code>&lt;button class=&quot;f6 br3 ph3 pv2 white bg-purple hover-bg-light-purple&quot;&gt;Search&lt;/button&gt;</code> 的东西，而不是 <code>&lt;button class=&quot;search-form__button&quot;&gt;Search&lt;/button&gt;</code> 之类的东西。</p>
<p>如果你对这个例子的第一反应是惊恐地退缩，你并不孤单——许多人认为这种方法完全违反了既定的 CSS 最佳实践。但是，围绕质疑这些最佳实践在不同场景中的有效性的想法，已经有很多很好的讨论。本文很好地强调了传统的关注点分离最终如何创建依赖于 HTML 的 CSS（即使使用 BEM 等方法），而原子或函数式方法是创建依赖于 CSS 的 HTML。两者都没有错，但仔细检查后，您会发现 CSS 和 HTML 之间的真正关注点分离永远无法完全实现！</p>
<p>其他 CSS 方法论，如 JS中的CSS ，实际上接受了 CSS 和 HTML 将始终相互依赖的概念，导致了迄今为止最具争议的方法之一。</p>
<h4 id="js-中的-css">JS 中的 CSS</h4>
<p><a href="http://blog.vjeux.com/2014/javascript/react-css-in-js-nationjs.html">JS中的CSS </a> 于2014年引入，作为一种围绕定义 CSS 样式而不是在单独的样式表中而是直接在每个组件本身中定义的方法。它是作为 <a href="https://reactjs.org/">React JavaScript 框架</a> 的一种方法引入的（它已经采用了有争议的方法，即直接在 JavaScript 中定义组件的 HTML，而不是单独的 HTML 文件）。最初该方法使用内联样式，但后来的实现使用 JavaScript 生成 CSS（具有基于组件的唯一类名）并将其插入到带有样式标签的文档中。</p>
<p>JS 方法中的 CSS 再次完全违背了既定的 CSS 关注点分离最佳实践。这是因为随着时间的推移，我们使用网络的方式发生了巨大变化。最初， Web 主要由静态网站组成 - 在这里，HTML 内容与 CSS 表示的分离很有意义。如今，Web 用于创建动态 Web 应用程序 - 在这里，通过可重用的组件将事物分离出来是有意义的。</p>
<p>JS 中的CSS 的目标是能够定义具有硬边界的组件，这些边界由它们自己封装的 HTML/CSS/JS 组成，这样一个组件中的 CSS 就没有机会影响任何其他组件。React 是最早被广泛采用的框架之一，它推动了这些具有硬边界的组件，影响了其他主要框架，如 Angular、Ember 和 Vue.js 效仿。需要注意的是，JS 方法中的 CSS 是相对较新的，在这个领域有很多实验正在进行，因为开发人员试图在 Web 应用程序组件时代为 CSS 建立新的最佳实践。</p>
<p>很容易被许多不同的 CSS 方法所淹没，但重要的是要记住，没有一种正确的方法 - 你应该将它们视为不同的可能工具，当你有一个足够复杂的 CSS 代码库时，你可以使用。有不同的经过深思熟虑的选项可供选择，从长远来看，这个领域发生的所有实验都会使每个开发人员受益！</p>
<h3 id="结论">结论</h3>
<p>简而言之，这就是现代 CSS。我们介绍了使用 CSS 进行具有排版属性的基本样式，使用 CSS 进行布局（使用基于浮点、弹性框和网格的方法），使用 CSS 预处理器处理新语法（如变量和 mixins），使用 CSS 后处理器实现变革性功能（如添加供应商前缀），以及使用 CSS 方法实现可维护性以克服 CSS 样式的全局性质。我们没有机会深入研究CSS提供的许多其他功能，例如高级选择器，过渡，动画，形状，动态变量 - 列表不胜枚举。CSS 有很多内容需要涵盖 - 任何说它很容易的人可能都不知道它的一半！</p>
<p>现代 CSS 的使用肯定会令人沮丧，因为它继续快速变化和发展。但重要的是要记住 Web 如何随着时间的推移而发展的历史背景，很高兴知道有很多聪明的人愿意构建具体的工具和方法来帮助 CSS 最佳实践与 Web 一起发展。作为一名开发人员，这是一个激动人心的时刻，我希望这些信息可以作为路线图，在您的旅程中为您提供帮助！</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__7Z__JtjrzLil6LFrM7lrNJQ.png" alt="Dinosaur comic panel 5"  />
</p>
<p>再次特别感谢 <a href="https://twitter.com/ryanqnorth">@ryanqnorth</a> 的 <a href="http://www.qwantz.com/">恐龙漫画</a>，自2003年以来（当恐龙统治网络时），它提供了一些最好的荒诞幽默。</p>
<p>原文链接：<a href="https://peterxjang.com/blog/modern-css-explained-for-dinosaurs.html">https://peterxjang.com/blog/modern-css-explained-for-dinosaurs.html</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]为恐龙解释现代HTML</title>
      <link>https://blog.chensoul.com/posts/2023/06/20/modern-html-explained-for-dinosaurs/</link>
      <pubDate>Tue, 20 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/20/modern-html-explained-for-dinosaurs/</guid>
      <description>在三种主要的前端技术（ HTML，CSS 和 JavaScript ）中，HTML 仍然是最一致的。如果您唯一关心的是创建内容，那么 1990 年代的 HTML 文档看起来与 2018 年创建的文档</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://peterxjang.com/img/1__EEHKg3z__FAk0ipZDFuWKcw.png" alt="Dinosaur comic panel 1"  />
</p>
<p>在三种主要的前端技术（ HTML，CSS 和 JavaScript ）中，HTML 仍然是最一致的。如果您唯一关心的是创建内容，那么 1990 年代的 HTML 文档看起来与 2018 年创建的文档非常相似：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>My test page<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello there!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>你有带有标签和内容的元素，带有属性的标签——除了第一行的简化文档类型外，没有太大变化！然而，多年来，Web 开发已经发生了巨大的转变，从创建静态网站（专注于内容）到创建动态 Web 应用程序（专注于交互）——这是 Web 最初设计的目的。创建仍然语义和可访问的自定义用户界面，使用属性和工具提高性能，组织代码以进行重用和可维护性 - 现在有一组全新的问题在起作用。</p>
<p>本文的目的是提供一个历史背景，说明 HTML 如何在2018年演变成今天的语言。我们将从结构良好且易于访问的 HTML 的基础知识开始，就像古代的恐龙一样。然后，我们将介绍不同的技术来提高性能、响应能力和可维护性。CSS 和 JavaScript 将不可避免地进入这个对话；出于本文的目的，将从它们如何影响 HTML 本身编写的角度来介绍它们。通过了解这段历史，您将能够充分利用该语言经常被忽视的新旧功能。让我们开始吧！</p>
<h3 id="使用语义元素编写内容">使用语义元素编写内容</h3>
<p>让我们向前面的 HTML 示例添加更多内容。现在，我们将创建一个基本网站，其中包含一个带有链接和搜索输入的导航部分，一个用于显示一般网站信息的大型展示部分（通常称为英雄部分或 <a href="https://en.wikipedia.org/wiki/Jumbotron">巨型屏幕</a> ），文章的三列部分和一个版权信息的页脚部分。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>My test page<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Home<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Info<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>About<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">form</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Search&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>Search<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;main&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;hero&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello there!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>General info about the page goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Learn more<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;grid&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;column&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>First Heading<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Article content goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>View details<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;column&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Second Heading<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Article content goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>View details<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;column&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Third Heading<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Article content goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>View details<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;footer&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Copyright info goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>在这里，我们使用带有 <code>&lt;div&gt;</code> 、 <code>&lt;h1&gt;</code> 、 <code>&lt;h2&gt;</code> 、 <code>&lt;p&gt;</code> 等标签的基本元素来标记内容。这里的 HTML 是有效的，但它不是完全语义的——也就是说，标签不能尽可能地传达内容的含义。</p>
<p>当 HTML5 在2008年推出时，它提供了新的元素来改进文档语义。以下是使 HTML 更具语义性的尝试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1, shrink-to-fit=no&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;description&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;author&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>My test page<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!--[if lt IE 9]&gt;  
</span></span></span><span class="line"><span class="cl"><span class="c">        &lt;script src=&#34;(https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js&#34;&gt;&lt;/script&gt;  
</span></span></span><span class="line"><span class="cl"><span class="c">      &lt;![endif]--&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">nav</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;navigation&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Home<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Info<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>About<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">form</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Search&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>Search<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">nav</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">main</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;main&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">section</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;hero&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello there!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>General info about the page goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Learn more<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">section</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">section</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;grid&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">article</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;column&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>First Heading<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Article content goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>View details<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">article</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;column&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Second Heading<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Article content goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>View details<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">article</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;column&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Third Heading<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Article content goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>View details<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">section</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">footer</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;contentinfo&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Copyright info goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">footer</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>让我们来看看其中的一些变化：</p>
<ul>
<li><code>&lt;html lang=&quot;en&quot;&gt;</code> 指定文档的语言，这有助于搜索引擎和浏览器识别适当的内容。</li>
<li>额外的 <code>&lt;meta&gt;</code> 标记提供有关搜索引擎和其他服务在页面上不直接可见的网站的信息。它们还提供有关如何调整不同设备上的内容大小的信息。</li>
<li><code>&lt;nav&gt;</code> 、 <code>&lt;main&gt;</code> 、 <code>&lt;section&gt;</code> 、 <code>&lt;article&gt;</code> 和 <code>&lt;footer&gt;</code> 标记为 HTML 文档提供了更易于访问的结构（与通用的 <code>&lt;div&gt;</code> 标记相比）。这些标签是在HTML5中引入的。</li>
<li><code>&lt;!-- [if lt IE 9]&gt;...--&gt;</code> 注释添加了一个 JavaScript 文件，该文件仅适用于旧版本的 Internet Explorer，因为它们不支持上述 HTML5 标签。请注意，如今许多最近的网站都没有包含该评论，因为支持这些浏览器的网站越来越少。</li>
<li><code>role</code> 属性还提供辅助功能信息。请注意，使用 <code>&lt;nav&gt;</code> 标记通常足以确保可访问性，如果无法识别 <code>&lt;nav&gt;</code> 标记，则使用额外的 <code>role=&quot;navigation&quot;</code> 。</li>
</ul>
<p>编写语义 HTML 似乎并不重要，尤其是当它不影响网站的视觉外观时。但是，您的网站不仅被人类查看 - 网络浏览器，搜索引擎，屏幕阅读器都依赖于语义HTML才能正常运行。</p>
<h3 id="使用-wai-aria-属性改进可访问性">使用 WAI-ARIA 属性改进可访问性</h3>
<p>让我们看一下上面示例中导航栏中的搜索输入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">form</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Search&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>Search<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>此输入元素使用 <code>placeholder</code> 属性而不是标签元素让用户知道其用途。这适用于人类，但它不是正确的语义 HTML，屏幕阅读器和其他技术可能会错过。使其可访问的方法是使用 <code>aria-label</code> 属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">form</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Search&#34;</span> <span class="na">aria-label</span><span class="o">=</span><span class="s">&#34;Search&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>Search<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>WAI-ARIA 代表“Web 可访问性倡议 — 可访问的富互联网应用程序”（通常简称为 ARIA），是一组属性，当语义标记不够时，使 HTML 更易于访问。上一节中看到的 <code>role</code> 属性是 ARIA 属性。到目前为止，这些属性似乎是很小的变化，但是当我们使用HTML来处理基本文档之外的事情时，它变得更加重要。</p>
<p>让我们看一个更复杂的例子——假设我们想在 HTML 中添加一些选项卡式内容，以提供有关如何在 Windows，Mac 和 Linux 上安装某些程序的说明。由于没有在 HTML 中构建选项卡的本机方法，因此我们必须使用无序列表、链接和 div 之类的东西来构建我们自己的选项卡标记。在这里，我们可以使用 <code>role</code> 、 <code>aria-controls</code> 、 <code>aria-selected</code> 和 <code>aria-labelledby</code> 等可访问性属性来标记 HTML，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">ul</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;tablist&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;windows-tab&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#windows&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;tab&#34;</span> <span class="na">aria-controls</span><span class="o">=</span><span class="s">&#34;windows&#34;</span> <span class="na">aria-selected</span><span class="o">=</span><span class="s">&#34;true&#34;</span><span class="p">&gt;</span>Windows<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;mac-tab&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#mac&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;tab&#34;</span> <span class="na">aria-controls</span><span class="o">=</span><span class="s">&#34;mac&#34;</span> <span class="na">aria-selected</span><span class="o">=</span><span class="s">&#34;false&#34;</span><span class="p">&gt;</span>Mac<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;linux-tab&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#linux&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;tab&#34;</span> <span class="na">aria-controls</span><span class="o">=</span><span class="s">&#34;linux&#34;</span> <span class="na">aria-selected</span><span class="o">=</span><span class="s">&#34;false&#34;</span><span class="p">&gt;</span>Linux<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;windows&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;tabpanel&#34;</span> <span class="na">aria-labelledby</span><span class="o">=</span><span class="s">&#34;windows-tab&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;http://1000logos.net/wp-content/uploads/2017/04/Microsoft-Logo.png&#34;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;microsoft logo&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    ...  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;mac&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;tabpanel&#34;</span> <span class="na">aria-labelledby</span><span class="o">=</span><span class="s">&#34;mac-tab&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://i.ytimg.com/vi/ipOzBWuYZvg/maxresdefault.jpg&#34;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;apple logo&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    ...  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;linux&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;tabpanel&#34;</span> <span class="na">aria-labelledby</span><span class="o">=</span><span class="s">&#34;linux-tab&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://noware.tech/wp-content/uploads/sites/140/2018/04/linux-1024x565.jpg&#34;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;linux logo&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    ...  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>如果没有这些辅助功能属性，选项卡式内容将与选项卡控件没有可识别的关系。具有这些属性有助于屏幕阅读器识别内容，启用具有正确制表符的键盘快捷键等。使用适当的 ARIA 属性本身就是一项完整的研究——要更深入地了解，请查看 <a href="https://www.w3.org/TR/wai-aria-practices-1.1/">官方指南</a>。</p>
<p>所有这些似乎都是为了提高网站的可访问性而做很多工作。重要的是要承认可访问性是网络的一个组成部分，网络被设计为一个与每个人自由共享信息的平台，而不仅仅是少数人。使网站可访问可以改善每个访问者的体验 - 例如，可访问的键盘快捷键可以帮助那些永远无法使用鼠标的人，那些暂时无法使用鼠标的人，以及那些不喜欢不使用鼠标的人（也就是大多数程序员）。在处理其他功能时，可访问性很容易被忽视，但不应忽视。</p>
<blockquote>
<p>如果您有兴趣改善网站的可访问性，那么有 <a href="https://a11yproject.com/">A11Y项目</a> 中的清单，这是 <a href="https://a11yproject.com/checklist">一个</a> 很好的起点。然而，使网站可访问不仅仅是检查项目——它总是可以改进的，就像用户体验的任何方面一样。使您的网站可访问的最佳方法是实际使用您的网站，就像受众中的不同人一样 - 使用屏幕阅读器进行测试，尝试仅使用键盘而不是鼠标，使用 <a href="https://www.toptal.com/designers/colorfilter">色盲过滤器</a> 查看您的网站等。</p>
</blockquote>
<h3 id="用css和javascript让它变得漂亮">用CSS和JavaScript让它变得漂亮</h3>
<p>如果我们到目前为止看一下网站，它看起来就像你期望的那样光秃秃的：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__VCXY__h9ynSUJ__9piFx9ATA.png" alt="Example website without styling"  />
</p>
<p>为了美化它，我们将添加一个 CSS 文件来应用样式。现在，如果你不是特别擅长 CSS，可能需要很多天才能使这个网站看起来很漂亮。与其编写自己的 CSS，不如始终使用 CSS 框架，该框架本质上是其他人以可重用的方式编写的 CSS。</p>
<p>一个流行的 CSS 框架是 Bootstrap，它于2011年问世，并迅速被 <a href="https://www.ostraining.com/blog/coding/bootstrap-popularity/">数百万个网站</a> 采用和使用。让我们看看使用 Bootstrap 的一些代码会是什么样子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1, shrink-to-fit=no&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;description&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;author&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>My test page<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--[if lt IE 9]&gt;  
</span></span></span><span class="line"><span class="cl"><span class="c">      &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js&#34;&gt;&lt;/script&gt;  
</span></span></span><span class="line"><span class="cl"><span class="c">    &lt;![endif]--&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">nav</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar navbar-expand-lg navbar-light bg-light&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;navigation&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar-nav mr-auto&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item active&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-link&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Home<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-link&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Info<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-link&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>About<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-inline my-2 my-lg-0&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control mr-sm-2&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Search&#34;</span> <span class="na">aria-label</span><span class="o">=</span><span class="s">&#34;Search&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-outline-success my-2 my-sm-0&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>Search<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">nav</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">main</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;main&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- ... --&gt;</span> 
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">footer</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar navbar-dark bg-secondary&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;contentinfo&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Copyright info goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">footer</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>您可以在 <a href="https://codepen.io/peterxjang/pen/jOrEpYR?editors=1000">此处</a> 查看完整的代码示例。</p>
<p>让我们检查一下这些更改：</p>
<ul>
<li>
<p><code>&lt;head&gt;</code> 标签中的 <code>&lt;link&gt;</code> 将 Bootstrap CSS 添加到我们的网站。请注意，我们链接到在线托管的文件，这可能会带来一些安全风险 - <code>integrity</code> 和 <code>crossorigin</code> 属性有助于确保链接到的文件正确无误。</p>
</li>
<li>
<p>添加的类都是特定于 Bootstrap 的 — 添加的 Bootstrap CSS 具有针对具有特定 HTML 结构的特定类名的样式。</p>
</li>
<li>
<p>在三篇文章周围添加了一个额外的 <code>&lt;div class=&quot;row&quot;&gt;</code> ，以利用 <a href="https://getbootstrap.com/docs/4.1/layout/grid/">Bootstrap 的网格布局</a>系统（它使用这种特定的 HTML 结构）。</p>
</li>
</ul>
<p>以下是该网站现在的样子：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__fO1wXfiWfdv8vY3__qeQv0A.png" alt="Example website with Bootstrap styling"  />
</p>
<p>不错！请注意，为了使用像 Bootstrap 这样的 CSS 框架，您实际上根本不需要编写任何 CSS 即可开始使用 — 您只需要在 HTML 中添加适当的类即可利用框架附带的 CSS。</p>
<p>这里要注意的一件事是，虽然选项卡的样式正确（任何时候只有一个选项卡可见），但它们还没有正常工作——单击选项卡不会执行任何操作。这是因为在这种情况下，这种类型的自定义交互不是由 CSS 处理的，而是由 JavaScript 处理的。在这种情况下，我们可以通过在 <code>&lt;head&gt;</code> 标签中添加 Bootstrap 框架附带的 JavaScript 文件来让 Bootstrap 选项卡工作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://code.jquery.com/jquery-3.3.1.slim.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>最后一个脚本是 Bootstrap 的 JavaScript。前两个是 Bootstrap 使用的依赖项（jQuery 和 Popper），在加载 Bootstrap 脚本之前必须先加载它们。如果您查看 <a href="https://codepen.io/peterxjang/pen/WKYxWL?editors=1000#">此实时示例</a>，您可以看到选项卡现在可以工作了！</p>
<p>Bootstrap 被广泛使用，因为它帮助解决了当时 CSS 的主要痛点，例如浏览器不一致和缺乏适当的网格系统。使用像 Bootstrap 这样的 CSS 框架有一些缺点——特别是，与从头开始编写 CSS 相比，它们可能难以定制，这可能会使您的网站与其他网站相比显得通用。</p>
<p>此外，随着智能手机和移动流量的增加，减少 CSS 和 JS 文件大小变得越来越重要 - 任何超过几千字节的东西都会显着影响较慢的互联网连接的性能。在上面的例子中使用 Bootstrap 的方式，我们要求用户下载整个 Bootstrap 框架与站点一起，即使我们只使用几种样式和功能。在下一节中，我们将介绍几种有助于解决这些性能问题的技术。</p>
<blockquote>
<p>注意：对 CSS 和 JavaScript 的扎实掌握与使用 HTML 制作复杂的网站有着内在的联系;但是，深入研究这些语言超出了本文的范围。如果你想了解更多关于 CSS 和 JavaScript 的基础知识，<a href="https://developer.mozilla.org/en-US/">MDN Web Docs</a> 总是一个不错的起点。如果你想更好地了解 CSS 的所有新功能（flexbox，grid，SASS 等）如何与所涉及的所有工具和技术结合在一起，请查看我的文章 <a href="https://peterxjang.com/blog/modern-css-explained-for-dinosaurs.html">Modern CSS Explain For Dinosaurs</a>。</p>
</blockquote>
<h3 id="使用-html-属性提高性能">使用 HTML 属性提高性能</h3>
<p>在这一点上，我们有一个网站，具有相当好的组织，语义 HTML。如果这就是我们正在考虑的全部内容，那么我们的网站就会完成！然而，在性能（网站为用户加载的速度）和可维护性（开发人员更改代码的难易程度）方面，网站有许多方面可以改进。</p>
<h4 id="脚本的-defer-属性">脚本的 defer 属性</h4>
<p>对于我们的网站，一个主要的优化是解决标题中加载的 JavaScript 文件。这些文件足够大，实际上会减慢网站的速度。为了呈现页面，Web 浏览器读取给定的 HTML 并将其转换为它理解的格式 - 文档对象模型或 DOM。如您所料，Web 浏览器从 HTML 文档的顶部开始，然后向下工作。这意味着如果它看到 <code>&lt;script&gt;</code> 标记，它将下载并执行脚本，然后再转到下一行。您可以在此处查看此过程的插图：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__qo7CQsQCd__QYJchbCXLj__w.png#medium" alt="Diagram of JavaScript normal loading order"  />
</p>
<center>来自 hacks.mozilla.org</center>
<p>一个常见的优化技巧是将所有 JavaScript <code>&lt;script&gt;</code> 标签移出 <code>&lt;head&gt;</code> 标签并移到 <code>&lt;body&gt;</code> 标签的末尾。你可以在 Bootstrap 自己的入门模板中看到这一点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Required meta tags --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1, shrink-to-fit=no&#34;</span><span class="p">&gt;</span>    <span class="c">&lt;!-- Bootstrap CSS --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;</span>    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello, world!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello, world!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>    <span class="c">&lt;!-- Optional JavaScript --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://code.jquery.com/jquery-3.3.1.slim.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>从某种意义上说，这是一种优化，因为这不是 HTML 的设计方式 - CSS 和 JavaScript 文件应该在<code>标签中</code>定义，如前所述。但是，将所有内容保留在 <code>&lt;head&gt;</code> 标记中会产生降低页面呈现性能的意外副作用。将所有 <code>&lt;script&gt;</code> 个标记移动到 <code>&lt;body&gt;</code> 个标记的底部是提高性能的一种方法。</p>
<p>在2018年，许多网站仍然使用这种将所有 <code>&lt;script&gt;</code> 标签移动到 <code>&lt;body&gt;</code> 标签底部的技巧。然而，浏览器已经支持了一种不那么黑客的方法近 10 年—— <code>defer</code> 属性。通过将此属性添加到 <code>&lt;script&gt;</code> 标记中，浏览器将下载外部文件而不会阻止构建 DOM 的其余部分，并将在 DOM 构建完成后执行脚本。您可以在此处查看此过程的插图：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__GhpdG7JTaVJ6nbbaVLkSLg.png#medium" alt="Diagram of JavaScript with defer attribute loading order"  />
</p>
<p>在许多情况下，在 <code>&lt;head&gt;</code> 中保留 <code>&lt;script&gt;</code> 个标签和 <code>defer</code> 属性将导致更快的页面加载速度，因为文件可以与正在构建的 DOM 并行下载。这就是 Bootstrap 的初学者模板使用 defer 属性的样子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Required meta tags --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1, shrink-to-fit=no&#34;</span><span class="p">&gt;</span>    <span class="c">&lt;!-- Bootstrap CSS --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;</span>    <span class="c">&lt;!-- Optional JavaScript --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://code.jquery.com/jquery-3.3.1.slim.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello, world!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello, world!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>这样做的好处是网站会渲染得更快，并且它会按预期使用 <code>&lt;head&gt;</code> 标记中的脚本组织 HTML。为了更精细地控制哪些文件以什么顺序下载和执行，还有 <code>async</code> 属性以及 <code>&lt;link&gt;</code> 个标签的 <code>rel=&quot;preload&quot;</code> 属性（您可以在 <a href="https://hacks.mozilla.org/2017/09/building-the-dom-faster-speculative-parsing-async-defer-and-preload/">此处</a> 阅读更多相关信息）。</p>
<h4 id="图像的-srcset-属性">图像的 srcset 属性</h4>
<p>对于我们的网站，另一个主要的性能优化是图像。现在，这些图像正在被“热链接”，这意味着它们被直接链接到其他人的网站上。这不仅从维护的角度来看是有问题的（如果其他人改变他们的形象，就会破坏我们的网站），从性能的角度来看，它也可能是有问题的。</p>
<p>我们可以下载文件并在本地链接到它们，而不是直接链接文件。此外，我们可以通过将图像文件大小调整为适当的分辨率来优化图像文件大小。而不是直接链接到另一个网站上的单个图像的图像标签：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">img</span> 
</span></span><span class="line"><span class="cl">  <span class="na">class</span><span class="o">=</span><span class="s">&#34;img-fluid&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">src</span><span class="o">=</span><span class="s">&#34;http://1000logos.net/wp-content/uploads/2017/04/Microsoft-Logo.png&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="na">alt</span><span class="o">=</span><span class="s">&#34;microsoft logo&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span></code></pre></div><p>我们可以在本地创建图像的多个版本，并响应式地链接到它们：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">img</span>
</span></span><span class="line"><span class="cl">  <span class="na">class</span><span class="o">=</span><span class="s">&#34;img-fluid&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="na">src</span><span class="o">=</span><span class="s">&#34;microsoft-logo-small.png&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="na">srcset</span><span class="o">=</span><span class="s">&#34;microsoft-logo-medium.png 1000w, microsoft-logo-large.png 2000w&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="na">alt</span><span class="o">=</span><span class="s">&#34;microsoft logo&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">&gt;</span>
</span></span></code></pre></div><p>在这里，我们使用徽标的小型、中型和大型版本。 <code>srcset</code> 属性告诉浏览器根据浏览器宽度加载适当的版本。 <code>srcset</code> 属性是在 2013 年左右引入的，但浏览器花了几年时间才完全支持它。截至2018年，它具有 <a href="https://caniuse.com/#feat=srcset">相当不错的浏览器支持</a> ，因此绝对值得将其作为工作流程的一部分。</p>
<p>对于许多网站来说，优化图像大小通常是最大的性能提升——图像下载大小通常比任何 JavaScript 和 CSS 文件大几个数量级。您可以使用 <code>&lt;picture&gt;</code> 元素对图像进行更精细的控制;但是，对于大多数用例来说，使用简单的 <code>srcset</code> 属性 <a href="https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcset/">通常绰绰有余</a>。</p>
<h4 id="其他-html-属性">其他 HTML 属性</h4>
<p>作为一种语言，HTML 具有 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes">许多属性</a> ，并继续添加可用于提高性能的新属性（如 <code>importance</code> 和 <code>lazyload</code> ）。虽然这可能令人生畏，但专注于下载大小（图像和脚本）方面的最大资源，无论它们可能适用于您的特定网站，通常是最好的起点。</p>
<blockquote>
<p>请注意，就像可访问性一样，没有一套全面的性能规则始终适用于每个网站——您应该对您的网站进行基准测试以确定最有效的方法（Chrome 和 Firefox 等浏览器提供此类工具）。同样，最好的方法是简单地在慢速网络条件下使用您的网站（浏览器的开发工具可以模拟）——如果您在慢速网络条件下使用自己的网站即使只是一周，您很可能会找到大量性能修复来改善其体验。</p>
</blockquote>
<h3 id="使用工具提高性能">使用工具提高性能</h3>
<p>到目前为止，我们一直在使用 HTML 语言提供的工具来优化性能。您还可以使用外部工具获得更多性能优势。让我们来看看几种常用的方法。</p>
<h4 id="代码缩小">代码缩小</h4>
<p>一个重要的性能优化是 JavaScript 和 CSS 代码的缩小（有时称为丑化）。这涉及使用程序来分析和删除代码中不必要或冗余的数据，从简单的事情（如删除不需要的空格）到复杂的事情，如尽可能将长变量重命名为单个字符。下面是 Douglas Crockford 在 <a href="http://www.crockford.com/javascript/jsmin.html">2003 年发布</a> 的第一个 JavaScript 缩减器的示例。示例未缩小的代码如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// is.js  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl"><span class="c1">// (c) 2001 Douglas Crockford  
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2001 June 3  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="c1">// is  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl"><span class="c1">// The -is- object is used to identify the browser.  Every browser edition  
</span></span></span><span class="line"><span class="cl"><span class="c1">// identifies itself, but there is no standard way of doing it, and some of  
</span></span></span><span class="line"><span class="cl"><span class="c1">// the identification is deceptive. This is because the authors of web  
</span></span></span><span class="line"><span class="cl"><span class="c1">// browsers are liars. For example, Microsoft&#39;s IE browsers claim to be  
</span></span></span><span class="line"><span class="cl"><span class="c1">// Mozilla 4. Netscape 6 claims to be version 5.  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">is</span> <span class="o">=</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">ie</span><span class="o">:</span>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">appName</span> <span class="o">==</span> <span class="s1">&#39;Microsoft Internet Explorer&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">java</span><span class="o">:</span>    <span class="nx">navigator</span><span class="p">.</span><span class="nx">javaEnabled</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">ns</span><span class="o">:</span>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">appName</span> <span class="o">==</span> <span class="s1">&#39;Netscape&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">ua</span><span class="o">:</span>      <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(),</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">version</span><span class="o">:</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">appVersion</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">21</span><span class="p">))</span> <span class="o">||</span>  
</span></span><span class="line"><span class="cl">             <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">appVersion</span><span class="p">),</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">win</span><span class="o">:</span>     <span class="nx">navigator</span><span class="p">.</span><span class="nx">platform</span> <span class="o">==</span> <span class="s1">&#39;Win32&#39;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="nx">is</span><span class="p">.</span><span class="nx">mac</span> <span class="o">=</span> <span class="nx">is</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;mac&#39;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">is</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;opera&#39;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">is</span><span class="p">.</span><span class="nx">ie</span> <span class="o">=</span> <span class="nx">is</span><span class="p">.</span><span class="nx">ns</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">is</span><span class="p">.</span><span class="nx">opera</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">is</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;gecko&#39;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">is</span><span class="p">.</span><span class="nx">ie</span> <span class="o">=</span> <span class="nx">is</span><span class="p">.</span><span class="nx">ns</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">is</span><span class="p">.</span><span class="nx">gecko</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>缩小后的代码如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">is</span><span class="o">=</span><span class="p">{</span><span class="nx">ie</span><span class="o">:</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">appName</span><span class="o">==</span><span class="s1">&#39;Microsoft Internet Explorer&#39;</span><span class="p">,</span><span class="nx">java</span><span class="o">:</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">javaEnabled</span><span class="p">(),</span><span class="nx">ns</span><span class="o">:</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">appName</span><span class="o">==</span><span class="s1">&#39;Netscape&#39;</span><span class="p">,</span><span class="nx">ua</span><span class="o">:</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(),</span><span class="nx">version</span><span class="o">:</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">appVersion</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">21</span><span class="p">))</span><span class="o">||</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">appVersion</span><span class="p">),</span><span class="nx">win</span><span class="o">:</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">platform</span><span class="o">==</span><span class="s1">&#39;Win32&#39;</span><span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="nx">is</span><span class="p">.</span><span class="nx">mac</span><span class="o">=</span><span class="nx">is</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;mac&#39;</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">is</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;opera&#39;</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">is</span><span class="p">.</span><span class="nx">ie</span><span class="o">=</span><span class="nx">is</span><span class="p">.</span><span class="nx">ns</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">is</span><span class="p">.</span><span class="nx">opera</span><span class="o">=</span><span class="kc">true</span><span class="p">;}</span>  
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="nx">is</span><span class="p">.</span><span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;gecko&#39;</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span><span class="nx">is</span><span class="p">.</span><span class="nx">ie</span><span class="o">=</span><span class="nx">is</span><span class="p">.</span><span class="nx">ns</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">is</span><span class="p">.</span><span class="nx">gecko</span><span class="o">=</span><span class="kc">true</span><span class="p">;}</span>
</span></span></code></pre></div><p>这些更改确实加起来 — 从我们之前的示例来看，未缩小的 <code>bootstrap.js</code> 的大小为 124 KB，而缩小的 <code>bootstrap.min.js</code> 的大小为 51 KB。这还不到原来尺寸的一半——使用<a href="https://www.youtube.com/watch?v=kgv7U3GYlDY">Grabthar’s hammer</a>，真是省钱！但说真的，它在网站下载和显示的速度方面有很大的不同，尤其是在互联网连接速度较慢的情况下。</p>
<p>我们在前面的例子中使用的 Bootstrap CSS 和 JavaScript 已经缩小了，但如果你想缩小自己的代码，你可以使用 <a href="https://javascript-minifier.com/">JavaScript Minifier</a> 或 <a href="https://www.minifier.org/">Minify</a> 等在线工具，有很多可供选择。或者，您可以使用命令行工具，该工具可以节省将代码复制到网站的过程。</p>
<h4 id="文件串联">文件串联</h4>
<p>另一个相关的性能优化是串联，它将多个 JavaScript 文件（或 CSS 文件）转换为单个文件。浏览器下载单个文件的速度比下载多个小文件更快，这是基于浏览器自 1999 年以来使用的 HTTP/1.1 协议。</p>
<p>需要注意的是，新版本的协议 HTTP/2 于 2015 年发布，可能会改变此优化。HTTP / 2允许多个同时连接，因此理论上最好有多个小文件，而不是一个大级联文件。然而，在实践中，它 <a href="http://engineering.khanacademy.org/posts/js-packaging-http2.htm">似乎并不那么简单</a>，因为串联仍然有重要的好处。截至2018年，连接 JavaScript 和 CSS 文件仍然是常见的做法。</p>
<p>要连接您的文件，理论上您可以手动完成 - 将每个 JavaScript 文件的内容复制到单个文件中，对 CSS 文件重复此操作，等等。然后修改 HTML 以链接到单个串联的 JavaScript 文件和单个串联的 CSS 文件。每次部署应用程序时都必须执行此操作，维护起来会非常痛苦 - 最好使用一些自动化过程（更多内容见下文）。</p>
<h4 id="关键-css">关键 CSS</h4>
<p>近年来流行的另一个优化是内联页面的关键 CSS。这涉及使用工具来识别用户在访问网页时首先看到的所有 HTML 元素：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__eqFRbhOchUMNGLj9lisEqQ.jpeg#medium" alt="Example website labelling critical portion"  />
</p>
<center>来自 https://www.smashingmagazine.com/2015/08/understanding-critical-css/</center>
<p>一旦识别出这些 HTML元素，该工具将找到影响这些元素的所有 CSS，并将它们直接添加到 HTML 文件中。通过这种方式，浏览器能够显示一个完全样式的网站，而无需等待剩余的 CSS 下载！</p>
<p>有不同的工具可以帮助您识别 <a href="https://github.com/addyosmani/critical">关键</a> CSS，从 Addy Osmani 的基于节点的关键库到 Jonas Ohlsson Aden 的基于 <a href="https://jonassebastianohlsson.com/criticalpathcssgenerator/">Web 的关键路径 CSS 生成器</a>。下面是我们之前 Bootstrap 示例中的 HTML <code>&lt;head&gt;</code> 元素在通过<a href="https://github.com/addyosmani/critical">关键</a>工具分析后的外观示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1, shrink-to-fit=no&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;description&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;author&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>My test page<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">:</span><span class="nd">root</span><span class="p">{</span><span class="nv">--blue</span><span class="p">:</span><span class="mh">#007bff</span><span class="p">;</span><span class="nv">--indigo</span><span class="p">:</span><span class="mh">#6610f2</span><span class="p">;</span><span class="nv">--purple</span><span class="p">:</span><span class="mh">#6f42c1</span><span class="p">;</span><span class="nv">--pink</span><span class="p">:</span><span class="mh">#e83e8c</span><span class="p">;</span><span class="nv">--red</span><span class="p">:</span><span class="mh">#dc3545</span><span class="p">;</span><span class="nv">--orange</span><span class="p">:</span><span class="mh">#fd7e14</span><span class="p">;</span><span class="nv">--yellow</span><span class="p">:</span><span class="mh">#ffc107</span><span class="p">;</span><span class="nv">--green</span><span class="p">:</span><span class="mh">#28a745</span><span class="p">;</span><span class="nv">--teal</span><span class="p">:</span><span class="mh">#20c997</span><span class="p">;</span><span class="nv">--cyan</span><span class="p">:</span><span class="mh">#17a2b8</span><span class="p">;</span><span class="nv">--white</span><span class="p">:</span><span class="mh">#fff</span><span class="p">;</span><span class="nv">--gray</span><span class="p">:</span><span class="mh">#6c757d</span><span class="p">;</span><span class="nv">--gray-dark</span><span class="p">:</span><span class="mh">#343a40</span><span class="p">;</span><span class="nv">--primary</span><span class="p">:</span><span class="mh">#007bff</span><span class="p">;</span><span class="nv">--secondary</span><span class="p">:</span><span class="mh">#6c757d</span><span class="p">;</span><span class="nv">--success</span><span class="p">:</span><span class="mh">#28a745</span><span class="p">;</span><span class="nv">--info</span><span class="p">:</span><span class="mh">#17a2b8</span><span class="p">;</span><span class="nv">--warning</span><span class="p">:</span><span class="mh">#ffc107</span><span class="p">;</span><span class="nv">--danger</span><span class="p">:</span><span class="mh">#dc3545</span><span class="p">;</span><span class="nv">--light</span><span class="p">:</span><span class="mh">#f8f9fa</span><span class="p">;</span><span class="nv">--dark</span><span class="p">:</span><span class="mh">#343a40</span><span class="p">;</span><span class="nv">--breakpoint-xs</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="nv">--breakpoint-sm</span><span class="p">:</span><span class="mi">576</span><span class="kt">px</span><span class="p">;</span><span class="nv">--breakpoint-md</span><span class="p">:</span><span class="mi">768</span><span class="kt">px</span><span class="p">;</span><span class="nv">--breakpoint-lg</span><span class="p">:</span><span class="mi">992</span><span class="kt">px</span><span class="p">;</span><span class="nv">--breakpoint-xl</span><span class="p">:</span><span class="mi">1200</span><span class="kt">px</span><span class="p">;</span><span class="nv">--font-family-sans-serif</span><span class="p">:</span><span class="o">-</span><span class="n">apple-system</span><span class="p">,</span><span class="n">BlinkMacSystemFont</span><span class="p">,</span><span class="s2">&#34;Segoe UI&#34;</span><span class="p">,</span><span class="n">Roboto</span><span class="p">,</span><span class="s2">&#34;Helvetica Neue&#34;</span><span class="p">,</span><span class="n">Arial</span><span class="p">,</span><span class="kc">sans-serif</span><span class="p">,</span><span class="s2">&#34;Apple Color Emoji&#34;</span><span class="p">,</span><span class="s2">&#34;Segoe UI Emoji&#34;</span><span class="p">,</span><span class="s2">&#34;Segoe UI Symbol&#34;</span><span class="p">,</span><span class="s2">&#34;Noto Color Emoji&#34;</span><span class="p">;</span><span class="nv">--font-family-monospace</span><span class="p">:</span><span class="n">SFMono-Regular</span><span class="p">,</span><span class="n">Menlo</span><span class="p">,</span><span class="n">Monaco</span><span class="p">,</span><span class="n">Consolas</span><span class="p">,</span><span class="s2">&#34;Liberation Mono&#34;</span><span class="p">,</span><span class="s2">&#34;Courier New&#34;</span><span class="p">,</span><span class="kc">monospace</span><span class="p">}</span><span class="err">\</span><span class="o">*,</span><span class="p">::</span><span class="nd">after</span><span class="o">,</span><span class="p">::</span><span class="nd">before</span><span class="p">{</span><span class="k">box-sizing</span><span class="p">:</span><span class="kc">border-box</span><span class="p">}</span><span class="nt">html</span><span class="p">{</span><span class="k">font-family</span><span class="p">:</span><span class="kc">sans-serif</span><span class="p">;</span><span class="k">line-height</span><span class="p">:</span><span class="mf">1.15</span><span class="p">;</span><span class="kp">-webkit-</span><span class="n">text-size-adjust</span><span class="p">:</span><span class="mi">100</span><span class="kt">%</span><span class="p">;</span><span class="kp">-ms-</span><span class="n">text-size-adjust</span><span class="p">:</span><span class="mi">100</span><span class="kt">%</span><span class="p">;</span><span class="kp">-ms-</span><span class="k">overflow-style</span><span class="p">:</span><span class="n">scrollbar</span><span class="p">}@</span><span class="k">-ms-viewport</span><span class="p">{</span><span class="nt">width</span><span class="p">:</span><span class="nd">device-width</span><span class="p">}</span><span class="nt">article</span><span class="o">,</span><span class="nt">footer</span><span class="o">,</span><span class="nt">main</span><span class="o">,</span><span class="nt">nav</span><span class="o">,</span><span class="nt">section</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kc">block</span><span class="p">}</span><span class="nt">body</span><span class="p">{</span><span class="k">margin</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">font-family</span><span class="p">:</span><span class="o">-</span><span class="n">apple-system</span><span class="p">,</span><span class="n">BlinkMacSystemFont</span><span class="p">,</span><span class="s2">&#34;Segoe UI&#34;</span><span class="p">,</span><span class="n">Roboto</span><span class="p">,</span><span class="s2">&#34;Helvetica Neue&#34;</span><span class="p">,</span><span class="n">Arial</span><span class="p">,</span><span class="kc">sans-serif</span><span class="p">,</span><span class="s2">&#34;Apple Color Emoji&#34;</span><span class="p">,</span><span class="s2">&#34;Segoe UI Emoji&#34;</span><span class="p">,</span><span class="s2">&#34;Segoe UI Symbol&#34;</span><span class="p">,</span><span class="s2">&#34;Noto Color Emoji&#34;</span><span class="p">;</span><span class="k">font-size</span><span class="p">:</span><span class="mi">1</span><span class="kt">rem</span><span class="p">;</span><span class="k">font-weight</span><span class="p">:</span><span class="mi">400</span><span class="p">;</span><span class="k">line-height</span><span class="p">:</span><span class="mf">1.5</span><span class="p">;</span><span class="k">color</span><span class="p">:</span><span class="mh">#212529</span><span class="p">;</span><span class="k">text-align</span><span class="p">:</span><span class="kc">left</span><span class="p">;</span><span class="k">background-color</span><span class="p">:</span><span class="mh">#fff</span><span class="p">}</span><span class="nt">h1</span><span class="o">,</span><span class="nt">h2</span><span class="p">{</span><span class="k">margin-top</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mf">.5</span><span class="kt">rem</span><span class="p">}</span><span class="nt">p</span><span class="p">{</span><span class="k">margin-top</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mi">1</span><span class="kt">rem</span><span class="p">}</span><span class="nt">ul</span><span class="p">{</span><span class="k">margin-top</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mi">1</span><span class="kt">rem</span><span class="p">}</span><span class="nt">a</span><span class="p">{</span><span class="k">color</span><span class="p">:</span><span class="mh">#007bff</span><span class="p">;</span><span class="k">text-decoration</span><span class="p">:</span><span class="kc">none</span><span class="p">;</span><span class="k">background-color</span><span class="p">:</span><span class="kc">transparent</span><span class="p">;</span><span class="kp">-webkit-</span><span class="k">text-decoration-skip</span><span class="p">:</span><span class="kc">objects</span><span class="p">}</span><span class="nt">img</span><span class="p">{</span><span class="k">vertical-align</span><span class="p">:</span><span class="kc">middle</span><span class="p">;</span><span class="k">border-style</span><span class="p">:</span><span class="kc">none</span><span class="p">}</span><span class="nt">button</span><span class="p">{</span><span class="k">border-radius</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span><span class="nt">button</span><span class="o">,</span><span class="nt">input</span><span class="p">{</span><span class="k">margin</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">font-family</span><span class="p">:</span><span class="kc">inherit</span><span class="p">;</span><span class="k">font-size</span><span class="p">:</span><span class="kc">inherit</span><span class="p">;</span><span class="k">line-height</span><span class="p">:</span><span class="kc">inherit</span><span class="p">}</span><span class="nt">button</span><span class="o">,</span><span class="nt">input</span><span class="p">{</span><span class="k">overflow</span><span class="p">:</span><span class="kc">visible</span><span class="p">}</span><span class="nt">button</span><span class="p">{</span><span class="k">text-transform</span><span class="p">:</span><span class="kc">none</span><span class="p">}</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">submit</span><span class="o">],</span><span class="nt">button</span><span class="p">{</span><span class="kp">-webkit-</span><span class="k">appearance</span><span class="p">:</span><span class="n">button</span><span class="p">}</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="nt">submit</span><span class="o">]</span><span class="p">::</span><span class="nd">-moz-focus-inner</span><span class="o">,</span><span class="nt">button</span><span class="p">::</span><span class="nd">-moz-focus-inner</span><span class="p">{</span><span class="k">padding</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">border-style</span><span class="p">:</span><span class="kc">none</span><span class="p">}::</span><span class="nd">-webkit-file-upload-button</span><span class="p">{</span><span class="k">font</span><span class="p">:</span><span class="kc">inherit</span><span class="p">;</span><span class="kp">-webkit-</span><span class="k">appearance</span><span class="p">:</span><span class="n">button</span><span class="p">}</span><span class="nt">h1</span><span class="o">,</span><span class="nt">h2</span><span class="p">{</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mf">.5</span><span class="kt">rem</span><span class="p">;</span><span class="k">font-family</span><span class="p">:</span><span class="kc">inherit</span><span class="p">;</span><span class="k">font-weight</span><span class="p">:</span><span class="mi">500</span><span class="p">;</span><span class="k">line-height</span><span class="p">:</span><span class="mf">1.2</span><span class="p">;</span><span class="k">color</span><span class="p">:</span><span class="kc">inherit</span><span class="p">}</span><span class="nt">h1</span><span class="p">{</span><span class="k">font-size</span><span class="p">:</span><span class="mf">2.5</span><span class="kt">rem</span><span class="p">}</span><span class="nt">h2</span><span class="p">{</span><span class="k">font-size</span><span class="p">:</span><span class="mi">2</span><span class="kt">rem</span><span class="p">}.</span><span class="nc">lead</span><span class="p">{</span><span class="k">font-size</span><span class="p">:</span><span class="mf">1.25</span><span class="kt">rem</span><span class="p">;</span><span class="k">font-weight</span><span class="p">:</span><span class="mi">300</span><span class="p">}.</span><span class="nc">display-4</span><span class="p">{</span><span class="k">font-size</span><span class="p">:</span><span class="mf">3.5</span><span class="kt">rem</span><span class="p">;</span><span class="k">font-weight</span><span class="p">:</span><span class="mi">300</span><span class="p">;</span><span class="k">line-height</span><span class="p">:</span><span class="mf">1.2</span><span class="p">}.</span><span class="nc">img-fluid</span><span class="p">{</span><span class="k">max-width</span><span class="p">:</span><span class="mi">100</span><span class="kt">%</span><span class="p">;</span><span class="k">height</span><span class="p">:</span><span class="kc">auto</span><span class="p">}.</span><span class="nc">container</span><span class="p">{</span><span class="k">width</span><span class="p">:</span><span class="mi">100</span><span class="kt">%</span><span class="p">;</span><span class="k">padding-right</span><span class="p">:</span><span class="mi">15</span><span class="kt">px</span><span class="p">;</span><span class="k">padding-left</span><span class="p">:</span><span class="mi">15</span><span class="kt">px</span><span class="p">;</span><span class="k">margin-right</span><span class="p">:</span><span class="kc">auto</span><span class="p">;</span><span class="k">margin-left</span><span class="p">:</span><span class="kc">auto</span><span class="p">}</span><span class="o">[</span><span class="p">@</span><span class="k">media</span><span class="o">](</span><span class="nt">http</span><span class="o">://</span><span class="nt">twitter</span><span class="p">.</span><span class="nc">com</span><span class="o">/</span><span class="nt">media</span> <span class="s2">&#34;Twitter profile for @media&#34;</span><span class="o">)</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">576px</span><span class="o">)</span><span class="p">{.</span><span class="nc">container</span><span class="p">{</span><span class="k">max-width</span><span class="p">:</span><span class="mi">540</span><span class="kt">px</span><span class="p">}}</span><span class="o">[</span><span class="p">@</span><span class="k">media</span><span class="o">](</span><span class="nt">http</span><span class="o">://</span><span class="nt">twitter</span><span class="p">.</span><span class="nc">com</span><span class="o">/</span><span class="nt">media</span> <span class="s2">&#34;Twitter profile for @media&#34;</span><span class="o">)</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">768px</span><span class="o">)</span><span class="p">{.</span><span class="nc">container</span><span class="p">{</span><span class="k">max-width</span><span class="p">:</span><span class="mi">720</span><span class="kt">px</span><span class="p">}}</span><span class="o">[</span><span class="p">@</span><span class="k">media</span><span class="o">](</span><span class="nt">http</span><span class="o">://</span><span class="nt">twitter</span><span class="p">.</span><span class="nc">com</span><span class="o">/</span><span class="nt">media</span> <span class="s2">&#34;Twitter profile for @media&#34;</span><span class="o">)</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">992px</span><span class="o">)</span><span class="p">{.</span><span class="nc">container</span><span class="p">{</span><span class="k">max-width</span><span class="p">:</span><span class="mi">960</span><span class="kt">px</span><span class="p">}}</span><span class="o">[</span><span class="p">@</span><span class="k">media</span><span class="o">](</span><span class="nt">http</span><span class="o">://</span><span class="nt">twitter</span><span class="p">.</span><span class="nc">com</span><span class="o">/</span><span class="nt">media</span> <span class="s2">&#34;Twitter profile for @media&#34;</span><span class="o">)</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">1200px</span><span class="o">)</span><span class="p">{.</span><span class="nc">container</span><span class="p">{</span><span class="k">max-width</span><span class="p">:</span><span class="mi">1140</span><span class="kt">px</span><span class="p">}}.</span><span class="nc">row</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kp">-ms-</span><span class="n">flexbox</span><span class="p">;</span><span class="k">display</span><span class="p">:</span><span class="kc">flex</span><span class="p">;</span><span class="kp">-ms-</span><span class="k">flex-wrap</span><span class="p">:</span><span class="kc">wrap</span><span class="p">;</span><span class="k">flex-wrap</span><span class="p">:</span><span class="kc">wrap</span><span class="p">;</span><span class="k">margin-right</span><span class="p">:</span><span class="mi">-15</span><span class="kt">px</span><span class="p">;</span><span class="k">margin-left</span><span class="p">:</span><span class="mi">-15</span><span class="kt">px</span><span class="p">}.</span><span class="nc">col-4</span><span class="p">{</span><span class="k">position</span><span class="p">:</span><span class="kc">relative</span><span class="p">;</span><span class="k">width</span><span class="p">:</span><span class="mi">100</span><span class="kt">%</span><span class="p">;</span><span class="k">min-height</span><span class="p">:</span><span class="mi">1</span><span class="kt">px</span><span class="p">;</span><span class="k">padding-right</span><span class="p">:</span><span class="mi">15</span><span class="kt">px</span><span class="p">;</span><span class="k">padding-left</span><span class="p">:</span><span class="mi">15</span><span class="kt">px</span><span class="p">}.</span><span class="nc">col-4</span><span class="p">{</span><span class="kp">-ms-</span><span class="k">flex</span><span class="p">:</span><span class="mi">0</span> <span class="mi">0</span> <span class="mf">33.333333</span><span class="kt">%</span><span class="p">;</span><span class="k">flex</span><span class="p">:</span><span class="mi">0</span> <span class="mi">0</span> <span class="mf">33.333333</span><span class="kt">%</span><span class="p">;</span><span class="k">max-width</span><span class="p">:</span><span class="mf">33.333333</span><span class="kt">%</span><span class="p">}.</span><span class="nc">form-control</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kc">block</span><span class="p">;</span><span class="k">width</span><span class="p">:</span><span class="mi">100</span><span class="kt">%</span><span class="p">;</span><span class="k">height</span><span class="p">:</span><span class="nb">calc</span><span class="p">(</span><span class="mf">2.25</span><span class="kt">rem</span> <span class="o">+</span> <span class="mi">2</span><span class="kt">px</span><span class="p">);</span><span class="k">padding</span><span class="p">:</span><span class="mf">.375</span><span class="kt">rem</span> <span class="mf">.75</span><span class="kt">rem</span><span class="p">;</span><span class="k">font-size</span><span class="p">:</span><span class="mi">1</span><span class="kt">rem</span><span class="p">;</span><span class="k">line-height</span><span class="p">:</span><span class="mf">1.5</span><span class="p">;</span><span class="k">color</span><span class="p">:</span><span class="mh">#495057</span><span class="p">;</span><span class="k">background-color</span><span class="p">:</span><span class="mh">#fff</span><span class="p">;</span><span class="k">background-clip</span><span class="p">:</span><span class="kc">padding-box</span><span class="p">;</span><span class="k">border</span><span class="p">:</span><span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="mh">#ced4da</span><span class="p">;</span><span class="k">border-radius</span><span class="p">:</span><span class="mf">.25</span><span class="kt">rem</span><span class="p">}.</span><span class="nc">form-control</span><span class="p">::</span><span class="nd">-ms-expand</span><span class="p">{</span><span class="k">background-color</span><span class="p">:</span><span class="kc">transparent</span><span class="p">;</span><span class="k">border</span><span class="p">:</span><span class="mi">0</span><span class="p">}.</span><span class="nc">form-control</span><span class="p">::</span><span class="nd">-webkit-input-placeholder</span><span class="p">{</span><span class="k">color</span><span class="p">:</span><span class="mh">#6c757d</span><span class="p">;</span><span class="k">opacity</span><span class="p">:</span><span class="mi">1</span><span class="p">}.</span><span class="nc">form-control</span><span class="p">::</span><span class="nd">-moz-placeholder</span><span class="p">{</span><span class="k">color</span><span class="p">:</span><span class="mh">#6c757d</span><span class="p">;</span><span class="k">opacity</span><span class="p">:</span><span class="mi">1</span><span class="p">}.</span><span class="nc">form-control</span><span class="p">:</span><span class="nd">-ms-input-placeholder</span><span class="p">{</span><span class="k">color</span><span class="p">:</span><span class="mh">#6c757d</span><span class="p">;</span><span class="k">opacity</span><span class="p">:</span><span class="mi">1</span><span class="p">}.</span><span class="nc">form-control</span><span class="p">::</span><span class="nd">-ms-input-placeholder</span><span class="p">{</span><span class="k">color</span><span class="p">:</span><span class="mh">#6c757d</span><span class="p">;</span><span class="k">opacity</span><span class="p">:</span><span class="mi">1</span><span class="p">}.</span><span class="nc">form-inline</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kp">-ms-</span><span class="n">flexbox</span><span class="p">;</span><span class="k">display</span><span class="p">:</span><span class="kc">flex</span><span class="p">;</span><span class="kp">-ms-</span><span class="k">flex-flow</span><span class="p">:</span><span class="kc">row</span> <span class="kc">wrap</span><span class="p">;</span><span class="k">flex-flow</span><span class="p">:</span><span class="kc">row</span> <span class="kc">wrap</span><span class="p">;</span><span class="kp">-ms-</span><span class="n">flex-align</span><span class="p">:</span><span class="kc">center</span><span class="p">;</span><span class="k">align-items</span><span class="p">:</span><span class="kc">center</span><span class="p">}</span><span class="o">[</span><span class="p">@</span><span class="k">media</span><span class="o">](</span><span class="nt">http</span><span class="o">://</span><span class="nt">twitter</span><span class="p">.</span><span class="nc">com</span><span class="o">/</span><span class="nt">media</span> <span class="s2">&#34;Twitter profile for @media&#34;</span><span class="o">)</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">576px</span><span class="o">)</span><span class="p">{.</span><span class="nc">form-inline</span> <span class="p">.</span><span class="nc">form-control</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kc">inline-block</span><span class="p">;</span><span class="k">width</span><span class="p">:</span><span class="kc">auto</span><span class="p">;</span><span class="k">vertical-align</span><span class="p">:</span><span class="kc">middle</span><span class="p">}}.</span><span class="nc">btn</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kc">inline-block</span><span class="p">;</span><span class="k">font-weight</span><span class="p">:</span><span class="mi">400</span><span class="p">;</span><span class="k">text-align</span><span class="p">:</span><span class="kc">center</span><span class="p">;</span><span class="k">white-space</span><span class="p">:</span><span class="kc">nowrap</span><span class="p">;</span><span class="k">vertical-align</span><span class="p">:</span><span class="kc">middle</span><span class="p">;</span><span class="k">border</span><span class="p">:</span><span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">transparent</span><span class="p">;</span><span class="k">padding</span><span class="p">:</span><span class="mf">.375</span><span class="kt">rem</span> <span class="mf">.75</span><span class="kt">rem</span><span class="p">;</span><span class="k">font-size</span><span class="p">:</span><span class="mi">1</span><span class="kt">rem</span><span class="p">;</span><span class="k">line-height</span><span class="p">:</span><span class="mf">1.5</span><span class="p">;</span><span class="k">border-radius</span><span class="p">:</span><span class="mf">.25</span><span class="kt">rem</span><span class="p">}.</span><span class="nc">btn-primary</span><span class="p">{</span><span class="k">color</span><span class="p">:</span><span class="mh">#fff</span><span class="p">;</span><span class="k">background-color</span><span class="p">:</span><span class="mh">#007bff</span><span class="p">;</span><span class="k">border-color</span><span class="p">:</span><span class="mh">#007bff</span><span class="p">}.</span><span class="nc">btn-outline-success</span><span class="p">{</span><span class="k">color</span><span class="p">:</span><span class="mh">#28a745</span><span class="p">;</span><span class="k">background-color</span><span class="p">:</span><span class="kc">transparent</span><span class="p">;</span><span class="k">background-image</span><span class="p">:</span><span class="kc">none</span><span class="p">;</span><span class="k">border-color</span><span class="p">:</span><span class="mh">#28a745</span><span class="p">}.</span><span class="nc">btn-lg</span><span class="p">{</span><span class="k">padding</span><span class="p">:</span><span class="mf">.5</span><span class="kt">rem</span> <span class="mi">1</span><span class="kt">rem</span><span class="p">;</span><span class="k">font-size</span><span class="p">:</span><span class="mf">1.25</span><span class="kt">rem</span><span class="p">;</span><span class="k">line-height</span><span class="p">:</span><span class="mf">1.5</span><span class="p">;</span><span class="k">border-radius</span><span class="p">:</span><span class="mf">.3</span><span class="kt">rem</span><span class="p">}.</span><span class="nc">fade</span><span class="p">:</span><span class="nd">not</span><span class="o">(</span><span class="p">.</span><span class="nc">show</span><span class="o">)</span><span class="p">{</span><span class="k">opacity</span><span class="p">:</span><span class="mi">0</span><span class="p">}.</span><span class="nc">nav</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kp">-ms-</span><span class="n">flexbox</span><span class="p">;</span><span class="k">display</span><span class="p">:</span><span class="kc">flex</span><span class="p">;</span><span class="kp">-ms-</span><span class="k">flex-wrap</span><span class="p">:</span><span class="kc">wrap</span><span class="p">;</span><span class="k">flex-wrap</span><span class="p">:</span><span class="kc">wrap</span><span class="p">;</span><span class="k">padding-left</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">list-style</span><span class="p">:</span><span class="kc">none</span><span class="p">}.</span><span class="nc">nav-link</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kc">block</span><span class="p">;</span><span class="k">padding</span><span class="p">:</span><span class="mf">.5</span><span class="kt">rem</span> <span class="mi">1</span><span class="kt">rem</span><span class="p">}.</span><span class="nc">nav-tabs</span><span class="p">{</span><span class="k">border-bottom</span><span class="p">:</span><span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="mh">#dee2e6</span><span class="p">}.</span><span class="nc">nav-tabs</span> <span class="p">.</span><span class="nc">nav-item</span><span class="p">{</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mi">-1</span><span class="kt">px</span><span class="p">}.</span><span class="nc">nav-tabs</span> <span class="p">.</span><span class="nc">nav-link</span><span class="p">{</span><span class="k">border</span><span class="p">:</span><span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">transparent</span><span class="p">;</span><span class="k">border-top-left-radius</span><span class="p">:</span><span class="mf">.25</span><span class="kt">rem</span><span class="p">;</span><span class="k">border-top-right-radius</span><span class="p">:</span><span class="mf">.25</span><span class="kt">rem</span><span class="p">}.</span><span class="nc">nav-tabs</span> <span class="p">.</span><span class="nc">nav-link</span><span class="p">.</span><span class="nc">active</span><span class="p">{</span><span class="k">color</span><span class="p">:</span><span class="mh">#495057</span><span class="p">;</span><span class="k">background-color</span><span class="p">:</span><span class="mh">#fff</span><span class="p">;</span><span class="k">border-color</span><span class="p">:</span><span class="mh">#dee2e6</span> <span class="mh">#dee2e6</span> <span class="mh">#fff</span><span class="p">}.</span><span class="nc">tab-content</span><span class="o">&gt;</span><span class="p">.</span><span class="nc">tab-pane</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kc">none</span><span class="p">}.</span><span class="nc">tab-content</span><span class="o">&gt;</span><span class="p">.</span><span class="nc">active</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kc">block</span><span class="p">}.</span><span class="nc">navbar</span><span class="p">{</span><span class="k">position</span><span class="p">:</span><span class="kc">relative</span><span class="p">;</span><span class="k">display</span><span class="p">:</span><span class="kp">-ms-</span><span class="n">flexbox</span><span class="p">;</span><span class="k">display</span><span class="p">:</span><span class="kc">flex</span><span class="p">;</span><span class="kp">-ms-</span><span class="k">flex-wrap</span><span class="p">:</span><span class="kc">wrap</span><span class="p">;</span><span class="k">flex-wrap</span><span class="p">:</span><span class="kc">wrap</span><span class="p">;</span><span class="kp">-ms-</span><span class="n">flex-align</span><span class="p">:</span><span class="kc">center</span><span class="p">;</span><span class="k">align-items</span><span class="p">:</span><span class="kc">center</span><span class="p">;</span><span class="kp">-ms-</span><span class="n">flex-pack</span><span class="p">:</span><span class="kc">justify</span><span class="p">;</span><span class="k">justify-content</span><span class="p">:</span><span class="kc">space-between</span><span class="p">;</span><span class="k">padding</span><span class="p">:</span><span class="mf">.5</span><span class="kt">rem</span> <span class="mi">1</span><span class="kt">rem</span><span class="p">}.</span><span class="nc">navbar-nav</span><span class="p">{</span><span class="k">display</span><span class="p">:</span><span class="kp">-ms-</span><span class="n">flexbox</span><span class="p">;</span><span class="k">display</span><span class="p">:</span><span class="kc">flex</span><span class="p">;</span><span class="kp">-ms-</span><span class="k">flex-direction</span><span class="p">:</span><span class="kc">column</span><span class="p">;</span><span class="k">flex-direction</span><span class="p">:</span><span class="kc">column</span><span class="p">;</span><span class="k">padding-left</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">list-style</span><span class="p">:</span><span class="kc">none</span><span class="p">}.</span><span class="nc">navbar-nav</span> <span class="p">.</span><span class="nc">nav-link</span><span class="p">{</span><span class="k">padding-right</span><span class="p">:</span><span class="mi">0</span><span class="p">;</span><span class="k">padding-left</span><span class="p">:</span><span class="mi">0</span><span class="p">}</span><span class="o">[</span><span class="p">@</span><span class="k">media</span><span class="o">](</span><span class="nt">http</span><span class="o">://</span><span class="nt">twitter</span><span class="p">.</span><span class="nc">com</span><span class="o">/</span><span class="nt">media</span> <span class="s2">&#34;Twitter profile for @media&#34;</span><span class="o">)</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">992px</span><span class="o">)</span><span class="p">{.</span><span class="nc">navbar-expand-lg</span><span class="p">{</span><span class="kp">-ms-</span><span class="k">flex-flow</span><span class="p">:</span><span class="kc">row</span> <span class="kc">nowrap</span><span class="p">;</span><span class="k">flex-flow</span><span class="p">:</span><span class="kc">row</span> <span class="kc">nowrap</span><span class="p">;</span><span class="kp">-ms-</span><span class="n">flex-pack</span><span class="p">:</span><span class="kc">start</span><span class="p">;</span><span class="k">justify-content</span><span class="p">:</span><span class="kc">flex-start</span><span class="p">}.</span><span class="nc">navbar-expand-lg</span> <span class="p">.</span><span class="nc">navbar-nav</span><span class="p">{</span><span class="kp">-ms-</span><span class="k">flex-direction</span><span class="p">:</span><span class="kc">row</span><span class="p">;</span><span class="k">flex-direction</span><span class="p">:</span><span class="kc">row</span><span class="p">}.</span><span class="nc">navbar-expand-lg</span> <span class="p">.</span><span class="nc">navbar-nav</span> <span class="p">.</span><span class="nc">nav-link</span><span class="p">{</span><span class="k">padding-right</span><span class="p">:</span><span class="mf">.5</span><span class="kt">rem</span><span class="p">;</span><span class="k">padding-left</span><span class="p">:</span><span class="mf">.5</span><span class="kt">rem</span><span class="p">}}.</span><span class="nc">navbar-light</span> <span class="p">.</span><span class="nc">navbar-nav</span> <span class="p">.</span><span class="nc">nav-link</span><span class="p">{</span><span class="k">color</span><span class="p">:</span><span class="nb">rgba</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">.5</span><span class="p">)}.</span><span class="nc">navbar-light</span> <span class="p">.</span><span class="nc">navbar-nav</span> <span class="p">.</span><span class="nc">active</span><span class="o">&gt;</span><span class="p">.</span><span class="nc">nav-link</span><span class="p">{</span><span class="k">color</span><span class="p">:</span><span class="nb">rgba</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">.9</span><span class="p">)}.</span><span class="nc">jumbotron</span><span class="p">{</span><span class="k">padding</span><span class="p">:</span><span class="mi">2</span><span class="kt">rem</span> <span class="mi">1</span><span class="kt">rem</span><span class="p">;</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mi">2</span><span class="kt">rem</span><span class="p">;</span><span class="k">background-color</span><span class="p">:</span><span class="mh">#e9ecef</span><span class="p">;</span><span class="k">border-radius</span><span class="p">:</span><span class="mf">.3</span><span class="kt">rem</span><span class="p">}</span><span class="o">[</span><span class="p">@</span><span class="k">media</span><span class="o">](</span><span class="nt">http</span><span class="o">://</span><span class="nt">twitter</span><span class="p">.</span><span class="nc">com</span><span class="o">/</span><span class="nt">media</span> <span class="s2">&#34;Twitter profile for @media&#34;</span><span class="o">)</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">576px</span><span class="o">)</span><span class="p">{.</span><span class="nc">jumbotron</span><span class="p">{</span><span class="k">padding</span><span class="p">:</span><span class="mi">4</span><span class="kt">rem</span> <span class="mi">2</span><span class="kt">rem</span><span class="p">}}.</span><span class="nc">bg-secondary</span><span class="p">{</span><span class="k">background-color</span><span class="p">:</span><span class="mh">#6c757d</span><span class="cp">!important</span><span class="p">}.</span><span class="nc">bg-light</span><span class="p">{</span><span class="k">background-color</span><span class="p">:</span><span class="mh">#f8f9fa</span><span class="cp">!important</span><span class="p">}.</span><span class="nc">my-2</span><span class="p">{</span><span class="k">margin-top</span><span class="p">:</span><span class="mf">.5</span><span class="kt">rem</span><span class="cp">!important</span><span class="p">}.</span><span class="nc">my-2</span><span class="p">{</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mf">.5</span><span class="kt">rem</span><span class="cp">!important</span><span class="p">}.</span><span class="nc">mr-auto</span><span class="p">{</span><span class="k">margin-right</span><span class="p">:</span><span class="kc">auto</span><span class="cp">!important</span><span class="p">}</span><span class="o">[</span><span class="p">@</span><span class="k">media</span><span class="o">](</span><span class="nt">http</span><span class="o">://</span><span class="nt">twitter</span><span class="p">.</span><span class="nc">com</span><span class="o">/</span><span class="nt">media</span> <span class="s2">&#34;Twitter profile for @media&#34;</span><span class="o">)</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">576px</span><span class="o">)</span><span class="p">{.</span><span class="nc">my-sm-0</span><span class="p">{</span><span class="k">margin-top</span><span class="p">:</span><span class="mi">0</span><span class="cp">!important</span><span class="p">}.</span><span class="nc">my-sm-0</span><span class="p">{</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mi">0</span><span class="cp">!important</span><span class="p">}.</span><span class="nc">mr-sm-2</span><span class="p">{</span><span class="k">margin-right</span><span class="p">:</span><span class="mf">.5</span><span class="kt">rem</span><span class="cp">!important</span><span class="p">}}</span><span class="o">[</span><span class="p">@</span><span class="k">media</span><span class="o">](</span><span class="nt">http</span><span class="o">://</span><span class="nt">twitter</span><span class="p">.</span><span class="nc">com</span><span class="o">/</span><span class="nt">media</span> <span class="s2">&#34;Twitter profile for @media&#34;</span><span class="o">)</span> <span class="o">(</span><span class="nt">min-width</span><span class="p">:</span><span class="nd">992px</span><span class="o">)</span><span class="p">{.</span><span class="nc">my-lg-0</span><span class="p">{</span><span class="k">margin-top</span><span class="p">:</span><span class="mi">0</span><span class="cp">!important</span><span class="p">}.</span><span class="nc">my-lg-0</span><span class="p">{</span><span class="k">margin-bottom</span><span class="p">:</span><span class="mi">0</span><span class="cp">!important</span><span class="p">}}</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;preload&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;[https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css](https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css)&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span> <span class="na">as</span><span class="o">=</span><span class="s">&#34;style&#34;</span> <span class="na">onload</span><span class="o">=</span><span class="s">&#34;this.onload=null;this.rel=&#39;stylesheet&#39;&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">noscript</span><span class="p">&gt;&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;[https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css](https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css)&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">noscript</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="s2">&#34;use strict&#34;</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">loadCSS</span><span class="o">||</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">loadCSS</span><span class="o">=</span><span class="kd">function</span><span class="p">(){});</span><span class="kd">var</span> <span class="nx">o</span><span class="o">=</span><span class="nx">loadCSS</span><span class="p">.</span><span class="nx">relpreload</span><span class="o">=</span><span class="p">{};</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">support</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&#34;link&#34;</span><span class="p">).</span><span class="nx">relList</span><span class="p">.</span><span class="nx">supports</span><span class="p">(</span><span class="s2">&#34;preload&#34;</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">e</span><span class="p">}}(),</span><span class="nx">o</span><span class="p">.</span><span class="nx">bindMediaToggle</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">media</span><span class="o">||</span><span class="s2">&#34;all&#34;</span><span class="p">;</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="nx">t</span><span class="p">.</span><span class="nx">media</span><span class="o">=</span><span class="nx">e</span><span class="p">}</span><span class="nx">t</span><span class="p">.</span><span class="nx">addEventListener</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;load&#34;</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">attachEvent</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s2">&#34;onload&#34;</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">t</span><span class="p">.</span><span class="nx">rel</span><span class="o">=</span><span class="s2">&#34;stylesheet&#34;</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">media</span><span class="o">=</span><span class="s2">&#34;only x&#34;</span><span class="p">}),</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mf">3e3</span><span class="p">)},</span><span class="nx">o</span><span class="p">.</span><span class="nx">poly</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">o</span><span class="p">.</span><span class="nx">support</span><span class="p">())</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&#34;link&#34;</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="s2">&#34;preload&#34;</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">rel</span><span class="o">||</span><span class="s2">&#34;style&#34;</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&#34;as&#34;</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&#34;data-loadcss&#34;</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;data-loadcss&#34;</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">o</span><span class="p">.</span><span class="nx">bindMediaToggle</span><span class="p">(</span><span class="nx">a</span><span class="p">))}},</span><span class="o">!</span><span class="nx">o</span><span class="p">.</span><span class="nx">support</span><span class="p">()){</span><span class="nx">o</span><span class="p">.</span><span class="nx">poly</span><span class="p">();</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">setInterval</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">poly</span><span class="p">,</span><span class="mi">500</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">addEventListener</span><span class="o">?</span><span class="nx">n</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;load&#34;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">o</span><span class="p">.</span><span class="nx">poly</span><span class="p">(),</span><span class="nx">n</span><span class="p">.</span><span class="nx">clearInterval</span><span class="p">(</span><span class="nx">t</span><span class="p">)})</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">attachEvent</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s2">&#34;onload&#34;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">o</span><span class="p">.</span><span class="nx">poly</span><span class="p">(),</span><span class="nx">n</span><span class="p">.</span><span class="nx">clearInterval</span><span class="p">(</span><span class="nx">t</span><span class="p">)})}</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">exports</span><span class="o">?</span><span class="nx">exports</span><span class="p">.</span><span class="nx">loadCSS</span><span class="o">=</span><span class="nx">loadCSS</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">loadCSS</span><span class="o">=</span><span class="nx">loadCSS</span><span class="p">}(</span><span class="s2">&#34;undefined&#34;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">global</span><span class="o">?</span><span class="nx">global</span><span class="o">:</span><span class="k">this</span><span class="p">);&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;[https://code.jquery.com/jquery-3.3.1.slim.min.js](https://code.jquery.com/jquery-3.3.1.slim.min.js)&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;[https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js](https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js)&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;[https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js](https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js)&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--[if lt IE 9]&gt;  
</span></span></span><span class="line"><span class="cl"><span class="c">      &lt;script src=&#34;[https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js](https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js)&#34;&gt;&lt;/script&gt;  
</span></span></span><span class="line"><span class="cl"><span class="c">    &lt;![endif]--&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">     <span class="c">&lt;!-- ...  --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>如您所见，该工具添加了一个带有大量 CSS 的内联 <code>&lt;style&gt;</code> 元素。请注意，这不是 Bootstrap 的全部 CSS，只是该工具分析的 CSS 对于此页面的初始视图是必需的。仅 Bootstrap 的缩小 CSS 就有 51 KB;这个新的HTML文件包括所有HTML以及新内联的CSS和JavaScript，是12 KB。这种减小的大小比看起来更重要 - 将初始 HTML/CSS/JS 置于 14 KB 以下可以使您的网站在某些最慢的连接上以毫秒为单位呈现。这是因为浏览器和服务器之间的每次往返一次可以发送大约 14 KB - 通过将所有内容放入一次往返中，您可以避免额外往返的开销（<a href="https://developers.google.com/speed/docs/insights/mobile">此处</a>提供更多详细信息）。</p>
<p>该工具还在 CSS link 元素上添加了 <code>rel=&quot;preload&quot;</code> 属性，<a href="https://www.filamentgroup.com/lab/async-css.html">使 CSS 文件能够异步加载</a>。这通常是您不想做的事情 - 尽管它会加快网站速度，但用户会首先看到无样式的纯HTML，然后在加载CSS文件时看到样式正确的网站。但是，在我们的例子中，由于我们正在内联关键的 CSS，这不是问题，因此异步加载剩余的 CSS 可以完美地工作！</p>
<h4 id="实现构建步骤">实现构建步骤</h4>
<p>此时，您可以执行诸如每次部署网站时手动缩小和连接文件之类的操作，但这将是一个巨大的痛苦。理想情况下，您将使用单个命令自动执行这组任务，这称为生成步骤。缩小和串联只是两个可能的任务 - 任何可以自动化的重复性任务。下面是生成步骤中的一些典型任务：</p>
<ul>
<li>
<p>缩小 HTML、CSS 和 JavaScript</p>
</li>
<li>
<p>连接 JavaScript 文件和 CSS 文件</p>
</li>
<li>
<p>优化图像（通过调整大小、删除未使用的元数据等）</p>
</li>
<li>
<p>添加 CSS 供应商前缀以实现浏览器兼容性</p>
</li>
<li>
<p>转译代码（从 SASS 到 CSS，或从 CoffeeScript 到 JS，等等）</p>
</li>
<li>
<p>运行代码测试</p>
</li>
</ul>
<p>要实现构建步骤，您需要选择一个工具，并且有很多工具可供选择。一个流行的选择是 Grunt，它于2012年发布。紧随其后的是 Gulp，以及Broccoli.js，Brunch 和 webpack。截至 2018 年，webpack 似乎是最受欢迎的选择，但最终这些工具中的任何一个都将用于很好地实现构建步骤的目的。</p>
<blockquote>
<p>注意：从头开始学习使用工具进行构建步骤可能非常令人生畏。大多数工具都要求您使用命令行 — 如果您以前从未使用过，您可以阅读<a href="https://www.learnenough.com/command-line-tutorial">本教程</a>以获得入门的良好概述。2018年许多流行的 Web                                                                                                                                                                                                                       开发人员构建工具都是基于 node.js 的——如果你不熟悉 node.js 生态系统及其在前端开发中的使用，你可以阅读我的文章 <a href="https://medium.com/the-node-js-collection/modern-javascript-explained-for-dinosaurs-f695e9747b70">Modern JavaScript Explain For Dinosaurs</a>，了解这方面的概述。</p>
</blockquote>
<p><img loading="lazy" src="https://peterxjang.com/img/1__GbAw9ahi__dxD6LBA6Kh0__g.png" alt="Dinosaur comic panels 3 and 4"  />
</p>
<h3 id="模板和组件提高可维护性">模板和组件提高可维护性</h3>
<p>到目前为止，我们有一个不错的网页，既有相当的吸引力，又有性能。现在它看起来像这样：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__fO1wXfiWfdv8vY3__qeQv0A.png" alt="Example website with Bootstrap styling"  />
</p>
<p>在导航栏中，有一个指向“关于”页面的链接，但它目前没有转到任何地方。如果我们想制作这个关于页面怎么办？最直接的答案是复制名为 <code>about.html</code> 的 <code>index.html</code> ，并相应地更新内容。具体来说， <code>&lt;main&gt;</code> 元素中的内容将更改，HTML 的其余部分将保持不变。下面是一个简单的 <code>about.html</code> 页面的样子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1, shrink-to-fit=no&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;description&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;author&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>My test page<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;[https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css](https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css)&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;[https://code.jquery.com/jquery-3.3.1.slim.min.js](https://code.jquery.com/jquery-3.3.1.slim.min.js)&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;[https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js](https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js)&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;[https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js](https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js)&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--[if lt IE 9]&gt;  
</span></span></span><span class="line"><span class="cl"><span class="c">      &lt;script src=&#34;[https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js](https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js)&#34;&gt;&lt;/script&gt;  
</span></span></span><span class="line"><span class="cl"><span class="c">    &lt;![endif]--&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">nav</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar navbar-expand-lg navbar-light bg-light&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;navigation&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar-nav mr-auto&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item active&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-link&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Home<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-link&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>Info<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">li</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav-link&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span>About<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-inline my-2 my-lg-0&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">input</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control mr-sm-2&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Search&#34;</span> <span class="na">aria-label</span><span class="o">=</span><span class="s">&#34;Search&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-outline-success my-2 my-sm-0&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>Search<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">nav</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">main</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;main&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>About<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Info about this site<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">footer</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar navbar-dark bg-secondary&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;contentinfo&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Copyright info goes here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">footer</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>请注意，除了突出显示的内容外， <code>about.html</code> 中的所有内容都与 <code>index.html</code> 相同。虽然这有效，但从维护的角度来看，它变得有问题。如果我们使用这种技术制作 7 个不同的页面，那将是大量重复的代码。如果我们以后想对导航栏进行更改，则必须将更改复制到所有 7 个文件中。这违反了众所周知的软件原则，称为 <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>（不要重复自己）。</p>
<h4 id="在服务器上构建模板">在服务器上构建模板</h4>
<p>此问题的一个解决方案是使用模板引擎。这涉及在 HTML 中编写非标准 HTML，然后将其输入到一个单独的程序中，该程序将用标准HTML替换非标准 HTML。最好用一个例子来解释这一点。</p>
<p>假设你正在使用 PHP，这是最早设计用于HTML的语言之一（今天仍然被许多大公司使用）。您将创建一个 <code>head.php</code> 文件（包含 <code>&lt;head&gt;</code> 元素中的内容）、 <code>header.php</code> 文件（包含导航栏元素）和 <code>footer.php</code> （包含页脚元素）。</p>
<p>拥有这些文件后，您可以创建一个 <code>index.php</code> 文件，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="cp">&lt;?php include(&#34;head.php&#34;);?&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="cp">&lt;?php include(&#34;header.php&#34;);?&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">main</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;main&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">section</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;jumbotron&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        ...  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">section</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">section</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        ...  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">section</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="cp">&lt;?php include(&#34;footer.php&#34;);?&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p><code>about.php</code> 文件如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="cp">&lt;?php include(&#34;head.php&#34;);?&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="cp">&lt;?php include(&#34;header.php&#34;);?&gt;</span> 
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">main</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;main&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>About<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Info about this site<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="cp">&lt;?php include(&#34;footer.php&#34;);?&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>所以在这里你可以看到唯一改变的部分是中间的内容。如果需要更新页眉、页脚或外部依赖项，则只需更改一次。</p>
<p>上面的代码显然不是有效的 HTML — 您需要某种构建步骤来将 <code>include</code> 语句替换为单独文件中的 HTML。我们实际上可以将其合并到我们之前看到的构建步骤中（用于代码缩小、文件连接、关键 CSS 等）。但是，从模板生成 HTML 的这一步传统上是在服务器上动态完成的。</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__3fBZ27QgR7eDCoPTjam6nw.png#medium" alt="Diagram of client server model"  />
</p>
<center>来自 wikipedia.org </center>
<p>服务器是接收 Web 请求并将 HTML/CSS/JS 作为 Web 响应发送回的计算机（与客户端相反，具有启动 Web 请求的 Web 浏览器的计算机）。服务器通常负责基于数据库中的数据创建动态 HTML。例如，如果您在 <a href="https://www.google.com">www.google.com</a> 上搜索“红色香蕉”，则不会有一些关于红色香蕉的唯一HTML文件从服务器发送给您。相反，服务器运行代码以根据您的搜索词动态创建 HTML 响应。所以在这里你可以用一块石头杀死两只鸟——因为你已经有一个步骤在服务器上生成动态 HTML，你可以使用模板来定义生成的 HTML 来保持你的代码干燥。</p>
<p>在服务器上使用模板构建 HTML 是一种解决方案，在相当长的一段时间内一直是事实上的标准。除了 PHP，还有 <a href="https://rubyonrails.org/">Ruby on Rails</a> 框架的 <a href="https://en.wikipedia.org/wiki/ERuby">ERB</a>，Python 的 <a href="https://www.djangoproject.com/">Django</a> 框架的 <a href="https://docs.djangoproject.com/en/1.7/topics/templates/">Django模板语言</a>，Node&rsquo;s <a href="https://expressjs.com/">Express</a> 框架的<a href="http://ejs.co/">EJS</a>等。这种方法可能非常令人生畏——为了利用模板引擎编写可维护的代码，您基本上首先必须学习整个编程语言和 Web 框架！如果您已经计划使用服务器和数据库，那么这是很自然的选择。但是，如果您只是对在前端编写 HTML 感兴趣，那么老实说，这是一个巨大的进入障碍。</p>
<blockquote>
<p>注意：如果您的网站不需要数据库，则可以改用静态网站生成器，该生成器使用模板来构建静态HTML文件（Jekyll，Hugo和Gatsby是一些流行的选择）。与服务器端 Web 框架相比，静态站点生成器可能更易于使用;但是，您仍然需要学习单独的编程语言或环境，因此与编写纯HTML相比，进入仍然存在障碍。</p>
</blockquote>
<h4 id="在客户端上使用-web-组件">在客户端上使用 Web 组件</h4>
<p>Web 组件于2011年首次引入，作为解决 HTML 可维护性问题的完全不同的方法。Web 组件是在客户端而不是服务器上构建的，这消除了必须学习服务器端编程语言和 Web 框架来编写可维护的 HTML 的障碍。</p>
<p>Web 组件的总体目标是能够创建可重用的小部件。回顾前面的示例，您可以创建导航栏组件、页眉组件和页脚组件。更进一步，您可以为页面中的内容创建一个巨型组件和一个文章组件。然后，您可以使用 <code>index.html</code> 中的组件，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">navbar-component</span><span class="p">&gt;&lt;/</span><span class="nt">navbar-component</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">main</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;main&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">jumbotron-component</span><span class="p">&gt;&lt;/</span><span class="nt">jumbotron-component</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">section</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">articles-component</span><span class="p">&gt;&lt;/</span><span class="nt">articles-component</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">section</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">main</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">footer-component</span><span class="p">&gt;&lt;/</span><span class="nt">footer-component</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>为了使其正常工作，我们需要创建自定义元素，其中我们基本上是为HTML语言定义新元素（仅适用于此特定网站）。要创建自定义元素，您必须使用 JavaScript。下面是创建导航栏自定义元素所需的 JavaScript 示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nb">window</span><span class="p">.</span><span class="nx">customElements</span><span class="p">.</span><span class="nx">define</span><span class="p">(</span>  
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;navbar-component&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="kr">class</span> <span class="kr">extends</span> <span class="nx">HTMLElement</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">connectedCallback</span><span class="p">()</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="sb">`  
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;nav class=&#34;navbar navbar-expand-lg navbar-light bg-light&#34; role=&#34;navigation&#34;&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">          &lt;ul class=&#34;navbar-nav mr-auto&#34;&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">            &lt;li class=&#34;nav-item active&#34;&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">              &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;Home&lt;/a&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">            &lt;/li&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">            &lt;li class=&#34;nav-item&#34;&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">              &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;Info&lt;/a&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">            &lt;/li&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">            &lt;li class=&#34;nav-item&#34;&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">              &lt;a class=&#34;nav-link&#34; href=&#34;#&#34;&gt;About&lt;/a&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">            &lt;/li&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">          &lt;/ul&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">          &lt;form class=&#34;form-inline my-2 my-lg-0&#34;&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">            &lt;input class=&#34;form-control mr-sm-2&#34; type=&#34;text&#34; placeholder=&#34;Search&#34; aria-label=&#34;Search&#34;&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">            &lt;button class=&#34;btn btn-outline-success my-2 my-sm-0&#34; type=&#34;submit&#34;&gt;Search&lt;/button&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">          &lt;/form&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">        &lt;/nav&gt;  
</span></span></span><span class="line"><span class="cl"><span class="sb">       `</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">}</span>  
</span></span><span class="line"><span class="cl">  <span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></div><p>JavaScript 看起来有点复杂（它使用新的 <a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015">ES2015</a> 语言功能），但它在这个例子中所做的只是为导航栏定义 HTML（上面以粗体显示）并将名称 <code>navbar-component</code> 注册为自定义元素。请注意，HTML 是使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">模板文字</a>在 JavaScript 文件中定义的，本质上是一个巨大的字符串——如果你更喜欢将其移回常规 HTML 文件，我们将需要一个不同的机制，我们将在稍后讨论。如果您将此 JavaScript 添加到页面，您现在可以在普通 HTML 元素之外创建 <code>&lt;navbar-component&gt;</code> 个元素。</p>
<p>到目前为止，在此示例中，此方法与服务器端模板方法相比没有太大优势。但是，当您开始向每个组件添加 JavaScript 功能和 CSS 样式时，好处变得更加明显。Web 组件提供了隔离功能和样式的功能，以保留在每个组件中，使它们可重用 — 不仅用于此站点，而且理论上可以在多个项目中重用。这个概念可以在现有的 HTML 元素（如 <code>&lt;video&gt;</code> 元素）中看到。如果你像这样写 HTML：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">video</span> <span class="na">width</span><span class="o">=</span><span class="s">&#34;320&#34;</span> <span class="na">height</span><span class="o">=</span><span class="s">&#34;240&#34;</span> <span class="na">controls</span> <span class="na">loop</span> <span class="na">muted</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">source</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;movie.mp4&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;video/mp4&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">source</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;movie.ogg&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;video/ogg&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Your browser doesn&#39;t support HTML5 video. Here is  
</span></span><span class="line"><span class="cl">     a <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;movie.mp4&#34;</span><span class="p">&gt;</span>link to the video<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span> instead.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">video</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>你会得到一个看起来像这样的视频播放器：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__3pRSQmwBda1IeFo1Smrg__A.png" alt="Example HTML video element"  />
</p>
<center>*（这是视频的图片，不是实际的视频）*</center>
<p>元素带有自己的 JavaScript 交互式控件和 CSS 样式，它们与页面的其余部分隔离。这意味着当您使用 <video> 元素时，您不必担心它会影响您网站的样式或功能，也不必担心来自网站的任何 CSS 或 JavaScript 会破坏视频组件。</p>
<p>Web 组件的目标是使开发人员能够创建自己的自定义组件，类似于 <code>&lt;video&gt;</code> 元素，并具有所有隔离和可重用性优势。以下是 Web 组件规范的所有部分如何协同工作：</p>
<ul>
<li>
<p>您可以在 JavaScript 中创建<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements">自定义元素</a>，如前所述。然后，您可以在 JavaScript 中定义自定义功能，并将属性从 HTML 传递到自定义元素中。</p>
</li>
<li>
<p>您可以使用<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM">影子 DOM</a> 使用 CSS 设置自定义元素的样式，该样式仅适用于元素而不是整个文档（解决 CSS 最困难的方面之一）。</p>
</li>
<li>
<p>如果你不想直接用 JavaScript 编写所有的 HTML，你可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template">HTML 模板</a>，在 <code>&lt;template&gt;</code> 标记中将组件的 HTML 写入普通 HTML 文件中，在被 JavaScript 调用之前不会呈现。</p>
</li>
<li>
<p>要组织代码，您可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/HTML_Imports">HTML 导入</a>，您可以在其中将定义组件所需的所有 HTML、CSS 和 JavaScript 放入名为 <code>navbar-component.html</code> 的文件中，然后将其导入主 HTML 文件中，就像导入外部 CSS 文件一样：<code>&lt;link rel=&quot;import&quot; href=&quot;navbar-component.html&quot;&gt;</code>.</p>
</li>
</ul>
<p>当 Web 组件在 2011 年首次发布时，许多开发人员对这些可能性感到兴奋。虽然服务器端模板化方法有助于解决 HTML 的一些可维护性问题，但 Web 组件提供了完全不同的东西 - 扩展 HTML 的承诺将具有完整的可重用小部件。这是使 Web 平台成为可以开发复杂应用程序的地方所缺少的部分，而不是最初设计的简单静态内容站点。</p>
<p>那么发生了什么？在接下来的几年里，很明显，浏览器并没有就 Web 组件作为标准达成一致。截至2018年，几乎没有浏览器完全支持上述Web 组件的四个主要功能，这是由于实现性能的潜在问题，标准冲突和不同的公司利益。这让开发人员处于一个有趣的位置 - 几乎每个人都同意组件样式方法是将 Web 从静态站点转移到复杂应用程序的必要部分，但等待浏览器支持似乎是徒劳的。怎么办？</p>
<h4 id="在客户端上使用-javascript-框架">在客户端上使用 JavaScript 框架</h4>
<p>当 HTML Web 组件规范不会很快实现时，JavaScript 已经是一种足够强大的语言来弥补这一缺陷。开发人员一直在使用 <a href="https://jquery.com/">jQuery</a> 库（2006年发布）制作复杂的应用程序，尽管很难为大规模应用程序组织代码。<a href="http://backbonejs.org/">Backbone.js</a>（2010年发布）是最早的流行库之一，旨在为大型单页应用程序提供组织代码的框架，其次是 <a href="https://angularjs.org/">AngularJS</a>，<a href="https://www.emberjs.com/">Ember.js </a>等。</p>
<p>所有这些框架都与现有的 JavaScript 功能一起工作 - 它们不必依赖于等待浏览器来实现Web组件规范。但是没有一个框架使用真正的孤立和可重用的组件；如果没有 Web 组件规范的 4 个部分（自定义元素、影子 DOM、HTML 模板和 HTML 导入），这似乎是不可能的。</p>
<p>2013 年，一个名为 <a href="https://reactjs.org/">React</a> 的框架发布，它对这种情况有一个有趣的看法。他们能够使用以下方法在没有 Web 组件规范的情况下制作一个真正的基于组件的框架：</p>
<ul>
<li>React 没有使用 Web 组件的自定义元素规范，而是采用了在 JavaScript 中定义所有 HTML 的方法。从本质上讲，您将定义JavaScript函数以使用称为JSX的特殊语法输出所需的HTML（它看起来像HTML，但使用构建步骤转换为JavaScript函数）。</li>
<li>React 没有使用 Web 组件的 HTML 模板规范，而是没有提供在 JavaScript 之外编写 HTML 的方法。</li>
<li>React 没有使用 Web 组件的 HTML 导入规范，而是采用了将 JavaScript 导入 JavaScript 的方法。这在当时实际上并不直接可行，但像<a href="http://browserify.org/">Browserify</a> 和 <a href="https://webpack.js.org/">webpack</a>这样的工具允许开发人员在 他们的 JavaScript 中编写 <code>require</code> 或 <code>import</code> 语句，这些语句将在构建时转换为单个JavaScript包。</li>
</ul>
<p>从本质上讲，这里的见解是，您可以通过在 JavaScript 中执行所有操作来使组件工作。请注意，这里缺少 Web 组件规范的一部分，即影子 DOM——React 在首次发布时没有隔离样式的解决方案。尽管如此，它足以为今天使用组件构建应用程序提供一个框架。</p>
<p>这就是 JavaScript 使用 React 制作导航栏组件的样子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">class</span> <span class="nx">Navbar</span> <span class="kr">extends</span> <span class="nx">Component</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">nav</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;navbar navbar-expand-lg navbar-light bg-light&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;navigation&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;navbar-nav mr-auto&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">li</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;nav-item active&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;nav-link&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span><span class="nx">Home</span><span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">li</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;nav-link&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span><span class="nx">Info</span><span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">li</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;nav-item&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">a</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;nav-link&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span><span class="p">&gt;</span><span class="nx">About</span><span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">form</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;form-inline my-2 my-lg-0&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">input</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;form-control mr-sm-2&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Search&#34;</span> <span class="na">aria</span><span class="err">-</span><span class="na">label</span><span class="o">=</span><span class="s">&#34;Search&#34;</span><span class="p">/&gt;</span>  
</span></span><span class="line"><span class="cl">          <span class="p">&lt;</span><span class="nt">button</span> <span class="na">className</span><span class="o">=</span><span class="s">&#34;btn btn-outline-success my-2 my-sm-0&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span><span class="nx">Search</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">nav</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">    <span class="p">);</span>  
</span></span><span class="line"><span class="cl">  <span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">Navbar</span><span class="p">;</span>
</span></span></code></pre></div><p>这与前面显示的自定义元素示例没有太大区别（尽管 JSX 语法在大多数开发人员第一次看到它时都感到不安）。React 中的想法是将其分解为进一步的子组件，这样每个组件只做一件事。</p>
<p>当 React 首次发布时，它遭到了很多批评，特别是因为它似乎缺乏关注点分离（开发人员被教导将 HTML、CSS 和 JS 完全分开以实现可维护性）。然而，React 提出了这样一个观点，即对于复杂的Web应用程序，关注点的分离不是关于技术（HTML，CSS和JS）之间的边界，而是关于功能单元（换句话说，组件）之间的边界。</p>
<p>除了作为一个基于组件的框架之外，React 还带来了关于如何使用声明性方法管理应用程序中数据的强烈意见。这意味着使用 React，您无需编写代码即可直接更新接口。相反，你定义接口应该是什么样子（使用 JSX），编写代码来更新数据，然后让 React 弄清楚如何使用其虚拟 DOM 实现有效地更新和渲染接口（不要与影子 DOM 混淆）。这是 Web 框架设计的一个重大转变，影响力大到每个主要框架都公开借用了 React 使用 <a href="https://reactjs.org/docs/faq-internals.html">虚拟 DOM</a> 实现的声明式方法 — Ember、Angular、Vue.js，等等。截至2018年，Web 开发社区已在很大程度上接受这种范式作为构建现代 Web 应用程序的方式。</p>
<p>请注意，以清晰且可维护的方式编写 HTML 的愿望使我们进入了一个需要大量编程知识的地方;几乎不可能特别避免 JavaScript。从某种意义上说，这打破了HTML的承诺，HTML 被设计成一种不需要理解编程就可以有效使用的语言。未来可能会有开发人员可以在纯 HTML 中共享预先构建的 Web 组件，但未来可能需要相当长的时间才能到来。</p>
<blockquote>
<p>本节仅简要概述了 React 和其他类似框架采用的前端方法。如果你想要更完整的解释和教程，关于如何使用各种JavaScript框架和方法构建一个工作的应用程序，请查看我的系列比较前端方法：<a href="https://medium.com/actualize-network/comparing-frontend-frameworks-part-1-introduction-6cf3d49e42cf">看看jQuery，Vue.js，React和Elm</a>。</p>
</blockquote>
<h3 id="结论">结论</h3>
<p>简而言之，这就是现代 HTML。我们介绍了使用适当的标签和 aria 属性编写语义和可访问的内容，使用 CSS 和 JavaScript 添加样式和动态功能，使用 HTML 属性和工具提高性能，最后使用模板和组件来提高可维护性。在此过程中，我们可以看到，要充分利用现代 HTML，几乎不可能避免使用构建过程以及某种形式的独立编程语言，对于大多数方法来说，这通常是 JavaScript。</p>
<p>从高层次来看它有时会令人沮丧——过去是一个简单易用的工作（用 HTML 制作网站）现在变得复杂且似乎难以接近（使用JavaScript前端框架制作 Web 应用程序，使用具有数千个潜在脆弱依赖项的构建过程）。然而，重要的是要注意，Web 开发作为一个行业只存在了大约30年 - 与其他行业（例如已经存在了许多世纪的建筑）相比，这只是历史的一小部分。就好像 Web 开发人员刚刚学会了如何用粘土建造房屋，现在被要求使用相同的工具来建造摩天大楼。我们的工具和流程不断发展是很自然的;我们只需要确保它以一种<a href="https://www.vanityfair.com/news/2018/07/the-man-who-created-the-world-wide-web-has-some-regrets">包容网络作为民主平台</a>的最初愿景的方式发展。</p>
<p>现代 HTML 的使用肯定会令人沮丧，因为它继续快速变化和发展。然而，我们现在能够做的比以往任何时候都多，而且我们基本上都处于一个新行业的底层，有可能将其塑造成我们希望它成为的平台。作为一名开发人员，这是一个激动人心的时刻，我希望这些信息可以作为路线图，在您的旅程中为您提供帮助！</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__fHND__kRQTWkLMFlOwbZNrw.png" alt="Dinosaur comic panel 5"  />
</p>
<p>特别感谢 <a href="https://twitter.com/ryanqnorth">@ryanqnorth</a> 的 <a href="http://www.qwantz.com/">恐龙漫画</a>，自2003年以来（恐龙统治网络）以来，它提供了一些最好的荒诞幽默。</p>
<blockquote>
<p>对这种学习方式感兴趣？请务必查看 <a href="http://anyonecanlearntocode.com/">Actualize 编码训练营</a>（我是教学主任和首席讲师）。我们在芝加哥提供 <a href="http://anyonecanlearntocode.com/chicago-coding-bootcamp">面对面的课程</a> 以及 <a href="http://anyonecanlearntocode.com/online-coding-bootcamp">实时在线课程</a>，以帮助人们过渡到现代网络开发人员的新职业！</p>
</blockquote>
<p>原文链接：<a href="https://peterxjang.com/blog/modern-html-explained-for-dinosaurs.html">https://peterxjang.com/blog/modern-html-explained-for-dinosaurs.html</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]为恐龙解释现代JavaScript</title>
      <link>https://blog.chensoul.com/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/</link>
      <pubDate>Mon, 19 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/</guid>
      <description>图片来自Ryan North的Dinosaur Comics。 如果你从一开始就没有去过那里，那么学习现代 JavaScript 是很困难的。生态系统的发展和变化如此之</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://peterxjang.com/img/1__H8PH__HaV43gZyBJz0mJHxA.png" alt="Images from Dinosaur Comics by Ryan North"  />
</p>
<center>图片来自Ryan North的Dinosaur Comics。</center>
<p>如果你从一开始就没有去过那里，那么学习现代 JavaScript 是很困难的。生态系统的发展和变化如此之快，以至于很难理解不同工具试图解决的问题。我从 1998 年开始编程，但直到 2014 年才开始认真学习 JavaScript。当时我记得遇到 <a href="http://browserify.org/">Browserify</a> 并盯着它的标语：</p>
<blockquote>
<p>Browserify 通过捆绑所有依赖项，让你在浏览器中导入（&lsquo;模块&rsquo;）。</p>
</blockquote>
<p>我几乎听不懂这句话中的任何单词，并且努力理解这对我作为开发人员有什么帮助。</p>
<p>本文的目的是提供一个历史背景，说明 JavaScript 工具如何在 2017 年发展到今天的样子。我们将从头开始，像恐龙一样构建一个示例网站 - 没有工具，只有普通的 HTML 和 JavaScript。然后，我们将逐步介绍不同的工具，以查看它们一次解决一个问题。有了这个历史背景，你将能够更好地学习和适应未来不断变化的 JavaScript 环境。让我们开始吧！</p>
<blockquote>
<p>更新：我制作了本文的视频课程版本，为了更清晰，我逐步浏览了每个部分，请在此处查看：
<a href="https://firstclass.actualize.co/p/modern-javascript-explained-for-dinosaurs">https://firstclass.actualize.co/p/modern-javascript-explained-for-dinosaurs</a></p>
</blockquote>
<h3 id="以老派的方式使用-javascript">以&quot;老派&quot;的方式使用 JavaScript</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- index.html --&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  **<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;index.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>**  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello from HTML!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>第 <code>&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</code> 行引用同一目录中名为 <code>index.js</code> 的单独 JavaScript 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// index.js  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello from JavaScript!&#34;</span><span class="p">);</span>
</span></span></code></pre></div><p>这就是制作网站所需的全部内容！现在，假设您想添加一个其他人编写的库，例如 moment.js（一个可以帮助以人类可读的方式格式化日期的库）。例如，您可以在 JavaScript 中使用 <code>moment</code> 函数，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">moment</span><span class="p">().</span><span class="nx">startOf</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">();</span>        <span class="c1">// 20 hours ago
</span></span></span></code></pre></div><p>但这只是假设您在网站上包含 moment.js！在 <a href="http://momentjs.com/">moment.js 主页</a> 上您会看到以下说明：</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__ef7OX37jr____Jc38ZxO97Iw.png" alt="Install instructions for moment.js"  />
</p>
<p>嗯，右侧的&quot;安装&quot;部分有很多内容。但是现在让我们忽略它 - 我们可以通过在同一目录中下载 <code>moment.min.js</code> 文件并将其包含在我们的 <code>index.html</code> 文件中来为我们的网站添加 moment.js。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- index.html --&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;index.css&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;moment.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;index.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello from HTML!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>请注意， <code>moment.min.js</code> 在 <code>index.js</code> 之前加载，这意味着您可以在 <code>index.js</code> 中使用 <code>moment</code> 函数，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// index.js  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello from JavaScript!&#34;</span><span class="p">);</span>  
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">().</span><span class="nx">startOf</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">());</span>
</span></span></code></pre></div><p>这就是我们过去使用 JavaScript 库制作网站的方式！好消息是它很容易理解。不好的是，每次更新时查找和下载新版本的库都很烦人。</p>
<h3 id="使用-javascript-包管理器-npm">使用 JavaScript 包管理器 （npm）</h3>
<p>从 2010 年左右开始，出现了几个相互竞争的 JavaScript 包管理器，以帮助自动化从中央存储库下载和升级库的过程。<a href="https://bower.io/">Bower</a> 可以说是2013年最受欢迎的，但最终在2015年左右被 <a href="https://www.npmjs.com/">npm</a> 超越。（值得注意的是，从 2016 年末开始，<a href="https://yarnpkg.com/en/">yarn</a> 作为 npm 接口的替代品获得了很大的关注，但它仍然在引擎盖下使用 npm 包。</p>
<p>请注意，npm 最初是专门为 node.js 制作的包管理器，这是一个旨在在服务器上运行的 JavaScript 运行时，而不是前端。因此，对于打算在浏览器中运行的库的前端 JavaScript 包管理器来说，这是一个非常奇怪的选择。</p>
<blockquote>
<p>注意：使用包管理器通常涉及使用命令行，过去前端开发从不需要命令行。如果您从未使用过，可以阅读<a href="https://www.learnenough.com/command-line-tutorial">本教程</a>以获取入门的良好概述。无论好坏，知道如何使用命令行是现代JavaScript的重要组成部分（它也为其他开发领域打开了大门）。</p>
</blockquote>
<p>让我们看看如何使用 npm 自动安装 moment.js 包，而不是手动下载它。如果您安装了 node.js，则您已经安装了 npm，这意味着您可以将命令行导航到包含 <code>index.html</code> 文件的文件夹并输入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm init
</span></span></code></pre></div><p>这将提示您几个问题（默认值很好，您可以为每个问题点击“Enter”）并生成一个名为 <code>package.json</code> 的新文件。这是 npm 用来保存所有项目信息的配置文件。使用默认值时， <code>package.json</code> 的内容应如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;your-project-name&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;main&#34;</span><span class="p">:</span> <span class="s2">&#34;index.js&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">},</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;ISC&#34;</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>要安装 moment.js JavaScript 包，我们现在可以通过在命令行中输入以下命令来按照其主页上的 npm 说明进行操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install moment --save
</span></span></code></pre></div><p>此命令执行两件事 — 首先，它从 <a href="https://unpkg.com/moment/">moment.js 包</a> 下载所有代码名为 <code>node_modules</code> 的文件夹中。其次，它会自动修改 <code>package.json</code> 文件以跟踪 moment.js 作为项目依赖项。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;modern-javascript-example&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;main&#34;</span><span class="p">:</span> <span class="s2">&#34;index.js&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">},</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;ISC&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;moment&#34;</span><span class="p">:</span> <span class="s2">&#34;^2.22.2&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这在以后与他人共享项目时很有用 - 而不是共享 <code>node_modules</code> 文件夹（可能会变得非常大），您只需要共享 <code>package.json</code> 文件，其他开发人员可以使用命令 <code>npm install</code> 自动安装所需的包。</p>
<p>所以现在我们不再需要从网站上手动下载 momentjs，我们可以使用 npm 自动下载和更新它。查看 <code>node_modules</code> 文件夹内部，我们可以看到 <code>moment.min.js</code> 目录中的 <code>node_modules/moment/min</code> 文件。这意味着我们可以链接到 <code>index.html</code> 文件中的 npm 下载版本，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- index.html --&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;node_modules/moment/min/moment.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;index.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello from HTML!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>所以好消息是我们现在可以使用 npm 通过命令行下载和更新我们的包。不好的是，现在我们正在挖掘 <code>node_modules</code> 文件夹以查找每个包的位置，并手动将其包含在我们的 HTML 中。这很不方便，所以接下来我们将看看如何自动化该过程。</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__GeEETvRqyG4o7SZdbU2Guw.png" alt="Dinosaur comic panel 2"  />
</p>
<h3 id="使用-javascript-模块捆绑器webpack">使用 JavaScript 模块捆绑器（webpack)　</h3>
<p>大多数编程语言都提供了一种将代码从一个文件导入另一个文件的方法。JavaScript 最初并不是使用此功能设计的，因为 JavaScript 被设计为仅在浏览器中运行，无法访问客户端计算机的文件系统（出于安全原因）。因此，在很长一段时间内，在多个文件中组织 JavaScript 代码需要您使用全局共享的变量加载每个文件。</p>
<p>这实际上是我们在上面所做的 moment.js 示例 — 整个 <code>moment.min.js</code> 文件加载到 HTML 中，HTML 定义了一个全局变量 <code>moment</code> ，然后可用于在 <code>moment.min.js</code> 之后加载的任何文件（无论它是否需要访问它）。</p>
<p>2009年，一个名为 CommonJS 的项目启动，目标是在浏览器之外为 JavaScript 指定一个生态系统。CommonJS 的很大一部分是它的模块规范，它最终允许 JavaScript 像大多数编程语言一样跨文件导入和导出代码，而无需诉诸全局变量。最著名的 CommonJS 模块实现是 node.js。</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__xeF1flp1zDLLJ4j7rDQ6__Q.png#medium" alt="Node.js logo"  />
</p>
<p>如前所述，node.js 是一个设计用于在服务器上运行的 JavaScript 运行时。下面是前面的示例使用 node.js 模块的样子。与其使用 HTML 脚本标记加载所有 <code>moment.min.js</code> ，不如直接将其加载到 JavaScript 文件中，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// index.js  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;moment&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello from JavaScript!&#34;</span><span class="p">);</span>  
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">().</span><span class="nx">startOf</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">());</span>
</span></span></code></pre></div><p>同样，这就是模块加载在 node.js 中的工作方式，由于 node.js 是一种可以访问计算机文件系统的服务器端语言，因此效果很好。Node.js 也知道每个 npm 模块路径的位置，所以你不必写 <code>require('./node_modules/moment/min/moment.min.js)</code> ，你可以简单地写 <code>require('moment')</code> — 非常甜蜜。</p>
<p>这对于 node.js 来说都很棒，但是如果您尝试在浏览器中使用上述代码，则会收到一条错误消息，指出未定义浏览器无法访问文件系统，这意味着以这种方式加载模块非常棘手 - 加载文件必须动态完成，同步（这会减慢执行速度）或异步（可能存在计时问题）。</p>
<p>这就是模块捆绑器的用武之地。JavaScript 模块捆绑器是一种工具，它通过构建步骤（可以访问文件系统）来解决问题，以创建与浏览器兼容的最终输出（不需要访问文件系统）。在这种情况下，我们需要一个模块捆绑器来查找所有 <code>require</code> 语句（这是无效的浏览器 JavaScript 语法），并将它们替换为每个所需文件的实际内容。最终结果是一个捆绑的 JavaScript 文件（没有 require 语句）！</p>
<p>最流行的模块捆绑器是 Browserify，它于 2011 年发布，率先在前端使用 node.js 样式的需求语句（这本质上是使 npm 成为首选前端包管理器的原因）。大约在 2015 年，webpack 最终成为使用更广泛的模块捆绑器（受到 React 前端框架的普及的推动，它充分利用了 webpack 的各种功能）。</p>
<p>让我们来看看如何使用 webpack 让上面的 <code>require('moment')</code> 示例在浏览器中工作。首先，我们需要将 webpack 安装到项目中。Webpack 本身是一个 npm 包，所以我们可以从命令行安装它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install webpack webpack-cli --save-dev
</span></span></code></pre></div><p>请注意，我们正在安装两个软件包 — webpack 和 webpack-cli（它使您能够从命令行使用 webpack）。另请注意 <code>--save-dev</code> 参数 — 这会将其保存为开发依赖项，这意味着它是开发环境中需要的包，而不是生产服务器上需要的包。您可以在自动更新的 <code>package.json</code> 文件中看到这反映在：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;modern-javascript-example&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;main&#34;</span><span class="p">:</span> <span class="s2">&#34;index.js&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">},</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;ISC&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;moment&#34;</span><span class="p">:</span> <span class="s2">&#34;^2.19.1&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">},</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack&#34;</span><span class="p">:</span> <span class="s2">&#34;^4.17.1&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack-cli&#34;</span><span class="p">:</span> <span class="s2">&#34;^3.1.0&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>现在我们已经将 webpack 和 webpack-cli 作为包安装在 <code>node_modules</code> 文件夹中。您可以从命令行使用 webpack-cli，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./node_modules/.bin/webpack index.js --mode<span class="o">=</span>development
</span></span></code></pre></div><p>此命令将运行安装在 <code>node_modules</code> 文件夹中的 webpack 工具，从 <code>index.js</code> 文件开始，找到任意 <code>require</code> 语句，并将它们替换为适当的代码以创建单个输出文件（默认为 <code>dist/main.js</code> ）。 <code>--mode=development</code> 参数是为了让开发人员保持 JavaScript 的可读性，而不是参数 <code>--mode=production</code> 的缩小输出。</p>
<p>现在我们有了 webpack 的 <code>dist/main.js</code> 输出，我们将在浏览器中使用它而不是 <code>index.js</code> ，因为它包含无效的 require 语句。这将反映在 <code>index.html</code> 文件中，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- index.html --&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;dist/main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello from HTML!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>如果您刷新浏览器，您应该会看到一切都像以前一样工作！</p>
<p>请注意，每次更改 <code>index.js</code> 时，我们都需要运行 webpack 命令。这很乏味，当我们使用 webpack 更高级的功能（例如生成源映射以帮助从转译的代码调试原始代码）时，这将变得更加乏味。Webpack 可以从名为 <code>webpack.config.js</code> 的项目根目录中的配置文件中读取选项，在我们的例子中，它看起来像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// webpack.config.js  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;development&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nx">entry</span><span class="o">:</span> <span class="s1">&#39;./index.js&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;main.js&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">publicPath</span><span class="o">:</span> <span class="s1">&#39;dist&#39;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>现在每次我们更改 <code>index.js</code> 时，我们都可以使用以下命令运行 webpack：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./node_modules/.bin/webpack
</span></span></code></pre></div><p>我们不再需要指定 <code>index.js</code> 和 <code>--mode=development</code> 选项，因为 webpack 正在从 <code>webpack.config.js</code> 文件中加载这些选项。这更好，但为每个代码更改输入此命令仍然很乏味 - 我们将使此过程更顺畅。</p>
<p>总的来说，这可能看起来不多，但这个工作流程有一些巨大的优势。我们不再通过全局变量加载外部脚本。任何新的 JavaScript 库都将在 JavaScript 中使用 <code>require</code> 语句添加，而不是在 HTML 中添加新的 <code>&lt;script&gt;</code> 标签。拥有单个 JavaScript 捆绑包文件通常对性能更好。现在我们添加了构建步骤，我们可以将其他一些强大的功能添加到我们的开发工作流程中！</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__ee__ivxNTKgIJTjmEMC4__dg.png" alt="Dinosaur comic panels 3 and 4"  />
</p>
<h3 id="为新的语言功能转译代码-babel">为新的语言功能转译代码 （babel）</h3>
<p>转译代码意味着将一种语言的代码转换为另一种类似语言的代码。这是前端开发的一个重要部分——由于浏览器添加新功能的速度很慢，因此使用实验性功能创建了新语言，这些功能可以转换为浏览器兼容语言。</p>
<p>对于CSS，有 <a href="http://sass-lang.com/">Sass</a>，<a href="http://lesscss.org/">Less </a>和 <a href="http://stylus-lang.com/">Stylus</a>，仅举几例。对于 JavaScript，一段时间内最流行的转译器是 <a href="http://coffeescript.org/">CoffeeScript</a>（2010年左右发布），而现在大多数人使用 <a href="https://babeljs.io/">babel  </a>或 <a href="http://www.typescriptlang.org/">TypeScript</a>。CoffeeScript 是一种专注于通过显著改变语言来改进 JavaScript 的语言——可选的括号、重要的空格等。Babel 不是一门新语言，而是一种转译器，它将尚未适用于所有浏览器（<a href="https://babeljs.io/learn-es2015/">ES2015</a> 及更高版本）的下一代 JavaScript 转译为更兼容的旧 JavaScript （ES5）。Typescript 是一种与下一代  JavaScript 基本相同的语言，但也添加了可选的静态类型。许多人选择使用 babel，因为它最接近原版 JavaScript。</p>
<p>让我们看一个如何在我们现有的 webpack 构建步骤中使用 babel 的示例。首先，我们将从命令行将 babel（这是一个 npm 包）安装到项目中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install @babel/core @babel/preset-env babel-loader --save-dev
</span></span></code></pre></div><p>请注意，我们正在安装 3 个单独的包作为开发依赖项 — <code>@babel/core</code> 是 babel 的主要部分， <code>@babel/preset-env</code> 是定义要转译的新 JavaScript 功能的预设， <code>babel-loader</code> 是使 babel 能够使用 webpack 的包。我们可以通过编辑 <code>webpack.config.js</code> 文件将 webpack 配置为使用 <code>babel-loader</code> ，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// webpack.config.js  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;development&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nx">entry</span><span class="o">:</span> <span class="s1">&#39;./index.js&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">filename</span><span class="o">:</span> <span class="s1">&#39;main.js&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">publicPath</span><span class="o">:</span> <span class="s1">&#39;dist&#39;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">},</span>  
</span></span><span class="line"><span class="cl">  <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">rules</span><span class="o">:</span> <span class="p">[</span>  
</span></span><span class="line"><span class="cl">      <span class="p">{</span>  
</span></span><span class="line"><span class="cl">        <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.js$/</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="nx">exclude</span><span class="o">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">        <span class="nx">use</span><span class="o">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">          <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;babel-loader&#39;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">          <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">            <span class="nx">presets</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;@babel/preset-env&#39;</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">          <span class="p">}</span>  
</span></span><span class="line"><span class="cl">        <span class="p">}</span>  
</span></span><span class="line"><span class="cl">      <span class="p">}</span>  
</span></span><span class="line"><span class="cl">    <span class="p">]</span>  
</span></span><span class="line"><span class="cl">  <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>这种语法可能会令人困惑（幸运的是，这不是我们经常编辑的东西）。基本上，我们告诉 webpack 查找任何 .js 文件（不包括 <code>node_modules</code> 文件夹中的文件），并使用 <code>babel-loader</code> 和 <code>@babel/preset-env</code> 预设应用 babel 转译。您可以在<a href="http://webpack.github.io/docs/configuration.html">此处</a>阅读有关 webpack 配置语法的更多信息。</p>
<p>现在一切都设置好了，我们可以开始用我们的 JavaScript 编写 ES2015 功能了！下面是 <code>index.js</code> 文件中的 <a href="https://babeljs.io/learn-es2015/#ecmascript-2015-features-template-strings">ES2015 模板字符串</a>示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// index.js  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;moment&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello from JavaScript!&#34;</span><span class="p">);</span>  
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">().</span><span class="nx">startOf</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Bob&#34;</span><span class="p">,</span> <span class="nx">time</span> <span class="o">=</span> <span class="s2">&#34;today&#34;</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Hello </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">, how are you </span><span class="si">${</span><span class="nx">time</span><span class="si">}</span><span class="sb">?`</span><span class="p">);</span>
</span></span></code></pre></div><p>我们还可以使用 <a href="https://babeljs.io/learn-es2015/#ecmascript-2015-features-modules">ES2015 import 语句 </a>代替 <code>require</code> 来加载模块，这就是您今天在很多代码库中看到的内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// index.js  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">moment</span> <span class="nx">from</span> <span class="s1">&#39;moment&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello from JavaScript!&#34;</span><span class="p">);</span>  
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">().</span><span class="nx">startOf</span><span class="p">(</span><span class="s1">&#39;day&#39;</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Bob&#34;</span><span class="p">,</span> <span class="nx">time</span> <span class="o">=</span> <span class="s2">&#34;today&#34;</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Hello </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">, how are you </span><span class="si">${</span><span class="nx">time</span><span class="si">}</span><span class="sb">?`</span><span class="p">);</span>
</span></span></code></pre></div><p>在此示例中， <code>import</code> 语法与 <code>require</code> 语法没有太大区别，但 <code>import</code> 对于更高级的情况具有额外的灵活性。由于我们更改了 <code>index.js</code> ，我们需要在命令行中再次运行 webpack：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./node_modules/.bin/webpack
</span></span></code></pre></div><p>现在您可以在浏览器中刷新 <code>index.html</code> 。在撰写本文时，大多数现代浏览器都支持所有 ES2015 功能，因此很难判断 babel 是否完成了它的工作。您可以在 IE9 等较旧的浏览器中对其进行测试，也可以在 <code>main.js</code> 中搜索以查找转译的代码行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// main.js  
</span></span></span><span class="line"><span class="cl"><span class="c1">// ...  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello &#39;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;, how are you &#39;</span> <span class="o">+</span> <span class="nx">time</span> <span class="o">+</span> <span class="s1">&#39;?&#39;</span><span class="p">);</span>  
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span></code></pre></div><p>在这里你可以看到 babel 将 ES2015 模板字符串转换为常规的 JavaScript 字符串连接，以保持浏览器兼容性。虽然这个特殊的例子可能不太令人兴奋，但转译代码的能力是非常强大的。JavaScript 中有一些令人兴奋的语言功能，如 <a href="async/await">async/await</a>，你可以立即开始使用它们来编写更好的代码。虽然音译有时可能看起来乏味和痛苦，但它在过去几年中导致了语言的巨大改进，因为人们今天正在测试明天的功能。</p>
<p>我们几乎完成了，但我们的工作流程中仍有一些未打磨的边缘。如果我们担心性能，我们应该<a href="https://en.wikipedia.org/wiki/Minification_%28programming%29">缩小</a>捆绑文件，这应该很容易，因为我们已经合并了一个构建步骤。每次更改 JavaScript 时，我们还需要重新运行 webpack 命令，这会很快变旧。因此，接下来我们要看的是解决这些问题的一些便捷工具。</p>
<h3 id="使用任务运行程序npm-脚本">使用任务运行程序（npm 脚本）</h3>
<p>现在我们已经投资使用构建步骤来处理 JavaScript 模块，使用任务运行器是有意义的，这是一个自动执行构建过程不同部分的工具。对于前端开发，任务包括缩小代码、优化图像、运行测试等。</p>
<p>2013年，Grunt 是最受欢迎的前端任务运行者，Gulp 紧随其后。两者都依赖于包装其他命令行工具的插件。如今，最流行的选择似乎是使用 npm 包管理器本身内置的脚本功能，它不使用插件，而是直接与其他命令行工具一起使用。</p>
<p>让我们编写一些 npm 脚本，以便更轻松地使用 webpack。这涉及简单地更改 <code>package.json</code> 文件，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;modern-javascript-example&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;main&#34;</span><span class="p">:</span> <span class="s2">&#34;index.js&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;build&#34;</span><span class="p">:</span> <span class="s2">&#34;webpack --progress --mode=production&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;watch&#34;</span><span class="p">:</span> <span class="s2">&#34;webpack --progress --watch&#34;</span> 
</span></span><span class="line"><span class="cl">  <span class="p">},</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;ISC&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;moment&#34;</span><span class="p">:</span> <span class="s2">&#34;^2.22.2&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">},</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@babel/core&#34;</span><span class="p">:</span> <span class="s2">&#34;^7.0.0&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@babel/preset-env&#34;</span><span class="p">:</span> <span class="s2">&#34;^7.0.0&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;babel-loader&#34;</span><span class="p">:</span> <span class="s2">&#34;^8.0.2&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack&#34;</span><span class="p">:</span> <span class="s2">&#34;^4.17.1&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack-cli&#34;</span><span class="p">:</span> <span class="s2">&#34;^3.1.0&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在这里，我们添加了两个新脚本， <code>build</code> 和 <code>watch</code> 。要运行构建脚本，您可以在命令行中输入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm run build
</span></span></code></pre></div><p>这将运行 webpack（使用我们之前所做的 <code>webpack.config.js</code> 中的配置），其中 <code>--progress</code> 选项显示进度百分比， <code>--mode=production</code> 选项最小化生产代码。要运行 <code>watch</code> 脚本，请执行以下操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm run watch
</span></span></code></pre></div><p>它使用 <code>--watch</code> 选项代替，以便在每次任何 JavaScript 文件更改时自动重新运行 webpack，这对于开发非常有用。</p>
<p>请注意， <code>package.json</code> 中的脚本可以在不必指定完整路径 <code>./node_modules/.bin/webpack</code> 的情况下运行 webpack，因为 node.js 知道每个 npm 模块路径的位置。这很甜！我们可以通过安装 webpack-dev-server 来让事情变得更加甜蜜，这是一个单独的工具，它提供了一个简单的 Web 服务器和实时重新加载。要将其安装为开发依赖项，请输入以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install webpack-dev-server --save-dev
</span></span></code></pre></div><p>然后将一个 npm 脚本添加到 <code>package.json</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;modern-javascript-example&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;main&#34;</span><span class="p">:</span> <span class="s2">&#34;index.js&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;build&#34;</span><span class="p">:</span> <span class="s2">&#34;webpack --progress -p&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;watch&#34;</span><span class="p">:</span> <span class="s2">&#34;webpack --progress --watch&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;serve&#34;</span><span class="p">:</span> <span class="s2">&#34;webpack-dev-server --open&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">},</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;ISC&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;moment&#34;</span><span class="p">:</span> <span class="s2">&#34;^2.19.1&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">},</span>  
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@babel/core&#34;</span><span class="p">:</span> <span class="s2">&#34;^7.0.0&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@babel/preset-env&#34;</span><span class="p">:</span> <span class="s2">&#34;^7.0.0&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;babel-loader&#34;</span><span class="p">:</span> <span class="s2">&#34;^8.0.2&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack&#34;</span><span class="p">:</span> <span class="s2">&#34;^3.7.1&#34;</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack-dev-server&#34;</span><span class="p">:</span> <span class="s2">&#34;^3.1.6&#34;</span>  
</span></span><span class="line"><span class="cl">  <span class="p">}</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>现在，您可以通过运行以下命令来启动开发服务器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm run serve
</span></span></code></pre></div><p>这将在您的浏览器中自动打开地址为 <code>localhost:8080</code> 的 <code>index.html</code> 网站（默认情况下）。每当你在 <code>index.js</code> 中更改 JavaScript 时，webpack-dev-server 都会重建它自己的捆绑 JavaScript 并自动刷新浏览器。这是一个非常有用的时间节省，因为它允许您将注意力集中在代码上，而不必在代码和浏览器之间不断切换上下文以查看新的更改。</p>
<p>这只是表面，webpack 和 webpack-dev-server 还有更多选项（你可以在<a href="https://webpack.js.org/guides/development/">这里</a>阅读）。当然，你也可以制作 npm 脚本来运行其他任务，例如将 Sass 转换为 CSS、压缩图像、运行测试 — 任何具有命令行工具的东西都是公平的游戏。npm 脚本本身也有一些很棒的高级选项和技巧——<a href="https://twitter.com/k88hudson">Kate Hudson</a> 的这个演讲是一个很好的起点：</p>
<p><a href="https://youtu.be/0RYETb9YVrk">https://youtu.be/0RYETb9YVrk</a></p>
<h3 id="结论">结论</h3>
<p>简而言之，这就是现代JavaScript。我们从纯HTML和JS转向使用包管理器自动下载第三方包，使用模块捆绑器创建单个脚本文件，使用转译器使用未来的JavaScript功能，以及任务运行器来自动化构建过程的不同部分。这里肯定有很多移动的部分，特别是对于初学者。对于刚接触编程的人来说，Web 开发曾经是一个很好的切入点，正是因为它很容易启动和运行;如今，这可能非常令人生畏，特别是因为各种工具往往会迅速变化。</p>
<p>不过，它并不像看起来那么糟糕。事情正在安定下来，特别是随着节点生态系统作为与前端合作的可行方式的采用。使用 npm 作为包管理器，将节点 <code>require</code> 或 <code>import</code> 语句用于模块，使用 npm 脚本来运行任务，这很好且一致。与一两年前相比，这是一个大大简化的工作流程！</p>
<p>对于初学者和有经验的开发人员来说，更好的是，如今的框架通常带有使该过程更容易上手的工具。Ember 有 <a href="https://ember-cli.com/">ember-cli</a> ，这对 Angular 的 <a href="https://cli.angular.io/">angular-cli</a> 、React 的 <a href="https://github.com/facebookincubator/create-react-app"><code>create-react-app</code></a>、Vue 的 <a href="https://github.com/vuejs/vue-cli">vue-cli</a> 等产生了巨大的影响。所有这些工具都将设置一个包含您需要的所有项目——您需要做的就是开始编写代码。然而，这些工具并不神奇，它们只是以一种一致和工作的方式设置了所有内容——你可能经常需要对 webpack、babel 等进行一些额外的配置。因此，了解我们在本文中介绍的每个部分的作用仍然非常关键。</p>
<p>现代 JavaScript 在使用时肯定会令人沮丧，因为它继续快速变化和发展。但是，尽管有时看起来像是重新发明轮子，但JavaScript的快速发展有助于推动诸如热重载，实时linting和时间旅行调试等创新。作为一名开发人员，这是一个激动人心的时刻，我希望这些信息可以作为路线图，在您的旅程中为您提供帮助！</p>
<p><img loading="lazy" src="https://peterxjang.com/img/1__H6NN__RxZNeVyLYpCirsslg.png" alt="Dinosaur comic panel 5"  />
</p>
<p>特别感谢<a href="https://twitter.com/ryanqnorth">@ryanqnorth</a>的<a href="http://www.qwantz.com/">恐龙漫画</a>，自2003年以来（恐龙统治网络）以来，它提供了一些最好的荒诞幽默。</p>
<p>原文链接：<a href="https://peterxjang.com/blog/modern-javascript-explained-for-dinosaurs.html">https://peterxjang.com/blog/modern-javascript-explained-for-dinosaurs.html</a></p>
<blockquote>
<p>译者备注：</p>
<p>Github 上有一个关于这篇文章源代码的仓库：<a href="https://github.com/scherler/Modern-JavaScript-Explained-For-Dinosaurs">https://github.com/scherler/Modern-JavaScript-Explained-For-Dinosaurs</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记15：尽量减少类和成员的可访问性</title>
      <link>https://blog.chensoul.com/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/</link>
      <pubDate>Thu, 15 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/</guid>
      <description>本文是 《Effective Java 3》第四章《类和接口》的学习笔记：尽量减少类和成员的可访问性。 类和接口是 Java 编程语言的核心。它们是抽象的基本单位。</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第四章《类和接口》的学习笔记：尽量减少类和成员的可访问性。</p>
<p>类和接口是 Java 编程语言的核心。它们是抽象的基本单位。该语言提供了许多强大的元素，你可以使用它们来设计类和接口。</p>
<h2 id="介绍">介绍</h2>
<p>《Effective Java, Third Edition》这本书中的第四章主要讲述了如何尽量减少类和成员的可访问性，以提高代码的封装性、安全性和可维护性。</p>
<p>尽量减少类和成员的可访问性是面向对象编程中的一个基本原则，也被称为 &ldquo;最小化可访问性原则&rdquo;。这个原则的核心思想是，将类和成员的访问级别限制在最小范围内，从而提高代码的安全性、可维护性和可复用性。</p>
<p>在 Java 中，类和成员的访问级别有四种：public、protected、default 和 private。其中，public 级别是最高的，可以被任何类访问；private 级别是最低的，只能被同一个类内部的成员访问。在应用最小化可访问性原则时，应该尽可能地将类和成员的访问级别设置为最低的级别，即 private 或 default 级别。</p>
<p>尽量减少类和成员的可访问性是一种良好的编程实践，可以提高代码的安全性和可维护性。以下是一些建议：</p>
<ol>
<li>
<p>将类和成员的可见性设置为最小化的级别，即只有必要的代码可以访问它们。这将减少不必要的依赖关系，并使代码更加模块化和可重用。</p>
</li>
<li>
<p>使用访问修饰符以限制类和成员的可见性。例如，如果一个成员只能在类内部使用，可以考虑将其转换为私有静态嵌套类。如果一个成员需要在类的子类中使用，可以使用 protected 修饰符。</p>
<blockquote>
<p>下面是一个示例，演示如何将包级私有顶级类转换为私有静态嵌套类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 包级私有顶级类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">MyTopLevelClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MyPrivateNestedClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用 MyTopLevelClass 的代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 使用 MyPrivateNestedClass 的代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，MyTopLevelClass 被转换为了 MyPrivateNestedClass，它被声明为 MyClass 的私有静态嵌套类。这样，MyTopLevelClass 就只能被 MyPrivateNestedClass 使用，而 MyPrivateNestedClass 只能被 MyClass 使用，达到了安全和清晰的目标。</p>
</blockquote>
</li>
<li>
<p>避免使用公共成员或公共方法。公共成员和方法可以被任何代码访问，这可能会导致安全问题和不必要的代码耦合。相反，应该使用封装的方式来隐藏类的实现细节，并在需要时提供公共接口。</p>
</li>
<li>
<p>在需要使用公共接口时，使用接口或抽象类来定义公共契约。这样可以使代码更加灵活，并使实现细节能够独立于公共契约进行修改。</p>
</li>
<li>
<p>使用 final 关键字来限制类和成员的可变性。这可以提高代码的安全性和可维护性，并避免在不必要的情况下修改代码。</p>
</li>
</ol>
<h2 id="扩展">扩展</h2>
<p>设计公共接口需要考虑接口的简洁性、易用性和一致性，同时避免暴露过多的底层实现细节。下面是一个简单的示例，展示了如何设计一个公共接口。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * This interface provides a simple way to perform arithmetic operations.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @author chensoul
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @since 1.0.0
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Arithmetic</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * Adds two integers and returns the result.
</span></span></span><span class="line"><span class="cl"><span class="cm">     *
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param a the first integer
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param b the second integer
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return the sum of a and b
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * Subtracts two integers and returns the result.
</span></span></span><span class="line"><span class="cl"><span class="cm">     *
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param a the first integer
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param b the second integer
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return the difference of a and b
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="nf">subtract</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * Multiplies two integers and returns the result.
</span></span></span><span class="line"><span class="cl"><span class="cm">     *
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param a the first integer
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param b the second integer
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return the product of a and b
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="nf">multiply</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * Divides two integers and returns the result.
</span></span></span><span class="line"><span class="cl"><span class="cm">     *
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param a the numerator
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param b the denominator
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return the quotient of a and b
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws ArithmeticException if b is zero
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="nf">divide</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ArithmeticException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，我们设计了一个名为 Arithmetic 的接口，它提供了四个基本的算术操作：加法、减法、乘法和除法。每个方法都有清晰的文档注释，描述了方法的用途、参数和返回值。此外，除法方法还声明了一个异常，以防止除以零的情况。</p>
<p>以下是一些关于如何设计公共 API 的最佳实践：</p>
<ol>
<li>最小化公共 API：尽可能地减少公共 API 的规模和复杂度，只暴露必要的接口和行为。这样可以保持 API 的简单性和稳定性，避免意外的依赖和耦合。</li>
<li>保护不可变性：对于公共静态 final 字段引用的对象，应该确保它们是不可变的，以避免意外修改公共状态。</li>
<li>使用接口和抽象类：使用接口和抽象类来定义公共 API，从而使得实现类可以灵活地选择自己的实现方式。同时，接口和抽象类可以隐藏实现细节，保持 API 的简单性和稳定性。</li>
<li>使用枚举类型：枚举类型可以在定义一组常量时提供类型安全性，并且可以避免意外的实例化和修改。</li>
<li>文档化 API：提供详细的文档和示例代码，以便开发人员能够正确地使用公共 API。</li>
</ol>
<p>当设计一个公共 API 时，文档化是非常重要的。以下是一些关于如何文档化 API 的最佳实践：</p>
<ol>
<li>提供 API 文档：为 API 提供详细的文档，包括 API 的使用方法、接口、参数、返回值、异常和示例代码等。API 文档应该清晰、简单、易于理解，并且应该提供足够的上下文和解释。</li>
<li>为 API 提供示例代码：为 API 提供详细的示例代码，以便开发人员能够快速地理解和使用 API。示例代码应该清晰、简单、易于理解，并且应该提供足够的注释和解释。</li>
<li>使用标准注释：使用标准注释格式，例如 Javadoc 或者 Doxygen，以便生成 API 文档。标准注释格式可以提高文档的一致性和可读性，并且可以使用自动化工具来生成 API 文档。</li>
<li>为 API 提供版本号：为 API 提供版本号，以便开发人员可以跟踪 API 的演变和变化。版本号应该清晰、简单、易于理解，并且应该遵循一定的命名规则。</li>
<li>提供 API 更新日志：为 API 提供更新日志，以便开发人员可以了解 API 的变化和演变。更新日志应该清晰、简单、易于理解，并且应该提供足够的上下文和解释。</li>
<li>避免使用过时的 API：避免使用过时的 API，以避免出现不必要的问题和错误。如果必须使用过时的 API，应该提供警告和替代方案，以便开发人员能够了解风险和替代方案。</li>
</ol>
<p>以下是一个使用 Javadoc 注释格式为 Java 类和方法文档化的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The BasicArithmetic class provides a basic implementation of the Arithmetic interface.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * This implementation is not recommended for use in production code, and will be removed in a future release.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @deprecated This class is for demonstration purposes only.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *             Use {@link AdvancedArithmetic} for more advanced arithmetic operations.
</span></span></span><span class="line"><span class="cl"><span class="cm"> *             For basic arithmetic operations, use the {@link java.lang.Math} class instead.
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @see Arithmetic
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @see AdvancedArithmetic
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @see java.lang.Math
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @since 1.0.0
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Deprecated</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BasicArithmetic</span> <span class="kd">implements</span> <span class="n">Arithmetic</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * {@inheritDoc}
</span></span></span><span class="line"><span class="cl"><span class="cm">     *
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param a the first integer to be added
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param b the second integer to be added
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return the sum of a and b
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * {@inheritDoc}
</span></span></span><span class="line"><span class="cl"><span class="cm">     *
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param a the integer to be subtracted from
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param b the integer to subtract
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return the difference of a and b
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">subtract</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * {@inheritDoc}
</span></span></span><span class="line"><span class="cl"><span class="cm">     *
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param a the first integer to be multiplied
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param b the second integer to be multiplied
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return the product of a and b
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">multiply</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * {@inheritDoc}
</span></span></span><span class="line"><span class="cl"><span class="cm">     *
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param a the numerator to be divided
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @param b the denominator to divide by
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @return the quotient of a and b
</span></span></span><span class="line"><span class="cl"><span class="cm">     * @throws ArithmeticException if b is zero
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">divide</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ArithmeticException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">ArithmeticException</span><span class="o">(</span><span class="s">&#34;Cannot divide by zero.&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>在上面的示例中，我们添加了@autho、@since、@see、@link 、@deprecated 和 @inheritDoc 标记。</p>
<ul>
<li>
<p>@author 标记指定了类的作者，可以是单个人或组织。</p>
</li>
<li>
<p>@since 标记指定了类最初被引入的版本。</p>
</li>
<li>
<p>@see 标记提供了一个链接到其他相关的类或接口。</p>
</li>
<li>
<p>@link 标记提供了一个链接到其他相关的类、方法、字段或包。</p>
</li>
<li>
<p>@deprecated 标记指示该类或方法已过时，不推荐使用，并会在将来的版本中被删除。</p>
</li>
<li>
<p>@inheritDoc 继承父类的 Javadoc 注释。但是需要注意的是，@inheritDoc 标记不能继承任何其他的注释信息，如参数、返回值或异常。如果子类方法有自己的参数、返回值或异常，则需要在子类方法中添加对应的 Javadoc 注释。</p>
</li>
</ul>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-23｜读书、健身、定投、帮朋友、陪家人</title>
      <link>https://blog.chensoul.com/posts/2023/06/14/weekly_review_23/</link>
      <pubDate>Wed, 14 Jun 2023 15:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/14/weekly_review_23/</guid>
      <description>前言 本篇是对 2023-06-05 到 2023-06-11 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 读书、健身、投资、帮朋友、陪家人。 以后周报的主题</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-06-05</code> 到 <code>2023-06-11</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<blockquote>
<p>读书、健身、投资、帮朋友、陪家人。</p>
</blockquote>
<p>以后周报的主题，会包括这几个部分：读书、健身、投资、帮朋友、陪家人，再加上工作和本周分享两块内容。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-23-03.png" alt="weekly-review-23-03" style="width:50%;" />
<h2 id="读书">读书</h2>
<p>本周阅读统计，总计阅读31分钟：</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-23-01.jpeg" alt="weekly-review-23-01" style="width:50%;" />
<p>本周阅读摘抄：</p>
<ul>
<li>人是周围6个人的平均值，如果你身边没有特别出色的年轻人与你为伍，你就找先贤们的书籍，他们把一生的所有思考、智慧、经历和情感，都倾注在那些书里头了。 如果有一天跟你共鸣的，全都是古往今来、古今中外那些最智慧、最深刻、最敏锐、最丰富、最博学的大脑，你大概率不会太差，你的精神世界也大概率会非常丰富。 “we are all in the gutter ，but some of us are looking at stars。” 这句话来自一个爱尔兰的诗人，叫做奥斯卡·王尔德：“我们都身处在阴沟里，但总有人仰望星空。”</li>
<li>“ Three passions, simple but overwhelmingly strong, have governed my life: the longing for love, the search for knowledge, and unbearable pity for the suffering of mankind. ”  这是来自于罗素的一个演讲，叫做《我为什么而活着》，意思是：对知识的渴望，对爱情的追求，对人类苦难难以遏制的同情心，这三种简单而强烈的激情，苦苦支配我的一生</li>
</ul>
<h2 id="健身">健身</h2>
<blockquote>
<p>我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2个省份 2个城市。更多跑步数据在我的 <a href="https://run.chensoul.com/">跑步</a> 主页。</p>
</blockquote>
<p>这周因为父亲住院需要照顾他，所以跑步暂停。</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 5006 元，明细如下：</p>
<ul>
<li>
<p>6月11日：4057元，父亲出院支付3475元</p>
</li>
<li>
<p>6月10日：108元</p>
</li>
<li>
<p>6月9日：86元</p>
</li>
<li>
<p>6月8日：367元</p>
</li>
<li>
<p>6月7日：179元</p>
</li>
<li>
<p>6月6日：117元</p>
</li>
<li>
<p>6月5日：92元</p>
</li>
</ul>
<h2 id="陪家人">陪家人</h2>
<p>本周的工作和生活都因为老爸住院而打乱了原来的节奏。起因是老爸因为痛风关节疼痛而服用了双氯芬酸钠缓释片导致胃溃疡和出血，另外最近两个月大便呈黑色、血液流失过多，导致严重贫血。周六先是去武汉中心医院做胃镜检查，医生看到老爸的脸色苍白，建议做个血液检测。检查结果出来之后，心有余悸，如果再晚点带老爸来医院做检查，不知道老爸会因贫血而出现怎样的事情。根据检查结果，医生建议立即住院。在经过考虑之后，决定回阳逻住院。住院期间，需要亲属陪护，于是周一到周三请了三天假，周四和周五换老婆过来照顾。</p>
<p>住院期间，老爸心里烦，因为痛风发作，腿脚走路没力气，大小便不方便。作为儿子的我也在反思，老爸成这样，都怪我平时没有关心他的健康和生活。老爸今天让我吃的苦都是因为过去在老爸身上的付出不够。</p>
<h2 id="工作">工作</h2>
<p>最近在学习的内容清单：</p>
<ul>
<li><a href="https://github.com/clxering/Effective-Java-3rd-edition-Chinese-English-bilingual/tree/dev">Effective Java（第 3 版）</a></li>
<li><a href="https://java-design-patterns.com/zh/">Java Design Patterns (中文)</a></li>
<li><a href="https://realpython.com/">Real Python</a></li>
</ul>
<p>本周完成三篇博客：</p>
<ul>
<li><a href="/posts/2023/06/10/java-design-patterns-adapter/">Java设计模式：Adapter</a></li>
<li><a href="/posts/2023/06/10/python-data-type/">Python学习2：数据类型</a></li>
<li><a href="/posts/2023/06/11/python-operator-and-expression/">Python学习3：运算符和表达式</a></li>
</ul>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-23-02.png" alt="weekly-review-23-02"  />
</p>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">Memos</a> 中。我写了一个 Python 脚本从 Memos 读取最近一周带有 <code>#memos</code> 标签的记录，分享到这里。</p>
<ul>
<li>
<p>📌<code>2023-06-10</code> 如何用 ChatGPT 助力开发: 已经有 15 万人看过的经验分享<code>#memos</code> <a href="http://luolei.org/chatgpt-in-development/">http://luolei.org/chatgpt-in-development/</a></p>
</li>
<li>
<p>📌<code>2023-06-09</code> Rust语言实战，视频和教程  <a href="https://www.youtube.com/watch?v=BpPEoZW5IiY">https://www.youtube.com/watch?v=BpPEoZW5IiY</a> <a href="https://zh.practice.rs/why-exercise.html">https://zh.practice.rs/why-exercise.html</a>  <code>#memos</code> <code>#rust</code></p>
</li>
<li>
<p>📌<code>2023-06-09</code> 基于 Spring Cloud 使用一致性哈希算法实现分布式 WebSocket. / 基于 RabbitMQ 广播实现分布式 WebSocket. <a href="https://lawrenceli.me/blog/websocket-cluster">https://lawrenceli.me/blog/websocket-cluster</a>    <code>#memos</code> <code>#java</code> <code>#skill</code></p>
</li>
<li>
<p>📌<code>2023-06-09</code> REST 和 gRPC 是 API 的两种最流行的实现方法，本文详细比较它们的差异。 <a href="https://kreya.app/blog/rest-vs-grpc/">https://kreya.app/blog/rest-vs-grpc/</a> <code>#memos</code></p>
</li>
<li>
<p>📌<code>2023-06-08</code> 痛苦是对的，焦虑也是对的，痛苦的本质来源于你对现状的不满，然后焦虑的本质来源于你成长速度太慢。<code>#memos</code></p>
</li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python学习4：流程控制</title>
      <link>https://blog.chensoul.com/posts/2023/06/14/python-flow-control/</link>
      <pubDate>Wed, 14 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/14/python-flow-control/</guid>
      <description>在 Python 中，流程控制语句包括条件语句（if-elif-else）、循环语句（for 和 while）、跳转语句（break、continue 和 ret</description>
      <content:encoded><![CDATA[<p>在 Python 中，流程控制语句包括条件语句（if-elif-else）、循环语句（for 和 while）、跳转语句（break、continue 和 return）和异常处理语句。</p>
<h2 id="条件语句">条件语句</h2>
<p>条件语句用于在不同的条件下执行不同的代码块。Python 中的条件语句是 if-elif-else 结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 条件语句示例</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;x is negative&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">elif</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;x is zero&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;x is positive&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="循环语句">循环语句</h2>
<p>循环语句用于重复执行一段代码，直到满足某个条件或达到某个条件次数为止。Python 中的循环语句包括 for 和 while 两种结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># for 循环示例</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># while 循环示例</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span></code></pre></div><p>遍历集合时修改集合的内容，会很容易生成错误的结果。因此不能直接进行循环，而是应遍历该集合的副本或创建新的集合：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Create a sample collection</span>
</span></span><span class="line"><span class="cl"><span class="n">users</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;Hans&#39;</span><span class="p">:</span> <span class="s1">&#39;active&#39;</span><span class="p">,</span> <span class="s1">&#39;Éléonore&#39;</span><span class="p">:</span> <span class="s1">&#39;inactive&#39;</span><span class="p">,</span> <span class="s1">&#39;景太郎&#39;</span><span class="p">:</span> <span class="s1">&#39;active&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Strategy:  Iterate over a copy</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">user</span><span class="p">,</span> <span class="n">status</span> <span class="ow">in</span> <span class="n">users</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="s1">&#39;inactive&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">del</span> <span class="n">users</span><span class="p">[</span><span class="n">user</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Strategy:  Create a new collection</span>
</span></span><span class="line"><span class="cl"><span class="n">active_users</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">user</span><span class="p">,</span> <span class="n">status</span> <span class="ow">in</span> <span class="n">users</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="s1">&#39;active&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">active_users</span><span class="p">[</span><span class="n">user</span><span class="p">]</span> <span class="o">=</span> <span class="n">status</span>
</span></span></code></pre></div><h2 id="跳转语句">跳转语句</h2>
<p>跳转语句用于在循环或函数中跳过一些代码或终止循环。Python 中的跳转语句包括 break、continue 和 return。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># break 示例</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># continue 示例</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">item</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="c1"># return 示例</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">my_function</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span>
</span></span></code></pre></div><p>在这个示例中，我们使用 break 关键字来终止一个 for 循环，使用 continue 关键字来跳过一个循环迭代，使用 return 关键字来从函数中返回一个值。</p>
<h2 id="pass-语句"><code>pass</code> 语句</h2>
<p><a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#pass"><code>pass</code></a> 语句不执行任何操作。语法上需要一个语句，但程序不实际执行任何动作时，可以使用该语句。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pass 语句</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>  <span class="c1"># Busy-wait for keyboard interrupt (Ctrl+C)</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">function</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># to be implemented</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyEmptyClass</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></div><h2 id="match-语句"><code>match</code> 语句</h2>
<p>match 语句接受一个表达式，并将其值与一个或多个case块中给定的模式进行比较。这在表面上类似于C、Java或JavaScript（以及许多其他语言）中的switch语句，但它更类似于Rust或Haskell等语言中的模式匹配。只有第一个匹配的模式会被执行，并且它还可以从值中提取组件（序列元素或对象属性）到变量中。</p>
<p>最简单的形式是将一个目标值与一个或多个字面值进行比较：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">http_error</span><span class="p">(</span><span class="n">status</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">match</span> <span class="n">status</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="mi">400</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s2">&#34;Bad request&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="mi">404</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s2">&#34;Not found&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="mi">418</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s2">&#34;I&#39;m a teapot&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="n">_</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s2">&#34;Something&#39;s wrong with the internet&#34;</span>
</span></span></code></pre></div><p>注意最后一个代码块：“变量名” <code>_</code> 被作为 <em>通配符</em> 并必定会匹配成功。 如果没有 case 语句匹配成功，则不会执行任何分支。</p>
<p>使用 <code>|</code> （“ or ”）在一个模式中可以组合多个字面值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">case</span> <span class="mi">401</span> <span class="o">|</span> <span class="mi">403</span> <span class="o">|</span> <span class="mi">404</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s2">&#34;Not allowed&#34;</span>
</span></span></code></pre></div><p>模式的形式类似解包赋值，并可被用于绑定变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># point is an (x, y) tuple</span>
</span></span><span class="line"><span class="cl"><span class="k">match</span> <span class="n">point</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Origin&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Y=</span><span class="si">{</span><span class="n">y</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;X=</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;X=</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s2">, Y=</span><span class="si">{</span><span class="n">y</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">_</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&#34;Not a point&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>请仔细研究此代码！ 第一个模式有两个字面值，可以看作是上面所示字面值模式的扩展。但接下来的两个模式结合了一个字面值和一个变量，而变量 <strong>绑定</strong> 了一个来自目标的值（<code>point</code>）。第四个模式捕获了两个值，这使得它在概念上类似于解包赋值 <code>(x, y) = point</code>。</p>
<p>如果使用类实现数据结构，可在类名后加一个类似于构造器的参数列表，这样做可以把属性放到变量里：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span><span class="p">:</span> <span class="nb">int</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span><span class="p">:</span> <span class="nb">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">where_is</span><span class="p">(</span><span class="n">point</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">match</span> <span class="n">point</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Origin&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Y=</span><span class="si">{</span><span class="n">y</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;X=</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="n">Point</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Somewhere else&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="n">_</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Not a point&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>可在 dataclass 等支持属性排序的内置类中使用位置参数。还可在类中设置 <code>__match_args__</code> 特殊属性为模式的属性定义指定位置。如果它被设为 (&ldquo;x&rdquo;, &ldquo;y&rdquo;)，则以下模式均为等价的，并且都把 <code>y</code> 属性绑定到 <code>var</code> 变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">var</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">var</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">var</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Point</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">var</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></div><p>读取模式的推荐方式是将它们看做是你会在赋值操作左侧放置的内容的扩展形式，以便理解各个变量将会被设置的值。 只有单独的名称（例如上面的 <code>var</code>）会被 match 语句所赋值。 带点号的名称 (例如 <code>foo.bar</code>)、属性名称（例如上面的 <code>x=</code> 和 <code>y=</code>）或类名称（通过其后的 &ldquo;(&hellip;)&rdquo; 来识别，例如上面的 <code>Point</code>）都绝不会被赋值。</p>
<p>模式可以任意地嵌套。例如，如果有一个由点组成的短列表，则可使用如下方式进行匹配：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">match</span> <span class="n">points</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="p">[]:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;No points&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="p">[</span><span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;The origin&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="p">[</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)]:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Single point </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="n">y</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="p">[</span><span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y1</span><span class="p">),</span> <span class="n">Point</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y2</span><span class="p">)]:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Two on the Y axis at </span><span class="si">{</span><span class="n">y1</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="n">y2</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">_</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Something else&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>为模式添加成为守护项的 <code>if</code> 子句。如果守护项的值为假，则 <code>match</code> 继续匹配下一个 case 语句块。注意，值的捕获发生在守护项被求值之前：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">match</span> <span class="n">point</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Y=X at </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Not on the diagonal&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>match 语句的其他特性：</p>
<ul>
<li>
<p>与解包赋值类似，元组和列表模式具有完全相同的含义，并且实际上能匹配任意序列。 但它们不能匹配迭代器或字符串。</p>
</li>
<li>
<p>序列模式支持扩展解包操作：<code>[x, y, *rest]</code> 和 <code>(x, y, *rest)</code> 的作用类似于解包赋值。 在 <code>*</code> 之后的名称也可以为 <code>_</code>，因此，<code>(x, y, *_)</code> 可以匹配包含至少两个条目的序列，而不必绑定其余的条目。</p>
</li>
<li>
<p>映射模式：<code>{&quot;bandwidth&quot;: b, &quot;latency&quot;: l}</code> 从字典中捕获 <code>&quot;bandwidth&quot;</code> 和 <code>&quot;latency&quot;</code> 的值。与序列模式不同，额外的键会被忽略。<code>**rest</code> 等解包操作也支持。但 <code>**_</code> 是冗余的，不允许使用。</p>
</li>
<li>
<p>使用 <code>as</code> 关键字可以捕获子模式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">case</span> <span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">),</span> <span class="n">Point</span><span class="p">(</span><span class="n">x2</span><span class="p">,</span> <span class="n">y2</span><span class="p">)</span> <span class="k">as</span> <span class="n">p2</span><span class="p">):</span> <span class="o">...</span>
</span></span></code></pre></div><p>将把输入的第二个元素捕获为 <code>p2</code> (只要输入是包含两个点的序列)</p>
</li>
<li>
<p>大多数字面值是按相等性比较的，但是单例对象 <code>True</code>, <code>False</code> 和 <code>None</code> 则是按标识号比较的。</p>
</li>
<li>
<p>模式可以使用命名常量。 这些命名常量必须为带点号的名称以防止它们被解读为捕获变量:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">enum</span> <span class="kn">import</span> <span class="n">Enum</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Color</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">RED</span> <span class="o">=</span> <span class="s1">&#39;red&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">GREEN</span> <span class="o">=</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">BLUE</span> <span class="o">=</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">color</span> <span class="o">=</span> <span class="n">Color</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s2">&#34;Enter your choice of &#39;red&#39;, &#39;blue&#39; or &#39;green&#39;: &#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">match</span> <span class="n">color</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">Color</span><span class="o">.</span><span class="n">RED</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;I see red!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">Color</span><span class="o">.</span><span class="n">GREEN</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Grass is green&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">Color</span><span class="o">.</span><span class="n">BLUE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;I&#39;m feeling the blues :(&#34;</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="异常处理语句">异常处理语句</h2>
<p>异常处理语句：用于处理程序执行过程中可能出现的异常情况，Python 中的异常处理语句包括 try、except、finally 和 raise 语句。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s2">&#34;Please enter a number: &#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">/</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Invalid input&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">ZeroDivisionError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Cannot divide by zero&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;No exception occurred&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Execution completed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># raise 语句</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&#34;x must be non-negative&#34;</span><span class="p">)</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Python学习3：运算符和表达式</title>
      <link>https://blog.chensoul.com/posts/2023/06/11/python-operator-and-expression/</link>
      <pubDate>Sun, 11 Jun 2023 15:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/11/python-operator-and-expression/</guid>
      <description>在Python中，运算符是用于执行各种操作的符号或关键字；表达式是由操作符、变量、常量和函数调用等组成的，它们可以被计算求值并返回一个结果。</description>
      <content:encoded><![CDATA[<p>在Python中，运算符是用于执行各种操作的符号或关键字；表达式是由操作符、变量、常量和函数调用等组成的，它们可以被计算求值并返回一个结果。</p>
<p>以下是一些常用的运算符和表达式：</p>
<h2 id="算术运算符">算术运算符</h2>
<p>Python中的算术运算符用于执行基本的算术运算，包括加、减、乘、除、取模和幂运算。以下是一些常用的算术运算符：</p>
<ul>
<li><code>+</code>：加法运算</li>
<li><code>-</code>：减法运算</li>
<li><code>*</code>：乘法运算</li>
<li><code>/</code>：除法运算</li>
<li><code>%</code>：取模运算，返回两个数相除的余数</li>
<li><code>**</code>：幂运算，返回一个数的指定次幂</li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">+</span> <span class="n">y</span>    <span class="c1"># 加法</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">-</span> <span class="n">y</span>    <span class="c1"># 减法</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">*</span> <span class="n">y</span>    <span class="c1"># 乘法</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">/</span> <span class="n">y</span>    <span class="c1"># 除法</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">%</span> <span class="n">y</span>    <span class="c1"># 取模</span>
</span></span></code></pre></div><p>在这个例子中，我们使用算术运算符执行基本的算术运算，例如将变量<code>x</code>和<code>y</code>相加、相减、相乘、相除和取模。</p>
<h2 id="比较运算符">比较运算符</h2>
<p>Python中的比较运算符用于比较两个值的大小关系，返回一个布尔值。以下是一些常用的比较运算符：</p>
<ul>
<li><code>==</code>：等于运算符，如果两个值相等，则返回<code>True</code>，否则返回<code>False</code></li>
<li><code>!=</code>：不等于运算符，如果两个值不相等，则返回<code>True</code>，否则返回<code>False</code></li>
<li><code>&gt;</code>：大于运算符，如果左边的值大于右边的值，则返回<code>True</code>，否则返回<code>False</code></li>
<li><code>&lt;</code>：小于运算符，如果左边的值小于右边的值，则返回<code>True</code>，否则返回<code>False</code></li>
<li><code>&gt;=</code>：大于等于运算符，如果左边的值大于等于右边的值，则返回<code>True</code>，否则返回<code>False</code></li>
<li><code>&lt;=</code>：小于等于运算符，如果左边的值小于等于右边的值，则返回<code>True</code>，否则返回<code>False</code></li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">==</span> <span class="n">y</span>    <span class="c1"># 等于</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">!=</span> <span class="n">y</span>    <span class="c1"># 不等于</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span>     <span class="c1"># 大于</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span>     <span class="c1"># 小于</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">&gt;=</span> <span class="n">y</span>    <span class="c1"># 大于等于</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">&lt;=</span> <span class="n">y</span>    <span class="c1"># 小于等于</span>
</span></span></code></pre></div><p>在这个例子中，我们使用比较运算符比较变量<code>x</code>和<code>y</code>的大小关系，例如判断<code>x</code>是否等于<code>y</code>、是否大于<code>y</code>等。</p>
<h2 id="逻辑运算符">逻辑运算符</h2>
<p>Python中的逻辑运算符用于执行逻辑操作，包括与、或和非运算。以下是一些常用的逻辑运算符：</p>
<ul>
<li><code>and</code>：逻辑与运算符，如果两个操作数都为<code>True</code>，则返回<code>True</code>，否则返回<code>False</code></li>
<li><code>or</code>：逻辑或运算符，如果两个操作数中至少有一个为<code>True</code>，则返回<code>True</code>，否则返回<code>False</code></li>
<li><code>not</code>：逻辑非运算符，如果操作数为<code>True</code>，则返回<code>False</code>，否则返回<code>True</code></li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="ow">and</span> <span class="n">y</span>    <span class="c1"># 与</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="ow">or</span> <span class="n">y</span>     <span class="c1"># 或</span>
</span></span><span class="line"><span class="cl"><span class="ow">not</span> <span class="n">x</span>      <span class="c1"># 非</span>
</span></span></code></pre></div><p>在这个例子中，我们使用逻辑运算符执行逻辑运算，例如判断变量<code>x</code>和<code>y</code>是否都为<code>True</code>、判断变量<code>x</code>和<code>y</code>是否至少一个为<code>True</code>等。</p>
<h2 id="赋值运算符">赋值运算符</h2>
<p>Python中的赋值运算符用于将一个值赋给一个变量。以下是一些常用的赋值运算符：</p>
<ul>
<li><code>=</code>：简单赋值运算符，将右边的值赋给左边的变量</li>
<li><code>+=</code>：加等于运算符，将右边的值加到左边的变量上，并将结果赋给左边的变量</li>
<li><code>-=</code>：减等于运算符，将右边的值从左边的变量上减去，并将结果赋给左边的变量</li>
<li><code>*=</code>：乘等于运算符，将左边的变量乘以右边的值，并将结果赋给左边的变量</li>
<li><code>/=</code>：除等于运算符，将左边的变量除以右边的值，并将结果赋给左边的变量</li>
<li><code>%=</code>：取模等于运算符，将左边的变量取模右边的值，并将结果赋给左边的变量</li>
<li><code>**=</code>：幂等于运算符，将左边的变量的值的指定次幂赋给左边的变量</li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>    <span class="c1"># 等于号</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">+=</span> <span class="mi">5</span>    <span class="c1"># 加等于</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">-=</span> <span class="mi">5</span>    <span class="c1"># 减等于</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">*=</span> <span class="mi">2</span>    <span class="c1"># 乘等于</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">/=</span> <span class="mi">3</span>    <span class="c1"># 除等于</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">%=</span> <span class="mi">2</span>    <span class="c1"># 取模等于</span>
</span></span></code></pre></div><p>在这个例子中，我们使用赋值运算符将一个值赋给变量<code>x</code>，以及使用加等于、减等于、乘等于、除等于和取模等于运算符对变量<code>x</code>进行更新。</p>
<h2 id="位运算符">位运算符</h2>
<p>Python中的位运算符用于对整数进行位运算，包括按位与、按位或、按位异或、按位取反和左右移位运算。以下是一些常用的位运算符：</p>
<ul>
<li><code>&amp;</code>：按位与运算符，对两个操作数的每个位执行逻辑与操作，返回一个新的整数</li>
<li><code>|</code>：按位或运算符，对两个操作数的每个位执行逻辑或操作，返回一个新的整数</li>
<li><code>^</code>：按位异或运算符，对两个操作数的每个位执行逻辑异或操作，返回一个新的整数</li>
<li><code>~</code>：按位取反运算符，对操作数的每个位执行逻辑取反操作，返回一个新的整数</li>
<li><code>&lt;&lt;</code>：左移位运算符，将一个整数的所有位向左移动指定的位数，返回一个新的整数</li>
<li><code>&gt;&gt;</code>：右移位运算符，将一个整数的所有位向右移动指定的位数，返回一个新的整数</li>
</ul>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">&amp;</span> <span class="n">y</span>    <span class="c1"># 按位与</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">|</span> <span class="n">y</span>    <span class="c1"># 按位或</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">^</span> <span class="n">y</span>    <span class="c1"># 按位异或</span>
</span></span><span class="line"><span class="cl"><span class="o">~</span><span class="n">x</span>       <span class="c1"># 按位取反</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span>   <span class="c1"># 左移2位</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span>   <span class="c1"># 右移2位</span>
</span></span></code></pre></div><p>在这个例子中，我们使用位运算符对二进制数进行位操作，例如将变量<code>x</code>和<code>y</code>进行按位与、按位或、按位异或，以及对变量<code>x</code>进行按位取反、左移和右移。</p>
<h2 id="三元运算符">三元运算符</h2>
<p>Python中的三元运算符可以用于在一行代码中实现简单的条件语句。它的语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">value_if_true</span> <span class="k">if</span> <span class="n">condition</span> <span class="k">else</span> <span class="n">value_if_false</span>
</span></span></code></pre></div><p>其中<code>condition</code>是一个布尔表达式，如果它的值为<code>True</code>，则返回<code>value_if_true</code>，否则返回<code>value_if_false</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">max_value</span> <span class="o">=</span> <span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span> <span class="k">else</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">max_value</span><span class="p">)</span>  <span class="c1"># 输出：10</span>
</span></span></code></pre></div><p>在这个例子中，我们使用三元运算符来比较<code>x</code>和<code>y</code>的值，并将较大的值赋给变量<code>max_value</code>。</p>
<h2 id="成员运算符">成员运算符</h2>
<p>Python中的成员运算符用于检查一个值是否是另一个值的成员，包括<code>in</code>和<code>not in</code>运算符。以下是一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="mi">3</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;3 is in my_list&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>在这个例子中，我们使用<code>in</code>运算符来检查<code>3</code>是否是<code>my_list</code>中的成员。如果是，则打印出<code>3 is in my_list</code>。</p>
<h2 id="身份运算符">身份运算符</h2>
<p>Python中的身份运算符用于比较两个对象的内存地址，包括<code>is</code>和<code>is not</code>运算符。以下是一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="n">y</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;x and y have the same identity&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;x and y have different identities&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>在这个例子中，我们使用<code>is</code>运算符来比较<code>x</code>和<code>y</code>的内存地址。由于<code>x</code>和<code>y</code>是两个不同的列表对象，所以它们的内存地址不同，程序会打印出<code>x and y have different identities</code>。</p>
<h2 id="切片运算符">切片运算符</h2>
<p>Python中的切片运算符用于从序列中获取一个子序列，包括从开始位置到结束位置的切片和步长切片。以下是一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>  <span class="c1"># 输出：[2, 3, 4]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">[::</span><span class="mi">2</span><span class="p">])</span>  <span class="c1"># 输出：[1, 3, 5]</span>
</span></span></code></pre></div><p>在这个例子中，我们使用切片运算符从列表<code>my_list</code>中获取一个子序列。第一个切片<code>my_list[1:4]</code>返回从下标<code>1</code>到下标<code>3</code>的元素，第二个切片<code>my_list[::2]</code>返回每隔一个元素的子序列。</p>
<h2 id="格式化运算符">格式化运算符</h2>
<p>Python中的格式化运算符用于将一个值插入到一个字符串中。它的语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="s2">&#34;format string&#34;</span> <span class="o">%</span> <span class="n">values</span>
</span></span></code></pre></div><p>其中<code>&quot;format string&quot;</code>是一个字符串，包含格式化代码，<code>values</code>是一个元组，包含要插入的值。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;Alice&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">age</span> <span class="o">=</span> <span class="mi">25</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;My name is </span><span class="si">%s</span><span class="s2">, and I am </span><span class="si">%d</span><span class="s2"> years old.&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">))</span>
</span></span></code></pre></div><p>在这个例子中，我们使用格式化运算符将变量<code>name</code>和<code>age</code>插入到字符串中，生成一条包含变量值的消息。</p>
<h2 id="拼接运算符">拼接运算符</h2>
<p>Python中的拼接运算符用于将两个字符串或序列连接起来，包括<code>+</code>运算符和<code>*</code>运算符。以下是一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str1</span> <span class="o">=</span> <span class="s2">&#34;Hello&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">str2</span> <span class="o">=</span> <span class="s2">&#34;world&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">str1</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span> <span class="o">+</span> <span class="n">str2</span><span class="p">)</span>  <span class="c1"># 输出：Hello world</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1"># 输出：[1, 2, 3, 1, 2, 3, 1, 2, 3]</span>
</span></span></code></pre></div><p>在这个例子中，我们使用拼接运算符将两个字符串连接起来，以及将一个列表复制多次生成一个新的列表。</p>
<h2 id="解包运算符">解包运算符</h2>
<p>Python中的解包运算符包括两种：<code>*</code>和<code>**</code>。</p>
<h3 id="解包运算符-1"><code>*</code>解包运算符</h3>
<p><code>*</code>解包运算符用于将可迭代对象（如列表、元组、集合等）解包成单独的元素。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="o">*</span><span class="n">my_list</span><span class="p">)</span>   <span class="c1"># 输出: 1 2 3 4 5</span>
</span></span></code></pre></div><p>在这个例子中，我们使用<code>*</code>解包运算符将<code>my_list</code>列表解包成一个个单独的元素，然后通过<code>print</code>函数输出。</p>
<h3 id="解包运算符-2"><code>**</code>解包运算符</h3>
<p><code>**</code>解包运算符用于将字典解包成关键字参数。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;x&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;y&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;z&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="o">**</span><span class="n">my_dict</span><span class="p">)</span>   <span class="c1"># 输出: x=1 y=2 z=3</span>
</span></span></code></pre></div><p>在这个例子中，我们使用<code>**</code>解包运算符将<code>my_dict</code>字典解包成关键字参数，并通过<code>print</code>函数输出。</p>
<p>除了上面的用法，<code>*</code>和<code>**</code>解包运算符还可以用于函数定义和调用中。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">my_func</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">my_func</span><span class="p">(</span><span class="o">*</span><span class="n">my_list</span><span class="p">)</span>   <span class="c1"># 输出: 1 2 3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;a&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;b&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;c&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">my_func</span><span class="p">(</span><span class="o">**</span><span class="n">my_dict</span><span class="p">)</span>   <span class="c1"># 输出: 1 2 3</span>
</span></span></code></pre></div><p>在这个例子中，我们定义了一个函数<code>my_func</code>，然后使用<code>*</code>和<code>**</code>解包运算符将列表和字典中的值作为函数的参数传递进去。</p>
<h2 id="运算符">@运算符</h2>
<p><code>@</code>运算符用于执行矩阵乘法。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">@</span> <span class="n">b</span>   <span class="c1"># 矩阵乘法</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>    <span class="c1"># 输出: [[19 22] [43 50]]</span>
</span></span></code></pre></div><p>在这个例子中，我们使用<code>@</code>运算符对两个矩阵进行乘法运算，并将结果保存在变量<code>c</code>中。</p>
<h2 id="lambda表达式">lambda表达式</h2>
<p>Python中的lambda表达式可以用于创建匿名函数。它的语法如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">lambda</span> <span class="n">arguments</span> <span class="p">:</span> <span class="n">expression</span>
</span></span></code></pre></div><p>其中<code>arguments</code>是函数的参数列表，<code>expression</code>是一个表达式，表示函数的返回值。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>  <span class="c1"># 输出：5</span>
</span></span></code></pre></div><p>在这个例子中，我们使用lambda表达式创建了一个函数<code>f</code>，它接受两个参数<code>x</code>和<code>y</code>，并返回它们的和。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python学习2：数据类型</title>
      <link>https://blog.chensoul.com/posts/2023/06/10/python-data-type/</link>
      <pubDate>Sat, 10 Jun 2023 15:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/10/python-data-type/</guid>
      <description>Python 中的数据类型包括： 数字类型：包括整型、浮点型、复数型和布尔类型：只有两个取值，True 和 False，用于表示逻辑值。 字符串类型：由一系列字</description>
      <content:encoded><![CDATA[<p>Python 中的数据类型包括：</p>
<ol>
<li>数字类型：包括整型、浮点型、复数型和布尔类型：只有两个取值，True 和 False，用于表示逻辑值。</li>
<li>字符串类型：由一系列字符组成，可以是单引号、双引号或三引号括起来的文本。</li>
<li>列表类型：由一系列有序的元素组成，可以包含任何类型的数据。</li>
<li>元组类型：与列表类似，但是<code>元素不能被修改</code>。</li>
<li>集合类型：由一组唯一的元素组成，支持集合的基本操作，如并集、交集和差集等。</li>
<li>字典类型：由一组键值对组成，其中键是唯一的，用于查找和存储值。</li>
<li>None 类型：表示空值或缺失值。</li>
</ol>
<h2 id="数字">数字</h2>
<p>在 Python 中，数字类型包括整数（int）、浮点数（float）、复数（complex）和布尔值（bool）。</p>
<ol>
<li>
<p>整数（int）是不带小数的数字，可以使用十进制、二进制、八进制或十六进制表示。<strong>在 Python 3 中，整数的长度不再受限于机器的位数，可以表示任意大的整数。</strong> 例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">123</span>       <span class="c1"># 十进制整数</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="mb">0b1010</span>    <span class="c1"># 二进制整数，等于十进制的 10</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="mo">0o12</span>      <span class="c1"># 八进制整数，等于十进制的 10</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="mh">0x0A</span>      <span class="c1"># 十六进制整数，等于十进制的 10</span>
</span></span></code></pre></div></li>
<li>
<p>浮点数（float）是带小数的数字，可以使用科学计数法表示。在 Python 中，浮点数采用 IEEE 754 标准表示，具有双精度（64 位）和单精度（32 位）两种形式。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mf">3.14e-2</span>   <span class="c1"># 科学计数法表示的浮点数，等于 0.0314</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="mf">1.23</span>      <span class="c1"># 普通的浮点数</span>
</span></span></code></pre></div></li>
<li>
<p>复数（complex）是具有实部和虚部的数字，可以使用 <code>a+bj</code> 或 <code>complex(a, b)</code> 的形式表示，其中 j 表示虚数单位。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">+</span><span class="mi">2</span><span class="n">j</span>      <span class="c1"># 复数</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="nb">complex</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>   <span class="c1"># 复数，等于 3+4j</span>
</span></span></code></pre></div></li>
<li>
<p>布尔值（bool）只有两个取值，<code>True</code> 和 <code>False</code>，用于表示真和假。在 Python 中，布尔值可以和数值进行运算，True 转换为 1，False 转换为 0。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="kc">True</span>   <span class="c1"># c 的值为 2</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">*</span> <span class="kc">False</span>  <span class="c1"># d 的值为 0</span>
</span></span></code></pre></div></li>
</ol>
<p>数字的操作和运算：</p>
<ol>
<li>整数除法、取模、幂运算</li>
</ol>
<p>在 Python 中，使用 <code>/</code> 运算符进行除法运算得到的结果是浮点数，如果想要得到整数结果，可以使用 <code>//</code> 运算符进行整数除法运算。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">7</span> <span class="o">/</span> <span class="mi">2</span>   <span class="c1"># a 的值为 3.5</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="mi">7</span> <span class="o">//</span> <span class="mi">2</span>  <span class="c1"># b 的值为 3</span>
</span></span></code></pre></div><p>同时，使用 <code>%</code> 运算符可以进行取模运算，即计算除法的余数。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="mi">7</span> <span class="o">%</span> <span class="mi">2</span>   <span class="c1"># c 的值为 1</span>
</span></span></code></pre></div><p><code>**</code>是一种运算符，称为“双星号运算符”或“幂运算符”。它可以用于计算一个数的幂。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">**</span> <span class="mi">3</span>  <span class="c1"># 计算2的3次方，结果为8</span>
</span></span></code></pre></div><ol start="2">
<li>数字类型的转换</li>
</ol>
<p>在 Python 中，可以使用<code> int()</code>、<code>float()</code> 和 <code>complex()</code> 函数将其他类型的数据转换为整数、浮点数和复数类型。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="s2">&#34;123&#34;</span><span class="p">)</span>  <span class="c1"># 将字符串 &#34;123&#34; 转换为整数类型</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s2">&#34;3.14&#34;</span><span class="p">)</span>  <span class="c1"># 将字符串 &#34;3.14&#34; 转换为浮点数类型</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="nb">complex</span><span class="p">(</span><span class="s2">&#34;1+2j&#34;</span><span class="p">)</span>  <span class="c1"># 将字符串 &#34;1+2j&#34; 转换为复数类型</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="c1"># 123 3.14 (1+2j)</span>
</span></span></code></pre></div><p>同时，可以使用 <code>str()</code>、<code>repr()</code> 和 <code>format()</code> 函数将数字转换为字符串类型。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>                     <span class="c1"># 将整数 123 转换为字符串类型</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="nb">repr</span><span class="p">(</span><span class="mf">3.1415926</span><span class="p">)</span>              <span class="c1"># 将浮点数 3.1415926 转换为字符串类型，使用 repr() 函数可以保留小数点后的精度</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">{:.2f}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mf">3.1415926</span><span class="p">)</span>   <span class="c1"># 将浮点数 3.1415926 转换为字符串类型，保留小数点后两位</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="c1"># 123 3.1415926 3.14</span>
</span></span></code></pre></div><ol start="3">
<li>随机数生成</li>
</ol>
<p>在 Python 中，可以使用 random 模块中的函数生成随机数。常用的函数包括：</p>
<ul>
<li><code>random.random()</code>：生成一个 0 到 1 之间的随机浮点数。</li>
<li><code>random.randint(a, b)</code>：生成一个在 a 和 b 之间（包括 a 和 b）的随机整数。</li>
<li><code>random.choice(seq)</code>：从序列 seq 中随机选择一个元素并返回。</li>
<li><code>random.shuffle(seq)</code>：将序列 seq 中的元素随机排序。</li>
</ul>
<p>例如，可以使用 random 模块中的 <code>randint()</code> 函数生成一个随机整数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">random</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>   <span class="c1"># 生成一个在 1 和 10 之间的随机整数</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="字符串">字符串</h2>
<p>在 Python 中，<strong>字符串是一种不可变序列类型</strong> ，用于表示文本数据。字符串是由一系列 Unicode 字符组成的，可以包含任何字符，包括字母、数字、标点符号、空格等。</p>
<p>定义字符串可以使用 <strong>单引号、双引号或三引号</strong>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str1</span> <span class="o">=</span> <span class="s1">&#39;Hello, world!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">str2</span> <span class="o">=</span> <span class="s2">&#34;Hello, Python!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">str3</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;This is a long string that
</span></span></span><span class="line"><span class="cl"><span class="s2">spans multiple lines.&#34;&#34;&#34;</span>
</span></span></code></pre></div><p>字符串支持一些常用的操作，例如：</p>
<ul>
<li>
<p>拼接字符串：使用加号（<code>+</code>）运算符</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str4</span> <span class="o">=</span> <span class="n">str1</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="n">str2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># str4 = &#39;Hello, world! Hello, Python!&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>访问字符串中的字符：使用 <code>下标（索引）</code>运算符或切片运算符</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">ch</span> <span class="o">=</span> <span class="n">str1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>   <span class="c1"># ch = &#39;H&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">substr</span> <span class="o">=</span> <span class="n">str2</span><span class="p">[</span><span class="mi">7</span><span class="p">:</span><span class="mi">13</span><span class="p">]</span>  <span class="c1"># substr = &#39;Python&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>获取字符串的长度：使用<code> len()</code> 函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">str3</span><span class="p">)</span>   <span class="c1"># length = 45</span>
</span></span></code></pre></div></li>
<li>
<p>查找子字符串：使用 <code>find()</code> 或 index() 函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pos1</span> <span class="o">=</span> <span class="n">str1</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">)</span>   <span class="c1"># pos1 = 7</span>
</span></span><span class="line"><span class="cl"><span class="n">pos2</span> <span class="o">=</span> <span class="n">str2</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="s1">&#39;Python&#39;</span><span class="p">)</span> <span class="c1"># pos2 = 7</span>
</span></span></code></pre></div></li>
<li>
<p>替换子字符串：使用 <code>replace()</code> 函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">new_str</span> <span class="o">=</span> <span class="n">str1</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">,</span> <span class="s1">&#39;Python&#39;</span><span class="p">)</span>   <span class="c1"># new_str = &#39;Hello, Python!&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>分割字符串：使用 <code>split()</code> 函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">words</span> <span class="o">=</span> <span class="n">str3</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>   <span class="c1"># words = [&#39;This&#39;, &#39;is&#39;, &#39;a&#39;, &#39;long&#39;, &#39;string&#39;, &#39;that&#39;, &#39;spans&#39;, &#39;multiple&#39;, &#39;lines.&#39;]</span>
</span></span></code></pre></div></li>
<li>
<p>连接字符串列表：使用 <code>join()</code> 函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">new_str</span> <span class="o">=</span> <span class="s1">&#39;-&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>   <span class="c1"># new_str = &#39;This-is-a-long-string-that-spans-multiple-lines.&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>判断字符串是否包含某个子字符串：使用 <code>in</code> 或 <code>not in</code> 运算符</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">flag1</span> <span class="o">=</span> <span class="s1">&#39;world&#39;</span> <span class="ow">in</span> <span class="n">str1</span>   <span class="c1"># flag1 = True</span>
</span></span><span class="line"><span class="cl"><span class="n">flag2</span> <span class="o">=</span> <span class="s1">&#39;Python&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">str2</span>   <span class="c1"># flag2 = False</span>
</span></span></code></pre></div></li>
<li>
<p>判断字符串是否以某个子字符串开头或结尾：使用 <code>startswith()</code> 和 <code>endswith()</code> 方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">flag3</span> <span class="o">=</span> <span class="n">str1</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">)</span>   <span class="c1"># flag3 = True</span>
</span></span><span class="line"><span class="cl"><span class="n">flag4</span> <span class="o">=</span> <span class="n">str2</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s1">&#39;!&#39;</span><span class="p">)</span>   <span class="c1"># flag4 = True</span>
</span></span></code></pre></div></li>
<li>
<p>大小写转换：使用 <code>upper()</code> 和 <code>lower()</code> 方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">upper_str</span> <span class="o">=</span> <span class="n">str1</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>   <span class="c1"># upper_str = &#39;HELLO, WORLD!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">lower_str</span> <span class="o">=</span> <span class="n">str2</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>   <span class="c1"># lower_str = &#39;hello, python!&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>去除字符串两端的空白字符：使用 <code>strip()</code>、<code>lstrip()</code> 和 <code>rstrip()</code> 方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str5</span> <span class="o">=</span> <span class="s1">&#39;  Hello, Python!  &#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str1</span> <span class="o">=</span> <span class="n">str5</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>   <span class="c1"># new_str1 = &#39;Hello, Python!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str2</span> <span class="o">=</span> <span class="n">str5</span><span class="o">.</span><span class="n">lstrip</span><span class="p">()</span>   <span class="c1"># new_str2 = &#39;Hello, Python!  &#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str3</span> <span class="o">=</span> <span class="n">str5</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>   <span class="c1"># new_str3 = &#39;  Hello, Python!&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>字符串转换为数字类型：使用 <code>int()</code>、<code>float()</code> 或 <code>complex()</code> 函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">num1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="s1">&#39;123&#39;</span><span class="p">)</span>   <span class="c1"># num1 = 123</span>
</span></span><span class="line"><span class="cl"><span class="n">num2</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s1">&#39;3.14&#39;</span><span class="p">)</span>   <span class="c1"># num2 = 3.14</span>
</span></span><span class="line"><span class="cl"><span class="n">num3</span> <span class="o">=</span> <span class="nb">complex</span><span class="p">(</span><span class="s1">&#39;1+2j&#39;</span><span class="p">)</span>   <span class="c1"># num3 = (1+2j)</span>
</span></span></code></pre></div></li>
<li>
<p>判断字符串是否全部由数字组成：使用 <code>isnumeric()</code> 方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str6</span> <span class="o">=</span> <span class="s1">&#39;123456&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">flag5</span> <span class="o">=</span> <span class="n">str6</span><span class="o">.</span><span class="n">isnumeric</span><span class="p">()</span>   <span class="c1"># flag5 = True</span>
</span></span></code></pre></div></li>
<li>
<p>判断字符串是否全部由字母组成：使用 <code>isalpha()</code> 方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str7</span> <span class="o">=</span> <span class="s1">&#39;HelloWorld&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">flag6</span> <span class="o">=</span> <span class="n">str7</span><span class="o">.</span><span class="n">isalpha</span><span class="p">()</span>   <span class="c1"># flag6 = True</span>
</span></span></code></pre></div></li>
<li>
<p>判断字符串是否全部由字母和数字组成：使用 <code>isalnum()</code> 方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str8</span> <span class="o">=</span> <span class="s1">&#39;Hello123&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">flag7</span> <span class="o">=</span> <span class="n">str8</span><span class="o">.</span><span class="n">isalnum</span><span class="p">()</span>   <span class="c1"># flag7 = True</span>
</span></span></code></pre></div></li>
<li>
<p>计算字符串中某个字符出现的次数：使用 <code>count()</code> 方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str9</span> <span class="o">=</span> <span class="s1">&#39;Hello, Python!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">count</span> <span class="o">=</span> <span class="n">str9</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">)</span>   <span class="c1"># count = 2</span>
</span></span></code></pre></div></li>
<li>
<p>将字符串按指定的宽度进行对齐：使用 <code>ljust()</code>、<code>rjust()</code> 和 <code>center()</code> 方</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str10</span> <span class="o">=</span> <span class="s1">&#39;Hello&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str4</span> <span class="o">=</span> <span class="n">str10</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>   <span class="c1"># new_str4 = &#39;Hello     &#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str5</span> <span class="o">=</span> <span class="n">str10</span><span class="o">.</span><span class="n">rjust</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>   <span class="c1"># new_str5 = &#39;     Hello&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str6</span> <span class="o">=</span> <span class="n">str10</span><span class="o">.</span><span class="n">center</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>   <span class="c1"># new_str6 = &#39;  Hello   &#39;</span>
</span></span></code></pre></div></li>
<li>
<p>将字符串中的某个子字符串替换为另一个字符串：使用 <code>translate()</code> 方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str11</span> <span class="o">=</span> <span class="s1">&#39;Hello, Python!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">table</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">maketrans</span><span class="p">(</span><span class="s1">&#39;lo&#39;</span><span class="p">,</span> <span class="s1">&#39;12&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str7</span> <span class="o">=</span> <span class="n">str11</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>   <span class="c1"># new_str7 = &#39;He22, Pyth2n!&#39;</span>
</span></span></code></pre></div><blockquote>
<p>这段代码使用了字符串的 translate() 方法，用于将字符串中的某个子字符串替换为另一个字符串。具体来说，它的作用是将字符串 str11 中的所有字符 &rsquo;l&rsquo; 替换为 &lsquo;1&rsquo;，将所有字符 &lsquo;o&rsquo; 替换为 &lsquo;2&rsquo;，生成一个新的字符串 new_str7。</p>
<p>这里用到了 str.maketrans() 方法，它用于生成一个转换表，将字符串中的某些字符转换为其他字符。这个方法接受两个参数，两个参数都是字符串，第一个参数是需要被替换的字符，第二个参数是替换为的字符。生成的转换表可以用于字符串的 translate() 方法。</p>
<p>具体来说，这里的代码使用 str.maketrans(&rsquo;lo&rsquo;, &lsquo;12&rsquo;) 生成了一个转换表，将字符 &rsquo;l&rsquo; 转换为 &lsquo;1&rsquo;，将字符 &lsquo;o&rsquo; 转换为 &lsquo;2&rsquo;。然后使用 translate() 方法将字符串 str11 中的字符按照转换表进行替换，生成了一个新的字符串 new_str7，它的值为 &lsquo;He22, Pyth2n!&rsquo;。</p>
<p>需要注意的是，<strong>这种字符串的替换方式只是按照字符进行替换，不是按照子字符串进行替换</strong>。如果需要按照子字符串进行替换，可以使用字符串的 replace() 方法。</p>
</blockquote>
</li>
<li>
<p>将字符串从左侧或右侧填充指定的字符：使用<code> lstrip()</code> 和 <code>rstrip() </code>方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str12</span> <span class="o">=</span> <span class="s1">&#39;Hello&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str8</span> <span class="o">=</span> <span class="n">str12</span><span class="o">.</span><span class="n">lstrip</span><span class="p">(</span><span class="s1">&#39;H&#39;</span><span class="p">)</span>   <span class="c1"># new_str8 = &#39;ello&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str9</span> <span class="o">=</span> <span class="n">str12</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">)</span>   <span class="c1"># new_str9 = &#39;Hell&#39;</span>
</span></span></code></pre></div></li>
</ul>
<p>Python 中字符串的知识点还有很多，包括但不限于：</p>
<ul>
<li>
<p>格式化字符串：Python 3.6 以后的版本支持 <code>f-string</code>，可以在字符串中直接使用表达式和变量，非常方便。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;John&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">age</span> <span class="o">=</span> <span class="mi">25</span>
</span></span><span class="line"><span class="cl"><span class="n">greeting</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;My name is </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s1">, and I am </span><span class="si">{</span><span class="n">age</span><span class="si">}</span><span class="s1"> years old.&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># greeting = &#39;My name is John, and I am 25 years old.&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>字符串的格式化输出：Python 中的 <code>format()</code> 方法可以对字符串进行格式化输出，支持各种格式控制符和占位符。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">pi</span> <span class="o">=</span> <span class="mf">3.141592653589793</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;pi = </span><span class="si">{:.2f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">pi</span><span class="p">))</span>   <span class="c1"># 输出 &#39;pi = 3.14&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>正则表达式：Python 中内置了 <code>re</code> 模块，可以使用正则表达式进行字符串匹配和替换操作，非常强大。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">str13</span> <span class="o">=</span> <span class="s1">&#39;Hello, world!&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s1">&#39;w\w+&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">str13</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">match</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="k">match</span><span class="o">.</span><span class="n">group</span><span class="p">())</span>   <span class="c1"># 输出 &#39;world&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>字符串的编码和解码：Python 中的字符串是 <code>Unicode</code> 字符串，可以使用 <code>encode()</code> 方法将字符串编码成字节串，使用 <code>decode()</code> 方法将字节串解码成字符串。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str14</span> <span class="o">=</span> <span class="s1">&#39;你好，世界！&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">utf8_bytes</span> <span class="o">=</span> <span class="n">str14</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">gb2312_bytes</span> <span class="o">=</span> <span class="n">str14</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;gb2312&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">utf8_str</span> <span class="o">=</span> <span class="n">utf8_bytes</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">gb2312_str</span> <span class="o">=</span> <span class="n">gb2312_bytes</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;gb2312&#39;</span><span class="p">)</span>
</span></span></code></pre></div></li>
<li>
<p>字符串的比较和排序：Python 中的字符串可以进行比较和排序操作，使用的是按照 <code>Unicode</code> 码点进行比较和排序的规则。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str_list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;world&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;Python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">str_list</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">str_list</span><span class="p">)</span>   <span class="c1"># 输出 [&#39;Python&#39;, &#39;hello&#39;, &#39;java&#39;, &#39;world&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 对列表进行降序排序</span>
</span></span><span class="line"><span class="cl"><span class="n">str_list</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">str_list</span><span class="p">)</span>   <span class="c1"># 输出 [&#39;world&#39;, &#39;java&#39;, &#39;hello&#39;, &#39;Python&#39;]</span>
</span></span></code></pre></div></li>
</ul>
<blockquote>
<p>这段代码用于对一个字符串列表进行排序，它使用了列表的 <code>sort()</code> 方法，将列表中的元素按照一定的规则进行排序。具体来说，它的作用是将字符串列表 <code>str_list</code> 按照字典序进行升序排序，生成一个新的排序后的列表。</p>
<p>在 Python 中，字符串是可以进行比较操作的，比较的规则是按照 Unicode 码点进行比较。因此，对于字符串列表的排序，实际上就是按照字符串的字典序进行排序。具体来说，对于两个字符串 s1 和 s2，按照字典序进行比较的规则是：</p>
<ul>
<li>如果 s1 在 s2 的前面，则 s1 &lt; s2；</li>
<li>如果 s1 在 s2 的后面，则 s1 &gt; s2；</li>
<li>如果 s1 和 s2 相等，则 s1 == s2。</li>
</ul>
<p>因此，对于这段代码中的字符串列表 str_list，它的排序结果为 [&lsquo;Python&rsquo;, &lsquo;hello&rsquo;, &lsquo;java&rsquo;, &lsquo;world&rsquo;]，其中 &lsquo;Python&rsquo; 在字典序中排在最前面，&lsquo;world&rsquo; 在字典序中排在最后面。</p>
<p>需要注意的是，列表的 <code>sort()</code> 方法会直接修改原有的列表，如果不想修改原有列表，可以使用 <code>sorted() </code>函数。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">str_list</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;world&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;Python&#39;</span><span class="p">,</span> <span class="s1">&#39;java&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str_list</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">str_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">new_str_list</span><span class="p">)</span>   <span class="c1"># 输出 [&#39;Python&#39;, &#39;hello&#39;, &#39;java&#39;, &#39;world&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 对列表生成器进行降序排序</span>
</span></span><span class="line"><span class="cl"><span class="n">new_str_list</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">str_list</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">new_str_list</span><span class="p">)</span>   <span class="c1"># 输出 [&#39;world&#39;, &#39;java&#39;, &#39;hello&#39;, &#39;Python&#39;]</span>
</span></span></code></pre></div><p>这样做可以生成一个新的排序后的列表，不会修改原有的列表。</p>
</blockquote>
<p>需要注意的是，<strong>由于字符串是不可变的，因此对字符串进行修改会创建一个新的字符串对象。</strong></p>
<h2 id="列表">列表</h2>
<p>在 Python 中，列表（list）是一种可变序列类型，用于存储一组有序的元素。列表中的元素可以是任意类型的数据，包括数字、字符串、布尔值、列表、元组、字典等。列表使用方括号 [] 表示，元素之间使用逗号分隔。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;hello&#34;</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">{</span><span class="s2">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Alice&#34;</span><span class="p">,</span> <span class="s2">&#34;age&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">}]</span>
</span></span></code></pre></div><p>列表中的元素可以通过索引（下标）进行访问和修改。列表的索引从 0 开始，可以使用正整数和负整数来表示。正整数表示从左往右数的索引，负整数表示从右往左数的索引，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>     <span class="c1"># 输出 1，第一个元素的索引为 0</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>    <span class="c1"># 输出 5，最后一个元素的索引为 -1</span>
</span></span></code></pre></div><p>可以使用切片运算符 <code>:</code> 来获取列表的子列表。切片运算符表示从起始索引到终止索引之间的所有元素，不包括终止索引对应的元素。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">])</span>   <span class="c1"># 输出 [2, 3]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">[:</span><span class="mi">3</span><span class="p">])</span>    <span class="c1"># 输出 [1, 2, 3]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">[</span><span class="mi">3</span><span class="p">:])</span>    <span class="c1"># 输出 [4, 5]</span>
</span></span></code></pre></div><p>列表是一种可变类型，可以通过索引和切片操作来修改列表中的元素。此外，还可以使用列表的方法来添加、删除和修改元素。常用的列表方法包括：</p>
<ul>
<li><code>append(x)</code>：在列表末尾添加元素 x。</li>
<li><code>insert(i, x)</code>：在列表的第 i 个位置插入元素 x。</li>
<li><code>extend(iterable)</code>：在列表末尾添加可迭代对象 <code>iterable</code> 中的所有元素。</li>
<li><code>remove(x)</code>：删除列表中第一个值为 x 的元素。</li>
<li><code>pop([i])</code>：删除列表中索引为 i 的元素，并返回该元素的值。如果省略 i，则默认删除最后一个元素。</li>
<li><code>clear()</code>：删除列表中的所有元素。</li>
<li><code>index(x)</code>：返回列表中第一个值为 x 的元素的索引。如果列表中不存在值为 x 的元素，则抛出 <code>ValueError</code> 异常。</li>
<li><code>count(x)</code>：返回列表中值为 x 的元素的个数。</li>
<li><code>sort()</code>：对列表中的元素进行排序。默认按照升序排列，可以使用 <code>reverse=True</code> 参数进行降序排列。</li>
<li><code>reverse()</code>：将列表中的元素反转。</li>
</ul>
<p>例如，可以使用 <code>append() </code>方法向列表中添加元素：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">)</span>   <span class="c1"># 输出 [1, 2, 3, 4]</span>
</span></span></code></pre></div><p>需要注意的是，列表是一种可变类型，修改一个列表会影响到所有引用该列表的变量。如果需要复制一个列表并独立使用，可以使用 <code>copy() </code>方法或切片运算符进行复制。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">new_list</span> <span class="o">=</span> <span class="n">my_list</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>   <span class="c1"># 复制一个新的列表</span>
</span></span><span class="line"><span class="cl"><span class="n">new_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">)</span>   <span class="c1"># 输出 [1, 2, 3]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">new_list</span><span class="p">)</span>  <span class="c1"># 输出 [1, 2, 3, 4]</span>
</span></span></code></pre></div><p>除了上面提到的基本操作和常用方法，Python 列表还有一些其他的特性和用法，如下：</p>
<ol>
<li>列表推导式</li>
</ol>
<p>列表推导式（list comprehension）是一种快速创建列表的方式。列表推导式由一对方括号和一个表达式构成，表达式可以包含一个或多个循环和条件语句。例如，下面的列表推导式生成了一个包含 1 到 10 的平方值的列表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">squares</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>   <span class="c1"># 输出 [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span>
</span></span></code></pre></div><ol start="2">
<li><code>zip()</code> 函数</li>
</ol>
<p><code>zip()</code> 函数用于将多个列表中对应位置的元素合并成元组。<code>zip()</code> 函数返回一个 zip 对象，可以使用 <code>tuple()</code> 函数将其转换为元组列表。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;Alice&#34;</span><span class="p">,</span> <span class="s2">&#34;Bob&#34;</span><span class="p">,</span> <span class="s2">&#34;Charlie&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">30</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">zipped</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="n">ages</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">zipped</span><span class="p">))</span>   <span class="c1"># 输出 [(&#39;Alice&#39;, 20), (&#39;Bob&#39;, 25), (&#39;Charlie&#39;, 30)]</span>
</span></span></code></pre></div><ol start="3">
<li>列表的复制和浅拷贝</li>
</ol>
<p>当使用赋值语句将一个列表赋值给另一个变量时，实际上是将该列表的引用赋值给了新变量，两个变量指向同一个列表对象。如果修改其中一个变量对应的列表，另一个变量也会受到影响。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>   <span class="c1"># 输出 [1, 2, 3, 4]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>   <span class="c1"># 输出 [1, 2, 3, 4]</span>
</span></span></code></pre></div><p>为了避免这种情况，可以使用 <code>copy()</code> 方法或切片运算符进行复制。但是需要注意的是，这种复制方式只是进行了浅拷贝，即只复制了列表中的元素的引用，而不是元素本身。如果列表中的元素是可变对象（如列表、字典等），修改其中一个元素的值会影响到所有引用该元素的变量。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>   <span class="c1"># 输出 [[1, 2, 3], [3, 4]]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>   <span class="c1"># 输出 [[1, 2, 3], [3, 4]]</span>
</span></span></code></pre></div><p>可以看到，修改 b 中的第一个元素也影响到了 a 中的元素。如果需要完全独立的复制一个列表，需要使用深拷贝（deep copy）方式，可以使用 copy 模块中的 <code>deepcopy()</code> 函数。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">copy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>   <span class="c1"># 输出 [[1, 2], [3, 4]]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>   <span class="c1"># 输出 [[1, 2, 3], [3, 4]]</span>
</span></span></code></pre></div><ol start="4">
<li>列表解包</li>
</ol>
<p>列表解包（list unpacking）是一种快速将列表中的元素分别赋值给多个变量的方式。列表解包使用一对方括号和多个变量名构成，变量名之间使用逗号分隔。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">my_list</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>   <span class="c1"># 输出 1 2 3</span>
</span></span></code></pre></div><ol start="5">
<li>列表的判断和比较</li>
</ol>
<p>可以使用 <code>in</code> 和 <code>not in</code> 运算符判断一个元素是否在列表中，可以使用 <code>==</code> 和 <code>!=</code> 运算符比较两个列表是否相等。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="mi">2</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">)</span>    <span class="c1"># 输出 True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="mi">4</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">)</span>   <span class="c1"># 输出 True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">other_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span> <span class="o">==</span> <span class="n">other_list</span><span class="p">)</span>   <span class="c1"># 输出 True</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span> <span class="ow">is</span> <span class="n">other_list</span><span class="p">)</span>   <span class="c1"># 输出 False，两个列表不是同一个对象</span>
</span></span></code></pre></div><p>需要注意的是，列表的比较是按照元素的顺序和值进行的，如果两个列表包含相同的元素但顺序不同，则它们不相等。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span>   <span class="c1"># 输出 False</span>
</span></span></code></pre></div><ol start="6">
<li>列表的迭代和生成器</li>
</ol>
<p>可以使用 <code>for</code> 循环对列表进行迭代，也可以使用列表推导式或生成器表达式生成一个生成器（generator）。生成器是一种特殊的迭代器，可以逐个产生列表中的元素，避免一次性加载整个列表到内存中。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 列表迭代</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 生成器表达式</span>
</span></span><span class="line"><span class="cl"><span class="n">gen</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">gen</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><ol start="7">
<li>列表的高级排序</li>
</ol>
<p>除了 <code>sort() </code>方法之外，Python 还提供了一些高级的排序方法，如 <code>sorted()</code> 函数和 <code>sort() </code>方法的 key 参数和 cmp 参数。sorted() 函数可以对任意可迭代对象进行排序，返回一个新的有序列表。key 参数指定一个函数，用于对每个元素进行排序，cmp 参数可以指定一个比较函数，用于比较两个元素。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;banana&#34;</span><span class="p">,</span> <span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;grape&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 按照字符串长度排序</span>
</span></span><span class="line"><span class="cl"><span class="n">sorted_list</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">my_list</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">sorted_list</span><span class="p">)</span>   <span class="c1"># 输出 [&#39;apple&#39;, &#39;grape&#39;, &#39;banana&#39;, &#39;orange&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 按照字母顺序排序</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="o">.</span><span class="n">lower</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">)</span>   <span class="c1"># 输出 [&#39;apple&#39;, &#39;banana&#39;, &#39;grape&#39;, &#39;orange&#39;]</span>
</span></span></code></pre></div><h2 id="元组">元组</h2>
<p>在 Python 中，元组（tuple）是一种不可变的序列类型，用于存储一组有序的对象。元组与列表类似，但元组一旦创建就不能被修改，也没有添加、删除、修改等操作的方法，因此元组更加轻量级，而且更加安全。元组使用一对圆括号和逗号分隔的对象列表构成，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span></code></pre></div><p>可以使用索引和切片运算符对元组进行访问和切片。元组支持所有的序列操作，如 len()、in、+、* 等。元组也可以包含任意类型的对象，包括其他元组。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">t1</span> <span class="o">=</span> <span class="p">(</span><span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">t2</span> <span class="o">=</span> <span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="s2">&#34;banana&#34;</span><span class="p">,</span> <span class="mf">2.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span>   <span class="c1"># 输出 ((&#39;apple&#39;, 1, True), &#39;banana&#39;, 2.5)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">t2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>   <span class="c1"># 输出 1</span>
</span></span></code></pre></div><p>元组的不可变性可以保证元组中的对象不会被修改，从而增强程序的安全性和稳定性。元组通常用于表示一些不可变的数据，如坐标、日期、时间等。元组也可以用于函数的返回值，将多个值打包成一个元组返回。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_rectangle_area_and_perimeter</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">width</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">area</span> <span class="o">=</span> <span class="n">length</span> <span class="o">*</span> <span class="n">width</span>
</span></span><span class="line"><span class="cl">    <span class="n">perimeter</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">length</span> <span class="o">+</span> <span class="n">width</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">area</span><span class="p">,</span> <span class="n">perimeter</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">area</span><span class="p">,</span> <span class="n">perimeter</span> <span class="o">=</span> <span class="n">get_rectangle_area_and_perimeter</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">area</span><span class="p">,</span> <span class="n">perimeter</span><span class="p">)</span>   <span class="c1"># 输出 50 30</span>
</span></span></code></pre></div><p>需要注意的是，如果元组中只有一个元素，需要在元素后面加上逗号，否则会被解释为其他类型。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>   <span class="c1"># 包含一个元素的元组</span>
</span></span><span class="line"><span class="cl"><span class="n">not_a_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>   <span class="c1"># 一个整数，而不是元组</span>
</span></span></code></pre></div><p>下面是 Python 元组的一些其他特性和用法：</p>
<ol>
<li>元组解包</li>
</ol>
<p>和列表解包类似，可以使用元组解包（tuple unpacking）将元组中的元素依次赋值给多个变量，变量名之间使用逗号分隔。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">my_tuple</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>   <span class="c1"># 输出 1 2 3</span>
</span></span></code></pre></div><ol start="2">
<li>元组的比较和排序</li>
</ol>
<p>和列表一样，元组也支持比较运算符（==、!=、&lt;、&lt;=、&gt;、&gt;=）和排序方法（sorted()、sort()）。元组的比较是按照元素的顺序和值进行的，如果两个元组包含相同的元素但顺序不同，则它们不相等。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span>   <span class="c1"># 输出 False</span>
</span></span></code></pre></div><ol start="3">
<li>元组作为不可变字典的键</li>
</ol>
<p>由于元组是不可变的，可以用作字典的键。如果要使用列表作为字典的键，则需要先将列表转换为元组。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{(</span><span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;banana&#34;</span><span class="p">):</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="s2">&#34;orange&#34;</span><span class="p">,</span> <span class="s2">&#34;grape&#34;</span><span class="p">):</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">[(</span><span class="s2">&#34;apple&#34;</span><span class="p">,</span> <span class="s2">&#34;banana&#34;</span><span class="p">)])</span>   <span class="c1"># 输出 1</span>
</span></span></code></pre></div><ol start="4">
<li><code>*</code> 运算符</li>
</ol>
<p>可以使用 <code>*</code> 运算符将多个元组合并成一个元组。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">t1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">t2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">t3</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">t1</span><span class="p">,</span> <span class="o">*</span><span class="n">t2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">t3</span><span class="p">)</span>   <span class="c1"># 输出 (1, 2, 3, 4, 5, 6)</span>
</span></span></code></pre></div><ol start="5">
<li>元组的生成器</li>
</ol>
<p>和列表一样，元组也可以使用生成器表达式生成一个生成器（generator）。生成器是一种特殊的迭代器，可以逐个产生元组中的元素，避免一次性加载整个元组到内存中。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 生成器表达式</span>
</span></span><span class="line"><span class="cl"><span class="n">gen</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">my_tuple</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">gen</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="集合">集合</h2>
<p>Python中的集合类型是set（集合）和frozenset（不可变集合）。</p>
<p>set是一种无序、可变的集合类型，其中不允许有重复元素。可以使用大括号<code>{}</code>或<code>set()</code>函数来创建一个集合。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2, 3}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2, 3}</span>
</span></span></code></pre></div><p>可以使用add()方法向集合中添加元素，使用<code>remove()</code>方法删除元素。可以使用<code>in</code>关键字来检查元素是否在集合中。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">my_set</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2, 3, 4}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_set</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 {1, 3, 4}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="mi">2</span> <span class="ow">in</span> <span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 False</span>
</span></span></code></pre></div><p>集合支持各种集合运算，如并集、交集、差集等。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 并集</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">set1</span> <span class="o">|</span> <span class="n">set2</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2, 3, 4, 5}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 交集</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">set1</span> <span class="o">&amp;</span> <span class="n">set2</span><span class="p">)</span>   <span class="c1"># 输出 {3}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 差集</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">set1</span> <span class="o">-</span> <span class="n">set2</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 对称差集</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">set1</span> <span class="o">^</span> <span class="n">set2</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2, 4, 5}</span>
</span></span></code></pre></div><p>frozenset是一种不可变的集合类型，可以使用<code>frozenset()</code>函数来创建。frozenset和set具有相似的操作，但是不支持添加、删除元素等操作。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_fset</span> <span class="o">=</span> <span class="nb">frozenset</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_fset</span><span class="p">)</span>   <span class="c1"># 输出 frozenset({1, 2, 3})</span>
</span></span></code></pre></div><p>下面是Python中集合类型的一些其他特性和用法：</p>
<ol>
<li>列表、元组转换为集合</li>
</ol>
<p>可以使用<code>set()</code>函数将列表或元组转换为集合。集合会自动去除重复元素。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">my_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2, 3}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">my_tuple</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 {4, 5, 6}</span>
</span></span></code></pre></div><ol start="2">
<li>集合的长度</li>
</ol>
<p>可以使用<code>len()</code>函数获取集合的长度（即集合中元素的个数）。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">my_set</span><span class="p">))</span>   <span class="c1"># 输出 3</span>
</span></span></code></pre></div><ol start="3">
<li>集合的迭代</li>
</ol>
<p>可以使用<code>for</code>循环迭代集合中的元素。由于集合是无序的，每次迭代的顺序可能不同。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">my_set</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></div><ol start="4">
<li>集合解析</li>
</ol>
<p>和列表解析类似，可以使用集合解析（set comprehension）快速生成一个集合。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2, 3, 4, 5}</span>
</span></span></code></pre></div><ol start="5">
<li>frozenset作为字典键</li>
</ol>
<p>由于<code>frozenset</code>是不可变的，可以作为字典的键。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="nb">frozenset</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}):</span> <span class="s2">&#34;A&#34;</span><span class="p">,</span> <span class="nb">frozenset</span><span class="p">({</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}):</span> <span class="s2">&#34;B&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">[</span><span class="nb">frozenset</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">})])</span>   <span class="c1"># 输出 &#34;A&#34;</span>
</span></span></code></pre></div><ol start="6">
<li>集合的类型</li>
</ol>
<p>可以使用<code>type()</code>函数查看集合的类型，也可以使用<code>isinstance()</code>函数判断集合是否属于某种类型。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">my_set</span><span class="p">))</span>   <span class="c1"># 输出 &lt;class &#39;set&#39;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">my_set</span><span class="p">,</span> <span class="nb">set</span><span class="p">))</span>   <span class="c1"># 输出 True</span>
</span></span></code></pre></div><ol start="7">
<li>集合的复制</li>
</ol>
<p>集合可以使用<code>copy()</code>方法进行复制。复制后的集合和原集合具有不同的内存地址，互不影响。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">new_set</span> <span class="o">=</span> <span class="n">my_set</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">new_set</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2, 3}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">new_set</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">new_set</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2, 3, 4}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>    <span class="c1"># 输出 {1, 2, 3}</span>
</span></span></code></pre></div><ol start="8">
<li>集合的更新</li>
</ol>
<p>可以使用<code>update()</code>方法将一个集合的元素添加到另一个集合中。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">set1</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">set1</span><span class="p">)</span>   <span class="c1"># 输出 {1, 2, 3, 4, 5}</span>
</span></span></code></pre></div><ol start="9">
<li>集合的删除</li>
</ol>
<p>可以使用<code>discard()</code>方法或<code>remove()</code>方法来删除集合中的元素。如果要删除的元素不存在，<code>discard()</code>方法不会报错，而<code>remove()</code>方法会抛出KeyError异常。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">my_set</span><span class="o">.</span><span class="n">discard</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 {1, 3}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_set</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 {1}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_set</span><span class="o">.</span><span class="n">discard</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>   <span class="c1"># 不会报错</span>
</span></span><span class="line"><span class="cl"><span class="n">my_set</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>    <span class="c1"># 抛出KeyError异常</span>
</span></span></code></pre></div><ol start="10">
<li>集合的清空</li>
</ol>
<p>可以使用<code>clear()</code>方法清空集合中的所有元素。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">my_set</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_set</span><span class="p">)</span>   <span class="c1"># 输出 set()</span>
</span></span></code></pre></div><h2 id="字典">字典</h2>
<p>在Python中，字典是一种可变的数据类型，用于存储键-值对。字典用大括号{}表示，每个键值对之间用逗号分隔。字典中的键必须是不可变的，如整数、字符串或元组，而值可以是任意的Python对象。</p>
<p>下面是一个简单的字典示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span></code></pre></div><p>在上面的例子中，键&rsquo;name&rsquo;、&lsquo;age&rsquo;和&rsquo;city&rsquo;分别与值&rsquo;John&rsquo;、30和&rsquo;New York&rsquo;相关联。可以使用键来访问字典中的值，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>  <span class="c1"># 输出：John</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">[</span><span class="s1">&#39;age&#39;</span><span class="p">])</span>  <span class="c1"># 输出：30</span>
</span></span></code></pre></div><p>您还可以使用<code>dict()</code>函数从其他序列或映射创建字典，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_dict2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">([(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;Mary&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="mi">25</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;city&#39;</span><span class="p">,</span> <span class="s1">&#39;Los Angeles&#39;</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict2</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;Mary&#39;, &#39;age&#39;: 25, &#39;city&#39;: &#39;Los Angeles&#39;}</span>
</span></span></code></pre></div><p>字典支持许多有用的方法，如<code>keys()</code>、<code>values()</code>和<code>items()</code>，这些方法返回字典的键、值和键-值对的视图。字典的视图可用于按照特定的顺序访问字典中的元素，或对字典进行迭代操作。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 获取字典的键列表</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">my_dict</span><span class="o">.</span><span class="n">keys</span><span class="p">()))</span>  <span class="c1"># 输出：[&#39;name&#39;, &#39;age&#39;, &#39;city&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 获取字典的值列表</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">my_dict</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>  <span class="c1"># 输出：[&#39;John&#39;, 30, &#39;New York&#39;]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 获取字典的键-值对列表</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">my_dict</span><span class="o">.</span><span class="n">items</span><span class="p">()))</span>  <span class="c1"># 输出：[(&#39;name&#39;, &#39;John&#39;), (&#39;age&#39;, 30), (&#39;city&#39;, &#39;New York&#39;)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用for循环迭代字典的键和值</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">my_dict</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span></span></code></pre></div><p>以下是一些进阶的字典操作：</p>
<ol>
<li>向字典中添加或更新键值对</li>
</ol>
<p>可以使用<code>[key]</code>索引或<code>update()</code>方法向字典中添加或更新键值对。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 添加新的键值对</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span><span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;male&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 30, &#39;city&#39;: &#39;New York&#39;, &#39;gender&#39;: &#39;male&#39;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 更新现有的键值对</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span><span class="p">[</span><span class="s1">&#39;age&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">40</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 40, &#39;city&#39;: &#39;New York&#39;, &#39;gender&#39;: &#39;male&#39;}</span>
</span></span></code></pre></div><p>可以使用<code>update()</code>方法将一个字典合并到另一个字典中。如果键相同，则后一个字典的值将覆盖前一个字典的值。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict2</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;male&#39;</span><span class="p">,</span> <span class="s1">&#39;country&#39;</span><span class="p">:</span> <span class="s1">&#39;USA&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">my_dict2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 30, &#39;city&#39;: &#39;New York&#39;, &#39;gender&#39;: &#39;male&#39;, &#39;country&#39;: &#39;USA&#39;}</span>
</span></span></code></pre></div><ol start="2">
<li>删除字典中的键值对</li>
</ol>
<p>可以使用<code>del</code>语句或<code>pop()</code>方法从字典中删除键值对。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 使用del删除键值对</span>
</span></span><span class="line"><span class="cl"><span class="k">del</span> <span class="n">my_dict</span><span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 40, &#39;city&#39;: &#39;New York&#39;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用pop删除键值对</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;city&#39;: &#39;New York&#39;}</span>
</span></span></code></pre></div><ol start="3">
<li>使用<code>items()</code>方法遍历字典的键值对</li>
</ol>
<p>可以使用<code>items()</code>方法遍历字典的键值对。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">my_dict</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>在这个例子中，<code>items()</code>方法返回一个由键值对组成的元组，然后使用<code>for</code>循环遍历这个元组并打印出每个键值对。</p>
<ol start="3">
<li>使用字典推导式创建字典</li>
</ol>
<p>可以使用字典推导式从其他序列或字典创建新的字典。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 从列表创建字典</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;John&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;city&#39;</span><span class="p">,</span> <span class="s1">&#39;New York&#39;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="n">key</span><span class="p">:</span> <span class="n">value</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 30, &#39;city&#39;: &#39;New York&#39;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 从另一个字典创建字典</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict2</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;gender&#39;</span><span class="p">:</span> <span class="s1">&#39;male&#39;</span><span class="p">,</span> <span class="s1">&#39;country&#39;</span><span class="p">:</span> <span class="s1">&#39;USA&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict3</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">my_dict</span><span class="p">,</span> <span class="o">**</span><span class="n">my_dict2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict3</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 30, &#39;city&#39;: &#39;New York&#39;, &#39;gender&#39;: &#39;male&#39;, &#39;country&#39;: &#39;USA&#39;}</span>
</span></span></code></pre></div><ol start="4">
<li>使用<code>defaultdict</code>创建默认值字典</li>
</ol>
<p><code>defaultdict</code>是一个字典子类，它允许您指定一个默认值，以便在访问不存在的键时返回该值。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>  <span class="c1"># 默认值为0</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span><span class="p">[</span><span class="s1">&#39;age&#39;</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;age&#39;: 1}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_dict2</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>  <span class="c1"># 默认值为[]</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict2</span><span class="p">[</span><span class="s1">&#39;names&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict2</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;names&#39;: [&#39;John&#39;]}</span>
</span></span></code></pre></div><ol start="5">
<li>使用<code>sorted()</code>函数按照键或值排序字典</li>
</ol>
<p>可以使用<code>sorted()</code>函数按照字典的键或值对字典进行排序。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 按照键排序字典</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">sorted_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">my_dict</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">sorted_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;age&#39;: 30, &#39;city&#39;: &#39;New York&#39;, &#39;name&#39;: &#39;John&#39;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 按照值排序字典</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">sorted_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">my_dict</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">sorted_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;age&#39;: 30, &#39;name&#39;: &#39;John&#39;, &#39;city&#39;: &#39;New York&#39;}</span>
</span></span></code></pre></div><ol start="6">
<li>使用<code>zip()</code>函数将两个序列合并为字典</li>
</ol>
<p>可以使用<code>zip()</code>函数将两个序列合并为一个字典。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;New York&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="n">values</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 30, &#39;city&#39;: &#39;New York&#39;}</span>
</span></span></code></pre></div><ol start="7">
<li>使用<code>json</code>模块将字典转换为JSON格式</li>
</ol>
<p>可以使用<code>json</code>模块将Python字典转换为JSON格式的字符串。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">json_str</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">json_str</span><span class="p">)</span>  <span class="c1"># 输出：{&#34;name&#34;: &#34;John&#34;, &#34;age&#34;: 30, &#34;city&#34;: &#34;New York&#34;}</span>
</span></span></code></pre></div><ol start="8">
<li>使用<code>pprint</code>模块打印出漂亮的字典输出</li>
</ol>
<p>可以使用<code>pprint</code>模块打印出漂亮的、易于阅读的字典输出。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pprint</span> <span class="kn">import</span> <span class="n">pprint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">pprint</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>
</span></span></code></pre></div><ol start="9">
<li>使用<code>copy()</code>方法或<code>dict()</code>构造函数创建字典副本</li>
</ol>
<p>可以使用<code>copy()</code>方法或<code>dict()</code>构造函数创建字典的副本。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict_copy</span> <span class="o">=</span> <span class="n">my_dict</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>  <span class="c1"># 使用copy()方法创建副本</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict_copy</span><span class="p">[</span><span class="s1">&#39;age&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">40</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 30, &#39;city&#39;: &#39;New York&#39;}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict_copy</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 40, &#39;city&#39;: &#39;New York&#39;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_dict2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 使用dict()构造函数创建副本</span>
</span></span><span class="line"><span class="cl"><span class="n">my_dict2</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Mary&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 30, &#39;city&#39;: &#39;New York&#39;}</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict2</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;Mary&#39;, &#39;age&#39;: 30, &#39;city&#39;: &#39;New York&#39;}</span>
</span></span></code></pre></div><ol start="10">
<li>使用<code>setdefault()</code>方法获取字典的值</li>
</ol>
<p>可以使用<code>setdefault()</code>方法获取字典的值。如果键存在，则返回键的值。如果键不存在，则返回默认值并将其添加到字典中。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="n">my_dict</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;Unknown&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">gender</span> <span class="o">=</span> <span class="n">my_dict</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="s1">&#39;male&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>  <span class="c1"># 输出：John</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">gender</span><span class="p">)</span>  <span class="c1"># 输出：male</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：{&#39;name&#39;: &#39;John&#39;, &#39;age&#39;: 30, &#39;city&#39;: &#39;New York&#39;, &#39;gender&#39;: &#39;male&#39;}</span>
</span></span></code></pre></div><ol start="11">
<li>字典解包</li>
</ol>
<p>字典解包是一种将字典转换为关键字参数的技术。字典解包使用一个或两个星号运算符（<code>*</code>或<code>**</code>）来实现。</p>
<p>具体来说，当使用单个星号运算符<code>*</code>将一个字典解包时，它会将字典的键解包为一个可迭代对象，可以在函数调用中作为位置参数传递。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_info</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">city</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Name: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Age: </span><span class="si">{</span><span class="n">age</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;City: </span><span class="si">{</span><span class="n">city</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">print_info</span><span class="p">(</span><span class="o">*</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：TypeError: print_info() takes 3 positional arguments but 6 were given</span>
</span></span></code></pre></div><p>在这个例子中，由于<code>print_info()</code>函数需要3个关键字参数<code>name</code>、<code>age</code>和<code>city</code>，而字典<code>my_dict</code>中有3个键<code>name</code>、<code>age</code>和<code>city</code>，因此它们被解包为一个可迭代对象<code>('name', 'age', 'city')</code>，然后作为位置参数传递给<code>print_info()</code>函数。但是，由于<code>print_info()</code>函数需要的是关键字参数而不是位置参数，因此出现了<code>TypeError</code>异常。</p>
<p>为了解决这个问题，可以使用双星号运算符<code>**</code>将字典解包为关键字参数。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_info</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">city</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Name: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Age: </span><span class="si">{</span><span class="n">age</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;City: </span><span class="si">{</span><span class="n">city</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="s1">&#39;city&#39;</span><span class="p">:</span> <span class="s1">&#39;New York&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">print_info</span><span class="p">(</span><span class="o">**</span><span class="n">my_dict</span><span class="p">)</span>  <span class="c1"># 输出：Name: John Age: 30 City: New York</span>
</span></span></code></pre></div><p>在这个例子中，双星号运算符<code>**</code>将字典<code>my_dict</code>解包为关键字参数<code>name='John'</code>、<code>age=30</code>和<code>city='New York'</code>，然后将它们作为关键字参数传递给<code>print_info()</code>函数，这样就能够成功地打印出字典中的值了。</p>
<p>需要注意的是，只有在函数定义中明确指定了这些关键字参数时，才能使用字典解包。否则，将会引发<code>TypeError</code>异常。</p>
<h2 id="none">None</h2>
<p>在Python中，<code>None</code>是一个特殊的对象，表示一个空值或缺失值。<code>None</code>是Python中唯一的空值对象，用于表示没有值的情况。它是一个单例对象，也就是说，Python中的所有<code>None</code>引用都指向同一个对象。</p>
<p><code>None</code>类型可以用于多种情况，例如：</p>
<ul>
<li>表示函数没有返回值</li>
<li>表示变量尚未被赋值</li>
<li>表示一个字典中没有指定的键</li>
<li>表示一个类的属性尚未被赋值</li>
</ul>
<p>以下是一些使用<code>None</code>的例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_hello</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello, world!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 函数没有返回值，所以可以不写return语句</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;x is not defined&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">city</span> <span class="o">=</span> <span class="n">my_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;city&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">city</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;No city found in my_dict&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s2">&#34;John&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">age</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Age not specified&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>在这些例子中，我们可以看到<code>None</code>被用于表示函数没有返回值、变量尚未被赋值、一个字典中没有指定的键以及一个类的属性尚未被赋值等情况。</p>
<p>Python中<code>None</code>类型的一些补充说明：</p>
<ol>
<li>NoneType 类型</li>
</ol>
<p>在Python中，<code>None</code>是一个特殊的对象，其类型为<code>NoneType</code>。可以使用<code>type()</code>函数来检查一个对象的类型。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>  <span class="c1"># 输出：&lt;class &#39;NoneType&#39;&gt;</span>
</span></span></code></pre></div><p>在这个例子中，<code>type()</code>函数返回变量<code>x</code>的类型，即<code>NoneType</code>。</p>
<ol start="2">
<li>避免与其他类型混淆</li>
</ol>
<p>在Python中，<code>None</code>类型只能与自身进行比较，不能与其他类型进行比较。如果不小心将<code>None</code>与其他类型混淆，可能会导致一些奇怪的行为。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;x is an empty string&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>在这个例子中，由于<code>==</code>操作符将<code>None</code>与空字符串进行比较，所以程序不会打印任何内容。如果想检查一个变量是否为字符串，应该使用<code>isinstance()</code>函数。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;x is a string&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>在这个例子中，<code>isinstance()</code>函数检查变量<code>x</code>是否为字符串类型。</p>
<ol start="3">
<li>使用<code>is not None</code>检查变量是否存在</li>
</ol>
<p>在Python中，如果想检查一个变量是否存在，应该使用<code>is not None</code>表达式。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;x is defined&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>在这个例子中，<code>is not None</code>表达式检查变量<code>x</code>是否存在。如果存在，则打印出<code>x is defined</code>。这种写法比使用<code>if x:</code>更明确，可以避免一些潜在的问题。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Adapter</title>
      <link>https://blog.chensoul.com/posts/2023/06/10/java-design-patterns-adapter/</link>
      <pubDate>Sat, 10 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/10/java-design-patterns-adapter/</guid>
      <description>本文主要介绍 Adapter 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计模</description>
      <content:encoded><![CDATA[<p>本文主要介绍 Adapter 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="目的">目的</h2>
<p>将一个接口转换成另一个客户所期望的接口。适配器让那些本来因为接口不兼容的类可以合作无间。</p>
<blockquote>
<p>适配器模式(Adapter Pattern)是一种结构型设计模式，它允许将一个类的接口转换成客户端所期望的另一种接口。适配器模式通常用于连接两个不兼容的接口或类，以便它们可以协同工作。</p>
</blockquote>
<h2 id="解释">解释</h2>
<p>现实世界例子</p>
<blockquote>
<p>考虑有这么一种情况，在你的存储卡中有一些照片，你想将其传到你的电脑中。为了传送数据，你需要某种能够兼容你电脑接口的适配器以便你的储存卡能连上你的电脑。在这种情况下，读卡器就是一个适配器。 另一个例子就是注明的电源适配器；三脚插头不能插在两脚插座上，需要一个电源适配器来使其能够插在两脚插座上。 还有一个例子就是翻译官，他翻译一个人对另一个人说的话。</p>
</blockquote>
<p>用直白的话来说</p>
<blockquote>
<p>适配器模式让你可以把不兼容的对象包在适配器中，以让其兼容其他类。</p>
</blockquote>
<p>维基百科中说</p>
<blockquote>
<p>在软件工程中，适配器模式是一种可以让现有类的接口把其作为其他接口来使用的设计模式。它经常用来使现有的类和其他类能够工作并且不用修改其他类的源代码。</p>
</blockquote>
<p>适配器模式由三个主要角色组成：</p>
<ol>
<li>
<p>目标接口(Target Interface)：客户端所期望的接口。适配器模式会创建一个实现目标接口的新类，以便客户端可以通过该接口调用它。</p>
</li>
<li>
<p>适配器(Adapter)：该类实现了目标接口，并将客户端的请求转换为对适配者的调用。适配器通常会聚合一个适配者对象，以便将请求委托给它。</p>
</li>
<li>
<p>适配者(Adapteree)：适配器模式的实际工作内容。适配者是客户端所期望的接口之外的类，它实现了客户端需要的功能，但其接口与客户端所期望的接口不兼容。</p>
</li>
</ol>
<p><strong>编程样例(对象适配器)</strong></p>
<p>假如有一个船长他只会划船，但不会航行。</p>
<p>首先我们有接口<code>RowingBoat</code>和<code>FishingBoat</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">RowingBoat</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">row</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FishingBoat</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sail</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;The fishing boat is sailing&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>船长希望有一个<code>RowingBoat</code>接口的实现，这样就可以移动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Captain</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">RowingBoat</span> <span class="n">rowingBoat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// default constructor and setter for rowingBoat
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">public</span> <span class="nf">Captain</span><span class="o">(</span><span class="n">RowingBoat</span> <span class="n">rowingBoat</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">rowingBoat</span> <span class="o">=</span> <span class="n">rowingBoat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">row</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">rowingBoat</span><span class="o">.</span><span class="na">row</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在海盗来了，我们的船长需要逃跑但是只有一个渔船可用。我们需要创建一个可以让船长使用其划船技能来操作渔船的适配器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FishingBoatAdapter</span> <span class="kd">implements</span> <span class="n">RowingBoat</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">FishingBoat</span> <span class="n">boat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">FishingBoatAdapter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">boat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FishingBoat</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">row</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">boat</span><span class="o">.</span><span class="na">sail</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在 <code>船长</code> 可以使用<code>FishingBoat</code>接口来逃离海盗了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">var</span> <span class="n">captain</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Captain</span><span class="o">(</span><span class="k">new</span> <span class="n">FishingBoatAdapter</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">captain</span><span class="o">.</span><span class="na">row</span><span class="o">();</span>
</span></span></code></pre></div><h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/adapter.urm-beb4eb0d.png" alt="alt text"  />
</p>
<h2 id="优缺点">优缺点</h2>
<p>适配器模式的主要优点是，它可以将不兼容的类和接口连接起来，以便它们可以协同工作。适配器模式还可以减少代码重复，因为它可以将现有的类重用在新的上下文中。此外，适配器模式可以帮助应对不稳定的接口，因为它可以将接口变化隔离到适配器中。</p>
<p>适配器模式的主要缺点是，它可能会导致系统调用链的增加，因为它需要添加额外的对象来进行转换。此外，适配器模式可能会导致性能下降，因为它需要执行额外的处理来进行转换。</p>
<h2 id="应用">应用</h2>
<p>适配器模式通常用于以下场景：</p>
<ol>
<li>将现有的类或接口与新的代码集成：适配器可以将现有的类或接口与新的代码集成，以便它们可以协同工作。</li>
<li>与第三方库或组件集成：适配器可以将第三方库或组件的接口与应用程序的接口进行转换，以便它们可以协同工作。</li>
<li>应对不稳定的接口：适配器可以将不稳定的接口封装在一个适配器中，以便将来接口变化时只需要更改适配器即可。</li>
<li>实现多个接口：适配器可以实现多个接口，以便一个对象可以同时被多个类使用。</li>
<li>在测试中使用：适配器可以在测试中模拟接口的行为，以便测试程序的各种用例。</li>
<li>兼容不同版本：如果应用程序需要与多个版本的同一接口进行交互，可以使用适配器模式来处理不同版本之间的差异。</li>
<li>重用现有代码：如果需要重用现有的代码，但其接口与所需接口不兼容，则可以使用适配器模式来重用代码。</li>
<li>数据库驱动程序：数据库驱动程序通常使用适配器模式，以便将数据库的不同接口转换为Java JDBC接口。</li>
<li>日志记录：日志记录库通常使用适配器模式，以便将不同的日志记录接口转换为通用的接口。</li>
<li>扩展现有功能：如果需要扩展现有功能，但其接口与所需接口不兼容，则可以使用适配器模式来扩展现有功能。</li>
</ol>
<p>以下是一个使用适配器模式的日志记录库的示例：</p>
<ol>
<li>目标接口：定义通用的日志记录器接口。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Logger</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol start="2">
<li>适配器：定义一个适配器类，实现目标接口，并聚合不同日志框架的对象。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogAdapter</span> <span class="kd">implements</span> <span class="n">Logger</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Log4j</span> <span class="n">log</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">LogAdapter</span><span class="o">(</span><span class="n">Log4j</span> <span class="n">log</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">log</span> <span class="o">=</span> <span class="n">log</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol start="3">
<li>适配者：定义一个Log4j日志框架的类。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Log4j</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">trace</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 使用Log4j进行日志记录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，我们可以使用适配器来将不同的日志框架转换为通用的Logger接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Log4j</span> <span class="n">log4j</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Log4j</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogAdapter</span><span class="o">(</span><span class="n">log4j</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">&#34;This is a log message&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>在上面的示例中，适配器模式允许我们将Log4j框架的接口转换为通用的Logger接口，以便我们可以使用Logger接口记录日志而不必关心具体使用的日志框架。如果我们需要切换到其他日志框架，只需要创建一个新的适配器即可。</p>
<p>除了适配器模式的应用场景和常见开源框架中的使用示例外，适配器还有其他一些相关的概念和技术：</p>
<ol>
<li>对象适配器和类适配器：适配器模式可以分为对象适配器和类适配器两种。对象适配器使用组合的方式来实现适配器模式，而类适配器使用继承的方式来实现适配器模式。</li>
<li>双向适配器：在一些情况下，需要将两个不兼容的接口互相适配。这种情况下，可以使用双向适配器模式来实现双向的适配。</li>
<li>接口适配器：当一个接口中有太多的方法，而实现该接口的类只需要其中的一部分方法时，可以使用接口适配器模式来解决这个问题。接口适配器模式将一个接口拆分成多个接口，并提供一个默认的空实现，使得实现该接口的类可以只实现自己需要的方法。</li>
</ol>
<p>下面是一个双向适配器的示例：</p>
<p>假设有两个接口，分别是 <code>Shape</code> 和 <code>IRectangle</code>，其中 <code>Shape</code> 表示一个形状，<code>IRectangle</code> 表示一个矩形。<code>Shape</code> 接口有两个方法 <code>draw()</code> 和 <code>resize()</code>，而 <code>IRectangle</code> 接口有三个方法 <code>setOrigin()</code>, <code>setWidth()</code> 和 <code>setHeight()</code>。</p>
<p>现在，我们需要将这两个接口互相适配。我们可以定义一个双向适配器 <code>ShapeToRectangleAdapter</code>，它实现了这两个接口，并且可以将一个 <code>Shape</code> 对象适配到一个 <code>IRectangle</code> 对象中，也可以将一个 <code>IRectangle</code> 对象适配到一个 <code>Shape</code> 对象中。具体实现如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">draw</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">resize</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  	<span class="kt">void</span> <span class="nf">move</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IRectangle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">setOrigin</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">setWidth</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">setHeight</span><span class="o">(</span><span class="kt">int</span> <span class="n">height</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">paint</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">stretch</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShapeToRectangleAdapter</span> <span class="kd">implements</span> <span class="n">Shape</span><span class="o">,</span> <span class="n">IRectangle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Shape</span> <span class="n">shape</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">IRectangle</span> <span class="n">rectangle</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ShapeToRectangleAdapter</span><span class="o">(</span><span class="n">Shape</span> <span class="n">shape</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">shape</span> <span class="o">=</span> <span class="n">shape</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ShapeToRectangleAdapter</span><span class="o">(</span><span class="n">IRectangle</span> <span class="n">rectangle</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">rectangle</span> <span class="o">=</span> <span class="n">rectangle</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 将 Shape 适配到 IRectangle 中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setOrigin</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">shape</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setWidth</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">shape</span><span class="o">.</span><span class="na">resize</span><span class="o">(</span><span class="n">width</span><span class="o">,</span> <span class="n">shape</span><span class="o">.</span><span class="na">getHeight</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHeight</span><span class="o">(</span><span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">shape</span><span class="o">.</span><span class="na">resize</span><span class="o">(</span><span class="n">shape</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="n">height</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 将 IRectangle 适配到 Shape 中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">rectangle</span><span class="o">.</span><span class="na">paint</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">resize</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">rectangle</span><span class="o">.</span><span class="na">setWidth</span><span class="o">(</span><span class="n">width</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">rectangle</span><span class="o">.</span><span class="na">setHeight</span><span class="o">(</span><span class="n">height</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">rectangle</span><span class="o">.</span><span class="na">setOrigin</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getWidth</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">rectangle</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getHeight</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">rectangle</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paint</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">shape</span><span class="o">.</span><span class="na">draw</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stretch</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">shape</span><span class="o">.</span><span class="na">resize</span><span class="o">(</span><span class="n">shape</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">*</span> <span class="mi">2</span><span class="o">,</span> <span class="n">shape</span><span class="o">.</span><span class="na">getHeight</span><span class="o">()</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的代码中，<code>ShapeToRectangleAdapter</code> 适配器实现了 <code>Shape</code> 和 <code>IRectangle</code> 接口，并且在构造函数中接收一个 <code>Shape</code> 对象或 <code>IRectangle</code> 对象作为参数，以便将其适配到另一个接口中。</p>
<p>当需要将一个 <code>Shape</code> 对象适配到一个 <code>IRectangle</code> 对象中时，适配器实现了 <code>setOrigin()</code>、<code>setWidth()</code> 和 <code>setHeight()</code> 方法，将 <code>Shape</code> 对象的位置和大小适配到 <code>IRectangle</code> 对象中。</p>
<p>当需要将一个 <code>IRectangle</code> 对象适配到一个 <code>Shape</code> 对象中时，适配器实现了 <code>draw()</code> 和 <code>resize()</code> 方法，将 <code>IRectangle</code> 对象的绘制和大小调整适配到 <code>Shape</code> 对象中。</p>
<p>这样，通过双向适配器，我们可以将 <code>Shape</code> 和 <code>IRectangle</code> 接口互相适配，使得它们可以在需要的时候互相调用。</p>
<h2 id="对比">对比</h2>
<p>适配器模式和装饰器模式都是常见的结构型设计模式，它们的作用都是为了增强类的功能。虽然这两种模式具有某些相似之处，但它们之间也存在一些重要的区别。下面是适配器模式和装饰器模式之间的区别：</p>
<ol>
<li>目的不同：适配器模式的目的是将一个类的接口转换为另一个类的接口，以便这两个类可以协同工作。而装饰器模式的目的是为一个对象添加新的功能，同时不改变其原有的接口和实现。</li>
<li>适配方式不同：适配器模式通常使用对象适配器或类适配器来实现。对象适配器使用组合关系将适配器包装在另一个对象中，而类适配器使用多重继承来实现适配器。而装饰器模式始终使用对象组合来实现。</li>
<li>使用场景不同：适配器模式通常用于集成第三方类或接口，或是将不兼容的接口转换为兼容的接口。而装饰器模式通常用于在运行时动态地为一个对象添加新的功能。</li>
<li>对象的关系不同：适配器模式中，适配器与被适配者之间是一种静态关系，它们之间的关系在编译时就已经确定。而装饰器模式中，装饰器与被装饰者之间是一种动态关系，它们之间的关系在运行时才能确定。</li>
</ol>
<p>适配器模式的应用场景：</p>
<ol>
<li>在集成第三方类或接口时，可以使用适配器模式将其接口转换为应用程序所需的接口。</li>
<li>当需要使用某个类的方法，但该类的接口与应用程序的接口不兼容时，可以使用适配器模式将该类的接口转换为应用程序所需的接口。</li>
<li>当需要将一种数据格式转换为另一种数据格式时，可以使用适配器模式将数据格式转换为应用程序所需的格式。</li>
</ol>
<p>例如，将一个电器插头插入到墙上的插座中，这两个接口是不兼容的。我们可以使用一个插头适配器，将电器插头的接口转换为墙上插座的接口，以便电器可以与墙上的插座协同工作。</p>
<p>装饰器模式的应用场景：</p>
<ol>
<li>当需要为一个对象动态地添加新的功能时，可以使用装饰器模式。</li>
<li>当需要为一个对象添加的多个功能具有不同的组合方式时，可以使用装饰器模式。</li>
</ol>
<p>例如，在一个在线商店中，用户可以购买商品并进行支付。我们可以使用装饰器模式来为订单对象添加新的功能，例如添加优惠券、添加礼品包装、添加快递保险等。这些功能可以根据用户的需求进行组合，并且可以在运行时动态地添加或删除。</p>
<p>总之，适配器模式和装饰器模式都是为了增强类的功能，但它们的目的和实现方式不同。适配器模式是为了解决接口不兼容的问题，而装饰器模式是为了动态地为一个对象添加新的功能。</p>
<h2 id="举例">举例</h2>
<p>以下是常见开源框架中使用适配器模式的一些示例：</p>
<ol>
<li>Spring框架：Spring框架中的 <code>HandlerAdapter</code> 接口就是一个适配器模式的应用。不同的 <code>HandlerAdapter</code> 实现类可以将不同类型的控制器（如Servlet、Struts、JSF）适配到 Spring MVC 框架中。</li>
<li>Hibernate框架：Hibernate框架中的 <code>ConnectionProvider</code> 接口也是一个适配器模式的应用。不同的 <code>ConnectionProvider</code> 实现类可以将不同类型的数据源（如JDBC、JTA）适配到 Hibernate 框架中。</li>
<li>Log4j框架：Log4j框架中的 <code>Appender</code> 接口也是一个适配器模式的应用。不同的 <code>Appender</code> 实现类可以将不同类型的日志输出适配到 Log4j 框架中。</li>
<li>JUnit框架：JUnit框架中的 <code>Test</code> 接口也是一个适配器模式的应用。不同的 <code>Test</code> 实现类可以将不同类型的测试用例适配到 JUnit 框架中。</li>
<li>Java Swing框架：Java Swing框架中的 <code>JList</code> 组件也是一个适配器模式的应用。<code>JList</code> 组件可以使用适配器将不同类型的数据源（如数组、集合）适配到 <code>JList</code> 组件中。</li>
<li>Apache Commons框架：Apache Commons框架中的 <code>FileFilter</code> 接口也是一个适配器模式的应用。不同的 <code>FileFilter</code> 实现类可以将不同类型的文件过滤器适配到 Apache Commons 框架中。</li>
<li>Apache Shiro框架：Apache Shiro框架中的 <code>Realm</code> 接口也是一个适配器模式的应用。不同的 <code>Realm</code> 实现类可以将不同类型的身份验证和授权机制适配到 Apache Shiro 框架中。</li>
<li>Apache Struts框架：Apache Struts框架中的 <code>Action</code> 接口也是一个适配器模式的应用。不同的 <code>Action</code> 实现类可以将不同类型的请求处理适配到 Apache Struts 框架中。</li>
<li>Android框架：Android框架中的 <code>ArrayAdapter</code> 类也是一个适配器模式的应用。<code>ArrayAdapter</code> 类可以使用适配器将不同类型的数据源（如数组、集合）适配到 Android UI 组件中。</li>
<li>Spring Boot框架：Spring Boot框架中的 <code>CommandLineRunner</code> 接口也是一个适配器模式的应用。不同的 <code>CommandLineRunner</code> 实现类可以将不同类型的命令行参数适配到 Spring Boot 框架中。</li>
<li>Apache Camel框架：Apache Camel框架中的 <code>Component</code> 接口也是一个适配器模式的应用。不同的 <code>Component</code> 实现类可以将不同类型的消息传输协议（如HTTP、FTP等）适配到 Apache Camel 框架中。</li>
<li>Jersey框架：Jersey框架中的 <code>MessageBodyReader</code> 和 <code>MessageBodyWriter</code> 接口也是适配器模式的应用。这两个接口可以将不同类型的请求或响应消息适配到 Jersey 框架中。</li>
<li>Retrofit框架：Retrofit框架中的 <code>Converter</code> 接口也是一个适配器模式的应用。不同的 <code>Converter</code> 实现类可以将不同类型的响应消息转换为 Java 对象，并适配到 Retrofit 框架中。</li>
<li>Logback框架：Logback框架中的 <code>Appender</code> 接口也是适配器模式的应用。不同的 <code>Appender</code> 实现类可以将不同类型的日志输出适配到 Logback 框架中。</li>
<li>Apache Kafka框架：Apache Kafka框架中的 <code>Consumer</code> 和 <code>Producer</code> 接口也是适配器模式的应用。不同的 <code>Consumer</code> 和 <code>Producer</code> 实现类可以将不同类型的消息传输协议适配到 Apache Kafka 框架中。</li>
</ol>
<p>以下是 jdk 中使用适配器模式的例子：</p>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList(T...)">java.util.Arrays#asList()</a> 该方法将数组转换为List集合。由于数组和List集合的接口不兼容，所以该方法使用了适配器模式将数组转换为List集合。</li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-">java.util.Collections#list()</a> 该方法接受一个 <code>Enumeration</code> 对象作为参数，并将该 <code>Enumeration</code> 对象转换为一个 <code>List</code>。</li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-">java.util.Collections#enumeration()</a> 该方法接受一个 <code>Collection</code> 对象作为参数，并将该 <code>Collection</code> 对象转换为一个 <code>Enumeration</code> 对象。</li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-">javax.xml.bind.annotation.adapters.XMLAdapter</a> 该类是用于XML序列化和反序列化的适配器。它可以将Java对象转换为XML元素，并在反序列化时将XML元素转换回Java对象。</li>
<li>java.io.InputStreamReader和java.io.OutputStreamWriter类：这两个类是用于读写字符流的包装器类。它们使用适配器模式将字节流转换为字符流，以便读写字符数据。</li>
<li>javax.servlet.ServletRequestWrapper和javax.servlet.ServletResponseWrapper类：这两个类是用于HTTP请求和响应的包装器类。它们使用适配器模式将HTTP请求和响应转换为Servlet API中定义的接口，以便在Servlet中使用。</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-22｜微信读书笔记助手</title>
      <link>https://blog.chensoul.com/posts/2023/06/09/weekly_review_22/</link>
      <pubDate>Fri, 09 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/09/weekly_review_22/</guid>
      <description>前言 本篇是对 2023-05-29 到 2023-06-04 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 读书、健身、定投、帮朋友、陪家人，本周周报增加一</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-05-29</code> 到 <code>2023-06-04</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>读书、健身、定投、帮朋友、陪家人，本周周报增加一块内容：读书，记录每周读书的时间。</p>
<h2 id="微信读书笔记助手">微信读书笔记助手</h2>
<p>最近注销了微信阅读账号，清空了历史数据。本着宁缺毋滥的原则，书架重新添加了几本书。计划是重新使用微信阅读养成读书的习惯。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-03.png" alt="weekly-review-22-03"  />
</p>
<p>在chrome浏览器添加了一个插件 <a href="https://chrome.google.com/webstore/detail/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%8A%A9%E6%89%8B/cmlenojlebcodibpdhmklglnbaghpdcg">微信读书笔记助手</a> ，可以将读书笔记一键导出为 markdown 格式。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-02.png" alt="weekly-review-22-02" style="width:50%;" />
<p>导出的内容标注是一个标注一个段落，段落之间有一个换行。段落后面可以添加自己的思考（比如，用红色标注颜色）。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-07.png" alt="weekly-review-22-07"  />
</p>
<h2 id="读书">读书</h2>
<p>本周阅读统计（图片来自微信阅读 app 分享）：</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-01.png" alt="weekly-review-22-01" style="width:50%;" />
<h2 id="理财">理财</h2>
<p>这周总计支出 2528 元，明细如下：</p>
<ul>
<li>6月4日：138元</li>
<li>6月3日：1650元，医院看病1600</li>
<li>6月2日：61元</li>
<li>6月1日：0元</li>
<li>5月31日：108元</li>
<li>5月30日：625元，公司停车场费用600</li>
<li>5月29日：41元</li>
</ul>
<h2 id="健身">健身</h2>
<blockquote>
<p>我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2个省份 2个城市。更多跑步数据在我的 <a href="https://run.chensoul.com/">跑步</a> 主页。</p>
</blockquote>
<p>本周跑步 42.66 公里，最长跑步距离为 9.2 公里。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-04.png" alt="weekly-review-22-04"  />
</p>
<p>明细数据如下：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-05.png" alt="weekly-review-22-05"  />
</p>
<p>在朋友圈发了一个5月跑步500公里动态，一个高中同学建议我不要过度跑步，最好是跑步一天休息一天，以免伤了膝盖。受他影响，受他影响，6月1日没有跑步，6月3日和4日，带老爸去医院做检查，所以没有跑步。照此看来，6月连续跑步30天、累计200公里的目标铁定是完成不了，所以及时调整目标和计划，还是以长期主义的思路保持跑步的习惯，不求数量。</p>
<h2 id="工作">工作</h2>
<p>最近在学习的内容清单：</p>
<ul>
<li><a href="https://github.com/clxering/Effective-Java-3rd-edition-Chinese-English-bilingual/tree/dev">Effective Java（第 3 版）</a></li>
<li><a href="https://java-design-patterns.com/zh/">Java Design Patterns (中文)</a></li>
<li><a href="https://realpython.com/">Real Python</a></li>
</ul>
<p>本周完成四篇博客：</p>
<ul>
<li>
<p><a href="/posts/2023/06/02/java-design-patterns-visitor/">Java设计模式：Visitor</a></p>
</li>
<li>
<p><a href="/posts/2023/06/01/java-design-patterns-acyclic-visitor/">Java设计模式：Acyclic Visitor</a></p>
</li>
<li>
<p><a href="/posts/2023/06/01/what-is-pip/">[译]使用 Python 的 pip 管理项目的依赖关系</a></p>
</li>
<li>
<p><a href="/posts/2023/06/01/python-wheels/">[译]什么是 Python Wheels，你为什么要关心它？</a></p>
</li>
</ul>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-06.png" alt="weekly-review-22-06"  />
</p>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中。我写了一个 python 脚本从 memos读取最近一周的 memos 记录。</p>
<ul>
<li>📌<code>2023-05-31</code> 看到一个很适合新手入门「数据结构与算法」的开源书《Hello 算法》，通过动画图解结构化地讲解数据结构和算法知识，内容清晰易懂、学习曲线挺平滑，代码上支持 Java,C++, Python, Go, JS, TS, CSharp, Swift 一键运行看效果，比市面上卖的普通书好不少。 🤖 <a href="https://hello-algo.com">https://hello-algo.com</a> <code>#memos</code> <code>#skill</code></li>
<li>📌<code>2023-05-31</code> 今日重磅开源库推荐 - Plane  <a href="https://github.com/makeplane/plane">https://github.com/makeplane/plane</a>  Jira 的开源版平替，有很多人都讨厌 Jira，觉得它复杂难用。  Plane 完全开源，而且界面要简洁舒服易用很多。 部署方便快捷, 支持 Docker 部署。 还很贴心的支持从 Github 以及 Jira 直接导入。  想尝试新的项目管理工具的朋友可以尝试一下。<code>#memos</code> <code>#tool</code></li>
<li>📌<code>2023-05-31</code> 「Next.js 应用开发实践」 <a href="https://nextjs-in-action-cn.taonan.lu/">https://nextjs-in-action-cn.taonan.lu/</a>   <code>#memos</code> <code>#web</code></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Visitor</title>
      <link>https://blog.chensoul.com/posts/2023/06/02/java-design-patterns-visitor/</link>
      <pubDate>Fri, 02 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/02/java-design-patterns-visitor/</guid>
      <description>本文主要介绍 Visitor 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计模</description>
      <content:encoded><![CDATA[<p>本文主要介绍 Visitor 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="目的">目的</h2>
<p>表示要在对象结构的元素上执行的操作。访问者可让你定义新操作，而无需更改其所操作元素的类。</p>
<blockquote>
<p>访问者模式的主要目的是在不改变对象结构的前提下，对对象结构中的元素进行新的操作。它通过将操作从对象结构中分离出来，使得可以独立地添加、修改或删除对元素的操作，而不需要修改元素类或对象结构。</p>
<p>访问者模式的另一个目的是将对象结构与操作解耦。在访问者模式中，元素和操作分别由不同的类来实现，并且元素只暴露出接受访问者对象的接口，而不是暴露出具体的实现细节。这样可以避免在元素类中添加过多的行为，从而提高代码的可扩展性和可维护性。</p>
<p>最后，访问者模式还可以用于实现对复杂对象结构的遍历。通过访问者对象的递归调用，可以遍历整个对象结构，并对每个元素执行相应的操作。这种遍历方式可以方便地实现对复杂对象结构的分析和处理。</p>
</blockquote>
<h2 id="解释">解释</h2>
<p>真实世界例子</p>
<blockquote>
<p>考虑有一个带有军队单位的树形结构。指挥官下有两名中士，每名中士下有三名士兵。基于这个层级结构实现访问者模式，我们可以轻松创建与指挥官，中士，士兵或所有人员互动的新对象</p>
</blockquote>
<p>通俗的说</p>
<blockquote>
<p>访问者模式定义可以在数据结构的节点上执行的操作。</p>
</blockquote>
<p>维基百科说</p>
<blockquote>
<p>在面向对象的程序设计和软件工程中，访问者设计模式是一种将算法与操作对象的结构分离的方法。这种分离的实际结果是能够在不修改结构的情况下向现有对象结构添加新操作。</p>
</blockquote>
<p>访问者模式是一种行为型设计模式，它允许在不改变对象结构的情况下定义新的操作。该模式的核心思想是将操作从对象结构中分离出来，并在独立的访问者对象中进行实现。</p>
<p>访问者模式由以下几个关键元素组成：</p>
<ol>
<li>抽象访问者（Visitor）：定义可以访问不同类型元素的方法，该方法的参数类型为具体元素类型。</li>
<li>具体访问者（ConcreteVisitor）：实现抽象访问者中定义的方法，以实现对元素的不同操作。</li>
<li>抽象元素（Element）：定义接受访问者对象的方法。</li>
<li>具体元素（ConcreteElement）：实现抽象元素中定义的方法，以便可以接受访问者对象的访问。</li>
<li>对象结构（Object Structure）：包含一组具体元素，可以被访问者对象遍历。</li>
</ol>
<p><strong>程序示例</strong></p>
<p>使用上面的军队单元的例子，我们首先由单位和单位访问器类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Unit</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Unit</span><span class="o">[]</span> <span class="n">children</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Unit</span><span class="o">(</span><span class="n">Unit</span><span class="o">...</span> <span class="n">children</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">children</span> <span class="o">=</span> <span class="n">children</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">UnitVisitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">children</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">child</span> <span class="o">-&gt;</span> <span class="n">child</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UnitVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">visitSoldier</span><span class="o">(</span><span class="n">Soldier</span> <span class="n">soldier</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">visitSergeant</span><span class="o">(</span><span class="n">Sergeant</span> <span class="n">sergeant</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">visitCommander</span><span class="o">(</span><span class="n">Commander</span> <span class="n">commander</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后我们有具体的单元。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Commander</span> <span class="kd">extends</span> <span class="n">Unit</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Commander</span><span class="o">(</span><span class="n">Unit</span><span class="o">...</span> <span class="n">children</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">children</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">UnitVisitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">visitor</span><span class="o">.</span><span class="na">visitCommander</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;commander&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sergeant</span> <span class="kd">extends</span> <span class="n">Unit</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Sergeant</span><span class="o">(</span><span class="n">Unit</span><span class="o">...</span> <span class="n">children</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">children</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">UnitVisitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">visitor</span><span class="o">.</span><span class="na">visitSergeant</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;sergeant&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Soldier</span> <span class="kd">extends</span> <span class="n">Unit</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Soldier</span><span class="o">(</span><span class="n">Unit</span><span class="o">...</span> <span class="n">children</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">children</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">UnitVisitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">visitor</span><span class="o">.</span><span class="na">visitSoldier</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s">&#34;soldier&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后有一些具体的访问者。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommanderVisitor</span> <span class="kd">implements</span> <span class="n">UnitVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOGGER</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">CommanderVisitor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitSoldier</span><span class="o">(</span><span class="n">Soldier</span> <span class="n">soldier</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Do nothing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitSergeant</span><span class="o">(</span><span class="n">Sergeant</span> <span class="n">sergeant</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Do nothing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitCommander</span><span class="o">(</span><span class="n">Commander</span> <span class="n">commander</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Good to see you {}&#34;</span><span class="o">,</span> <span class="n">commander</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SergeantVisitor</span> <span class="kd">implements</span> <span class="n">UnitVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOGGER</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">SergeantVisitor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitSoldier</span><span class="o">(</span><span class="n">Soldier</span> <span class="n">soldier</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Do nothing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitSergeant</span><span class="o">(</span><span class="n">Sergeant</span> <span class="n">sergeant</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Hello {}&#34;</span><span class="o">,</span> <span class="n">sergeant</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitCommander</span><span class="o">(</span><span class="n">Commander</span> <span class="n">commander</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Do nothing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SoldierVisitor</span> <span class="kd">implements</span> <span class="n">UnitVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOGGER</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">SoldierVisitor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitSoldier</span><span class="o">(</span><span class="n">Soldier</span> <span class="n">soldier</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Greetings {}&#34;</span><span class="o">,</span> <span class="n">soldier</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitSergeant</span><span class="o">(</span><span class="n">Sergeant</span> <span class="n">sergeant</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Do nothing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitCommander</span><span class="o">(</span><span class="n">Commander</span> <span class="n">commander</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Do nothing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>最后，来看看实践中访问者模式的力量。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">commander</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="n">SoldierVisitor</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">commander</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="n">SergeantVisitor</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">commander</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="n">CommanderVisitor</span><span class="o">());</span>
</span></span></code></pre></div><p>程序输出:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Greetings soldier
</span></span><span class="line"><span class="cl">Greetings soldier
</span></span><span class="line"><span class="cl">Greetings soldier
</span></span><span class="line"><span class="cl">Greetings soldier
</span></span><span class="line"><span class="cl">Greetings soldier
</span></span><span class="line"><span class="cl">Greetings soldier
</span></span><span class="line"><span class="cl">Hello sergeant
</span></span><span class="line"><span class="cl">Hello sergeant
</span></span><span class="line"><span class="cl">Good to see you commander
</span></span></code></pre></div><h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/visitor_1-c6c51c6b.png" alt="alt text"  />
</p>
<h2 id="优缺点">优缺点</h2>
<p>访问者模式的优点：</p>
<ol>
<li>扩展性好：访问者模式可以通过增加新的访问者类来扩展对对象结构的操作，而无需修改对象结构或元素类。</li>
<li>分离关注点：访问者模式将对象结构和对对象结构的操作分离开来，使得对象结构和访问者类可以独立发展。这样可以提高代码的复用性和可维护性。</li>
<li>灵活性高：访问者模式可以支持不同的访问者对象对同一对象结构进行不同的遍历和操作，从而可以实现多种不同的处理方式。</li>
<li>符合开闭原则：访问者模式可以通过增加新的元素类和访问者类来扩展系统的功能，而不需要修改现有的代码。</li>
</ol>
<p>访问者模式的缺点：</p>
<ol>
<li>实现复杂：访问者模式的实现比较复杂，需要定义多个接口和类，并且需要对对象结构进行重构。</li>
<li>违反封装原则：访问者模式需要将访问者对象暴露给元素类，从而破坏了元素类的封装性。</li>
<li>可能会导致性能问题：访问者模式需要对整个对象结构进行遍历，可能会导致性能问题。</li>
<li>不易理解：访问者模式的实现比较抽象，可能会导致代码的可读性和可维护性降低。</li>
</ol>
<p>总之，访问者模式可以提高系统的扩展性和灵活性，但是需要注意实现的复杂性和性能问题，并且需要权衡封装性和可读性之间的关系。在实际开发中，应该根据具体的需求和场景来选择是否使用访问者模式。</p>
<h2 id="对比">对比</h2>
<p>访问者模式和 Acyclic Visitor 设计模式都是用于处理对象结构中的元素，但它们的实现方式和应用场景有所不同。</p>
<p>访问者模式通过在元素类中定义一个 accept 方法，接受一个访问者对象作为参数，从而将元素的处理委托给访问者对象来完成。访问者对象通常定义了多个 visit 方法，分别对应不同类型的元素，从而可以根据元素的类型来执行不同的操作。</p>
<p>Acyclic Visitor 设计模式是访问者模式的一种变种，它通过在访问者类中定义抽象访问者类和具体访问者类来实现。抽象访问者类定义了 visit 方法，但不包含任何具体的 visit 方法实现，而具体访问者类则实现了具体的 visit 方法。这样可以避免访问者对象对元素类的依赖，从而实现松耦合。</p>
<p>Acyclic Visitor 设计模式通常用于处理多继承的对象结构，因为多继承可能会导致访问者对象对元素类的依赖。在多继承的情况下，元素类可能同时继承了多个接口或父类，这样访问者对象就需要对每个接口或父类都定义一个 visit 方法，从而导致访问者对象对元素类的依赖性增加。</p>
<p>总之，访问者模式和 Acyclic Visitor 设计模式都是用于处理对象结构中的元素，但它们的实现方式和应用场景有所不同。访问者模式适用于处理单继承的对象结构，而 Acyclic Visitor 设计模式适用于处理多继承的对象结构。在实际应用中，应该根据具体的需求和场景来选择使用哪种模式。</p>
<h2 id="适用场景">适用场景</h2>
<p>访问者模式适用于以下情况：</p>
<ol>
<li>对象结构复杂，包含多种类型的元素，并且需要对这些元素进行不同的操作。</li>
<li>需要在不改变对象结构的前提下，增加、修改或删除对元素的操作。</li>
<li>对象结构中的元素类经常发生变化，而访问者类的变化较少。</li>
<li>需要对对象结构进行多种不同的遍历方式，并且每种遍历方式需要执行不同的操作。</li>
<li>对象结构中的元素类不希望暴露出太多的行为，而是希望将行为封装在访问者类中。</li>
</ol>
<p>需要注意的是，访问者模式的实现比较复杂，因此只有在确实需要对对象结构进行复杂操作时才应该考虑使用该模式。如果仅需要对对象结构进行简单的遍历或操作，则可以考虑使用其他模式，如迭代器模式或组合模式。</p>
<p>以下是一些访问者模式在实际开发中的应用场景：</p>
<ol>
<li>编译器和解释器：访问者模式可以用于实现编译器和解释器。编译器和解释器都需要对抽象语法树（AST）进行遍历，并根据不同的节点类型执行不同的操作。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对AST的遍历和处理。</li>
<li>数据库查询：访问者模式可以用于实现数据库查询。数据库查询需要对查询语句进行解析，并将查询转换为对数据库中的表进行操作的语句。访问者模式可以将查询解析和转换操作封装在不同的访问者类中，从而实现对查询语句的处理。</li>
<li>GUI框架：访问者模式可以用于实现GUI框架。GUI框架需要对各种GUI组件进行遍历，并根据不同的组件类型执行不同的操作。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对GUI组件的遍历和处理。</li>
<li>订单处理系统：访问者模式可以用于实现订单处理系统。订单处理系统需要对订单中的各种项进行遍历，并根据不同的项类型执行不同的操作。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对订单的遍历和处理。</li>
<li>机器学习：访问者模式可以用于实现机器学习算法。机器学习算法需要对数据集进行遍历，并根据不同的数据类型执行不同的操作。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对数据集的遍历和处理。</li>
<li>虚拟机：访问者模式可以用于实现虚拟机。虚拟机需要对字节码或中间代码进行遍历，并根据不同的指令类型执行不同的操作。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对字节码或中间代码的遍历和处理。</li>
<li>多媒体编解码器：访问者模式可以用于实现多媒体编解码器。多媒体编解码器需要对音视频数据进行遍历，并根据不同的数据类型执行不同的编解码操作。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对音视频数据的遍历和处理。</li>
<li>图像处理软件：访问者模式可以用于实现图像处理软件。图像处理软件需要对图像进行遍历，并根据不同的像素类型执行不同的处理操作。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对图像的遍历和处理。</li>
<li>网络协议解析器：访问者模式可以用于实现网络协议解析器。网络协议解析器需要对网络数据包进行遍历，并根据不同的协议类型执行不同的解析操作。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对网络数据包的遍历和处理。</li>
<li>CAD软件：访问者模式可以用于实现CAD软件。CAD软件需要对绘图元素进行遍历，并根据不同的元素类型执行不同的操作，比如绘制线条、填充颜色等。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对绘图元素的遍历和处理。</li>
<li>代码生成器：访问者模式可以用于实现代码生成器。代码生成器需要对抽象语法树（AST）进行遍历，并根据不同的节点类型生成不同的代码。访问者模式可以将代码生成操作封装在不同的访问者类中，从而实现对AST的遍历和代码生成。</li>
<li>环境监测系统：访问者模式可以用于实现环境监测系统。环境监测系统需要对多个传感器采集的数据进行遍历，并根据不同的传感器类型执行不同的处理操作，比如温度校准、数据存储等。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对传感器数据的遍历和处理。</li>
<li>数字信号处理系统：访问者模式可以用于实现数字信号处理系统。数字信号处理系统需要对数字信号进行遍历，并根据不同的信号类型执行不同的处理操作，比如滤波、降噪等。访问者模式可以将这些操作封装在不同的访问者类中，从而实现对数字信号的遍历和处理。</li>
</ol>
<p>访问者模式在 JDK 中有多个应用，以下是其中一些例子：</p>
<ol>
<li>Java 中的 java.nio.file.FileVisitor 接口和 java.nio.file.Files#walkFileTree 方法，其中的 FileVisitor 接口定义了多个 visit 方法，用于访问文件树中的各个节点对象。Files#walkFileTree 方法可以通过访问者模式来实现遍历文件树并对每个文件进行处理。</li>
<li>javax.lang.model.element.AnnotationValueVisitor 接口，用于访问注解值的各种类型，例如基本类型、字符串、枚举类型、数组类型和嵌套注解类型等。该接口中定义了多个 visit 方法，用于处理不同类型的注解值。</li>
<li>javax.lang.model.element.ElementVisitor 接口，用于访问程序元素的各种类型，例如包、类、方法、字段、注解和注解值等。该接口中定义了多个 visit 方法，用于处理不同类型的程序元素。</li>
<li>javax.lang.model.type.TypeVisitor 接口，用于访问类型的各种类型，例如基本类型、对象类型、数组类型和泛型类型等。该接口中定义了多个 visit 方法，用于处理不同类型的类型。</li>
</ol>
<p>总之，访问者模式可以适用于各种不同的领域和场景，只要需要对对象结构进行遍历和处理，都可以考虑使用该模式。</p>
<h2 id="举例">举例</h2>
<h3 id="计算图形面积和周长">计算图形面积和周长</h3>
<p>假设我们有一个图形类 Shape，它有两个子类 Circle 和 Rectangle，我们需要对它们进行面积和周长的计算。我们可以使用访问者模式来实现这个功能。</p>
<p>我们首先定义一个抽象访问者类 ShapeVisitor，它包含了两个抽象方法 visitCircle 和 visitRectangle，分别用于访问 Circle 和 Rectangle 对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 抽象访问者类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">interface</span> <span class="nc">ShapeVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">visitCircle</span><span class="o">(</span><span class="n">Circle</span> <span class="n">circle</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">visitRectangle</span><span class="o">(</span><span class="n">Rectangle</span> <span class="n">rectangle</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后我们定义一个抽象的图形类 Shape，它包含一个 accept 方法，用于接受一个访问者对象作为参数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 抽象图形类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ShapeVisitor</span> <span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>接着我们定义两个具体的图形类 Circle 和 Rectangle，它们实现了 accept 方法，并在其中调用访问者对象的 visitCircle 和 visitRectangle 方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 具体图形类 Circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">Circle</span> <span class="kd">extends</span> <span class="n">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">radius</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Circle</span><span class="o">(</span><span class="kt">double</span> <span class="n">radius</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">radius</span> <span class="o">=</span> <span class="n">radius</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="nf">getRadius</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">radius</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ShapeVisitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">visitor</span><span class="o">.</span><span class="na">visitCircle</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 具体图形类 Rectangle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">Rectangle</span> <span class="kd">extends</span> <span class="n">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">width</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">height</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Rectangle</span><span class="o">(</span><span class="kt">double</span> <span class="n">width</span><span class="o">,</span> <span class="kt">double</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">width</span> <span class="o">=</span> <span class="n">width</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="n">height</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="nf">getWidth</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">width</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="nf">getHeight</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">height</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ShapeVisitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">visitor</span><span class="o">.</span><span class="na">visitRectangle</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>最后我们定义一个具体的访问者类 ShapeCalculator，它实现了 ShapeVisitor 接口，并在其中实现了 visitCircle 和 visitRectangle 方法，用于计算图形的面积和周长。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 具体访问者类 ShapeCalculator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">ShapeCalculator</span> <span class="kd">implements</span> <span class="n">ShapeVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">area</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">perimeter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitCircle</span><span class="o">(</span><span class="n">Circle</span> <span class="n">circle</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">double</span> <span class="n">radius</span> <span class="o">=</span> <span class="n">circle</span><span class="o">.</span><span class="na">getRadius</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">area</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">PI</span> <span class="o">*</span> <span class="n">radius</span> <span class="o">*</span> <span class="n">radius</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">perimeter</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">Math</span><span class="o">.</span><span class="na">PI</span> <span class="o">*</span> <span class="n">radius</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitRectangle</span><span class="o">(</span><span class="n">Rectangle</span> <span class="n">rectangle</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">double</span> <span class="n">width</span> <span class="o">=</span> <span class="n">rectangle</span><span class="o">.</span><span class="na">getWidth</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">double</span> <span class="n">height</span> <span class="o">=</span> <span class="n">rectangle</span><span class="o">.</span><span class="na">getHeight</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">area</span> <span class="o">=</span> <span class="n">width</span> <span class="o">*</span> <span class="n">height</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">perimeter</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="o">(</span><span class="n">width</span> <span class="o">+</span> <span class="n">height</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="nf">getArea</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">area</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="nf">getPerimeter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">perimeter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在我们可以使用访问者模式来计算图形的面积和周长了。我们先创建一个 ShapeCalculator 对象，然后分别创建一个 Circle 对象和一个 Rectangle 对象，并调用它们的 accept 方法，将 ShapeCalculator 作为参数传入。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ShapeCalculator</span> <span class="n">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShapeCalculator</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Circle</span> <span class="n">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Circle</span><span class="o">(</span><span class="mf">5.0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">circle</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">calculator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Circle area: &#34;</span> <span class="o">+</span> <span class="n">calculator</span><span class="o">.</span><span class="na">getArea</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Circle perimeter: &#34;</span> <span class="o">+</span> <span class="n">calculator</span><span class="o">.</span><span class="na">getPerimeter</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Rectangle</span> <span class="n">rectangle</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rectangle</span><span class="o">(</span><span class="mf">3.0</span><span class="o">,</span> <span class="mf">4.0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">rectangle</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">calculator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Rectangle area: &#34;</span> <span class="o">+</span> <span class="n">calculator</span><span class="o">.</span><span class="na">getArea</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Rectangle perimeter: &#34;</span> <span class="o">+</span> <span class="n">calculator</span><span class="o">.</span><span class="na">getPerimeter</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>输出结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Circle area: 78.53981633974483
</span></span><span class="line"><span class="cl">Circle perimeter: 31.41592653589793
</span></span><span class="line"><span class="cl">Rectangle area: 12.0
</span></span><span class="line"><span class="cl">Rectangle perimeter: 14.0
</span></span></code></pre></div><p>这个例子展示了如何使用访问者模式来计算图形的面积和周长，我们将计算的逻辑封装在了 ShapeCalculator 类中，并通过访问者模式将它们应用于不同的图形对象。这样可以实现代码的重用和可维护性。</p>
<h3 id="实现代码生成器">实现代码生成器</h3>
<p>访问者模式可以用于实现代码生成器，下面是一个简单的例子：</p>
<p>假设我们需要根据一个语法树生成相应的代码，语法树中包含了不同类型的节点，每个节点代表一个语法结构。我们可以使用访问者模式来实现这个功能，将语法树中的每个节点都作为一个元素，访问者对象则负责生成相应的代码。</p>
<p>我们首先定义一个抽象访问者类 CodeGenerator，它包含了多个抽象方法，每个方法对应一个节点类型，用于生成相应的代码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 抽象访问者类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">interface</span> <span class="nc">CodeGenerator</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">generate</span><span class="o">(</span><span class="n">ProgramNode</span> <span class="n">node</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">generate</span><span class="o">(</span><span class="n">StatementNode</span> <span class="n">node</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">generate</span><span class="o">(</span><span class="n">ExpressionNode</span> <span class="n">node</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>然后我们定义一个抽象的节点类 Node，它包含一个 accept 方法，用于接受一个访问者对象作为参数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 抽象节点类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">CodeGenerator</span> <span class="n">generator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>接着我们定义多个具体的节点类 ProgramNode、StatementNode 和 ExpressionNode，它们实现了 accept 方法，并在其中调用访问者对象的相应方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 具体节点类 ProgramNode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">ProgramNode</span> <span class="kd">extends</span> <span class="n">Node</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">CodeGenerator</span> <span class="n">generator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">generator</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Node</span> <span class="n">child</span> <span class="o">:</span> <span class="n">children</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">child</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">generator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 具体节点类 StatementNode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">StatementNode</span> <span class="kd">extends</span> <span class="n">Node</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">statement</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StatementNode</span><span class="o">(</span><span class="n">String</span> <span class="n">statement</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">statement</span> <span class="o">=</span> <span class="n">statement</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">CodeGenerator</span> <span class="n">generator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">generator</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="nf">getStatement</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">statement</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 具体节点类 ExpressionNode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">ExpressionNode</span> <span class="kd">extends</span> <span class="n">Node</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">expression</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ExpressionNode</span><span class="o">(</span><span class="n">String</span> <span class="n">expression</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">expression</span> <span class="o">=</span> <span class="n">expression</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">CodeGenerator</span> <span class="n">generator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">generator</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="nf">getExpression</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">expression</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>最后我们定义一个具体的访问者类 JavaCodeGenerator，它实现了 CodeGenerator 接口，并在其中实现了各个节点类型的生成方法，用于生成 Java 代码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 具体访问者类 JavaCodeGenerator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">JavaCodeGenerator</span> <span class="kd">implements</span> <span class="n">CodeGenerator</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">StringBuilder</span> <span class="n">codeBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">generate</span><span class="o">(</span><span class="n">ProgramNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">codeBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;public class Main {\n&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">generate</span><span class="o">(</span><span class="n">StatementNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">codeBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;    &#34;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">getStatement</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;;\n&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">generate</span><span class="o">(</span><span class="n">ExpressionNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">codeBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;    &#34;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">getExpression</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;;\n&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="nf">getCode</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">codeBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;}\n&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">codeBuilder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在我们可以使用访问者模式来生成 Java 代码了。我们先创建一个 ProgramNode 对象，并向其中添加多个 StatementNode 和 ExpressionNode 对象，然后创建一个 JavaCodeGenerator 对象，调用 ProgramNode 的 accept 方法，并将 JavaCodeGenerator 作为参数传入。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ProgramNode</span> <span class="n">programNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProgramNode</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">programNode</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">StatementNode</span><span class="o">(</span><span class="s">&#34;int a = 1&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">programNode</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ExpressionNode</span><span class="o">(</span><span class="s">&#34;a++&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">programNode</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">StatementNode</span><span class="o">(</span><span class="s">&#34;System.out.println(a)&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">JavaCodeGenerator</span> <span class="n">codeGenerator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JavaCodeGenerator</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">programNode</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">codeGenerator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">codeGenerator</span><span class="o">.</span><span class="na">getCode</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>输出结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个例子展示了如何使用访问者模式来生成 Java 代码，我们将生成代码的逻辑封装在了 JavaCodeGenerator 类中，并通过访问者模式将它们应用于语法树中的每个节点。这样可以实现代码的快速生成和可维护性。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Acyclic Visitor</title>
      <link>https://blog.chensoul.com/posts/2023/06/01/java-design-patterns-acyclic-visitor/</link>
      <pubDate>Thu, 01 Jun 2023 09:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/01/java-design-patterns-acyclic-visitor/</guid>
      <description>本文主要介绍 Acyclic Visitor 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计</description>
      <content:encoded><![CDATA[<p>本文主要介绍 Acyclic Visitor 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="目的">目的</h2>
<p>允许将新功能添加到现有的类层次结构中，而不会影响这些层次结构，也不会有四人帮访客模式中那样循环依赖的问题。</p>
<blockquote>
<p>在 Acyclic Visitor 模式中，我们通过引入一个可选操作接口来实现这一点。当数据结构类需要访问访问者类的某些操作时，它可以通过调用 visit 方法来访问可选操作接口中定义的操作，而不需要直接依赖于访问者类中的成员变量。</p>
</blockquote>
<h2 id="解释">解释</h2>
<p>真实世界例子</p>
<blockquote>
<p>我们有一个调制解调器类的层次结构。 需要使用基于过滤条件的外部算法（是Unix或DOS兼容的调制解调器）来访问此层次结构中的调制解调器。</p>
</blockquote>
<p><strong>程序示例</strong></p>
<p>这是调制解调器的层次结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Modem</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ModemVisitor</span> <span class="n">modemVisitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hayes</span> <span class="kd">implements</span> <span class="n">Modem</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ModemVisitor</span> <span class="n">modemVisitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">modemVisitor</span> <span class="k">instanceof</span> <span class="n">HayesVisitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="o">((</span><span class="n">HayesVisitor</span><span class="o">)</span> <span class="n">modemVisitor</span><span class="o">).</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Only HayesVisitor is allowed to visit Hayes modem&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Zoom</span> <span class="kd">implements</span> <span class="n">Modem</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">ModemVisitor</span> <span class="n">modemVisitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">modemVisitor</span> <span class="k">instanceof</span> <span class="n">ZoomVisitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="o">((</span><span class="n">ZoomVisitor</span><span class="o">)</span> <span class="n">modemVisitor</span><span class="o">).</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>下面我们介绍<code>调制解调器访问者</code>类结构。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ModemVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HayesVisitor</span> <span class="kd">extends</span> <span class="n">ModemVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Hayes</span> <span class="n">hayes</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ZoomVisitor</span> <span class="kd">extends</span> <span class="n">ModemVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Zoom</span> <span class="n">zoom</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AllModemVisitor</span> <span class="kd">extends</span> <span class="n">ZoomVisitor</span><span class="o">,</span> <span class="n">HayesVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConfigureForDosVisitor</span> <span class="kd">implements</span> <span class="n">AllModemVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Hayes</span> <span class="n">hayes</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hayes</span> <span class="o">+</span> <span class="s">&#34; used with Dos configurator.&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Zoom</span> <span class="n">zoom</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zoom</span> <span class="o">+</span> <span class="s">&#34; used with Dos configurator.&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConfigureForUnixVisitor</span> <span class="kd">implements</span> <span class="n">ZoomVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">Zoom</span> <span class="n">zoom</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zoom</span> <span class="o">+</span> <span class="s">&#34; used with Unix configurator.&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>最后，这里是访问者的实践。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Modem</span><span class="o">[]</span> <span class="n">modems</span> <span class="o">=</span> <span class="o">{</span> <span class="k">new</span> <span class="n">Hayes</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Zoom</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Hayes</span><span class="o">()</span> <span class="o">};</span>
</span></span><span class="line"><span class="cl">        <span class="n">ModemVisitor</span> <span class="n">dosVisitor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConfigureForDosVisitor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ModemVisitor</span> <span class="n">unixVisitor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConfigureForUnixVisitor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Modem</span> <span class="n">modem</span> <span class="o">:</span> <span class="n">modems</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">modem</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">dosVisitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">modem</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">unixVisitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/acyclic-visitor-74cfcfba.png" alt="alt text"  />
</p>
<p>以下是对 Acyclic Visitor 模式的解释：</p>
<ol>
<li>Element（元素）：在上面的代码中，Modem 接口表示一个元素，定义了一个 accept 方法，用于接受访问者的访问。</li>
<li>ConcreteElement（具体元素）：在上面的代码中，Hayes 类和 Zoom 类表示具体的元素，实现了 Modem 接口中定义的 accept 方法。</li>
<li>Visitor（访问者）：在上面的代码中，ModemVisitor 接口表示一个访问者，定义了一个空的接口，用于扩展具体的访问者接口。</li>
<li>ConcreteVisitor（具体访问者）：在上面的代码中，ConfigureForDosVisitor 和 ConfigureForUnixVisitor 类表示具体的访问者，实现了 HayesVisitor 和 ZoomVisitor 接口中定义的 visit 方法，用于访问具体的元素。</li>
<li>OptionalOperations（可选操作）：在上面的代码中，AllModemVisitor 接口表示一个可选操作接口，它继承了所有具体访问者接口，用于扩展访问者类的操作。在 ConfigureForDosVisitor 类中，它实现了 AllModemVisitor 接口，同时实现了 visit 方法，用于访问所有具体的元素。在 ConfigureForUnixVisitor 类中，它实现了 ZoomVisitor 接口，同时实现了 visit 方法，用于访问 Zoom 元素。</li>
</ol>
<p>在 Acyclic Visitor 模式中，元素和访问者之间是相互独立的，它们之间没有任何依赖关系。在访问元素时，访问者通过 accept 方法访问元素，并根据元素的类型自动调用对应的 visit 方法。由于访问者并没有直接依赖于元素，而是通过访问者接口和可选操作接口来访问元素，因此可以避免循环依赖的问题。同时，由于可选操作是一个接口，访问者可以根据需要实现其中的部分操作，从而动态地添加新的操作，而不会影响现有的类层次结构。这样，Acyclic Visitor 模式可以使代码更加灵活和可扩展，同时也提高了代码的可维护性和可扩展性。</p>
<h2 id="适用性">适用性</h2>
<p>以下情况可以使用此模式：</p>
<ul>
<li>需要在现有层次结构中添加新功能而无需更改或影响该层次结构时。</li>
<li>当某些功能在层次结构上运行，但不属于层次结构本身时。 例如 ConfigureForDOS / ConfigureForUnix / ConfigureForX问题。</li>
<li>当您需要根据对象的类型对对象执行非常不同的操作时。</li>
<li>当访问的类层次结构将经常使用元素类的新派生进行扩展时。在 Acyclic Visitor 模式中，新的元素类可以通过继承现有的 Element 类来实现，而不需要修改访问者类的代码。这样，可以避免因添加新元素而导致的访问者类的修改和重新编译。</li>
<li>当重新编译，重新链接，重新测试或重新分发派生元素非常昂贵时。</li>
</ul>
<h2 id="对比">对比</h2>
<p>Acyclic Visitor 模式是 Visitor 模式的一个变体，它解决了 Visitor 模式可能导致的循环依赖问题。下面是 Acyclic Visitor 模式和 Visitor 模式的一些对比：</p>
<ol>
<li>目的不同</li>
</ol>
<p>Visitor 模式的主要目的是将数据结构和操作分离开来，并将操作封装在访问者类中。这使得我们可以在不修改数据结构代码的情况下添加新的操作。而 Acyclic Visitor 模式则更注重解决 Visitor 模式中可能出现的循环依赖问题。</p>
<ol start="2">
<li>实现方式不同</li>
</ol>
<p>在 Visitor 模式中，访问者类通常会维护一个数据结构类的引用，以便在 visit 方法中访问数据结构类的成员。这可能会导致循环依赖问题。而在 Acyclic Visitor 模式中，我们引入了一个额外的接口，即可选操作接口，它包含数据结构类可能需要调用的方法。这样，数据结构类就可以通过调用 visit 方法来访问访问者类中的部分操作，而不必直接依赖于访问者类中的成员，从而避免了循环依赖问题。</p>
<ol start="3">
<li>可扩展性不同</li>
</ol>
<p>由于 Visitor 模式中数据结构类和访问者类之间存在强耦合关系，因此添加新的数据结构类或访问者类可能会导致代码修改。而 Acyclic Visitor 模式通过引入可选操作接口，使得数据结构类和访问者类之间的耦合关系更加灵活，从而提高了代码的可扩展性。</p>
<ol start="4">
<li>实现复杂度不同</li>
</ol>
<p>Acyclic Visitor 模式相比 Visitor 模式，增加了一个可选操作接口，因此实现上可能会更加复杂。但是，这也使得 Acyclic Visitor 模式更加灵活和可扩展。</p>
<h2 id="优缺点">优缺点</h2>
<p>下面是 Acyclic Visitor 模式的优点和缺点：</p>
<p>优点：</p>
<ol>
<li>解决了 Visitor 模式可能出现的循环依赖问题，使得代码更加健壮和可维护。</li>
<li>可选操作接口使得访问者类的扩展更加灵活，可以根据具体需求选择实现不同的操作。</li>
<li>将<strong>数据结构和操作分离开来</strong>，提高了代码的可扩展性和可维护性。</li>
<li>在需要添加新的数据结构类或访问者类时，可以避免对现有代码进行修改，符合开闭原则。</li>
</ol>
<p>缺点：</p>
<ol>
<li>相对于 Visitor 模式，Acyclic Visitor 模式的实现会更加复杂，因为需要引入一个可选操作接口。</li>
<li>由于 Acyclic Visitor 模式在实现上更加复杂，可能会降低代码的可读性和可理解性。</li>
<li>如果数据结构类需要访问访问者类的成员，Acyclic Visitor 模式并不能很好地解决这个问题，需要考虑其他设计模式的使用。</li>
</ol>
<h2 id="使用场景">使用场景</h2>
<p>Acyclic Visitor 模式通常用于以下场景：</p>
<ol>
<li>类层次结构中存在多种类型的对象，并且需要对它们进行不同的操作，但不想在类层次结构中添加新的方法或修改现有方法。</li>
<li>不同的操作需要访问对象的不同部分，而不是整个对象本身。</li>
<li>类层次结构之间存在依赖关系，但不希望引入循环依赖问题。</li>
<li>需要在类层次结构中添加新的操作，而不影响现有的类。</li>
<li>需要支持多个访问者，且访问者之间可能存在依赖关系。</li>
<li>需要避免在访问者中使用 instanceof 运算符来检查元素的类型。</li>
</ol>
<p>具体的使用场景如下：</p>
<ol>
<li>解析器（Parser）：在解析器中，可以使用 Acyclic Visitor 模式来实现不同类型的节点的访问。例如，可以使用 Acyclic Visitor 模式来实现语法树的遍历，以实现语法分析、类型检查等功能。</li>
<li>编译器（Compiler）：在编译器中，可以使用 Acyclic Visitor 模式来实现不同阶段的分析。例如，可以使用 Acyclic Visitor 模式来实现词法分析器、语法分析器、类型检查器、代码生成器等。</li>
<li>图形用户界面（GUI）：在图形用户界面中，可以使用 Acyclic Visitor 模式来实现不同类型的控件的访问。例如，可以使用 Acyclic Visitor 模式来实现窗口、按钮、菜单等控件的事件处理逻辑。</li>
<li>数据库访问（Database Access）：在数据库访问中，可以使用 Acyclic Visitor 模式来实现不同类型的对象的访问。例如，可以使用 Acyclic Visitor 模式来实现对关系型数据库中的表、视图、存储过程、触发器等对象的访问。</li>
<li>游戏开发（Game Development）：在游戏开发中，可以使用 Acyclic Visitor 模式来实现不同类型的游戏对象的访问。例如，可以使用 Acyclic Visitor 模式来实现对角色、道具、怪物等游戏对象的访问。</li>
<li>打印机驱动程序（Printer Driver）：在打印机驱动程序中，可以使用 Acyclic Visitor 模式来实现不同类型的打印作业的访问。例如，可以使用 Acyclic Visitor 模式来实现对文本、图片、表格等打印作业的访问。</li>
<li>音频处理（Audio Processing）：在音频处理中，可以使用 Acyclic Visitor 模式来实现不同类型的音频文件的访问。例如，可以使用 Acyclic Visitor 模式来实现对 MP3、WAV、FLAC 等音频文件的访问。</li>
<li>网络协议（Network Protocol）：在网络协议中，可以使用 Acyclic Visitor 模式来实现不同类型的协议数据包的访问。例如，可以使用 Acyclic Visitor 模式来实现对 TCP、UDP、HTTP、SMTP 等协议数据包的访问。</li>
<li>机器人控制（Robot Control）：在机器人控制中，可以使用 Acyclic Visitor 模式来实现不同类型的机器人动作的访问。例如，可以使用 Acyclic Visitor 模式来实现对移动、转向、抓取、放置等机器人动作的访问。</li>
<li>系统监控（System Monitoring）：在系统监控中，可以使用 Acyclic Visitor 模式来实现不同类型的监测数据的访问。例如，可以使用 Acyclic Visitor 模式来实现对 CPU 占用率、内存使用量、网络流量等监测数据的访问。</li>
<li>机器学习（Machine Learning）：在机器学习中，可以使用 Acyclic Visitor 模式来实现不同类型的训练数据的访问。例如，可以使用 Acyclic Visitor 模式来实现对图像、声音、文本等训练数据的访问。</li>
<li>金融交易（Financial Trading）：在金融交易中，可以使用 Acyclic Visitor 模式来实现不同类型的交易数据的访问。例如，可以使用 Acyclic Visitor 模式来实现对股票、期货、外汇等交易数据的访问。</li>
<li>电子商务（E-commerce）：在电子商务中，可以使用 Acyclic Visitor 模式来实现不同类型的商品数据的访问。例如，可以使用 Acyclic Visitor模式来实现对产品、订单、客户等商品数据的访问。</li>
<li>硬件控制（Hardware Control）：在硬件控制中，可以使用 Acyclic Visitor 模式来实现不同类型的硬件设备的访问。例如，可以使用 Acyclic Visitor 模式来实现对传感器、电机、执行器等硬件设备的访问。</li>
</ol>
<p>一个更具体的例子是使用 Acyclic Visitor 模式来实现图像处理功能。假设我们有一个图像处理程序，它可以处理多种类型的图像，如 JPEG、PNG、BMP 等。我们需要为该程序添加一个新的功能，即将图像转换为黑白图像。</p>
<p>为实现这一功能，我们可以使用 Acyclic Visitor 模式来设计图像处理类层次结构。类层次结构包括多种类型的图像，如 JPEGImage、PNGImage、BMPImage 等。对于每种类型的图像，我们定义一个相应的图像处理器类，如 JPEGImageHandler、PNGImageHandler、BMPImageHandler 等。每个图像处理器类都实现一个 Visitor 接口的子接口，如 JPEGImageVisitor、PNGImageVisitor、BMPImageVisitor，该子接口定义了一些 visit 方法，用于处理图像中的像素数据。</p>
<p>定义 Visitor 接口及其子接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">JPEGImageVisitor</span> <span class="kd">extends</span> <span class="n">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">JPEGImage</span> <span class="n">image</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">PNGImageVisitor</span> <span class="kd">extends</span> <span class="n">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">PNGImage</span> <span class="n">image</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BMPImageVisitor</span> <span class="kd">extends</span> <span class="n">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">BMPImage</span> <span class="n">image</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>定义图像类及其子类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Image</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JPEGImage</span> <span class="kd">implements</span> <span class="n">Image</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">JPEGImage</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">visitor</span> <span class="k">instanceof</span> <span class="n">JPEGImageVisitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="o">((</span><span class="n">JPEGImageVisitor</span><span class="o">)</span> <span class="n">visitor</span><span class="o">).</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PNGImage</span> <span class="kd">implements</span> <span class="n">Image</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">PNGImage</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">visitor</span> <span class="k">instanceof</span> <span class="n">PNGImageVisitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="o">((</span><span class="n">PNGImageVisitor</span><span class="o">)</span> <span class="n">visitor</span><span class="o">).</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BMPImage</span> <span class="kd">implements</span> <span class="n">Image</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">BMPImage</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">byte</span><span class="o">[]</span> <span class="nf">getData</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">visitor</span> <span class="k">instanceof</span> <span class="n">BMPImageVisitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="o">((</span><span class="n">BMPImageVisitor</span><span class="o">)</span> <span class="n">visitor</span><span class="o">).</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>  
</span></span></code></pre></div><p>定义黑白图像处理器类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BlackWhiteImageProcessor</span> <span class="kd">implements</span> <span class="n">JPEGImageVisitor</span><span class="o">,</span> <span class="n">PNGImageVisitor</span><span class="o">,</span><span class="n">BMPImageVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">JPEGImage</span> <span class="n">image</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 将 JPEG 图像转换为黑白图像
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// 处理像素数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">PNGImage</span> <span class="n">image</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 将 PNG 图像转换为黑白图像
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// 处理像素数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">BMPImage</span> <span class="n">image</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// 将 BMP 图像转换为黑白图像
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// 处理像素数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="na">getData</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>  
</span></span></code></pre></div><p>最后，我们可以通过以下方式使用 Acyclic Visitor 模式来实现图像处理功能：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Image</span><span class="o">&gt;</span> <span class="n">images</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">images</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">JPEGImage</span><span class="o">(</span><span class="n">jpegData</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">images</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">PNGImage</span><span class="o">(</span><span class="n">pngData</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">images</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">BMPImage</span><span class="o">(</span><span class="n">bmpData</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">BlackWhiteImageProcessor</span> <span class="n">processor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BlackWhiteImageProcessor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Image</span> <span class="n">image</span> <span class="o">:</span> <span class="n">images</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">image</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">processor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，Acyclic Visitor 模式使我们能够实现对多种类型的图像进行不同的处理，同时保持代码的可扩展性和可维护性。我们可以轻松地添加新的图像处理器类，如 SepiaImageProcessor、BlurImageProcessor 、RotateImageProcessor 等，而无需修改图像类层次结构的代码。同时，我们可以避免在图像类层次结构中添加处理方法，而是将处理逻辑封装在访问者类中，从而提高代码的可扩展性和可维护性。</p>
<p>下面我给出一个简单的示例代码来演示如何使用 Acyclic Visitor 模式来实现对 CPU 占用率、内存使用量、网络流量等监测数据的访问。</p>
<p>首先，我们定义一个 Visitor 接口及其子接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CPUUsageVisitor</span> <span class="kd">extends</span> <span class="n">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">CPUUsage</span> <span class="n">cpuUsage</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemoryUsageVisitor</span> <span class="kd">extends</span> <span class="n">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">MemoryUsage</span> <span class="n">memoryUsage</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">NetworkTrafficVisitor</span> <span class="kd">extends</span> <span class="n">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">NetworkTraffic</span> <span class="n">networkTraffic</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后，我们定义三个监测数据类：CPUUsage、MemoryUsage 和 NetworkTraffic。这些类实现了 Visitor 接口，并且定义了一个 accept 方法，该方法接受一个 Visitor 对象，并调用 Visitor 对象的 visit 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Usages</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CPUUsage</span> <span class="kd">implements</span> <span class="n">Usages</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">usage</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">CPUUsage</span><span class="o">(</span><span class="kt">double</span> <span class="n">usage</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">usage</span> <span class="o">=</span> <span class="n">usage</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getUsage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">usage</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">visitor</span> <span class="k">instanceof</span> <span class="n">CPUUsageVisitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="o">((</span><span class="n">CPUUsageVisitor</span><span class="o">)</span> <span class="n">visitor</span><span class="o">).</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryUsage</span> <span class="kd">implements</span> <span class="n">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">used</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">total</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MemoryUsage</span><span class="o">(</span><span class="kt">long</span> <span class="n">used</span><span class="o">,</span> <span class="kt">long</span> <span class="n">total</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">used</span> <span class="o">=</span> <span class="n">used</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">total</span> <span class="o">=</span> <span class="n">total</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getUsed</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">used</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getTotal</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">total</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">visitor</span> <span class="k">instanceof</span> <span class="n">MemoryUsageVisitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="o">((</span><span class="n">MemoryUsageVisitor</span><span class="o">)</span> <span class="n">visitor</span><span class="o">).</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NetworkTraffic</span> <span class="kd">implements</span> <span class="n">Visitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">sent</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">long</span> <span class="n">received</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">NetworkTraffic</span><span class="o">(</span><span class="kt">long</span> <span class="n">sent</span><span class="o">,</span> <span class="kt">long</span> <span class="n">received</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">sent</span> <span class="o">=</span> <span class="n">sent</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">received</span> <span class="o">=</span> <span class="n">received</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getSent</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">sent</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getReceived</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">received</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">visitor</span> <span class="k">instanceof</span> <span class="n">NetworkTrafficVisitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="o">((</span><span class="n">NetworkTrafficVisitor</span><span class="o">)</span> <span class="n">visitor</span><span class="o">).</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>接下来，我们定义三个 Visitor 实现类：CPUUsageLoggerVistor、MemoryUsageLoggerVistor 和 NetworkTrafficLoggerVistor。这些类实现了 CPUUsageVisitor、MemoryUsageVisitor 和 NetworkTrafficVisitor 接口，并实现了 visit 方法，该方法用于记录监测数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CPUUsageLoggerVistor</span> <span class="kd">implements</span> <span class="n">CPUUsageVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">CPUUsage</span> <span class="n">cpuUsage</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">double</span> <span class="n">usage</span> <span class="o">=</span> <span class="n">cpuUsage</span><span class="o">.</span><span class="na">getUsage</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;CPU Usage: &#34;</span> <span class="o">+</span> <span class="n">usage</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryUsageLoggerVistor</span> <span class="kd">implements</span> <span class="n">MemoryUsageVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">MemoryUsage</span> <span class="n">memoryUsage</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">used</span> <span class="o">=</span> <span class="n">memoryUsage</span><span class="o">.</span><span class="na">getUsed</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">total</span> <span class="o">=</span> <span class="n">memoryUsage</span><span class="o">.</span><span class="na">getTotal</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">double</span> <span class="n">usage</span> <span class="o">=</span> <span class="o">(</span><span class="kt">double</span><span class="o">)</span> <span class="n">used</span> <span class="o">/</span> <span class="n">total</span> <span class="o">*</span> <span class="mi">100</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Memory Usage: &#34;</span> <span class="o">+</span> <span class="n">usage</span> <span class="o">+</span> <span class="s">&#34;%&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NetworkTrafficLoggerVistor</span> <span class="kd">implements</span> <span class="n">NetworkTrafficVisitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="n">NetworkTraffic</span> <span class="n">networkTraffic</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">sent</span> <span class="o">=</span> <span class="n">networkTraffic</span><span class="o">.</span><span class="na">getSent</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">received</span> <span class="o">=</span> <span class="n">networkTraffic</span><span class="o">.</span><span class="na">getReceived</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Network Traffic: Sent=&#34;</span> <span class="o">+</span> <span class="n">sent</span> <span class="o">+</span> <span class="s">&#34; bytes, Received=&#34;</span> <span class="o">+</span> <span class="n">received</span> <span class="o">+</span> <span class="s">&#34; bytes&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>最后，我们定义一个监测数据源类：SystemMonitor。该类维护三个监测数据：CPUUsage、MemoryUsage 和 NetworkTraffic，并提供相应的方法用于更新监测数据。该类还提供一个 accept 方法，该方法接受一个 Visitor 对象，并将该 Visitor 对象传递给各个监测数据对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SystemMonitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">CPUUsage</span> <span class="n">cpuUsage</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">MemoryUsage</span> <span class="n">memoryUsage</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">NetworkTraffic</span> <span class="n">networkTraffic</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateCPUUsage</span><span class="o">(</span><span class="kt">double</span> <span class="n">usage</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cpuUsage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CPUUsage</span><span class="o">(</span><span class="n">usage</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateMemoryUsage</span><span class="o">(</span><span class="kt">long</span> <span class="n">used</span><span class="o">,</span> <span class="kt">long</span> <span class="n">total</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">memoryUsage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MemoryUsage</span><span class="o">(</span><span class="n">used</span><span class="o">,</span> <span class="n">total</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateNetworkTraffic</span><span class="o">(</span><span class="kt">long</span> <span class="n">sent</span><span class="o">,</span><span class="kt">long</span> <span class="n">received</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">networkTraffic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NetworkTraffic</span><span class="o">(</span><span class="n">sent</span><span class="o">,</span> <span class="n">received</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Visitor</span> <span class="n">visitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">cpuUsage</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cpuUsage</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">memoryUsage</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">memoryUsage</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">networkTraffic</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">networkTraffic</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，我们可以使用上述类来实现对 CPU 占用率、内存使用量、网络流量等监测数据的访问。首先，我们创建一个 SystemMonitor 对象，并更新监测数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">SystemMonitor</span> <span class="n">monitor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SystemMonitor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">monitor</span><span class="o">.</span><span class="na">updateCPUUsage</span><span class="o">(</span><span class="mf">0.75</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">monitor</span><span class="o">.</span><span class="na">updateMemoryUsage</span><span class="o">(</span><span class="mi">1024</span><span class="o">,</span> <span class="mi">2048</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">monitor</span><span class="o">.</span><span class="na">updateNetworkTraffic</span><span class="o">(</span><span class="mi">1024</span><span class="o">,</span> <span class="mi">2048</span><span class="o">);</span>
</span></span></code></pre></div><p>然后，我们可以创建三个 Visitor 对象：CPUUsageLoggerVistor、MemoryUsageLoggerVistor 和 NetworkTrafficLoggerVistor，用于记录监测数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">CPUUsageLoggerVistor</span> <span class="n">cpuUsageLogger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CPUUsageLoggerVistor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">MemoryUsageLoggerVistor</span> <span class="n">memoryUsageLogger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MemoryUsageLoggerVistor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">NetworkTrafficLoggerVistor</span> <span class="n">networkTrafficLogger</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NetworkTrafficLoggerVistor</span><span class="o">();</span>
</span></span></code></pre></div><p>最后，我们可以将这些 Visitor 对象传递给 SystemMonitor 对象，并调用 accept 方法来访问监测数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">monitor</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">cpuUsageLogger</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">monitor</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">memoryUsageLogger</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">monitor</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">networkTrafficLogger</span><span class="o">);</span>
</span></span></code></pre></div><p>这样，我们就可以通过 Acyclic Visitor 模式来实现对 CPU 占用率、内存使用量、网络流量等监测数据的访问。</p>
<h2 id="参考文章">参考文章</h2>
<ul>
<li>
<p><a href="http://condor.depaul.edu/dmumaugh/OOT/Design-Principles/acv.pdf">Acyclic Visitor by Robert C. Martin</a></p>
</li>
<li>
<p><a href="https://wiki.c2.com/?AcyclicVisitor">Acyclic Visitor in WikiWikiWeb</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]什么是 Python Wheels，你为什么要关心它？</title>
      <link>https://blog.chensoul.com/posts/2023/06/01/python-wheels/</link>
      <pubDate>Thu, 01 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/01/python-wheels/</guid>
      <description>Python .whl 文件或 wheels 是 Python 中很少被讨论的部分，但它们对 Python 包的安装过程大有裨益。如果您使用 pip 安装了 Python 包，那么 Wheels 很可能使安装更快、更高效。 Wheels 是 Python 生态系统的</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://files.realpython.com/media/What-are-Python-Wheels-and-Why-Should-You-Care_Watermarked.22246cad13be.jpg" alt="What Are Python Wheels and Why Should You Care?"  />
</p>
<p>Python <code>.whl</code> 文件或 <a href="https://packaging.python.org/glossary/#term-wheel">wheels</a> 是 Python 中很少被讨论的部分，但它们对 <a href="https://realpython.com/python-modules-packages/">Python 包</a>的安装过程大有裨益。如果您使用 <a href="https://realpython.com/what-is-pip/">pip</a> 安装了 Python 包，那么 Wheels 很可能使安装更快、更高效。</p>
<p>Wheels 是 Python 生态系统的一个组件，有助于使包安装正常工作。它们允许更快的安装和更稳定的包分发过程。在本教程中，您将深入了解 Wheels 是什么，它们有什么好处，以及它们如何获得牵引力并使 Python 使用起来更加愉快。</p>
<p><strong>在本教程中，您将学习：</strong></p>
<ul>
<li>什么是 Wheels 以及它们与源代码分发的比较</li>
<li>如何使用 Wheels 来控制包安装过程</li>
<li>如何为您自己的 Python 包创建和分发 Wheels</li>
</ul>
<p>您将从用户和开发人员的角度看到使用流行的开源 Python 包的示例。</p>
<blockquote>
<p>免费赠品：单击<a href="https://realpython.com/python-wheels/">此处</a>获取 Python 备忘单并学习 Python 3 的基础知识，例如使用数据类型、字典、列表和 Python 函数。</p>
</blockquote>
<h2 id="安装">安装</h2>
<p>接下来，激活虚拟环境并确保安装了最新版本的 <code>pip</code> 、 <code>wheel</code> 和 <code>setuptools</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python -m venv env <span class="o">&amp;&amp;</span> <span class="nb">source</span> ./env/bin/activate
</span></span><span class="line"><span class="cl">$ python -m pip install -U pip wheel setuptools
</span></span><span class="line"><span class="cl">Successfully installed pip 20.1 setuptools-46.1.3 wheel-0.34.2
</span></span></code></pre></div><p>这就是您尝试安装和构建 Wheels 所需的全部内容！</p>
<h2 id="python-打包变得更好python-wheels-简介">Python 打包变得更好：Python Wheels 简介</h2>
<p>在学习如何将项目打包到 wheel 之前，从用户的角度了解使用 wheel 的样子会很有帮助。这听起来可能有点落后，但了解 Wheels 如何工作的一个好方法是从安装一个不是 Wheels 的东西开始。</p>
<p>您可以像往常一样，通过将 Python 包安装到您的环境中来开始这个实验。在这种情况下，安装 <a href="https://github.com/unbit/uwsgi">uWSGI</a> 版本 2.0.x：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python -m pip install <span class="s1">&#39;uwsgi==2.0.*&#39;</span>
</span></span><span class="line"><span class="cl">Collecting <span class="nv">uwsgi</span><span class="o">==</span>2.0.*
</span></span><span class="line"><span class="cl">  Downloading uwsgi-2.0.18.tar.gz <span class="o">(</span><span class="m">801</span> kB<span class="o">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">|</span>████████████████████████████████<span class="p">|</span> <span class="m">801</span> kB 1.1 MB/s
</span></span><span class="line"><span class="cl">Building wheels <span class="k">for</span> collected packages: uwsgi
</span></span><span class="line"><span class="cl">  Building wheel <span class="k">for</span> uwsgi <span class="o">(</span>setup.py<span class="o">)</span> ... <span class="k">done</span>
</span></span><span class="line"><span class="cl">  Created wheel <span class="k">for</span> uwsgi ... uWSGI-2.0.18-cp38-cp38-macosx_10_15_x86_64.whl
</span></span><span class="line"><span class="cl">  Stored in directory: /private/var/folders/jc/8_hqsz0x1tdbp05 ...
</span></span><span class="line"><span class="cl">Successfully built uwsgi
</span></span><span class="line"><span class="cl">Installing collected packages: uwsgi
</span></span><span class="line"><span class="cl">Successfully installed uwsgi-2.0.18
</span></span></code></pre></div><p>为了完全安装 uWSGI， <code>pip</code> 通过几个不同的步骤进行：</p>
<ul>
<li>
<p>在第 3 行，它下载了一个名为 <code>uwsgi-2.0.18.tar.gz</code> 的 TAR 文件 (tarball)，该文件已使用 <a href="https://www.gnu.org/software/gzip/manual/gzip.html">gzip</a> 压缩。</p>
</li>
<li>
<p>在第 6 行，它获取 tarball 并通过调用 <code>setup.py</code> 构建一个 <code>.whl</code> 文件。</p>
</li>
<li>
<p>在第 7 行，它将 wheel 标记为 <code>uWSGI-2.0.18-cp38-cp38-macosx_10_15_x86_64.whl</code> 。</p>
</li>
<li>
<p>在第 10 行，它在构建 wheel 后安装实际的包。</p>
</li>
</ul>
<p><code>pip</code> 检索到的 <code>tar.gz</code> tarball 是源代码分发版或 <code>sdist</code> ，而不是 wheel。在某些方面， <code>sdist</code> 与wheel相反。</p>
<blockquote>
<p>注意：如果您看到 uWSGI 安装错误，您可能需要<a href="https://uwsgi-docs.readthedocs.io/en/latest/Install.html#installing-from-source">安装 Python 开发头文件</a>。</p>
</blockquote>
<p><a href="https://packaging.python.org/glossary/#term-source-distribution-or-sdist">源代码分发</a>包含源代码。这不仅包括 Python 代码，还包括与包捆绑在一起的任何扩展模块（通常是 C 或 C++）的源代码。对于源代码分发，扩展模块是在用户端而不是开发人员端编译的。</p>
<p>源分发版还包含一组元数据，位于名为 <code>&lt;package-name&gt;.egg-info</code> 的目录中。此元数据有助于构建和安装包，但用户实际上不需要对其执行任何操作。</p>
<p>从开发人员的角度来看，源代码分发是在您运行以下命令时创建的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python setup.py sdist
</span></span></code></pre></div><p>现在尝试安装不同的包 <a href="https://github.com/chardet/chardet/blob/master/docs/index.rst">chardet</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python -m pip install <span class="s1">&#39;chardet==3.*&#39;</span>
</span></span><span class="line"><span class="cl">Collecting chardet
</span></span><span class="line"><span class="cl">  Downloading chardet-3.0.4-py2.py3-none-any.whl <span class="o">(</span><span class="m">133</span> kB<span class="o">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">|</span>████████████████████████████████<span class="p">|</span> <span class="m">133</span> kB 1.5 MB/s
</span></span><span class="line"><span class="cl">Installing collected packages: chardet
</span></span><span class="line"><span class="cl">Successfully installed chardet-3.0.4
</span></span></code></pre></div><p>您可以看到与 uWSGI 安装明显不同的输出。</p>
<p>安装 chardet 会直接从 PyPI 下载一个 <code>.whl</code> 文件。 Wheels 名称 <code>chardet-3.0.4-py2.py3-none-any.whl</code> 遵循您稍后将看到的特定命名约定。从用户的角度来看，更重要的是当 <code>pip</code> 在 PyPI 上找到兼容的 wheel 时，没有构建阶段。</p>
<p>从开发人员的角度来看，wheel 是运行以下命令的结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python setup.py bdist_wheel
</span></span></code></pre></div><p>为什么 uWSGI 给你一个源代码分发而 chardet 提供一个 wheel？您可以通过查看 PyPI 上每个项目的页面并导航到下载文件区域来了解其原因。本节将向您展示 <code>pip</code> 在 PyPI 索引服务器上实际看到的内容：</p>
<ul>
<li>
<p>出于与项目复杂性相关的原因，uWSGI 仅提供了一个<a href="https://pypi.org/project/uWSGI/2.0.18/#files">源代码分发</a>（ <code>uwsgi-2.0.18.tar.gz</code> ）。</p>
</li>
<li>
<p>chardet 提供了 <a href="https://pypi.org/project/chardet/3.0.4/#files">wheel 和源代码分发</a>，但如果它与您的系统兼容， <code>pip</code> 会更喜欢 wheel。稍后您将看到如何确定兼容性。</p>
</li>
</ul>
<p>用于 wheel 安装的兼容性检查的另一个示例是 <code>psycopg2</code> ，它为 Windows 提供了广泛的 wheels，但不为 Linux 或 macOS 客户端提供任何 wheels。这意味着 <code>pip install psycopg2</code> 可以根据您的特定设置获取 Wheels 或源代码分发。</p>
<p>为了避免这些类型的兼容性问题，一些包提供了多个 wheels，每个 wheels 都针对特定的 Python 实现和底层操作系统。</p>
<p>到目前为止，您已经看到了 wheel 和 <code>sdist</code> 之间的一些明显区别，但更重要的是这些差异对安装过程的影响。</p>
<h3 id="wheels-让事情变得快速">Wheels 让事情变得快速</h3>
<p>在上面，您看到了获取预制 wheels 的安装与下载 <code>sdist</code> 的安装的比较。 Wheels 使 Python 包的端到端安装更快，原因有二：</p>
<ul>
<li>在其他条件相同的情况下，wheels 的尺寸通常比源分发小，这意味着它们可以在网络中更快地移动。</li>
<li>直接从 wheels 安装避免了从源分发构建包的中间步骤。</li>
</ul>
<p>几乎可以保证 chardet 安装只用了 uWSGI 所需时间的一小部分。然而，这可以说是一个不公平的苹果与橘子的比较，因为 chardet 是一个小得多且不那么复杂的包。</p>
<p>使用不同的命令，您可以创建更直接的比较，以证明 wheels 的差异有多大。</p>
<p>您可以通过传递 <code>--no-binary</code> 选项让 <code>pip</code> 忽略它对 wheels 的倾斜：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">time</span> python -m pip install <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      --no-cache-dir <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      --force-reinstall <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      --no-binary<span class="o">=</span>:all: <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      cryptography
</span></span></code></pre></div><p>此命令计时 <a href="https://pypi.org/project/cryptography/">cryptography</a> 包的安装，告诉 <code>pip</code> 使用源代码分发，即使有合适的 Wheels 可用。包含 <code>:all:</code> 会使规则适用于 <code>cryptography</code> 及其所有<a href="https://realpython.com/courses/managing-python-dependencies/">依赖项</a>。</p>
<p>在我的机器上，这从开始到结束大约需要 32 秒。不仅安装需要很长时间，而且构建 <code>cryptography</code> 还需要您拥有 OpenSSL 开发标头并可供 Python 使用。</p>
<p>注意：对于 <code>--no-binary</code> ，您很可能会看到有关缺少 <code>cryptography</code> 安装所需的头文件的错误，这是使用源代码分发令人沮丧的部分原因。如果是这样， <code>cryptography</code> 文档的<a href="https://cryptography.io/en/latest/installation/#building-cryptography-on-linux">安装部分</a>会就特定操作系统需要哪些库和头文件提供建议。</p>
<p>现在您可以重新安装 <code>cryptography</code> ，但这次要确保 <code>pip</code> 使用 PyPI 的 Wheels 。因为 <code>pip</code> 更喜欢 Wheels ，这类似于不带任何参数调用 <code>pip install</code> 。但在这种情况下，您可以通过要求带有 <code>--only-binary</code> 的 Wheels 来明确意图：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">time</span> python -m pip install <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      --no-cache-dir <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      --force-reinstall <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      --only-binary<span class="o">=</span>cryptography <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      cryptography
</span></span></code></pre></div><p>此选项只需要四秒多一点，或者是仅使用 <code>cryptography</code> 及其依赖项的源代码分发时所用时间的八分之一。</p>
<h3 id="什么是-python-wheel">什么是 Python Wheel？</h3>
<p>Python <code>.whl</code> 文件本质上是一个 ZIP ( <code>.zip</code> ) 存档，带有特制的文件名，告诉安装者 Wheels 将支持哪些 Python 版本和平台。</p>
<p>Wheels 是一种<a href="https://packaging.python.org/glossary/#term-built-distribution">内置分发</a>。在这种情况下，built 意味着 wheel 以可立即安装的格式出现，并允许您跳过源代码分发所需的构建阶段。</p>
<blockquote>
<p>注意：值得一提的是，尽管使用了术语构建，但 Wheels 不包含 <code>.pyc</code> 文件或编译的 Python 字节码。</p>
</blockquote>
<p>wheel 文件名被分成由连字符分隔的部分：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">{</span>dist<span class="o">}</span>-<span class="o">{</span>version<span class="o">}(</span>-<span class="o">{</span>build<span class="o">})</span>?-<span class="o">{</span>python<span class="o">}</span>-<span class="o">{</span>abi<span class="o">}</span>-<span class="o">{</span>platform<span class="o">}</span>.whl
</span></span></code></pre></div><p><code>{brackets}</code> 中的每个部分都是一个标签，或者是 wheel 名称的一个组成部分，它带有一些关于 wheel 包含的内容以及 wheel 将在何处工作或不工作的含义。</p>
<p>这是一个使用 <code>cryptography</code>  Wheels 的说明性示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cryptography-2.9.2-cp35-abi3-macosx_10_9_x86_64.whl
</span></span></code></pre></div><p><code>cryptography</code> 分配多个 Wheels 。每个 Wheels 都是一个平台 Wheels ，这意味着它仅支持 Python 版本、Python ABI、操作系统和机器架构的特定组合。您可以将命名约定分解为多个部分：</p>
<ul>
<li><code>cryptography</code> 是包名。</li>
<li><code>2.9.2</code> 是 <code>cryptography</code> 的包版本。版本是符合 PEP 440 的字符串，例如 <code>2.9.2</code> 、 <code>3.4</code> 或 <code>3.9.0.a3</code> 。</li>
<li><code>cp35</code> 是 <a href="https://www.python.org/dev/peps/pep-0425/#python-tag">Python 标签</a>，表示 Wheels 需要的 Python 实现和版本。 <code>cp</code> 代表 <a href="https://realpython.com/cpython-source-code-guide/">CPython</a>，Python 的参考实现，而 <code>35</code> 代表 Python <a href="https://docs.python.org/3/whatsnew/3.5.html">3.5</a>。例如，这个 Wheels 与 <a href="https://www.jython.org/">Jython</a> 不兼容。</li>
<li><code>abi3</code> 是 ABI 标签。 ABI 代表<a href="https://docs.python.org/3/c-api/stable.html">应用程序二进制接口</a>。你真的不需要担心它需要什么，但是 <code>abi3</code> 是一个单独的版本，用于 Python C API 的二进制兼容性。</li>
<li><code>macosx_10_9_x86_64</code> 是平台标签，正好比较啰嗦。在这种情况下，它可以进一步细分为子部分：
<ul>
<li><code>macosx</code> 是 macOS 操作系统。</li>
<li><code>10_9</code> 是用于编译 Python 的 macOS 开发人员工具 SDK 版本，而 Python 又构建了这个 Wheels 。</li>
<li><code>x86_64</code> 是对 x86-64 指令集架构的引用。</li>
</ul>
</li>
</ul>
<p>最后一个组件在技术上不是标签，而是标准的 <code>.whl</code> 文件扩展名。组合起来，上述组件表明此 <code>cryptography</code>  Wheels 设计的目标机器。</p>
<p>现在让我们转向另一个例子。以下是您在上述 chardet 案例中看到的内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chardet-3.0.4-py2.py3-none-any.whl
</span></span></code></pre></div><p>您可以将其分解为标签：</p>
<ul>
<li><code>chardet</code> 是包名。</li>
<li><code>3.0.4</code> 是 chardet 的包版本。</li>
<li><code>py2.py3</code> 是 Python 标签，这意味着 Wheels 支持 Python 2 和 3 以及任何 Python 实现。</li>
<li><code>none</code> 是 ABI 标签，意味着 ABI 不是一个因素。</li>
<li><code>any</code> 是平台。这个 Wheels 几乎可以在任何平台上运行。</li>
</ul>
<p>Wheels 名称的 <code>py2.py3-none-any.whl</code> 段很常见。这是一个万能  Wheels ，可以在具有任何 <a href="https://stackoverflow.com/a/2456882/7954504">ABI</a> 的任何平台上与 Python 2 或 3 一起安装。如果 Wheels 以 <code>none-any.whl</code> 结尾，那么它很可能是一个不关心特定 Python ABI 或 CPU 架构的纯 Python 包。</p>
<p>另一个例子是 <code>jinja2</code> 模板引擎。如果您导航到 Jinja 3.x alpha 版本的<a href="https://pypi.org/project/Jinja2/3.0.0a1/#files">下载页面</a>，您将看到以下 Wheels ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Jinja2-3.0.0a1-py3-none-any.whl
</span></span></code></pre></div><p>注意这里缺少 <code>py2</code> 。这是一个纯 Python 项目，可以在任何 Python 3.x 版本上运行，但它不是万能  Wheels ，因为它不支持 Python 2。相反，它被称为纯 Python   Wheels 。</p>
<blockquote>
<p>注意：在 2020 年，许多项目也放弃了对 Python 2 的支持，Python 2 于 2020 年 1 月 1 日达到生命周期结束 (EOL)。Jinja 版本 3.x 于 2020 年 2 月放弃了对 Python 2 的支持。</p>
</blockquote>
<p>以下是为一些流行的开源包分发的 <code>.whl</code> 名称的更多示例：</p>
<table>
<thead>
<tr>
<th>Wheel</th>
<th>What It Is 这是什么</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>PyYAML-5.3.1-cp38-cp38-win_amd64.whl</code></td>
<td><a href="https://pypi.org/project/PyYAML/5.3.1/#files">PyYAML</a> for CPython 3.8 on Windows with AMD64 (x86-64) architecture</td>
</tr>
<tr>
<td><code>numpy-1.18.4-cp38-cp38-win32.whl</code></td>
<td><a href="https://pypi.org/project/numpy/1.18.4/#files">NumPy</a> for CPython 3.8 on Windows 32-bit</td>
</tr>
<tr>
<td><code>scipy-1.4.1-cp36-cp36m-macosx_10_6_intel.whl</code></td>
<td><a href="https://pypi.org/project/scipy/1.4.1/#files">SciPy</a> for CPython 3.6 on macOS 10.6 SDK with fat binary (multiple instruction sets)</td>
</tr>
</tbody>
</table>
<p>现在您已经彻底了解什么是 Wheels ，是时候谈谈它们有什么好处了。</p>
<h3 id="wheels-的优势">Wheels 的优势</h3>
<p>这是来自 <a href="https://www.pypa.io/en/latest/">Python Packaging Authority</a> (PyPA) 的 wheels 证明：</p>
<blockquote>
<p>并非所有开发人员都有正确的工具或经验来构建这些用这些编译语言编写的组件，因此 Python 创造了 wheel，这是一种旨在运送带有编译工件的库的包格式。事实上，Python 的包安装程序 <code>pip</code> 总是更喜欢 wheel，因为安装总是更快，所以即使是纯 Python 包也能更好地使用 wheel。 （ <a href="https://packaging.python.org/overview/#python-binary-distributions">来源</a>）</p>
</blockquote>
<p>更完整的描述是，wheels 在以下几个方面使 <a href="https://pythonwheels.com/#advantages">Python 包的用户和维护者</a>都受益：</p>
<ul>
<li>对于纯 Python 包和<a href="https://realpython.com/build-python-c-extension-module/">扩展模块</a>，Wheels 的安装速度比源代码分发快。</li>
<li>Wheels 比源分布小。例如， <a href="https://pypi.org/project/six/#files">six</a>    Wheels 大约是相应源分布<a href="https://pypi.org/project/six/#files">大小的三分之一</a>。当您考虑到单个包的 <code>pip install</code> 实际上可能会开始下载依赖项链时，这种差异变得更加重要。</li>
<li>Wheels 将 <code>setup.py</code> 执行排除在外。从源分发版安装会运行该项目的 <code>setup.py</code> 中包含的任何内容。正如 <a href="https://www.python.org/dev/peps/pep-0427/#rationale">PEP 427</a> 所指出的，这相当于任意代码执行。 Wheels 完全避免了这种情况。</li>
<li>编译器不需要安装包含已编译扩展模块的 Wheels 。扩展模块包含在针对特定平台和 Python 版本的 wheel 中。</li>
<li><code>pip</code> 自动在 wheel 中生成与正确的 Python 解释器匹配的 <code>.pyc</code> 文件。</li>
<li>Wheels 通过减少安装软件包时涉及的许多变量来提供一致性。</li>
</ul>
<p>您可以使用 PyPI 上项目的下载文件选项卡来查看可用的不同发行版。例如，<a href="https://pypi.org/project/pandas/#files">pandas</a> 分发了各种各样的 Wheels 。</p>
<h3 id="告诉-pip-要下载什么">告诉 <code>pip</code> 要下载什么</h3>
<p>可以对 <code>pip</code> 进行细粒度控制并告诉它首选或避免哪种格式。您可以使用 <code>--only-binary</code> 和 <code>--no-binary</code> 选项来执行此操作。您在前面有关安装 <code>cryptography</code> 包的部分中看到了它们的使用，但值得仔细研究一下它们的作用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">pushd</span> <span class="s2">&#34;</span><span class="k">$(</span>mktemp -d<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">$ python -m pip download --only-binary :all: --dest . --no-cache six
</span></span><span class="line"><span class="cl">Collecting six
</span></span><span class="line"><span class="cl">  Downloading six-1.14.0-py2.py3-none-any.whl <span class="o">(</span><span class="m">10</span> kB<span class="o">)</span>
</span></span><span class="line"><span class="cl">  Saved ./six-1.14.0-py2.py3-none-any.whl
</span></span><span class="line"><span class="cl">Successfully downloaded six
</span></span></code></pre></div><p>在此示例中，您更改为一个临时目录以存储带有 <code>pushd &quot;$(mktemp -d)&quot;</code> 的下载。您使用 <code>pip download</code> 而不是 <code>pip install</code> 以便您可以检查生成的 Wheels ，但您可以将 <code>download</code> 替换为 <code>install</code> 同时保持相同的选项集。</p>
<p>您下载带有几个标志的 <code>six</code> 模块：</p>
<ul>
<li><code>--only-binary :all:</code> 告诉 <code>pip</code> 限制自己使用 Wheels 并忽略源代码分发。如果没有这个选项， <code>pip</code> 只会更喜欢 Wheels ，但在某些情况下会退回到源代码分发。</li>
<li><code>--dest .</code> 告诉 <code>pip</code> 将 <code>six</code> 下载到当前目录。</li>
<li><code>--no-cache</code> 告诉 <code>pip</code> 不要查看其本地下载缓存。你使用这个选项只是为了说明从 PyPI 的实时下载，因为你可能在某处有一个 <code>six</code> 缓存。</li>
</ul>
<p>我之前提到过，wheel 文件本质上是一个 <code>.zip</code> 存档。你可以从字面上理解这个陈述，并这样对待 Wheels 。例如，如果你想查看一个 Wheels 的内容，你可以使用 <code>unzip</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ unzip -l six*.whl
</span></span><span class="line"><span class="cl">Archive:  six-1.14.0-py2.py3-none-any.whl
</span></span><span class="line"><span class="cl">  Length      Date    Time    Name
</span></span><span class="line"><span class="cl">---------  ---------- -----   ----
</span></span><span class="line"><span class="cl">    <span class="m">34074</span>  01-15-2020 18:10   six.py
</span></span><span class="line"><span class="cl">     <span class="m">1066</span>  01-15-2020 18:10   six-1.14.0.dist-info/LICENSE
</span></span><span class="line"><span class="cl">     <span class="m">1795</span>  01-15-2020 18:10   six-1.14.0.dist-info/METADATA
</span></span><span class="line"><span class="cl">      <span class="m">110</span>  01-15-2020 18:10   six-1.14.0.dist-info/WHEEL
</span></span><span class="line"><span class="cl">        <span class="m">4</span>  01-15-2020 18:10   six-1.14.0.dist-info/top_level.txt
</span></span><span class="line"><span class="cl">      <span class="m">435</span>  01-15-2020 18:10   six-1.14.0.dist-info/RECORD
</span></span><span class="line"><span class="cl">---------                     -------
</span></span><span class="line"><span class="cl">    <span class="m">37484</span>                     <span class="m">6</span> files
</span></span></code></pre></div><p><code>six</code> 是一个特例：它实际上是一个单独的 Python 模块，而不是一个完整的包。 Wheel 文件也可以复杂得多，稍后您将看到。</p>
<p>与 <code>--only-binary</code> 相反，你可以使用 <code>--no-binary</code> 来做相反的事情：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python -m pip download --no-binary :all: --dest . --no-cache six
</span></span><span class="line"><span class="cl">Collecting six
</span></span><span class="line"><span class="cl">  Downloading six-1.14.0.tar.gz <span class="o">(</span><span class="m">33</span> kB<span class="o">)</span>
</span></span><span class="line"><span class="cl">  Saved ./six-1.14.0.tar.gz
</span></span><span class="line"><span class="cl">Successfully downloaded six
</span></span><span class="line"><span class="cl">$ <span class="nb">popd</span>
</span></span></code></pre></div><p>此示例中的唯一更改是切换到 <code>--no-binary :all:</code> 。这告诉 <code>pip</code> 忽略 Wheels ，即使它们可用，而是下载源分发。</p>
<p><code>--no-binary</code> 什么时候有用？以下是几个案例：</p>
<ul>
<li>对应的 Wheels 坏了。这是对 Wheels 的讽刺。它们旨在减少故障的发生，但在某些情况下， Wheels 可能会配置错误。在这种情况下，为自己下载和构建源代码分发可能是一个可行的选择。</li>
<li>您想要对项目应用一个小的更改或<a href="https://en.wikipedia.org/wiki/Patch_%28Unix%29">补丁文件</a>，然后安装它。这是从<a href="https://realpython.com/python-git-github-intro/#version-control">版本控制系统</a> URL 克隆项目的替代方法。</li>
</ul>
<p>您还可以将上述标志与 <code>pip install</code> 一起使用。此外，与 <code>:all:</code> 不同， <code>--only-binary</code> 规则不仅适用于您正在安装的包，还适用于它的所有依赖项，您可以传递特定包的列表 <code>--only-binary</code> 和 <code>--no-binary</code> 来应用该规则规则到。</p>
<p>下面是几个安装URL库 <a href="https://github.com/aio-libs/yarl/">yarl</a> 的例子。它包含 Cython 代码并依赖于 <a href="https://github.com/aio-libs/multidict">multidict</a> ，其中包含纯 C 代码。有几个选项可以严格使用或严格忽略 <code>yarl</code> 及其依赖项的 Wheels ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="c1"># Install `yarl` and use only wheels for yarl and all dependencies</span>
</span></span><span class="line"><span class="cl">$ python -m pip install --only-binary :all: yarl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="c1"># Install `yarl` and use wheels only for the `multidict` dependency</span>
</span></span><span class="line"><span class="cl">$ python -m pip install --only-binary multidict yarl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="c1"># Install `yarl` and don&#39;t use wheels for yarl or any dependencies</span>
</span></span><span class="line"><span class="cl">$ python -m pip install --no-binary :all: yarl
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="c1"># Install `yarl` and don&#39;t use wheels for the `multidict` dependency</span>
</span></span><span class="line"><span class="cl">$ python -m pip install --no-binary multidict yarl
</span></span></code></pre></div><p>在本节中，您大致了解了如何微调 <code>pip install</code> 将使用的分发类型。虽然常规的 <code>pip install</code> 应该没有任何选项，但了解这些用于特殊情况的选项会很有帮助。</p>
<h3 id="wheel-manylinux-标签">Wheel manylinux 标签</h3>
<p>Linux 有许多变体和风格，例如 Debian、CentOS、Fedora 和 Pacman。其中每一个都可能在共享库（例如 <code>libncurses</code> ）和核心 C 库（例如 <code>glibc</code> ）中使用细微的变化。</p>
<p>如果您正在编写 C/C++ 扩展，那么这可能会产生问题。用 C 编写并在 Ubuntu Linux 上编译的源文件不能保证在 CentOS 机器或 Arch Linux 发行版上可执行。</p>
<p>您是否需要为每个 Linux 变体构建一个单独的 Wheels ？</p>
<p>幸运的是，答案是否定的，这要归功于一组专门设计的标签，称为 <code>manylinux</code> 平台标签系列。目前有以下三种变体：</p>
<ol>
<li><code>manylinux1</code> 是 <a href="https://www.python.org/dev/peps/pep-0513/">PEP 513</a> 中指定的原始格式。</li>
<li><code>manylinux2010</code> 是 <a href="https://www.python.org/dev/peps/pep-0571/">PEP 571</a> 中指定的更新，它升级到 CentOS 6 作为 Docker 镜像所基于的底层操作系统。理由是 CentOS 5.11，即 <code>manylinux1</code> 中允许的库列表的来源，于 2017 年 3 月达到 EOL 并停止接收安全补丁和错误修复。</li>
<li><code>manylinux2014</code> 是 <a href="https://www.python.org/dev/peps/pep-0599/">PEP 599</a> 中指定的升级到 CentOS 7 的更新，因为 CentOS 6 计划于 2020 年 11 月达到 EOL。</li>
</ol>
<p>您可以在 pandas 项目中找到 <code>manylinux</code> 分布的示例。以下是 PyPI 的可用 pandas 下载列表中的两个（最多的）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pandas-1.0.3-cp37-cp37m-manylinux1_x86_64.whl
</span></span><span class="line"><span class="cl">pandas-1.0.3-cp37-cp37m-manylinux1_i686.whl
</span></span></code></pre></div><p>在这种情况下，pandas 为支持 x86-64 和 <a href="https://en.wikipedia.org/wiki/P6_(microarchitecture)">i686</a> 架构的 CPython 3.7 构建了 <code>manylinux1</code> wheels。</p>
<p><code>manylinux</code> 的核心是基于特定版本的 CentOS 操作系统构建的 Docker 镜像。它捆绑了一个编译器套件、多个版本的 Python 和 <code>pip</code> ，以及一组允许的共享库。</p>
<blockquote>
<p>注意：术语 allowed 表示<a href="https://www.python.org/dev/peps/pep-0513/#rationale">默认情况下假定存在</a>于几乎所有 Linux 系统上的低级库。这个想法是，依赖项应该存在于基本操作系统上，而不需要额外安装。</p>
</blockquote>
<p>截至 2020 年年中， <code>manylinux1</code> 仍然是主要的 <code>manylinux</code> 标签。原因之一可能只是习惯。另一个可能是客户端（用户）端对 <code>manylinux2010</code> 及更高版本的支持仅限于更新版本的 <code>pip</code> ：</p>
<table>
<thead>
<tr>
<th>Tag</th>
<th>Requirement</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>manylinux1</code></td>
<td><code>pip</code> 8.1.0 或更高版本</td>
</tr>
<tr>
<td><code>manylinux2010</code></td>
<td><code>pip</code> 19.0 或更高版本</td>
</tr>
<tr>
<td><code>manylinux2014</code></td>
<td><code>pip</code> 19.3 或更高版本</td>
</tr>
</tbody>
</table>
<p>换句话说，如果您是构建 <code>manylinux2010</code> wheels 的包开发人员，那么使用您的包的人将需要 <code>pip</code> 19.0（2019 年 1 月发布）或更高版本才能让 <code>pip</code> 从 PyPI 找到并安装 <code>manylinux2010</code> wheels .</p>
<p>幸运的是，虚拟环境变得越来越普遍，这意味着开发人员可以在不接触系统 <code>pip</code> 的情况下更新虚拟环境的 <code>pip</code> 。然而，情况并非总是如此，一些 Linux 发行版仍然附带 <code>pip</code> 的过时版本。</p>
<p>这就是说，如果您要在 Linux 主机上安装 Python 包，那么如果包维护者不遗余力地创建 <code>manylinux</code>  Wheels ，您就认为自己很幸运。这几乎可以保证无论您的特定 Linux 变体或版本如何，都可以轻松安装软件包。</p>
<blockquote>
<p>警告：请注意 <a href="https://pythonspeed.com/articles/alpine-docker-python/">PyPI wheels 不能在 Alpine Linux</a>（或 <a href="https://hub.docker.com/_/busybox/">BusyBox</a>）上运行。这是因为 Alpine 使用 <a href="https://wiki.musl-libc.org/">musl</a> 代替标准的 <a href="https://www.gnu.org/software/libc/libc.html">glibc</a> 。 <code>musl libc</code> 库自称是“一个新的 <code>libc</code> ，力求快速、简单、轻量级、免费和正确”。不幸的是，说到 Wheels ， <code>glibc</code> 不是。</p>
</blockquote>
<h3 id="平台-wheels-的安全注意事项">平台 Wheels 的安全注意事项</h3>
<p>从用户安全的角度来看，wheels 的一个值得考虑的特性是 wheels <a href="https://github.com/asottile/no-manylinux#what-why">可能会受到版本腐烂</a>的影响，因为它们捆绑了二进制依赖项，而不是允许系统包管理器更新该依赖项。</p>
<p>例如，如果一个 wheel 合并了 <code>libfortran</code> 共享库，那么即使您使用包管理器（如 @ 3#、 <code>yum</code> 或 <code>brew</code> 。</p>
<p>如果您在安全防范措施得到加强的环境中进行开发，则需要注意某些平台  Wheels 的这一特性。</p>
<h2 id="召集所有开发人员构建您的-wheels">召集所有开发人员：构建您的 Wheels</h2>
<p>本教程的标题是“你为什么要关心？”作为一名开发人员，如果您打算向社区分发 Python 包，那么您应该非常关心为您的项目分发 Wheels ，因为它们使最终用户的安装过程更简洁、更简单。</p>
<p>您可以使用兼容的 Wheels 支持的目标平台越多，您看到的标题为“安装在 XYZ 平台上损坏”之类的 GitHub 问题就越少。为您的 Python 包分发 wheel 客观上降低了包的用户在安装过程中遇到问题的可能性。</p>
<p>要在本地构建 Wheels ，您需要做的第一件事是安装 <code>wheel</code> 。确保 <code>setuptools</code> 也是最新的也没什么坏处：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python -m pip install -U wheel setuptools
</span></span></code></pre></div><p>接下来的几节将引导您完成为各种不同场景构建 Wheels 的过程。</p>
<h3 id="不同类型的-wheels">不同类型的 Wheels</h3>
<p>正如本教程中提到的， Wheels 有几种不同的变体， Wheels 的类型反映在它的文件名中：</p>
<ul>
<li>万向  Wheels 包含 <code>py2.py3-none-any.whl</code> 。它在任何操作系统和平台上都支持 Python 2 和 Python 3。 Python Wheels 网站上列出的大多数 Wheels 都是通用 Wheels 。</li>
<li>纯 Python   Wheels 包含 <code>py3-none-any.whl</code> 或 <code>py2.none-any.whl</code> 。它支持 Python 3 或 Python 2，但不支持两者。它在其他方面与万向  Wheels 相同，但它会标有 <code>py2</code> 或 <code>py3</code> 而不是 <code>py2.py3</code> 标签。</li>
<li>平台  Wheels 支持特定的 Python 版本和平台。它包含指示特定 Python 版本、ABI、操作系统或体系结构的段。</li>
</ul>
<p>wheel 类型之间的差异取决于它们支持的 Python 版本以及它们是否针对特定平台。以下是 Wheels 变体之间差异的简要总结：</p>
<table>
<thead>
<tr>
<th>Wheel Type</th>
<th>支持 Python 2 和 3</th>
<th>支持每个 ABI、操作系统和平台</th>
</tr>
</thead>
<tbody>
<tr>
<td>Universal</td>
<td>✓</td>
<td>✓</td>
</tr>
<tr>
<td>Pure-Python</td>
<td></td>
<td>✓</td>
</tr>
<tr>
<td>Platform</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>正如您接下来将看到的，您可以通过相对较少的设置构建通用 Wheels 和纯 Python  Wheels ，但平台 Wheels 可能需要一些额外的步骤。</p>
<h3 id="构建一个纯-python--wheels">构建一个纯 Python  Wheels</h3>
<p>您可以使用 <code>setuptools</code> 为任何项目构建纯 Python   Wheels 或通用  Wheels ，只需一个命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python setup.py sdist bdist_wheel
</span></span></code></pre></div><p>这将创建一个源代码分发 ( <code>sdist</code> ) 和一个 Wheels  ( <code>bdist_wheel</code> )。默认情况下，两者都会放在当前目录下的 <code>dist/</code> 中。要亲眼看看，您可以为 <a href="https://github.com/jakubroztocil/httpie">HTTPie</a> 构建一个 Wheels ，一个用 Python 编写的命令行 HTTP 客户端，以及一个 <code>sdist</code> 。</p>
<p>下面是为 HTTPie 包构建两种类型的发行版的结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git clone -q git@github.com:jakubroztocil/httpie.git
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> httpie
</span></span><span class="line"><span class="cl">$ python setup.py -q sdist bdist_wheel
</span></span><span class="line"><span class="cl">$ ls -1 dist/
</span></span><span class="line"><span class="cl">httpie-2.2.0.dev0-py3-none-any.whl
</span></span><span class="line"><span class="cl">httpie-2.2.0.dev0.tar.gz
</span></span></code></pre></div><p>仅此而已。您克隆该项目，移至其根目录，然后调用 <code>python setup.py sdist bdist_wheel</code> 。您可以看到 <code>dist/</code> 包含一个 Wheels 和一个源代码分发。</p>
<p>默认情况下，生成的分布放在 <code>dist/</code> 中，但您可以使用 <code>-d</code> / <code>--dist-dir</code> 选项更改它。您可以将它们放在一个临时目录中，而不是用于构建隔离：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nv">tempdir</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>mktemp -d<span class="k">)</span><span class="s2">&#34;</span>  <span class="c1"># Create a temporary directory</span>
</span></span><span class="line"><span class="cl">$ file <span class="s2">&#34;</span><span class="nv">$tempdir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">/var/folders/jc/8_kd8uusys7ak09_lpmn30rw0000gk/T/tmp.GIXy7XKV: directory
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ python setup.py sdist -d <span class="s2">&#34;</span><span class="nv">$tempdir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">$ python setup.py bdist_wheel --dist-dir <span class="s2">&#34;</span><span class="nv">$tempdir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">$ ls -1 <span class="s2">&#34;</span><span class="nv">$tempdir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">httpie-2.2.0.dev0-py3-none-any.whl
</span></span><span class="line"><span class="cl">httpie-2.2.0.dev0.tar.gz
</span></span></code></pre></div><p>您可以将 <code>sdist</code> 和 <code>bdist_wheel</code> 步骤合二为一，因为 <code>setup.py</code> 可以采用多个子命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python setup.py sdist -d <span class="s2">&#34;</span><span class="nv">$tempdir</span><span class="s2">&#34;</span> bdist_wheel -d <span class="s2">&#34;</span><span class="nv">$tempdir</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>如此处所示，您需要将 <code>-d</code> 等选项传递给每个子命令。</p>
<h3 id="指定通用-wheel">指定通用 Wheel</h3>
<p>通用 Wheels 是用于同时支持 Python 2 和 3 的纯 Python 项目的 Wheels 。有多种方法可以告诉 <code>setuptools</code> 和 <code>distutils</code>  Wheels 应该是通用的。</p>
<p>选项 1 是在项目的 <a href="https://docs.python.org/3/distutils/configfile.html">setup.cfg</a> 文件中指定选项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">bdist_wheel</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">universal</span> <span class="p">=</span> <span class="mi">1</span>
</span></span></code></pre></div><p>选项 2 是在命令行传递恰当命名的 <code>--universal</code> 标志：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python setup.py bdist_wheel --universal
</span></span></code></pre></div><p>选项 3 是使用其 <code>options</code> 参数告诉 <code>setup()</code> 本身有关该标志的信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># setup.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">setup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ....</span>
</span></span><span class="line"><span class="cl">    <span class="n">options</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;bdist_wheel&#34;</span><span class="p">:</span> <span class="p">{</span><span class="s2">&#34;universal&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ....</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>虽然这三个选项中的任何一个都应该有效，但前两个选项最常用。您可以在 <a href="https://github.com/chardet/chardet/blob/master/setup.cfg">chardet 设置配置</a>中看到这样的示例。之后，您可以使用 <code>bdist_wheel</code> 命令，如前所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python setup.py sdist bdist_wheel
</span></span></code></pre></div><p>无论您选择哪个选项，生成的 Wheels 都是等效的。选择在很大程度上取决于开发人员的偏好以及最适合您的工作流程。</p>
<h3 id="构建平台-wheels-macos-和-windows">构建平台 Wheels （macOS 和 Windows）</h3>
<p>二进制发行版是包含已编译扩展的构建发行版的子集。扩展是非 Python 依赖项或 Python 包的组件。</p>
<p>通常，这意味着您的包包含扩展模块或依赖于用静态类型语言（例如 C、C++、Fortran，甚至 Rust 或 Go）编写的库。平台 Wheels 的存在主要是因为它们包含或依赖于扩展模块。</p>
<p>综上所述，是时候构建平台 Wheels 了！</p>
<p>根据您现有的开发环境，您可能需要完成一个或两个额外的先决条件步骤来构建平台 Wheels 。下面的步骤将帮助您设置构建 C 和 C++ 扩展模块，这是迄今为止最常见的类型。</p>
<p>在 macOS 上，您需要通过 <a href="https://www.unix.com/man-page/OSX/1/xcode-select/">xcode</a> 获得的命令行开发人员工具：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ xcode-select --install
</span></span></code></pre></div><p>在 Windows 上，您需要安装 <a href="https://docs.microsoft.com/en-us/cpp/?view=vs-2019">Microsoft Visual C++</a>：</p>
<ul>
<li>在浏览器中打开 Visual Studio 下载页面。</li>
<li>选择 Visual Studio 工具 → Visual Studio 构建工具 → 下载。</li>
<li>运行生成的 <code>.exe</code> 安装程序。</li>
<li>在安装程序中，选择 C++ Build Tools → Install。</li>
<li>重新启动机器。</li>
</ul>
<p>在 Linux 上，您需要一个编译器，例如 <code>gcc</code> 或 <code>g++</code> / <code>c++</code> 。</p>
<p>有了这些，您就可以为 UltraJSON ( <code>ujson</code> ) 构建一个平台  Wheels ，UltraJSON 是一个用纯 C 语言编写并带有 Python 3 绑定的 <a href="https://realpython.com/python-json/">JSON</a> 编码器和解码器。使用 <code>ujson</code> 是一个很好的玩具示例，因为它涵盖了几个基础：</p>
<ul>
<li>它包含一个扩展模块， <a href="https://github.com/ultrajson/ultrajson/blob/master/python/ujson.c">ujson</a> 。</li>
<li>它依赖于 Python 开发标头进行编译 ( <code>#include &lt;Python.h&gt;</code> )，但并不过分复杂。 <code>ujson</code> 旨在做一件事并且做好，就是读写JSON！</li>
</ul>
<p>您可以从 GitHub 克隆该项目，导航到其目录并构建它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git clone -q --branch 2.0.3 git@github.com:ultrajson/ultrajson.git
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> ultrajson
</span></span><span class="line"><span class="cl">$ python setup.py bdist_wheel
</span></span></code></pre></div><p>您应该会看到大量输出。这是 macOS 上的精简版，其中使用了 Clang 编译器驱动程序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g ...
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">creating <span class="s1">&#39;dist/ujson-2.0.3-cp38-cp38-macosx_10_15_x86_64.whl&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;ujson.cpython-38-darwin.so&#39;</span>
</span></span></code></pre></div><p>以 <code>clang</code> 开头的行显示了对编译器的实际调用，其中包含大量编译标志。您可能还会看到诸如 <code>MSVC</code> (Windows) 或 <code>gcc</code> (Linux) 之类的工具，具体取决于操作系统。</p>
<p>如果在执行上述代码后遇到 <code>fatal error</code> ，请不要担心。您可以展开下面的框以了解如何处理此问题。</p>
<blockquote>
<p><code>setup.py bdist_wheel</code> 对 <code>ujson</code> 的调用需要 Python 开发头文件，因为 <code>ujson.c</code> 引入了 <code>&lt;Python.h&gt;</code> 。如果您没有将它们放在可搜索的位置，那么您可能会看到如下错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fatal error: <span class="s1">&#39;Python.h&#39;</span> file not found
</span></span><span class="line"><span class="cl"><span class="c1">#include &lt;Python.h&gt;</span>
</span></span></code></pre></div><p>要编译扩展模块，您需要将开发标头保存在编译器可以找到的地方。</p>
<p>如果您使用的是最新版本的 Python 3 和虚拟环境工具（如 <code>venv</code> ），则 Python 开发标头可能会默认包含在编译和链接中。</p>
<p>如果没有，那么您可能会看到一个错误，表明找不到头文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fatal error: <span class="s1">&#39;Python.h&#39;</span> file not found
</span></span><span class="line"><span class="cl"><span class="c1">#include &lt;Python.h&gt;</span>
</span></span></code></pre></div><p>在这种情况下，您可以通过设置 <code>CFLAGS</code> 来告诉 <code>setup.py</code> 还可以在哪里查找头文件。要查找头文件本身，可以使用 <code>python3-config</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python3-config --include
</span></span><span class="line"><span class="cl">-I/Users/&lt;username&gt;/.pyenv/versions/3.8.2/include/python3.8
</span></span></code></pre></div><p>这告诉您 Python 开发标头位于显示的目录中，您现在可以将其与 <code>python setup.py bdist_wheel</code> 一起使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>python3-config --include<span class="k">)</span><span class="s2">&#34;</span> python setup.py bdist_wheel
</span></span></code></pre></div><p>更一般地说，您可以传递您需要的任何路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nv">CFLAGS</span><span class="o">=</span><span class="s1">&#39;-I/path/to/include&#39;</span> python setup.py bdist_wheel
</span></span></code></pre></div><p>在 Linux 上，您可能还需要单独安装头文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ apt-get install -y python3-dev  <span class="c1"># Debian, Ubuntu</span>
</span></span><span class="line"><span class="cl">$ yum install -y python3-devel  <span class="c1"># CentOS, Fedora, RHEL</span>
</span></span></code></pre></div></blockquote>
<p>如果你检查 UltraJSON 的 <a href="https://github.com/ultrajson/ultrajson/blob/master/setup.py">setup.py</a> ，你会看到它自定义了一些编译器标志，例如 <code>-D_GNU_SOURCE</code> 。通过 <code>setup.py</code> 控制编译过程的复杂性超出了本教程的范围，但您应该知道可以<a href="https://pythonextensionpatterns.readthedocs.io/en/latest/compiler_flags.html#setting-flags-automatically-in-setup-py">对编译和链接的发生方式进行细粒度控制</a>。</p>
<p>如果您查看 <code>dist</code> ，那么您应该会看到创建的 Wheels ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls dist/
</span></span><span class="line"><span class="cl">ujson-2.0.3-cp38-cp38-macosx_10_15_x86_64.whl
</span></span></code></pre></div><p>请注意，名称可能因您的平台而异。例如，您会在 64 位 Windows 上看到 <code>win_amd64.whl</code> 。</p>
<p>您可以查看 wheel 文件并看到它包含已编译的扩展名：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ unzip -l dist/ujson-*.whl
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">  Length      Date    Time    Name
</span></span><span class="line"><span class="cl">---------  ---------- -----   ----
</span></span><span class="line"><span class="cl">   <span class="m">105812</span>  05-10-2020 19:47   ujson.cpython-38-darwin.so
</span></span><span class="line"><span class="cl">   ...
</span></span></code></pre></div><p>此示例显示 macOS 的输出， <code>ujson.cpython-38-darwin.so</code> ，这是一个共享对象 ( <code>.so</code> ) 文件，也称为动态库。</p>
<h3 id="构建-manylinux--wheels">构建 <code>manylinux</code>  Wheels</h3>
<p>作为软件包开发人员，您很少会希望为单个 Linux 变体构建 Wheels 。 Linux wheels 需要一套专门的约定和工具，以便它们可以跨不同的 Linux 环境工作。</p>
<p>与 macOS 和 Windows 的 wheel 不同，构建在一个 Linux 变体上的 wheel 不能保证在另一个 Linux 变体上工作，即使是具有相同机器架构的 Linux 变体。</p>
<p>事实上，如果您在开箱即用的 Linux 容器上构建一个 Wheels ，那么如果您尝试上传它，PyPI 甚至不会接受该 Wheels ！</p>
<p>如果您希望您的包在一系列 Linux 客户端上可用，那么您需要一个 <code>manylinux</code>  Wheels 。 <code>manylinux</code> wheel 是一种特殊类型的平台 wheel，被大多数 Linux 变体接受。它必须在特定环境中构建，并且需要一个名为 <code>auditwheel</code> 的工具来重命名 wheel 文件以表明它是一个 <code>manylinux</code> wheel。</p>
<blockquote>
<p>注意：即使您是从开发人员而不是用户的角度来学习本教程，请确保您在继续本节之前已阅读有关 <code>manylinux</code> wheel 标签的部分。</p>
</blockquote>
<p>构建一个 <code>manylinux</code>  Wheels 可以让你瞄准更广泛的用户平台。 PEP 513 指定了一个特定的（和古老的）CentOS 版本，其中包含一系列可用的 Python 版本。 CentOS 和 Ubuntu 或任何其他发行版之间的选择没有任何特殊区别。</p>
<p>重点是构建环境由一个普通的 Linux 操作系统和一组有限的外部共享库组成，这些共享库对于不同的 Linux 变体是通用的。</p>
<p>值得庆幸的是，您不必自己执行此操作。 PyPA 提供了一组 <a href="https://github.com/pypa/manylinux">Docker 镜像</a>，只需单击几下鼠标即可为您提供此环境：</p>
<ul>
<li>选项 1 是从您的开发机器运行 <code>docker</code> 并使用 Docker 卷挂载您的项目，以便它可以在容器文件系统中访问。</li>
<li>选项 2 是使用 CI/CD 解决方案，例如 CircleCI、GitHub Actions、Azure DevOps 或 Travis-CI，这将拉取您的项目并在推送或标记等操作上运行构建。</li>
</ul>
<p>为不同的 <code>manylinux</code> 风格提供了 Docker 镜像：</p>
<table>
<thead>
<tr>
<th><code>manylinux</code> Tag</th>
<th>Architecture</th>
<th>Docker Image</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>manylinux1</code></td>
<td>x86-64</td>
<td><a href="https://quay.io/pypa/manylinux1_x86_64">quay.io/pypa/manylinux1_x86_64</a></td>
</tr>
<tr>
<td><code>manylinux1</code></td>
<td>i686</td>
<td><a href="https://quay.io/pypa/manylinux1_i686">quay.io/pypa/manylinux1_i686</a></td>
</tr>
<tr>
<td><code>manylinux2010</code></td>
<td>x86-64</td>
<td><a href="https://quay.io/pypa/manylinux2010_x86_64">quay.io/pypa/manylinux2010_x86_64</a></td>
</tr>
<tr>
<td><code>manylinux2010</code></td>
<td>i686</td>
<td><a href="https://quay.io/pypa/manylinux2010_i686">quay.io/pypa/manylinux2010_i686</a></td>
</tr>
<tr>
<td><code>manylinux2014</code></td>
<td>x86-64</td>
<td><a href="https://quay.io/pypa/manylinux2014_x86_64">quay.io/pypa/manylinux2014_x86_64</a></td>
</tr>
<tr>
<td><code>manylinux2014</code></td>
<td>i686</td>
<td><a href="https://quay.io/pypa/manylinux2014_i686">quay.io/pypa/manylinux2014_i686</a></td>
</tr>
<tr>
<td><code>manylinux2014</code></td>
<td>aarch64</td>
<td><a href="https://quay.io/pypa/manylinux2014_aarch64">quay.io/pypa/manylinux2014_aarch64</a></td>
</tr>
<tr>
<td><code>manylinux2014</code></td>
<td>ppc64le</td>
<td><a href="https://quay.io/pypa/manylinux2014_ppc64le">quay.io/pypa/manylinux2014_ppc64le</a></td>
</tr>
<tr>
<td><code>manylinux2014</code></td>
<td>s390x</td>
<td><a href="https://quay.io/pypa/manylinux2014_s390x">quay.io/pypa/manylinux2014_s390x</a></td>
</tr>
</tbody>
</table>
<p>首先，PyPA 还提供了一个示例存储库 <a href="https://github.com/pypa/python-manylinux-demo">python-manylinux-demo</a>，这是一个用于与 Travis-CI 一起构建 <code>manylinux</code> wheels 的演示项目。</p>
<p>虽然构建 wheels 作为远程托管 CI 解决方案的一部分很常见，但您也可以在本地构建 <code>manylinux</code> wheels。为此，您需要安装 Docker。 Docker Desktop 适用于 macOS、Windows 和 Linux。</p>
<p>首先，克隆演示项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git clone -q git@github.com:pypa/python-manylinux-demo.git
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> python-manylinux-demo
</span></span></code></pre></div><p>接下来，分别为 <code>manylinux1</code> Docker 镜像和平台定义几个 shell 变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nv">DOCKER_IMAGE</span><span class="o">=</span><span class="s1">&#39;quay.io/pypa/manylinux1_x86_64&#39;</span>
</span></span><span class="line"><span class="cl">$ <span class="nv">PLAT</span><span class="o">=</span><span class="s1">&#39;manylinux1_x86_64&#39;</span>
</span></span></code></pre></div><p><code>DOCKER_IMAGE</code> 变量是由 PyPA 维护的用于构建 <code>manylinux</code>  Wheels 的图像，托管在 <a href="https://quay.io/">Quay.io</a>。平台 ( <code>PLAT</code> ) 是提供给 <code>auditwheel</code> 的必要信息，让它知道要应用哪个平台标签。</p>
<p>现在您可以拉取 Docker 镜像并在容器中运行 wheel-builder 脚本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker pull <span class="s2">&#34;</span><span class="nv">$DOCKER_IMAGE</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">$ docker container run -t --rm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      -e <span class="nv">PLAT</span><span class="o">=</span><span class="nv">$PLAT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      -v <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span>:/io <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      <span class="s2">&#34;</span><span class="nv">$DOCKER_IMAGE</span><span class="s2">&#34;</span> /io/travis/build-wheels.sh
</span></span></code></pre></div><p>这告诉 Docker 在 <code>manylinux1_x86_64</code> Docker 容器内运行 <code>build-wheels.sh</code> shell 脚本，将 <code>PLAT</code> 作为容器中可用的环境变量传递。由于您使用 <code>-v</code> （或 <code>--volume</code> ）绑定挂载卷，因此容器中生成的 Wheels 现在可以在主机上的 <code>wheelhouse</code> 目录中访问：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -1 wheelhouse
</span></span><span class="line"><span class="cl">python_manylinux_demo-1.0-cp27-cp27m-manylinux1_x86_64.whl
</span></span><span class="line"><span class="cl">python_manylinux_demo-1.0-cp27-cp27mu-manylinux1_x86_64.whl
</span></span><span class="line"><span class="cl">python_manylinux_demo-1.0-cp35-cp35m-manylinux1_x86_64.whl
</span></span><span class="line"><span class="cl">python_manylinux_demo-1.0-cp36-cp36m-manylinux1_x86_64.whl
</span></span><span class="line"><span class="cl">python_manylinux_demo-1.0-cp37-cp37m-manylinux1_x86_64.whl
</span></span><span class="line"><span class="cl">python_manylinux_demo-1.0-cp38-cp38-manylinux1_x86_64.whl
</span></span></code></pre></div><p>在几个简短的命令中，您拥有一组适用于 CPython 2.7 到 3.8 的 <code>manylinux1</code>  Wheels 。一种常见的做法是迭代不同的架构。例如，您可以对 <code>quay.io/pypa/manylinux1_i686</code> Docker 映像重复此过程。这将构建针对 32 位 (i686) 架构的 <code>manylinux1</code>  Wheels 。</p>
<p>如果您想更深入地研究造 Wheels ，那么下一步就是向最好的人学习。从 Python Wheels 页面开始，选择一个项目，导航到它的源代码（在 GitHub、GitLab 或 Bitbucket 等地方），然后亲眼看看它是如何构建 Wheels 的。</p>
<p>Python Wheels 页面上的许多项目都是纯 Python 项目并分发通用 Wheels 。如果您正在寻找更复杂的案例，请留意使用扩展模块的包。这里有两个例子可以激发你的胃口：</p>
<ul>
<li><code>lxml</code> 使用从 <code>manylinux1</code> Docker 容器中调用的单独构建脚本。</li>
<li><code>ultrajson</code> 做同样的事情并使用 GitHub Actions 调用构建脚本。</li>
</ul>
<p>如果您有兴趣构建 <code>manylinux</code>  Wheels ，这两个都是著名的项目，它们提供了很好的示例供您学习。</p>
<h3 id="捆绑共享库">捆绑共享库</h3>
<p>另一个挑战是为依赖于外部共享库的包构建 Wheels 。 <code>manylinux</code> 图像包含一组预筛选的库，例如 <code>libpthread.so.0</code> 和 <code>libc.so.6</code> 。但是，如果您依赖该列表之外的东西怎么办，例如 ATLAS 或 GFortran？</p>
<p>在这种情况下，有几种解决方案可以解决问题：</p>
<ul>
<li><code>auditwheel</code> 会将外部库捆绑到一个已经构建好的 Wheels 中。</li>
<li><code>delocate</code> 在 macOS 上做同样的事情。</li>
</ul>
<p>方便的是， <code>auditwheel</code> 出现在 <code>manylinux</code> Docker 镜像上。使用 <code>auditwheel</code> 和 <code>delocate</code> 只需一个命令。只需告诉他们有关 wheel 文件的信息，他们就会完成剩下的工作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ auditwheel repair &lt;path-to-wheel.whl&gt;  <span class="c1"># For manylinux</span>
</span></span><span class="line"><span class="cl">$ delocate-wheel &lt;path-to-wheel.whl&gt;  <span class="c1"># For macOS</span>
</span></span></code></pre></div><p>这将通过项目的 <code>setup.py</code> 检测所需的外部库，并将它们捆绑到 wheel 中，就好像它们是项目的一部分一样。</p>
<p>利用 <code>auditwheel</code> 和 <code>delocate</code> 的项目示例是 <code>pycld3</code> ，它为Compact Language Detector v3 (CLD3) 提供Python 绑定。</p>
<p><code>pycld3</code> 包依赖于 <code>libprotobuf</code> ，它不是一个通常安装的库。如果你查看 <code>pycld3</code> macOS  Wheels 内部，你会看到 <code>libprotobuf.22.dylib</code> 包含在那里。这是一个捆绑到 Wheels 中的动态链接共享库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ unzip -l pycld3-0.20-cp38-cp38-macosx_10_15_x86_64.whl
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">       <span class="m">51</span>  04-10-2020 11:46   cld3/__init__.py
</span></span><span class="line"><span class="cl">   <span class="m">939984</span>  04-10-2020 07:50   cld3/_cld3.cpython-38-darwin.so
</span></span><span class="line"><span class="cl">  <span class="m">2375836</span>  04-10-2020 07:50   cld3/.dylibs/libprotobuf.22.dylib
</span></span><span class="line"><span class="cl">---------                     -------
</span></span><span class="line"><span class="cl">  <span class="m">3339279</span>                     <span class="m">8</span> files
</span></span></code></pre></div><p>Wheels 预包装有 <code>libprotobuf</code> 。 <code>.dylib</code> 类似于 Unix <code>.so</code> 文件或 Windows <code>.dll</code> 文件，但我承认我不知道除此之外的具体区别。</p>
<p><code>auditwheel</code> 和 <code>delocate</code> 知道包含 <code>libprotobuf</code> 因为 <code>setup.py</code> 通过 <code>libraries</code> 参数告诉他们：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">setup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">    <span class="n">libraries</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;protobuf&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ...</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>这意味着 <code>auditwheel</code> 和 <code>delocate</code> 为用户省去了安装 <code>protobuf</code> 的麻烦，只要他们从具有匹配 Wheels 的平台和 Python 组合进行安装即可。</p>
<p>如果您要分发的包具有这样的外部依赖项，那么您可以通过使用 <code>auditwheel</code> 或 <code>delocate</code> 来帮您的用户一个忙，让他们省去自己安装依赖项的额外步骤。</p>
<h3 id="在持续集成中构建-wheels">在持续集成中构建 Wheels</h3>
<p>在本地机器上构建 Wheels 的替代方法是在项目的 <a href="https://realpython.com/python-continuous-integration/">CI 管道</a>中自动构建它们。</p>
<p>有无数与主要代码托管服务集成的 CI 解决方案。其中包括 <a href="https://www.appveyor.com/">Appveyor</a>、<a href="https://azure.microsoft.com/en-us/services/devops/">Azure DevOps</a>、<a href="https://bitbucket.org/product/features/pipelines">BitBucket Pipelines</a>、<a href="https://circleci.com/">Circle CI</a>、<a href="https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/">GitLab</a>、<a href="https://github.com/features/actions">GitHub Actions</a>、<a href="https://www.jenkins.io/">Jenkins</a> 和 <a href="https://travis-ci.org/">Travis CI</a>，仅举几例。</p>
<p>本教程的目的不是要判断哪种 CI 服务最适合构建 Wheels ，以及考虑到 CI 支持的发展速度，任何支持哪些容器的 CI 服务列表很快就会过时。</p>
<p>但是，本节可以帮助您入门。</p>
<p>如果你正在开发一个纯 Python 包， <code>bdist_wheel</code> 一步是一个幸福的单行：它在很大程度上与你在哪个容器操作系统和平台上构建 Wheels 无关。几乎所有主要的 CI 服务都应该使您能够通过在项目内的特殊 YAML 文件中定义步骤来以简洁的方式执行此操作。</p>
<p>例如，这是您可以用于 GitHub Actions 的语法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Python wheels</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">release</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">types</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">created</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">wheels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Set up Python 3.x</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-python@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">python-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.x&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install dependencies</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">python -m pip install --upgrade setuptools wheel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build wheels</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">python setup.py bdist_wheel</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-artifact@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">dist</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">dist</span><span class="w">
</span></span></span></code></pre></div><p>在此配置文件中，您使用以下步骤构建一个 Wheels ：</p>
<ul>
<li>在第 8 行，您指定该作业应在 Ubuntu 机器上运行。</li>
<li>在第 10 行中，您使用 <code>checkout</code> 操作来设置您的项目存储库。</li>
<li>在第 14 行，您告诉 CI 运行器使用最新稳定版本的 Python 3。</li>
<li>在第 21 行中，您请求将生成的 Wheels 作为工件提供，您可以在作业完成后从 UI 下载该工件。</li>
</ul>
<p>但是，如果您有一个复杂的项目（可能是一个带有 C 扩展或 Cython 代码的项目）并且您正在努力构建一个 CI/CD 管道以自动构建 Wheels ，那么可能会涉及额外的步骤。以下是一些您可以通过示例学习的项目：</p>
<ul>
<li><a href="https://github.com/aio-libs/yarl"><code>yarl</code></a></li>
<li><a href="https://github.com/msgpack/msgpack-python"><code>msgpack</code></a></li>
<li><a href="https://github.com/pallets/markupsafe"><code>markupsafe</code></a></li>
<li><a href="https://github.com/pyca/cryptography"><code>cryptography</code></a></li>
</ul>
<p>许多项目推出了自己的 CI 配置。然而，一些解决方案已经出现，用于减少配置文件中指定的代码量来构建 Wheels 。您可以直接在 CI 服务器上使用 <a href="https://github.com/joerick/cibuildwheel">cibuildwheel</a> 工具来减少构建多个平台 Wheels 所需的代码行和配置。还有 <a href="https://github.com/matthew-brett/multibuild">multibuild</a>，它提供了一组 shell 脚本，用于协助在 Travis CI 和 AppVeyor 上构建 Wheels 。</p>
<h3 id="确保你的-wheels-旋转正确">确保你的 Wheels 旋转正确</h3>
<p>构建结构正确的 Wheels 可能是一项精细的操作。例如，如果您的 Python 包使用 <code>src</code> 布局而您忘记在 <code>setup.py</code> 中正确指定它，那么生成的 Wheels 可能包含错误位置的目录。</p>
<p>您可以在 <code>bdist_wheel</code> 之后使用的一项检查是 <code>check-wheel-contents</code> 工具。它查找常见问题，例如包目录结构异常或存在重复文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ check-wheel-contents dist/*.whl
</span></span><span class="line"><span class="cl">dist/ujson-2.0.3-cp38-cp38-macosx_10_15_x86_64.whl: OK
</span></span></code></pre></div><p>在本例中， <code>check-wheel-contents</code> 表示带 <code>ujson</code>   Wheels 的所有内容都已检出。如果不是， <code>stdout</code> 将显示可能问题的摘要，就像 <code>flake8</code> 之类的 linter。</p>
<p>另一种确认您构建的 Wheels 是否正确的方法是使用 TestPyPI。首先，您可以在那里上传包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python -m twine upload <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      --repository-url https://test.pypi.org/legacy/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      dist/*
</span></span></code></pre></div><p>然后，您可以下载相同的包进行测试，就好像它是真实的一样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python -m pip install <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      --index-url https://test.pypi.org/simple/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      &lt;pkg-name&gt;
</span></span></code></pre></div><p>这允许您通过上传然后下载您自己的项目来测试您的 Wheels 。</p>
<h3 id="将-python-wheels-上传到-pypi">将 Python Wheels 上传到 PyPI</h3>
<p>现在是时候上传你的 Python 包了。由于 <code>sdist</code> 和 wheel 默认情况下都放在 <code>dist/</code> 目录中，您可以使用 <code>twine</code> 工具上传它们，这是一个用于将包发布到 PyPI 的实用程序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python -m pip install -U twine
</span></span><span class="line"><span class="cl">$ python -m twine upload dist/*
</span></span></code></pre></div><p>由于默认情况下 <code>sdist</code> 和 <code>bdist_wheel</code> 都输出到 <code>dist/</code> ，您可以安全地告诉 <code>twine</code> 使用shell 通配符( <code>dist/*</code> ) 上传 <code>dist/</code> 下的所有内容。</p>
<h2 id="结论">结论</h2>
<p>了解 Wheels 在 Python 生态系统中扮演的关键角色可以让您作为 Python 包的用户和开发人员的生活更轻松。</p>
<p>此外，在 Wheels 方面提高你的 Python 素养将帮助你更好地理解安装包时发生了什么，以及在越来越罕见的情况下，该操作何时出错。</p>
<p><strong>在本教程中，您学习了：</strong></p>
<ul>
<li>什么是 Wheels 以及它们与源代码分布的比较</li>
<li>如何使用 Wheels 来控制包安装过程</li>
<li>通用 Wheels 、纯 Python  Wheels 和平台 Wheels 之间有什么区别</li>
<li>如何为您自己的 Python 包创建和分发 Wheels</li>
</ul>
<p>您现在已经从用户和开发人员的角度对 Wheels 有了深入的了解。您完全有能力构建自己的 Wheels ，并使项目的安装过程快速、方便和稳定。</p>
<p>请参阅下面的部分以获取一些额外的阅读材料，以更深入地了解快速扩展的 wheel 生态系统。</p>
<h2 id="资源">资源</h2>
<p><a href="https://pythonwheels.com/">Python Wheels</a>页面专门跟踪 PyPI 上下载次数最多的 360 个包中对 wheels 的支持。在编写本教程时，采用率非常可观，为 360 分之 331，即 91% 左右。</p>
<p>已经有许多 Python 增强提案 (PEP) 帮助了 wheel 格式的规范和发展：</p>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0425/">PEP 425 - Compatibility Tags for Built Distributions</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0427/">PEP 427 - The Wheel Binary Package Format 1.0</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0491/">PEP 491 - The Wheel Binary Package Format 1.9</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0513/">PEP 513 - A Platform Tag for Portable Linux Built Distributions</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0571/">PEP 571 - The manylinux2010 Platform Tag</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0599/">PEP 599 - The manylinux2014 Platform Tag</a></li>
</ul>
<p>以下是本教程中提到的各种 wheel 打包工具的候选清单：</p>
<ul>
<li><a href="https://github.com/pypa/wheel">pypa/wheel</a></li>
<li><a href="https://github.com/pypa/auditwheel">pypa/auditwheel</a></li>
<li><a href="https://github.com/pypa/manylinux">pypa/manylinux</a></li>
<li><a href="https://github.com/pypa/python-manylinux-demo">pypa/python-manylinux-demo</a></li>
<li><a href="https://github.com/jwodder/check-wheel-contents">jwodder/check-wheel-contents</a></li>
<li><a href="https://github.com/matthew-brett/delocate">matthew-brett/delocate</a></li>
<li><a href="https://github.com/matthew-brett/multibuild">matthew-brett/multibuild</a></li>
<li><a href="https://github.com/joerick/cibuildwheel">joerick/cibuildwheel</a></li>
</ul>
<p>Python 文档有几篇文章涵盖了 Wheels 和源代码分发：</p>
<ul>
<li><a href="https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives">Generating Distribution Archives</a></li>
<li><a href="https://docs.python.org/3/distutils/sourcedist.html">Creating a Source Distribution</a></li>
</ul>
<p>最后，这里有一些来自 PyPA 的更有用的链接：</p>
<ul>
<li><a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#packaging-your-project">Packaging your Project</a></li>
<li><a href="https://packaging.python.org/overview/">An Overview of Packaging for Python</a></li>
</ul>
<p>原文地址：<a href="https://realpython.com/python-wheels/">https://realpython.com/python-wheels/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]使用 Python 的 pip 管理项目的依赖关系</title>
      <link>https://blog.chensoul.com/posts/2023/06/01/what-is-pip/</link>
      <pubDate>Thu, 01 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/01/what-is-pip/</guid>
      <description>Python 的标准包管理器是 pip 。它允许您安装和管理不属于 Python 标准库的包。如果您正在寻找 pip 的介绍，那么您来对地方了！ 在本教程中，您将学习如何： 在您的工作环</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://files.realpython.com/media/What-is-PIP_Watermarked.4944e95d83ad.jpg" alt="Using Python&amp;rsquo;s pip to Manage Your Projects&amp;rsquo; Dependencies"  />
</p>
<p><a href="https://www.python.org/">Python</a> 的标准包管理器是 <a href="https://pip.pypa.io/en/stable/">pip</a> 。它允许您安装和管理不属于 Python <a href="https://docs.python.org/3/py-modindex.html">标准库</a>的包。如果您正在寻找 <code>pip</code> 的介绍，那么您来对地方了！</p>
<p><strong>在本教程中，您将学习如何：</strong></p>
<ul>
<li>在您的工作环境中设置 <code>pip</code></li>
<li>修复与使用 <code>pip</code> 相关的常见错误</li>
<li>使用 <code>pip</code> 安装和卸载包</li>
<li>使用需求文件管理项目的依赖关系</li>
</ul>
<p><code>pip</code> 可以做很多事情，但是 Python 社区非常活跃，已经创建了一些 <code>pip</code> 的巧妙替代品。您将在本教程的后面部分了解这些内容。</p>
<h2 id="从-pip-开始">从 <code>pip</code> 开始</h2>
<p>那么，<code>pip</code> 具体是做什么的呢？ <a href="https://pip.pypa.io/en/stable/">pip</a> 是 Python 的包管理器。这意味着它是一个允许您安装和管理未作为标准库的一部分分发的库和依赖项的工具。 pip 这个名字是由 Ian Bicking 在 2008 年引入的：</p>
<blockquote>
<p>我已经将 pyinstall 重命名为新名称：pip。pip 是 pip install package 首字母缩写。 （ <a href="https://www.ianbicking.org/blog/2008/10/pyinstall-is-dead-long-live-pip.html">来源</a>）</p>
</blockquote>
<p>包管理非常重要，Python 的安装程序从 3.4 版和 2.7.9 版开始分别为 Python 3 和 Python 2 包含了 <code>pip</code> 。许多 Python 项目都使用 <code>pip</code> ，这使它成为每个 Pythonista 的必备工具。</p>
<p>如果您来自另一种编程语言，您可能会熟悉包管理器的概念。 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">JavaScript</a> 使用 <a href="https://www.npmjs.com/">npm</a> 进行包管理，<a href="https://www.ruby-lang.org/en/">Ruby</a> 使用 <a href="https://rubygems.org/">gem</a>，<a href="https://dotnet.microsoft.com/languages">.NET 平台</a>使用 <a href="https://www.nuget.org/">NuGet</a>。在 Python 中， <code>pip</code> 已成为标准包管理器。</p>
<h3 id="在您的系统上查找-pip">在您的系统上查找 pip</h3>
<p>Python 3 安装程序为您提供了在系统上安装 Python 时安装 <code>pip</code> 的选项。事实上， <code>pip</code> 与Python一起安装的选项默认是勾选的，所以 <code>pip</code> 应该在安装完Python之后就可以使用了。</p>
<blockquote>
<p>注意：在某些 Linux (Unix) 系统（如 Ubuntu）上， <code>pip</code> 位于一个名为 <code>python3-pip</code> 的单独包中，您需要使用 <code>sudo apt install python3-pip</code> 安装它。默认情况下，它不会随解释器一起安装。</p>
</blockquote>
<p>您可以通过在您的系统上查找 <code>pip3</code> 可执行文件来验证 <code>pip</code> 是否可用。在下面选择您的操作系统并相应地使用您的平台特定命令：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\&gt;</span> where pip3
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ which pip3
</span></span></code></pre></div><p>Linux 系统和 macOS 上的 <code>which</code> 命令显示 <code>pip3</code> 二进制文件所在的位置。</p>
<p>在 Windows 和 Unix 系统上， <code>pip3</code> 可能位于多个位置。当您安装了多个 Python 版本时，可能会发生这种情况。如果您在系统的任何位置都找不到 <code>pip</code> ，那么您可以考虑重新安装 pip。</p>
<p>除了直接运行您的系统 <code>pip</code> ，您还可以将其作为 Python 模块运行。在下一节中，您将了解如何操作。</p>
<h3 id="作为模块运行-pip">作为模块运行 pip</h3>
<p>当您直接运行系统 <code>pip</code> 时，命令本身不会显示 <code>pip</code> 属于哪个 Python 版本。不幸的是，这意味着您可以在不注意的情况下使用 <code>pip</code> 将包安装到旧 Python 版本的站点包中。为防止这种情况发生，您可以将 <code>pip</code> 作为 Python 模块运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python3 -m pip
</span></span></code></pre></div><p>请注意，您使用 <code>python3 -m</code> 来运行 <code>pip</code> 。 <code>-m</code> 开关告诉 Python 将模块作为 <code>python3</code> 解释器的可执行文件运行。这样，您可以确保系统默认的 Python 3 版本运行 <code>pip</code> 命令。如果您想了解更多关于这种运行 <code>pip</code> 的方式，那么您可以阅读 Brett Cannon 关于<a href="https://snarky.ca/why-you-should-use-python-m-pip/">使用 python3 -m pip 的优势</a>的有见地的文章。</p>
<p>有时您可能希望更加明确并将包限制到特定项目。在这种情况下，您应该在虚拟环境中运行 <code>pip</code> 。</p>
<h3 id="在-python-虚拟环境中使用-pip">在 Python 虚拟环境中使用 pip</h3>
<p>为避免将包直接安装到系统 Python 安装中，您可以使用<a href="https://realpython.com/python-virtual-environments-a-primer/">虚拟环境</a>。虚拟环境为您的项目提供独立的 Python 解释器。您在此环境中使用的任何包都将独立于您的系统解释器。</p>
<p>这意味着您可以将项目的依赖项与其他项目和整个系统分开。</p>
<p>在虚拟环境中使用 <code>pip</code> 具有三个主要优点。你可以：</p>
<ul>
<li>确保您为手头的项目使用正确的 Python 版本</li>
<li>确保在运行 <code>pip</code> 或 <code>pip3</code> 时引用的是正确的 <code>pip</code> 实例</li>
<li>在不影响其他项目的情况下为您的项目使用特定的包版本</li>
</ul>
<p>Python 3 具有用于创建虚拟环境的内置 <code>venv</code> 模块。此模块可帮助您使用独立的 Python 安装创建虚拟环境。一旦你激活了虚拟环境，你就可以将包安装到这个环境中。</p>
<p>您安装到一个虚拟环境中的软件包与系统上的所有其他环境隔离开来。</p>
<p>您可以按照以下步骤创建虚拟环境并验证您是否在新创建的环境中使用 <code>pip</code> 模块：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\&gt;</span> python -m venv venv
</span></span><span class="line"><span class="cl">C:<span class="se">\&gt;</span> venv<span class="se">\S</span>cripts<span class="se">\a</span>ctivate.bat
</span></span><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span>  pip3 --version
</span></span><span class="line"><span class="cl">pip 21.2.3 from ...<span class="se">\l</span>ib<span class="se">\s</span>ite-packages<span class="se">\p</span>ip <span class="o">(</span>python 3.10<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span>  pip --version
</span></span><span class="line"><span class="cl">pip 21.2.3 from ...<span class="se">\l</span>ib<span class="se">\s</span>ite-packages<span class="se">\p</span>ip <span class="o">(</span>python 3.10<span class="o">)</span>
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python3 -m venv venv
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> venv/bin/activate
</span></span><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ pip3 --version
</span></span><span class="line"><span class="cl">pip 21.2.3 from .../python3.10/site-packages/pip <span class="o">(</span>python 3.10<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ pip --version
</span></span><span class="line"><span class="cl">pip 21.2.3 from .../python3.10/site-packages/pip <span class="o">(</span>python 3.10<span class="o">)</span>
</span></span></code></pre></div><p>在这里，您使用 Python 的内置 <code>venv</code> 模块创建了一个名为 <code>venv</code> 的虚拟环境。然后使用 <code>source</code> 命令激活它。 <code>venv</code> 名称周围的括号 ( <code>()</code> ) 表示您已成功激活虚拟环境。</p>
<p>最后，您检查激活的虚拟环境中 <code>pip3</code> 和 <code>pip</code> 可执行文件的版本。两者都指向相同的 <code>pip</code> 模块，因此一旦您的虚拟环境被激活，您就可以使用 <code>pip</code> 或 <code>pip3</code> 。</p>
<h3 id="出现错误时重新安装-pip">出现错误时重新安装 pip</h3>
<p>当您运行 <code>pip</code> 命令时，在某些情况下您可能会遇到错误。您的特定错误消息将取决于您的操作系统：</p>
<table>
<thead>
<tr>
<th>Operating System</th>
<th>Error Message</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows</td>
<td><code>'pip' is not recognized as an internal or external command,</code> <code>operable program or batch file.</code></td>
</tr>
<tr>
<td>Linux</td>
<td><code>bash: pip: command not found</code></td>
</tr>
<tr>
<td>macOS</td>
<td><code>zsh: command not found: pip</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：在 <code>pip</code> 命令不起作用时开始任何故障排除之前，您可以尝试使用最后带有 3 的 <code>pip3</code> 命令。</p>
</blockquote>
<p>出现如上所示的错误可能会令人沮丧，因为 <code>pip</code> 对于安装和管理外部包至关重要。 <code>pip</code> 的一些常见问题与此工具在您的系统上的安装方式有关。</p>
<p>尽管各种系统的错误消息不同，但它们都指向同一个问题：您的系统无法在您的 <code>PATH</code> 变量中列出的位置找到 <code>pip</code> 。在 Windows 上， <code>PATH</code> 是系统变量的一部分。在 macOS 和 Linux 上， <code>PATH</code> 是环境变量的一部分。您可以使用以下命令检查 <code>PATH</code> 变量的内容：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\&gt;</span> <span class="nb">echo</span> %PATH%
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="nv">$PATH</span>
</span></span></code></pre></div><p>此命令的输出将显示磁盘上操作系统查找可执行程序的位置（目录）列表。根据您的系统，位置可以用冒号 ( <code>:</code> ) 或分号 ( <code>;</code> ) 分隔。</p>
<p>默认情况下，在安装 Python 或创建虚拟环境后，包含 <code>pip</code> 可执行文件的目录应该出现在 <code>PATH</code> 中。但是，缺少 <code>pip</code> 是一个常见问题。两种支持的方法可以帮助您再次安装 <code>pip</code> 并将其添加到您的 <code>PATH</code> ：</p>
<ul>
<li><a href="https://docs.python.org/3/library/ensurepip.html#module-ensurepip">ensurepip</a> 模块</li>
<li><a href="https://github.com/pypa/get-pip">get-pip.py</a> 脚本</li>
</ul>
<p><code>ensurepip</code> 模块从 Python 3.4 开始就是标准库的一部分。添加它是为了提供一种直接的方式让您重新安装 <code>pip</code> ，例如，如果您在安装 Python 时跳过它或在某个时候卸载了 <code>pip</code> 。在下面选择您的操作系统并相应地运行 <code>ensurepip</code> ：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\&gt;</span> python -m ensurepip --upgrade
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python3 -m ensurepip --upgrade
</span></span></code></pre></div><p>如果尚未安装 <code>pip</code> ，则此命令会将其安装在您当前的 Python 环境中。如果您处于活动的虚拟环境中，则该命令会将 <code>pip</code> 安装到该环境中。否则，它会在您的系统上全局安装 <code>pip</code> 。 <code>--upgrade</code> 选项确保 <code>pip</code> 版本与 <code>ensurepip</code> 中声明的版本相同。</p>
<blockquote>
<p>注意： <code>ensurepip</code> 模块不访问互联网。 <code>ensurepip</code> 可以安装的最新版本的 <code>pip</code> 是捆绑在您环境的 Python 安装中的版本。例如，使用 Python 3.10.0 运行 <code>ensurepip</code> 将安装 <code>pip</code> 21.2.3。如果你想要更新的 <code>pip</code> 版本，那么你需要先运行 <code>ensurepip</code> 。之后，您可以手动将 <code>pip</code> 更新到其最新版本。</p>
</blockquote>
<p>修复 <code>pip</code> 安装的另一种方法是使用 <code>get-pip.py</code> 脚本。 <code>get-pip.py</code> 文件包含作为编码 <a href="https://realpython.com/python-zip-import/">ZIP 文件</a>的 <code>pip</code> 的完整副本。您可以直接从 PyPA 引导页面下载 <code>get-pip.py</code> 。一旦你的机器上有了脚本，你就可以像这样<a href="https://realpython.com/run-python-scripts/">运行 Python 脚本</a>：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\&gt;</span> python get-pip.py
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python3 get-pip.py
</span></span></code></pre></div><p>此脚本将在您当前的 Python 环境中安装最新版本的 <code>pip</code> 、 <code>setuptools</code> 和 <code>wheel</code> 。如果只想安装 <code>pip</code> ，则可以将 <code>--no-setuptools</code> 和 <code>--no-wheel</code> 选项添加到命令中。</p>
<p>如果上述方法都不起作用，那么可能值得尝试为您当前的平台下载最新的 Python 版本。您可以按照 <a href="https://realpython.com/installing-python/">Python 3 安装和设置指南</a>来确保 <code>pip</code> 已正确安装并且可以正常工作。</p>
<h2 id="使用-pip-安装包">使用 pip 安装包</h2>
<p>Python 被认为是一种<a href="https://www.python.org/dev/peps/pep-0206/#id3">包含电池</a>的语言。这意味着 Python 标准库包含一组广泛的包和模块来帮助开发人员完成他们的编码项目。</p>
<p>同时，Python 有一个活跃的社区，它贡献了更广泛的包集，可以帮助您满足您的开发需求。这些包发布到 Python 包索引，也称为 PyPI（发音为 Pie Pea Eye）。</p>
<blockquote>
<p>注意：当你安装第三方包时，你必须小心。查看如何评估 Python 包的质量以获得确保您的包值得信赖的完整指南。</p>
</blockquote>
<p>PyPI 拥有广泛的包集合，包括开发框架、工具和库。其中许多包都为 Python 标准库的功能提供了友好的接口。</p>
<h3 id="使用-python-包索引-pypi">使用 Python 包索引 (PyPI)</h3>
<p>PyPI 托管的众多包之一称为 <code>requests</code> 。 <code>requests</code> 库通过抽象化 HTTP 请求的复杂性来帮助您与 Web 服务交互。您可以在其官方文档站点上了解有关 <code>requests</code> 的所有信息。</p>
<p>当你想在你的项目中使用 <code>requests</code> 包时，你必须先将它安装到你的环境中。如果你不想把它安装在你的系统 Python site-packages 中，那么你可以先创建一个虚拟环境，如上所示。</p>
<p>创建虚拟环境并激活它后，命令行提示符会在括号内显示虚拟环境的名称。您从现在开始执行的任何 <code>pip</code> 命令都将在您的虚拟环境中执行。</p>
<p>要安装包， <code>pip</code> 提供了一个 <code>install</code> 命令。您可以运行它来安装 <code>requests</code> 包：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip install requests
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip install requests
</span></span></code></pre></div><p>在此示例中，您运行 <code>pip</code> 和 <code>install</code> 命令，后跟要安装的包的名称。 <code>pip</code> 命令在 PyPI 中查找包，解析其依赖关系，并在当前 Python 环境中安装所有内容，以确保 <code>requests</code> 能够正常工作。</p>
<p><code>pip install &lt;package&gt;</code> 命令总是寻找最新版本的包并安装它。它还搜索包元数据中列出的依赖项并安装它们以确保包具有所需的所有要求。</p>
<p>也可以在一个命令中安装多个包：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip install rptree codetiming
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip install rptree codetiming
</span></span></code></pre></div><p>通过在 <code>pip install</code> 命令中链接包 <code>rptree</code> 和 <code>codetiming</code> ，您可以同时安装这两个包。您可以向 <code>pip install</code> 命令添加任意数量的包。在这种情况下， <code>requirements.txt</code> 文件可以派上用场。在本教程的后面，您将学习如何使用 <code>requirements.txt</code> 文件一次安装多个包。</p>
<blockquote>
<p>注意：除非包的特定版本号与本教程相关，否则您会注意到版本字符串采用通用形式 <code>x.y.z</code> 。这是一种占位符格式，可以代表 <code>3.1.4</code> 、 <code>2.9</code> 或任何其他版本号。当您继续操作时，终端中的输出将显示您的实际包版本号。</p>
</blockquote>
<p>您可以使用 <code>list</code> 命令显示环境中安装的包及其版本号：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip list
</span></span><span class="line"><span class="cl">Package            Version
</span></span><span class="line"><span class="cl">------------------ ---------
</span></span><span class="line"><span class="cl">certifi            x.y.z
</span></span><span class="line"><span class="cl">charset-normalizer x.y.z
</span></span><span class="line"><span class="cl">codetiming         x.y.z
</span></span><span class="line"><span class="cl">idna               x.y.z
</span></span><span class="line"><span class="cl">pip                x.y.z
</span></span><span class="line"><span class="cl">requests           x.y.z
</span></span><span class="line"><span class="cl">rptree             x.y.z
</span></span><span class="line"><span class="cl">setuptools         x.y.z
</span></span><span class="line"><span class="cl">urllib3            x.y.z
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip list
</span></span><span class="line"><span class="cl">Package            Version
</span></span><span class="line"><span class="cl">------------------ ---------
</span></span><span class="line"><span class="cl">certifi            x.y.z
</span></span><span class="line"><span class="cl">charset-normalizer x.y.z
</span></span><span class="line"><span class="cl">idna               x.y.z
</span></span><span class="line"><span class="cl">pip                x.y.z
</span></span><span class="line"><span class="cl">requests           x.y.z
</span></span><span class="line"><span class="cl">setuptools         x.y.z
</span></span><span class="line"><span class="cl">urllib3            x.y.z
</span></span></code></pre></div><p><code>pip list</code> 命令呈现一个表格，显示当前环境中所有已安装的包。上面的输出显示了使用 <code>x.y.z</code> 占位符格式的包的版本。当您在您的环境中运行 <code>pip list</code> 命令时， <code>pip</code> 会显示您为每个包安装的特定版本号。</p>
<p>现在您已经安装了 <code>requests</code> 及其依赖项，您可以像导入 Python 代码中的任何其他常规包一样导入它。启动交互式 Python 解释器并导入 <code>requests</code> 包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">requests</span><span class="o">.</span><span class="n">__version__</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;x.y.z&#34;</span>
</span></span></code></pre></div><p>启动交互式 Python 解释器后，您导入了 <code>requests</code> 模块。通过调用 <code>requests.__version__</code> ，您验证了您在虚拟环境中使用了 <code>requests</code> 模块。</p>
<h3 id="使用自定义包索引">使用自定义包索引</h3>
<p>默认情况下， <code>pip</code> 使用 PyPI 来查找包。但 <code>pip</code> 还为您提供了定义自定义包索引的选项。</p>
<p>当 PyPI 域在您的网络上被阻止或者如果您想要使用非公开可用的包时，将 <code>pip</code> 与自定义索引一起使用会很有帮助。</p>
<p>有时系统管理员还创建自己的内部包索引，以更好地控制哪些包版本可供公司网络上的 <code>pip</code> 用户使用。</p>
<p>自定义包索引必须符合 <a href="https://www.python.org/dev/peps/pep-0503/">PEP 503 – 简单存储库 API</a> 才能与 <code>pip</code> 一起使用。您可以通过访问 <a href="https://pypi.org/simple/">PyPI 简单索引</a>了解这样一个 <a href="https://en.wikipedia.org/wiki/API">API（应用程序编程接口）</a>的外观——但请注意，这是一个包含大量难以解析内容的大页面。任何遵循相同 API 的自定义索引都可以使用 <code>--index-url</code> 选项作为目标。除了输入 <code>--index-url</code> ，您还可以使用 <code>-i</code> 速记。</p>
<p>例如，要从 TestPyPI 包索引安装 <code>rptree</code> 工具，您可以运行以下命令：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip install -i https://test.pypi.org/simple/ rptree
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip install -i https://test.pypi.org/simple/ rptree
</span></span></code></pre></div><p>使用 <code>-i</code> 选项，您告诉 <code>pip</code> 查看不同的包索引而不是默认的 PyPI。在这里，您从 TestPyPI 而不是 PyPI 安装 <code>rptree</code> 。您可以使用 TestPyPI 微调 Python 包的发布过程，而不会弄乱 PyPI 上的生产包索引。</p>
<p>如果需要永久使用替代索引，则可以在 <code>pip</code> <a href="https://pip.pypa.io/en/stable/topics/configuration/">配置文件</a>中设置 <code>index-url</code> 选项。该文件名为 <code>pip.conf</code> ，您可以通过运行以下命令找到它的位置：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip config list -vv
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip config list -vv
</span></span></code></pre></div><p>使用 <code>pip config list</code> 命令，您可以列出活动配置。当您设置了自定义配置时，此命令仅输出一些内容。否则，输出为空。这就是加法 <code>--verbose</code> 或 <code>-vv</code> 选项会有所帮助的时候。添加 <code>-vv</code> 时， <code>pip</code> 会向您显示它在何处查找不同的配置级别。</p>
<p>如果要添加 <code>pip.conf</code> 文件，则可以选择 <code>pip config list -vv</code> 列出的位置之一。带有自定义包索引的 <code>pip.conf</code> 文件如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># pip.conf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">global</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">index-url</span> <span class="p">=</span> <span class="nx">https</span><span class="err">://</span><span class="nx">test</span><span class="p">.</span><span class="nx">pypi</span><span class="p">.</span><span class="nx">org</span><span class="err">/</span><span class="nx">simple</span><span class="err">/</span>
</span></span></code></pre></div><p>当你有一个这样的 <code>pip.conf</code> 文件时， <code>pip</code> 将使用定义的 <code>index-url</code> 来查找包。使用此配置，您无需在 <code>pip install</code> 命令中使用 <code>--index-url</code> 选项来指定您只需要可以在 TestPyPI 的<a href="https://test.pypi.org/simple/">简单 API</a> 中找到的包。</p>
<h3 id="从-github-存储库安装包">从 GitHub 存储库安装包</h3>
<p>您不限于托管在 PyPI 或其他包索引上的包。 <code>pip</code> 还提供了从 <a href="https://realpython.com/python-git-github-intro/">GitHub 存储库</a>安装包的选项。但即使包托管在 PyPI 上，如 <a href="https://pypi.org/project/rptree/">Real Python 目录树生成器</a>，您也可以选择从其 Git 存储库安装它：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip install git+https://github.com/realpython/rptree
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip install git+https://github.com/realpython/rptree
</span></span></code></pre></div><p>使用 <code>git+https</code> 方案，您可以指向包含可安装包的 Git 存储库。您可以通过运行交互式 Python 解释器并导入 <code>rptree</code> 来验证您是否正确安装了包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">rptree</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">rptree</span><span class="o">.</span><span class="n">__version__</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;x.y.z&#34;</span>
</span></span></code></pre></div><p>启动交互式 Python 解释器后，导入 <code>rptree</code> 模块。通过调用 <code>rptree.__version__</code> ，您可以验证您正在使用基于虚拟环境的 <code>rptree</code> 模块。</p>
<blockquote>
<p>注意：如果您使用的是 Git 以外的版本控制系统 (VCS)， <code>pip</code> 可以满足您的要求。要了解如何将 <code>pip</code> 与 Mercurial、Subversion 或 Bazaar 一起使用，请查看 <code>pip</code> 文档的 VCS 支持章节。</p>
</blockquote>
<p>如果包未托管在 PyPI 上但具有远程 Git 存储库，则从 Git 存储库安装包会很有帮助。您指向 <code>pip</code> 的远程存储库甚至可以托管在您公司内部网上的内部 Git 服务器上。当您位于防火墙后面或对您的 Python 项目有其他限制时，这会很有用。</p>
<h3 id="以可编辑模式安装包以简化开发">以可编辑模式安装包以简化开发</h3>
<p>在您自己的包上工作时，以可编辑模式安装它是有意义的。通过这样做，您可以像在任何其他包中一样使用命令行来处理源代码。典型的工作流程是首先克隆存储库，然后使用 <code>pip</code> 将其作为可编辑包安装在您的环境中：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\&gt;</span> git clone https://github.com/realpython/rptree
</span></span><span class="line"><span class="cl">C:<span class="se">\&gt;</span> <span class="nb">cd</span> rptree
</span></span><span class="line"><span class="cl">C:<span class="se">\r</span>ptree&gt; python3 -m venv venv
</span></span><span class="line"><span class="cl">C:<span class="se">\r</span>ptree&gt; venv<span class="se">\S</span>cripts<span class="se">\a</span>ctivate.bat
</span></span><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\r</span>ptree&gt; python -m pip install -e .
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git clone https://github.com/realpython/rptree
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> rptree
</span></span><span class="line"><span class="cl">$ python3 -m venv venv
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> venv/bin/activate
</span></span><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip install -e .
</span></span></code></pre></div><p>使用上面的命令，您将 <code>rptree</code> 包安装为可编辑模块。以下是您刚刚执行的操作的逐步细分：</p>
<ul>
<li>
<p>第 1 行克隆了 <code>rptree</code> 包的 Git 存储库。</p>
</li>
<li>
<p>第 2 行将工作目录更改为 <code>rptree/</code> 。</p>
</li>
<li>
<p>第 3 行和第 4 行创建并激活了一个虚拟环境。</p>
</li>
<li>
<p>第 5 行将当前目录的内容安装为一个可编辑的包。</p>
</li>
</ul>
<p><code>-e</code> 选项是 <code>--editable</code> 选项的简写。当您将 <code>-e</code> 选项与 <code>pip install</code> 一起使用时，您告诉 <code>pip</code> 您想要以可编辑模式安装包。您不使用包名称，而是使用点 ( <code>.</code> ) 将 <code>pip</code> 指向当前目录。</p>
<p>如果您没有使用 <code>-e</code> 标志， <code>pip</code> 会正常将包安装到您环境的 <code>site-packages/</code> 文件夹中。当您以可编辑模式安装包时，您将在站点包中创建一个指向本地项目路径的链接：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> ~/rptree/venv/lib/python3.10/site-packages/rptree.egg-link
</span></span></code></pre></div><p>使用带有 <code>-e</code> 标志的 <code>pip install</code> 命令只是 <code>pip install</code> 提供的众多选项之一。您可以查看 <code>pip</code> 文档中的 <a href="https://pip.pypa.io/en/stable/cli/pip_install/#examples">pip install 示例</a>。在那里，您将学习如何安装包的特定版本或将 <code>pip</code> 指向非 PyPI 的不同索引。</p>
<p>在下一节中，您将了解需求文件如何帮助您完成 <code>pip</code> 工作流。</p>
<h2 id="使用需求文件">使用需求文件</h2>
<p><code>pip install</code> 命令始终安装包的最新发布版本，但有时您的代码需要特定的包版本才能正常工作。</p>
<p>您想要创建用于开发和测试应用程序的依赖项和版本的规范，以便在生产中使用该应用程序时不会出现意外。</p>
<h3 id="固定需求">固定需求</h3>
<p>当您与其他开发人员共享您的 Python 项目时，您可能希望他们使用您正在使用的相同版本的外部包。</p>
<p>也许某个特定版本的软件包包含您所依赖的新功能，或者您正在使用的软件包版本与以前的版本不兼容。</p>
<p>这些外部依赖项也称为需求。您经常会发现 Python 项目将其需求固定在名为 <code>requirements.txt</code> 或类似文件的文件中。<a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/">需求文件格式</a>允许您精确指定应安装哪些包和版本。</p>
<p>运行 <code>pip help</code> 显示有一个 <code>freeze</code> 命令以需求格式输出已安装的包。您可以使用此命令，将输出重定向到文件以生成需求文件：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip freeze &gt; requirements.txt
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip freeze &gt; requirements.txt
</span></span></code></pre></div><p>此命令在您的工作目录中创建一个 <code>requirements.txt</code> 文件，其中包含以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">certifi</span><span class="o">==</span>x.y.z
</span></span><span class="line"><span class="cl">charset-normalizer<span class="o">==</span>x.y.z
</span></span><span class="line"><span class="cl"><span class="nv">idna</span><span class="o">==</span>x.y.z
</span></span><span class="line"><span class="cl"><span class="nv">requests</span><span class="o">==</span>x.y.z
</span></span><span class="line"><span class="cl"><span class="nv">urllib3</span><span class="o">==</span>x.y.z
</span></span></code></pre></div><p>请记住，上面显示的 <code>x.y.z</code> 是包版本的占位符格式。您的 <code>requirements.txt</code> 文件将包含真实的版本号。</p>
<p><code>freeze</code> 命令将当前安装的包的名称和版本转储到标准输出。您可以将输出重定向到一个文件，稍后您可以使用该文件将您的确切要求安装到另一个系统中。您可以随意命名需求文件。</p>
<p>但是，广泛采用的约定是将其命名为 <code>requirements.txt</code> 。</p>
<p>当你想在另一个系统中复制环境时，你可以运行 <code>pip install</code> ，使用 <code>-r</code> 开关来指定需求文件：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip install -r requirements.txt
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(venv) $ python3 -m pip install -r requirements.txt
</span></span></code></pre></div><p>在上面的命令中，您告诉 <code>pip</code> 将 <code>requirements.txt</code> 中列出的包安装到您当前的环境中。包版本将匹配 <code>requirements.txt</code> 文件包含的版本约束。您可以运行 <code>pip list</code> 来显示您刚刚安装的包及其版本号：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Package            Version
</span></span><span class="line"><span class="cl">------------------ ---------
</span></span><span class="line"><span class="cl">certifi            x.y.z
</span></span><span class="line"><span class="cl">charset-normalizer x.y.z
</span></span><span class="line"><span class="cl">idna               x.y.z
</span></span><span class="line"><span class="cl">pip                x.y.z
</span></span><span class="line"><span class="cl">requests           x.y.z
</span></span><span class="line"><span class="cl">setuptools         x.y.z
</span></span><span class="line"><span class="cl">urllib3            x.y.z
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Package            Version
</span></span><span class="line"><span class="cl">------------------ ---------
</span></span><span class="line"><span class="cl">certifi            x.y.z
</span></span><span class="line"><span class="cl">charset-normalizer x.y.z
</span></span><span class="line"><span class="cl">idna               x.y.z
</span></span><span class="line"><span class="cl">pip                x.y.z
</span></span><span class="line"><span class="cl">requests           x.y.z
</span></span><span class="line"><span class="cl">setuptools         x.y.z
</span></span><span class="line"><span class="cl">urllib3            x.y.z
</span></span></code></pre></div><p>现在您可以分享您的项目了！您可以将 <code>requirements.txt</code> 提交到像 Git 这样的版本控制系统中，并使用它在其他机器上复制相同的环境。但是等等，如果为这些软件包发布新的更新会怎样？</p>
<h3 id="微调需求">微调需求</h3>
<p>对包的版本和依赖项进行硬编码的问题在于，包会经常更新错误和安全修复程序。您可能希望在更新发布后立即利用这些更新。</p>
<p>需求文件格式允许您使用比较运算符指定依赖项版本，这为您提供了一些灵活性，以确保更新包，同时仍然定义包的基本版本。</p>
<p>在您喜欢的编辑器中打开 <code>requirements.txt</code> ，并将相等运算符 ( <code>==</code> ) 转换为大于或等于运算符 ( <code>&gt;=</code> )，如下例所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># requirements.txt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">certifi&gt;<span class="o">=</span>x.y.z
</span></span><span class="line"><span class="cl">charset-normalizer&gt;<span class="o">=</span>x.y.z
</span></span><span class="line"><span class="cl">idna&gt;<span class="o">=</span>x.y.z
</span></span><span class="line"><span class="cl">requests&gt;<span class="o">=</span>x.y.z
</span></span><span class="line"><span class="cl">urllib3&gt;<span class="o">=</span>x.y.z
</span></span></code></pre></div><p>您可以将比较运算符更改为 <code>&gt;=</code> 以告知 <code>pip</code> 安装已发布的精确或更高版本。当您使用 <code>requirements.txt</code> 文件设置新环境时， <code>pip</code> 会查找满足要求的最新版本并进行安装。</p>
<p>接下来，您可以通过运行带有 <code>--upgrade</code> 开关或 <code>-U</code> 简写的 <code>install</code> 命令来升级需求文件中的包：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip install -U -r requirements.txt
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip install -U -r requirements.txt
</span></span></code></pre></div><p>如果列出的软件包有新版本可用，则该软件包将被升级。</p>
<p>在理想的世界中，新版本的包将向后兼容并且永远不会引入新的错误。不幸的是，新版本可能会引入会破坏您的应用程序的更改。为了微调您的需求，需求文件语法支持额外的<a href="https://www.python.org/dev/peps/pep-0440/#version-specifiers">版本说明符</a>。</p>
<p>想象一下， <code>requests</code> 的新版本 <code>3.0</code> 已发布，但引入了破坏应用程序的不兼容更改。您可以修改需求文件以防止安装 <code>3.0</code> 或更高版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># requirements.txt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">certifi</span><span class="o">==</span>x.y.z
</span></span><span class="line"><span class="cl">charset-normalizer<span class="o">==</span>x.y.z
</span></span><span class="line"><span class="cl"><span class="nv">idna</span><span class="o">==</span>x.y.z
</span></span><span class="line"><span class="cl">requests&gt;<span class="o">=</span>x.y.z, &lt;3.0
</span></span><span class="line"><span class="cl"><span class="nv">urllib3</span><span class="o">==</span>x.y.z
</span></span></code></pre></div><p>更改 <code>requests</code> 包的版本说明符可确保不会安装任何大于或等于 <code>3.0</code> 的版本。 <code>pip</code> 文档提供了有关<a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/">需求文件格式</a>的大量信息，您可以查阅它以了解更多信息。</p>
<h3 id="分离生产和开发依赖">分离生产和开发依赖</h3>
<p>并非您在应用程序开发期间安装的所有包都是生产依赖项。例如，您可能想要测试您的应用程序，因此您需要一个测试框架。一个流行的测试框架是 <code>pytest</code> 。你想在开发环境中安装它，但不想在生产环境中安装它，因为它不是生产依赖项。</p>
<p>您创建第二个需求文件 <code>requirements_dev.txt</code> ，以列出用于设置开发环境的其他工具：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># requirements_dev.txt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pytest&gt;<span class="o">=</span>x.y.z
</span></span></code></pre></div><p>拥有两个需求文件将要求您使用 <code>pip</code> 来安装它们， <code>requirements.txt</code> 和 <code>requirements_dev.txt</code> 。幸运的是， <code>pip</code> 允许您在需求文件中指定其他参数，因此您可以修改 <code>requirements_dev.txt</code> 以同时安装来自生产环境的 <code>requirements.txt</code> 文件中的需求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># requirements_dev.txt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-r requirements.txt
</span></span><span class="line"><span class="cl">pytest&gt;<span class="o">=</span>x.y.z
</span></span></code></pre></div><p>请注意，您使用相同的 <code>-r</code> 开关来安装生产 <code>requirements.txt</code> 文件。现在，在您的开发环境中，您只需运行这条命令即可安装所有要求：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip install -r requirements_dev.txt
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip install -r requirements_dev.txt
</span></span></code></pre></div><p>因为 <code>requirements_dev.txt</code> 包含 <code>-r requirements.txt</code> 行，所以您不仅要安装 <code>pytest</code> ，还要安装 <code>requirements.txt</code> 的固定要求。在生产环境中，仅安装生产要求就足够了：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip install -r requirements.txt
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip install -r requirements.txt
</span></span></code></pre></div><p>使用此命令，您可以安装 <code>requirements.txt</code> 中列出的要求。与您的开发环境相比，您的生产环境不会安装 <code>pytest</code> 。</p>
<h3 id="为生产环境冷冻需求">为生产环境冷冻需求</h3>
<p>您创建了生产和开发需求文件并将它们添加到源代码管理中。这些文件使用灵活的版本说明符来确保您利用依赖项发布的错误修复。</p>
<p>您还测试了您的应用程序，现在可以将其部署到生产环境中了。</p>
<p>您知道所有测试都通过了并且应用程序可以使用您在开发过程中使用的依赖项，因此您可能希望确保将相同版本的依赖项部署到生产环境中。</p>
<p>当前的版本说明符不能保证将相同的版本部署到生产环境中，因此您希望在发布项目之前冻结生产需求。</p>
<p>根据当前需求完成开发后，创建当前项目新版本的工作流程如下所示：</p>
<table>
<thead>
<tr>
<th>Step</th>
<th>Command</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>pytest</code></td>
<td>运行您的测试并验证您的代码是否正常工作。</td>
</tr>
<tr>
<td>2</td>
<td><code>pip install -U -r requirements.txt</code></td>
<td>将您的要求升级到与 <code>requirements.txt</code> 文件中的约束相匹配的版本。</td>
</tr>
<tr>
<td>3</td>
<td><code>pytest</code></td>
<td>运行您的测试并考虑降级任何向您的代码引入错误的依赖项。</td>
</tr>
<tr>
<td>4</td>
<td><code>pip freeze &gt; requirements_lock.txt</code></td>
<td>项目正常运行后，将依赖项冻结到 <code>requirements_lock.txt</code> 文件中。</td>
</tr>
</tbody>
</table>
<p>使用这样的工作流程， <code>requirements_lock.txt</code> 文件将包含准确的版本说明符，可用于复制您的环境。您已确保当您的用户将 <code>requirements_lock.txt</code> 中列出的软件包安装到他们自己的环境中时，他们将使用您希望他们使用的版本。</p>
<p>冻结您的需求是确保您的 Python 项目在您的用户环境中以与在您的环境中相同的方式工作的重要步骤。</p>
<h2 id="使用-pip-卸载软件包">使用 pip 卸载软件包</h2>
<p>有时，您必须卸载一个包。要么你找到了一个更好的库来替换它，要么它是你不需要的东西。卸载软件包可能有点棘手。</p>
<p>请注意，当您安装 <code>requests</code> 时，您也获得了 <code>pip</code> 来安装其他依赖项。安装的包越多，多个包依赖相同依赖项的可能性就越大。这就是 <code>pip</code> 中的 <code>show</code> 命令派上用场的地方。</p>
<p>在卸载包之前，请确保为该包运行 <code>show</code> 命令：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip show requests
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Name: requests
</span></span><span class="line"><span class="cl">Version: 2.26.0
</span></span><span class="line"><span class="cl">Summary: Python HTTP <span class="k">for</span> Humans.
</span></span><span class="line"><span class="cl">Home-page: https://requests.readthedocs.io
</span></span><span class="line"><span class="cl">Author: Kenneth Reitz
</span></span><span class="line"><span class="cl">Author-email: me@kennethreitz.org
</span></span><span class="line"><span class="cl">License: Apache 2.0
</span></span><span class="line"><span class="cl">Location: .../python3.9/site-packages
</span></span><span class="line"><span class="cl">Requires: certifi, idna, charset-normalizer, urllib3
</span></span><span class="line"><span class="cl">Required-by:
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip show requests
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Name: requests
</span></span><span class="line"><span class="cl">Version: 2.26.0
</span></span><span class="line"><span class="cl">Summary: Python HTTP <span class="k">for</span> Humans.
</span></span><span class="line"><span class="cl">Home-page: https://requests.readthedocs.io
</span></span><span class="line"><span class="cl">Author: Kenneth Reitz
</span></span><span class="line"><span class="cl">Author-email: me@kennethreitz.org
</span></span><span class="line"><span class="cl">License: Apache 2.0
</span></span><span class="line"><span class="cl">Location: .../python3.9/site-packages
</span></span><span class="line"><span class="cl">Requires: certifi, idna, charset-normalizer, urllib3
</span></span><span class="line"><span class="cl">Required-by:
</span></span></code></pre></div><p>注意最后两个字段， <code>Requires</code> 和 <code>Required-by</code> 。 <code>show</code> 命令告诉您 <code>requests</code> 需要 <code>certifi</code> 、 <code>idna</code> 、 <code>charset-normalizer</code> 和 <code>urllib3</code> 。您可能也想卸载它们。请注意， <code>requests</code> 不是任何其他包所必需的。所以卸载它是安全的。</p>
<p>您应该针对所有 <code>requests</code> 依赖项运行 <code>show</code> 命令，以确保没有其他库也依赖于它们。一旦了解了要卸载的包的依赖顺序，就可以使用 <code>uninstall</code> 命令删除它们：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip uninstall certifi
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip uninstall certifi
</span></span></code></pre></div><p><code>uninstall</code> 命令显示将要删除的文件并要求确认。如果您确定要删除该包，因为您已经检查了它的依赖关系并且知道没有其他东西在使用它，那么您可以传递一个 <code>-y</code> 开关来抑制文件列表和确认对话框：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip uninstall certifi -y
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip uninstall certifi -y
</span></span></code></pre></div><p>这里卸载 <code>urllib3</code> 。使用 <code>-y</code> 开关，您可以取消询问您是否要卸载此包的确认对话框。</p>
<p>在一次调用中，您可以指定要卸载的所有包：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip uninstall -y charset-normalizer idna requests
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip uninstall -y charset-normalizer idna requests
</span></span></code></pre></div><p>您可以将多个包传递给 <code>pip uninstall</code> 命令。如果您没有添加任何额外的开关，那么您需要确认卸载每个包。通过 <code>-y</code> 开关，您可以在没有任何确认对话框的情况下将它们全部卸载。</p>
<p>您还可以通过提供 <code>-r &lt;requirements file&gt;</code> 选项来卸载需求文件中列出的所有包。此命令将提示对每个包的确认请求，但您可以使用 <code>-y</code> 开关抑制它：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> C:<span class="se">\&gt;</span> python -m pip uninstall -r requirements.txt -y
</span></span></code></pre></div><p>Linux + macOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>venv<span class="o">)</span> $ python3 -m pip uninstall -r requirements.txt -y
</span></span></code></pre></div><p>请记住始终检查要卸载的软件包的依赖项。您可能想卸载所有依赖项，但卸载其他人使用的包会破坏您的工作环境。因此，您的项目可能无法再正常工作。</p>
<p>如果您在虚拟环境中工作，那么创建一个新的虚拟环境可能会更省力。然后你可以安装你需要的包而不是尝试卸载你不需要的包。但是，当您需要从系统 Python 安装中卸载包时， <code>pip uninstall</code> 会非常有用。如果您不小心在系统范围内安装了软件包，使用 <code>pip uninstall</code> 是整理系统的好方法。</p>
<h2 id="探索-pip-的替代品">探索 pip 的替代品</h2>
<p>Python 社区提供了出色的工具和库，供您在 <code>pip</code> 之外使用。这些包括尝试简化和改进包管理的 <code>pip</code> 的替代方案。</p>
<p>以下是一些可用于 Python 的其他包管理工具：</p>
<table>
<thead>
<tr>
<th>Tool</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://conda.io/en/latest/">Conda</a></td>
<td>Conda 是许多语言（包括 Python）的包、依赖项和环境管理器。它来自 Anaconda，Anaconda 最初是 Python 的数据科学包。因此，它被广泛用于数据科学和机器学习应用程序。 Conda 运行自己的索引来托管兼容包。</td>
</tr>
<tr>
<td><a href="https://python-poetry.org/">Poetry</a></td>
<td>如果您来自 JavaScript 和 npm，Poetry 对您来说会非常熟悉。 Poetry 超越了包管理，帮助您为您的应用程序和库构建分发并将它们部署到 PyPI。</td>
</tr>
<tr>
<td><a href="https://github.com/pypa/pipenv">Pipenv</a></td>
<td>Pipenv 是另一个包管理工具，它将虚拟环境和包管理合并到一个工具中。 <a href="https://realpython.com/pipenv-guide/">Pipenv：新 Python 打包工具指南</a>是开始学习 Pipenv 及其包管理方法的好地方。</td>
</tr>
</tbody>
</table>
<p>只有 <code>pip</code> 捆绑在标准 Python 安装中。如果您想使用上面列出的任何替代方案，则必须按照其文档中的安装指南进行操作。有这么多选项，您一定会找到适合您的编程之旅的工具！</p>
<h2 id="结论">结论</h2>
<p>许多 Python 项目使用 <code>pip</code> 包管理器来管理它们的依赖项。它包含在 Python 安装程序中，是 Python 中依赖管理的重要工具。</p>
<p><strong>在本教程中，您学习了如何：</strong></p>
<ul>
<li>在您的工作环境中设置并运行 <code>pip</code></li>
<li>修复与使用 <code>pip</code> 相关的常见错误</li>
<li>使用 <code>pip</code> 安装和卸载包</li>
<li>定义项目和应用程序的要求</li>
<li>在需求文件中固定依赖项</li>
</ul>
<p>此外，您还了解了使依赖项保持最新的重要性以及可以帮助您管理这些依赖项的 <code>pip</code> 的替代方法。</p>
<p>通过仔细查看 <code>pip</code> ，您已经探索了 Python 开发工作流中的一个基本工具。使用 <code>pip</code> ，您可以安装和管理您在 <a href="https://pypi.org/">PyPI</a> 上找到的任何其他包。您可以使用来自其他开发人员的外部包作为需求，并专注于使您的项目独一无二的代码。</p>
<p>原文链接：<a href="https://realpython.com/what-is-pip">https://realpython.com/what-is-pip</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-21｜Python之禅、产品经理被优化、端午节送节</title>
      <link>https://blog.chensoul.com/posts/2023/05/31/weekly_review_21/</link>
      <pubDate>Wed, 31 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/31/weekly_review_21/</guid>
      <description>前言 公司价值观 本篇是对 2023-05-22 到 2023-05-28 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 周一，休产假的产品经理回来上班，得知她</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-21-00.jpg" alt="weekly-review-21-00"  />
</p>
<p>
  <center><i>公司价值观</i></center>
</p>
<p>本篇是对 <code>2023-05-22</code> 到 <code>2023-05-28</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>周一，休产假的产品经理回来上班，得知她被优化之后，内心有些不舍和伤感。中午，组长请大家一起吃了饭。晚上，产品经理交割完办公用户之后，就没来上班了。自此，过完年后，公司至少有三位女同事修完产假之后就离职了，有的是主动，更多的应该是被动。虽然有N+1赔偿，但是，这个社会对女性还是不够公平。</p>
<p>还有3个月就要到端午节，老婆买了粽叶包粽子，我也动手包了一部分。虽然包的不好看，但心里还是很满足的。自己包的粽子送节，显然更有意义。结婚之后的第一个端午节，周末开车去给长辈送了端午节。看着长辈们的头发日渐斑白，不禁感叹岁月无情。趁着年轻的时候，要对身边的亲人好一些。不要等到来不及了才知道后悔。</p>
<p>这周在 docker 里部署了 Plausible ，使用过程中发现 Plausible 架构过于复杂，使用了 postgres 和 clickhouse 数据库，docker-compose 启动了4个容器，所以最后还是放弃了使用 Plausible。umami 的 postgres 数据库只包括几张表，操作起来比较容易，比如：时不时地，我会把来自 localhost 的访问记录删除掉，这样统计数据更加真实准确。</p>
<h2 id="python之禅">Python之禅</h2>
<p>这是最近的一个 PyTricks：在 python REPL 里面输入 <code>import this</code> 会输出 <code>The Zen of Python, by Tim Peters</code>：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-21-03.png" alt="weekly-review-21-03"  />
</p>
<p>英文：</p>
<blockquote>
<p>The Zen of Python, by Tim Peters</p>
<p>Beautiful is better than ugly.</p>
<p>Explicit is better than implicit.</p>
<p>Simple is better than complex.</p>
<p>Complex is better than complicated.</p>
<p>Flat is better than nested.</p>
<p>Sparse is better than dense.</p>
<p>Readability counts.</p>
<p>Special cases aren&rsquo;t special enough to break the rules.</p>
<p>Although practicality beats purity.</p>
<p>Errors should never pass silently.</p>
<p>Unless explicitly silenced.</p>
<p>In the face of ambiguity, refuse the temptation to guess.</p>
<p>There should be one&ndash; and preferably only one &ndash;obvious way to do it.</p>
<p>Although that way may not be obvious at first unless you&rsquo;re Dutch.</p>
<p>Now is better than never.</p>
<p>Although never is often better than <em>right</em> now.</p>
<p>If the implementation is hard to explain, it&rsquo;s a bad idea.</p>
<p>If the implementation is easy to explain, it may be a good idea.</p>
<p>Namespaces are one honking great idea &ndash; let&rsquo;s do more of those!</p>
</blockquote>
<p>中文：</p>
<blockquote>
<p>Python之禅，作者为Tim Peters</p>
<p>美丽胜于丑陋。</p>
<p>明确胜于含蓄。</p>
<p>简单胜于复杂。</p>
<p>复杂胜于繁琐。</p>
<p>扁平胜于嵌套。</p>
<p>宽松胜于紧凑。</p>
<p>可读性很重要。</p>
<p>特例并不足以打破规则。</p>
<p>虽然实用性优先于纯粹性。</p>
<p>错误绝不能悄悄地通过。</p>
<p>除非明确地沉默。</p>
<p>面对模棱两可，拒绝猜测。</p>
<p>应该有一种&ndash; 最好只有一种 &ndash;显而易见的方法来做到这一点。</p>
<p>虽然这种方法可能一开始并不明显，除非你是荷兰人。</p>
<p>现在比永远好。</p>
<p>虽然永远不如 <em>现在就做</em> 好。</p>
<p>如果实现很难解释，那这是个坏主意。</p>
<p>如果实现容易解释，那可能是个好主意。</p>
<p>名称空间是一个非常好的想法 &ndash; 让我们做更多的这样的事情！</p>
</blockquote>
<p>Python之禅是一组编写Python语言程序的指导原则，由著名Python开发者Tim Peters撰写而成，这些格言反映了Python社区的哲学。</p>
<p>第一原则“美丽胜于丑陋”强调编写美学上令人愉悦且易于阅读的代码的重要性，包括使用适当的缩进、命名规范和格式化。</p>
<p>第二原则“明确胜于含蓄”强调在代码中要清晰明确，避免捷径并尽可能具体地定义代码。</p>
<p>第三原则“简单胜于复杂”强调编写易于理解和维护的代码的重要性，包括避免不必要的复杂性并尽可能使用简单的解决方案。</p>
<p>第四原则“复杂胜于繁琐”强调在必要时使用复杂的解决方案，但避免过度复杂。</p>
<p>第五原则“扁平胜于嵌套”强调保持代码简单，避免深度嵌套结构。</p>
<p>第六原则“宽松胜于紧凑”强调使用空格和格式化使代码更易读。</p>
<p>第七原则“可读性很重要”强调编写易于阅读和理解的代码的重要性。</p>
<p>第八原则“特例并不足以打破规则”强调即使在可能会偏离规则的情况下，也要遵循最佳实践和已有约定。</p>
<p>第九原则“虽然实用性优先于纯粹性”强调平衡实用考虑与对优雅和纯粹代码的渴望。</p>
<p>第十原则“错误绝不能悄悄地通过”强调捕捉和处理代码中的错误，而不是忽略它们。</p>
<p>第十一原则“除非明确地沉默”强调在适当情况下允许有意地消除错误信息。</p>
<p>第十二原则“面对模棱两可，拒绝猜测”强调要在代码中清晰明确，即使在存在歧义或不确定性的情况下也要如此。</p>
<p>第十三原则“应该有一种&ndash; 最好只有一种 &ndash;显而易见的方法来做到这一点”强调遵循已有的约定和规范，避免不必要的复杂或曲折的解决方案。</p>
<p>第十四原则“虽然这种方法可能一开始并不明显，除非你是荷兰人”是对Python的创建者Guido van Rossum是荷兰人这一事实的玩味性致敬。</p>
<p>第十五原则“现在比永远好”强调采取行动并推进你的代码，而不是拖延或拖沓。</p>
<p>第十六原则“虽然永远不如 <em>现在就做</em> 好”强调要花时间仔细考虑你的代码，避免匆忙解决可能不是最优解的问题。</p>
<p>第十七原则“如果实现很难解释，那这是个坏主意”强调编写易于理解和解释给他人的代码的重要性。</p>
<p>第十八原则“如果实现容易解释，那可能是个好主意”强调编写简单明了、易于解释的代码的重要性。</p>
<p>第十九原则“名称空间是一个非常好的想法 &ndash; 让我们做更多的这样的事情！”强调使用名称空间以清晰易懂的方式组织和结构化你的代码。名称空间有助于避免命名冲突，并使查找和重用代码更容易。</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 1939 元，明细如下：</p>
<ul>
<li>5月28日：1064元，加油充值1000元</li>
<li>5月27日：642元，端午节送节买酒540元</li>
<li>5月26日：173元</li>
<li>5月25日：17元</li>
<li>5月24日：7元</li>
<li>5月23日：20元</li>
<li>5月22日：16元</li>
</ul>
<h2 id="健身">健身</h2>
<blockquote>
<p>我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2个省份 2个城市。更多跑步数据在<a href="https://run.chensoul.com/">跑步</a>主页。</p>
</blockquote>
<p>本周跑步 39 公里，最长跑步距离为 6 公里。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-21-05.png" alt="weekly-review-21-05"  />
</p>
<p>明细数据如下：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-21-06.png" alt="weekly-review-21-06"  />
</p>
<p>5月份即将结束，目前这个月跑了 24天，累计 178 公里，比 4月的125公里多了 53 公里。再跑个12公里，这个月跑步里程就可以达到190公里了，给自己加油！最长连续跑步时间为 7 天，每次都是到了周末就中断了，有点遗憾。回过头来想想，跑步是一个长期的事情，比起跑的远，更重要的是跑的久。争取每天都跑，不管跑几公里，只要坚持下去就是成功。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-21-04.png" alt="weekly-review-21-04"  />
</p>
<h2 id="工作">工作</h2>
<p>最近在学习的内容清单：</p>
<ul>
<li><a href="https://github.com/clxering/Effective-Java-3rd-edition-Chinese-English-bilingual/tree/dev">Effective Java（第 3 版）</a></li>
<li><a href="https://java-design-patterns.com/zh/">Java Design Patterns (中文)</a></li>
<li><a href="https://realpython.com/">Real Python</a></li>
</ul>
<p>本周完成四篇博客：</p>
<ul>
<li><a href="/posts/2023/05/26/always-override-tostring/">《Effective Java 3》笔记12：当覆盖 equals 方法时，总要覆盖 hashCode 方法</a></li>
<li><a href="/posts/2023/05/26/override-clone-judiciously/">《Effective Java 3》笔记13：明智地覆盖 clone 方法</a></li>
<li><a href="/posts/2023/05/26/consider-implementing-comparable/">《Effective Java 3》笔记14：考虑实现 Comparable 接口</a></li>
<li><a href="/posts/2023/05/26/java-design-patterns-active-object/">Java设计模式：Active Object</a></li>
</ul>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-21-07.png" alt="weekly-review-21-07"  />
</p>
<p>至此，《Effective Java 3》第三章学习完了。第三章介绍了Java中对象的创建和销毁，其中第三章讲述了所有对象通用的方法，主要内容如下：</p>
<ol>
<li>equals方法：用于比较两个对象是否相等，需要遵循一些通用约定，包括自反性、对称性、传递性、一致性和非空性等。</li>
<li>hashCode方法：用于返回对象的哈希码，需要与equals方法一起实现，保证相等的对象具有相等的哈希码。</li>
<li>toString方法：用于返回对象的字符串表示形式，方便调试和日志记录等。</li>
<li>clone方法：用于复制对象，需要实现Cloneable接口，并覆盖Object类中的clone方法。</li>
<li>finalize方法：用于在对象被垃圾回收前执行一些清理操作，但是该方法的使用非常危险，应该尽量避免使用。</li>
</ol>
<p>本章重点介绍了所有对象通用的方法，这些方法在Java中非常重要，需要程序员掌握。equals和hashCode方法是一对重要的方法，需要同时实现，保证对象的相等和哈希码的正确性。toString方法可以方便地输出对象的信息，方便调试和日志记录等。clone方法可以用于复制对象，但需要注意实现Cloneable接口，并覆盖Object类中的clone方法。最后，finalize方法虽然可以用于对象清理，但是使用非常危险，应该尽量避免使用。</p>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中。我写了一个 python 脚本从 memos读取最近一周的 memos 记录。</p>
<ul>
<li>📌<code>2023-05-27</code> 365资讯简报，每天精选15条热点新闻简报1条微语，每天一分钟，知晓天下事！  2023年5月26日 星期五 农历四月初八  1、工信部等十四部门：部署推进新一轮电信基础设施共建共享工作。  2、两高两部：对在校园等场所对未成年人实施猥亵等犯罪的，加重处罚。  3、国家疾控局：4月全国报告法定传染病超210万例。  4、集体婚礼走红，民政部推行婚俗改革，高价彩礼得到有效遏制。  5、广东出台办法：失信联合惩戒对象不得报名参加事业单位招聘。  6、北京：新冠连续4周列传染病榜首，上周报告发病数是4月底的近4倍。  7、天津：在津无房家庭首次公积金贷款还清后，仍可按首套房贷款。  8、上海部分社区开打mRNA新冠疫苗，可通过“健康云”预约。  9、17级超强台风&quot;玛娃&quot;已成今年以来全球风王，下周将影响我国南方。  10、长城汽车公开举报比亚迪：两款车型污染物排放不达标，比亚迪回应：检测报告无效，反对任何形式不正当竞争。  11、微信电脑版新增锁定功能，只能通过手机端解锁。  12、韩自研运载火箭“世界”号载星发射成功。  13、造假数量超2亿件！最长可追溯40年前！本田合资零部件厂商承认造假。  14、普京：俄罗斯正减少不友好国家货币在贸易结算中的份额。  15、美情报披露：克宫遭无人机袭击幕后黑手为乌克兰。  【微语】真正的贫穷，不是金钱上的匮乏，而是认知上的贫瘠。  新闻来源：<a href="https://www.163.com/dy/article/I5L6PQL30534QBVQ.html?spss=dy_author">https://www.163.com/dy/article/I5L6PQL30534QBVQ.html?spss=dy_author</a>  <code>#每日早报</code> <code>#memos</code></li>
<li>📌<code>2023-05-26</code> 365资讯简报，每天精选15条热点新闻简报1条微语，每天一分钟，知晓天下事！  2023年5月25日 星期四 农历四月初七  1、教育部：2023年为中西部乡镇定向免费培养本科医学生6150人。  2、中国互联网协会：警惕AI换脸新骗局，远程转账务必多重验证。  3、交通运输部在南沙群岛火艾礁、牛轭礁和南薰礁附近海域布设3座灯浮标。  4、数据显示：今年以来全国已有超40城调整首套房贷利率下限至4%以下。  5、财政部：4月份全国共销售彩票503.26亿元，同比增长62.0%。  6、吉林省印发公务接待新办法：不得安排群众迎送，公务接待工作餐每人不超120元。  7、香港：调整签证及进入许可申请流程，外佣及学生等须申报刑事记录。  8、广东海珠：举报电动车进出租屋充电等，最高奖励1万元。  9、韩国三大运营商夸大5G网速被罚336亿韩元：号称20G实际800M。  10、51岁马斯克公开回应：已确定特斯拉接班人，若我出现意外，可以确保公司继续运营下去。  11、微软发布重磅更新：Windows系统全面接入AI助手，ChatGPT内置必应搜索最新答案。  12、岸田文雄称日本正考虑设立北约联络处但不会加入北约，中方回应：不欢迎军事集团。  13、俄罗斯：俄中之间70％的跨境结算已用本币完成。  14、英国首相苏纳克拒绝停火呼吁，称乌克兰应该继续战斗。  15、俄媒：乌克兰最高将领在俄军攻击中受重伤，可能将无法继续指挥。  【微语】放弃不难，但坚持一定很酷。撑住，才有后来的一切。  新闻来源：<a href="https://www.163.com/dy/article/I5IJEHQK0534QBVQ.html?spss=dy_author">https://www.163.com/dy/article/I5IJEHQK0534QBVQ.html?spss=dy_author</a>  <code>#每日早报</code> <code>#memos</code></li>
<li>📌<code>2023-05-25</code> 365资讯简报，每天精选15条热点新闻简报1条微语，每天一分钟，知晓天下事！  2023年5月25日 星期四 农历四月初七  1、教育部：2023年为中西部乡镇定向免费培养本科医学生6150人。  2、中国互联网协会：警惕AI换脸新骗局，远程转账务必多重验证。  3、交通运输部在南沙群岛火艾礁、牛轭礁和南薰礁附近海域布设3座灯浮标。  4、数据显示：今年以来全国已有超40城调整首套房贷利率下限至4%以下。  5、财政部：4月份全国共销售彩票503.26亿元，同比增长62.0%。  6、吉林省印发公务接待新办法：不得安排群众迎送，公务接待工作餐每人不超120元。  7、香港：调整签证及进入许可申请流程，外佣及学生等须申报刑事记录。  8、广东海珠：举报电动车进出租屋充电等，最高奖励1万元。  9、韩国三大运营商夸大5G网速被罚336亿韩元：号称20G实际800M。  10、51岁马斯克公开回应：已确定特斯拉接班人，若我出现意外，可以确保公司继续运营下去。  11、微软发布重磅更新：Windows系统全面接入AI助手，ChatGPT内置必应搜索最新答案。  12、岸田文雄称日本正考虑设立北约联络处但不会加入北约，中方回应：不欢迎军事集团。  13、俄罗斯：俄中之间70％的跨境结算已用本币完成。  14、英国首相苏纳克拒绝停火呼吁，称乌克兰应该继续战斗。  15、俄媒：乌克兰最高将领在俄军攻击中受重伤，可能将无法继续指挥。  【微语】放弃不难，但坚持一定很酷。撑住，才有后来的一切。  新闻来源：<a href="https://www.163.com/dy/article/I5IJEHQK0534QBVQ.html?spss=dy_author">https://www.163.com/dy/article/I5IJEHQK0534QBVQ.html?spss=dy_author</a>  <code>#每日早报</code> <code>#memos</code></li>
<li>📌<code>2023-05-25</code>  前后端均基于 vercel 的每日早报项目 <a href="https://icodeq.com/2022/5fe2010403bb/">https://icodeq.com/2022/5fe2010403bb/</a>  <code>#memos</code></li>
<li>📌<code>2023-05-24</code> GitHub - resumejob/awesome-resume: Resume，Resume Templates，程序员简历例句，简历模版<code>#memos</code> <a href="https://github.com/resumejob/awesome-resume">https://github.com/resumejob/awesome-resume</a></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Active Object</title>
      <link>https://blog.chensoul.com/posts/2023/05/26/java-design-patterns-active-object/</link>
      <pubDate>Fri, 26 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/26/java-design-patterns-active-object/</guid>
      <description>本文主要介绍 Active Object 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计</description>
      <content:encoded><![CDATA[<p>本文主要介绍  Active Object 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="目的">目的</h2>
<p>活动对象（Active Object）是一种设计模式，其主要目的是将并发和异步处理的问题从客户端代码中分离出来，从而提高系统的性能、可靠性和可维护性。活动对象模式是一种能够帮助开发人员处理多线程、异步和并发问题的设计模式。</p>
<p>在传统的并发编程模型中，客户端代码需要直接管理线程和锁等细节，这样会导致代码复杂度和维护成本的增加，同时也容易出现各种问题，如死锁、竞态条件等。活动对象模式通过引入活动对象来解决这些问题，活动对象将客户端代码发送的消息添加到内部的消息队列中，并使用单独的线程异步处理这些消息。这种模式可以提高系统的性能和可扩展性，同时使得客户端代码更加简单和易于维护。</p>
<p>活动对象模式的目的包括：</p>
<ol>
<li>将并发和异步处理的问题从客户端代码中分离出来，从而使得客户端代码更加简单和易于维护。客户端代码只需要发送消息即可，不需要关心异步处理的细节，活动对象将并发和异步处理的问题封装起来，提供简单的接口供客户端使用。</li>
<li>提高系统的性能和可扩展性。活动对象使用单独的线程池异步处理消息，可以更好地利用系统资源，提高系统的性能和可扩展性。</li>
<li>提高系统的可靠性和健壮性。活动对象将消息添加到内部的消息队列中，避免了竞态条件和死锁等问题，从而提高了系统的可靠性和健壮性。</li>
<li>将多线程和异步处理的细节封装起来，使得客户端代码更加抽象和通用。客户端代码可以使用相同的接口来访问不同的服务，从而提高代码的复用性和可维护性。</li>
</ol>
<h2 id="解释">解释</h2>
<p>活动对象模式的核心思想是将并发和异步处理的问题从客户端代码中分离出来。具体来说，活动对象模式包含以下几个关键组件：</p>
<ol>
<li>活动对象（Active Object）：活动对象是一个封装了某种服务的对象，它将客户端代码发送的消息添加到内部的消息队列中，并使用单独的线程异步处理这些消息。活动对象通常包含一个消息队列和一个线程池，用于异步处理消息。</li>
<li>方法调用请求（Method Invocation Request）：客户端代码向活动对象发送方法调用请求，包括方法名和参数列表等信息。活动对象将方法调用请求封装为一个消息对象，并添加到内部的消息队列中。</li>
<li>消息队列（Message Queue）：消息队列是活动对象内部用于存储方法调用请求的队列。活动对象将客户端代码发送的消息添加到消息队列中，并使用单独的线程异步处理这些消息。</li>
<li>线程池（Thread Pool）：线程池是活动对象用于异步处理消息的线程池。活动对象从消息队列中取出消息，并使用线程池中的线程异步处理这些消息。</li>
</ol>
<p><strong>程序示例</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ActiveCreature</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">ActiveCreature</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">Thread</span> <span class="n">thread</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">ActiveCreature</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">requests</span><span class="o">.</span><span class="na">take</span><span class="o">().</span><span class="na">run</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">              <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">requests</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">          <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;{} is eating!&#34;</span><span class="o">,</span><span class="n">name</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">          <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;{} has finished eating!&#34;</span><span class="o">,</span><span class="n">name</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">roam</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">requests</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">          <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;{} has started to roam and the wastelands.&#34;</span><span class="o">,</span><span class="n">name</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">name</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在该示例代码中，<code>ActiveCreature</code> 类封装了一个消息队列，用于异步处理客户端代码发送的消息。具体来说，该示例代码包含以下几个关键组件：</p>
<ol>
<li><code>BlockingQueue&lt;Runnable&gt;</code> 类型的 <code>requests</code> 属性：该属性表示消息队列，用于存储客户端代码发送的消息。客户端代码可以通过 <code>eat()</code> 和 <code>roam()</code> 方法向消息队列中添加消息。</li>
<li><code>Thread</code> 类型的 <code>thread</code> 属性：该属性表示活动对象的线程，用于异步处理消息队列中的消息。</li>
<li><code>String</code> 类型的 <code>name</code> 属性：该属性表示活动对象的名称。</li>
<li><code>ActiveCreature(String name)</code> 构造方法：该方法用于创建一个活动对象，初始化消息队列和线程等属性。在该方法中，我们创建了一个新的线程，并使用 <code>requests.take().run()</code> 从消息队列中取出消息并异步处理。</li>
<li><code>eat()</code> 和 <code>roam()</code> 方法：这两个方法用于向消息队列中添加消息，表示活动对象正在吃和漫游。在这两个方法中，我们将一个 <code>Runnable</code> 对象添加到消息队列中，并在其 <code>run()</code> 方法中执行相应的操作，如输出日志等。</li>
<li><code>name()</code> 方法：该方法用于获取活动对象的名称。</li>
</ol>
<p>在总体上，该示例代码实现了活动对象模式的基本功能，将并发和异步处理的问题从客户端代码中分离出来，并提供了简单的接口供客户端调用。客户端代码只需要调用 <code>eat()</code> 和 <code>roam()</code> 方法即可，不需要关心异步处理的细节，活动对象将并发和异步处理的问题封装起来，提供简单的接口供客户端使用。</p>
<p>需要注意的是，在该示例代码中，我们使用了阻塞队列 <code>BlockingQueue&lt;Runnable&gt;</code> 来实现消息队列，该队列提供了线程安全的添加和移除操作，保证了消息的有序性和正确性。同时，在活动对象的线程中使用了 <code>requests.take().run()</code> 操作来从消息队列中取出消息并异步处理，这种方式可以保证消息的有序性和正确性，并避免了竞态条件和死锁等问题。</p>
<p>我们可以看到，任何将扩展ActiveCreature的类都将具有自己的控制线程来执行和调用方法。</p>
<p>例如，兽人类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Orc</span> <span class="kd">extends</span> <span class="n">ActiveCreature</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Orc</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，我们可以创建多个生物，例如兽人，告诉他们吃东西和散步，然后他们将在自己的控制线程上执行它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
</span></span><span class="line"><span class="cl">    <span class="n">var</span> <span class="n">app</span> <span class="o">=</span> <span class="k">new</span> <span class="n">App</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ActiveCreature</span> <span class="n">creature</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">creatures</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">creature</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Orc</span><span class="o">(</span><span class="n">Orc</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">creature</span><span class="o">.</span><span class="na">eat</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">creature</span><span class="o">.</span><span class="na">roam</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></div><h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/active-object.urm-0bce814e.png" alt="alt text"  />
</p>
<h2 id="举例">举例</h2>
<p>以下是一个简单的活动对象示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">process</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 创建一个异步任务，并将其提交到线程池中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 模拟复杂的处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 返回处理结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="s">&#34;Processed message: &#34;</span> <span class="o">+</span> <span class="n">message</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 关闭线程池
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例代码中，<code>ActiveObject</code> 类封装了一个异步处理服务，客户端代码可以使用该服务异步处理消息。<code>ActiveObject</code> 类中的 <code>process()</code> 方法接收一个消息，并将其封装为一个异步任务，然后提交到线程池中异步处理。<code>process()</code> 方法返回一个 <code>Future</code> 对象，可以用于获取异步处理的结果。在该示例代码中，异步任务只是简单地模拟了处理逻辑，实际上可以根据需要编写更加复杂的异步处理逻辑。</p>
<p>下面是一个使用 <code>ActiveObject</code> 类的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutionException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ActiveObject</span> <span class="n">activeObject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActiveObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 发送消息到活动对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">activeObject</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="s">&#34;Hello, world!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 等待异步处理完成，并获取处理结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 关闭活动对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">activeObject</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例代码中，客户端代码使用 <code>ActiveObject</code> 类异步处理了一条消息，并等待异步处理完成后获取处理结果。需要注意的是，在使用 <code>ActiveObject</code> 类时，客户端代码只需要发送消息即可，不需要关心异步处理的细节，从而使得客户端代码更加简单和易于维护。</p>
<p>下面是一个复杂的活动对象示例代码，该代码模拟了一个银行账户系统，支持存款、取款和查询余额等操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.CompletableFuture</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BankAccount</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">balance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">BankAccount</span><span class="o">(</span><span class="kt">double</span> <span class="n">initialBalance</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">balance</span> <span class="o">=</span> <span class="n">initialBalance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="nf">deposit</span><span class="o">(</span><span class="kt">double</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CompletableFuture</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">balance</span> <span class="o">+=</span> <span class="n">amount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">future</span><span class="o">.</span><span class="na">complete</span><span class="o">(</span><span class="n">balance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="nf">withdraw</span><span class="o">(</span><span class="kt">double</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CompletableFuture</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">future</span><span class="o">.</span><span class="na">complete</span><span class="o">(</span><span class="n">balance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">future</span><span class="o">.</span><span class="na">completeExceptionally</span><span class="o">(</span><span class="k">new</span> <span class="n">InsufficientFundsException</span><span class="o">(</span><span class="s">&#34;Insufficient funds&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="nf">getBalance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CompletableFuture</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">future</span><span class="o">.</span><span class="na">complete</span><span class="o">(</span><span class="n">balance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">InsufficientFundsException</span> <span class="kd">extends</span> <span class="n">RuntimeException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">InsufficientFundsException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>   
</span></span></code></pre></div><h2 id="缺点">缺点</h2>
<p>虽然活动对象模式具有许多优点，但也存在一些缺点，如下所述：</p>
<ol>
<li>复杂性：活动对象模式需要使用异步处理和事件驱动机制，这增加了系统的复杂性。在设计、实现和测试时，需要考虑许多因素，如并发控制、锁定、死锁、线程池大小、任务队列大小等。</li>
<li>性能下降：在处理大量请求时，活动对象模式可能会导致性能下降。这是因为活动对象模式需要创建许多线程和任务，这会增加系统的负载和开销。此外，如果任务队列或线程池过大，会导致内存和CPU资源的浪费。</li>
<li>调试难度：由于活动对象模式使用异步处理和事件驱动机制，因此在调试时可能会出现难以预测的行为。例如，多个线程可能会同时访问共享资源，导致死锁或竞态条件，从而导致应用程序崩溃或出现其他问题。</li>
<li>状态管理：由于活动对象模式使用异步处理和事件驱动机制，因此在处理请求时需要管理对象的状态。这可能会导致状态同步和状态不一致的问题，从而影响系统的正确性和可靠性。</li>
<li>缺乏标准化：活动对象模式没有标准化的实现方式，因此在不同的应用程序和框架中可能会有不同的实现方式和限制。这使得活动对象模式在不同的环境中难以移植和重用。</li>
</ol>
<p>总的来说，活动对象模式是一种强大的设计模式，可以用于实现异步处理、事件驱动、高性能、可伸缩和可靠的应用程序。但是，它也存在一些缺点，需要仔细考虑和权衡。在使用活动对象模式时，需要关注系统的复杂性、性能、调试难度、状态管理和标准化等问题。</p>
<h2 id="应用">应用</h2>
<h3 id="在开源框架中的应用">在开源框架中的应用</h3>
<p>活动对象设计模式在许多开源框架中都得到了广泛应用，以下是几个常见的例子：</p>
<ol>
<li>Akka框架：Akka是一个轻量级的Actor模型框架，通过将并发和异步处理的问题从客户端代码中分离出来，提高了系统的性能、可靠性和可维护性。在Akka中，每个Actor都是一个活动对象，通过消息传递的方式进行通信和协作。Akka提供了丰富的API和工具，可以方便地创建和管理Actor，实现高性能和可扩展的系统。</li>
<li>Vert.x框架：Vert.x是一个基于事件驱动的异步框架，提供了多种语言的API和工具，支持构建高性能和可扩展的应用程序。在Vert.x中，每个组件都是一个活动对象，可以通过Vert.x的事件总线进行通信和协作。Vert.x提供了丰富的异步API和工具，可以方便地处理并发和异步问题。</li>
<li>RxJava框架：RxJava是一个基于响应式编程的异步框架，提供了丰富的操作符和工具，支持构建高性能和可维护的应用程序。在RxJava中，每个Observable都是一个活动对象，可以通过异步流的方式进行通信和协作。RxJava提供了丰富的操作符和工具，可以方便地处理并发和异步问题，并支持响应式编程的多种特性，如响应式流、背压控制等。</li>
<li>Netty框架：Netty是一个基于事件驱动的异步网络通信框架，提供了丰富的API和工具，支持构建高性能和可扩展的网络应用程序。在Netty中，每个Channel都是一个活动对象，可以通过事件的方式进行通信和协作。Netty提供了丰富的异步API和工具，可以方便地处理网络通信和异步问题，并支持多种协议和编解码器。</li>
<li>Spring框架：Spring是一个广泛使用的企业级Java框架，提供了丰富的API和工具，支持构建高性能和可维护的应用程序。在Spring中，可以使用异步处理、响应式编程和事件驱动等方式实现活动对象模式。Spring提供了丰富的异步API和工具，可以方便地处理异步和并发问题。</li>
<li>JMS框架：JMS是Java消息服务的标准，提供了异步消息传递的方式，支持构建可靠、高性能和可扩展的消息系统。在JMS中，可以使用活动对象模式实现异步消息的处理和分发。JMS提供了丰富的API和工具，可以方便地处理异步消息的生产和消费。</li>
<li>Apache Camel框架：Apache Camel是一个基于企业级集成模式的开源框架，提供了丰富的组件和工具，支持构建可扩展、高性能和可靠的应用程序。在Camel中，可以使用活动对象模式实现异步消息的处理和路由。Camel提供了丰富的组件和工具，可以方便地处理异步消息的路由和转换。</li>
</ol>
<p>下面是一个使用Spring异步处理和事件驱动机制实现活动对象模式的示例代码，该示例代码使用了Spring Boot框架和Spring Reactor库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">reactor.core.publisher.Flux</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">reactor.core.publisher.Mono</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">reactor.core.scheduler.Schedulers</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MessageHandler</span> <span class="nf">messageHandler</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">MessageHandler</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageHandler</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">MessageRepository</span> <span class="n">messageRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Mono</span><span class="o">.</span><span class="na">fromCallable</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 处理消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Received message: &#34;</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">messageRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="n">Message</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}).</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">boundedElastic</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Flux</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="nf">getAllMessages</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Flux</span><span class="o">.</span><span class="na">defer</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">Flux</span><span class="o">.</span><span class="na">fromIterable</span><span class="o">(</span><span class="n">messageRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">()))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">boundedElastic</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Entity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Message</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Id</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Message</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Message</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>   
</span></span></code></pre></div><p>在上述示例代码中，我们定义了一个 <code>MessageHandler</code> 类作为活动对象，用于异步处理消息的接收和存储。该类使用了Spring异步处理和事件驱动机制来实现活动对象模式，客户端代码只需要调用相应的方法即可，不需要关心异步处理的细节。</p>
<p>具体来说，该示例代码包含以下几个部分：</p>
<ol>
<li>
<p><code>AppConfig</code> 配置类：该类用于配置Spring Bean，定义了一个 <code>messageHandler()</code> 方法，返回一个 <code>MessageHandler</code> 对象。</p>
</li>
<li>
<p><code>MessageHandler</code> 活动对象类：该类包含了两个方法：<code>handleMessage()</code> 和 <code>getAllMessages()</code>。<code>handleMessage()</code> 方法用于处理消息，将消息存储到数据库中；<code>getAllMessages()</code> 方法用于获取所有的消息。这两个方法都使用了Spring的异步处理机制和事件驱动机制，使用了 Reactor 库中的 <code>Mono</code> 和 <code>Flux</code> 类。</p>
</li>
<li>
<p><code>Message</code> JPA实体类：该类用于表示消息对象，使用了JPA注解。</p>
</li>
</ol>
<p>在 <code>handleMessage()</code> 方法中，我们使用了 <code>Mono.fromCallable()</code> 方法来异步处理消息的接收和存储，将处理操作提交到线程池中执行，然后返回 <code>Mono&lt;Void&gt;</code> 对象，以便客户端代码可以等待处理操作完成。我们还使用了 <code>subscribeOn()</code> 方法来指定异步处理的线程池，以提高系统的性能和可伸缩性。</p>
<p>在 <code>getAllMessages()</code> 方法中，我们使用了 <code>Flux.defer()</code> 方法来异步获取所有的消息，将获取操作提交到线程池中执行，然后返回 <code>Flux&lt;Message&gt;</code> 对象，以便客户端代码可以异步获取消息。我们同样使用了 <code>subscribeOn()</code> 方法来指定异步处理的线程池。</p>
<p>通过使用Spring异步处理和事件驱动机制，我们可以实现高性能、可靠和可扩展的活动对象模式，提高系统的性能和可维护性。</p>
<p>下面是一个使用活动对象模式实现异步消息处理和分发的JMS示例代码，该示例代码使用了ActiveMQ作为JMS消息中间件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.activemq.ActiveMQConnectionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.CompletableFuture</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JMSMessageHandler</span> <span class="kd">implements</span> <span class="n">MessageListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Connection</span> <span class="n">connection</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Session</span> <span class="n">session</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Destination</span> <span class="n">destination</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">JMSMessageHandler</span><span class="o">(</span><span class="n">String</span> <span class="n">brokerUrl</span><span class="o">,</span> <span class="n">String</span> <span class="n">destinationName</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">JMSException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ConnectionFactory</span> <span class="n">connectionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActiveMQConnectionFactory</span><span class="o">(</span><span class="n">brokerUrl</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">connection</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">session</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createSession</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="n">Session</span><span class="o">.</span><span class="na">AUTO_ACKNOWLEDGE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">destination</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createQueue</span><span class="o">(</span><span class="n">destinationName</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">MessageConsumer</span> <span class="n">consumer</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createConsumer</span><span class="o">(</span><span class="n">destination</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">consumer</span><span class="o">.</span><span class="na">setMessageListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">send</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CompletableFuture</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">MessageProducer</span> <span class="n">producer</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createProducer</span><span class="o">(</span><span class="n">destination</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">producer</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">textMessage</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">future</span><span class="o">.</span><span class="na">complete</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JMSException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">future</span><span class="o">.</span><span class="na">completeExceptionally</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Messagemessage</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CompletableFuture</span><span class="o">.</span><span class="na">runAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="k">instanceof</span> <span class="n">TextMessage</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">textMessage</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// 处理消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Received message: &#34;</span> <span class="o">+</span> <span class="n">text</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JMSException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">JMSException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述示例代码中，<code>JMSMessageHandler</code> 类表示一个JMS消息处理器，可以异步处理来自JMS队列的消息，并将处理结果发送回JMS队列。该类使用了活动对象模式来实现异步消息的处理和分发，客户端代码只需要发送消息即可，不需要关心异步处理的细节。</p>
<p>具体来说，该类包含以下几个方法：</p>
<ol>
<li>
<p><code>JMSMessageHandler(String brokerUrl, String destinationName)</code> 构造方法：该方法用于创建一个JMS消息处理器对象，连接到指定的JMS消息中间件并订阅指定的队列。</p>
</li>
<li>
<p><code>send(String message)</code> 方法：该方法用于发送消息到JMS队列中，客户端代码可以调用该方法将消息发送到指定的队列。</p>
</li>
<li>
<p><code>onMessage(Message message)</code> 方法：该方法是 <code>MessageListener</code> 接口的回调方法，用于异步处理队列中的消息，并将处理结果发送回JMS队列。</p>
</li>
<li>
<p><code>close()</code> 方法：该方法用于关闭JMS连接和线程池，释放资源。</p>
</li>
</ol>
<p>在 <code>send()</code> 方法中，我们使用了 <code>CompletableFuture</code> 对象来异步处理消息的发送，将发送操作提交到线程池中执行，然后返回 <code>CompletableFuture</code> 对象，以便客户端代码可以等待发送操作完成。</p>
<p>在 <code>onMessage()</code> 方法中，我们使用了 <code>CompletableFuture.runAsync()</code> 方法来异步处理消息的处理，将处理操作提交到线程池中执行，然后返回 <code>CompletableFuture</code> 对象，以便客户端代码可以等待处理操作完成。</p>
<p>通过使用活动对象模式和异步处理技术，我们可以实现高性能、可靠和可扩展的JMS消息处理器，提高系统的性能和可维护性。</p>
<h3 id="在项目中的使用">在项目中的使用</h3>
<p>在公司的项目中，用到过活动对象这个设计模式，只是之前并不清楚这个模式。使用场景是，发送飞书通知和拨打语音电话时，将请求添加到一个内部阻塞队列，然后单独启动一个线程去消费这个队列。</p>
<p>以下是拨打语音电话的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Tencent Cloud Vms SendTtsVoice
</span></span></span><span class="line"><span class="cl"><span class="cm"> * https://cloud.tencent.com/document/product/1128/51558
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@AllArgsConstructor</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VmsServiceImpl</span> <span class="kd">implements</span> <span class="n">VmsService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PREFIX_PHONE</span> <span class="o">=</span> <span class="s">&#34;86&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">VoiceSenderRequest</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">TtsVoiceSender</span> <span class="n">ttsVoiceSender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">final</span> <span class="n">AsyncVmsThread</span> <span class="n">asyncVmsThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AsyncVmsThread</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@PostConstruct</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">asyncVmsThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@PreDestroy</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">asyncVmsThread</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendAsync</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">NoticeTarget</span><span class="o">&gt;</span> <span class="n">noticeUsers</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">templateId</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">templateId</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">CollectionUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">noticeUsers</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="n">NoticeTarget</span> <span class="n">noticeUser</span> <span class="o">:</span> <span class="n">noticeUsers</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(!</span><span class="n">noticeUser</span><span class="o">.</span><span class="na">getType</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">NoticeTargetTypeEnum</span><span class="o">.</span><span class="na">PHONE</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">queue</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="n">VoiceSenderRequest</span><span class="o">().</span><span class="na">setNoticeUser</span><span class="o">(</span><span class="n">noticeUser</span><span class="o">).</span><span class="na">setTemplateId</span><span class="o">(</span><span class="n">templateId</span><span class="o">).</span><span class="na">setParams</span><span class="o">(</span><span class="n">params</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">throw</span> <span class="k">new</span> <span class="n">BusinessException</span><span class="o">(</span><span class="s">&#34;线程被中断&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">send</span><span class="o">(</span><span class="n">String</span> <span class="n">phone</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">templateId</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">templateId</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">isBlank</span><span class="o">(</span><span class="n">phone</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">BusinessException</span><span class="o">(</span><span class="s">&#34;参数不能为空&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">TtsVoiceSenderResult</span> <span class="n">ttsVoiceSenderResult</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ttsVoiceSenderResult</span> <span class="o">=</span> <span class="n">ttsVoiceSender</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">PREFIX_PHONE</span><span class="o">,</span> <span class="n">phone</span><span class="o">,</span> <span class="n">templateId</span><span class="o">,</span> <span class="n">params</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">ttsVoiceSenderResult</span><span class="o">.</span><span class="na">result</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">BusinessException</span><span class="o">(</span><span class="n">ttsVoiceSenderResult</span><span class="o">.</span><span class="na">errMsg</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ttsVoiceSenderResult</span><span class="o">.</span><span class="na">result</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AsyncVmsThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">AtomicBoolean</span> <span class="n">isRunning</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicBoolean</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="nf">AsyncVmsThread</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kd">super</span><span class="o">(</span><span class="s">&#34;vmsSender&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="o">(</span><span class="n">isRunning</span><span class="o">.</span><span class="na">get</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ThreadUtil</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000L</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="n">VoiceSenderRequest</span> <span class="n">voiceSenderRequest</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">voiceSenderRequest</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">					<span class="n">send</span><span class="o">(</span><span class="n">voiceSenderRequest</span><span class="o">.</span><span class="na">getNoticeUser</span><span class="o">().</span><span class="na">getId</span><span class="o">(),</span> <span class="n">voiceSenderRequest</span><span class="o">.</span><span class="na">getTemplateId</span><span class="o">(),</span> <span class="n">voiceSenderRequest</span><span class="o">.</span><span class="na">getParams</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;{}&#34;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;发送语音电话给[%s]出现异常: %s&#34;</span><span class="o">,</span> <span class="n">voiceSenderRequest</span><span class="o">.</span><span class="na">getNoticeUser</span><span class="o">(),</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()),</span> <span class="n">e</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">isRunning</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Data</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Accessors</span><span class="o">(</span><span class="n">chain</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">VoiceSenderRequest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">NoticeTarget</span> <span class="n">noticeUser</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">Integer</span> <span class="n">templateId</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">String</span><span class="o">[]</span> <span class="n">params</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>优化之后的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Thread</span> <span class="n">thread</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="n">queueSize</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="o">(</span><span class="n">isProcessingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">processRequest</span><span class="o">(</span><span class="n">requests</span><span class="o">.</span><span class="na">take</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="o">(</span><span class="n">sleepMillis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object thread interrupted, reason: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">},</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">task</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Error processing request: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(!</span><span class="n">requests</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Ignore exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">isAcceptingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">requests</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="s">&#34;Active object is no longer accepting requests&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">name</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>该类具有构造函数，用于创建具有给定名称和指定大小阻塞请求队列的Active Object。Active Object在后台的单独线程上运行，该线程在循环中执行，直到被中断。它使用<code>run</code>方法执行添加到请求队列中的请求。<code>run</code>方法接受一个<code>Runnable</code>对象，并将其添加到请求队列中。如果Active Object不再接受请求，则抛出<code>IllegalStateException</code>。</p>
<p><code>shutdown</code>方法用于停止Active Object。它首先将<code>isAcceptingRequests</code>标志设置为false，这将防止将任何进一步的请求添加到队列中。然后等待队列变为空，然后将<code>isProcessingRequests</code>标志设置为false，并中断Active Object的线程。</p>
<p>这个类本身已经是一个很好的Active Object模式的实现了，但是如果需要更高的性能或更好的扩展性，还可以进行一些优化：</p>
<ol>
<li>
<p>使用线程池：当前的实现中，每个Active Object都有一个单独的线程来处理请求。如果需要处理大量的Active Object，这将会产生很多线程，从而影响系统的性能和稳定性。可以使用线程池来管理线程，从而更好地控制线程的数量和资源的使用。</p>
<blockquote>
<p>如果在使用ActiveObject时要执行耗时的任务，可以将任务放到一个单独的线程池中执行，以避免阻塞ActiveObject实例的请求处理线程。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">ExecutorService</span> <span class="n">executorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Thread</span> <span class="n">thread</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="n">queueSize</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="o">(</span><span class="n">isProcessingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">processRequest</span><span class="o">(</span><span class="n">requests</span><span class="o">.</span><span class="na">take</span><span class="o">(),</span> <span class="n">executorService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="o">(</span><span class="n">sleepMillis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object thread interrupted, reason: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">},</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">,</span> <span class="n">ExecutorService</span> <span class="n">executorService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">executorService</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Error processing request: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(!</span><span class="n">requests</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Ignore exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">executorService</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">isAcceptingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">requests</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="s">&#34;Active object is no longer accepting requests&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">name</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在修改后的代码中，添加了一个私有变量executorService，用于存储一个线程池对象，其中线程池的大小为5。在构造方法中，创建了一个新的FixedThreadPoolExecutor实例，并将其作为executorService的值。该线程池会在ActiveObject实例中处理耗时任务，避免阻塞请求队列的处理。</p>
<p>在processRequest方法中，使用executorService.submit(task).get()来提交并执行任务。在执行任务时，使用了get()方法来同步获取任务的执行结果，以确保任务执行完成后再处理下一个请求。</p>
<p>在shutdown方法中，添加了executorService.shutdown()来关闭线程池。该方法会等待所有任务执行完成后关闭线程池，并防止新任务被提交。这样可以确保所有任务都被处理完毕后才关闭ActiveObject实例。</p>
<p>需要注意的是，在使用线程池时，要根据具体的业务需求和系统资源情况选择合适的线程池大小和类型，避免线程池过大或过小，从而影响系统性能或导致线程池拥堵。</p>
</blockquote>
</li>
<li>
<p>优化请求的处理：当前实现中，每个请求都会在执行完毕后等待100毫秒。如果请求处理较快，这将浪费很多时间。可以根据实际情况优化请求的处理方式，例如设置一个最小执行时间，或者使用更高效的数据结构来管理请求队列。</p>
<blockquote>
<p>在当前的实现中，使用了一个阻塞队列LinkedBlockingQueue来管理请求队列。这种数据结构的优点是可以保证线程安全，但是在高并发场景下可能会成为瓶颈，因为它是基于链表实现的，每次添加或删除元素时都需要进行同步操作，可能会影响性能。</p>
<p>如果需要更高效的请求队列管理方式，可以考虑使用无锁的并发队列，例如Disruptor或ConcurrentLinkedQueue。这些数据结构可以在高并发场景下提供更好的性能和可扩展性，但是需要更加复杂的实现和使用方法，需要根据具体的场景进行权衡和选择。如果使用Disruptor，需要进行更加细致的配置和调优，以便发挥最大的性能优势。如果使用ConcurrentLinkedQueue，需要考虑并发问题，例如使用CAS操作来保证线程安全。</p>
<p>如果使用ConcurrentLinkedQueue来管理请求队列，需要考虑并发问题，因为该数据结构是非阻塞的，多个线程可以同时对其进行操作，可能会导致并发问题，例如竞态条件和内存一致性问题。</p>
<p>为了保证线程安全，可以使用CAS（Compare and Swap）操作来实现原子性的元素插入和删除。CAS操作可以保证只有一个线程能够成功修改共享变量的值，其他线程需要重试或者等待。</p>
<p>例如，在ActiveObject类中，可以将请求队列声明为ConcurrentLinkedQueue类型，并使用CAS操作来实现元素的插入和删除：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="o">(</span><span class="n">isProcessingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">Runnable</span> <span class="n">task</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">task</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">task</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object thread interrupted, reason: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">},</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>  
</span></span></code></pre></div><p>在上面的代码中，使用了ConcurrentLinkedQueue来替换了原有的阻塞队列LinkedBlockingQueue，并使用了poll方法来获取队列中的下一个元素，而不是take方法，这样可以避免线程阻塞。然后使用CAS操作来实现元素的添加，使用了offer方法，并检查返回值是否为true，如果为false则表示CAS操作失败，需要重试或者等待。</p>
<p>需要注意的是，ConcurrentLinkedQueue并不能保证元素的顺序，因此在处理请求时需要注意顺序问题，不能保证先进先出的顺序。如果需要保证顺序，可以使用其他的数据结构，例如BlockingQueue。</p>
</blockquote>
</li>
</ol>
<p>上面的代码已经很不错了，但还有一些可以优化的地方：</p>
<ol>
<li>使用工厂方法来创建ActiveObject实例</li>
</ol>
<p>可以将ActiveObject类中的构造方法改为私有的，然后提供一个工厂方法来创建ActiveObject实例。这样可以将ActiveObject的创建逻辑与客户端代码分离，使得客户端代码更加简洁和易于维护。</p>
<ol start="2">
<li>将日志记录器作为静态变量</li>
</ol>
<p>可以将日志记录器作为静态变量，以便在整个类中共享。这样可以避免在每个方法中都创建一个日志记录器，提高代码的可读性和性能。</p>
<ol start="3">
<li>使用线程安全的单例模式</li>
</ol>
<p>可以使用线程安全的单例模式来确保ActiveObject实例的唯一性。这样可以避免在多个地方创建多个ActiveObject实例，从而导致系统资源浪费或数据不一致。</p>
<p>修改后的代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">ActiveObject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ActiveObject</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">ExecutorService</span> <span class="n">executorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Thread</span> <span class="n">thread</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="n">queueSize</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="o">(</span><span class="n">isProcessingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">processRequest</span><span class="o">(</span><span class="n">requests</span><span class="o">.</span><span class="na">take</span><span class="o">(),</span> <span class="n">executorService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="o">(</span><span class="n">sleepMillis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object thread interrupted, reason: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">},</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">,</span> <span class="n">ExecutorService</span> <span class="n">executorService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">executorService</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Error processing request: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ActiveObject</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">getInstance</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">publicvoid</span> <span class="nf">submit</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">isAcceptingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">requests</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Error submitting request: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object is not accepting requests&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ActiveObject</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">ActiveObject</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActiveObject</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(!</span><span class="n">requests</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Ignore exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">executorService</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>上面的代码已经很不错了，但还有一些可以进一步优化的地方：</p>
<ol>
<li>使用线程池来管理线程，而不是每次创建一个新的线程。这样可以减少线程的创建和销毁的开销，提高代码的性能。</li>
</ol>
<ol start="2">
<li>
<p>使用Lambda表达式简化代码，使代码更加简洁和易于理解。例如，可以将线程中的while循环改为Lambda表达式，简化代码。</p>
</li>
<li>
<p>使用CompletableFuture来实现异步处理，将请求的处理过程和结果的返回分离开来。这样可以提高代码的可读性和可维护性，同时也可以提高代码的性能。</p>
</li>
<li>
<p>使用ThreadFactory来命名线程，以便更好地跟踪线程的执行情况以及排查问题。</p>
</li>
<li>
<p>使用CompletableFuture的exceptionally方法处理异常，以避免在处理请求时出现异常而导致整个线程停止。</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">ActiveObject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ActiveObject</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">THREAD_POOL_SIZE</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">ExecutorService</span> <span class="n">executorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="n">processingFuture</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="n">queueSize</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">THREAD_POOL_SIZE</span><span class="o">,</span> <span class="k">new</span> <span class="n">ThreadFactory</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kd">private</span> <span class="n">AtomicInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="kd">public</span> <span class="n">Thread</span> <span class="nf">newThread</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="s">&#34;ActiveObject-&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#34;-&#34;</span> <span class="o">+</span> <span class="n">count</span><span class="o">.</span><span class="na">getAndIncrement</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">});</span>
</span></span><span class="line"><span class="cl">		<span class="n">processingFuture</span> <span class="o">=</span> <span class="n">CompletableFuture</span><span class="o">.</span><span class="na">runAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="o">(</span><span class="n">isAcceptingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">executorService</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">requests</span><span class="o">.</span><span class="na">take</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="o">(</span><span class="n">sleepMillis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">interrupt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object thread interrupted, reason: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Error processing request: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}).</span><span class="na">exceptionally</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Exception occurred in ActiveObject thread: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">});</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">submit</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">requests</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">processingFuture</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">executorService</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ActiveObject</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">getInstance</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ActiveObject</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">ActiveObject</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActiveObject</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>活动对象模式是一种支持异步处理和事件驱动的设计模式，适用于一些需要高性能、可伸缩和可靠的应用场景。以下是几个适用于活动对象模式的使用场景：</p>
<ol>
<li>大规模并发处理：在大规模并发的情况下，使用传统的同步处理方式会导致系统性能下降和响应时间延长。使用活动对象模式可以将并发请求转换成异步事件，通过事件驱动机制实现高性能和可伸缩。</li>
<li>高吞吐量数据处理：在需要处理大量数据的情况下，使用活动对象模式可以利用多核CPU和异步处理技术，提高系统的处理能力和吞吐量。</li>
<li>异步消息传递：在需要异步处理消息的情况下，使用活动对象模式可以实现异步消息的处理和分发，提高系统的可靠性和可维护性。</li>
<li>分布式系统：在分布式系统中，使用活动对象模式可以实现异步消息传递和事件驱动，提高系统的可靠性和可伸缩性。同时，活动对象模式还可以通过分布式锁和分布式计算等技术实现分布式并发控制和计算，提高系统的性能和可靠性。</li>
<li>UI和后台逻辑分离：在需要将UI和后台逻辑分离的情况下，使用活动对象模式可以实现UI和后台逻辑的解耦和异步处理，提高系统的可维护性和可扩展性。</li>
<li>异步IO操作：在需要进行异步IO操作的情况下，使用活动对象模式可以实现非阻塞IO和异步事件处理，提高系统的性能和响应时间。</li>
</ol>
<p>总的来说，活动对象模式适用于一些需要异步处理、事件驱动、高性能、可伸缩和可靠的应用场景。通过使用活动对象模式，可以提高系统的性能和可维护性，同时降低系统的复杂度和成本。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记14：考虑实现 Comparable 接口</title>
      <link>https://blog.chensoul.com/posts/2023/05/26/consider-implementing-comparable/</link>
      <pubDate>Fri, 26 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/26/consider-implementing-comparable/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：考虑实现 Comparable 接口。 介绍 与本章讨论的其他方法不同，compareTo 方法不是</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：考虑实现 Comparable 接口。</p>
<h2 id="介绍">介绍</h2>
<p>与本章讨论的其他方法不同，compareTo 方法不是在 Object 中声明的。相反，它是 Comparable 接口中的唯一方法。它在性质上类似于 Object 的 equals 方法，除了简单的相等比较之外，它还允许顺序比较，而且它是通用的。一个类实现 Comparable，表明实例具有自然顺序。对实现 Comparable 的对象数组进行排序非常简单：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span></span></code></pre></div><p>类似地，搜索、计算极值和维护 Comparable 对象的自动排序集合也很容易。例如，下面的程序依赖于 String 实现 Comparable 这一事实，将命令行参数列表按字母顺序打印出来，并消除重复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WordList</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Collections</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>通过让类实现 Comparable，就可与依赖于此接口的所有通用算法和集合实现进行互操作。你只需付出一点点努力就能获得强大的功能。实际上，Java 库中的所有值类以及所有枚举类型都实现了 Comparable。如果编写的值类具有明显的自然顺序，如字母顺序、数字顺序或时间顺序，则应实现 Comparable 接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">T</span> <span class="n">t</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>compareTo 方法的一般约定类似于 equals 方法：</p>
<p>将一个对象与指定的对象进行顺序比较。当该对象小于、等于或大于指定对象时，对应返回一个负整数、零或正整数。如果指定对象的类型阻止它与该对象进行比较，则抛出 ClassCastException。</p>
<p>在下面的描述中，<code>sgn(expression)</code> 表示数学中的符号函数，它被定义为：根据传入表达式的值是负数、零或正数，对应返回 -1、0 或 1。</p>
<ul>
<li>实现者必须确保所有 x 和 y 满足 <code>sgn(x.compareTo(y)) == -sgn(y.compareTo(x))</code>（这意味着 <code>x.compareTo(y)</code> 当且仅当 <code>y.compareTo(x)</code> 抛出异常时才抛出异常）。</li>
<li>实现者还必须确保关系是可传递的：<code>(x.compareTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt; 0)</code> 意味着 <code>x.compareTo(z) &gt; 0</code>。</li>
<li>最后，实现者必须确保 <code>x.compareTo(y) == 0</code> 时，所有的 z 满足 <code>sgn(x.compareTo(z)) == sgn(y.compareTo(z))</code>。</li>
<li>强烈建议 <code>(x.compareTo(y)== 0) == (x.equals(y))</code> 成立，但不是必需的。一般来说，任何实现 Comparable 接口并违反此条件的类都应该清楚地注明这一事实。推荐使用的表述是「注意：该类的自然顺序与 equals 不一致。」</li>
</ul>
<p>不要被这些约定的数学性质所影响。就像 equals 约定一样，这个约定并不像看起来那么复杂。与 equals 方法不同，equals 方法对所有对象都施加了全局等价关系，compareTo 不需要跨越不同类型的对象工作：当遇到不同类型的对象时，compareTo 允许抛出 ClassCastException。通常，它就是这么做的。该约定确实允许类型间比较，这种比较通常在被比较对象实现的接口中定义。</p>
<p>就像违反 hashCode 约定的类可以破坏依赖 hash 的其他类一样，违反 compareTo 约定的类也可以破坏依赖 Comparable 的其他类。依赖 Comparable 的类包括排序集合 TreeSet 和 TreeMap，以及实用工具类 Collections 和 Arrays，它们都包含搜索和排序算法。</p>
<p>让我们看一下 compareTo 约定的细节。第一个规定指出，如果你颠倒两个对象引用之间的比较的方向，就应当发生这样的情况：如果第一个对象小于第二个对象，那么第二个对象必须大于第一个；如果第一个对象等于第二个对象，那么第二个对象一定等于第一个对象；如果第一个对象大于第二个对象，那么第二个对象一定小于第一个对象。第二个规定指出，如果一个对象大于第二个，第二个大于第三个，那么第一个对象一定大于第三个对象。最后一个规定指出，所有 compareTo 结果为相等的对象分别与任何其他对象相比，必须产生相同的结果。</p>
<p>这三种规定的一个结果是，由 compareTo 方法进行的相等性检验必须遵守由 equals 约定进行的相同的限制：反身性、对称性和传递性。因此，同样的警告也适用于此：除非你愿意放弃面向对象的抽象优点，否则无法在保留 compareTo 约定的同时使用新值组件扩展可实例化类。同样的解决方案也适用。如果要向实现 Comparable 的类中添加值组件，不要继承它；编写一个不相关的类，其中包含第一个类的实例。然后提供返回所包含实例的「视图」方法。这使你可以自由地在包含类上实现你喜欢的任何 compareTo 方法，同时允许它的客户端在需要时将包含类的实例视为包含类的实例。</p>
<p>compareTo 约定的最后一段是一个强烈的建议，而不是一个真正的要求，它只是简单地说明了 compareTo 方法所施加的同等性检验通常应该与 equals 方法返回相同的结果。如果遵守了这一规定，则 compareTo 方法所施加的排序与 equals 方法一致。如果违反这条建议，那么它的顺序就与 equals 不一致。如果一个类的 compareTo 方法强加了一个与 equals 不一致的顺序，那么这个类仍然可以工作，但是包含该类元素的有序集合可能无法遵守集合接口（Collection、Set 或 Map）的一般约定。这是因为这些接口的一般约定是根据 equals 方法定义的，但是有序集合使用 compareTo 代替了 equals 实施同等性检验。如果发生这种情况，这不是一场灾难，但这是需要注意的。</p>
<p>例如，考虑 BigDecimal 类，它的 compareTo 方法与 equals 不一致。如果你创建一个空的 HashSet 实例，然后添加 <code>new BigDecimal(&quot;1.0&quot;)</code> 和 <code>new BigDecimal(&quot;1.00&quot;)</code>，那么该 HashSet 将包含两个元素，因为添加到该集合的两个 BigDecimal 实例在使用 equals 方法进行比较时结果是不相等的。但是，如果你使用 TreeSet 而不是 HashSet 执行相同的过程，那么该集合将只包含一个元素，因为使用 compareTo 方法比较两个 BigDecimal 实例时结果是相等的。（有关详细信息，请参阅 BigDecimal 文档。）</p>
<p>编写 compareTo 方法类似于编写 equals 方法，但是有一些关键的区别。因为 Comparable 接口是参数化的，compareTo 方法是静态类型的，所以不需要进行类型检查或强制转换它的参数。如果参数类型错误，则该调用将不能编译。如果参数为 null，则调用应该抛出 NullPointerException，并且在方法尝试访问其成员时抛出该异常。</p>
<p>在 compareTo 方法中，字段是按顺序而不是按同等性来比较的。要比较对象引用字段，要递归调用 compareTo 方法。如果一个字段没有实现 Comparable，或者需要一个非标准的排序，那么应使用 Comparator。可以编写自定义的比较器，或使用现有的比较器，如 CaseInsensitiveString 的 compareTo 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Single-field Comparable with object reference field
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">CaseInsensitiveString</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">CaseInsensitiveString</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">CaseInsensitiveString</span> <span class="n">cis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">CASE_INSENSITIVE_ORDER</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">cis</span><span class="o">.</span><span class="na">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>注意 CaseInsensitiveString 实现了 <code>Comparable&lt;CaseInsensitiveString&gt;</code>。这意味着 CaseInsensitiveString 引用只能与另一个 CaseInsensitiveString 引用进行比较。这是在声明实现 Comparable 的类时要遵循的常规模式。</p>
<p>本书的旧版本建议 compareTo 方法使用关系运算符 &lt; 和 &gt; 来比较整数基本类型字段，使用静态方法 <code>Double.compare</code> 和 <code>Float.compare</code> 来比较浮点基本类型字段。在 Java 7 中，静态比较方法被添加到所有 Java 的包装类中。<strong>在 compareTo 方法中使用关系运算符 &lt; 和 &gt; 冗长且容易出错，因此不再推荐使用。</strong></p>
<p>如果一个类有多个重要字段，那么比较它们的顺序非常关键。从最重要的字段开始，一步步往下。如果比较的结果不是 0（用 0 表示相等），那么就完成了；直接返回结果。如果最重要的字段是相等的，就比较下一个最重要的字段，以此类推，直到找到一个不相等的字段或比较到最不重要的字段为止。下面是 PhoneNumber 类的 compareTo 方法，演示了这种技术：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Multiple-field Comparable with primitive fields
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">PhoneNumber</span> <span class="n">pn</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Short</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">areaCode</span><span class="o">,</span> <span class="n">pn</span><span class="o">.</span><span class="na">areaCode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">Short</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">prefix</span><span class="o">,</span> <span class="n">pn</span><span class="o">.</span><span class="na">prefix</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="n">Short</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">lineNum</span><span class="o">,</span> <span class="n">pn</span><span class="o">.</span><span class="na">lineNum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在 Java 8 中，Comparator 接口配备了一组比较器构造方法，可以流畅地构造比较器。然后可以使用这些比较器来实现 Comparator 接口所要求的 compareTo 方法。许多程序员更喜欢这种方法的简明，尽管它存在一些性能成本：在我的机器上，PhoneNumber 实例的数组排序要慢 10% 左右。在使用这种方法时，请考虑使用 Java 的静态导入功能，这样你就可以通过静态比较器构造方法的简单名称来引用它们，以获得清晰和简洁。下面是 PhoneNumber 类的 compareTo 方法改进后的样子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Comparable with comparator construction methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">COMPARATOR</span> <span class="o">=</span> <span class="n">comparingInt</span><span class="o">((</span><span class="n">PhoneNumber</span> <span class="n">pn</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">pn</span><span class="o">.</span><span class="na">areaCode</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">thenComparingInt</span><span class="o">(</span><span class="n">pn</span> <span class="o">-&gt;</span> <span class="n">pn</span><span class="o">.</span><span class="na">prefix</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">thenComparingInt</span><span class="o">(</span><span class="n">pn</span> <span class="o">-&gt;</span> <span class="n">pn</span><span class="o">.</span><span class="na">lineNum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">PhoneNumber</span> <span class="n">pn</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">COMPARATOR</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">pn</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个实现在类初始化时使用两个比较器构造方法构建一个比较器。第一个是 comparingInt。它是一个静态方法，接受一个 key 提取器函数，该函数将对象引用映射到 int 类型的 key ，并返回一个比较器，比较器根据该 key 对实例进行排序。在上述的示例中，comparingInt 使用 lambda 表达式从 PhoneNumber 中提取 areaCode，并返回 <code>Comparator&lt;PhoneNumber&gt;</code>，按区号来排序电话号码。注意，lambda 表达式显式地指定其输入参数的类型为 PhoneNumber。事实证明，在这种情况下，Java 的类型推断并没有强大到足以自己判断类型，因此我们不得不帮助它来编译程序。</p>
<p>如果两个电话号码有相同的区号，我们需要进一步改进比较，这正是第二个 comparator 构造方法 thenComparingInt 所做的。它是 Comparator 上的一个实例方法，它接受一个 int 类型的 key 提取函数，并返回一个比较器，该比较器首先应用原始比较器，然后使用提取的 key 来断开连接。你可以任意堆叠对 thenComparingInt 的调用，从而形成字典顺序。在上面的例子中，我们将两个对 thenComparingInt 的调用叠加起来，得到一个排序，它的第二个 key 是 prefix，而第三个 key 是 lineNum。注意，我们不必指定传递给两个调用 thenComparingInt 的 key 提取器函数的参数类型：Java 的类型推断足够智能，可以自行解决这个问题。</p>
<p>Comparator 类具有完整的构造方法。对于 long 和 double 的基本类型，有类似 comparingInt 和 thenComparingInt 的方法。int 版本还可以用于范围更小的整数类型，如 PhoneNumber 示例中的 short。double 版本也可以用于 float。Comparator 类提供的构造方法覆盖了所有 Java 数值基本类型。</p>
<p>也有对象引用类型的比较器构造方法。静态方法名为 compare，它有两个重载。一个是使用 key 提取器并使用 key 的自然顺序。第二种方法同时使用 key 提取器和比较器对提取的 key 进行比较。实例方法有三种重载，称为 thenComparing。一个重载只需要一个比较器并使用它来提供一个二级顺序。第二个重载只接受一个 key 提取器，并将 key 的自然顺序用作二级顺序。最后的重载需要一个 key 提取器和一个比较器来对提取的 key 进行比较。</p>
<p>有时候，你可能会看到 compareTo 或 compare 方法，它们依赖于以下事实：如果第一个值小于第二个值，则两个值之间的差为负；如果两个值相等，则为零；如果第一个值大于零，则为正。下面是一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// BROKEN difference-based comparator - violates transitivity!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">hashCodeOrder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;&gt;()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Object</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">};</span>
</span></span></code></pre></div><p>不要使用这种技术。它充满了来自整数溢出和 IEEE 754 浮点运算构件的危险 [JLS 15.20.1, 15.21.1]。此外，生成的方法不太可能比使用本项目中描述的技术编写的方法快得多。应使用静态比较方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Comparator based on static compare method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">hashCodeOrder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;&gt;()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Object</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(),</span> <span class="n">o2</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">};</span>
</span></span></code></pre></div><p>或比较器构造方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Comparator based on Comparator construction method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">hashCodeOrder</span> <span class="o">=</span> <span class="n">Comparator</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">comparingInt</span><span class="o">(</span><span class="n">o</span> <span class="o">-&gt;</span> <span class="n">o</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span></span></code></pre></div><p>总之，无论何时实现具有排序性质的值类，都应该让类实现 Comparable 接口，这样就可以轻松地对实例进行排序、搜索，并与依赖于此接口的集合实现进行互操作。在 compareTo 方法的实现中比较字段值时，避免使用 &lt; 和 &gt; 操作符，应使用包装类中的静态比较方法或 Comparator 接口中的 comparator 构造方法。</p>
<h2 id="总结">总结</h2>
<p>建议在实现比较功能时，应该考虑实现 <code>Comparable</code> 接口。<code>Comparable</code> 接口是一个泛型接口，其中只包含一个方法 <code>compareTo(T o)</code>，用于比较当前对象和另一个对象的大小关系。实现 <code>Comparable</code> 接口可以使得一个类具有可比性，从而可以进行排序等操作。</p>
<p>以下是在实现 <code>Comparable</code> 接口时需要注意的一些问题：</p>
<ol>
<li>首先，需要确保类实现了 <code>Comparable</code> 接口，并实现了 <code>compareTo</code> 方法。在实现 <code>compareTo</code> 方法时，需要考虑到对象的比较顺序，并返回一个整数值表示两个对象之间的大小关系。</li>
<li>在实现 <code>compareTo</code> 方法时，需要确保比较结果的一致性、对称性和传递性。具体来说，如果 <code>a.compareTo(b)</code> 返回正整数，那么 <code>b.compareTo(a)</code> 应该返回负整数；如果 <code>a.compareTo(b)</code> 和 <code>b.compareTo(c)</code> 的返回值都是正整数，那么 <code>a.compareTo(c)</code> 的返回值也应该是正整数。</li>
<li>如果一个类有多个可以比较的属性，那么在实现 <code>compareTo</code> 方法时需要按照比较的优先级进行比较。通常，可以先比较第一个属性，如果相等再比较第二个属性，以此类推。</li>
<li>如果一个类实现了 <code>Comparable</code> 接口，那么通常也应该同时实现 <code>equals</code> 和 <code>hashCode</code> 方法。在实现 <code>equals</code> 方法时，需要考虑到比较的对象是否为 null、对象类型是否相同等因素。在实现 <code>hashCode</code> 方法时，通常需要使用类中可比较属性的哈希值，以确保哈希表等数据结构能够正确地处理该类的对象。</li>
<li>如果一个类需要支持多种比较方式，那么可以考虑使用策略模式或者比较器（Comparator）接口来实现。使用比较器接口可以在运行时动态地指定比较方式，从而更加灵活。</li>
</ol>
<p>实现 <code>Comparable</code> 接口的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 实现 compareTo 方法，按照年龄升序排序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">Person</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">age</span><span class="o">,</span> <span class="n">o</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 实现 equals 方法和 hashCode 方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="n">Person</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Person</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">Person</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">other</span><span class="o">.</span><span class="na">name</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">                <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例代码中，<code>Person</code> 类实现了 <code>Comparable</code> 接口，并实现了 <code>compareTo</code> 方法。在该方法中，我们按照对象的年龄升序排序。为了确保 <code>equals</code> 方法和 <code>hashCode</code> 方法的正确性，我们也实现了这两个方法，以确保 <code>Person</code> 对象在使用哈希表等数据结构时能够正常工作。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记13：明智地覆盖 clone 方法</title>
      <link>https://blog.chensoul.com/posts/2023/05/26/override-clone-judiciously/</link>
      <pubDate>Fri, 26 May 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/26/override-clone-judiciously/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：明智地覆盖 clone 方法。 介绍 Cloneable 接口的目的是作为 mixin 接口，用于让类来宣称它们允许克</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：明智地覆盖 clone 方法。</p>
<h2 id="介绍">介绍</h2>
<p>Cloneable 接口的目的是作为 mixin 接口，用于让类来宣称它们允许克隆。不幸的是，它没有达到这个目的。它的主要缺点是缺少 clone 方法，并且 Object 类的 clone 方法是受保护的。如果不求助于反射，就不能仅仅因为对象实现了 Cloneable 接口就能调用 clone 方法。即使反射调用也可能失败，因为不能保证对象具有可访问的 clone 方法。尽管存在多种缺陷，但该机制的使用范围相当广泛，因此理解它是值得的。本条目将告诉你如何实现行为良好的 clone 方法，讨论什么时候应该这样做，并提供替代方案。</p>
<p>既然 Cloneable 接口不包含任何方法，用它来做什么呢？它决定了 Object 类受保护的 clone 实现的行为：如果一个类实现了 Cloneable 接口，Object 类的 clone 方法则返回该类实例的逐字段拷贝；否则它会抛出 CloneNotSupportedException。这是接口非常不典型的一种使用方式，不应该效仿。通常，类实现接口可以表明类能够为其客户端做些什么。在本例中，它修改了超类上受保护的方法的行为。</p>
<p>虽然规范没有说明，但是在实践中，实现 Cloneable 接口的类应该提供一个功能正常的公共 clone 方法。为了实现这一点，类及其所有超类必须遵守复杂的、不可强制执行的、文档很少的协议。产生的机制是脆弱的、危险的和非语言的：即它创建对象而不调用构造函数。</p>
<p>clone 方法的一般约定很薄弱。下面的内容是从 Object 规范复制过来的：</p>
<p>创建并返回此对象的副本。&ldquo;副本&rdquo; 的确切含义可能取决于对象的类。通常的意图是，对于任何对象 x，表达式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">x</span><span class="o">.</span><span class="na">clone</span><span class="o">()</span> <span class="o">!=</span> <span class="n">x</span>
</span></span></code></pre></div><p>将为 true，并且表达式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">x</span><span class="o">.</span><span class="na">clone</span><span class="o">().</span><span class="na">getClass</span><span class="o">()</span> <span class="o">==</span> <span class="n">x</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span>
</span></span></code></pre></div><p>将为 true，但这并不是绝对要求。一般来说，对于任何对象 x 和 y，如果它们的 equals 方法返回 true，则表达式</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">x</span><span class="o">.</span><span class="na">clone</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
</span></span></code></pre></div><p>也应返回 true。</p>
<p>clone 方法创建并返回对象的副本。「副本」的确切含义可能取决于对象的类别。通常，对于任何对象 x，表达式 <code>x.clone() != x</code>、<code>x.clone().getClass() == x.getClass()</code> 以及 <code>x.clone().equals(x)</code> 的值都将为 true，但都不是绝对的。</p>
<p>按照惯例，此方法返回的对象应通过调用 super.clone() 来获取。如果一个类及其所有父类（除了 Object）都遵循这个惯例，那么就会有以下情况：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">x</span><span class="o">.</span><span class="na">clone</span><span class="o">().</span><span class="na">getClass</span><span class="o">()</span> <span class="o">==</span> <span class="n">x</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span>
</span></span></code></pre></div><p>按照约定，clone 方法返回的对象应该通过调用 super.clone() 来获得。如果一个类和它的所有超类（Object 类除外）都遵守这个约定，在这种情况下，表达式 <code>x.clone().getClass() == x.getClass()</code> 则为 true。</p>
<p>按照约定，返回的对象应该独立于被克隆的对象。为了实现这种独立性，可能需要在 super.clone() 返回前，修改对象的一个或多个字段。</p>
<p>这种机制有点类似于构造方法链，只是没有强制执行：</p>
<ul>
<li>（1）如果一个类的 clone 方法返回的实例不是通过调用 super.clone() 而是通过调用构造函数获得的，编译器不会报错，但是如果这个类的一个子类调用 super.clone()，由此产生的对象类型将是错误的，影响子类 clone 方法正常工作。</li>
<li>（2）如果覆盖 clone 方法的类是 final 修饰的，那么可以安全地忽略这个约定，因为没有子类需要担心。</li>
<li>（3）如果一个 final 修饰的类不调用 super.clone() 的 clone 方法。类没有理由实现 Cloneable 接口，因为它不依赖于 Object 类的 clone 实现的行为。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Base</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span> <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CloneNotSupportedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Base</span><span class="o">();</span> <span class="c1">// ①
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">BasePro</span> <span class="kd">extends</span> <span class="n">Base</span> <span class="kd">implements</span> <span class="n">Cloneable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span> <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CloneNotSupportedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">BasePro</span> <span class="n">basePro</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasePro</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">basePro</span><span class="o">.</span><span class="na">clone</span><span class="o">().</span><span class="na">getClass</span><span class="o">());</span> <span class="c1">// 输出 class com.example.demo.Base
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">basePro</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span> <span class="c1">// 输出 class com.example.demo.BasePro
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>可采用两种方式修复</p>
<ul>
<li>① 处改用 super.clone()</li>
<li>移除 Base 类整个 clone() 实现</li>
</ul>
<p>假设您想在一个类中实现 Cloneable 接口，而其超类提供了一个良好的 clone 方法。首先调用 super.clone() 方法。您得到的对象将是原始对象的一个完全功能的副本。在您的类中声明的任何字段都将具有与原始对象相同的值。如果每个字段都包含一个基本类型的值或一个不可变对象的引用，则返回的对象可能正是您所需要的，此时不需要进一步处理。例如，对于 PhoneNumber 类，就是这种情况，但请注意，不可变类不应提供 clone 方法，因为这只会鼓励浪费性的复制。在这个前提下，下面是一个 PhoneNumber 的 clone 方法的实现示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Clone method for class with no references to mutable state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span> <span class="kd">public</span> <span class="n">PhoneNumber</span> <span class="nf">clone</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">PhoneNumber</span><span class="o">)</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">AssertionError</span><span class="o">();</span> <span class="c1">// Can&#39;t happen
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>为了让这个方法工作，必须修改 PhoneNumber 类的声明，使之实现 Cloneable 接口。虽然 Object 的 clone 方法返回 Object 类型，但是这个 clone 方法返回 PhoneNumber 类型。这样做是合法的，也是可取的，因为 Java 的返回值类型支持协变。换句话说，覆盖方法的返回类型可以是被覆盖方法的返回类型的子类。这样就不需要在客户端中进行强制转换。我们必须把源自 Object 类的 super.clone() 方法在返回前将结果转换为 PhoneNumber 类型，这类强制转换肯定会成功。</p>
<p>将 super.clone() 包含在 try-catch 块中。这是因为 Object 类声明的 clone 方法会抛出 CloneNotSupportedException，这是一种 checked exception。因为 PhoneNumber 类实现了 Cloneable 接口，所以我们知道对 super.clone() 的调用将会成功。这个样板文件的需求表明 CloneNotSupportedException 应该是 unchecked exception。</p>
<p>如果对象的字段包含可变对象的引用，前面所示 clone 方法的这种简易实现可能引发灾难。例如，考虑 Stack 类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Stack</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_INITIAL_CAPACITY</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Stack</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">elements</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="n">DEFAULT_INITIAL_CAPACITY</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">Object</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ensureCapacity</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">elements</span><span class="o">[</span><span class="n">size</span><span class="o">++]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">EmptyStackException</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[--</span><span class="n">size</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">elements</span><span class="o">[</span><span class="n">size</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// Eliminate obsolete reference
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Ensure space for at least one more element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">ensureCapacity</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">size</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">elements</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">size</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>假设你想让这个类可克隆。如果 clone 方法只返回 super.clone()，得到的 Stack 实例在其 size 字段中会有正确的值，但其 elements 字段将引用与原始 Stack 实例相同的数组。修改初始值将破坏克隆的不变性，反之亦然。你将很快发现你的程序产生了无意义的结果或抛出 NullPointerException。</p>
<p>调用 Stack 类中唯一构造函数的情况永远不会发生。实际上，clone 方法将充当构造函数；你必须确保它不会对原始对象造成伤害，并且 clone 方法正确地实现了不变性。为了使 Stack 类上的 clone 方法正常工作，它必须复制 Stack 类实例的内部。最简单的做法是在 elements 字段对应的数组递归调用 clone 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Clone method for class with references to mutable state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">Stack</span> <span class="nf">clone</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Stack</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">Stack</span><span class="o">)</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span><span class="o">.</span><span class="na">elements</span> <span class="o">=</span> <span class="n">elements</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">AssertionError</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>注意，我们不需要将 <code>elements.clone</code> 的结果强制转换到 <code>Object[]</code>。在数组上调用 clone 方法将返回一个数组，该数组的运行时和编译时类型与被克隆的数组相同。这是复制数组的首选习惯用法。实际上，复制数组是 clone 机制唯一令人信服的使用场景。</p>
<p>还要注意，如果 elements 字段是 final 修饰的，上述解决方案就无法工作，因为 clone 方法将被禁止为字段分配新值。这是一个基础问题：与序列化一样，可克隆体系结构与使用 final 修饰可变对象引用的常用方式不兼容，除非在对象与其克隆对象之间可以安全地共享可变对象。为了使类可克隆，可能需要从某些字段中删除 final 修饰符。</p>
<p>仅仅递归调用 clone 方法并不总是足够的。例如，假设你正在为 HashTable 编写一个 clone 方法，HashTable 的内部由一组 bucket 组成，每个 bucket 引用键-值对链表中的第一个条目。为了提高性能，类实现了自己的轻量级单链表，而不是在内部使用 <code>java.util.LinkedList</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashTable</span> <span class="kd">implements</span> <span class="n">Cloneable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Entry</span><span class="o">[]</span> <span class="n">buckets</span> <span class="o">=</span> <span class="o">...;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Entry</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">final</span> <span class="n">Object</span> <span class="n">key</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Entry</span> <span class="n">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Entry</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">Entry</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>假设你只是像对 Stack 所做的那样，递归克隆 bucket 数组，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken clone method - results in shared mutable state!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">HashTable</span> <span class="nf">clone</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HashTable</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">HashTable</span><span class="o">)</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span><span class="o">.</span><span class="na">buckets</span> <span class="o">=</span> <span class="n">buckets</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">AssertionError</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>尽管 clone 方法有自己的 bucket 数组，但该数组引用的链接列表与原始链表相同，这很容易导致克隆和原始的不确定性行为。要解决这个问题，你必须复制包含每个 bucket 的链表。这里有一个常见的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Recursive clone method for class with complex mutable state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashTable</span> <span class="kd">implements</span> <span class="n">Cloneable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Entry</span><span class="o">[]</span> <span class="n">buckets</span> <span class="o">=</span> <span class="o">...;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Entry</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">final</span> <span class="n">Object</span> <span class="n">key</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Entry</span> <span class="n">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Entry</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">Entry</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Recursively copy the linked list headed by this Entry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Entry</span> <span class="nf">deepCopy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span><span class="n">next</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">next</span><span class="o">.</span><span class="na">deepCopy</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">HashTable</span> <span class="nf">clone</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">HashTable</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">HashTable</span><span class="o">)</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span><span class="o">.</span><span class="na">buckets</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">[</span><span class="n">buckets</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">buckets</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">buckets</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">result</span><span class="o">.</span><span class="na">buckets</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">buckets</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">deepCopy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">AssertionError</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>私有内部类 HashTable.Entry 已经被增强，它提供了进行「深拷贝」的方法。HashTable 上的 clone 方法分配一个大小合适的新 buckets 数组，并遍历原始 buckets 数组，对每个非空 buckets 元素进行深拷贝。Entry 类的 deepCopy() 方法会被递归调用直至复制完整个链表（该链表以 Entry 类的实例作为头节点）。这种方法虽然很灵活，而且在 buckets 不太长的情况下可以很好地工作，但是克隆链表并不是一个好方法，因为它为链表中的每个元素消耗一个堆栈帧。如果列表很长，很容易导致堆栈溢出。为了防止这种情况的发生，你可以用迭代替换 deepCopy() 方法的递归调用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Iteratively copy the linked list headed by this Entry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Entry</span> <span class="nf">deepCopy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Entry</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">next</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span> <span class="n">p</span> <span class="o">=</span> <span class="n">result</span><span class="o">;</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">key</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">value</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>克隆复杂可变对象的最后一种方法是调用 super.clone()，将结果对象中的所有字段设置为初始状态，然后调用更高级别的方法重新生成原始对象的状态。在我们的 HashTable 示例中，buckets 字段将初始化为一个新的 bucket 数组，并且对于克隆的 hash 表中的每个键值映射将调用 put(key, value) 方法（未显示）。这种方法通常产生一个简单、相当优雅的 clone 方法，它的运行速度不如直接操作克隆的内部的方法快。虽然这种方法很简洁，但它与整个可克隆体系结构是对立的，因为它盲目地覆盖了构成体系结构基础的逐字段对象副本。</p>
<p>与构造函数一样，clone 方法绝不能在正在构建的克隆上调用可覆盖方法。如果 clone 调用一个在子类中被重写的方法，这个方法将在子类有机会修复其在克隆中的状态之前执行，很可能导致克隆和原始的破坏。因此，前一段中讨论的 put(key, value) 方法应该是 final 修饰或 private 修饰的方法。（如果它是私有的，那么它可能是没有 final 修饰的公共「助手方法」。)</p>
<p>对象的 clone 方法被声明为抛出 CloneNotSupportedException，但是重写方法不需要。<strong>公共克隆方法应该省略 throw 子句，</strong> 作为不抛出受控异常的方法更容易使用。</p>
<p>用继承方式设计一个类时，你有两种选择，但是无论你选择哪一种，都不应该实现 Cloneable 接口。你可以选择通过实现一个功能正常的受保护克隆方法来模拟 Object 的行为，该方法声明为抛出 CloneNotSupportedException。这给子类实现 Cloneable 或不实现 Cloneable 的自由，就像它们直接扩展对象一样。或者，你可以选择不实现一个有效的克隆方法，并通过提供以下退化的克隆实现来防止子类实现它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// clone method for extendable class not supporting Cloneable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kd">final</span> <span class="n">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CloneNotSupportedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">throw</span> <span class="k">new</span> <span class="n">CloneNotSupportedException</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>还有一个细节需要注意。如果你编写了一个实现了 Cloneable 接口的线程安全类，请记住它的 clone 方法必须正确同步，就像其他任何方法一样。Object 类的 clone 方法不是同步的，因此即使它的实现在其他方面是令人满意的，你也可能需要编写一个返回 super.clone() 的同步 clone 方法。</p>
<p>回顾一下，所有实现 Cloneable 接口的类都应该使用一个返回类型为类本身的公共方法覆盖 clone。这个方法应该首先调用 super.clone()，然后「修复」任何需要「修复」的字段。通常，这意味着复制任何包含对象内部「深层结构」的可变对象，并将克隆对象对这些对象的引用替换为对其副本的引用。虽然这些内部副本通常可以通过递归调用 clone 来实现，但这并不总是最好的方法。如果类只包含基本数据类型的字段或对不可变对象的引用，那么很可能不需要修复任何字段。这条规则也有例外。例如，表示序列号或其他唯一 ID 的字段需要修复，即使它是基本数据类型或不可变的。</p>
<p>搞这么复杂真的有必要吗？答案是否定的。如果你扩展了一个已经实现了 Cloneable 接口的类，那么除了实现行为良好的 clone 方法之外，你别无选择。否则，最好提供对象复制的替代方法。一个更好的对象复制方法是提供一个复制构造函数或复制工厂。复制构造函数是一个简单的构造函数，它接受单个参数，其类型是包含构造函数的类，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Copy constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="nf">Yum</span><span class="o">(</span><span class="n">Yum</span> <span class="n">yum</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">};</span>
</span></span></code></pre></div><p>复制工厂与复制构造函数的静态工厂类似：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Copy factory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="n">Yum</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">Yum</span> <span class="n">yum</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">};</span>
</span></span></code></pre></div><p>复制构造函数方法及其静态工厂变体与克隆/克隆相比有许多优点：它们不依赖于易发生风险的语言外对象创建机制；他们不要求无法强制执行的约定；它们与最终字段的正确使用不冲突；它们不会抛出不必要的检查异常；而且不需要强制类型转换。</p>
<p>此外，复制构造函数或工厂可以接受类型为类实现的接口的参数。例如，按照约定，所有通用集合实现都提供一个构造函数，其参数为 collection 或 Map 类型。基于接口的复制构造函数和工厂（更确切地称为转换构造函数和转换工厂）允许客户端选择副本的实现类型，而不是强迫客户端接受原始的实现类型。例如，假设你有一个 HashSet s，并且希望将它复制为 TreeSet。克隆方法不能提供这种功能，但是使用转换构造函数很容易：new TreeSet&lt;&gt;(s)。</p>
<p>考虑到与 Cloneable 相关的所有问题，新的接口不应该扩展它，新的可扩展类不应该实现它。虽然 final 类实现 Cloneable 接口的危害要小一些，但这应该被视为一种性能优化，仅在极少数情况下是合理的。通常，复制功能最好由构造函数或工厂提供。这个规则的一个明显的例外是数组，最好使用 clone 方法来复制数组。</p>
<h2 id="总结">总结</h2>
<p>建议慎重覆盖 <code>clone()</code> 方法。<code>clone()</code> 方法是一个用于对象复制的方法，它可以创建一个新的对象，并将原始对象的状态复制到新的对象中。但是，在实现 <code>clone()</code> 方法时，需要注意一些问题，否则使用 <code>clone()</code> 方法可能会导致一些潜在的问题。</p>
<p>以下是在实现 <code>clone()</code> 方法时需要注意的一些问题：</p>
<ol>
<li>首先，需要确保类实现了 <code>Cloneable</code> 接口。这个接口是一个标记接口，没有任何方法，但是如果一个类没有实现 <code>Cloneable</code> 接口，调用其 <code>clone()</code> 方法会抛出 <code>CloneNotSupportedException</code> 异常。</li>
<li>在实现 <code>clone()</code> 方法时，需要调用 <code>super.clone()</code> 方法来创建一个新的对象，并将原始对象的状态复制到新的对象中。</li>
<li>如果类的成员变量包含可变对象，那么需要对这些成员变量进行深度复制，以确保新对象与原始对象具有不同的状态。</li>
<li><code>clone()</code> 方法返回的对象类型是 <code>Object</code>，需要进行类型转换，这可能会导致一些类型安全问题。因此，建议在覆盖 <code>clone()</code> 方法时，将返回类型声明为类本身的类型，并在方法中进行类型转换。</li>
<li>在实现 <code>clone()</code> 方法时，需要注意对异常的处理。如果一个类没有实现 <code>Cloneable</code> 接口，调用其 <code>clone()</code> 方法会抛出 <code>CloneNotSupportedException</code> 异常。在实现 <code>clone()</code> 方法时，需要考虑这个异常，并在方法中进行适当的处理。</li>
</ol>
<p>总之，在覆盖 <code>clone()</code> 方法时，需要考虑到上述问题，并根据实际情况进行处理。在某些情况下，可能需要采用其他的复制方式，例如序列化和反序列化。因此，在覆盖 <code>clone()</code> 方法之前，需要仔细考虑是否真正需要使用该方法，并根据实际情况选择最合适的复制方式。</p>
<h2 id="扩展">扩展</h2>
<h3 id="1深度拷贝和浅度拷贝">1、深度拷贝和浅度拷贝</h3>
<p>深度拷贝和浅度拷贝是指在进行对象复制时，对于对象中包含的成员变量，如何进行复制的问题。</p>
<p>浅度拷贝是指只复制对象中的基本数据类型和引用类型的地址，而不是引用类型所指向的对象本身。这就意味着，在进行浅度拷贝时，原始对象和复制对象中的引用类型成员变量将指向同一个对象，这可能会导致一些潜在的问题，例如一个对象的状态的改变会影响到另一个对象。</p>
<p>深度拷贝是指将对象中的基本数据类型和引用类型所指向的对象都进行复制。这就意味着，在进行深度拷贝时，原始对象和复制对象中的引用类型成员变量将指向不同的对象，这可以避免上述问题。</p>
<p>例如，考虑一个包含一个引用类型成员变量的类 <code>Person</code>，其中引用类型成员变量是一个 <code>Address</code> 对象。如果进行浅度拷贝，那么复制对象中的 <code>address</code>成员变量将指向原始对象中的 <code>address</code> 成员变量指向的同一个 <code>Address</code> 对象。这就意味着，如果修改复制对象中的 <code>address</code> 成员变量，原始对象中的 <code>address</code> 成员变量也会发生改变。</p>
<p>如果进行深度拷贝，那么复制对象中的 <code>address</code> 成员变量将指向一个新的 <code>Address</code> 对象，这样就可以避免修改一个对象对另一个对象造成的影响。</p>
<p>需要注意的是，进行深度拷贝可能会导致性能问题，因为需要递归地复制对象中的所有成员变量和引用类型所指向的对象。因此，在进行对象复制时，需要根据实际情况选择适当的复制方式，以权衡性能和正确性。</p>
<p>在 Java 中，通过实现 <code>Cloneable</code> 接口和覆盖 <code>clone()</code> 方法，可以实现对象的浅度拷贝。如果需要进行深度拷贝，可以通过序列化和反序列化实现，或者使用第三方库进行对象复制。</p>
<h3 id="2请问在-java-中如何实现深度拷贝">2、请问在 Java 中如何实现深度拷贝？</h3>
<p>在 Java 中，可以通过以下几种方式实现深度拷贝：</p>
<ol>
<li>
<p>通过实现 <code>Serializable</code> 接口实现深度拷贝：在需要进行深度拷贝的类中实现 <code>Serializable</code> 接口，并通过序列化和反序列化实现深度拷贝。具体来说，可以将对象序列化为字节数组，然后再将字节数组反序列化为一个新的对象。需要注意的是，对象中的所有成员变量都必须是可序列化的，否则将会抛出 <code>NotSerializableException</code> 异常。</p>
<p>下面是一个通过实现 <code>Serializable</code> 接口实现深度拷贝的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 构造方法和 getter/setter 方法省略
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Person</span> <span class="nf">deepCopy</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将对象序列化为字节数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ByteArrayOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">ObjectOutputStream</span> <span class="n">oos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectOutputStream</span><span class="o">(</span><span class="n">bos</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">oos</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 将字节数组反序列化为一个新的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">ByteArrayInputStream</span> <span class="n">bis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayInputStream</span><span class="o">(</span><span class="n">bos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">ObjectInputStream</span> <span class="n">ois</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectInputStream</span><span class="o">(</span><span class="n">bis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">Person</span><span class="o">)</span> <span class="n">ois</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例代码中，通过实现 <code>Serializable</code> 接口，并在 <code>deepCopy()</code> 方法中将对象序列化为字节数组，然后再将字节数组反序列化为一个新的对象，从而实现了深度拷贝。需要注意的是，对象中的所有成员变量都必须是可序列化的，否则将会抛出 <code>NotSerializableException</code> 异常。</p>
</li>
<li>
<p>通过实现自定义深度拷贝方法实现深度拷贝：在需要进行深度拷贝的类中实现自定义的深度拷贝方法，递归地复制对象中的所有成员变量和引用类型所指向的对象。需要注意的是，如果对象中的成员变量包含循环引用，那么需要对循环引用进行特殊处理，以避免无限递归。</p>
</li>
<li>
<p>使用第三方库实现深度拷贝：Java 中有许多第三方库可以用于实现深度拷贝，例如 Apache Commons 的 <code>SerializationUtils</code>、Google 的 <code>Gson</code>、Jackson 等。</p>
<p>下面是一个使用 Jackson 库实现深度拷贝的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 构造方法和 getter/setter 方法省略
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Person</span> <span class="nf">deepCopy</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">writeValueAsString</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例代码中，通过使用 Jackson 库将对象转换为 JSON 字符串，然后再将 JSON 字符串转换为新的对象，从而实现了深度拷贝。需要注意的是，如果对象中的成员变量包含循环引用，那么需要对循环引用进行特殊处理，以避免无限递归。</p>
</li>
<li>
<p>使用流式 API：Java 8 引入了流式 API，可以使用流式 API 来实现对象的深度拷贝。具体来说，可以使用 <code>map()</code> 方法将对象流中的每个元素复制为一个新的对象，然后使用 <code>collect()</code> 方法将新对象收集到一个集合中。需要注意的是，如果对象中的成员变量包含循环引用，那么需要对循环引用进行特殊处理，以避免无限递归。</p>
<p>当使用流式 API 实现深度拷贝时，可以使用 <code>map()</code> 方法将对象流中的每个元素复制为一个新的对象，然后使用 <code>collect()</code> 方法将新对象收集到一个集合中。需要注意的是，如果对象中的成员变量包含循环引用，那么需要对循环引用进行特殊处理，以避免无限递归。</p>
<p>以下是一个使用流式 API 实现深度拷贝的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 构造方法和 getter/setter 方法省略
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Person</span> <span class="nf">deepCopy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Address</span><span class="o">&gt;</span> <span class="n">addresses</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">addresses</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">Address</span><span class="o">::</span><span class="n">deepCopy</span><span class="o">)</span> <span class="c1">// 使用 map() 方法将每个 Address 对象复制为一个新的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span> <span class="c1">// 使用 collect() 方法将新对象收集到一个集合中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">addresses</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">street</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 构造方法和 getter/setter 方法省略
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Address</span> <span class="nf">deepCopy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Address</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">street</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">city</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">      <span class="c1">// 直接复制 Address 对象即可，因为 Address 类中没有引用类型的成员变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例代码中，通过使用流式 API 将 <code>addresses</code> 集合中的每个 <code>Address</code> 对象复制为一个新的对象，并将新对象收集到一个集合中，从而实现了 <code>Person</code> 对象的深度拷贝。需要注意的是，在实现 <code>Address</code> 的 <code>deepCopy()</code> 方法时，因为 <code>Address</code> 类中没有引用类型的成员变量，因此可以直接复制一个新的 <code>Address</code> 对象即可。</p>
<p>需要注意的是，如果对象中的成员变量包含循环引用，那么需要进行特殊处理，以避免无限递归。例如，在上面的示例代码中，如果 <code>Person</code> 类中包含一个 <code>List&lt;Person&gt;</code> 类型的成员变量，那么在进行深度拷贝时就需要对 <code>List&lt;Person&gt;</code> 进行特殊处理。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记12：当覆盖 equals 方法时，总要覆盖 hashCode 方法</title>
      <link>https://blog.chensoul.com/posts/2023/05/26/always-override-tostring/</link>
      <pubDate>Fri, 26 May 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/26/always-override-tostring/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：始终覆盖 toString 方法。 介绍 虽然 Object 提供 toString 方法的实现，但它返回的字符串通常不是类的</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：始终覆盖 toString 方法。</p>
<h2 id="介绍">介绍</h2>
<p>虽然 Object 提供 toString 方法的实现，但它返回的字符串通常不是类的用户希望看到的。它由后跟「at」符号（@）的类名和 hash 代码的无符号十六进制表示（例如 <code>PhoneNumber@163b91</code>）组成。toString 的通用约定是这么描述的，返回的字符串应该是「简洁但信息丰富的表示，易于阅读」。虽然有人认为 <code>PhoneNumber@163b91</code> 简洁易懂，但与 <code>707-867-5309</code> 相比，它的信息量并不大。toString 约定接着描述，「建议所有子类覆盖此方法。」好建议，确实！</p>
<p>虽然它不如遵守 equals 和 hashCode 约定那么重要，但是 <strong>提供一个好的 toString 实现（能）使类更易于使用，使用该类的系统（也）更易于调试。</strong> 当对象被传递给 println、printf、字符串连接操作符或断言或由调试器打印时，将自动调用 toString 方法。即使你从来没有调用 toString 对象，其他人也可能（使用）。例如，有对象引用的组件可以在日志错误消息中包含对象的字符串表示。如果你未能覆盖 toString，则该消息可能完全无用。</p>
<p>如果你已经为 PhoneNumber 提供了一个好的 toString 方法，那么生成一个有用的诊断消息就像这样简单：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Failed to connect to &#34;</span> <span class="o">+</span> <span class="n">phoneNumber</span><span class="o">);</span>
</span></span></code></pre></div><p>无论你是否覆盖 toString，程序员都会以这种方式生成诊断消息，但是除非你（覆盖 toString），否则这些消息不会有用。提供好的 toString 方法的好处不仅仅是将类的实例扩展到包含对这些实例的引用的对象，特别是集合。在打印 map 时，你更愿意看到哪个，<code>{Jenny=PhoneNumber@163b91}</code> 还是 <code>{Jenny=707-867-5309}</code>？</p>
<p><strong>当实际使用时，toString 方法应该返回对象中包含的所有有趣信息，</strong> 如电话号码示例所示。如果对象很大，或者包含不利于字符串表示的状态，那么这种方法是不切实际的。在这种情况下，toString 应该返回一个摘要，例如曼哈顿住宅电话目录（1487536 号清单）或 <code>Thread[main,5,main]</code>。理想情况下，字符串应该是不言自明的。（线程示例未能通过此测试。）如果没有在字符串表示中包含所有对象的有趣信息，那么一个特别恼人的惩罚就是测试失败报告，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Assertion</span> <span class="n">failure</span><span class="o">:</span> <span class="n">expected</span> <span class="o">{</span><span class="n">abc</span><span class="o">,</span> <span class="mi">123</span><span class="o">},</span> <span class="n">but</span> <span class="n">was</span> <span class="o">{</span><span class="n">abc</span><span class="o">,</span> <span class="mi">123</span><span class="o">}.</span>
</span></span></code></pre></div><p>在实现 toString 方法时，你必须做的一个重要决定是是否在文档中指定返回值的格式。建议你针对值类（如电话号码或矩阵）这样做。指定格式的优点是，它可以作为对象的标准的、明确的、人类可读的表示。这种表示可以用于输入和输出，也可以用于持久的人类可读数据对象，比如 CSV 文件。如果指定了格式，提供一个匹配的静态工厂或构造函数通常是一个好主意，这样程序员就可以轻松地在对象及其字符串表示之间来回转换。Java 库中的许多值类都采用这种方法，包括 BigInteger、BigDecimal 和大多数包装类。</p>
<p>指定 toString 返回值的格式的缺点是，一旦指定了它，就会终生使用它，假设你的类被广泛使用。程序员将编写代码来解析表示、生成表示并将其嵌入持久数据中。如果你在将来的版本中更改了表示形式，你将破坏它们的代码和数据，它们将发出大量的消息。通过选择不指定格式，你可以保留在后续版本中添加信息或改进格式的灵活性。</p>
<p><strong>无论你是否决定指定格式，你都应该清楚地记录你的意图。</strong> 如果指定了格式，则应该精确地指定格式。例如，这里有一个 toString 方法用于PhoneNumber 类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">* Returns the string representation of this phone number.
</span></span></span><span class="line"><span class="cl"><span class="cm">* The string consists of twelve characters whose format is
</span></span></span><span class="line"><span class="cl"><span class="cm">* &#34;XXX-YYY-ZZZZ&#34;, where XXX is the area code, YYY is the
</span></span></span><span class="line"><span class="cl"><span class="cm">* prefix, and ZZZZ is the line number. Each of the capital
</span></span></span><span class="line"><span class="cl"><span class="cm">* letters represents a single decimal digit.
</span></span></span><span class="line"><span class="cl"><span class="cm">**
</span></span></span><span class="line"><span class="cl"><span class="cm">If any of the three parts of this phone number is too small
</span></span></span><span class="line"><span class="cl"><span class="cm">* to fill up its field, the field is padded with leading zeros.
</span></span></span><span class="line"><span class="cl"><span class="cm">* For example, if the value of the line number is 123, the last
</span></span></span><span class="line"><span class="cl"><span class="cm">* four characters of the string representation will be &#34;0123&#34;.
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%03d-%03d-%04d&#34;</span><span class="o">,</span> <span class="n">areaCode</span><span class="o">,</span> <span class="n">prefix</span><span class="o">,</span> <span class="n">lineNum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果你决定不指定一种格式，文档注释应该如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">* Returns a brief description of this potion. The exact details
</span></span></span><span class="line"><span class="cl"><span class="cm">* of the representation are unspecified and subject to change,
</span></span></span><span class="line"><span class="cl"><span class="cm">* but the following may be regarded as typical:
</span></span></span><span class="line"><span class="cl"><span class="cm">**
</span></span></span><span class="line"><span class="cl"><span class="cm">&#34;[Potion #9: type=love, smell=turpentine, look=india ink]&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span></code></pre></div><p>在阅读了这篇文档注释之后，当格式被更改时，生成依赖于格式细节的代码或持久数据的程序员将只能怪他们自己。</p>
<p>无论你是否指定了格式，都要 <strong>提供对 toString 返回值中包含的信息的程序性访问。</strong> 例如，PhoneNumber 类应该包含区域代码、前缀和行号的访问器。如果做不到这一点，就会迫使需要这些信息的程序员解析字符串。除了降低性能和使程序员不必要的工作之外，这个过程很容易出错，并且会导致脆弱的系统在你更改格式时崩溃。由于没有提供访问器，你可以将字符串格式转换为事实上的 API，即使你已经指定了它可能会发生更改。</p>
<p>在静态实用程序类中编写 toString 方法是没有意义的，在大多数 enum 类型中也不应该编写 toString 方法，因为 Java 为你提供了一个非常好的方法。但是，你应该在任何抽象类中编写 toString 方法，该类的子类共享公共的字符串表示形式。例如，大多数集合实现上的 toString 方法都继承自抽象集合类。</p>
<p>谷歌的开放源码自动值工具将为你生成 toString 方法，大多数 IDE 也是如此。这些方法可以很好地告诉你每个字段的内容，但并不专门针对类的含义。因此，例如，对于 PhoneNumber 类使用自动生成的 toString 方法是不合适的（因为电话号码具有标准的字符串表示形式），但是对于 Potion 类来说它是完全可以接受的。也就是说，一个自动生成的 toString 方法要比从对象继承的方法好得多，对象继承的方法不会告诉你对象的值。</p>
<p>回顾一下，在你编写的每个实例化类中覆盖对象的 toString 实现，除非超类已经这样做了。它使类更易于使用，并有助于调试。toString 方法应该以美观的格式返回对象的简明、有用的描述。</p>
<h2 id="总结">总结</h2>
<p>建议始终覆盖 <code>toString()</code> 方法。这是因为 <code>toString()</code> 方法是 Java 中最常用的方法之一，它可以将一个对象转换成一个字符串，方便输出和日志记录等操作。</p>
<p>默认情况下，如果一个类没有覆盖 <code>toString()</code> 方法，那么它将继承自 <code>Object</code> 类的实现，该实现返回一个包含对象类名和散列码的字符串。这个默认的实现可能对于调试和开发过程中的一些操作是有用的，但通常不会提供有关对象的有用信息。</p>
<p>因此，建议在每个类中都覆盖 <code>toString()</code> 方法，以便在需要时提供有用的信息。在实现 <code>toString()</code> 方法时，可以返回一个包含有关对象状态的字符串，这样就可以在调试和其他操作中使用该字符串。例如，如果一个类表示一个人，那么它的 <code>toString()</code> 方法可以返回该人的姓名和年龄，以便在需要时更好地理解该对象。</p>
<p>另外，在重写 <code>toString()</code> 方法时，也应该遵循一些约定，以确保该方法的实现正确、高效和易于使用。其中一些约定包括：</p>
<ol>
<li>返回的字符串应该以对象的类名作为开头，后面跟着对象的状态信息。例如：<code>Person{name='John', age=30}</code>。</li>
<li>返回的字符串应该是可读的，并且应该包含有关对象状态的所有信息，以便在需要时更好地理解该对象。</li>
<li>返回的字符串应该是不可变的，即不能在返回字符串后更改对象状态以更改返回值。</li>
<li>返回的字符串应该是符合语言习惯的，并且应该适合于国际化和本地化。</li>
</ol>
<p>总之，覆盖 <code>toString()</code> 方法可以提高代码的可读性和可维护性，因为它提供了有关对象状态的有用信息，同时也符合 Java 语言的习惯和规范。</p>
<p>Java 中有很多可以自动生成 <code>toString()</code> 方法的开源框架。以下是一些常用的框架：</p>
<ol>
<li>Apache Commons Lang - <code>ToStringBuilder</code>: Apache Commons Lang 是一个常用的开源 Java 工具库，其中的 <code>ToStringBuilder</code> 类可以帮助开发者自动生成 <code>toString()</code> 方法。使用该类需要在需要自动生成 <code>toString()</code> 方法的类中添加对应的成员变量，并调用 <code>ToStringBuilder</code> 的 <code>reflectionToString()</code> 方法。</li>
<li>Guava - <code>MoreObjects.toStringHelper()</code>: Guava 是 Google 开源的一个 Java 工具库，其中的 <code>MoreObjects</code> 类可以帮助开发者自动生成 <code>toString()</code> 方法。使用该类需要在需要自动生成 <code>toString()</code> 方法的类中添加对应的成员变量，并调用 <code>MoreObjects</code> 的 <code>toStringHelper()</code> 方法。</li>
<li>Lombok - <code>@ToString</code>: Lombok 是一个 Java 库，它可以通过注解来简化 Java 代码。其中的 <code>@ToString</code> 注解可以帮助开发者自动生成 <code>toString()</code> 方法。使用该注解只需要在需要自动生成 <code>toString()</code> 方法的类上添加 <code>@ToString</code> 注解即可，Lombok 会自动为该类生成对应的 <code>toString()</code> 方法4. Eclipse Collections - <code>ToString</code>: Eclipse Collections 是一个基于 Java 的集合框架，其中的 <code>ToString</code> 类可以帮助开发者自动生成 <code>toString()</code> 方法。使用该类需要在需要自动生成 <code>toString()</code> 方法的类中添加对应的成员变量，并调用 <code>ToString</code> 的 <code>includeFields()</code> 方法。</li>
<li>Apache Commons BeanUtils - <code>ReflectionToStringBuilder</code>: Apache Commons BeanUtils 是一个常用的 Java Bean 操作工具库，其中的 <code>ReflectionToStringBuilder</code> 类可以帮助开发者自动生成 <code>toString()</code> 方法。使用该类需要在需要自动生成 <code>toString()</code> 方法的类中添加对应的成员变量，并调用 <code>ReflectionToStringBuilder</code> 的 <code>toString()</code> 方法。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-20｜自动生成每日早报、周末团建</title>
      <link>https://blog.chensoul.com/posts/2023/05/25/weekly_review_20/</link>
      <pubDate>Thu, 25 May 2023 17:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/25/weekly_review_20/</guid>
      <description>前言 乐农湖畔生态园 本篇是对 2023-05-15 到 2023-05-21 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 不知不觉，这已经是第20篇周报了。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-00.jpeg" alt="weekly-review-20-00"  />
</p>
<center><i>乐农湖畔生态园</i></center>
<br/>
<p>本篇是对 <code>2023-05-15</code> 到 <code>2023-05-21</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>不知不觉，这已经是第20篇周报了。这周依旧是健身、理财、学习和写博客。</p>
<h2 id="自动生成每日早报">自动生成每日早报</h2>
<p>最近在朋友圈看到这样一个早报，就在想能否通过代码自动抓取新闻并生成这样一个早报图片？</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-04.jpeg" alt="weekly-review-20-04" style="width:50%;" />
<p>于是，在网上找到一篇文章：<a href="https://icodeq.com/2022/5fe2010403bb/">前后端均基于 vercel 的每日早报项目</a></p>
<p>参考源代码，做了一些修改，代码见：<a href="https://github.com/chensoul/chensoul/blob/main/fetch_news.py">fetch_news.py</a>。修改后的逻辑是将抓取的新闻发送到 memos，例如：<a href="https://memos.chensoul.com/m/349">https://memos.chensoul.com/m/349</a> 。可以在 github action 设置每天早上7点自动发送到 memos，然后再通过 n8n 同步到 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-01.png" alt="weekly-review-20-01" style="width: 50%;" />
<p>在memos中导出的图片如下：</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-05.png" alt="weekly-review-20-05" style="width:50%;" />
<p>如果能够通过 python 自动生成图片，那就更好了。记录一下，待以后实现。</p>
<h2 id="团建">团建</h2>
<p>公司团建选择在周六，而且还是520这一天，真是会挑日子。很多人请假，最后只有13人参加团建，其中有8人是我们开发组的🤣。挑两张照片发到这里～</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-03.jpeg" alt="weekly-review-20-03"  />
</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-02.jpeg" alt="weekly-review-20-02"  />
</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 1861 元，明细如下：</p>
<ul>
<li>5月15日：1027元，武功山旅游，加油327</li>
<li>5月16日：42元</li>
<li>5月17日：12元</li>
<li>5月18日：16元</li>
<li>5月19日：25元</li>
<li>5月20日：562元，看望六舅</li>
<li>5月21日：177元</li>
</ul>
<h2 id="健身">健身</h2>
<p>本周跑步 36 公里，最长跑步距离为 10 公里。明细数据如下：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-08.png" alt="weekly-review-20-08"  />
</p>
<p>我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2个省份 2个城市。更多跑步数据在<a href="https://run.chensoul.com/">跑步</a>主页。</p>
<h2 id="工作">工作</h2>
<h4 id="博客">博客</h4>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-07.png" alt="weekly-review-20-07"  />
</p>
<p>本周完成五篇博客：</p>
<ul>
<li>
<p><a href="/posts/2023/05/22/java-design-patterns-abstract-document/">Java设计模式：Abstract Document</a></p>
</li>
<li>
<p><a href="/posts/2023/05/22/java-design-patterns-abstract-factory/">Java设计模式：Abstract Factory</a></p>
</li>
<li>
<p><a href="/posts/2023/05/23/always-override-hashcode-when-you-override-equals/">《Effective Java 3》笔记11：当覆盖 equals 方法时，总要覆盖 hashCode 方法</a></p>
</li>
<li>
<p><a href="/posts/2023/05/22/docker-continuous-integration/">[译]Build Robust Continuous Integration With Docker and Friends</a></p>
</li>
<li>
<p><a href="/posts/2023/05/23/python-comment-and-variable/">Python学习1：注释、变量和常量</a></p>
</li>
</ul>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中。我写了一个 python 脚本从 memos读取最近一周的 memos 记录。</p>
<ul>
<li><strong>2023-05-19</strong> 陈皓（左耳朵耗子）前年做过一次直播访谈，谈到了技术、行业、创业的各个方面。本文是访谈内容的文字整理，以此纪念他。  <a href="https://mp.weixin.qq.com/s/bOnW8gDJ-dXp4KbAjhDw9A">https://mp.weixin.qq.com/s/bOnW8gDJ-dXp4KbAjhDw9A</a>  <code>#memos</code> <code>#skill</code> <code>#tool</code></li>
<li><strong>2023-05-17</strong> 用 Material for MkDocs 来生成专业的技术文档 <a href="https://vra.github.io/2023/05/17/mkdocs-material-tutorial/">https://vra.github.io/2023/05/17/mkdocs-material-tutorial/</a>  <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-17</strong> 基于  Popsy 创建自己的个人主页 <a href="https://popsy.co/">https://popsy.co/</a> <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-17</strong> Hellonext是一种反馈管理平台，它可以帮助组织、企业和开发团队更好地管理用户反馈和需求。它提供了一个用户友好的界面，使用户可以轻松地提交反馈和建议，而管理人员可以使用该平台来跟踪和组织这些反馈，并确定哪些反馈应该优先考虑实现。Hellonext还提供了数据分析和报告功能，帮助管理人员了解用户反馈的趋势和优先级，以便更好地满足用户需求。 <a href="https://hellonext.co/">https://hellonext.co/</a> <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-17</strong> Dify 是一个简单且能力丰富的自然语言编程工具。你可以用它搭建商用级应用，个人助理。如果你想自己开发应用，Dify 也能为你省下接入 OpenAI 的后端工作，但使用我们逐步提供高的可视化运营能力，你可以持续的改进和训练你的 GPT 模型。 <a href="https://docs.dify.ai/v/zh-hans/getting-started/intro-to-dify">https://docs.dify.ai/v/zh-hans/getting-started/intro-to-dify</a> <code>#tool</code> <code>#memos</code></li>
<li><strong>2023-05-17</strong> 用200行python代码实现dns服务器的教程 <a href="https://implement-dns.wizardzines.com/">https://implement-dns.wizardzines.com/</a>  <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-17</strong> postman 推出了postbot，使用人工智能帮助您调试和理解 API、更快地编写测试  <a href="https://blog.postman.com/introducing-postbot-postmans-new-ai-assistant/">https://blog.postman.com/introducing-postbot-postmans-new-ai-assistant/</a>  <code>#tool</code> <code>#memos</code></li>
<li><strong>2023-05-17</strong> <a href="https://imgg.gg/">https://imgg.gg/</a> 是一个可以将任意 sms 内容转换成为图片的工具，不用担心在 APP 上截图会泄漏隐私。生成的图片的样式很像 <a href="https://poet.so/">https://poet.so/</a> ，不过Poet.so 只能生成推特、linkedin、shopify 的分享图。 <code>#tool</code> <code>#memos</code></li>
<li><strong>2023-05-17</strong> 都知道 ffmpeg 是媒体文件处理的瑞士军刀，但命令行的操作对大部分人来说确实会面临迷茫和繁琐。FFmpeg.guide 就是一个图形化生成 ffmpeg 命令的工具。  网站地址：<a href="https://ffmpeg.guide/">https://ffmpeg.guide/</a> <code>#tool</code> <code>#memos</code></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python学习1：注释、变量和常量</title>
      <link>https://blog.chensoul.com/posts/2023/05/23/python-comment-and-variable/</link>
      <pubDate>Tue, 23 May 2023 18:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/23/python-comment-and-variable/</guid>
      <description>Python 注释、变量和常量是编写 Python 代码时非常重要的概念，下面分别介绍它们的基本用法和语法。 Hello World 创建一个 00_helloworld.py 文件，打印 hello world： print(&amp;#34</description>
      <content:encoded><![CDATA[<p>Python 注释、变量和常量是编写 Python 代码时非常重要的概念，下面分别介绍它们的基本用法和语法。</p>
<h2 id="hello-world">Hello World</h2>
<p>创建一个 00_helloworld.py 文件，打印 hello world：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello，World!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>执行该文件，会输出结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python 00_helloworld.py
</span></span><span class="line"><span class="cl">Hello，World!
</span></span></code></pre></div><p>一般在python文件的开头第一行，我们都会看到下面的代码行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># python2</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 或者</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/usr/bin/python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># python3</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 或者</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/usr/bin/python3</span>
</span></span></code></pre></div><p>这行代码用来指定本脚本用什么解释器来执行。</p>
<p><code>#!/usr/bin/python</code> 是告诉操作系统执行这个脚本的时候，调用 /usr/bin 下的 python 解释器。</p>
<p><code>#!/usr/bin/env python</code> 这种用法是为了防止操作系统用户没有将 python 装在默认的 /usr/bin 路径里。当系统看到这一行的时候，首先会到 env 设置里查找 python 的安装路径，再调用对应路径下的解释器程序完成操作。为了增强代码的可移植性，<strong>推荐这种写法</strong>。</p>
<p>在 00_helloworld.py 添加这行代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello，World!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>然后，修改该文件为可执行属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod +x 00_helloworld.py
</span></span></code></pre></div><p>就可以这样执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">. 00_helloworld.py
</span></span></code></pre></div><h2 id="编码格式">编码格式</h2>
<p>Python3 默认的编码格式是UTF-8（Unicode Transformation Format - 8 bit）。这是一种通用的字符编码，支持几乎所有的字符集，包括 ASCII、Latin、中文、日文、韩文等。</p>
<p>在 Python 3.x 中，所有的字符串都是以 Unicode 编码存储的。当你在 Python 中创建一个字符串时，你可以使用任何 Unicode 字符，而不必担心编码问题。</p>
<p>当你打开一个文本文件时，Python 会自动尝试使用 UTF-8 编码来解析文件内容。如果文件使用其他编码格式，你需要使用相应的编码格式来打开文件，或者在读取文件内容后将其解码为 Unicode。</p>
<p>在 Python 中，你可以使用编码声明（coding declaration）来指定文件的编码格式。编码声明是一个特殊的注释，出现在 Python 文件的第一行或第二行（如果文件的第一行是 shebang，则编码声明必须出现在第二行），格式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># -*- coding: encoding -*-</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 或者</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># coding=utf-8</span>
</span></span></code></pre></div><p>其中，<code>encoding</code> 是文件的编码格式，可以是 UTF-8、ISO-8859-1 或其他编码格式的名称。编码声明告诉 Python 解释器应该使用指定的编码格式来解析该文件中的文本内容。如果没有编码声明，Python3 默认使用 UTF-8 编码来解析文件内容。</p>
<p>Python 2.x 的默认编码格式是 ASCII，这是一种 7-bit 的字符编码，只能表示最基本的 ASCII 字符集，无法支持多语言和 Unicode 字符。</p>
<p>在 Python 2.x 中，如果你需要使用 Unicode 字符，你需要在字符串前面添加一个 <code>u</code> 字符，以表示该字符串是一个 Unicode 字符串。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># -*- coding: utf-8 -*-</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="sa">u</span><span class="s1">&#39;你好，世界！&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">s</span>
</span></span></code></pre></div><p>在 Python 2.x 中，如果你需要打开一个非 ASCII 编码的文本文件，你需要在打开文件时指定文件的编码格式。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;filename.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;gbk&#39;</span><span class="p">)</span>  <span class="c1"># 读取并解码文件内容</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></div><p>在 Python 2.x 中，你可以使用编码声明来指定文件的编码格式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># -*- coding: encoding -*-</span>
</span></span></code></pre></div><p>其中，<code>encoding</code> 是文件的编码格式，可以是 UTF-8、GBK、ISO-8859-1 或其他编码格式的名称。编码声明告诉 Python 解释器应该使用指定的编码格式来解析该文件中的文本内容。如果没有编码声明，Python 2.x 默认使用 ASCII 编码来解析文件内容。</p>
<p>在终端输入如下命令，查看编码格式：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ python
</span></span><span class="line"><span class="cl">Python 3.11.3 <span class="o">(</span>main, Apr  <span class="m">7</span> 2023, 20:13:31<span class="o">)</span> <span class="o">[</span>Clang 14.0.0 <span class="o">(</span>clang-1400.0.29.202<span class="o">)]</span> on darwin
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;help&#34;</span>, <span class="s2">&#34;copyright&#34;</span>, <span class="s2">&#34;credits&#34;</span> or <span class="s2">&#34;license&#34;</span> <span class="k">for</span> more information.
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; import sys
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; sys.getdefaultencoding<span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;utf-8&#39;</span>
</span></span></code></pre></div><h2 id="注释">注释</h2>
<p>在 Python 中，注释用于在代码中添加注释、解释或说明。注释通常用于提高代码的可读性，帮助其他人理解你的代码。</p>
<p>Python 支持两种类型的注释：单行注释和多行注释。</p>
<h3 id="单行注释">单行注释</h3>
<p>在 Python 中，单行注释以井号(<code>#</code>)开头，用于在代码行的末尾或者独立一行中添加注释。任何紧随井号后的文本都将被解释器忽略。</p>
<p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 这是一个单行注释</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello, World!&#34;</span><span class="p">)</span>  <span class="c1"># 这也是一个单行注释</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s2">&#34;# This is not a comment because it&#39;s inside quotes.&#34;</span>
</span></span></code></pre></div><p>在这个例子中，第一行是一个独立的单行注释，第二行则是在代码行的末尾添加的单行注释。这些注释不会影响程序的执行，但是可以帮助其他人理解你的代码。</p>
<h3 id="多行注释">多行注释</h3>
<p>Python中使用以三个单引号或者三个双引号括起来的注释被视为多行注释。多行注释通常用于注释函数、类、模块等。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">这是一个多行注释，
</span></span></span><span class="line"><span class="cl"><span class="s1">它可以用于描述函数、类或模块的功能和使用方法。
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">add_numbers</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    这是一个用于计算两个数字之和的函数。
</span></span></span><span class="line"><span class="cl"><span class="s2">    参数：
</span></span></span><span class="line"><span class="cl"><span class="s2">    a -- 第一个数字
</span></span></span><span class="line"><span class="cl"><span class="s2">    b -- 第二个数字
</span></span></span><span class="line"><span class="cl"><span class="s2">    返回值：
</span></span></span><span class="line"><span class="cl"><span class="s2">    两个数字的和
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></span></code></pre></div><blockquote>
<p>注意：</p>
<p>Python的多行注释实际上是一个字符串字面值，因此如果不被赋值给任何变量，它们将不会对程序产生任何影响。</p>
</blockquote>
<h2 id="变量">变量</h2>
<p>在 Python 中，变量是用来存储数据的标识符。它们是程序中的一种基本元素，用于操作数据并在程序中引用它们。</p>
<p>Python 中的变量可以存储各种数据类型，包括数字、字符串、列表、元组、字典等。变量的值可以随时更改，因此它们是动态的。</p>
<p>变量的命名规则如下：</p>
<ul>
<li>变量名必须以字母或下划线开头。</li>
<li>变量名可以包含字母、数字和下划线。</li>
<li>变量名区分大小写。</li>
<li>变量名不能与 Python 的关键字相同。</li>
</ul>
<blockquote>
<p>以下是 Python 3.x 版本中的所有关键字：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">False  class   finally is      <span class="k">return</span>
</span></span><span class="line"><span class="cl">None   <span class="k">continue</span>    <span class="k">for</span>     lambda  try
</span></span><span class="line"><span class="cl">True   def     from    nonlocal    <span class="k">while</span>
</span></span><span class="line"><span class="cl">and    del     global  not     with
</span></span><span class="line"><span class="cl">as     <span class="k">elif</span>    <span class="k">if</span>      or      yield
</span></span><span class="line"><span class="cl">assert <span class="k">else</span>    import  pass    
</span></span><span class="line"><span class="cl"><span class="nb">break</span>  except  in      raise   
</span></span></code></pre></div><p>在 Python 2.x 中，还有两个额外的关键字 <code>exec</code> 和 <code>print</code>，但它们在 Python 3.x 中已经被移除。</p>
<p>如果你不确定某个标识符是否是关键字，你可以使用 Python 的 <code>keyword</code> 模块来检查：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">keyword</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">keyword</span><span class="o">.</span><span class="n">kwlist</span><span class="p">)</span>
</span></span></code></pre></div></blockquote>
<h3 id="变量定义和使用">变量定义和使用</h3>
<p>在 Python 中，可以使用赋值语句来创建变量。赋值语句使用等号(<code>=</code>)将变量名和要存储在变量中的值分开。</p>
<p>Python是动态类型的语言，无须声明变量类型，直接对变量赋值即可使用。</p>
<p>示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 创建一个整型变量 x</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 创建一个字符串变量 name</span>
</span></span><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;John&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 创建一个列表变量 my_list</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 引用变量 x 的值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 输出 5</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 引用变量 name 的值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;My name is&#34;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>  <span class="c1"># 输出 My name is John</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 引用变量 my_list 的值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">)</span>  <span class="c1"># 输出 [1, 2, 3]</span>
</span></span></code></pre></div><p>在 Python 中，变量是动态类型的。这意味着变量的类型可以随时更改。例如，一个变量可以在一个时刻存储一个整数，而在下一个时刻存储一个字符串。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 动态类型示例</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span>  <span class="c1"># x 是一个整数</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 输出 5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="s2">&#34;Hello, world!&#34;</span>  <span class="c1"># x 是一个字符串</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 输出 Hello, world!</span>
</span></span></code></pre></div><blockquote>
<p>在 Python 中，变量是对象的引用。当一个变量被赋值为一个对象时，它实际上是将这个对象的引用存储到变量中。Python 的内存管理器会自动跟踪和回收不再使用的对象。</p>
</blockquote>
<h3 id="一行定义多个变量">一行定义多个变量</h3>
<p>在 Python 中可以一行定义多个变量。可以使用逗号将多个变量名分开，并使用等号将它们与相应的值分开。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 在 Python 中可以一行定义多个变量。可以使用逗号将多个变量名分开，并使用等号将它们与相应的值分开。</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出变量值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 输出 5</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>  <span class="c1"># 输出 John</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>  <span class="c1"># 输出 [1, 2, 3]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 一行定义多个变量，使用相同的值</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="n">b</span> <span class="o">=</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出变量值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>  <span class="c1"># 输出 0</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>  <span class="c1"># 输出 0</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>  <span class="c1"># 输出 0</span>
</span></span></code></pre></div><h3 id="变量的作用域">变量的作用域</h3>
<p>在 Python 中，变量的作用域是指变量在程序中可见和可访问的范围。Python 中有四种作用域：</p>
<ul>
<li>局部作用域：变量在函数内部定义，只能在函数内部访问。</li>
<li>嵌套作用域：变量在嵌套函数内部定义，可以在嵌套函数内部和外部函数内部访问。</li>
<li>全局作用域：变量在模块内部定义，可以在模块内的任何函数或类中访问。</li>
<li>内置作用域：变量是 Python 内置的函数和对象，可以在任何地方访问。</li>
</ul>
<p>如果在函数内部访问全局变量，你需要使用 <code>global</code> 关键字来指示变量的作用域。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>  <span class="c1"># 全局变量</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">global</span> <span class="n">x</span>  <span class="c1"># 使用 global 关键字指示变量的作用域</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="mi">20</span>   <span class="c1"># 将全局变量 x 的值修改为 20</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_func</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 输出 20</span>
</span></span></code></pre></div><h3 id="变量解包">变量解包</h3>
<p>在 Python 中，可以使用变量解包（unpacking）语法将一个序列或元组中的值分配给多个变量。变量解包语法使用等号(<code>=</code>)将变量名与序列或元组中的值分开，并使用逗号将变量名分开。</p>
<p>对元组解包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 定义一个元组</span>
</span></span><span class="line"><span class="cl"><span class="n">my_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1"># 注意：左侧变量的个数必须和待展开的列表长度相等，否则会报错</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 变量解包，将元组中的值分配给多个变量</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="n">my_tuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出变量值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 输出 1</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>  <span class="c1"># 输出 2</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>  <span class="c1"># 输出 3</span>
</span></span></code></pre></div><p>可以将变量解包语法与其他 Python 的语言特性结合使用，例如函数返回值和列表推导式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 定义一个函数，返回两个值</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_name_and_age</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s2">&#34;John&#34;</span><span class="p">,</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 变量解包，将函数返回的值分配给多个变量</span>
</span></span><span class="line"><span class="cl"><span class="n">name</span><span class="p">,</span> <span class="n">age</span> <span class="o">=</span> <span class="n">get_name_and_age</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出变量值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>  <span class="c1"># 输出 John</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>   <span class="c1"># 输出 30</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用列表推导式创建一个列表，然后进行变量解包</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出变量值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>  <span class="c1"># 输出 2</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>  <span class="c1"># 输出 4</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>  <span class="c1"># 输出 6</span>
</span></span></code></pre></div><p>变量解包语法可以用于嵌套的序列或元组：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 定义一个嵌套元组</span>
</span></span><span class="line"><span class="cl"><span class="n">my_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 变量解包，将元组中的值分配给多个变量</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="o">=</span> <span class="n">my_tuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出变量值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 输出 1</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>  <span class="c1"># 输出 2</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>  <span class="c1"># 输出 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>  <span class="c1"># 输出 4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 定义一个嵌套列表</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 变量解包，将列表中的值分配给多个变量</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="p">[</span><span class="n">z</span><span class="p">,</span> <span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="n">my_list</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出变量值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 输出 1</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>  <span class="c1"># 输出 2</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>  <span class="c1"># 输出 3</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>  <span class="c1"># 输出 4</span>
</span></span></code></pre></div><p>使用变量解包语法进行动态解包。动态解包是指在运行时确定要解包的序列或元组，并将其分配给多个变量。</p>
<p>这通常涉及到使用函数或方法返回的序列或元组，以及不确定序列或元组的长度的情况。</p>
<p>使用一个星号(<code>*</code>)作为变量名称的前缀可以指定一个变量来接收除了已分配变量之外的所有值。这个变量将是一个列表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 定义一个元组</span>
</span></span><span class="line"><span class="cl"><span class="n">my_tuple</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用动态解包，将元组前两个值分配给变量 x 和 y，后两个值分配给变量 a 和 b，其他值分配给变量 rest</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="o">*</span><span class="n">rest</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">my_tuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出变量值</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>     <span class="c1"># 输出 1</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>     <span class="c1"># 输出 2</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">rest</span><span class="p">)</span>  <span class="c1"># 输出 [3, 4]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>     <span class="c1"># 输出 5</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>     <span class="c1"># 输出 6</span>
</span></span></code></pre></div><h3 id="单下划线变量名">单下划线变量名</h3>
<p>在 Python 中，以单个下划线(<code>_</code>)开头的变量名通常表示一个私有变量或占位符变量。</p>
<ol>
<li>
<p>私有变量：在 Python 中，没有真正的私有变量，但是以单个下划线开头的变量名通常被视为私有变量。这意味着这些变量不应该在模块或类的外部使用，因为它们可能会发生变化或不再存在。但是，它们仍然可以在模块或类的内部使用。</p>
</li>
<li>
<p>占位符变量：有时候，在编写代码时，需要使用一个变量来占据一个位置，但是不需要引用变量的值。在这种情况下，可以使用以单个下划线开头的变量名来表示一个占位符变量。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 忽略展开时的第二个变量</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span>  <span class="c1"># 输出 1 2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用占位符变量</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">_</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ol>
<h3 id="可变和不可变对象">可变和不可变对象</h3>
<p>在 Python 中，有些对象是可变的，有些对象是不可变的。可变对象是可以修改的，而不可变对象是不能修改的。例如，数字、字符串和元组是不可变的，而列表和字典是可变的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 可变对象示例</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">my_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_list</span><span class="p">)</span>  <span class="c1"># 输出 [1, 2, 3, 4]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 不可变对象示例</span>
</span></span><span class="line"><span class="cl"><span class="n">my_string</span> <span class="o">=</span> <span class="s2">&#34;Hello&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">my_string</span> <span class="o">+=</span> <span class="s2">&#34;, world!&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">my_string</span><span class="p">)</span>  <span class="c1"># 输出 Hello, world!</span>
</span></span></code></pre></div><h2 id="常量">常量</h2>
<p>在 Python 中，常量是指在程序中定义的不可变的值。常量通常用大写字母表示，以便与变量区分开来。Python 中没有内置的常量类型，但是你可以使用以下方式定义常量：</p>
<ol>
<li>使用普通变量表示常量。例如：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">PI</span> <span class="o">=</span> <span class="mf">3.14159265358979323846</span>
</span></span></code></pre></div><p>在程序中使用 <code>PI</code> 来表示圆周率，这个值不会被修改。</p>
<ol start="2">
<li>使用枚举类（Enum）表示常量。枚举类是 Python 中的一种特殊类型，用于定义一组有限的常量。例如：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">enum</span> <span class="kn">import</span> <span class="n">Enum</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Color</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">RED</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">GREEN</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="n">BLUE</span> <span class="o">=</span> <span class="mi">3</span>
</span></span></code></pre></div><p>在程序中使用 <code>Color.RED</code>、<code>Color.GREEN</code> 和 <code>Color.BLUE</code> 来表示三种颜色，这些值不会被修改。</p>
<p>常量是编写可读性好、易于理解和维护的代码的重要组成部分。在编写代码时，应该将常量定义为不可变的值，并尽可能使用常量来表示不变的数据。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记11：当覆盖 equals 方法时，总要覆盖 hashCode 方法</title>
      <link>https://blog.chensoul.com/posts/2023/05/23/always-override-hashcode-when-you-override-equals/</link>
      <pubDate>Tue, 23 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/23/always-override-hashcode-when-you-override-equals/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：当覆盖 equals 方法时，总要覆盖 hashCode 方法。 介绍 在覆盖了 equals 方法的类中，必须覆盖 hashCode 方法</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：当覆盖 equals 方法时，总要覆盖 hashCode 方法。</p>
<h2 id="介绍">介绍</h2>
<p><strong>在覆盖了 equals 方法的类中，必须覆盖 hashCode 方法。</strong> 如果你没有这样做，该类将违反 hashCode 方法的一般约定，这将阻止该类在 HashMap 和 HashSet 等集合中正常运行。以下是根据 Object 规范修改的约定：</p>
<ul>
<li>应用程序执行期间对对象重复调用 hashCode 方法时，它必须一致地返回相同的值，前提是不对 equals 方法中用于比较的信息进行修改。这个值不需要在应用程序的不同执行之间保持一致。</li>
<li>如果根据 <code>equals(Object)</code> 方法判断出两个对象是相等的，那么在两个对象上调用 hashCode 方法必须产生相同的整数结果。</li>
</ul>
<p>如果根据 <code>equals(Object)</code> 方法判断出两个对象不相等，则不需要在每个对象上调用 hashCode 方法时必须产生不同的结果。但是，程序员应该知道，为不相等的对象生成不同的结果可能会提高散列表的性能。</p>
<p><strong>当你无法覆盖 hashCode 方法时，将违反第二个关键条款：相等的对象必须具有相等的散列码。</strong> 根据类的 equals 方法，两个不同的实例在逻辑上可能是相等的，但是对于对象的 hashCode 方法来说，它们只是两个没有共同之处的对象。因此，Object 的 hashCode 方法返回两个看似随机的数字，而不是约定要求的两个相等的数字。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="n">m</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="n">PhoneNumber</span><span class="o">(</span><span class="mi">707</span><span class="o">,</span> <span class="mi">867</span><span class="o">,</span> <span class="mi">5309</span><span class="o">),</span> <span class="s">&#34;Jenny&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>此时，你可能期望 <code>m.get(new PhoneNumber(707, 867,5309))</code> 返回「Jenny」，但是它返回 null。注意，这里涉及到两个 PhoneNumber 实例：一个用于插入到 HashMap 中，另一个相等的实例（被试图）用于检索。由于 PhoneNumber 类未能覆盖 hashCode 方法，导致两个相等的实例具有不相等的散列码，这违反了 hashCode 方法约定。因此，get 方法查找电话号码的散列桶可能会与 put 方法存储电话号码的散列桶不同。即使这两个实例碰巧分配在同一个散列桶上，get 方法几乎肯定会返回 null，因为 HashMap 有一个优化，它缓存每个条目相关联的散列码，如果散列码不匹配，就不会检查对象是否相等。</p>
<p>解决这个问题就像为 PhoneNumber 编写一个正确的 hashCode 方法一样简单。那么 hashCode 方法应该是什么样的呢？写一个反面例子很容易。例如，以下方法是合法的，但是不应该被使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// The worst possible legal hashCode implementation - never use!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="mi">42</span><span class="o">;</span> <span class="o">}</span>
</span></span></code></pre></div><p>它是合法的，因为它确保了相等的对象具有相同的散列码。同时它也很糟糕，因为它使每个对象都有相同的散列码。因此，每个对象都分配到同一个桶中，散列表退化为链表。这样，原本应该在线性阶 <code>O(n)</code> 运行的程序将在平方阶 <code>O(n^2)</code> 运行。对于大型散列表，这是工作和不工作的区别。</p>
<p>一个好的散列算法倾向于为不相等的实例生成不相等的散列码。这正是 hashCode 方法约定第三部分的含义。理想情况下，一个散列算法应该在所有 int 值上均匀合理分布所有不相等实例集合。实现这个理想是很困难的。幸运的是，实现一个类似的并不太难。这里有一个简单的方式：</p>
<ul>
<li>
<p>1、声明一个名为 result 的 int 变量，并将其初始化为对象中第一个重要字段的散列码 c，如步骤 2.a 中计算的那样。（回想一下 <a href="https://github.com/clxering/Effective-Java-3rd-edition-Chinese-English-bilingual/blob/dev/Chapter-3/Chapter-3-Item-10-Obey-the-general-contract-when-overriding-equals.md">Item-10</a> 中的重要字段会对比较产生影响）</p>
</li>
<li>
<p>2、对象中剩余的重要字段 f，执行以下操作：</p>
<ul>
<li>
<p>为字段计算一个整数散列码 c：</p>
<ul>
<li>如果字段是基本数据类型，计算 <code>Type.hashCode(f)</code>，其中 type 是与 f 类型对应的包装类。</li>
<li>如果字段是对象引用，并且该类的 equals 方法通过递归调用 equals 方法来比较字段，则递归调用字段上的 hashCode 方法。如果需要更复杂的比较，则为该字段计算一个「canonical representation」，并在 canonical representation 上调用 hashCode 方法。如果字段的值为空，则使用 0（或其他常数，但 0 是惯用的）。</li>
<li>如果字段是一个数组，则将其每个重要元素都视为一个单独的字段。也就是说，通过递归地应用这些规则计算每个重要元素的散列码，并将每个步骤 2.b 的值组合起来。如果数组中没有重要元素，则使用常量，最好不是 0。如果所有元素都很重要，那么使用 <code>Arrays.hashCode</code>。</li>
</ul>
</li>
<li>
<p>将步骤 2.a 中计算的散列码 c 合并到 result 变量，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">c</span><span class="o">;</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>3、返回 result 变量。</p>
</li>
</ul>
<p>当你完成了 hashCode 方法的编写之后，问问自己现在相同的实例是否具有相同的散列码。编写单元测试来验证你的直觉（除非你使用 AutoValue 生成你的 equals 方法和 hashCode 方法，在这种情况下你可以安全地省略这些测试）。如果相同的实例有不相等的散列码，找出原因并修复问题。</p>
<p>可以从散列码计算中排除派生字段。换句话说，你可以忽略任何可以从包含的字段计算其值的字段。你必须排除不用 <code>equals</code> 比较的任何字段，否则你可能会违反 hashCode 方法约定的第二个条款。</p>
<p>在步骤 2.b 中使用的乘法将使结果取决于字段的顺序，如果类有多个相似的字段，则会产生一个更好的散列算法。例如，如果字符串散列算法中省略了乘法，那么所有的字母顺序都有相同的散列码。选择 31 是因为它是奇素数。如果是偶数，乘法运算就会溢出，信息就会丢失，因为乘法运算等同于移位。使用素数的好处不太明显，但它是传统用法。31 有一个很好的特性，可以用移位和减法来代替乘法，从而在某些体系结构上获得更好的性能：<code>31 * i == (i &lt;&lt;5) – i</code>。现代虚拟机自动进行这种优化。</p>
<p>让我们将前面的方法应用到 PhoneNumber 类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Typical hashCode method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Short</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">areaCode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">Short</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">prefix</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">Short</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">lineNum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>因为这个方法返回一个简单的确定的计算结果，它的唯一输入是 PhoneNumber 实例中的三个重要字段，所以很明显，相等的 PhoneNumber 实例具有相等的散列码。实际上，这个方法是 PhoneNumber 的一个非常好的 hashCode 方法实现，与 Java 库中的 hashCode 方法实现相当。它很简单，速度也相当快，并且合理地将不相等的电话号码分散到不同的散列桶中。</p>
<p>虽然本条目中的方法产生了相当不错的散列算法，但它们并不是最先进的。它们的质量可与 Java 库的值类型中的散列算法相媲美，对于大多数用途来说都是足够的。如果你确实需要不太可能产生冲突的散列算法，请参阅 Guava 的 com.google.common.hash.Hashing [Guava]。</p>
<p>Objects 类有一个静态方法，它接受任意数量的对象并返回它们的散列码。这个名为 <code>hash</code> 的方法允许你编写只有一行代码的 hashCode 方法，这些方法的质量可以与本条目中提供的编写方法媲美。不幸的是，它们运行得更慢，因为它们需要创建数组来传递可变数量的参数，如果任何参数是原始类型的，则需要进行装箱和拆箱。推荐只在性能不重要的情况下使用这种散列算法。下面是使用这种技术编写的 PhoneNumber 的散列算法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// One-line hashCode method - mediocre performance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">lineNum</span><span class="o">,</span> <span class="n">prefix</span><span class="o">,</span> <span class="n">areaCode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果一个类是不可变的，并且计算散列码的成本非常高，那么你可以考虑在对象中缓存散列码，而不是在每次请求时重新计算它。如果你认为这种类型的大多数对象都将用作散列键，那么你应该在创建实例时计算散列码。否则，你可以选择在第一次调用 hashCode 方法时延迟初始化散列码。在一个延迟初始化的字段的情况下，需要注意以确保该类仍然是线程安全的。我们的 PhoneNumber 类不值得进行这种处理，但只是为了向你展示它是如何实现的，如下所示。注意，散列字段的初始值（在本例中为 0）不应该是通常创建的实例的散列码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// hashCode method with lazily initialized cached hash code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span> <span class="n">hashCode</span><span class="o">;</span> <span class="c1">// Automatically initialized to 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">hashCode</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="n">Short</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">areaCode</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">Short</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">prefix</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">result</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">Short</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">lineNum</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">hashCode</span> <span class="o">=</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><strong>不要试图从散列码计算中排除重要字段，以提高性能。</strong> 虽然得到的散列算法可能运行得更快，但其糟糕的质量可能会将散列表的性能降低到无法使用的程度。特别是，散列算法可能会遇到大量实例，这些实例在你选择忽略的不同区域。如果发生这种情况，散列算法将把所有这些实例映射很少一部分散列码，使得原本应该在线性阶 <code>O(n)</code> 运行的程序将在平方阶 <code>O(n^2)</code> 运行。</p>
<p>这不仅仅是一个理论问题。在 Java 2 之前，字符串散列算法在字符串中，以第一个字符开始，最多使用 16 个字符。对于大量且分层次的集合（如 url），该函数完全展示了前面描述的病态行为。</p>
<p><strong>不要为 hashCode 返回的值提供详细的规范，这样客户端就不能理所应当的依赖它。这（也）给了你更改它的余地。</strong> Java 库中的许多类，例如 String 和 Integer，都将 hashCode 方法返回的确切值指定为实例值的函数。这不是一个好主意，而是一个我们不得不面对的错误：它阻碍了在未来版本中提高散列算法的能力。如果你保留了未指定的细节，并且在散列算法中发现了缺陷，或者发现了更好的散列算法，那么你可以在后续版本中更改它。</p>
<p>总之，每次覆盖 equals 方法时都必须覆盖 hashCode 方法，否则程序将无法正确运行。你的 hashCode 方法必须遵守 Object 中指定的通用约定，并且必须合理地将不相等的散列码分配给不相等的实例。这很容易实现，如果有点枯燥，可使用第 51 页的方法。AutoValue 框架提供了一种能很好的替代手动编写 equals 方法和 hashCode 方法的功能，IDE 也提供了这种功能。</p>
<h2 id="总结">总结</h2>
<p>在《Effective Java 3》第三章《对象的通用方法》中，确实提到了一个重要的原则，即在覆盖equals方法时，总要覆盖hashCode方法。</p>
<p>这是因为，如果两个对象在equals方法中被认为是相等的，那么它们的hashCode方法也必须返回相同的值。这是因为在Java中，如果两个对象的hashCode不同，则它们将被认为是不同的对象，即使它们在equals方法中被认为是相等的。</p>
<p>因此，如果不覆盖hashCode方法，那么可能会导致在使用哈希表、哈希集合或哈希映射等数据结构时出现问题。这些数据结构通常使用hashCode方法来确定对象在数据结构中的位置，如果hashCode方法没有正确实现，那么可能会导致对象无法正确添加、删除或查找。</p>
<p>因此，当覆盖equals方法时，总要覆盖hashCode方法，并确保hashCode方法的实现与equals方法的实现一致。在实现hashCode方法时，通常需要考虑对象的所有属性，并根据属性的值计算一个哈希码，以保证不同的对象具有不同的哈希码，相同的对象具有相同的哈希码。</p>
<p>在Java中，可以使用Objects类的hash方法来计算对象的哈希码，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">property1</span><span class="o">,</span> <span class="n">property2</span><span class="o">,</span> <span class="o">...);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>其中，property1、property2等为对象的属性，可以根据实际情况进行调整。</p>
<p>总之，在覆盖equals方法时，总要覆盖hashCode方法，并确保hashCode方法的实现与equals方法的实现一致。这是Java编程中一个重要的原则，应该在实际编程中加以注意。</p>
<p>以下是一些在Java中实现hashCode时需要避免的常见错误：</p>
<ol>
<li>不考虑所有相关字段：在实现hashCode时，需要考虑所有相关字段，这些字段对于对象的标识至关重要。如果省略了一个字段，那么可能会导致相等的对象具有不同的哈希码，这可能会在使用哈希表或哈希集合等数据结构时出现问题。</li>
<li>使用可变字段：如果对象具有可变字段，则不应将它们包含在hashCode计算中。这是因为对象的哈希码应该在其生命周期内保持不变，包含可变字段可能会导致哈希码发生变化，即使对象的标识保持不变。</li>
<li>分布不均匀：良好的hashCode实现应该生成在哈希表中均匀分布的哈希码。如果哈希码不均匀分布，可能会导致哈希表性能下降或冲突。</li>
<li>不使用质数：在计算hashCode时，常常使用质数来避免冲突。如果不使用质数，可能会导致更多的冲突和较差的性能。</li>
<li>使用默认实现：如果不重写hashCode，将使用Object类提供的默认实现，该实现只返回对象的内存地址。这可能对某些情况足够，但不能保证生成唯一的哈希码，可能会在使用哈希表或哈希集合等数据结构时出现问题。</li>
<li>与equals不一致：hashCode实现应该与equals实现保持一致，这意味着如果根据equals实现，两个对象相等，则它们应该具有相同的hashCode。如果未确保一致性，可能会在使用哈希表或哈希集合等数据结构时出现问题。</li>
<li>不缓存哈希码：计算对象的哈希码可能是一个昂贵的操作，因此通常需要在计算出哈希码后缓存它。如果不缓存哈希码，可能会导致性能问题，特别是在使用哈希表或哈希集合等数据结构时。</li>
</ol>
<p>要确保hashCode分布均匀，可以采用以下方法：</p>
<ol>
<li>使用所有相关字段：在计算hashCode时，需要使用所有相关字段，以确保所有字段都对生成的哈希码有贡献。如果省略字段，则可能会导致相等的对象具有不同的哈希码，从而影响哈希表或哈希集合等数据结构的性能。</li>
<li>选择适当的哈希函数：选择适当的哈希函数可以确保生成的哈希码分布均匀。例如，Java中的Objects类提供了一些哈希函数，例如hash、hashCombine等，可以根据需要选择适当的哈希函数。</li>
<li>使用质数：使用质数可以避免哈希冲突。在计算hashCode时，可以使用质数来计算不同字段的哈希码，然后将它们组合起来以生成最终的哈希码。</li>
<li>压缩哈希码：在生成哈希码后，可以将其压缩到哈希表的合法范围内，以确保哈希码分布均匀。例如，如果哈希表大小为2的n次方，可以通过将哈希码与2的n次方-1进行按位与运算来压缩哈希码，以确保哈希码在0到2的n次方-1之间均匀分布。</li>
<li>使用哈希码随机化：在生成哈希码后，可以对其进行随机化，以避免敌手攻击和哈希冲突。例如，可以使用一个随机数，将其与哈希码混合，以生成最终的哈希码。</li>
</ol>
<p>哈希冲突是指不同的键（key）在哈希表中映射到相同的位置（索引）的情况。为了处理哈希冲突，可以采用以下几种方法：</p>
<ol>
<li>开放地址法：开放地址法是一种常用的处理哈希冲突的方法，它的思想是在哈希表中寻找一个空槽，将冲突的键放入该槽中。常用的开放地址法包括线性探测、二次探测和双重散列等。</li>
<li>链地址法：链地址法是另一种常用的处理哈希冲突的方法，它的思想是将哈希表中同一个位置的所有键放在一个链表中。当发生哈希冲突时，只需要将冲突的键添加到链表的末尾即可。链地址法适用于存储大量数据的哈希表。</li>
<li>再哈希法：再哈希法是一种处理哈希冲突的方法，它的思想是使用另一个哈希函数来计算冲突键的哈希值。当发生哈希冲突时，使用另一个哈希函数重新计算哈希值，直到找到一个空槽插入键为止。</li>
<li>建立公共溢出区：建立公共溢出区是一种处理哈希冲突的方法，它的思想是在哈希表中保留一些位置，用于存储哈希冲突的键。当发生哈希冲突时，将冲突的键放入公共溢出区中，而不是在哈希表的其他位置中。</li>
</ol>
<p>无论采用哪种方法，处理哈希冲突时需要考虑以下几个方面：</p>
<ol>
<li>效率：处理哈希冲突的方法应该具有高效性，能够在不影响性能的情况下解决哈希冲突。</li>
<li>冲突解决度：处理哈希冲突的方法应该具有良好的冲突解决度，能够尽可能地减少哈希冲突的发生。</li>
<li>实现复杂度：处理哈希冲突的方法应该易于实现和维护。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Build Robust Continuous Integration With Docker and Friends</title>
      <link>https://blog.chensoul.com/posts/2023/05/22/docker-continuous-integration/</link>
      <pubDate>Mon, 22 May 2023 15:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/22/docker-continuous-integration/</guid>
      <description>持续集成 (CI) 已成为软件开发的关键，它允许团队频繁合并代码更改并及早发现错误。 Docker 容器通过提供一致的环境帮助促进持续集成过程，您可以在其中测试和发</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="https://files.realpython.com/media/UPDATE-Docker-in-Action-Fitter-Happier-More-Productive_Watermarked.479cfb791c17.jpg" alt="Build Robust Continuous Integration With Docker and Friends"  />
</p>
<p>持续集成 (CI) 已成为软件开发的关键，它允许团队频繁合并代码更改并及早发现错误。</p>
<p>Docker 容器通过提供一致的环境帮助促进持续集成过程，您可以在其中测试和发送每次提交的代码。</p>
<p>在本教程中，您将学习如何使用 Docker 为 Flask Web 应用程序创建强大的持续集成管道。</p>
<p>您将完成在本地开发和测试应用程序、将其容器化、使用 Docker Compose 编排容器以及使用 GitHub Actions 定义 CI 管道的步骤。</p>
<p>在本教程结束时，您将能够为您的 Web 应用程序创建一个完全自动化的 CI 管道。</p>
<p><strong>在本教程中，您将</strong>：</p>
<ul>
<li>在 Docker 容器中本地运行 Redis 服务器</li>
<li>用 Docker 编排 Flask 编写的 Python Web 应用程序</li>
<li>构建 Docker 镜像并将它们推送到 Docker Hub 仓库</li>
<li>使用 Docker Compose 编排多容器应用程序</li>
<li>在任何地方复制类似生产的基础设施</li>
<li>使用 GitHub Actions 定义持续集成工作流</li>
</ul>
<p>理想情况下，您应该具有使用 Python 进行 <a href="https://realpython.com/learning-paths/become-python-web-developer/">Web 开发</a>、<a href="https://realpython.com/learning-paths/test-your-python-apps/">测试自动化</a>、将 <a href="https://realpython.com/python-redis/">Redis 与 Python 结合使用</a>以及<a href="https://realpython.com/python-git-github-intro/">使用 Git 和 GitHub 进行源代码版本控制</a>的经验。以前接触过 <a href="https://realpython.com/python-versions-docker/">Docker</a> 会更好，但不是必需的。您还应该拥有一个 Git 客户端和一个 GitHub 帐户，以便跟随并复制本教程的步骤。</p>
<blockquote>
<p>注意：本教程大致基于名为 Docker in Action - Fitter, Happier, More Productive 的旧教程，该教程由 Michael Herman 编写，他于 2015 年 2 月 8 日在 PyTennessee 展示了他的 CI 工作流程。如果你有兴趣，您可以查看展示的相应幻灯片在会议上。</p>
<p>不幸的是，原始教程中描述的许多工具不再受支持或免费提供。在此更新的教程中，您将使用最新的工具和技术，例如 GitHub Actions。</p>
</blockquote>
<p>如果您想跳过在计算机上设置 Docker 和构建示例 Web 应用程序的初始步骤，那么直接跳到定义持续集成管道。无论哪种方式，您都需要下载支持材料，它们与完成的 Flask Web 应用程序和相关资源一起提供，它们将帮助您学习本教程：</p>
<blockquote>
<p>免费下载：单击<a href="https://realpython.com/bonus/docker-continuous-integration-code/">此处</a>下载您的 Flask 应用程序和相关资源，以便您可以使用 Docker 定义持续集成管道。</p>
</blockquote>
<h2 id="项目架构概览">项目架构概览</h2>
<p>在本教程结束时，您将拥有一个 Flask Web 应用程序，用于跟踪持久存储在 Redis 数据存储中的页面视图。</p>
<p>它将是一个由 Docker Compose 编排的多容器应用程序，您将能够在本地和云端构建和测试，为持续集成铺平道路：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/page_tracker_architecture.drawio_2.1c8cf20462ae.png" alt="The Architecture of the Page Tracker Application"  />
</p>
<p>该应用程序由两个 Docker 容器组成。第一个容器将在 Gunicorn 之上运行一个 Flask 应用程序，响应 HTTP 请求并更新页面浏览量。</p>
<p>第二个容器将运行一个 Redis 实例，用于将页面视图数据持久存储在主机上的本地卷中。</p>
<p>Docker 是运行此应用程序所需的全部，您现在将对其进行设置。</p>
<h2 id="在您的计算机上设置-docker">在您的计算机上设置 Docker</h2>
<p>Docker 是一个总称，根据上下文，它对不同的人有不同的含义。例如，当有人提到 docker 时，他们可能指以下之一：</p>
<ul>
<li>Docker, Inc.：平台和相关工具背后的公司</li>
<li>Docker：开源容器平台</li>
<li>Docker CLI： <code>docker</code> 客户端命令行程序</li>
<li><code>dockerd</code> : 管理容器的 Docker 守护进程</li>
</ul>
<p>还有一些与 Docker 平台相关的工具和项目，例如：</p>
<ul>
<li>Docker Compose</li>
<li>Docker Desktop</li>
<li>Docker Engine</li>
<li>Docker Hub</li>
<li>Docker Swarm Mode Docker 集群模式</li>
</ul>
<p>在本教程中，您将使用上面列表中除最后一个之外的所有内容。顺便说一句，不要将遗留的 <a href="https://github.com/docker-archive/classicswarm">Docker Classic Swarm</a> 与 1.12 版以来内置于 Docker 引擎中的 Docker Swarm Mode 混淆，后者是一个外部工具。</p>
<blockquote>
<p>注意：您可能听说过 Docker Machine 和 Docker Toolbox。这些是不再维护的旧工具。</p>
</blockquote>
<p>Docker 解决的主要问题是能够在几乎没有或没有配置的情况下在一致且可重现的环境中的任何地方运行应用程序。它可以将您的应用程序代码、二进制文件和依赖项（例如语言运行时和库）打包到一个工件中。您将在开发期间和持续集成服务器上使用 Docker 在本地计算机上模拟假设的生产环境。</p>
<p>安装 Docker 有两种选择：</p>
<ol>
<li><a href="https://docs.docker.com/engine/">Docker Engine</a></li>
<li><a href="https://docs.docker.com/desktop/">Docker Desktop</a></li>
</ol>
<p>如果您熟悉终端并喜欢额外的控制级别，那么开源 Docker 引擎就是您的最佳选择，它提供核心运行时和用于管理容器的命令行界面。另一方面，如果您更喜欢具有直观图形用户界面的一站式解决方案，那么您应该考虑使用 Docker Desktop。</p>
<blockquote>
<p>注意：开箱即用的桌面应用程序附带 <a href="https://docs.docker.com/compose/">Docker Compose</a>，稍后在<a href="https://realpython.com/docker-continuous-integration/#orchestrate-containers-using-docker-compose">编排容器</a>以进行持续集成时将需要它。</p>
</blockquote>
<p>当您浏览 <a href="https://docs.docker.com/">Docker 官方文档</a>时，您可能会觉得 Docker Desktop 占据了聚光灯下。这是一个非常棒的工具，但您必须记住，Docker Desktop 仍然免费供个人使用。自 2021 年 8 月起，您需要<a href="https://www.docker.com/pricing/">付费订阅</a>才能在商业项目中使用它。</p>
<p>虽然在技术上可以并排安装这两种工具，但您通常应该避免同时使用它们，以尽量减少虚拟网络或端口绑定之间任何潜在干扰的风险。您可以通过停止其中之一并在 Docker Engine 和 Docker Desktop 之间<a href="https://docs.docker.com/desktop/faqs/linuxfaqs/#context">切换上下文</a>来实现。</p>
<blockquote>
<p>注意：Docker Desktop 过去只能在 Windows 和 macOS 上使用，但现在情况发生了变化，您现在也可以在某些 Linux 发行版上安装它，包括 <a href="https://docs.docker.com/desktop/install/ubuntu/">Ubuntu</a>、<a href="https://docs.docker.com/desktop/install/debian/">Debian</a> 和 <a href="https://docs.docker.com/desktop/install/fedora/">Fedora</a>。但是，Linux 版本的 Docker Desktop 运行在<a href="https://docs.docker.com/desktop/faqs/linuxfaqs/#why-does-docker-desktop-for-linux-run-a-vm">虚拟机</a>之上，以模仿在其他操作系统上使用它的用户体验。</p>
</blockquote>
<p>要验证您是否已在系统上成功安装 Docker（作为 Docker Engine 或 Docker Desktop 包装器应用程序），请打开终端并键入以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker --version
</span></span><span class="line"><span class="cl">Docker version 23.0.4, build f480fb1
</span></span></code></pre></div><p>您应该会看到您的 Docker 版本以及内部版本号。如果您使用的是 Linux，那么您可能希望按照<a href="https://docs.docker.com/engine/install/linux-postinstall/">安装后的步骤</a>使用 <code>docker</code> 命令，而无需在其前面加上 <code>sudo</code> 以获得管理权限。</p>
<p>在开始使用 Docker 来帮助进行持续集成之前，您需要创建一个基本的 Web 应用程序。</p>
<h2 id="在-flask-中开发页面视图跟踪器">在 Flask 中开发页面视图跟踪器</h2>
<p>在接下来的几节中，您将使用 <a href="https://realpython.com/tutorials/flask/">Flask</a> 框架实现一个基本的 Web 应用程序。您的应用程序将跟踪页面浏览总数，并在每次请求时向用户显示该数字：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/screenshot-browser.5036973f0aae.png" alt="A web application for tracking page views"  />
</p>
<p>应用程序的当前状态将保存在 <a href="https://redis.io/">Redis</a> 数据存储中，该存储通常用于缓存和其他类型的数据持久化。这样，停止您的网络服务器不会重置观看次数。您可以将 Redis 视为一种数据库。</p>
<p>如果您对从头开始构建此应用程序不感兴趣，请随时通过单击下面的链接下载其完整源代码，然后跳到对您的 Flask Web 应用程序<a href="https://realpython.com/docker-continuous-integration/#dockerize-your-flask-web-application">进行 docker 化</a>：</p>
<p>即使您打算自己编写代码，下载完成的项目并将其用作参考与您的实现进行比较仍然是个好主意，以防您遇到困难。</p>
<blockquote>
<p>免费下载：单击<a href="https://realpython.com/bonus/docker-continuous-integration-code/">此处</a>下载您的 Flask 应用程序和相关资源，以便您可以使用 Docker 定义持续集成管道。</p>
</blockquote>
<p>在开始开发应用程序之前，您需要设置工作环境。</p>
<h3 id="准备环境">准备环境</h3>
<p>与每个 <a href="https://realpython.com/tutorials/projects/">Python 项目</a>一样，您在开始时应该遵循大致相同的步骤，包括创建一个新目录，然后为您的项目创建并激活一个隔离的<a href="https://realpython.com/python-virtual-environments-a-primer/">虚拟环境</a>。您可以直接从您最喜欢的<a href="https://realpython.com/python-ides-code-editors-guide/">代码编辑器</a>（如 <a href="https://realpython.com/python-development-visual-studio-code/">Visual Studio Code</a>）或功能齐全的 IDE（如 <a href="https://realpython.com/pycharm-guide/">PyCharm</a>）执行此操作，或者您可以在终端中键入一些命令：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">PS&gt; mkdir page-tracker
</span></span><span class="line"><span class="cl">PS&gt; <span class="nb">cd</span> page-tracker
</span></span><span class="line"><span class="cl">PS&gt; python -m venv venv --prompt page-tracker
</span></span><span class="line"><span class="cl">PS&gt; venv<span class="se">\S</span>cripts<span class="se">\a</span>ctivate
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> PS&gt; python -m pip install --upgrade pip
</span></span></code></pre></div><p>Linux + MacOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ mkdir page-tracker/
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> page-tracker/
</span></span><span class="line"><span class="cl">$ python3 -m venv venv/ --prompt page-tracker
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> venv/bin/activate
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip install --upgrade pip
</span></span></code></pre></div><p>首先，创建一个名为 <code>page-tracker/</code> 的新目录，然后在其中创建一个名为 <code>venv/</code> 的Python 虚拟环境。为虚拟环境提供描述性提示，使其易于识别。最后，激活新建的虚拟环境后，将 <a href="https://realpython.com/what-is-pip/"><code>pip</code></a> 升级到最新版本，以免以后安装<a href="https://realpython.com/python-modules-packages/">Python包</a>时出现问题。</p>
<blockquote>
<p>注意：在 Windows 上，您可能需要先以管理员身份运行 <a href="https://realpython.com/python-coding-setup-windows/#discovering-the-windows-terminal">Windows Terminal</a> 并在创建虚拟环境之前<a href="https://realpython.com/python-coding-setup-windows/#loosening-your-execution-policy">放宽脚本执行策略</a>。</p>
</blockquote>
<p>在本教程中，您将使用现代方式通过 <a href="https://realpython.com/courses/packaging-with-pyproject-toml/">pyproject.toml</a> 配置文件和 <a href="https://setuptools.pypa.io/en/latest/">setuptools</a> 指定项目的依赖项和元数据<a href="https://peps.python.org/pep-0517/">作为构建后端</a>。此外，您将遵循 <a href="https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/">src 布局</a>，将应用程序的源代码放在单独的 <code>src/</code> 子目录中，以更好地组织项目中的文件。这将使您可以直接打包代码，而无需稍后添加的自动化测试。</p>
<p>继续使用以下命令构建您的 Python 项目占位符：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> PS&gt; mkdir src<span class="se">\p</span>age_tracker
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> PS&gt; ni src<span class="se">\p</span>age_tracker<span class="se">\_</span>_init__.py
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> PS&gt; ni src<span class="se">\p</span>age_tracker<span class="se">\a</span>pp.py
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> PS&gt; ni constraints.txt
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> PS&gt; ni pyproject.toml
</span></span></code></pre></div><p>Linux + MacOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ mkdir -p src/page_tracker
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ touch src/page_tracker/__init__.py
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ touch src/page_tracker/app.py
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ touch constraints.txt
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ touch pyproject.toml
</span></span></code></pre></div><p>完成后，您应该具有以下目录结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">page-tracker/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── src/
</span></span><span class="line"><span class="cl">│   └── page_tracker/
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       └── app.py
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── venv/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── constraints.txt
</span></span><span class="line"><span class="cl">└── pyproject.toml
</span></span></code></pre></div><p>如您所见，您将只有一个 Python 模块， <code>app</code> ，定义在一个名为 <code>page_tracker</code> 的包中，位于 <code>src/</code> 目录中。 <code>constraints.txt</code> 文件将指定项目依赖项的固定版本，以实现可<a href="https://pip.pypa.io/en/stable/topics/repeatable-installs/">重复安装</a>。</p>
<p>该项目将依赖于两个外部库， <a href="https://pypi.org/project/Flask/">Flask</a> 和 <a href="https://pypi.org/project/redis/">Redis</a> ，您可以在 <code>pyproject.toml</code> 文件中声明它们：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># pyproject.toml</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">build-system</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">requires</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;setuptools&gt;=67.0.0&#34;</span><span class="p">,</span> <span class="s2">&#34;wheel&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">build-backend</span> <span class="p">=</span> <span class="s2">&#34;setuptools.build_meta&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;page-tracker&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;1.0.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dependencies</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Flask&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;redis&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>请注意，您通常不会在此处指定依赖项版本。相反，您可以将它们与<a href="https://pip.pypa.io/en/stable/user_guide/#requirements-files">需求</a>或<a href="https://pip.pypa.io/en/stable/user_guide/#constraints-files">约束文件</a>中的任何<a href="https://en.wikipedia.org/wiki/Transitive_dependency">传递依赖项</a>一起<a href="https://pip.pypa.io/en/stable/cli/pip_freeze/#pip-freeze">冻结</a>。第一个告诉 <code>pip</code> 要安装什么包，后者强制执行传递依赖项的特定包版本，类似于 <a href="https://realpython.com/pipenv-guide/">Pipenv</a> 或 <a href="https://realpython.com/dependency-management-python-poetry/">Poetry</a> 锁定文件。</p>
<p>要生成约束文件，您必须首先将您的 <code>page-tracker</code> 项目安装到活动的虚拟环境中，这将从 <a href="https://pypi.org/">Python 包索引 (PyPI)</a> 中获取所需的外部库。确保您已经创建了所需的文件夹结构，然后发出以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip install --editable .
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip freeze --exclude-editable &gt; constraints.txt
</span></span></code></pre></div><p>即使您还没有输入一行代码，Python 也会识别并安装您的包占位符。因为您的包遵循 <code>src</code> 布局，所以在开发期间以<a href="https://setuptools.pypa.io/en/latest/userguide/development_mode.html">可编辑模式</a>安装它很方便。这将允许您更改源代码并立即将它们反映在虚拟环境中，而无需重新安装。但是，您想从约束文件中排除可编辑包。</p>
<blockquote>
<p>注意：如果您打算共享您的项目，生成的约束文件非常有价值。这意味着其他人可以在他们的终端中运行以下命令来重现与您相同的环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip install -c constraints.txt .
</span></span></code></pre></div><p>因为您通过 <code>-c</code> 选项提供了一个约束文件， <code>pip</code> 安装了固定的依赖项而不是最新的可用依赖项。这意味着您有可重复的安装。稍后您将使用类似的命令来构建 Docker 镜像。</p>
</blockquote>
<p>好的。您几乎已经准备好开始编写您的 Flask Web 应用程序了。在执行此操作之前，您将切换一下方式并准备一个本地 Redis 服务器以通过网络连接。</p>
<h3 id="通过-docker-运行-redis-服务器">通过 Docker 运行 Redis 服务器</h3>
<p>Redis 这个名字是单词远程字典服务器的合成词，它非常准确地表达了它作为远程内存数据结构存储的目的。作为一个键值存储，Redis 就像一个远程 <a href="https://realpython.com/python-dicts/">Python 字典</a>，您可以从任何地方连接到它。它也被认为是在许多不同环境中使用的最流行的 NoSQL 数据库之一。通常，它用于关系数据库之上的<a href="https://realpython.com/caching-in-django-with-redis/">缓存</a>。</p>
<blockquote>
<p>注意：虽然 Redis 将其所有数据保存在易失性内存中，这使其速度极快，但该服务器具有多种持久性选项。在断电或重启的情况下，它们可以确保不同级别的数据持久性。然而，正确配置 Redis 通常很困难，这就是为什么许多团队决定使用外包给云提供商的托管服务的原因。</p>
</blockquote>
<p>在您的计算机上安装 Redis 非常简单，但假设您之前已经安装和配置了 Docker，通过 Docker 运行它会更加简单和优雅。当您在 Docker 容器中运行诸如 Redis 之类的服务时，它会与系统的其余部分保持隔离，而不会造成混乱或占用有限的网络端口号等系统资源。</p>
<p>要在不将 Redis 安装在主机上的情况下运行 Redis，您可以通过调用以下命令从<a href="https://hub.docker.com/_/redis">官方 Redis 镜像</a>运行新的 Docker 容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -d --name redis-server redis
</span></span><span class="line"><span class="cl">Unable to find image <span class="s1">&#39;redis:latest&#39;</span> locally
</span></span><span class="line"><span class="cl">latest: Pulling from library/redis
</span></span><span class="line"><span class="cl">26c5c85e47da: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">39f79586dcf2: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">79c71d0520e5: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">60e988668ca1: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">873c3fc9fdc6: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">50ce7f9bf183: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">Digest: sha256:f50031a49f41e493087fb95f96fdb3523bb25dcf6a3f0b07c588ad3cdb...
</span></span><span class="line"><span class="cl">Status: Downloaded newer image <span class="k">for</span> redis:latest
</span></span><span class="line"><span class="cl">09b9842463c78a2e9135add810aba6c4573fb9e2155652a15310009632c40ea8
</span></span></code></pre></div><p>这将基于最新版本的 <code>redis</code> 镜像创建一个新的 Docker 容器，自定义名称为 <code>redis-server</code> ，稍后您将引用它。容器以分离模式 ( <code>-d</code> ) 在后台运行。当您第一次运行此命令时，Docker 会从 Docker Hub 中拉取相应的 Docker 镜像，这是 Docker 镜像的官方存储库，类似于 PyPI。</p>
<p>只要一切按计划进行，您的 Redis 服务器就应该启动并运行。因为您以分离模式 ( <code>-d</code> ) 启动了容器，所以它将在后台保持活动状态。要验证这一点，您可以使用 <code>docker container ls</code> 命令或等效的 <code>docker ps</code> 别名列出您的 Docker 容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker ps
</span></span><span class="line"><span class="cl">CONTAINER ID   IMAGE   ...   STATUS              PORTS      NAMES
</span></span><span class="line"><span class="cl">09b9842463c7   redis   ...   Up About a minute   6379/tcp   redis-server
</span></span></code></pre></div><p>在这里，您可以看到一个 ID 前缀与您在运行 <code>docker run</code> 命令时获得的 ID 前缀匹配的容器从大约一分钟前开始启动。该容器基于 <code>redis</code> 镜像，已命名为 <code>redis-server</code> ，并使用TCP 端口号 <code>6379</code> ，这是Redis 的默认端口。</p>
<p>接下来，您将尝试以各种方式连接到该 Redis 服务器。</p>
<h3 id="测试与-redis-的连接">测试与 Redis 的连接</h3>
<p>在 Docker Hub 上官方 Redis 镜像的概述页面上，您将找到有关如何连接到在 Docker 容器中运行的 Redis 服务器的说明。具体而言，此页面讨论了如何使用 Docker 镜像附带的专用交互式命令行界面 Redis CLI 。</p>
<p>您可以从同一个 <code>redis</code> 镜像启动另一个 Docker 容器，但这一次，将容器的入口点设置为 <code>redis-cli</code> 命令而不是默认的 Redis 服务器二进制文件。当您设置多个容器一起工作时，您应该使用 Docker 网络，这需要一些额外的配置步骤。</p>
<p>首先，新建一个以你的项目命名的自定义桥接网络，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker network create page-tracker-network
</span></span><span class="line"><span class="cl">c942131265bf097da294edbd2ac375cd5410d6f0d87e250041827c68a3197684
</span></span></code></pre></div><p>通过定义这样的虚拟网络，您可以连接任意数量的 Docker 容器，并让它们通过描述性名称相互发现。您可以通过运行以下命令列出您创建的网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker network ls
</span></span><span class="line"><span class="cl">NETWORK ID     NAME                   DRIVER    SCOPE
</span></span><span class="line"><span class="cl">1bf8d998500e   bridge                 bridge    <span class="nb">local</span>
</span></span><span class="line"><span class="cl">d5cffd6ea76f   host                   host      <span class="nb">local</span>
</span></span><span class="line"><span class="cl">a85d88fc3abe   none                   null      <span class="nb">local</span>
</span></span><span class="line"><span class="cl">c942131265bf   page-tracker-network   bridge    <span class="nb">local</span>
</span></span></code></pre></div><p>接下来，将现有的 <code>redis-server</code> 容器连接到这个新的虚拟网络，并在启动相应容器时为 Redis CLI 指定相同的网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker network connect page-tracker-network redis-server
</span></span><span class="line"><span class="cl">$ docker run --rm -it <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             --name redis-client <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             --network page-tracker-network <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             redis redis-cli -h redis-server
</span></span></code></pre></div><p><code>--rm</code> 标志告诉 Docker 在您终止它后立即删除创建的容器，因为这是一个您不需要再次启动的临时或临时容器。 <code>-i</code> 和 <code>-t</code> 标志，缩写为 <code>-it</code> ，以交互方式运行容器，让您通过连接到终端的标准流来键入命令。使用 <code>--name</code> 选项，您可以为新容器指定一个描述性名称。</p>
<p><code>--network</code> 选项将你的新 <code>redis-client</code> 容器连接到之前创建的虚拟网络，允许它与 <code>redis-server</code> 容器通信。这样，两个容器都将收到与 <code>--name</code> 选项给定的名称相对应的主机名。请注意，通过使用 <code>-h</code> 参数，您告诉 Redis CLI 连接到由其容器名称标识的 Redis 服务器。</p>
<blockquote>
<p>注意：有一种更快的方法可以通过虚拟网络连接两个容器，而无需显式创建容器。您可以在运行新容器时指定 <code>--link</code> 选项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run --rm -it <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             --name redis-client <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             --link redis-server:redis-client <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             redis redis-cli -h redis-server
</span></span></code></pre></div><p>但是，此选项已被弃用，并且可能会在某个时候从 Docker 中删除。</p>
</blockquote>
<p>当您的新 Docker 容器启动时，您将进入一个交互式 Redis CLI，它类似于带有以下提示的 Python REPL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">redis-server:6379&gt; SET pi 3.14
</span></span><span class="line"><span class="cl">OK
</span></span><span class="line"><span class="cl">redis-server:6379&gt; GET pi
</span></span><span class="line"><span class="cl"><span class="s2">&#34;3.14&#34;</span>
</span></span><span class="line"><span class="cl">redis-server:6379&gt; DEL pi
</span></span><span class="line"><span class="cl"><span class="o">(</span>integer<span class="o">)</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">redis-server:6379&gt; KEYS *
</span></span><span class="line"><span class="cl"><span class="o">(</span>empty array<span class="o">)</span>
</span></span></code></pre></div><p>在那里，您可以测试一些 Redis 命令，例如，设置键值对、获取相应键的值、删除该键值对或检索当前存储在服务器中的所有键的列表。要退出交互式 Redis CLI，请按键盘上的 Ctrl+C。</p>
<blockquote>
<p>如果您安装了 Docker Desktop，那么在大多数情况下，它不会将流量从您的主机路由到容器。你的本地网络和默认的 Docker 网络之间没有连接：</p>
<ul>
<li>
<p>Docker Desktop for Mac 无法将流量路由到容器。</p>
</li>
<li>
<p>适用于 Windows 的 Docker Desktop 无法将流量路由到 Linux 容器。但是，您可以对 Windows 容器执行 ping 操作。</p>
</li>
</ul>
<p>Linux 上的 Docker Desktop 也是如此。另一方面，如果您使用 Docker 引擎或在 Windows 主机上运行 Windows 容器，那么您将能够通过它们的 IP 地址访问这些容器。</p>
<p>因此，有时您可以直接从主机与 Redis 服务器通信。首先，找出对应的Docker容器的IP地址：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker inspect redis-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -f <span class="s1">&#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{println}}{{end}}&#39;</span>
</span></span><span class="line"><span class="cl">172.17.0.2
</span></span><span class="line"><span class="cl">172.18.0.2
</span></span></code></pre></div><p>如果您看到多个 IP 地址，则表示您的容器连接到多个网络。当您启动容器时，容器会自动连接到默认的 Docker 网络。</p>
<p>记下其中一个地址，您可能会有所不同。现在，您可以将此 IP 地址用作 <code>-h</code> 参数的值，而不是 <code>redis-cli</code> 中的链接容器名称。您还可以使用此 IP 地址通过 <code>netcat</code> 或 Telnet 客户端连接到 Redis，例如 PuTTY 或 <code>telnet</code> 命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ telnet 172.17.0.2 <span class="m">6379</span>
</span></span><span class="line"><span class="cl">Trying 172.17.0.2...
</span></span><span class="line"><span class="cl">Connected to 172.17.0.2.
</span></span><span class="line"><span class="cl">Escape character is <span class="s1">&#39;^]&#39;</span>.
</span></span><span class="line"><span class="cl">SET pi 3.14
</span></span><span class="line"><span class="cl">+OK
</span></span><span class="line"><span class="cl">GET pi
</span></span><span class="line"><span class="cl"><span class="nv">$4</span>
</span></span><span class="line"><span class="cl">3.14
</span></span><span class="line"><span class="cl">DEL pi
</span></span><span class="line"><span class="cl">:1
</span></span><span class="line"><span class="cl">KEYS *
</span></span><span class="line"><span class="cl">*0
</span></span><span class="line"><span class="cl">^<span class="o">]</span>
</span></span><span class="line"><span class="cl">telnet&gt; Connection closed.
</span></span></code></pre></div><p>请记住提供默认为 <code>6379</code> 的端口号，Redis 会在该端口上侦听传入连接。您可以在此处以明文形式键入 Redis 命令，因为服务器使用未加密的协议，除非您在配置中明确启用 TLS 支持。</p>
</blockquote>
<p>最后，您可以利用端口映射使 Redis 在 Docker 容器之外可用。在开发过程中，您将希望直接连接到 Redis，而不是通过来自另一个容器的虚拟网络，因此您不必将它连接到任何网络。</p>
<p>要使用端口映射，请停止并删除现有的 <code>redis-server</code> ，然后使用定义如下的 <code>-p</code> 选项运行一个新容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker stop redis-server
</span></span><span class="line"><span class="cl">$ docker rm redis-server
</span></span><span class="line"><span class="cl">$ docker run -d --name redis-server -p 6379:6379 redis
</span></span></code></pre></div><p>冒号左边的数字（ <code>:</code> ）代表主机或你电脑上的端口号，而右边的数字代表即将运行的Docker容器内的映射端口。</p>
<p>在两侧使用相同的端口号可以有效地转发它，这样您就可以连接到 Redis，就像它在您的计算机上本地运行一样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ telnet localhost <span class="m">6379</span>
</span></span><span class="line"><span class="cl">Trying 127.0.0.1...
</span></span><span class="line"><span class="cl">Connected to localhost.
</span></span><span class="line"><span class="cl">Escape character is <span class="s1">&#39;^]&#39;</span>.
</span></span><span class="line"><span class="cl">INCR page_views
</span></span><span class="line"><span class="cl">:1
</span></span><span class="line"><span class="cl">INCR page_views
</span></span><span class="line"><span class="cl">:2
</span></span><span class="line"><span class="cl">INCR page_views
</span></span><span class="line"><span class="cl">:3
</span></span><span class="line"><span class="cl">^<span class="o">]</span>
</span></span><span class="line"><span class="cl">telnet&gt; Connection closed.
</span></span></code></pre></div><p>连接到现在在本地主机和默认端口上可见的 Redis 后，您可以使用 <code>INCR</code> 命令增加页面浏览量。如果底层键尚不存在，则 Redis 将使用值 <code>1</code> 对其进行初始化。</p>
<blockquote>
<p>注意：如果您在本地安装了 Redis，或者某些系统进程也在您的主机上使用端口 <code>6379</code> ，那么您需要使用未占用的端口以不同方式映射您的端口号。例如，您可以执行以下操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -d --name redis-server -p 9736:6379 redis
</span></span></code></pre></div><p>这将允许您连接到端口 <code>9736</code> 上的本地主机（如果该端口尚未被其他服务占用）。只要可用，使用哪个端口并不重要。</p>
</blockquote>
<p>现在您已经知道如何从命令行连接到 Redis，您可以继续看看如何通过 Python 程序执行相同的操作。</p>
<h3 id="从-python-连接到-redis">从 Python 连接到 Redis</h3>
<p>此时，您有一个在 Docker 容器中运行的 Redis 服务器，您可以使用 Redis 的默认端口号在本地主机上访问它。</p>
<p>如果您想了解有关您的容器或任何其他 Docker 资源的更多信息，那么您始终可以通过检查手头的对象来检索有价值的信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker inspect redis-server
</span></span><span class="line"><span class="cl"><span class="o">[</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Id&#34;</span>: <span class="s2">&#34;09b9842463c78a2e9135add810aba6...2a15310009632c40ea8&#34;</span>,
</span></span><span class="line"><span class="cl">        ⋮
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;NetworkSettings&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">            ⋮
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Ports&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;6379/tcp&#34;</span>: null
</span></span><span class="line"><span class="cl">            <span class="o">}</span>,
</span></span><span class="line"><span class="cl">            ⋮
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;IPAddress&#34;</span>: <span class="s2">&#34;172.17.0.2&#34;</span>,
</span></span><span class="line"><span class="cl">            ⋮
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">]</span>
</span></span></code></pre></div><p>在这种情况下，您要询问有关 <code>redis-server</code> 容器的信息，其中包括大量详细信息，例如容器的网络配置。 <code>docker inspect</code> 命令默认返回 JSON 格式的数据，您可以使用 Go 模板进一步过滤。</p>
<p>接下来，打开终端，激活项目的虚拟环境，并启动一个新的 Python REPL：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">PS&gt; venv<span class="se">\S</span>cripts<span class="se">\a</span>ctivate
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> PS&gt; python
</span></span></code></pre></div><p>Linux + MacOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">source</span> venv/bin/activate
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python
</span></span></code></pre></div><p>假设您之前在此虚拟环境中安装了 <code>redis</code> 包，您应该能够导入 Python 的 Redis 客户端并调用其中一种方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">redis</span> <span class="kn">import</span> <span class="n">Redis</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">redis</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">redis</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">5</span>
</span></span></code></pre></div><p>当您在不指定任何参数的情况下创建新的 <code>Redis</code> 实例时，它将尝试连接到在本地主机和默认端口 <code>6379</code> 上运行的 Redis 服务器。在这种情况下，调用 <code>.incr()</code> 确认您已成功与位于 Docker 容器中的 Redis 建立连接，因为它记住了 <code>page_views</code> 键的最后一个值。</p>
<p>如果您需要连接到位于远程计算机上的 Redis，请提供自定义主机和端口号作为参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">redis</span> <span class="kn">import</span> <span class="n">Redis</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">6379</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">redis</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">6</span>
</span></span></code></pre></div><p>请注意，您应该将端口号作为整数传递，但如果您传递一个字符串，库也不会抱怨。</p>
<p>连接到 Redis 的另一种方法是使用特殊格式的字符串，它代表一个 URL：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">redis</span> <span class="kn">import</span> <span class="n">Redis</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="o">.</span><span class="n">from_url</span><span class="p">(</span><span class="s2">&#34;redis://localhost:6379/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">redis</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">7</span>
</span></span></code></pre></div><p>如果您想将 Redis 配置存储在文件或环境变量中，这会特别方便。</p>
<p>好极了！您可以获取这些代码片段之一并将其与您的 Flask Web 应用程序集成。在下一节中，您将看到如何做到这一点。</p>
<h3 id="在本地实现并运行-flask-应用程序">在本地实现并运行 Flask 应用程序</h3>
<p>返回代码编辑器，打开 <code>page-tracker</code> 项目中的 <code>app</code> 模块，并编写以下几行 Python 代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># src/page_tracker/app.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">redis</span> <span class="kn">import</span> <span class="n">Redis</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.get</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">page_views</span> <span class="o">=</span> <span class="n">redis</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;This page has been seen </span><span class="si">{</span><span class="n">page_views</span><span class="si">}</span><span class="s2"> times.&#34;</span>
</span></span></code></pre></div><p>您首先从项目各自列为依赖项的第三方库中导入 <code>Flask</code> 和 <code>Redis</code> 。接下来，您使用默认参数实例化 Flask 应用程序和 Redis 客户端，这意味着客户端将尝试连接到本地 Redis 服务器。</p>
<p>最后，您定义一个控制器函数来处理到达 Web 服务器根地址 ( <code>/</code> ) 的 HTTP GET 请求。</p>
<p>您的端点会增加 Redis 中的页面浏览量，并在客户端的 Web 浏览器中显示合适的消息。就是这样！您拥有一个完整的 Web 应用程序，它可以使用不到十行的代码处理 HTTP 流量并将状态持久保存在远程数据存储中。</p>
<p>要验证您的 Flask 应用程序是否按预期工作，请在终端中发出以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ flask --app page_tracker.app run
</span></span><span class="line"><span class="cl"> * Serving Flask app <span class="s1">&#39;page_tracker.app&#39;</span>
</span></span><span class="line"><span class="cl"> * Debug mode: off
</span></span><span class="line"><span class="cl">WARNING: This is a development server. Do not use it in a production
</span></span><span class="line"><span class="cl">⮑ deployment. Use a production WSGI server instead.
</span></span><span class="line"><span class="cl"> * Running on http://127.0.0.1:5000
</span></span><span class="line"><span class="cl">Press CTRL+C to quit
</span></span></code></pre></div><p>你可以在你的文件系统的任何地方运行这个命令，只要你已经激活了正确的虚拟环境并安装了你的 <code>page-tracker</code> 包。这应该在禁用调试模式的情况下在本地主机和端口 <code>5000</code> 上运行 Flask 开发服务器。</p>
<p>如果你想从同一网络上的另一台计算机访问你的服务器，那么你必须使用特殊地址 <code>0.0.0.0</code> 而不是默认的 localhost 将它绑定到所有网络接口，它代表环回接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ flask --app page_tracker.app run --host<span class="o">=</span>0.0.0.0 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                                                  --port<span class="o">=</span><span class="m">8080</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                                                  --debug
</span></span><span class="line"><span class="cl"> * Serving Flask app <span class="s1">&#39;page_tracker.app&#39;</span>
</span></span><span class="line"><span class="cl"> * Debug mode: on
</span></span><span class="line"><span class="cl">WARNING: This is a development server. Do not use it in a production
</span></span><span class="line"><span class="cl">⮑ deployment. Use a production WSGI server instead.
</span></span><span class="line"><span class="cl"> * Running on all addresses <span class="o">(</span>0.0.0.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"> * Running on http://127.0.0.1:8080
</span></span><span class="line"><span class="cl"> * Running on http://192.168.0.115:8080
</span></span><span class="line"><span class="cl">Press CTRL+C to quit
</span></span><span class="line"><span class="cl"> * Restarting with stat
</span></span><span class="line"><span class="cl"> * Debugger is active!
</span></span><span class="line"><span class="cl"> * Debugger PIN: 123-167-546
</span></span></code></pre></div><p>如果需要，您还可以使用适当的命令行选项或标志更改端口号并启用调试模式。</p>
<p>启动服务器后，您可以点击终端中显示的链接，并在您的网络浏览器中查看包含浏览量的页面。每次刷新此页面时，计数器应加一：</p>
<p>做得很好！您已经成功创建了一个基本的 Flask 应用程序，它使用 Redis 跟踪页面浏览量。接下来，您将学习如何测试和保护您的 Web 应用程序。</p>
<h2 id="测试和保护您的-web-应用程序">测试和保护您的 Web 应用程序</h2>
<p>在将任何项目打包并部署到生产环境之前，您应该彻底测试、检查和保护底层源代码。在本教程的这一部分，您将练习单元测试、集成测试和端到端测试。您还将执行静态代码分析和安全扫描，以在修复成本仍然低廉的情况下识别潜在的问题和漏洞。</p>
<h3 id="用单元测试覆盖源代码">用单元测试覆盖源代码</h3>
<p>单元测试涉及测试程序的各个单元或组件，以确保它们按预期工作。如今，它已成为软件开发的必要组成部分。许多工程师甚至更进一步，严格遵循<a href="https://realpython.com/python-hash-table/#take-a-crash-course-in-test-driven-development">测试驱动开发</a>方法，首先编写单元测试来驱动代码设计。</p>
<p>在编写单元测试时，Python 社区中的人们选择 <a href="https://realpython.com/pytest-python-testing/">pytest</a> 而不是标准库的 <code>unittest</code> 模块是很常见的。由于 <code>pytest</code> 相对简单，这个测试框架上手很快。继续并将 <code>pytest</code> 添加为项目的可选依赖项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># pyproject.toml</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">build-system</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">requires</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;setuptools&gt;=67.0.0&#34;</span><span class="p">,</span> <span class="s2">&#34;wheel&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">build-backend</span> <span class="p">=</span> <span class="s2">&#34;setuptools.build_meta&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;page-tracker&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;1.0.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dependencies</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Flask&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;redis&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">.</span><span class="nx">optional-dependencies</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">dev</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pytest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>您可以将以某种方式相关的可选依赖项分组在一个通用名称下。例如，在这里，您创建了一个名为 <code>dev</code> 的组来收集您将在开发过程中使用的工具和库。通过将 <code>pytest</code> 与主要依赖项分开，您将能够仅在需要时按需安装它。毕竟，将您的测试或相关的测试框架与构建的分发包捆绑在一起是没有意义的。</p>
<p>不要忘记重新安装带有可选依赖项的 Python 包，以使 <code>pytest</code> 进入项目的虚拟环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip install --editable <span class="s2">&#34;.[dev]&#34;</span>
</span></span></code></pre></div><p>您可以使用方括号列出在您的 <code>pyproject.toml</code> 文件中定义的可选依赖组的名称。在这种情况下，您要求安装用于开发目的的依赖项，包括测试框架。请注意，建议在方括号周围使用引号 ( <code>&quot;&quot;</code> ) 以防止 shell 中潜在的文件名扩展。</p>
<p>因为您在项目中遵循了 <code>src</code> 布局，所以您不必将测试模块保存在与被测代码相同的文件夹或相同的命名空间包中。您可以为测试创建一个单独的目录分支，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">page-tracker/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── src/
</span></span><span class="line"><span class="cl">│   └── page_tracker/
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       └── app.py
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── test/
</span></span><span class="line"><span class="cl">│   └── unit/
</span></span><span class="line"><span class="cl">│       └── test_app.py
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── venv/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── constraints.txt
</span></span><span class="line"><span class="cl">└── pyproject.toml
</span></span></code></pre></div><p>您已将测试模块放在 <code>test/unit/</code> 文件夹中以保持井井有条。 <code>pytest</code> 框架将在您为测试添加前缀 <code>test</code> 时发现您的测试。虽然您可以更改它，但通常在使用相应的测试模块镜像每个 Python 模块时保持默认约定。例如，您将在 <code>test/unit/</code> 文件夹中用 <code>test_app</code> 覆盖 <code>app</code> 模块。</p>
<p>您将从测试 Web 应用程序的成功路径开始，这通常意味着向服务器发送请求。每个 Flask 应用程序都带有一个方便的测试客户端，您可以使用它来发出模拟的 HTTP 请求。因为测试客户端不需要运行实时服务器，所以你的单元测试执行得更快并且会变得更加孤立。</p>
<p>您可以获得测试客户端并将其方便地包装在测试装置中，以使其可用于您的测试功能：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># test/unit/test_app.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">page_tracker.app</span> <span class="kn">import</span> <span class="n">app</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest.fixture</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">http_client</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span>
</span></span></code></pre></div><p>首先，您导入 <code>pytest</code> 包以针对您的自定义函数利用其 <code>@fixture</code> 装饰器。仔细选择您的函数名称，因为它也会成为您可以作为参数传递给各个测试函数的夹具的名称。您还可以从 <code>page_tracker</code> 包中导入 Flask 应用程序以获取相应的测试客户端实例。</p>
<p>当您打算编写单元测试时，您必须始终通过消除代码单元可能具有的任何依赖关系来隔离它。这意味着您应该模拟或存根您的代码所依赖的任何外部服务、数据库或库。在您的情况下，Redis 服务器就是这样的依赖项。</p>
<p>不幸的是，您的代码目前使用硬编码的 Redis 客户端，这会阻止模拟。这是从一开始就遵循测试驱动开发的一个很好的论据，但这并不意味着您必须返回并重新开始。相反，您将通过实施依赖注入设计模式来<a href="https://realpython.com/python-refactoring/">重构</a>您的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"># src/page_tracker/app.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gi">+from functools import cache
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl"> from flask import Flask
</span></span><span class="line"><span class="cl"> from redis import Redis
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> app = Flask(__name__)
</span></span><span class="line"><span class="cl"><span class="gd">-redis = Redis()
</span></span></span><span class="line"><span class="cl"><span class="gd"></span>
</span></span><span class="line"><span class="cl"> @app.get(&#34;/&#34;)
</span></span><span class="line"><span class="cl"> def index():
</span></span><span class="line"><span class="cl"><span class="gd">-    page_views = redis.incr(&#34;page_views&#34;)
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    page_views = redis().incr(&#34;page_views&#34;)
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>     return f&#34;This page has been seen {page_views} times.&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gi">+@cache
</span></span></span><span class="line"><span class="cl"><span class="gi">+def redis():
</span></span></span><span class="line"><span class="cl"><span class="gi">+    return Redis()
</span></span></span></code></pre></div><p>本质上，您将 Redis 客户端创建代码从<a href="https://realpython.com/python-scope-legb-rule/#modules-the-global-scope">全局范围</a>移动到一个新的 <code>redis()</code> 函数，您的控制器函数会在运行时针对每个传入请求调用该函数。这将允许您的测试用例在正确的时间用模拟对应物替换返回的 Redis 实例。但是，为了确保内存中只有一个客户端实例，有效地使其成为一个单例，您还<a href="https://realpython.com/lru-cache-python/">缓存</a>了新函数的结果。</p>
<p>现在回到您的测试模块并实施以下单元测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># test/unit/test_app.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">unittest.mock</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">page_tracker.app</span> <span class="kn">import</span> <span class="n">app</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest.fixture</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">http_client</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@unittest.mock.patch</span><span class="p">(</span><span class="s2">&#34;page_tracker.app.redis&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_should_call_redis_incr</span><span class="p">(</span><span class="n">mock_redis</span><span class="p">,</span> <span class="n">http_client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Given</span>
</span></span><span class="line"><span class="cl">    <span class="n">mock_redis</span><span class="o">.</span><span class="n">return_value</span><span class="o">.</span><span class="n">incr</span><span class="o">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># When</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">http_client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Then</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s2">&#34;This page has been seen 5 times.&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">mock_redis</span><span class="o">.</span><span class="n">return_value</span><span class="o">.</span><span class="n">incr</span><span class="o">.</span><span class="n">assert_called_once_with</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>您使用 Python 的 <code>@patch</code> 装饰器包装您的测试函数，以将模拟的 Redis 客户端作为参数注入其中。您还告诉 <code>pytest</code> 将您的 HTTP 测试客户端装置作为另一个参数注入。测试函数有一个描述性名称，以动词 should 开头并遵循 Given-When-Then 模式。这两个常用于行为驱动开发的约定，使您的测试被解读为行为规范。</p>
<p>在您的测试用例中，您首先将模拟 Redis 客户端设置为在其 <code>.incr()</code> 方法被调用时始终返回 <code>5</code> 。然后，您向根端点 ( <code>/</code> ) 发出伪造的 HTTP 请求并检查服务器的响应状态和正文。因为模拟可以帮助您测试单元的行为，所以您只需验证服务器是否使用预期参数调用了正确的方法，并相信 Redis 客户端库可以正常工作。</p>
<p>要执行单元测试，您可以使用代码编辑器中集成的测试运行器，也可以在终端中键入以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pytest -v test/unit/
</span></span></code></pre></div><p>您从虚拟环境中将 <code>pytest</code> 作为 Python 模块运行，指示它扫描 <code>test/unit/</code> 目录以便在那里查找测试模块。 <code>-v</code> 开关增加了测试报告的详细程度，以便您可以看到有关各个测试用例的更多详细信息。</p>
<p>在所有单元测试都通过后盯着绿色报告会感到满足。它使您对代码有一定程度的信心，但不足以做出任何形式的保证。许多模因说明了即使在单元测试通过后运行集成测试的重要性。</p>
<p>例如，其中一个经典模因显示有两个抽屉，但一次只能打开一个。虽然每个单独的抽屉或单元都经过测试并独立工作，但当您尝试将它们集成到一件家具中时，就会出现问题。接下来，您将向您的项目添加一个基本的集成测试。</p>
<h3 id="通过集成测试检查组件交互">通过集成测试检查组件交互</h3>
<p>集成测试应该是运行单元测试后的下一个阶段。集成测试的目标是检查您的组件作为更大系统的一部分如何相互交互。</p>
<p>例如，您的页面跟踪器 Web 应用程序可能具有集成测试，用于检查与真正的 Redis 服务器而不是模拟服务器的通信。</p>
<p>您可以重复使用 <code>pytest</code> 来实施和运行集成测试。但是，您将安装一个额外的 <code>pytest-timeout</code> 插件，以允许您强制运行时间过长的测试用例失败：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># pyproject.toml</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">build-system</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">requires</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;setuptools&gt;=67.0.0&#34;</span><span class="p">,</span> <span class="s2">&#34;wheel&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">build-backend</span> <span class="p">=</span> <span class="s2">&#34;setuptools.build_meta&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;page-tracker&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;1.0.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dependencies</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Flask&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;redis&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">.</span><span class="nx">optional-dependencies</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">dev</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pytest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pytest-timeout&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>理想情况下，您不必担心单元测试超时，因为它们应该针对速度进行优化。另一方面，集成测试将需要更长的时间来运行，并且可能会在停滞的网络连接上无限挂起，从而阻止您的测试套件完成。因此，在这种情况下有办法中止它们很重要。</p>
<p>请记住再次重新安装带有可选依赖项的包，以使 <code>pytest-timeout</code> 插件可用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip install --editable <span class="s2">&#34;.[dev]&#34;</span>
</span></span></code></pre></div><p>在继续之前，为您的集成测试添加另一个子文件夹，并在您的 <code>test/</code> 文件夹中定义一个 <code>conftest.py</code> 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">page-tracker/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── src/
</span></span><span class="line"><span class="cl">│   └── page_tracker/
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       └── app.py
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── test/
</span></span><span class="line"><span class="cl">│   ├── integration/
</span></span><span class="line"><span class="cl">│   │   └── test_app_redis.py
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   ├── unit/
</span></span><span class="line"><span class="cl">│   │   └── test_app.py
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   └── conftest.py
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── venv/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── constraints.txt
</span></span><span class="line"><span class="cl">└── pyproject.toml
</span></span></code></pre></div><p>您将在 <code>conftest.py</code> 中放置公共装置，不同类型的测试将共享这些装置。</p>
<p>虽然您的 Web 应用程序只有一个组件，但您可以将 Redis 视为 Flask 需要使用的另一个组件。因此，集成测试可能看起来与您的单元测试类似，只是不再模拟 Redis 客户端：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># test/integration/test_app_redis.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest.mark.timeout</span><span class="p">(</span><span class="mf">1.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_should_update_redis</span><span class="p">(</span><span class="n">redis_client</span><span class="p">,</span> <span class="n">http_client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Given</span>
</span></span><span class="line"><span class="cl">    <span class="n">redis_client</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># When</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">http_client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Then</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s2">&#34;This page has been seen 5 times.&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">redis_client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="sa">b</span><span class="s2">&#34;5&#34;</span>
</span></span></code></pre></div><p>从概念上讲，您的新测试用例包含与以前相同的步骤，但它与真正的 Redis 服务器交互。这就是为什么你给测试最多 <code>1.5</code> 秒来完成使用 <code>@pytest.mark.timeout</code> 装饰器。测试函数将两个夹具作为参数：</p>
<ul>
<li>连接到本地数据存储的 Redis 客户端</li>
<li>Flask 的测试客户端连接到您的 Web 应用程序</li>
</ul>
<p>为了使第二个在您的集成测试中也可用，您必须将 <code>http_client()</code> 夹具从 <code>test_app</code> 模块移动到 <code>conftest.py</code> 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># test/conftest.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">redis</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">page_tracker.app</span> <span class="kn">import</span> <span class="n">app</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest.fixture</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">http_client</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest.fixture</span><span class="p">(</span><span class="n">scope</span><span class="o">=</span><span class="s2">&#34;module&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">redis_client</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">redis</span><span class="o">.</span><span class="n">Redis</span><span class="p">()</span>
</span></span></code></pre></div><p>由于此文件位于文件夹层次结构的上一层， <code>pytest</code> 将选取其中定义的所有灯具，并使它们在整个嵌套文件夹中可见。除了您从另一个 Python 模块移动的熟悉的 <code>http_client()</code> 夹具之外，您还定义了一个返回默认 Redis 客户端的新夹具。请注意，您为它指定了 <code>module</code> 范围，以便为测试模块中的所有函数重用相同的 Redis 客户端实例。</p>
<p>要执行集成测试，您必须仔细检查 Redis 服务器是否在本地默认端口 <code>6379</code> 上运行，然后像以前一样启动 <code>pytest</code> ，但将其指向包含集成测试的文件夹：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pytest -v test/integration/
</span></span></code></pre></div><p>因为您的集成测试连接到实际的 Redis 服务器，所以它会覆盖您之前可能存储在 <code>page_views</code> 键下的值。但是，如果在执行集成测试时 Redis 服务器未运行，或者如果 Redis 在其他地方运行，那么您的测试将失败。这种失败可能是出于错误的原因，使结果成为假阴性错误，因为您的代码实际上可能按预期工作。</p>
<p>要观察此问题，请立即停止 Redis 并重新运行集成测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ docker stop redis-server
</span></span><span class="line"><span class="cl">redis-server
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pytest -v test/integration/
</span></span><span class="line"><span class="cl">⋮
</span></span><span class="line"><span class="cl"><span class="o">=========================</span> short <span class="nb">test</span> summary <span class="nv">info</span> <span class="o">==========================</span>
</span></span><span class="line"><span class="cl">FAILED test/integration/test_app_redis.py::test_should_update_redis -
</span></span><span class="line"><span class="cl">⮑redis.exceptions.ConnectionError: Error <span class="m">111</span> connecting to localhost:6379.
</span></span><span class="line"><span class="cl">⮑Connection <span class="nv">refused</span>
</span></span><span class="line"><span class="cl"><span class="o">============================</span> <span class="m">1</span> failed in 0.19s <span class="o">=============================</span>
</span></span></code></pre></div><p>这揭示了您的代码中的一个问题，该问题目前无法妥善处理 Redis 连接错误。本着测试驱动开发的精神，您可以首先编写一个重现该问题的测试用例，然后修复它。切换一下，使用模拟的 Redis 客户端在 <code>test_app</code> 模块中添加以下单元测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># test/unit/test_app.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">unittest.mock</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">redis</span> <span class="kn">import</span> <span class="ne">ConnectionError</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@unittest.mock.patch</span><span class="p">(</span><span class="s2">&#34;page_tracker.app.redis&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_should_handle_redis_connection_error</span><span class="p">(</span><span class="n">mock_redis</span><span class="p">,</span> <span class="n">http_client</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Given</span>
</span></span><span class="line"><span class="cl">    <span class="n">mock_redis</span><span class="o">.</span><span class="n">return_value</span><span class="o">.</span><span class="n">incr</span><span class="o">.</span><span class="n">side_effect</span> <span class="o">=</span> <span class="ne">ConnectionError</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># When</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">http_client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Then</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s2">&#34;Sorry, something went wrong </span><span class="se">\N{pensive face}</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>您设置模拟的 <code>.incr()</code> 方法的副作用，以便调用该方法将引发 <code>redis.ConnectionError</code> 异常，这是您在集成测试失败时观察到的。您的新单元测试是负面测试的一个示例，它期望 Flask 以 HTTP 状态代码 500 和描述性消息进行响应。以下是满足该单元测试的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># src/page_tracker/app.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">cache</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">redis</span> <span class="kn">import</span> <span class="n">Redis</span><span class="p">,</span> <span class="n">RedisError</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.get</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">page_views</span> <span class="o">=</span> <span class="n">redis</span><span class="p">()</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="n">RedisError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&#34;Redis error&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;Sorry, something went wrong </span><span class="se">\N{pensive face}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;This page has been seen </span><span class="si">{</span><span class="n">page_views</span><span class="si">}</span><span class="s2"> times.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@cache</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">redis</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Redis</span><span class="p">()</span>
</span></span></code></pre></div><p>您拦截顶级异常类 <code>redis.RedisError</code> ，它是 Redis 客户端引发的所有异常类型的祖先。如果出现任何问题，您将返回预期的 HTTP 状态代码和一条消息。为方便起见，您还使用 Flask 内置的<a href="https://realpython.com/python-logging/">记录</a>器记录异常。</p>
<blockquote>
<p>注意：虽然父类是子类直接扩展的直接基类，但祖先类可以位于<a href="https://realpython.com/python-classes/#using-inheritance-and-building-class-hierarchies">继承</a>层次结构中更上层的任何位置。</p>
</blockquote>
<p>好极了！由于测试，您修改了单元测试，实施了集成测试，并在发现代码中的缺陷后修复了它。</p>
<p>尽管如此，当您将应用程序部署到远程环境时，您如何知道所有部分都组合在一起并且一切都按预期工作？</p>
<p>在下一节中，您将通过对实际 Flask 服务器而不是测试客户端执行端到端测试来模拟真实场景。</p>
<h3 id="测试真实场景端到端">测试真实场景端到端</h3>
<p>端到端测试，也称为广泛堆栈测试，包含多种测试，可以帮助您验证整个系统。他们通过模拟实际用户通过应用程序的流程来测试完整的软件堆栈。因此，端到端测试需要一个尽可能模拟生产环境的部署环境。通常还需要专门的测试工程师团队。</p>
<blockquote>
<p>注意：由于端到端测试的维护成本很高，而且往往需要花费大量时间来设置和运行，因此它们位于 Google 测试金字塔的顶端。换句话说，您的目标应该是进行更多的集成测试，甚至在您的项目中进行更多的单元测试。</p>
</blockquote>
<p>由于您最终希望为您的 Docker 应用程序构建一个成熟的持续集成管道，因此进行一些端到端测试将变得至关重要。首先为您的 E2E 测试添加另一个子文件夹：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">page-tracker/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── src/
</span></span><span class="line"><span class="cl">│   └── page_tracker/
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       └── app.py
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── test/
</span></span><span class="line"><span class="cl">│   ├── e2e/
</span></span><span class="line"><span class="cl">│   │   └── test_app_redis_http.py
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   ├── integration/
</span></span><span class="line"><span class="cl">│   │   └── test_app_redis.py
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   ├── unit/
</span></span><span class="line"><span class="cl">│   │   └── test_app.py
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   └── conftest.py
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── venv/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── constraints.txt
</span></span><span class="line"><span class="cl">└── pyproject.toml
</span></span></code></pre></div><p>您将要实施的测试场景将类似于您的集成测试。不过，主要区别在于您将通过网络将实际的 HTTP 请求发送到实时 Web 服务器，而不是依赖 Flask 的测试客户端。</p>
<p>为此，您将使用第三方 <a href="https://realpython.com/python-requests/">requests</a> 库，您必须首先在 <code>pyproject.toml</code> 文件中将其指定为另一个可选依赖项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># pyproject.toml</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">build-system</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">requires</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;setuptools&gt;=67.0.0&#34;</span><span class="p">,</span> <span class="s2">&#34;wheel&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">build-backend</span> <span class="p">=</span> <span class="s2">&#34;setuptools.build_meta&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;page-tracker&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;1.0.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dependencies</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Flask&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;redis&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">.</span><span class="nx">optional-dependencies</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">dev</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pytest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pytest-timeout&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;requests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>您不会使用 <code>requests</code> 在生产环境中运行服务器，因此无需将其作为常规依赖项。同样，使用可编辑模式重新安装带有可选依赖项的 Python 包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip install --editable <span class="s2">&#34;.[dev]&#34;</span>
</span></span></code></pre></div><p>您现在可以在端到端测试中使用已安装的 <code>requests</code> 库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="c1"># test/e2e/test_app_redis_http.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest.mark.timeout</span><span class="p">(</span><span class="mf">1.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test_should_update_redis</span><span class="p">(</span><span class="n">redis_client</span><span class="p">,</span> <span class="n">flask_url</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Given</span>
</span></span><span class="line"><span class="cl">    <span class="n">redis_client</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># When</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">flask_url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Then</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s2">&#34;This page has been seen 5 times.&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">redis_client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="sa">b</span><span class="s2">&#34;5&#34;</span>
</span></span></code></pre></div><p>除了负责发送 HTTP GET 请求的第 12 行之外，此代码与您的集成测试几乎相同。之前，您将该请求发送到测试客户端的根地址，用斜杠字符 ( <code>/</code> ) 表示。现在，您不知道可能在远程主机上运行的 Flask 服务器的确切域或 IP 地址。因此，您的函数接收一个 Flask URL 作为参数， <code>pytest</code> 将其作为固定装置注入。</p>
<p>您可以通过命令行提供特定的网络服务器地址。同样，您的 Redis 服务器可能在不同的主机上运行，因此您也需要提供其地址作为命令行参数。可是等等！您的 Flask 应用程序当前期望 Redis 始终在本地主机上运行。继续并更新您的代码以使其可配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># src/page_tracker/app.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">cache</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">redis</span> <span class="kn">import</span> <span class="n">Redis</span><span class="p">,</span> <span class="n">RedisError</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.get</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">page_views</span> <span class="o">=</span> <span class="n">redis</span><span class="p">()</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="n">RedisError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&#34;Redis error&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;Sorry, something went wrong </span><span class="se">\N{pensive face}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;This page has been seen </span><span class="si">{</span><span class="n">page_views</span><span class="si">}</span><span class="s2"> times.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@cache</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">redis</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Redis</span><span class="o">.</span><span class="n">from_url</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;REDIS_URL&#34;</span><span class="p">,</span> <span class="s2">&#34;redis://localhost:6379&#34;</span><span class="p">))</span>
</span></span></code></pre></div><p>通常使用环境变量来设置敏感数据，例如数据库 URL，因为它提供了额外级别的安全性和灵活性。在这种情况下，您的程序需要一个自定义的 <code>REDIS_URL</code> 变量。如果在给定环境中未指定该变量，则您将回退到默认主机和端口。</p>
<p>要使用自定义命令行参数扩展 <code>pytest</code> ，您必须编辑 <code>conftest.py</code> 并按以下方式连接到框架的参数解析器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># test/conftest.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pytest</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">redis</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">page_tracker.app</span> <span class="kn">import</span> <span class="n">app</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">pytest_addoption</span><span class="p">(</span><span class="n">parser</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">addoption</span><span class="p">(</span><span class="s2">&#34;--flask-url&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="o">.</span><span class="n">addoption</span><span class="p">(</span><span class="s2">&#34;--redis-url&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest.fixture</span><span class="p">(</span><span class="n">scope</span><span class="o">=</span><span class="s2">&#34;session&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">flask_url</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">request</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">getoption</span><span class="p">(</span><span class="s2">&#34;--flask-url&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest.fixture</span><span class="p">(</span><span class="n">scope</span><span class="o">=</span><span class="s2">&#34;session&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">redis_url</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">request</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">getoption</span><span class="p">(</span><span class="s2">&#34;--redis-url&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest.fixture</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">http_client</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">app</span><span class="o">.</span><span class="n">test_client</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@pytest.fixture</span><span class="p">(</span><span class="n">scope</span><span class="o">=</span><span class="s2">&#34;module&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">redis_client</span><span class="p">(</span><span class="n">redis_url</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">redis_url</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">redis</span><span class="o">.</span><span class="n">Redis</span><span class="o">.</span><span class="n">from_url</span><span class="p">(</span><span class="n">redis_url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">redis</span><span class="o">.</span><span class="n">Redis</span><span class="p">()</span>
</span></span></code></pre></div><p>您使用类似于 Python 的 <code>argparse</code> 模块的语法定义两个可选参数， <code>--flask-url</code> 和 <code>--redis-url</code> 。然后，您将这些参数包装在会话范围的固定装置中，您将能够将其注入到您的测试函数和其他固定装置中。具体来说，您现有的 <code>redis_client()</code> fixture 现在可以利用可选的 Redis URL。</p>
<blockquote>
<p>注意：因为您的端到端测试和集成测试依赖于相同的 <code>redis_client()</code> fixture，所以您可以通过在两种类型的测试中指定 <code>--redis-url</code> 选项来连接到远程 Redis 服务器。</p>
</blockquote>
<p>这是通过指定 Flask Web 服务器和相应的 Redis 服务器的 URL 来使用 <code>pytest</code> 运行端到端测试的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pytest -v test/e2e/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --flask-url http://127.0.0.1:5000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --redis-url redis://127.0.0.1:6379
</span></span></code></pre></div><p>在这种情况下，您可以通过本地主机 ( <code>127.0.0.1</code> ) 访问 Flask 和 Redis，但您的应用程序可能会部署到由多台远程计算机组成的地理分布式环境中。当你在本地执行此命令时，确保 Redis 正在运行并首先单独启动你的 Flask 服务器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ docker start redis-server
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ flask --app page_tracker.app run
</span></span></code></pre></div><p>为了提高代码质量，如果您有能力，可以不断向您的应用程序添加更多类型的测试。不过，这通常需要一个全职软件质量保证工程师团队。另一方面，执行代码审查或其他类型的静态代码分析是相当容易实现的，可以发现许多令人惊讶的问题。您现在将查看此过程。</p>
<h3 id="执行静态代码分析和安全扫描">执行静态代码分析和安全扫描</h3>
<p>现在您的应用程序已按预期运行，是时候在不执行底层代码的情况下执行静态代码分析了。这是软件开发行业的一种常见做法，可帮助开发人员识别其代码中的潜在软件缺陷和安全风险。</p>
<p>虽然静态分析的某些步骤可以自动完成，但其他步骤通常需要手动完成，例如同行评审。</p>
<p>您将使用以下自动化工具，因此请将它们作为可选依赖项添加到您的 <code>pyproject.toml</code> 文件中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># pyproject.toml</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">build-system</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">requires</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;setuptools&gt;=67.0.0&#34;</span><span class="p">,</span> <span class="s2">&#34;wheel&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">build-backend</span> <span class="p">=</span> <span class="s2">&#34;setuptools.build_meta&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;page-tracker&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;1.0.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dependencies</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Flask&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;redis&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">.</span><span class="nx">optional-dependencies</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">dev</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;bandit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;black&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;flake8&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;isort&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pylint&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pytest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pytest-timeout&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;requests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>之后不要忘记重新安装并固定您的依赖项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip install --editable <span class="s2">&#34;.[dev]&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip freeze --exclude-editable &gt; constraints.txt
</span></span></code></pre></div><p>这会将一些命令行实用工具带入您的虚拟环境。首先，您应该通过一致地格式化代码、对 <code>import</code> 语句进行排序并检查 PEP 8 合规性来清理代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m black src/ --check
</span></span><span class="line"><span class="cl">would reformat /home/realpython/page-tracker/src/page_tracker/app.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Oh no! 💥 💔 💥
</span></span><span class="line"><span class="cl"><span class="m">1</span> file would be reformatted, <span class="m">1</span> file would be left unchanged.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m isort src/ --check
</span></span><span class="line"><span class="cl">ERROR: /home/.../app.py Imports are incorrectly sorted and/or formatted.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m flake8 src/
</span></span><span class="line"><span class="cl">src/page_tracker/app.py:23:1: E302 expected <span class="m">2</span> blank lines, found <span class="m">1</span>
</span></span></code></pre></div><p>您使用 <code>black</code> 标记代码中的任何格式不一致，使用 <code>isort</code> 确保您的 <code>import</code> 语句根据官方建议保持组织，使用 <code>flake8</code> 检查任何其他 PEP 8 样式违规。</p>
<p>如果您在运行这些工具后没有看到任何输出，则意味着没有什么可以修复的。另一方面，如果出现警告或错误，那么您可以手动更正任何报告的问题，或者让这些工具在您删除 <code>--check</code> 标志时自动执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m black src/
</span></span><span class="line"><span class="cl">reformatted /home/realpython/page-tracker/src/page_tracker/app.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">All <span class="k">done</span>! ✨ 🍰 ✨
</span></span><span class="line"><span class="cl"><span class="m">1</span> file reformatted, <span class="m">1</span> file left unchanged.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m isort src/
</span></span><span class="line"><span class="cl">Fixing /home/realpython/page-tracker/src/page_tracker/app.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m flake8 src/
</span></span></code></pre></div><p>如果没有 <code>--check</code> 标志， <code>black</code> 和 <code>isort</code> 都会继续并在不询问的情况下重新格式化受影响的文件。运行这两个命令还解决了 PEP 8 合规性问题，因为 <code>flake8</code> 不再返回任何样式违规。</p>
<blockquote>
<p>注意：遵循整个团队的通用代码风格约定有助于保持代码整洁。这样，当一个人更新源文件时，团队成员就不必对不相关代码部分（例如空格）的更改进行分类。</p>
</blockquote>
<p>一旦一切都干净了，您就可以对代码进行 lint 以查找潜在的代码异味或改进它的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pylint src/
</span></span></code></pre></div><p>当您针对 Web 应用程序的源代码运行 <code>pylint</code> 时，它可能会开始抱怨或多或少有用的东西。它通常发出属于几个类别的消息，包括：</p>
<ul>
<li><strong>E:</strong> Errors</li>
<li><strong>W:</strong> Warnings</li>
<li><strong>C:</strong> 违反公约</li>
<li><strong>R:</strong> 重构建议</li>
</ul>
<p>每条评论都有一个唯一的标识符，例如 <code>C0116</code> ，如果您觉得它没有帮助，您可以将其隐藏。您可以在全局配置文件中包含抑制的标识符以获得永久效果，或者使用命令行开关忽略给定运行中的某些错误。</p>
<p>您还可以在给定行上添加特殊格式的 Python 注释以说明特殊情况：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># src/page_tracker/app.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">cache</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">redis</span> <span class="kn">import</span> <span class="n">Redis</span><span class="p">,</span> <span class="n">RedisError</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.get</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">page_views</span> <span class="o">=</span> <span class="n">redis</span><span class="p">()</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s2">&#34;page_views&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="n">RedisError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">exception</span><span class="p">(</span><span class="s2">&#34;Redis error&#34;</span><span class="p">)</span>  <span class="c1"># pylint: disable=E1101</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s2">&#34;Sorry, something went wrong </span><span class="se">\N{pensive face}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="mi">500</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;This page has been seen </span><span class="si">{</span><span class="n">page_views</span><span class="si">}</span><span class="s2"> times.&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@cache</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">redis</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Redis</span><span class="o">.</span><span class="n">from_url</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;REDIS_URL&#34;</span><span class="p">,</span> <span class="s2">&#34;redis://localhost:6379&#34;</span><span class="p">))</span>
</span></span></code></pre></div><p>在这种情况下，您告诉 <code>pylint</code> 忽略错误 E1101 的特定实例，而不是完全抑制它。这是一个误报，因为 <code>.logger</code> 是 Flask 在运行时生成的动态属性，在静态分析过程中不可用。</p>
<blockquote>
<p>注意：如果您打算使用 <code>pylint</code> 作为自动化持续集成管道的一部分，那么您可能需要指定它何时应该退出并显示错误代码，这通常会停止管道的后续步骤。例如，您可以将其配置为始终返回中性退出代码零：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pylint src/ --exit-zero
</span></span></code></pre></div><p>这永远不会停止管道运行，即使 <code>pylint</code> 在代码中发现一些问题。或者，使用 <code>--fail-under</code> ，您可以指定任意分数阈值， <code>pylint</code> 将在该阈值时退出并显示错误代码。</p>
</blockquote>
<p>您会注意到 <code>pylint</code> 为您的代码打分并对其进行跟踪。当您以某种方式解决问题并再次运行该工具时，它会报告一个新分数并告诉您它改善或恶化了多少。使用您的最佳判断来决定 <code>pylint</code> 报告的问题是否值得修复。</p>
<p>最后，无意中通过源代码泄露敏感数据或暴露其他安全漏洞的情况非常普遍。它甚至发生在最好的软件工程师身上。最近，GitHub 在一个公共存储库中<a href="https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/#what-happened-and-what-actions-have-we-taken">暴露了它的私钥</a>，这可能让攻击者冒充这个巨头。为了降低此类事件的风险，您应该在将源代码部署到任何地方之前对其进行安全或漏洞扫描。</p>
<p>要扫描您的代码，您可以使用 <a href="https://bandit.readthedocs.io/en/latest/">bandit</a> ，它是您之前作为可选依赖项安装的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m bandit -r src/
</span></span></code></pre></div><p>当您指定文件夹路径而不是文件路径时，还必须包含 <code>-r</code> 标志以递归扫描它。此时， <code>bandit</code> 应该不会在您的代码中发现任何问题。但是，如果您在 Flask 应用程序底部添加以下两行后再次运行它，那么该工具将报告不同严重级别的问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># src/page_tracker/app.py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s2">&#34;0.0.0.0&#34;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></div><p>这种 <a href="https://realpython.com/if-name-main-python/">name-main 惯用语</a>是许多 Flask 应用程序中常见的模式，因为它使开发更方便，让您直接运行 Python 模块。另一方面，它暴露了 Flask 的调试器，允许执行任意代码，并通过地址 <code>0.0.0.0</code> 绑定到所有网络接口，为公共流量打开您的服务。</p>
<p>因此，为了确保您的 Flask 应用程序是安全的，您应该始终在将代码部署到生产环境之前运行 <code>bandit</code> 或类似工具。</p>
<p>好的。您的 Web 应用程序包含单元、集成和端到端测试。这意味着许多自动化工具已经静态分析和修改了它的源代码。</p>
<p>接下来，您将继续通过将应用程序包装在 Docker 容器中来实现持续集成，这样您就可以将整个项目部署到远程环境或忠实地将其复制到本地计算机上。</p>
<h2 id="将您的-flask-web-应用程序-docker-化">将您的 Flask Web 应用程序 Docker 化</h2>
<p>在本节中，您将以 Docker 容器的形式运行您的页面跟踪器 Web 应用程序，该容器可以与在另一个容器中运行的 Redis 通信。这样的设置对于开发和测试以及将应用程序部署到远程环境很有用。</p>
<p>即使您的计算机上没有安装 Python 或 Redis，您仍然可以通过 Docker 运行您的项目。</p>
<h3 id="理解-docker-术语">理解 Docker 术语</h3>
<p>对应用程序进行 Docker 化涉及创建 Dockerfile，它是对环境所需状态的声明性描述。它为运行时环境、配置以及运行应用程序所需的所有依赖项和库提供模板。</p>
<p>要为您的应用程序注入活力，您必须根据该描述构建一个 Docker 镜像。您可以将 Docker 镜像视为操作系统在给定时间的快照。当您与世界或公司内部共享您的 Docker 镜像时，其他人可以重现与您完全相同的环境并运行相同的应用程序。</p>
<p>这回避了经典，但它适用于我的机器问题。</p>
<p>Docker 镜像是 Docker 容器的蓝图。每个 Docker 容器都是 Docker 镜像的一个实例。一个容器有独立的状态和资源，包括它自己的文件系统、环境变量和网络接口。单个 Docker 容器通常运行单个进程，使其成为托管特定<a href="https://realpython.com/python-microservices-grpc/">微服务</a>的理想选择。</p>
<p>通过添加更多容器，您可以临时扩展一个或多个微服务以处理流量高峰，例如，这在假期期间可能很常见。但是，您的微服务必须架构良好并保持无状态才能使其有效。</p>
<blockquote>
<p>注意：Docker 容器类似于 Vagrant 或 VirtualBox 等虚拟机，但更轻巧且启动速度更快。因此，您可以同时在主机上运行比虚拟机更多的容器。</p>
<p>这样做的原因是容器的开销较小，因为它们共享操作系统的内核，而虚拟机运行在模拟完整硬件堆栈的管理程序上。另一方面，容器不那么安全，它们也不提供与虚拟机相同级别的隔离。</p>
</blockquote>
<p>典型的应用程序包括在隔离的 Docker 容器中运行的多个服务，这些容器可以相互通信。您的页面跟踪器应用程序有以下两个：</p>
<ol>
<li>Web service</li>
<li>Redis service</li>
</ol>
<p>您已经知道如何通过 Docker 运行 Redis。现在，是时候将您的 Flask Web 应用程序沙盒化到 Docker 容器中，以简化这两种服务的开发和部署过程。</p>
<h3 id="了解-dockerfile-的剖析">了解 Dockerfile 的剖析</h3>
<p>首先，您将定义一个适用于开发阶段的相对较短的 Dockerfile。在项目根文件夹中创建一个名为 <code>Dockerfile</code> 的文件，该文件与文件层次结构中的 <code>src/</code> 子文件夹和 <code>pyproject.toml</code> 配置文件处于同一级别：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">page-tracker/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── src/
</span></span><span class="line"><span class="cl">│   └── page_tracker/
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       └── app.py
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── test/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── venv/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── constraints.txt
</span></span><span class="line"><span class="cl">├── Dockerfile
</span></span><span class="line"><span class="cl">└── pyproject.toml
</span></span></code></pre></div><p>您可以随意命名此文件，但坚持默认命名约定将使您不必在每次构建镜像时都指定文件名。 Docker 期望的默认文件名是 <code>Dockerfile</code> ，没有文件扩展名。请注意，它以大写字母 <code>D</code> 开头。</p>
<p>Dockerfile 是一个纯文本文档，其中列出了组装镜像所需的步骤。它遵循特定格式，定义了一套固定的说明供您使用。</p>
<blockquote>
<p>注意：您必须将 Dockerfile 中的每条指令放在单独的一行中，但看到非常长的行被行连续字符 ( <code>\</code> ) 多次打断的情况并不少见。事实上，通常需要在一行中塞入多个操作，以利用您现在将要了解的缓存机制。</p>
</blockquote>
<p>当您从 Dockerfile 构建镜像时，您依赖于一系列层。每条指令都会在前一层之上创建一个只读层，封装对镜像底层文件系统的一些修改。图层具有全局唯一标识符，这允许 Docker 将图层存储在缓存中。这有两个主要优点：</p>
<ul>
<li>速度：Docker 可以跳过自上次构建以来未更改的层，而是从缓存中加载它们，从而显着加快镜像构建速度。</li>
<li>大小：多个镜像可以共享公共图层，从而减小它们各自的大小。除此之外，层数越少，镜像尺寸越小。</li>
</ul>
<p>现在您已经了解了 Dockerfile 的这种分层结构，您可以开始向其中添加指令，同时了解创建高效 Docker 镜像的最佳实践。</p>
<h3 id="选择基础-docker-镜像">选择基础 Docker 镜像</h3>
<p>每个 Dockerfile 中的第一条指令 <code>FROM</code> 必须始终定义用于构建新镜像的基础镜像。这意味着您不必从头开始，而是可以选择一个已经构建的合适镜像。例如，您可以使用 Python 解释器附带的镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># Dockerfile</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.11.2-slim-bullseye</span><span class="err">
</span></span></span></code></pre></div><p>在这里，您使用名为 <code>python</code> 的官方 Python 镜像，它托管在 Docker Hub 上。官方镜像由相应语言或技术的官方维护者构建和维护。它们不属于 Docker Hub 上的任何特定用户或团队，但在全局命名空间中可用，隐式称为 <code>library/</code> ，而不是更专业的变体，如 <code>circleci/python</code> 。</p>
<p>您还可以在冒号 ( <code>:</code> ) 后指定一个可选的标签或标签名称，以缩小基本镜像的特定版本。您可以通过单击相应 Docker Hub 页面上的“标签”选项卡来浏览给定 Docker 镜像的所有可用标签。</p>
<p>注意：标签不是强制性的，但将它们包含在 <code>FROM</code> 指令中被认为是最佳实践。您应该尽可能具体，以避免不必要的意外。如果您省略该标记，那么 Docker 将拉取一个标记为 <code>latest</code> 的镜像，其中可能包含不合适的操作系统或影响您的应用程序的运行时意外更改。</p>
<p>标签 <code>3.11.2-slim-bullseye</code> 表示您的基础镜像将是 Debian Bullseye 的精简变体，仅包含基本要素，让您稍后可以根据需要安装任何其他软件包。这减小了镜像的大小并加快了下载时间。此镜像的常规变体和超薄变体之间的大小差异高达八百兆字节！</p>
<p>该标记还表明您的基础镜像将随已安装的 Python 3.11.2 一起提供，因此您可以立即开始使用它。</p>
<p>在拉取基础镜像后，您可能想要立即执行的下一个任务是使用最新的安全更新和错误修复对其进行修补，这些更新和错误修复可能是自镜像在 Docker Hub 上发布以来发布的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># Dockerfile</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.11.2-slim-bullseye</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get upgrade --yes<span class="err">
</span></span></span></code></pre></div><p>在 Debian 中，您可以使用 <code>apt-get</code> 命令获取最新的软件包列表并升级任何有可用更新的软件包。请注意，这两个命令都作为一个 <code>RUN</code> 指令的一部分执行，以最大限度地减少文件系统中的层数，从而避免占用过多的磁盘空间。</p>
<blockquote>
<p>注意：Dockerfile 中指令的顺序很重要，因为它会影响构建镜像所需的时间。</p>
<p>特别是，您应该将其层经常更改的指令放在 Dockerfile 的底部，因为它们最有可能使缓存中的所有后续层无效。</p>
</blockquote>
<p>好的。您已经选择了基本镜像并安装了最新的安全更新。您几乎已经准备好设置您的 Flask 应用程序，但还有几个步骤。</p>
<h3 id="隔离你的-docker-镜像">隔离你的 Docker 镜像</h3>
<p>使用 Dockerfiles 时的另一个好习惯是，一旦不再需要它们，就创建并切换到没有管理权限的普通用户。默认情况下，Docker 以超级用户身份运行您的命令，恶意攻击者可以利用它来不受限制地访问您的主机系统。是的，Docker 提供了对容器和主机的根级访问权限！</p>
<p>以下是避免这种潜在安全风险的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Dockerfile</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">FROM</span> <span class="n">python</span><span class="p">:</span><span class="mf">3.11.2</span><span class="o">-</span><span class="n">slim</span><span class="o">-</span><span class="n">bullseye</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">RUN</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span> <span class="o">&amp;&amp;</span> \
</span></span><span class="line"><span class="cl">    <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">upgrade</span> <span class="o">--</span><span class="n">yes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">RUN</span> <span class="n">useradd</span> <span class="o">--</span><span class="n">create</span><span class="o">-</span><span class="n">home</span> <span class="n">realpython</span>
</span></span><span class="line"><span class="cl"><span class="n">USER</span> <span class="n">realpython</span>
</span></span><span class="line"><span class="cl"><span class="n">WORKDIR</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">realpython</span>
</span></span></code></pre></div><p>您创建一个名为 <code>realpython</code> 的新用户，并告诉 Docker 从现在起在 Dockerfile 中使用该用户。您还将当前工作目录设置为此用户的主目录，这样您就不必在后面的命令中明确指定完整的文件路径。</p>
<p>即使您的 Docker 容器将运行单个 Flask 应用程序，也请考虑在容器本身内部设置一个专用的虚拟环境。虽然您无需担心将多个 Python 项目彼此隔离，并且 Docker 为您的主机提供了一个合理的隔离层，但您仍然存在干扰容器自身系统工具的风险。</p>
<p>不幸的是，许多 Linux 发行版都依赖于全局 Python 安装才能顺利运行。如果您开始将包直接安装到全局 Python 环境中，那么您就为潜在的版本冲突打开了大门。这甚至可能导致破坏您的系统。</p>
<blockquote>
<p>注意：如果您仍然不相信在 Docker 容器内创建虚拟环境，那么这条警告消息可能会改变您的想法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">WARNING: Running pip as the <span class="s1">&#39;root&#39;</span> user can result in broken permissions
</span></span><span class="line"><span class="cl">and conflicting behaviour with the system package manager. It is
</span></span><span class="line"><span class="cl">⮑recommended to use a virtual environment instead:
</span></span><span class="line"><span class="cl">⮑https://pip.pypa.io/warnings/venv
</span></span></code></pre></div><p>在 Debian 或 Ubuntu 等衍生发行版上尝试使用系统的全局 <code>pip</code> 命令安装 Python 包后，您可能会看到这一点。</p>
</blockquote>
<p>在 Docker 镜像中创建和激活虚拟环境的最可靠方法是直接修改其 <code>PATH</code> 环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># Dockerfile</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.11.2-slim-bullseye</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get upgrade --yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> useradd --create-home realpython<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">USER</span><span class="s"> realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /home/realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">VIRTUALENV</span><span class="o">=</span>/home/realpython/venv<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python3 -m venv <span class="nv">$VIRTUALENV</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$VIRTUALENV</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">&#34;</span><span class="err">
</span></span></span></code></pre></div><p>首先，定义一个辅助变量 <code>VIRTUALENV</code> ，其中包含项目虚拟环境的路径，然后使用 Python 的 <code>venv</code> 模块在那里创建该环境。但是，不是使用 shell 脚本激活新环境，而是通过覆盖 <code>python</code> 可执行文件的路径来更新 <code>PATH</code> 变量。</p>
<p>为什么？这是必要的，因为以通常的方式激活您的环境只是暂时的，不会影响从您的镜像派生的 Docker 容器。此外，如果您使用 Dockerfile 的 <code>RUN</code> 指令激活虚拟环境，那么它只会持续到 Dockerfile 中的下一条指令，因为每条指令都会启动一个新的 shell 会话。</p>
<p>一旦你有了项目的虚拟环境，你就可以安装必要的依赖项。</p>
<h3 id="缓存你的项目依赖">缓存你的项目依赖</h3>
<p>与在主机本地工作相比，在 Dockerfile 中安装依赖项看起来略有不同。通常，您会安装依赖项，然后立即安装 Python 包。</p>
<p>相比之下，当您构建 Docker 镜像时，值得将该过程分为两个步骤以利用层缓存，从而减少构建镜像所需的总时间。</p>
<p>首先， <code>COPY</code> 将带有项目元数据的两个文件从您的主机导入到 Docker 镜像中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># Dockerfile</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.11.2-slim-bullseye</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get upgrade --yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> useradd --create-home realpython<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">USER</span><span class="s"> realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /home/realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">VIRTUALENV</span><span class="o">=</span>/home/realpython/venv<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python3 -m venv <span class="nv">$VIRTUALENV</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$VIRTUALENV</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --chown<span class="o">=</span>realpython pyproject.toml constraints.txt ./<span class="err">
</span></span></span></code></pre></div><p>您只需将包含有关项目依赖项信息的 <code>pyproject.toml</code> 和 <code>constraints.txt</code> 文件复制到 Docker 镜像中 <code>realpython</code> 用户的主目录中。默认情况下，文件归超级用户所有，因此您可能希望使用 <code>--chown</code> 将其所有者更改为您之前创建的普通用户。 <code>--chown</code> 选项类似于 <code>chown</code> 命令，它代表更改所有者。</p>
<p>您可以在网上找到的许多 Dockerfile 示例会一次性复制所有内容，但那很浪费！</p>
<p>可能有大量额外文件，例如包含项目整个历史的本地 Git 存储库、代码编辑器设置或项目根文件夹中的其他临时文件。</p>
<p>它们不仅会使生成的镜像膨胀，而且还会增加过早使 Docker 层缓存失效的可能性。</p>
<blockquote>
<p>注意：您应该只复制您目前需要的单个文件到您的 Dockerfile 中。否则，即使是不相关文件中的最细微变化也会导致剩余图层重建。或者，您可以定义一个 <code>.dockerignore</code> 文件，其工作方式与 <code>.gitignore</code> 副本类似，但明确说明要复制的内容更安全。</p>
</blockquote>
<p>另一个容易遗漏的难题是当您在尝试安装项目依赖项之前忘记升级 <code>pip</code> 本身。在极少数情况下， <code>pip</code> 的旧版本实际上可以阻止安装其他软件包的最新版本！在您的情况下，还值得升级 <code>setuptools</code> ，您将其用作构建后端，以获取最新的安全补丁。</p>
<p>您可以将以下两个命令组合在一条 <code>RUN</code> 指令中以安装您的依赖项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># Dockerfile</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.11.2-slim-bullseye</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get upgrade --yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> useradd --create-home realpython<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">USER</span><span class="s"> realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /home/realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">VIRTUALENV</span><span class="o">=</span>/home/realpython/venv<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python3 -m venv <span class="nv">$VIRTUALENV</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$VIRTUALENV</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --chown<span class="o">=</span>realpython pyproject.toml constraints.txt ./<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python -m pip install --upgrade pip setuptools <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m pip install --no-cache-dir -c constraints.txt <span class="s2">&#34;.[dev]&#34;</span><span class="err">
</span></span></span></code></pre></div><p>您将 <code>pip</code> 和 <code>setuptools</code> 升级到最新版本。然后，安装项目所需的第三方库，包括用于开发的可选依赖项。您限制它们的版本以确保一致的环境，并告诉 <code>pip</code> 使用 <code>--no-cache-dir</code> 禁用缓存。您在虚拟环境之外不需要这些包，因此无需缓存它们。这样，您就可以使 Docker 镜像更小。</p>
<blockquote>
<p>注意：因为您安装了依赖项而没有在 Docker 镜像中安装 <code>page-tracker</code> 包，所以它们将保留在缓存层中。因此，对源代码的任何更改都不需要重新安装这些依赖项。</p>
</blockquote>
<p>您的 Dockerfile 正在增长并变得越来越复杂，但请不要担心。只需要完成几个步骤，就快完成了。</p>
<h3 id="作为构建过程的一部分运行测试">作为构建过程的一部分运行测试</h3>
<p>最后，是时候将您的源代码复制到 Docker 镜像中，并与 linters 和其他静态分析工具一起运行您的测试了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># Dockerfile</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.11.2-slim-bullseye</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get upgrade --yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> useradd --create-home realpython<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">USER</span><span class="s"> realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /home/realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">VIRTUALENV</span><span class="o">=</span>/home/realpython/venv<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python3 -m venv <span class="nv">$VIRTUALENV</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$VIRTUALENV</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --chown<span class="o">=</span>realpython pyproject.toml constraints.txt ./<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python -m pip install --upgrade pip setuptools <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m pip install --no-cache-dir -c constraints.txt <span class="s2">&#34;.[dev]&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --chown<span class="o">=</span>realpython src/ src/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --chown<span class="o">=</span>realpython test/ test/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python -m pip install . -c constraints.txt <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m pytest test/unit/ <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m flake8 src/ <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m isort src/ --check <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m black src/ --check --quiet <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m pylint src/ --disable<span class="o">=</span>C0114,C0116,R1705 <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m bandit -r src/ --quiet<span class="err">
</span></span></span></code></pre></div><p>从主机复制 <code>src/</code> 和 <code>test/</code> 文件夹后，将 <code>page-tracker</code> 包安装到虚拟环境中。通过将自动化测试工具融入构建过程，您可以确保如果其中任何一个工具返回非零退出状态代码，则构建您的 Docker 镜像将失败。这正是您在实施持续集成管道时想要的。</p>
<p>请注意，您必须禁用严重性低的 <code>pylint</code> 问题 C0114 、 C0116 和 R1705 ，它们现在并不重要。否则，它们会阻止您的 Docker 镜像成功构建。</p>
<p>将各个命令组合在一个 <code>RUN</code> 指令中的原因是为了减少要缓存的层数。请记住，您拥有的层越多，生成的 Docker 镜像就越大。</p>
<blockquote>
<p>注意：此时，您无法执行需要 Redis 的集成或端到端测试，因为您的 Docker 镜像只涉及 Flask 应用程序。在将应用程序部署到某个环境后，您将能够执行它们。</p>
</blockquote>
<p>当所有测试都通过并且没有任何静态分析工具报告任何问题时，您的 Docker 镜像就差不多完成了。但是，当您从镜像创建新容器时，您仍然需要告诉 Docker 要运行什么命令。</p>
<h3 id="指定要在-docker-容器中运行的命令">指定要在 Docker 容器中运行的命令</h3>
<p>最后一步是指定要在从 Docker 镜像派生的每个新 Docker 容器中执行的命令。在此阶段，您可以在 Flask 的内置开发服务器上启动您的 Web 应用程序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># Dockerfile</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.11.2-slim-bullseye</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get upgrade --yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> useradd --create-home realpython<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">USER</span><span class="s"> realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /home/realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">VIRTUALENV</span><span class="o">=</span>/home/realpython/venv<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python3 -m venv <span class="nv">$VIRTUALENV</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$VIRTUALENV</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --chown<span class="o">=</span>realpython pyproject.toml constraints.txt ./<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python -m pip install --upgrade pip setuptools <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m pip install --no-cache-dir -c constraints.txt <span class="s2">&#34;.[dev]&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --chown<span class="o">=</span>realpython src/ src/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --chown<span class="o">=</span>realpython test/ test/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python -m pip install . -c constraints.txt <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m pytest test/unit/ <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m flake8 src/ <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m isort src/ --check <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m black src/ --check --quiet <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m pylint src/ --disable<span class="o">=</span>C0114,C0116,R1705 <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m bandit -r src/ --quiet<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="o">[</span><span class="s2">&#34;flask&#34;</span>, <span class="s2">&#34;--app&#34;</span>, <span class="s2">&#34;page_tracker.app&#34;</span>, <span class="s2">&#34;run&#34;</span>, <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     <span class="s2">&#34;--host&#34;</span>, <span class="s2">&#34;0.0.0.0&#34;</span>, <span class="s2">&#34;--port&#34;</span>, <span class="s2">&#34;5000&#34;</span><span class="o">]</span><span class="err">
</span></span></span></code></pre></div><p>在这里，您使用 <code>CMD</code> 指令的三种形式之一，它类似于 Python 的 <code>subprocess.run()</code> 函数的语法。请注意，您必须将主机绑定到 <code>0.0.0.0</code> 地址，以便从 Docker 容器外部访问您的应用程序。</p>
<p>您现在可以基于现有的 Dockerfile 构建 Docker 镜像，并开始运行从中派生的 Docker 容器。以下命令会将您的 Dockerfile 转换为名为 <code>page-tracker</code> 的 Docker 镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker build -t page-tracker .
</span></span></code></pre></div><p>它将在当前工作目录中查找 Dockerfile，用点 ( <code>.</code> ) 表示，并使用默认标签 <code>latest</code> 标记生成的镜像。因此，完整的镜像名称将是 <code>page-tracker:latest</code> 。</p>
<p>不幸的是，您的镜像目前包含很多杂物，例如您在生产中永远不需要的源代码、测试和 linter。</p>
<p>它们会增加镜像的大小，使下载和部署速度变慢，如果您没有正确维护它们，它们还会导致安全漏洞。此外，这些额外的组件可能会在排除错误时引起问题。</p>
<p>幸运的是，有一种更好的方法来组织您的 Dockerfile，允许您分多个阶段构建一个镜像，您现在将探索它。</p>
<h3 id="为多阶段构建重新组织-dockerfile">为多阶段构建重新组织 Dockerfile</h3>
<p>到目前为止，您创建的 Dockerfile 相当简单，应该适合开发。保留它，因为稍后您将需要它来使用 Docker Compose 运行端到端测试。您现在可以复制此文件并为其指定一个不同的名称。例如，您可以将 <code>.dev</code> 后缀附加到两个副本之一：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">page-tracker/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── src/
</span></span><span class="line"><span class="cl">│   └── page_tracker/
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       └── app.py
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── test/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── venv/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── constraints.txt
</span></span><span class="line"><span class="cl">├── Dockerfile
</span></span><span class="line"><span class="cl">├── Dockerfile.dev
</span></span><span class="line"><span class="cl">└── pyproject.toml
</span></span></code></pre></div><p>现在，编辑名为 <code>Dockerfile</code> 的文件并在将构建过程分解为多个阶段时保持打开状态。</p>
<blockquote>
<p>注意：要在构建镜像时指定自定义文件名而不是默认的 <code>Dockerfile</code> ，请使用 <code>-f</code> 或 <code>--file</code> 选项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker build -f Dockerfile.dev -t page-tracker .
</span></span></code></pre></div><p>这个文件名可以是任何你想要的。只需确保在 <code>docker build</code> 命令中正确引用它即可。</p>
</blockquote>
<p>多阶段构建背后的想法是将 Dockerfile 划分为多个阶段，每个阶段都可以基于完全不同的镜像。当您的应用程序的开发环境和运行时环境不同时，这尤其有用。</p>
<p>例如，您可以在仅用于构建和测试应用程序的临时镜像中安装必要的构建工具，然后将生成的可执行文件复制到最终镜像中。</p>
<p>多阶段构建可以使您的镜像更小、更高效。这是使用当前 Dockerfile 构建的同一镜像与您将要编写的镜像的比较：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker images
</span></span><span class="line"><span class="cl">REPOSITORY     TAG       IMAGE ID       CREATED          SIZE
</span></span><span class="line"><span class="cl">page-tracker   prod      9cb2e3233522   <span class="m">5</span> minutes ago    204MB
</span></span><span class="line"><span class="cl">page-tracker   dev       f9918cb213dc   <span class="m">5</span> minutes ago    244MB
</span></span><span class="line"><span class="cl"><span class="o">(</span>...<span class="o">)</span>
</span></span></code></pre></div><p>在这种情况下，大小差异并不显着，但当您有多个镜像要管理和移动时，它会迅速增加。</p>
<p>Dockerfile 中的每个阶段都以其自己的 <code>FROM</code> 指令开始，因此您将有两个。第一个阶段看起来与您当前的 Dockerfile 几乎完全相同，除了您将为这个阶段命名 <code>builder</code> ，您可以稍后参考：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"># Dockerfile
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gd">-FROM python:3.11.2-slim-bullseye
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+FROM python:3.11.2-slim-bullseye AS builder
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl"> RUN apt-get update &amp;&amp; \
</span></span><span class="line"><span class="cl">     apt-get upgrade --yes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> RUN useradd --create-home realpython
</span></span><span class="line"><span class="cl"> USER realpython
</span></span><span class="line"><span class="cl"> WORKDIR /home/realpython
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> ENV VIRTUALENV=/home/realpython/venv
</span></span><span class="line"><span class="cl"> RUN python3 -m venv $VIRTUALENV
</span></span><span class="line"><span class="cl"> ENV PATH=&#34;$VIRTUALENV/bin:$PATH&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> COPY --chown=realpython pyproject.toml constraints.txt ./
</span></span><span class="line"><span class="cl"> RUN python -m pip install --upgrade pip setuptools &amp;&amp; \
</span></span><span class="line"><span class="cl">     python -m pip install --no-cache-dir -c constraints.txt &#34;.[dev]&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> COPY --chown=realpython src/ src/
</span></span><span class="line"><span class="cl"> COPY --chown=realpython test/ test/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> RUN python -m pip install . -c constraints.txt &amp;&amp; \
</span></span><span class="line"><span class="cl">     python -m pytest test/unit/ &amp;&amp; \
</span></span><span class="line"><span class="cl">     python -m flake8 src/ &amp;&amp; \
</span></span><span class="line"><span class="cl">     python -m isort src/ --check &amp;&amp; \
</span></span><span class="line"><span class="cl">     python -m black src/ --check --quiet &amp;&amp; \
</span></span><span class="line"><span class="cl">     python -m pylint src/ --disable=C0114,C0116,R1705 &amp;&amp; \
</span></span><span class="line"><span class="cl"><span class="gd">-    python -m bandit -r src/ --quiet
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    python -m bandit -r src/ --quiet &amp;&amp; \
</span></span></span><span class="line"><span class="cl"><span class="gi">+    python -m pip wheel --wheel-dir dist/ . -c constraints.txt
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>
</span></span><span class="line"><span class="cl"><span class="gd">-CMD [&#34;flask&#34;, &#34;--app&#34;, &#34;page_tracker.app&#34;, &#34;run&#34;, \
</span></span></span><span class="line"><span class="cl"><span class="gd">-     &#34;--host&#34;, &#34;0.0.0.0&#34;, &#34;--port&#34;, &#34;5000&#34;]
</span></span></span></code></pre></div><p>因为您要将打包的页面跟踪器应用程序从一个镜像传输到另一个镜像，所以您必须添加使用 Python wheel 格式构建分发包的额外步骤。 <code>pip wheel</code> 命令将在 <code>dist/</code> 子文件夹中创建一个名为 <code>page_tracker-1.0.0-py3-none-any.whl</code> 的文件。您还可以从此阶段删除 <code>CMD</code> 指令，因为它将成为下一阶段的一部分。</p>
<p>第二个也是最后一个阶段，隐式命名为 <code>stage-1</code> ，看起来有点重复，因为它基于相同的镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># Dockerfile</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.11.2-slim-bullseye AS builder</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># ...</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> python:3.11.2-slim-bullseye</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get upgrade --yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> useradd --create-home realpython<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">USER</span><span class="s"> realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /home/realpython</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">VIRTUALENV</span><span class="o">=</span>/home/realpython/venv<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python3 -m venv <span class="nv">$VIRTUALENV</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$VIRTUALENV</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /home/realpython/dist/page_tracker*.whl /home/realpython<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> python -m pip install --upgrade pip setuptools <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    python -m pip install --no-cache-dir page_tracker*.whl<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="o">[</span><span class="s2">&#34;flask&#34;</span>, <span class="s2">&#34;--app&#34;</span>, <span class="s2">&#34;page_tracker.app&#34;</span>, <span class="s2">&#34;run&#34;</span>, <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     <span class="s2">&#34;--host&#34;</span>, <span class="s2">&#34;0.0.0.0&#34;</span>, <span class="s2">&#34;--port&#34;</span>, <span class="s2">&#34;5000&#34;</span><span class="o">]</span><span class="err">
</span></span></span></code></pre></div><p>您首先按照熟悉的步骤升级系统包、创建用户和创建虚拟环境。然后，突出显示的行负责从 <code>builder</code> 阶段复制 wheel 文件。你像以前一样用 <code>pip</code> 安装它。最后，您添加 <code>CMD</code> 指令以使用 Flask 启动您的 Web 应用程序。</p>
<p>当您使用这样的多阶段 Dockerfile 构建镜像时，您会注意到第一阶段需要更长的时间才能完成，因为它必须安装所有依赖项、运行测试并创建 wheel 文件。</p>
<p>但是，构建第二阶段会快很多，因为它只需要复制并安装完成的 wheel 文件。另外请注意， <code>builder</code> 阶段是临时的，因此之后不会在您的 Docker 镜像中留下任何痕迹。</p>
<p>好的。你终于准备好构建你的多阶段 Docker 镜像了！</p>
<h3 id="构建和版本控制你的-docker-镜像">构建和版本控制你的 Docker 镜像</h3>
<p>在构建镜像之前，强烈建议您为 Docker 镜像选择一个版本控制方案，并始终使用唯一标签对其进行标记。这样，您就会知道在任何给定环境中部署了什么，并能够在需要时回滚到之前的稳定版本。</p>
<p>对 Docker 镜像进行版本控制有几种不同的策略。例如，一些流行的包括：</p>
<ul>
<li>语义版本控制使用以点分隔的三个数字来指示主要版本、次要版本和补丁版本。</li>
<li>Git 提交哈希使用绑定到镜像中源代码的 Git 提交的 SHA-1 哈希。</li>
<li>时间戳使用时间信息（例如 Unix 时间）来指示镜像的构建时间。</li>
</ul>
<p>没有什么能阻止您结合其中的一些策略来创建一个有效的版本控制系统，该系统将帮助您跟踪镜像中的更改。</p>
<p>在本教程中，您将坚持使用 Git 提交哈希方法，因为它可以确保您的 Docker 镜像的标签是唯一且不可变的。花点时间在您的 <code>page-tracker/</code> 文件夹中初始化一个本地 Git 存储库，并使用与您的工作环境相关的文件模式定义一个 <code>.gitignore</code> 。您可以通过使用 <code>pwd</code> 命令打印您的工作目录来仔细检查您是否在正确的文件夹中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">pwd</span>
</span></span><span class="line"><span class="cl">/home/realpython/page-tracker
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">Initialized empty Git repository in /home/realpython/page-tracker/.git/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ curl -sL https://www.gitignore.io/api/python,pycharm+all &gt; .gitignore
</span></span></code></pre></div><p>在这里，您使用 <code>curl</code> 从 gitignore.io 下载内容，请求 Git 从跟踪中排除 Python 和 PyCharm 相关的文件模式。 <code>-L</code> 标志是跟随重定向所必需的，因为该网站最近移动到具有更长域的不同地址。或者，您可以从 GitHub 的 <code>gitignore</code> 存储库中获取其中一个模板，某些代码编辑器会使用该模板。</p>
<p>初始化本地 Git 存储库后，您可以进行第一次提交并获取相应的哈希值，例如，使用 <code>git rev-parse</code> 命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git add .
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;Initial commit&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> dde1dc9<span class="o">]</span> Initial commit
</span></span><span class="line"><span class="cl"> <span class="m">11</span> files changed, <span class="m">535</span> insertions<span class="o">(</span>+<span class="o">)</span>
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> .gitignore
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> Dockerfile
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> Dockerfile.dev
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> constraints.txt
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> pyproject.toml
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> src/page_tracker/__init__.py
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> src/page_tracker/app.py
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> test/conftest.py
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> test/e2e/test_app_redis_http.py
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> test/integration/test_app_redis.py
</span></span><span class="line"><span class="cl"> create mode <span class="m">100644</span> test/unit/test_app.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git rev-parse HEAD
</span></span><span class="line"><span class="cl">dde1dc9303a2a9f414d470d501572bdac29e4075
</span></span></code></pre></div><p>如果你不喜欢长输出，那么你可以在命令中添加 <code>--short</code> 标志，这将为你提供相同提交哈希的缩写版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git rev-parse --short HEAD
</span></span><span class="line"><span class="cl">dde1dc9
</span></span></code></pre></div><p>默认情况下，它将返回可以唯一标识该特定提交而不会产生歧义的最短前缀。</p>
<p>现在您已经有了 Git 提交哈希，您可以将它用作 Docker 镜像的标签。要构建镜像，请在指定 <code>-t</code> 或 <code>--tag</code> 选项的同时运行 <code>docker build</code> 命令，以便为新镜像添加标签。尾随点表示您当前的工作目录是查找 Dockerfile 的位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker build -t page-tracker:<span class="k">$(</span>git rev-parse --short HEAD<span class="k">)</span> .
</span></span></code></pre></div><p>冒号之前的第一部分 <code>page-tracker</code> 是您的 Docker 镜像的助记名称。请注意，在现实生活中，您可能会附加某种后缀来传达此服务的角色。例如，因为这是一个 Flask 网络应用程序，您可以将镜像命名为 <code>page-tracker-web</code> 或类似的名称。冒号后面的是实际标记，在本例中，它是当前提交的 Git 提交哈希。</p>
<p>如果您之前构建 Docker 镜像时没有给它明确的标签，或者如果您以其他方式标记它，那么您可能会注意到现在构建它只需要几分之一秒！</p>
<p>那是因为 Docker 缓存了每个文件系统层，只要项目中的重要文件没有更改，就不需要重建这些层。</p>
<p>另一点值得注意的是，在表面之下，Docker 仅存储您的镜像的一个副本。它有一个唯一的标识符，例如 <code>9cb2e3233522</code> ，多个标签可以引用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker images
</span></span><span class="line"><span class="cl">REPOSITORY     TAG                    IMAGE ID       CREATED       SIZE
</span></span><span class="line"><span class="cl">page-tracker   dde1dc9                9cb2e3233522   <span class="m">1</span> hour ago    204MB
</span></span><span class="line"><span class="cl">page-tracker   prod                   9cb2e3233522   <span class="m">1</span> hour ago    204MB
</span></span><span class="line"><span class="cl">page-tracker   dev                    f9918cb213dc   <span class="m">1</span> hour ago    244MB
</span></span><span class="line"><span class="cl"><span class="o">(</span>...<span class="o">)</span>
</span></span></code></pre></div><p>这就是标记 Docker 镜像的力量。它允许您使用不同的标签引用同一镜像，例如 <code>page-tracker:prod</code> 或 <code>page-tracker:dde1dc9</code> ，同时保留唯一标识。每个标签都包含存储库名称（您将在下一节中了解）和一个特定的标签名称。</p>
<p>您现在可以使用您从 Dockerfile 构建的闪亮的新 Docker 镜像来启动一个成熟的 Docker 容器。具体来说，您可以在笔记本电脑或支持 Docker 的远程基于云的服务器上本地运行容器。</p>
<p>这可能是您进行端到端测试的唯一方法。</p>
<p>但是如何将容器放到远程环境中呢？你会在下一节中找到答案。</p>
<h3 id="将镜像推送到-docker-registry">将镜像推送到 Docker Registry</h3>
<p>当您与他人协作处理一段代码时，您通常会使用 Git 等版本控制来跟踪所有相关人员所做的所有更改。虽然 Git 本身是一个分布式版本控制系统，允许您集成任何两个人之间的贡献，但它缺乏集中托管服务来促进多方之间的同时协作。这就是为什么大多数人选择 GitHub 或竞争对手的原因。</p>
<p>GitHub 是您通常上传源代码的地方，而 Docker Registry 是存储构建的 Docker 镜像的常用位置。从事商业产品的公司将希望在私有云或本地建立自己的 Docker Registry，以获得额外级别的控制和安全性。许多流行的云提供商以托管服务的形式提供高度安全的 Docker 注册表。</p>
<p>您也可以使用私有注册表，例如，通过 Docker 运行开源分发容器。</p>
<p>或者，如果这太麻烦，那么您会很高兴得知 Docker Hub 提供了一个安全的托管注册表，您可以开始免费使用它。虽然免费层为您提供了无限数量的公共存储库，但您将只有一个私有存储库，并且对外界不可见。考虑到您不必支付一分钱，这对于个人或业余爱好项目来说是一笔不错的交易。</p>
<blockquote>
<p>注意：您的 Docker Hub 帐户上的存储库是用户可以上传或下载的 Docker 镜像的集合。每个存储库可以包含同一镜像的多个标记版本。</p>
<p>在这方面，Docker Hub 存储库类似于 GitHub 存储库，但专门用于 Docker 镜像而不是代码。私有存储库允许您仅允许授权用户访问，而公共存储库可供所有人使用。</p>
</blockquote>
<p>为什么要使用 Docker Registry？</p>
<p>好吧，您不必这样做，但它有助于在整个组织内共享 Docker 镜像或设置持续集成管道。例如，将提交推送到 GitHub 或其他源代码修订系统可以通过自动构建功能启动构建过程。反过来，注册中心会宣布新的 Docker 镜像已成功构建或使用 webhook 开始部署到远程环境以进行进一步测试。</p>
<p>如果还没有，请立即在 Docker Hub 上注册一个帐户。请注意，除了电子邮件地址和密码外，您还需要提供唯一的用户名，就像在 GitHub 上一样：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/docker_hub.912fd6ac373d.png" alt="img"  />
</p>
<p>选择一个好记的用户名至关重要，因为它将成为您在 Docker Hub 上的独特句柄。为了避免不同用户拥有的镜像之间的名称冲突，Docker Hub 通过用户名和存储库名称的组合来识别每个存储库。</p>
<p>例如，如果您的用户名是 <code>realpython</code> ，那么您的一个存储库可以由字符串 <code>realpython/page-tracker</code> 标识，它类似于 GitHub 上存储库的名称。</p>
<p>在 Web 浏览器中注册并登录到您的新 Docker Hub 帐户后，您应该做的第一件事是为您的镜像创建一个存储库。单击“创建存储库”磁贴或转到顶部导航栏中的“存储库”选项卡，然后单击“创建存储库”按钮。然后，将您的存储库命名为 <code>page-tracker</code> ，如果需要，请为其提供有意义的描述，然后选择 Private 选项以使其仅对您可见：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/docker_hub2.359dd2359251.png" alt="img"  />
</p>
<p>之后，您将看到带有终端命令的说明，这些命令将允许您将 Docker 镜像推送到您的存储库。但首先，您必须从命令行登录 Docker Hub，提供您的用户名和密码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker login -u realpython
</span></span><span class="line"><span class="cl">Password:
</span></span></code></pre></div><p>即使您打算仅使用公共存储库，也需要使用 <code>docker login</code> 进行身份验证。</p>
<blockquote>
<p>注意：如果您在 Docker Hub 帐户的安全设置中启用了双因素身份验证，那么您将需要生成一个具有适当权限的访问令牌，以便在命令行中使用 <code>docker</code> 登录。当它要求您输入密码时，只需提供您的令牌即可。</p>
<p>否则，如果您没有配置双因素身份验证，那么您将能够使用您的 Docker Hub 密码登录。尽管如此，如文档所述，仍然值得生成一个令牌以获得更好的安全性。</p>
</blockquote>
<p>当你使用 Git 将代码推送到远程存储库时，你必须首先从某个地方克隆它或手动设置默认源，它配置本地存储库的元数据。</p>
<p>相比之下，使用 Docker Hub 或任何其他 Docker 注册表，将本地镜像映射到远程镜像的过程有点不同——您使用标记。具体来说，您使用 Docker Hub 的用户名和存储库名称作为前缀来标记构建的镜像。</p>
<p>首先，您必须提供要发布的本地 Docker 镜像的源标签，例如 <code>page-tracker:dde1dc9</code> 。要找到您刚刚构建的 <code>page-tracker</code> 镜像的确切标签，请检查您当前的 Git 提交哈希或列出您现有的 <code>docker images</code> 。</p>
<p>一旦知道如何标记镜像，就可以使用相同的提交哈希来构建目标标签，该标签将在 Docker 注册表中标识您的存储库。请记住在创建新标签之前将 <code>realpython</code> 替换为您自己的 Docker Hub 用户名：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker tag page-tracker:dde1dc9 realpython/page-tracker:dde1dc9
</span></span></code></pre></div><p>这会将新标签 <code>realpython/page-tracker:dde1dc9</code> 添加到标记为 <code>page-tracker:dde1dc9</code> 的本地镜像。目标标签的完整形式如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">registry/username/repository:tag
</span></span></code></pre></div><p>当你想推送到默认的 Docker Hub 时，可以省略注册表部分。否则，它可以是域地址，例如 <code>docker.io</code> ，或带有私有注册表实例的可选端口号的 IP 地址。用户名和存储库必须与您在 Docker Hub 或您使用的任何注册表上创建的用户名和存储库相对应。如果您不提供标签，那么 Docker 将隐式应用标签 <code>latest</code> ，这可能是未定义的。</p>
<p>您可以使用多个标签来标记同一镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker tag page-tracker:dde1dc9 realpython/page-tracker:latest
</span></span></code></pre></div><p>正确标记镜像后，您可以使用 <code>docker push</code> 将它们发送到所需的注册表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker push realpython/page-tracker:dde1dc9
</span></span><span class="line"><span class="cl">$ docker push realpython/page-tracker:latest
</span></span></code></pre></div><p>不要担心发送相同的镜像两次。 Docker 足够聪明，可以知道您之前何时推送过镜像，如果它在注册表中检测到该镜像，则只会传输必要的元数据。</p>
<p>当您在 Docker Hub 上刷新您的配置文件时，它应该反映您刚刚推送到存储库中的两个标签：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/docker_hub3.69a099d38e54.png" alt="Tagged Docker Images on Docker Hub"  />
</p>
<p>现在，当您将协作者添加到您的私有存储库时，他们将能够推送或拉取镜像。请记住，这需要在 Docker Hub 上升级订阅计划。</p>
<p>另一种方法是生成一个对所有存储库具有只读权限的访问令牌，或者创建一个公共存储库。</p>
<p>好的。终于到了通过在 Docker 容器中运行您的 dockerized Flask web 应用程序的机会了。</p>
<h3 id="运行一个-docker-容器">运行一个 Docker 容器</h3>
<p>如果你从一个干净的 Docker 环境开始，也许在另一台计算机上，那么你可以通过从 Docker Hub 拉取它来下载你的镜像，只要你有读取该存储库的权限：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker pull realpython/page-tracker
</span></span><span class="line"><span class="cl">Using default tag: latest
</span></span><span class="line"><span class="cl">latest: Pulling from realpython/page-tracker
</span></span><span class="line"><span class="cl">f1f26f570256: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">2d2b01660885: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">e4e8e4c0b0e1: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">1ba60f086308: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">3c2fccf90be1: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">15e9066b1610: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">e8271c9a01cc: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">4f4fb700ef54: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">bb211d339643: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">8690f9a37c37: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">7404f1e120d1: Pull <span class="nb">complete</span>
</span></span><span class="line"><span class="cl">Digest: sha256:cc6fe40a1ac73e6378d0660bf386a1599880a30e422dc061680769bc4d501164
</span></span><span class="line"><span class="cl">Status: Downloaded newer image <span class="k">for</span> realpython/page-tracker:latest
</span></span><span class="line"><span class="cl">docker.io/realpython/page-tracker:latest
</span></span></code></pre></div><p>由于您没有为镜像指定任何标签，因此 Docker 会拉取标记为 <code>latest</code> 的标签。请注意，输出还包括镜像各个层的标识符，对应于用于构建该镜像的原始 Dockerfile 中的 11 条指令。</p>
<p>不过，您不必手动拉取镜像，因为 Docker 会在您第一次尝试运行它们时为您完成。如果指定的镜像已经在缓存中，那么一个新的容器将立即启动，而不会等到下载完成。</p>
<p>下面是基于新镜像运行新 Docker 容器的命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -p 80:5000 --name web-service realpython/page-tracker
</span></span><span class="line"><span class="cl"> * Serving Flask app <span class="s1">&#39;page_tracker.app&#39;</span>
</span></span><span class="line"><span class="cl"> * Debug mode: off
</span></span><span class="line"><span class="cl">WARNING: This is a development server. Do not use it in a production
</span></span><span class="line"><span class="cl">⮑ deployment. Use a production WSGI server instead.
</span></span><span class="line"><span class="cl"> * Running on all addresses <span class="o">(</span>0.0.0.0<span class="o">)</span>
</span></span><span class="line"><span class="cl"> * Running on http://127.0.0.1:5000
</span></span><span class="line"><span class="cl"> * Running on http://172.17.0.3:5000
</span></span><span class="line"><span class="cl">Press CTRL+C to quit
</span></span></code></pre></div><p>当您在本地开发项目时，使用端口转发通过主机的 localhost 访问 Web 服务器通常很方便。在这种情况下， <code>-p</code> 选项可让您导航到地址 <code>http://localhost:80</code> 或只是 <code>http://localhost</code> ，而无需知道正在运行的 Docker 容器的确切 IP 地址。端口 <code>80</code> 是 HTTP 协议的默认端口，这意味着您可以在 Web 浏览器中键入地址时省略它。</p>
<p>此外，此端口映射将确保在 <code>http://localhost:5000</code> 处没有网络端口冲突，以防您没有停止本地 Flask 实例。请记住，您之前启动了一个来执行端到端测试。如果进程仍在后台某处运行，它将占用 Flask 的默认端口 <code>5000</code> 。</p>
<blockquote>
<p>注意：为您的 Docker 容器提供一个描述性名称也很有用，例如 <code>web-service</code> ，这样您就可以通过名称重新启动或删除它，而无需查找相应的容器标识符。如果你不这样做，那么 Docker 会给你的容器一个愚蠢的名字，比如随机选择的 <code>admiring_jang</code> 或 <code>frosty_almeida</code> 。</p>
<p>如果您不想手动操作，请考虑添加 <code>--rm</code> 标志以在容器停止时自动删除它。</p>
</blockquote>
<p>正如您在上面的输出中看到的，Flask 服务器正在其容器内的所有网络接口 ( <code>0.0.0.0</code> ) 上运行，正如您在 Dockerfile 的 <code>CMD</code> 层中指示的那样。</p>
<p>继续并在您的 Web 浏览器中访问地址 <code>http://localhost</code> 或使用 <code>curl</code> 之类的命令行工具来访问 dockerized 页面跟踪器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl http://localhost
</span></span><span class="line"><span class="cl">Sorry, something went wrong 😔
</span></span></code></pre></div><p>由于 Redis 连接失败，您将看到预期的错误消息，但至少您可以访问在 Docker 容器中运行的 Flask 应用程序。要修复错误，您需要通过传递给 <code>web-service</code> 容器的环境变量指定正确的 Redis URL。</p>
<p>现在通过按键盘上的 Ctrl+C 或 Cmd+C 停止该容器。然后，找到容器的标识符并删除关联的容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker ps -a
</span></span><span class="line"><span class="cl">CONTAINER ID   IMAGE                     COMMAND                  CREATED
</span></span><span class="line"><span class="cl">dd446a1b72a7   realpython/page-tracker   <span class="s2">&#34;flask --app page_tr…&#34;</span>   <span class="m">1</span> minute ago
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker rm dd446a1b72a7
</span></span></code></pre></div><p><code>-a</code> 标志确保显示所有容器，包括已停止的容器。否则，你不会看到你的。</p>
<p>通过 Docker 将 Flask Web 应用程序连接到 Redis 的正确方法是创建专用虚拟网络。首先，列出可用网络以检查您是否已经创建了 <code>page-tracker-network</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker network ls
</span></span><span class="line"><span class="cl">NETWORK ID     NAME                   DRIVER    SCOPE
</span></span><span class="line"><span class="cl">46e9ff2ec568   bridge                 bridge    <span class="nb">local</span>
</span></span><span class="line"><span class="cl">4795b850cb58   host                   host      <span class="nb">local</span>
</span></span><span class="line"><span class="cl">f8f99d305c5e   none                   null      <span class="nb">local</span>
</span></span><span class="line"><span class="cl">84b134794660   page-tracker-network   bridge    <span class="nb">local</span>
</span></span></code></pre></div><p>如果它不存在，那么您现在可以通过发出以下命令来创建一个：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker network create page-tracker-network
</span></span></code></pre></div><p>以类似的方式，您可以为 Redis 服务器创建一个卷，以将其数据持久存储在您的主机上。这样，您可以重新启动甚至删除并从头开始创建一个新容器，Redis 将可以访问其之前的状态。这是使用 Docker 创建命名卷的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker volume create redis-volume
</span></span></code></pre></div><p>接下来，停止并移除任何可能挂起的 Redis 容器，然后启动一个新容器。这一次，您将容器连接到 <code>page-tracker-network</code> 并将其 <code>/data</code> 文件夹绑定到您刚刚创建的名为 <code>redis-volume</code> 的卷：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -v redis-volume:/data <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             --network page-tracker-network <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             --name redis-service <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             redis:7.0.10-bullseye
</span></span></code></pre></div><p>当您在 GitHub 上查看 Redis 的官方 Docker 镜像时，您会看到一个在 <code>/data</code> 文件夹中定义挂载点的层。 Redis 会不时地将其状态转储到该文件夹中。通过将目录从您的主机挂载到此挂载点，即使容器重新启动，您也可以保持状态。</p>
<p>通过给你的容器一个描述性的名称， <code>redis-service</code> ，你将能够从同一网络上的另一个容器连接到它。就是这样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -p 80:5000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             -e <span class="nv">REDIS_URL</span><span class="o">=</span>redis://redis-service:6379 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             --network page-tracker-network <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             --name web-service <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>             realpython/page-tracker
</span></span></code></pre></div><p>您启动一个从 <code>page-tracker</code> 镜像派生的新容器，其中包含相当多的参数。以下是上述 <code>docker run</code> 命令中各个标志和选项的快速细分：</p>
<ul>
<li><code>-d</code> ：在后台运行容器，与终端分离。这意味着您将看不到 Flask 服务器的任何输出，并且您将无法再使用 Ctrl+C 或 Cmd+C 停止容器。</li>
<li><code>-p 80:5000</code> ：将容器的端口 <code>5000</code> 暴露在主机的端口 <code>80</code> 上，这样你就可以通过本地主机访问你的web应用程序。</li>
<li><code>-e REDIS_URL=...</code> : 将容器的环境变量设置为在同一网络上的另一个容器中运行的 Redis 服务器的地址。</li>
<li><code>--network page-tracker-network</code> : 指定容器使用的虚拟网络。这将允许同一网络上的其他容器通过抽象名称而不是 IP 地址与该容器通信。</li>
<li><code>--name web-service</code> : 为容器分配一个有意义的名称，这样更容易从 Docker 命令中引用容器。</li>
</ul>
<p>现在，当您在 Web 浏览器或终端中访问 Flask Web 应用程序时，您应该观察到正确的行为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl http://localhost
</span></span><span class="line"><span class="cl">This page has been seen <span class="m">1</span> times.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ curl http://localhost
</span></span><span class="line"><span class="cl">This page has been seen <span class="m">2</span> times.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ curl http://localhost
</span></span><span class="line"><span class="cl">This page has been seen <span class="m">3</span> times.
</span></span></code></pre></div><p>每次发送请求时，服务器都会以不同数量的页面浏览量进行响应。请注意，您正在通过本地主机访问服务器。如果您在 <code>web-service</code> 之前启动了 <code>redis-service</code> ，那么容器的 IP 地址可能已更改。</p>
<p>哇！光是启动和运行两项服务就需要做大量工作。如您所见，手动管理 Docker 镜像、容器、卷、网络、端口和环境变量会让人感到不知所措。而这只是表面现象！</p>
<p>想象一下，管理一个包含数十种服务的复杂应用程序需要付出多少努力，其中包括生产就绪监控、负载平衡、自动缩放等。</p>
<p>幸运的是，有更好的方法可以达到同样的效果。在下一节中，您将研究 Docker 之上的一个方便的抽象层，让您在定义持续集成管道之前使用单个命令编排这两种服务。</p>
<h2 id="使用-docker-compose-编排容器">使用 Docker Compose 编排容器</h2>
<p>大多数现实世界的应用程序由多个组件组成，这些组件自然会转化为 Docker 容器。例如，一个涉及更多的 Web 应用程序可能具有以下内容：</p>
<ul>
<li><strong>Back end:</strong> <a href="https://realpython.com/learning-paths/django-web-development/">Django</a>, <a href="https://realpython.com/fastapi-python-web-apis/">FastAPI</a>, <a href="https://realpython.com/learning-paths/flask-by-example/">Flask</a></li>
<li><strong>Front end:</strong> <a href="https://realpython.com/flask-by-example-integrating-flask-and-angularjs/">Angular</a>, <a href="https://realpython.com/the-ultimate-flask-front-end/#react-explained">React</a>, <a href="https://realpython.com/python-django-blog/#step-5-set-up-vuejs">Vue</a></li>
<li><strong>Cache:</strong> Couchbase, <a href="https://realpython.com/python-memcache-efficient-caching/">Memcached</a>, <a href="https://realpython.com/python-redis/">Redis</a></li>
<li><strong>Queue:</strong> ActiveMQ, <a href="https://realpython.com/queue-in-python/#apache-kafka-kafka-python3">Kafka</a>, <a href="https://realpython.com/queue-in-python/#rabbitmq-pika">RabbitMQ</a></li>
<li><strong>Database:</strong> <a href="https://realpython.com/python-mysql/">MySQL</a>, <a href="https://realpython.com/python-sql-libraries/#postgresql">PostgreSQL</a>, <a href="https://realpython.com/python-sqlite-sqlalchemy/">SQLite</a></li>
</ul>
<p>更大的应用程序可能会选择将其后端或前端组件细分为更多的微服务，负责身份验证、用户管理、订单处理、支付或消息传递等。</p>
<p>为了帮助管理并在某种程度上编排此类应用程序的多个 Docker 容器，您可以使用 Docker Compose。它是一种在 Docker 之上运行的工具，可简化运行多容器 Docker 应用程序。 Docker Compose 允许您根据相互依赖的服务及其配置和要求来定义您的应用程序。然后它将协调它们并将它们作为一个连贯的应用程序运行。</p>
<blockquote>
<p>注意：容器编排自动化分布式应用程序的部署、扩展和配置管理。虽然 Docker Compose 可以帮助进行基本形式的编排，但您最好在更复杂的大型系统中使用 Kubernetes 等工具。</p>
</blockquote>
<p>您将使用 Docker Compose 以声明方式描述您的多容器页面跟踪器应用程序，以及它的服务、网络和卷，使用单个配置文件。通过这样做，您将能够跟踪更改并将您的应用程序部署到任何环境。</p>
<p>不过，在深入研究之前，请确保您的计算机上安装了 Docker Compose。</p>
<h3 id="在您的计算机上设置-docker-compose">在您的计算机上设置 Docker Compose</h3>
<p>如果您按照有关设置 Docker Desktop 的说明进行操作，那么您应该已经安装了 Docker Compose。在您的终端中运行以下命令以确认这一点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker compose version
</span></span><span class="line"><span class="cl">Docker Compose version v2.17.2
</span></span></code></pre></div><p>使用捆绑了 Docker Compose 和一些其他组件的 Docker Desktop，目前是在 macOS 和 Windows 上获取 Docker Compose 的推荐方式。如果您使用的是 Linux，那么您可以尝试通过手动安装 Compose 插件或从您的发行版的软件包存储库安装替代路径。不幸的是，此方法可能不适用于最新和推荐的 Docker Compose 版本。</p>
<blockquote>
<p>注意：在过去，Docker Compose 是一个独立于 Docker 单独维护的项目。它最初是作为 Python 脚本实现的，最终被重写为 Go。</p>
<p>要使用 Docker Compose，您必须在命令行中调用 <code>docker-compose</code> （带连字符）可执行文件。但是，它现在已集成到 Docker 平台中，因此您可以将 Docker Compose 作为 <code>docker compose</code> 插件调用。这两个命令的工作原理应该相同，因为该插件是一种直接替代品。</p>
</blockquote>
<p>一旦您确认 Docker Compose 在您的终端中可用，您就可以开始了！</p>
<h3 id="定义多容器-docker-应用程序">定义多容器 Docker 应用程序</h3>
<p>由于您将定义一个多容器 Docker 应用程序，该应用程序可能会在未来增长以包含更多服务，因此有必要重新安排项目中的文件夹结构。在项目根文件夹中创建一个名为 <code>web/</code> 的新子文件夹，您将在其中存储与 Flask Web 服务相关的所有文件。</p>
<p>您的虚拟环境也属于这个新的子文件夹，因为其他服务可能是用完全外国的编程语言（如 C++ 或 Java）实现的。不幸的是，移动 <code>venv/</code> 文件夹可能会破坏相应激活脚本中硬编码的绝对路径。因此，移除旧的虚拟环境并在 <code>web/</code> 子文件夹中创建一个新的虚拟环境以确保安全：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> PS&gt; deactivate
</span></span><span class="line"><span class="cl">PS&gt; <span class="nb">cd</span> page-tracker<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>PS&gt; rmdir venv<span class="se">\ </span>/s
</span></span><span class="line"><span class="cl">PS&gt; python -m venv web<span class="se">\v</span>env<span class="se">\ </span>--prompt page-tracker
</span></span><span class="line"><span class="cl">PS&gt; web<span class="se">\v</span>env<span class="se">\S</span>cripts<span class="se">\a</span>ctivate
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> PS&gt; python -m pip install --upgrade pip
</span></span></code></pre></div><p>Linux + MacOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ deactivate
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> page-tracker/
</span></span><span class="line"><span class="cl">$ rm -rf venv/
</span></span><span class="line"><span class="cl">$ python3 -m venv web/venv/ --prompt page-tracker
</span></span><span class="line"><span class="cl">$ <span class="nb">source</span> web/venv/bin/activate
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip install --upgrade pip
</span></span></code></pre></div><p>然后，将 Flask 应用程序移动到新的 <code>web/</code> 子文件夹，只留下 <code>.git/</code> 文件夹、 <code>.gitignore</code> 和任何其他与编辑器相关的配置文件。您可以将它们保存在项目根文件夹中，因为它们对项目中所有可能的服务都是通用的。之后，您的项目结构应如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">page-tracker/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── web/
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   ├── src/
</span></span><span class="line"><span class="cl">│   │   └── page_tracker/
</span></span><span class="line"><span class="cl">│   │       ├── __init__.py
</span></span><span class="line"><span class="cl">│   │       └── app.py
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   ├── test/
</span></span><span class="line"><span class="cl">│   │   ├── e2e/
</span></span><span class="line"><span class="cl">│   │   │   └── test_app_redis_http.py
</span></span><span class="line"><span class="cl">│   │   │
</span></span><span class="line"><span class="cl">│   │   ├── integration/
</span></span><span class="line"><span class="cl">│   │   │   └── test_app_redis.py
</span></span><span class="line"><span class="cl">│   │   │
</span></span><span class="line"><span class="cl">│   │   ├── unit/
</span></span><span class="line"><span class="cl">│   │   │   └── test_app.py
</span></span><span class="line"><span class="cl">│   │   │
</span></span><span class="line"><span class="cl">│   │   └── conftest.py
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   ├── venv/
</span></span><span class="line"><span class="cl">│   │
</span></span><span class="line"><span class="cl">│   ├── constraints.txt
</span></span><span class="line"><span class="cl">│   ├── Dockerfile
</span></span><span class="line"><span class="cl">│   ├── Dockerfile.dev
</span></span><span class="line"><span class="cl">│   └── pyproject.toml
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── .git/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── .gitignore
</span></span><span class="line"><span class="cl">└── docker-compose.yml
</span></span></code></pre></div><p>上面文件树的一个新添加是位于顶层的 <code>docker-compose.yml</code> 文件，您现在将编写该文件。</p>
<p>Docker Compose 使用 YAML 格式以声明方式描述应用程序的服务，这些服务将成为 Docker 容器、它们的网络、卷、端口映射、环境变量等。</p>
<p>以前，您必须手动定义应用程序架构的每一部分，但使用 Docker Compose，您可以在一个文件中定义所有内容。该工具甚至可以为您拉取或构建镜像！</p>
<blockquote>
<p>注意：如果您以前从未使用过 YAML，但熟悉 JSON，那么它的语法应该很熟悉，因为 YAML 是 JSON 的超集。查看 YAML：Python 中丢失的电池了解更多详细信息。</p>
</blockquote>
<p>Docker Compose 文件是您定义服务、网络和卷的地方。这是完整的 <code>docker-compose.yml</code> 文件，它反映了您在前面部分中为页面跟踪器应用程序手动定义的所有内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># docker-compose.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;redis:7.0.10-bullseye&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;redis-volume:/data&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w"> </span><span class="l">./web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;80:5000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">REDIS_URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;redis://redis-service:6379&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">redis-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">backend-network</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis-volume</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></div><p>你现在要逐行剖析它：</p>
<ul>
<li>第 3 行标志着两个服务 <code>redis-service</code> 和 <code>web-service</code> 声明的开始，它们包含一个多容器 Docker 应用程序。请注意，您可以扩展每个服务，因此 Docker 容器的实际数量可能大于此处声明的服务数量。</li>
<li>第 4 行到第 9 行定义了 <code>redis-service</code> 的配置，包括要运行的 Docker 镜像、要连接的网络以及要挂载的卷。</li>
<li>第 10 到 19 行通过指定包含要构建的 Dockerfile 的文件夹、要公开的端口、要设置的环境变量以及要连接的网络来配置 <code>web-service</code> 。 <code>depends_on</code> 语句要求 <code>redis-service</code> 在 <code>web-service</code> 开始之前可用。</li>
<li>第 21 和 22 行为您的两个服务定义了一个虚拟网络。此声明并非绝对必要，因为 Docker Compose 会自动创建容器并将其连接到新网络。但是，如果需要，显式网络声明可以让您更好地控制其设置和地址范围。</li>
<li>第 24 和 25 行为您的 Redis 服务器定义了一个持久卷。</li>
</ul>
<p>上面配置文件中的一些值被引用，而另一些则没有。这是针对旧 YAML 格式规范中已知怪癖的预防措施，该规范将某些字符视为特殊字符，如果它们出现在未加引号的字符串中。例如，冒号 ( <code>:</code> ) 可以使一些 YAML 解析器将文字解释为六十进制数字而不是字符串。</p>
<blockquote>
<p>注意：此文件符合最新和推荐的 Compose 规范，该规范不再需要顶级 <code>version</code> 字段，而早期的模式版本需要。阅读官方文档中的 Compose 文件版本控制以了解更多信息。</p>
</blockquote>
<p>停止任何可能仍在运行的与您的项目相关的 Docker 容器，并立即删除它们的关联资源：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker stop -t <span class="m">0</span> web-service redis-service
</span></span><span class="line"><span class="cl">$ docker container rm web-service redis-service
</span></span><span class="line"><span class="cl">$ docker network rm page-tracker-network
</span></span><span class="line"><span class="cl">$ docker volume rm redis-volume
</span></span></code></pre></div><p>这将删除您之前创建的两个容器、一个网络和一个卷。请注意，您可以将 <code>docker container rm</code> 命令缩写为更短的 <code>docker rm</code> 别名。</p>
<p>要优雅地删除容器，您应该首先停止它。默认情况下， <code>docker stop</code> 命令将在终止容器之前等待十秒钟，使其有足够的时间在退出之前执行任何必要的清理操作。因为您的 Flask 应用程序在停止运行后不需要做任何事情，您可以使用 <code>-t</code> 选项将此超时设置为零秒，这将立即终止列出的容器。</p>
<p>要删除所有关联的 Docker 镜像标签，您必须首先找到它们的公共标识符：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker images
</span></span><span class="line"><span class="cl">REPOSITORY                TAG              IMAGE ID       CREATED      SIZE
</span></span><span class="line"><span class="cl">page-tracker              dde1dc9          9cb2e3233522   <span class="m">1</span> hour ago   204MB
</span></span><span class="line"><span class="cl">page-tracker              latest           9cb2e3233522   <span class="m">1</span> hour ago   204MB
</span></span><span class="line"><span class="cl">realpython/page-tracker   dde1dc9          9cb2e3233522   <span class="m">1</span> hour ago   204MB
</span></span><span class="line"><span class="cl">realpython/page-tracker   latest           9cb2e3233522   <span class="m">1</span> hour ago   204MB
</span></span><span class="line"><span class="cl"><span class="o">(</span>...<span class="o">)</span>
</span></span></code></pre></div><p>在这种情况下， <code>page-tracker</code> 镜像的所有标签共有的短 ID 等于 <code>9cb2e3233522</code> ，您可以使用它来取消标记和删除底层 Docker 镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker rmi -f 9cb2e3233522
</span></span><span class="line"><span class="cl">Untagged: page-tracker:dde1dc9
</span></span><span class="line"><span class="cl">Untagged: page-tracker:latest
</span></span><span class="line"><span class="cl">Untagged: realpython/page-tracker:dde1dc9
</span></span><span class="line"><span class="cl">Untagged: realpython/page-tracker:latest
</span></span><span class="line"><span class="cl">Deleted: sha256:9cb2e3233522e020c366880867980232d747c4c99a1f60a61b9bece40...
</span></span></code></pre></div><p><code>docker rmi</code> 命令是 <code>docker image rm</code> 和 <code>docker image remove</code> 的别名。</p>
<blockquote>
<p>注意：如果你想从头开始使用全新的 Docker 环境，并且不介意丢失数据，那么你可以使用以下命令修剪所有系统资源：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker system prune --all --volumes
</span></span></code></pre></div><p>警告！这将删除您到目前为止使用 Docker 创建的所有内容，包括可能在本教程之外创建的资源，因此请谨慎操作。</p>
</blockquote>
<p>确认删除 Docker 资源后，您可以通过一条指令立即恢复您的页面跟踪器应用程序。在与 <code>docker-comopse.yml</code> 文件相同的文件夹中发出以下命令以避免指定其路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker compose up -d
</span></span><span class="line"><span class="cl"><span class="o">(</span>...<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Running 4/4
</span></span><span class="line"><span class="cl"> ⠿ Network page-tracker_backend-network    Created                      0.1s
</span></span><span class="line"><span class="cl"> ⠿ Volume <span class="s2">&#34;page-tracker_redis-volume&#34;</span>      Created                      0.0s
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-redis-service-1  Started                      1.0s
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-web-service-1    Started                      1.3s
</span></span></code></pre></div><p>第一次运行此命令时，可能需要更长的时间，因为 Docker Compose 必须从 Docker Hub 下载 Redis 镜像并再次从 Dockerfile 构建另一个镜像。但在那之后，它应该感觉几乎是瞬间的。</p>
<p>您可以在上面的输出中看到 Docker Compose 创建了请求的网络、卷和两个容器。请注意，它始终在此类资源名称前加上您的 Docker Compose 项目名称前缀，该名称默认为包含您的 <code>docker-compose.yml</code> 文件的文件夹名称。在这种情况下，项目名称是 <code>page-tracker</code> 。此功能有助于防止不同 Docker Compose 项目的资源名称发生冲突。</p>
<p>此外，如果您想启动同一服务的多个副本，Docker Compose 会将连续的数字附加到您的容器名称中。</p>
<p>Docker Compose 插件提供了几个有用的命令来管理您的多容器应用程序。这里只是其中的几个：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker compose ps
</span></span><span class="line"><span class="cl">NAME                           COMMAND                  SERVICE        ...
</span></span><span class="line"><span class="cl">page-tracker-redis-service-1   <span class="s2">&#34;docker-entrypoint.s…&#34;</span>   redis-service  ...
</span></span><span class="line"><span class="cl">page-tracker-web-service-1     <span class="s2">&#34;flask --app page_tr…&#34;</span>   web-service    ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker compose logs --follow
</span></span><span class="line"><span class="cl"><span class="o">(</span>...<span class="o">)</span>
</span></span><span class="line"><span class="cl">page-tracker-web-service-1    <span class="p">|</span>  * Running on all addresses <span class="o">(</span>0.0.0.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">page-tracker-web-service-1    <span class="p">|</span>  * Running on http://127.0.0.1:5000
</span></span><span class="line"><span class="cl">page-tracker-web-service-1    <span class="p">|</span>  * Running on http://172.20.0.3:5000
</span></span><span class="line"><span class="cl">page-tracker-web-service-1    <span class="p">|</span> Press CTRL+C to quit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker compose stop
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Running 2/2
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-web-service-1    Stopped                     10.3s
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-redis-service-1  Stopped                      0.4s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker compose restart
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Running 2/2
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-redis-service-1  Started                      0.4s
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-web-service-1    Started                      0.5s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker compose down --volumes
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Running 4/4
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-web-service-1    Removed                      6.0s
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-redis-service-1  Removed                      0.4s
</span></span><span class="line"><span class="cl"> ⠿ Volume page-tracker_redis-volume        Removed                      0.0s
</span></span><span class="line"><span class="cl"> ⠿ Network page-tracker_backend-network    Removed                      0.1s
</span></span></code></pre></div><p>例如，您可以列出 Docker Compose 项目中的容器而不显示任何其他容器。使用相关命令，您可以查看它们的实时输出、停止、启动和重新启动它们。</p>
<p>完成项目后，您可以将其拆除，Docker Compose 将删除关联的容器和网络。但是，它不会触及持久数据存储，除非您使用 <code>--volumes</code> 标志明确请求。</p>
<p>您可能已经在日志中注意到一件事，Flask 已经抱怨了很长时间，那就是使用其不安全、低效且不稳定的开发 Web 服务器来运行您的应用程序。您现在将使用 Docker Compose 来解决这个问题。</p>
<h3 id="将-flask-的开发-web-服务器替换为-gunicorn">将 Flask 的开发 Web 服务器替换为 Gunicorn</h3>
<p>Docker 允许您在运行新容器时覆盖 Dockerfile 中列出的默认命令或入口点。例如， <code>redis</code> 镜像中的默认命令启动 Redis 服务器。但是，您之前使用相同的镜像在另一个容器中启动 <code>redis-cli</code> 。同样，您可以在 <code>docker-compose.yml</code> 文件中为您的 Docker 镜像指定自定义命令。您将使用此功能通过生产级 Web 服务器运行 Flask。</p>
<blockquote>
<p>注意：有时，您想要调查现有容器。要在正在运行的容器中运行命令而不是启动新容器，可以使用 <code>docker exec</code> 命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker <span class="nb">exec</span> -it -u root page-tracker-web-service-1 /bin/bash
</span></span><span class="line"><span class="cl">root@6e23f154a5b9:/home/realpython#
</span></span></code></pre></div><p>通过运行 Bash 可执行文件 <code>/bin/bash</code> 并使用 <code>-u</code> 选项指定用户，您可以有效地访问容器，就像通过 SSH 登录远程服务器一样。 <code>-it</code> 标志是运行交互式终端会话所必需的。否则，该命令将立即退出。</p>
</blockquote>
<p>有几个选项可以替换 Flask 的内置开发 Web 服务器，官方文档在部署到生产时推荐使用这些选项。最受欢迎的选择之一是 Gunicorn (Green Unicorn)，它是 Web 服务器网关接口 (WSGI) 协议的纯 Python 实现。要开始使用它，您必须将 <code>gunicorn</code> 包添加为项目中的另一个依赖项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="c"># web/pyproject.toml</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">build-system</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">requires</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;setuptools&gt;=67.0.0&#34;</span><span class="p">,</span> <span class="s2">&#34;wheel&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">build-backend</span> <span class="p">=</span> <span class="s2">&#34;setuptools.build_meta&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;page-tracker&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;1.0.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dependencies</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Flask&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;gunicorn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;redis&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">.</span><span class="nx">optional-dependencies</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">dev</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;bandit&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;black&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;flake8&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;isort&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pylint&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pytest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pytest-timeout&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;requests&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>请注意，您将 <code>gunicorn</code> 添加到常规依赖项列表中，因为它将成为您应用程序不可或缺的一部分。您希望在构建最终 Docker 镜像后它可用。</p>
<p>像往常一样，在本地重新安装您的 <code>page-tracker</code> 包并将其依赖项固定在约束文件中。请记住，您可能需要先激活您的虚拟环境，因为您之前在 <code>web/</code> 子文件夹中重新创建了它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip install --editable <span class="s2">&#34;web/[dev]&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pip freeze --exclude-editable &gt; web/constraints.txt
</span></span></code></pre></div><p>请注意，当您从项目的根文件夹中执行这些命令时，它们看起来会略有不同。在这种情况下，您必须将指示当前工作目录的点 ( <code>.</code> ) 替换为您的 <code>web/</code> 子文件夹的路径。</p>
<p>现在您已经安装了 Gunicorn，您可以开始使用它了。通过在 <code>web-service</code> 键下添加新的 <code>command</code> 属性来修改 <code>docker-compose.yml</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># docker-compose.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;redis:7.0.10-bullseye&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;redis-volume:/data&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w"> </span><span class="l">./web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;80:8000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">REDIS_URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;redis://redis-service:6379&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">redis-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;gunicorn page_tracker.app:app --bind 0.0.0.0:8000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">backend-network</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis-volume</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></div><p>此命令将优先于 Dockerfile 的默认命令，后者依赖于 Flask 的开发服务器。从现在开始，Docker Compose 将改为使用 Gunicorn 运行您的 Web 应用程序。为了显示差异，您将在端口 <code>8000</code> 而不是 <code>5000</code> 上运行服务器，因此您还更改了端口映射。</p>
<p>通过在主机上公开端口 <code>80</code> ，您仍然可以在不指定端口号的情况下访问 <code>http://localhost</code> 上的应用程序。</p>
<p>不要忘记提交更改以将您的工作保存在本地 Git 存储库中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git add .
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;Refactor folders and add Docker Compose&#34;</span>
</span></span></code></pre></div><p>进行小而频繁的提交总是一个好主意，这样您就可以随着时间的推移跟踪增量更改并更好地了解您的工作历史。如果您不确定如何描述您的提交，请尝试解释为什么您进行了特定更改，因为 Git 已经跟踪更改的内容。</p>
<p>好的。如果您现在尝试重新启动 Docker Compose 应用程序，那么它将失败，因为 Docker 在容器启动期间找不到请求的 <code>gunicorn</code> 可执行文件。您已经添加了您之前构建的 Docker 镜像中缺少的额外依赖项。因此，你必须告诉 Docker Compose 重建你的镜像。您可以使用以下任一命令执行此操作：</p>
<ul>
<li>docker compose build</li>
<li>docker compose up &ndash;build</li>
</ul>
<p>在第一种情况下，您会明确告诉 Docker 预先构建镜像。每当您更改项目依赖项或 Dockerfile 时，您都必须再次运行 <code>docker compose build</code> 以应用这些更改。</p>
<p>在第二种情况下， <code>docker compose up --build</code> 将指示 Docker 在每次启动容器时即时构建镜像。如果您试图快速迭代对源代码或 Dockerfile 的更改，这将特别有用。</p>
<p>无论哪种方式，这两个命令都应该在启动相应容器之前在任何受影响的 Docker 镜像中成功构建修改后的层。然后，您可以放心，当您的 Docker Compose 应用程序再次启动时，所有依赖项都将可用。</p>
<p>继续并立即运行这些命令之一。</p>
<p>因为您了解如何使用 Docker Compose 来管理应用程序的服务，所以您现在可以了解如何在接近生产的环境中运行端到端测试。</p>
<h3 id="针对服务运行端到端测试">针对服务运行端到端测试</h3>
<p>在第一次尝试中，您将从主机本地执行端到端测试。请注意，必须可以从您的本地网络访问所有必要的服务才能使其正常工作。</p>
<p>虽然这并不理想，因为您不想向公众公开任何敏感服务（如数据库），但稍后您将了解更好的方法。同时，您可以更新您的 <code>docker-compose.yml</code> 配置以转发 Redis 端口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># docker-compose.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;redis:7.0.10-bullseye&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;6379:6379&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;redis-volume:/data&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w"> </span><span class="l">./web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;80:8000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">REDIS_URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;redis://redis-service:6379&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">redis-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;gunicorn page_tracker.app:app --bind 0.0.0.0:8000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">backend-network</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis-volume</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></div><p>如果您有一个用于 <code>redis-service</code> 的现有 Docker 容器，那么您需要先删除该容器，即使它当前已停止，以反映新的端口转发规则。幸运的是，Docker Compose 会自动检测 <code>docker-compose.yml</code> 文件中的更改，并在您发出 <code>docker compose up</code> 命令时根据需要重新创建容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker compose up -d
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Running 2/2
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-redis-service-1  Started                      1.0s
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-web-service-1    Started                      1.2s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker compose ps
</span></span><span class="line"><span class="cl">NAME                           ...   PORTS
</span></span><span class="line"><span class="cl">page-tracker-redis-service-1   ...   0.0.0.0:6379-&gt;6379/tcp
</span></span><span class="line"><span class="cl">page-tracker-web-service-1     ...   0.0.0.0:80-&gt;8000/tcp
</span></span></code></pre></div><p>列出新容器后，您应该会看到 Redis 容器上的端口 <code>6379</code> 被转发到主机。有了这个，您现在可以使用安装在开发机器上的虚拟环境中的 <code>pytest</code> 运行端到端测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">(</span>page-tracker<span class="o">)</span> $ python -m pytest web/test/e2e/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --flask-url http://localhost <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --redis-url redis://localhost:6379
</span></span></code></pre></div><p>由于端口映射，您可以使用 localhost 连接到容器，而无需知道它们各自的 IP 地址。</p>
<blockquote>
<p>注意：如果您的测试成功，那么它将覆盖 Redis 中的页面浏览量。根据经验，您永远不应该在带有客户数据的实时环境中运行测试，以避免破坏它。通常建议使用带有虚假或匿名数据的暂存或认证环境来安全地执行全面的端到端测试。</p>
</blockquote>
<p>要模拟故障，您可以在测试执行期间暂时暂停容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker compose pause
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Running 2/0
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-web-service-1    Paused                       0.0s
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-redis-service-1  Paused                       0.0s
</span></span></code></pre></div><p>这将使 Redis 和您的 Flask 应用程序无法再访问。与停止容器不同，暂停它不会终止底层进程，因此暂停会保持容器的状态并导致更快的恢复。</p>
<p>之后不要忘记取消暂停容器以避免以后出现错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker compose unpause
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Running 2/0
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-web-service-1    Unpaused                     0.0s
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-redis-service-1  Unpaused                     0.0s
</span></span></code></pre></div><p>或者，您可以从同一网络上的另一个容器运行它，而不是在本地针对公开服务运行端到端测试。您可以手动制作这样的容器。</p>
<p>然而，最近版本的 Docker Compose 提供了一个更优雅的解决方案，它允许您有条件地运行服务的子集。为此，您可以将所需的服务分配给可按需激活的自定义配置文件。</p>
<p>首先，打开你的 <code>docker-compose.yml</code> 文件并从 Redis 中删除端口转发，因为你不想再将它暴露给外界。然后，基于您的旧 <code>Dockerfile.dev</code> 添加一个新服务，它捆绑了测试框架、测试装置和您的测试代码。您将使用相应的 Docker 镜像来执行端到端测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w"> </span><span class="c"># docker-compose.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;redis:7.0.10-bullseye&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;redis-volume:/data&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w"> </span><span class="l">./web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;80:8000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">REDIS_URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;redis://redis-service:6379&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">redis-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;gunicorn page_tracker.app:app --bind 0.0.0.0:8000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">test-service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">testing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">context</span><span class="p">:</span><span class="w"> </span><span class="l">./web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dockerfile</span><span class="p">:</span><span class="w"> </span><span class="l">Dockerfile.dev</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">REDIS_URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;redis://redis-service:6379&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">FLASK_URL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;http://web-service:8000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">backend-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">redis-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">web-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      sh -c &#39;python -m pytest test/e2e/ -vv
</span></span></span><span class="line"><span class="cl"><span class="sd">      --redis-url $$REDIS_URL
</span></span></span><span class="line"><span class="cl"><span class="sd">      --flask-url $$FLASK_URL&#39;</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">backend-network</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis-volume</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></div><p><code>docker-compose.yml</code> 文件的大部分内容保持不变，因此您可以将注意力集中在突出显示的行上：</p>
<ul>
<li>
<p>第 22 行定义了您的新服务将属于的配置文件列表。只有一个配置文件，称为 <code>testing</code> ，您将启用它来运行测试。</p>
</li>
<li>
<p>第 24 到 26 行指定包含要构建的 Dockerfile 的目录的路径。由于该文件有一个非标准名称，您需要明确提供它。</p>
</li>
<li>
<p>第 27 到 29 行定义了两个环境变量，您的测试将使用它们连接到在 Gunicorn 服务器后面运行的 Redis 和 Flask。请注意，您使用 Docker Compose 服务名称作为主机名。</p>
</li>
<li>
<p>第 30 和 31 行将服务连接到与其他两个服务相同的网络。</p>
</li>
<li>
<p>第 32 到 34 行确保 Redis 和 Flask 在端到端测试之前启动。</p>
</li>
<li>
<p>第 35 到 38 行定义了在服务启动时运行的命令。请注意，您使用 YAML 的多行文字折叠 ( <code>&gt;</code> ) 以更具可读性的方式格式化长 shell 命令。</p>
</li>
</ul>
<p>因为 Docker Compose 可以访问您主机的 shell，所以它会尝试插入对环境变量的任何引用，例如 <code>$REDIS_URL</code> 或 <code>$FLASK_URL</code> ，一旦文件被解析，就会出现在您的 <code>docker-compose.yml</code> 中。不幸的是，这些变量很可能尚未定义。您通过服务的 <code>environment</code> 部分指定它们，这意味着您的容器稍后将获取这些变量。</p>
<p>要禁用 Docker Compose 过早替换环境变量，您可以使用两个美元符号 ( <code>$$</code> ) 转义美元符号。这反过来会在将在生成的容器中执行的命令中生成文字字符串 <code>$REDIS_URL</code> 和 <code>$FLASK_URL</code> 。要在容器启动时插入这些变量，您必须将整个命令用单引号 ( <code>'</code> ) 括起来，并将其传递给 shell ( <code>sh</code> )。</p>
<p>当您使用 Docker Compose 启动多容器应用程序时，只有不属于任何配置文件的核心服务会启动。如果您还希望启动分配给一个或多个配置文件的服务，则必须使用 <code>--profile</code> 选项列出这些配置文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker compose --profile testing up -d
</span></span><span class="line"><span class="cl"><span class="o">[</span>+<span class="o">]</span> Running 3/3
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-redis-service-1  Running                      0.0s
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-web-service-1    Running                      0.0s
</span></span><span class="line"><span class="cl"> ⠿ Container page-tracker-test-service-1   Started                      0.6s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker compose ps -a
</span></span><span class="line"><span class="cl">NAME                           ...   SERVICE             STATUS       ...
</span></span><span class="line"><span class="cl">page-tracker-redis-service-1   ...   redis-service       running      ...
</span></span><span class="line"><span class="cl">page-tracker-test-service-1    ...   test-service        exited <span class="o">(</span>0<span class="o">)</span>   ...
</span></span><span class="line"><span class="cl">page-tracker-web-service-1     ...   web-service         running      ...
</span></span></code></pre></div><p>请注意，这是 <code>docker compose</code> 命令的一个选项，而不是它的 <code>up</code> 子命令，因此请注意参数顺序。输出显示启动了一个额外的服务，但是当您调查它时，您会注意到 <code>test-service</code> 以成功状态零快速退出。</p>
<p>要显示有关此服务的更多信息，您可以查看其日志：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker compose logs test-service
</span></span><span class="line"><span class="cl"><span class="o">=============================</span> <span class="nb">test</span> session <span class="nv">starts</span> <span class="o">==========================</span>
</span></span><span class="line"><span class="cl">platform linux -- Python 3.11.2, pytest-7.2.2, pluggy-1.0.0 -- /home/realp..
</span></span><span class="line"><span class="cl">cachedir: .pytest_cache
</span></span><span class="line"><span class="cl">rootdir: /home/realpython
</span></span><span class="line"><span class="cl">plugins: timeout-2.1.0
</span></span><span class="line"><span class="cl">collecting ... collected <span class="m">1</span> item
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">test/e2e/test_app_redis_http.py::test_should_update_redis ... PASSED <span class="o">[</span>100%<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">==============================</span> <span class="m">1</span> passed in 0.10s <span class="o">===========================</span>
</span></span></code></pre></div><p>这将向您显示有关该服务的详细信息，包括 <code>pytest</code> 报告形式的测试结果，以及可能发生的任何错误。在这种情况下，测试成功通过。请注意，为简洁起见，对上面的输出进行了编辑。</p>
<p>到目前为止，您已经使用 Git 对源代码进行了版本控制。您自动化了各种级别的测试并使用 Docker 构建了您的应用程序。最后，您使用 Docker Compose 编排了多个容器。</p>
<p>此时，您已准备好继续下一步，即使用 Docker 构建持续集成管道。</p>
<h2 id="定义一个基于-docker-的持续集成管道">定义一个基于 Docker 的持续集成管道</h2>
<p>持续集成 (CI) 的目标是通过尽可能频繁地集成团队中多个开发人员的代码更改来实现更快、更可预测的软件发布。</p>
<p>在过去，集成是一项重大任务，通常需要数周甚至数月才能完成，有时还需要专门的集成工程师团队。</p>
<p>这种方法的问题是团队中的每个人都在自己的项目副本上工作。集成阶段延迟的时间越长，项目的不同版本就越有可能出现分歧，从而难以将它们结合起来。</p>
<p>在某些情况下，集成可能比项目的实际开发花费更多的时间！</p>
<p>连续这个词意味着集成应该经常进行，以最小化更改的范围并降低将缺陷引入代码库的风险。团队每天至少整合一次开发人员的工作，最好是一天多次，这已成为标准做法。</p>
<p>为了使这成为可能，持续集成需要构建和测试自动化以及具有相对较小功能的短期代码分支来实现。功能切换可以帮助实现需要更长时间开发的更大功能。此外，在尝试集成更改失败后修复失败的构建应该是团队的优先事项，以保持流程真正连续。</p>
<p>要在您的项目中引入持续集成，您需要以下元素：</p>
<ul>
<li>版本控制系统</li>
<li>分支策略</li>
<li>自动构建</li>
<li>自动化测试</li>
<li>持续集成服务器</li>
<li>频繁集成</li>
</ul>
<p>像 Git 这样的版本控制系统允许多人同时处理同一段代码。根据您的团队结构、经验和其他因素，您可以选择不同的源代码控制分支模型，也称为工作流。一些最受欢迎的包括：</p>
<ul>
<li><a href="https://trunkbaseddevelopment.com/">Trunk-Based Development</a></li>
<li><a href="https://docs.github.com/en/get-started/quickstart/github-flow">GitHub Flow</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow">Forking Workflow</a></li>
<li><a href="https://martinfowler.com/articles/branching-patterns.html#release-branch">Release Branching</a></li>
<li><a href="https://nvie.com/posts/a-successful-git-branching-model/">Git Flow</a></li>
</ul>
<p>各有利弊，适用于不同的场景。例如，分叉策略在开源项目中运作良好，因为它允许任何人在没有特别许可的情况下做出贡献。在本教程中，您将使用称为 GitHub Flow 的流行功能分支工作流程。它只有一个长期存在的主线或主干，传统上称为 master 分支，您可以从中分支出几个短期存在的功能分支。</p>
<blockquote>
<p>注意：尽管使用术语 <code>master</code> 来指代主分支的传统由来已久，但 GitHub 最近宣布将其默认分支名称更改为 <code>main</code> 以更好地反映其目的并避免冒犯性语言。</p>
<p>同时，当您初始化一个新的存储库时，Git 会继续使用 <code>master</code> ，这在您尝试同步本地和远程存储库时偶尔会出现问题。因此，您将坚持在本教程中使用 <code>master</code> 来保持简单，但如果您想更改默认分支名称，请随时采取额外的步骤。您可以在 GitHub 存储库设置中调整默认分支名称。</p>
</blockquote>
<p>虽然您会发现几种不同的方法来实现与 GitHub Flow 的持续集成，但这些是您将针对 Docker 应用程序遵循的步骤：</p>
<ul>
<li>将最新版本的主线获取到您的计算机。</li>
<li>从主线创建一个功能分支。</li>
<li>打开拉取请求以从其他人那里获得早期反馈。</li>
<li>继续在你的功能分支上工作。</li>
<li>经常获取主线，将其合并到您的功能分支并在本地解决任何潜在的冲突。</li>
<li>在本地分支上构建、lint 和测试代码。</li>
<li>只要本地构建和测试成功，就推送您的更改。</li>
<li>每次推送时，检查针对您的功能分支在 CI 服务器上运行的自动化测试。</li>
<li>在再次推送代码之前，在本地重现并修复任何已识别的问题。</li>
<li>完成并通过所有测试后，请求一名或多名同事审查您的更改。</li>
<li>应用他们的反馈，直到审阅者批准您的更新并且所有测试在推送您的最新更改后通过 CI 服务器。</li>
<li>通过将功能分支合并到主线来关闭拉取请求。</li>
<li>对照主线检查 CI 服务器上运行的自动化测试，并集成功能分支的更改。</li>
<li>调查并修复可能发现的任何问题，例如，由于在您上次推送和合并之间其他人向主线引入了新更新。</li>
</ul>
<p>此列表非常全面，但没有适合所有人的单一持续集成流程。您甚至可以比这更彻底，例如，使用 Terraform 或 GitHub Codespaces 提供专用的暂存环境，并将您的功能分支部署到云中，以便在关闭拉取请求之前进行额外的手动测试。但是，为每个拉取请求启动一个新环境可能不符合成本效益。</p>
<blockquote>
<p>注意：软件工程团队通常将持续集成与持续交付结合起来，形成一个称为 CI/CD 的流程。持续交付是持续集成的扩展，它增加了额外的步骤来将经过验证和集成的构建部署到生产环境。</p>
<p>虽然持续交付提供了将构建自动部署到生产环境的技术手段，但它仍然需要业务决策和手动触发。</p>
<p>不要混淆持续交付和持续部署，后者是一个完全自动化的过程，无需人工干预即可将应用程序部署到生产环境。在持续部署中，一旦你推送代码，它就会被测试并集成到主线中，然后最终进入生产环境。</p>
<p>但是，要成功做到这一点，您需要广泛的测试范围和对自动化过程的信任。</p>
</blockquote>
<p>值得强调的重要一点是涉及的测试量。您应该在本地和持续集成服务器上测试您的功能分支，然后针对集成主线再次运行测试。</p>
<p>这是为了确保您的功能正常工作并且不会破坏主线。</p>
<p>您有许多选项可以为您的 Docker 应用程序设置持续集成服务器，包括在线和自托管。流行的选择包括 CircleCI、Jenkins 和 Travis。在本教程中，您将使用 GitHub Actions，这是 GitHub 提供的免费 CI 解决方案。</p>
<h3 id="将代码推送到-github-存储库">将代码推送到 GitHub 存储库</h3>
<p>要利用 GitHub Actions，您必须首先在 GitHub 上创建一个存储库。如果您还没有帐户，请注册，然后登录并创建一个名为 <code>page-tracker</code> 的新存储库。</p>
<p>公共存储库可以无限制地使用 GitHub Actions，而私有存储库每月可在免费层获得 2000 分钟和 500 兆字节的存储空间。</p>
<p>但是，在 Windows 上运行的作业将消耗比在 Linux 上多一倍的分钟数，而在 macOS 上运行的作业将消耗十倍的分钟数！您可以在官方文档中找到有关 GitHub Actions 计费的更多详细信息。</p>
<p>稍后，您将启用分支保护规则，该规则目前仅适用于免费层的公共存储库，因此最好现在就创建一个公共存储库。</p>
<p>保留建议的默认值而不使用 GitHub 的占位符文件初始化新存储库，因为您将推送现有项目。接下来，转到终端并将工作目录更改为您的 <code>page-tracker</code> 项目所在的位置。它应该已经初始化了一个本地 Git 存储库，稍后您将连接到 GitHub。但首先，将所有未决更改提交到本地存储库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   docker-compose.yml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git commit -am <span class="s2">&#34;Add a test-service to Docker Compose&#34;</span>
</span></span></code></pre></div><p>在提交任何更改之前检查存储库的状态始终是个好主意。您现在可以使用以下两个命令将本地存储库连接到 GitHub：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git remote add origin git@github.com:realpython/page-tracker.git
</span></span><span class="line"><span class="cl">$ git push -u origin master
</span></span></code></pre></div><p>确保将 <code>realpython</code> 替换为您的 GitHub 用户名。第一个命令会将您刚刚创建的 GitHub 上的远程存储库添加到您在 <code>origin</code> 别名下的本地副本。第二个命令会将本地存储库的内容推送到 GitHub。</p>
<p>之后您可以使用您的 GitHub 存储库刷新网页以确认您的文件已成功发送。当您这样做时，您将准备好使用 GitHub Actions 为您的 Docker 应用程序构建持续集成工作流程！</p>
<h3 id="学习-github-actions">学习 GitHub Actions</h3>
<p>首先，熟悉一些新术语会有所帮助。 GitHub Actions 允许您指定一个或多个由特定事件触发的工作流程，例如将代码推送到分支或打开新的拉取请求。每个工作流都可以定义许多由步骤组成的作业，这些作业将在运行器上执行。有两种类型的跑步者：</p>
<ul>
<li>GitHub 托管的运行器：Ubuntu Linux、Windows、macOS</li>
<li>自托管运行器：您拥有和维护的本地服务器</li>
</ul>
<p>在本教程中，您将只使用 GitHub 提供的最新 Ubuntu Linux 运行器。请注意，可以在多个运行器上执行相同的作业，例如检查跨平台兼容性。</p>
<p>除非您另有说明，否则一个工作流程中的作业将在不同的运行器上并行运行，这对于加快构建速度很有用。同时，您可以使一项工作依赖于其他工作。</p>
<p>使用 GitHub Actions 减少构建时间的另一种方法是启用工作流依赖缓存。</p>
<p>作业的每个步骤都由一个动作实现，该动作可以是：</p>
<ul>
<li>自定义 shell 命令或脚本</li>
<li>在另一个 GitHub 存储库中定义的 GitHub 操作</li>
</ul>
<p>有许多预定义的 GitHub 操作，您可以在 GitHub Marketplace 上浏览和查找。社区提供并维护它们。例如，有一个用于在 GitHub 上构建和推送 Docker 组织拥有的 Docker 镜像。由于有许多相互竞争的插件，有时有不止一种方法可以使用 GitHub Actions 达到预期的结果。</p>
<p>与如今与 DevOps 相关的许多工具一样，GitHub 使用 YAML 格式来配置工作流。它会在您的存储库的根文件夹中寻找一个特殊的 <code>.github/workflows/</code> 文件夹，您可以在其中放置多个 YAML 文件，每个文件对应一个不同的工作流程。此外，您可以在其中包含其他文件，例如要在运行器上执行的配置文件或自定义脚本。</p>
<p>您只会为持续集成定义一个工作流程，因此请继续创建必要的文件夹结构，其中包含一个名为 <code>ci.yml</code> 的文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">page-tracker/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── web/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── .git/
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── .github/
</span></span><span class="line"><span class="cl">│   └── workflows/
</span></span><span class="line"><span class="cl">│       └── ci.yml
</span></span><span class="line"><span class="cl">│
</span></span><span class="line"><span class="cl">├── .gitignore
</span></span><span class="line"><span class="cl">└── docker-compose.yml
</span></span></code></pre></div><p>尽管您可以使用任何您喜欢的代码编辑器为 GitHub Actions 编写工作流文件，但在这种情况下请考虑使用 GitHub 的基于 Web 的编辑器。它不仅提供通用的 YAML 语法突出显示，还提供架构验证和对可用 GitHub Actions 属性的智能建议。因此，您可以先将代码推送到 GitHub，然后使用内置编辑器直接在那里编辑您的 <code>ci.yml</code> 文件。</p>
<p>要打开 GitHub 内置的编辑器，请将 Web 浏览器导航到 <code>ci.yml</code> 文件，然后按 E 或单击铅笔图标。您现在可以开始编写 GitHub Actions 工作流文件。</p>
<h3 id="使用-github-actions-创建工作流">使用 GitHub Actions 创建工作流</h3>
<p>在编辑 <code>ci.yml</code> 文件时，为新工作流指定一个描述性名称并定义应触发它的事件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># .github/workflows/ci.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Continuous Integration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">master</span><span class="w">
</span></span></span></code></pre></div><p>将触发此工作流的两个事件是：</p>
<ol>
<li>打开或更改针对 <code>master</code> 分支的拉取请求</li>
<li>推送代码或将分支合并到 <code>master</code> 分支</li>
</ol>
<p>除了分支名称之外，您还可以为每个事件添加更多属性以缩小触发条件。例如，您可以提供充当正过滤器的文件路径模式，该模式仅在某些文件发生更改时才运行工作流。</p>
<p>毕竟，您可能不想在编辑 README 文件或更新文档后运行整个持续集成工作流程。不管怎样，你现在会让事情保持简单。</p>
<p>您的持续集成工作流程的工作是构建 Docker 镜像，使用 Docker Compose 运行端到端测试，如果一切顺利，将构建的镜像推送到 Docker Hub。</p>
<p>感谢您全面的 Dockerfile，将单元测试、各种静态代码分析工具和安全扫描集成到一个命令中。因此，您无需为 CI 工作流程编写大量 YAML。</p>
<p>GitHub Action 工作流中的几乎每项工作都是从从 GitHub 存储库中检出代码开始的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># .github/workflows/ci.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Continuous Integration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Docker image and run end-to-end tests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout code from GitHub</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v3</span><span class="w">
</span></span></span></code></pre></div><p>您指定一个标识为 <code>build</code> 的作业，它将在 GitHub 提供的最新 Ubuntu 运行器上运行。它的第一步是使用 <code>actions/checkout</code> GitHub 操作检查触发工作流的单个提交。因为 GitHub Actions 实际上是伪装的 GitHub 存储库，所以您可以在 at 符号 ( <code>@</code> ) 后提供 Git 标记或提交哈希以选择特定版本的操作。</p>
<p>作为持续集成管道的下一步，您希望在通过 Docker Compose 执行端到端测试之前为您的 Web 和测试服务构建 Docker 镜像。这次您将在运行器上运行一个 shell 命令，而不是使用现有的操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># .github/workflows/ci.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Continuous Integration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Docker image and run end-to-end tests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout code from GitHub</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Run end-to-end tests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          docker compose --profile testing up
</span></span></span><span class="line"><span class="cl"><span class="sd">          --build
</span></span></span><span class="line"><span class="cl"><span class="sd">          --exit-code-from test-service</span><span class="w">          
</span></span></span></code></pre></div><p>这两个步骤将始终运行以响应文件顶部列出的事件，即打开拉取请求或将功能分支合并到主线中。</p>
<p>此外，在成功将分支合并到主线后，当所有测试都通过时，您需要将新的 Docker 镜像推送到 Docker Hub。因此，只有当 <code>push</code> 事件触发您的工作流程时，您才会有条件地运行后续步骤。</p>
<p>但是，如何使用 GitHub Actions 安全访问 Docker Hub 而不会泄露您的秘密？你现在就会知道了。</p>
<h3 id="通过-github-actions-secrets-访问-docker-hub">通过 GitHub Actions Secrets 访问 Docker Hub</h3>
<p>早些时候，当您将其中一个 Docker 镜像从终端推送到 Docker Registry 时，您必须通过调用 <code>docker login</code> 并提供您的用户名和密码来登录 Docker Hub。此外，如果启用双因素身份验证，则必须生成具有足够权限的个人访问令牌并提供它而不是密码。</p>
<p>从自动化工作流程推送镜像的步骤相似，因此您必须先进行身份验证。您可以使用 shell 命令或预定义的 GitHub 操作来执行此操作，例如 <code>docker/login-action</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># .github/workflows/ci.yml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Continuous Integration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Docker image and run end-to-end tests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout code from GitHub</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Run end-to-end tests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          docker compose --profile testing up
</span></span></span><span class="line"><span class="cl"><span class="sd">          --build
</span></span></span><span class="line"><span class="cl"><span class="sd">          --exit-code-from test-service</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Login to Docker Hub</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">docker/login-action@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">if</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.event_name == &#39;push&#39; }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">username</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.DOCKERHUB_USERNAME }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.DOCKERHUB_TOKEN }}</span><span class="w">
</span></span></span></code></pre></div><p>您有条件地运行此步骤，方法是使用包含在美元符号和双大括号中的 JavaScript 表达式从 <code>github</code> 上下文获取事件类型。然后，您通过另一个预定义的 <code>secrets</code> 上下文和您现在将要定义的两个自定义常量提供您的秘密 Docker Hub 凭据。</p>
<p>通过单击顶部工具栏中带有齿轮图标的选项卡打开 GitHub 存储库的设置，找到并展开安全部分下的秘密和变量，然后单击操作。这将带您进入一个面板，您可以在该面板中为 GitHub Actions 运行器定义环境变量和加密机密。现在，指定您的 <code>DOCKERHUB_USERNAME</code> 和 <code>DOCKERHUB_TOKEN</code> 机密：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/secrets.b7e62f0e5830.png" alt="GitHub Actions Repository Secrets"  />
</p>
<p>请注意，这些秘密是加密的，GitHub 不会再次向您显示它们，因此请确保将它们保存在安全的地方。但是，如果您足够努力，那么您将能够恢复它们——例如，通过您工作流程中的 shell 命令。</p>
<p>当您将功能分支合并到主线时，此操作也会有条件地运行。在 <code>with</code> 部分，您指定 Dockerfile 的路径，请求推送镜像的操作，并列出镜像的标签。请注意，您再次使用 <code>github</code> 上下文来获取当前提交的哈希值，尽管是长格式。</p>
<blockquote>
<p>注意：GitHub Packages 是集成到 GitHub 中的另一项服务。它可以作为 Docker Hub 的替代品。它支持各种包类型，包括 Docker 镜像，让您可以将源代码和二进制包存储在一个地方。 <code>docker/build-push-action</code> 可以利用您的 GitHub 令牌推送到 GitHub Packages。</p>
</blockquote>
<p>此时，您的持续集成工作流已配置完毕并准备就绪。如果您还没有使用 GitHub 内置的代码编辑器，那么请记住提交并推送您的本地存储库以使更改生效：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Untracked files:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to include in what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">        .github/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nothing added to commit but untracked files present <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> to track<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git add .github/
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;Add a continuous integration workflow&#34;</span>
</span></span><span class="line"><span class="cl">$ git push
</span></span></code></pre></div><p>在下一节中，您将启用一些分支保护规则以防止任何人将他们的代码直接推送到 <code>master</code> 分支。因此，工作流中的 <code>push</code> 事件将仅适用于通过拉取请求将功能分支合并到主线中。</p>
<h3 id="启用分支保护规则">启用分支保护规则</h3>
<p>再次转到存储库的设置，单击代码和自动化部分下的分支，然后单击标记为添加分支保护规则的按钮。然后，在 Branch name pattern 字段中输入您的主线名称。如果您遵循本教程中使用的命名约定，则应在输入字段中键入 <code>master</code> ：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/rule_master.8167b2b061aa.png" alt="GitHub Repository&amp;rsquo;s Protected Branch"  />
</p>
<p>接下来，启用其正下方的一个选项，该选项显示 Require a pull request before merging。这将自动需要至少一位审阅者的批准。如果您在 GitHub 上没有其他帐户，您可以暂时取消选中此选项。否则，如果没有其他人批准，您将无法合并您的拉取请求：<img loading="lazy" src="https://files.realpython.com/media/rule_approvals.4cc8505f0715.png" alt="Require a Pull Request Before Merging"  />
</p>
<p>向下滚动一点后，您会看到一个选项，上面写着 Require status checks to pass before merging。选择它以显示更多选项。当你这样做时，检查另一个选项 Require branches to be update before merging，这将防止在你的 <code>master</code> 分支有新提交时关闭拉取请求。最后，在下面的搜索框中输入您的工作名称 <code>build</code> ：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/rule_status_check.6e4a5e464e77.png" alt="Require Status Checks to Pass Before Merging"  />
</p>
<p>现在，每个拉取请求都需要在允许合并之前通过端到端测试。</p>
<p>要在不允许管理员和其他具有提升权限的用户绕过这些规则的情况下强制执行这些规则，您可以在底部选择一个标记为不允许绕过上述设置的选项：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/rule_dont_allow.3a38d146c315.png" alt="Don&amp;rsquo;t Allow Bypassing the Above Settings"  />
</p>
<p>好的。一切就绪！如何使用您的 Docker 应用程序来测试您的持续集成工作流程？</p>
<h3 id="集成来自功能分支的更改">集成来自功能分支的更改</h3>
<p>遵循本教程前面概述的基于 Docker 的持续集成管道。首先创建一个单独的功能分支，以破坏测试的方式修改代码，提交更改并将它们推送到 GitHub：</p>
<p>Windows：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">PS&gt; git checkout -b feature/replace-emoji-face
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s1">&#39;feature/replace-emoji-face&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PS&gt; <span class="nb">cd</span> web<span class="se">\s</span>rc<span class="se">\p</span>age_tracker
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PS&gt; <span class="o">(</span>Get-Content app.py<span class="o">)</span>.replace<span class="o">(</span><span class="s1">&#39;pensive&#39;</span>, <span class="s1">&#39;thinking&#39;</span><span class="o">)</span> <span class="p">|</span> Set-Content app.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PS&gt; git commit -am <span class="s2">&#34;Replace the emoji in an error message&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>feature/replace-emoji-face 9225d18<span class="o">]</span> Replace the emoji in an error message
</span></span><span class="line"><span class="cl"> <span class="m">1</span> file changed, <span class="m">1</span> insertion<span class="o">(</span>+<span class="o">)</span>, <span class="m">1</span> deletion<span class="o">(</span>-<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PS&gt; git push --set-upstream origin feature/replace-emoji-face
</span></span><span class="line"><span class="cl">⋮
</span></span><span class="line"><span class="cl">remote: Create a pull request <span class="k">for</span> <span class="s1">&#39;feature/replace-emoji-face&#39;</span> on GitHub...
</span></span><span class="line"><span class="cl">remote:      https://github.com/realpython/page-tracker/pull/new/feature...
</span></span></code></pre></div><p>Linx + MacOS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout -b feature/replace-emoji-face
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s1">&#39;feature/replace-emoji-face&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ sed -i <span class="s1">&#39;s/pensive/thinking/g&#39;</span> web/src/page_tracker/app.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git commit -am <span class="s2">&#34;Replace the emoji in an error message&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>feature/replace-emoji-face 9225d18<span class="o">]</span> Replace the emoji in an error message
</span></span><span class="line"><span class="cl"> <span class="m">1</span> file changed, <span class="m">1</span> insertion<span class="o">(</span>+<span class="o">)</span>, <span class="m">1</span> deletion<span class="o">(</span>-<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git push --set-upstream origin feature/replace-emoji-face
</span></span><span class="line"><span class="cl">⋮
</span></span><span class="line"><span class="cl">remote: Create a pull request <span class="k">for</span> <span class="s1">&#39;feature/replace-emoji-face&#39;</span> on GitHub...
</span></span><span class="line"><span class="cl">remote:      https://github.com/realpython/page-tracker/pull/new/feature...
</span></span><span class="line"><span class="cl">⋮
</span></span></code></pre></div><p>您创建并切换到一个名为 <code>feature/replace-emoji-face</code> 的新本地分支，然后将错误消息中的表情符号从沉思脸更改为思考脸，而不更新相应的单元测试。将分支提交并推送到 GitHub 后，您可以通过突出显示行中的链接从您的功能分支打开一个新的拉取请求到 <code>master</code> 。只要您这样做，您的持续集成工作流程就会启动。</p>
<p>当 GitHub Actions 运行器完成其工作时，由于检查失败，您将无法合并您的分支：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/failed_pr2.e4e611e3f3cf.png" alt="GitHub Status Check Failed With a Conflict"  />
</p>
<p>在这种情况下，您只有一个检查对应于工作流中的 <code>build</code> 作业，您在上一节中将其配置为分支保护规则之一。您可以单击右侧的 Details 链接来调查失败检查的日志，并且您可以选择以调试模式重新运行相应的作业以收集更多数据。</p>
<p>此外，上面的屏幕截图描述了您的功能分支和目标主线之间的假设冲突。这表明其他人修改了与您相同的文件，并且他们在您修改表情符号时成功地将他们的更改与 <code>master</code> 分支集成。</p>
<p>没有自动解决此类冲突的方法，因为它涉及理解代码的逻辑并做出关于保留哪些更改以及丢弃哪些更改的主观决定。</p>
<p>解决此冲突的唯一方法是将更新后的主线合并到您本地的功能分支中，并手动整合冲突的更改。</p>
<p>即使没有任何冲突，如果主线在您的功能分支之前有几个提交，那么无论测试结果如何，您仍然必须将 <code>master</code> 中的最新更改合并到您的分支中。这是因为您之前制定的另一个分支保护规则：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/pr_update2.f48575db3caa.png" alt="GitHub Status Check Passed With an Outdated Branch"  />
</p>
<p>合并拉取请求按钮将保持灰色和禁用状态，直到您采取措施解决所有这些问题。</p>
<p>在现实生活中，您现在应该获取最新的 <code>master</code> 并将其合并到您的功能分支，必要时解决任何冲突。然后，您将更新代码以使所有测试再次通过。返回代码编辑器并使用预期的表情符号修复失败的单元测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"> # web/test/unit/test_app.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> # ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> @unittest.mock.patch(&#34;page_tracker.app.redis&#34;)
</span></span><span class="line"><span class="cl"> def test_should_handle_redis_connection_error(mock_redis, http_client):
</span></span><span class="line"><span class="cl">     # Given
</span></span><span class="line"><span class="cl">     mock_redis.return_value.incr.side_effect = ConnectionError
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     # When
</span></span><span class="line"><span class="cl">     response = http_client.get(&#34;/&#34;)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     # Then
</span></span><span class="line"><span class="cl">     assert response.status_code == 500
</span></span><span class="line"><span class="cl"><span class="gd">-    assert response.text == &#34;Sorry, something went wrong \N{pensive face}&#34;
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+    assert response.text == &#34;Sorry, something went wrong \N{thinking face}&#34;
</span></span></span></code></pre></div><p>在本地运行测试并对代码的正确性获得信心后，在同一分支上再次提交并将其推送到 GitHub。在这样做之前，值得仔细检查当前分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git branch
</span></span><span class="line"><span class="cl">* feature/replace-emoji-face
</span></span><span class="line"><span class="cl">  master
</span></span><span class="line"><span class="cl">$ git add web/test/unit/test_app.py
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;Fix the failing unit test&#34;</span>
</span></span><span class="line"><span class="cl">$ git push
</span></span></code></pre></div><p>拉取请求应该接受您的更改并开始另一个 CI 构建。一旦满足所有保护规则，您最终可以通过单击绿色按钮将您的功能分支合并到受保护的主线中：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/pr_success.0d326c26e9ad.png" alt="GitHub Status Checks Passed"  />
</p>
<p>请注意，合并将触发针对 <code>master</code> 分支的另一个 CI 构建，以测试您的更改是否与代码库的其余部分很好地集成。事情总是有可能出错。另一方面，如果 CI 构建成功，则工作流将标记并将镜像推送到您的 Docker Hub 存储库：</p>
<p><img loading="lazy" src="https://files.realpython.com/media/docker_hub_push.93959f48b437.png" alt="Docker Image Tagged and Pushed By a GitHub Action"  />
</p>
<p>每次 CI 工作流成功时，推送的 Docker 镜像都会被标记为当前 Git 提交哈希和标签 <code>latest</code> 。</p>
<p>恭喜！关于使用 Docker 和朋友构建持续集成管道的整个教程到此结束。给自己当之无愧的表扬，因为这绝非易事！</p>
<h2 id="后续步骤">后续步骤</h2>
<p>您总是可以做很多事情来改进和微调现有的持续集成流程。尽管这是关于构建强大的 CI 管道的详尽且实用的教程，但您只是触及了皮毛！</p>
<p>以下是一些供您考虑的想法：</p>
<ul>
<li>
<p>自动部署到云以实现持续交付。</p>
</li>
<li>
<p>通过全流程自动化转向持续部署。</p>
</li>
<li>
<p>引入负载均衡器和服务副本以获得更好的可扩展性。</p>
</li>
<li>
<p>使用身份验证令牌保护敏感数据存储。</p>
</li>
<li>
<p>配置服务的持久日志记录和监控。</p>
</li>
<li>
<p>实施蓝绿部署以实现零停机。</p>
</li>
<li>
<p>添加功能切换以试验金丝雀发布和 A/B 测试。</p>
</li>
</ul>
<p>通过本教程，您已经为入门打下了良好的基础。您当然可以从这里开始构建一个充分自动化和生产就绪的持续集成系统，利用 Docker 和朋友的力量。</p>
<h2 id="总结">总结</h2>
<p>您现在对如何在容器化环境中构建、部署和管理多容器 Web 应用程序有了深入的了解。您介绍了挂接到 Redis 服务器的 Flask Web 应用程序的开发、测试、保护、码头化和编排。</p>
<p>您还了解了如何使用 Docker、GitHub Actions 和各种其他工具定义持续集成管道。</p>
<p><strong>在本教程中，您已经：</strong></p>
<ul>
<li>在 Docker 容器中本地运行 Redis 服务器</li>
<li>Docker编排 一个用 Flask 编写的 Python Web 应用程序</li>
<li>构建 Docker 镜像并将它们推送到 Docker Hub 注册表</li>
<li>使用 Docker Compose 编排多容器应用程序</li>
<li>在任何地方复制类似生产的基础设施</li>
<li>使用 GitHub Actions 定义持续集成工作流程</li>
</ul>
<p>您准备好构建自己的持续集成管道了吗？在评论中让大家知道！</p>
<blockquote>
<p>免费下载：单击<a href="https://realpython.com/bonus/docker-continuous-integration-code/">此处</a>下载您的 Flask 应用程序和相关资源，以便您可以使用 Docker 定义持续集成管道。</p>
</blockquote>
<p>原文链接：<a href="https://realpython.com/docker-continuous-integration/">Build Robust Continuous Integration With Docker and Friends </a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Abstract Document</title>
      <link>https://blog.chensoul.com/posts/2023/05/22/java-design-patterns-abstract-document/</link>
      <pubDate>Mon, 22 May 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/22/java-design-patterns-abstract-document/</guid>
      <description>本文主要介绍 Abstract Document 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计</description>
      <content:encoded><![CDATA[<p>本文主要介绍  Abstract Document 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="目的">目的</h2>
<p>使用动态属性，并在保持类型安全的同时实现非类型化语言的灵活性。</p>
<blockquote>
<p>抽象文档模式中的属性对象可以动态添加和删除属性，并且属性类型是在运行时确定的，这使得抽象文档模式具有一定的灵活性和可扩展性。</p>
<p>在抽象文档模式中，属性对象通常使用 Map 或者 List 等数据结构来实现。动态属性的添加和删除可以通过 Map 的 put 和 remove 方法实现，而属性的类型可以通过泛型来确定。</p>
</blockquote>
<h2 id="解释">解释</h2>
<p>抽象文档模式使您能够处理其他非静态属性。 此模式使用特征的概念来实现类型安全，并将不同类的属性分离为一组接口。</p>
<p>真实世界例子</p>
<blockquote>
<p>考虑由多个部分组成的汽车。 但是，我们不知道特定汽车是否真的拥有所有零件，或者仅仅是零件中的一部分。 我们的汽车是动态而且非常灵活的。</p>
</blockquote>
<p>通俗的说</p>
<blockquote>
<p>抽象文档模式允许在对象不知道的情况下将属性附加到对象。</p>
</blockquote>
<p>维基百科说</p>
<blockquote>
<p>面向对象的结构设计模式，用于组织松散类型的键值存储中的对象并使用类型化的视图公开数据。 该模式的目的是在强类型语言中实现组件之间的高度灵活性，在这种语言中，可以在不丢失类型安全支持的情况下，将新属性动态地添加到对象树中。 该模式利用特征将类的不同属性分成不同的接口。</p>
</blockquote>
<p><strong>程序示例</strong></p>
<p>让我们首先定义基类<code>Document</code>和<code>AbstractDocument</code>。 它们基本上使对象拥有属性映射和任意数量的子对象。</p>
<blockquote>
<p>以下代码在 java 8 中编译正常。</p>
</blockquote>
<p>Document 接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">constructor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>以下接口不使用 Java 8的Stream API：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></blockquote>
<p>AbstractDocument 抽象类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractDocument</span> <span class="kd">implements</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="nf">AbstractDocument</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">properties</span><span class="o">,</span> <span class="s">&#34;properties map is required&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">properties</span> <span class="o">=</span> <span class="n">properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">properties</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">properties</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">constructor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// java 9
</span></span></span><span class="line"><span class="cl"><span class="c1">//		return Stream.ofNullable(get(key))
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.filter(Objects::nonNull)
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.map(el -&gt; (List&lt;Map&lt;String, Object&gt;&gt;) el)
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.findAny()
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.stream()
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.flatMap(Collection::stream)
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.map(constructor);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">		<span class="c1">// java 8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">el</span> <span class="o">-&gt;</span> <span class="n">el</span> <span class="k">instanceof</span> <span class="n">List</span><span class="o">&lt;?&gt;)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">el</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;)</span> <span class="n">el</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">List</span><span class="o">::</span><span class="n">stream</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">orElseGet</span><span class="o">(</span><span class="n">Stream</span><span class="o">::</span><span class="n">empty</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">constructor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">properties</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>接下来，我们定义一个枚举“属性”和一组类型，价格，模型和零件的接口。 这使我们能够为Car类创建静态外观的界面。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Property</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">PARTS</span><span class="o">,</span> <span class="n">TYPE</span><span class="o">,</span> <span class="n">PRICE</span><span class="o">,</span> <span class="n">MODEL</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HasType</span> <span class="kd">extends</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">default</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getType</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">get</span><span class="o">(</span><span class="n">Property</span><span class="o">.</span><span class="na">TYPE</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HasPrice</span> <span class="kd">extends</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">default</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Number</span><span class="o">&gt;</span> <span class="nf">getPrice</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">((</span><span class="n">Number</span><span class="o">)</span> <span class="n">get</span><span class="o">(</span><span class="n">Property</span><span class="o">.</span><span class="na">PRICE</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HasModel</span> <span class="kd">extends</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">default</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getModel</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">get</span><span class="o">(</span><span class="n">Property</span><span class="o">.</span><span class="na">MODEL</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HasParts</span> <span class="kd">extends</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">default</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">Part</span><span class="o">&gt;</span> <span class="nf">getParts</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">children</span><span class="o">(</span><span class="n">Property</span><span class="o">.</span><span class="na">PARTS</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">Part</span><span class="o">::</span><span class="k">new</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Part</span> <span class="kd">extends</span> <span class="n">AbstractDocument</span> <span class="kd">implements</span> <span class="n">HasType</span><span class="o">,</span> <span class="n">HasModel</span><span class="o">,</span> <span class="n">HasPrice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Part</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">properties</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在我们准备介绍 <code>Car</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="kd">extends</span> <span class="n">AbstractDocument</span> <span class="kd">implements</span> <span class="n">HasModel</span><span class="o">,</span> <span class="n">HasPrice</span><span class="o">,</span> <span class="n">HasParts</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Car</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">properties</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>最后是完整示例中的<code>Car</code>构造和使用方式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Program entry point.
</span></span></span><span class="line"><span class="cl"><span class="cm">	 *
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param args command line args
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Constructing parts and car&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">wheelProperties</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">TYPE</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;wheel&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">MODEL</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;15C&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">PRICE</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="mi">100L</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">doorProperties</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">TYPE</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;door&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">MODEL</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;Lambo&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">PRICE</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="mi">300L</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">carProperties</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">MODEL</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;300SL&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">PRICE</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="mi">10000L</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">PARTS</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">wheelProperties</span><span class="o">,</span> <span class="n">doorProperties</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Car</span> <span class="n">car</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Car</span><span class="o">(</span><span class="n">carProperties</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Here is our car:&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;-&gt; model: {}&#34;</span><span class="o">,</span> <span class="n">car</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;-&gt; price: {}&#34;</span><span class="o">,</span> <span class="n">car</span><span class="o">.</span><span class="na">getPrice</span><span class="o">().</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;-&gt; parts: &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">car</span><span class="o">.</span><span class="na">getParts</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;\t{}/{}/{}&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">p</span><span class="o">.</span><span class="na">getType</span><span class="o">().</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">			<span class="n">p</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">			<span class="n">p</span><span class="o">.</span><span class="na">getPrice</span><span class="o">().</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">		<span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>再来一个示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="kd">extends</span> <span class="n">AbstractDocument</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Person</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;John Doe&#34;</span><span class="o">,</span>  
</span></span><span class="line"><span class="cl">      <span class="s">&#34;age&#34;</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;hobbies&#34;</span><span class="o">,</span> <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Sports&#34;</span><span class="o">,</span> <span class="s">&#34;Music&#34;</span><span class="o">));</span>     
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">          
</span></span><span class="line"><span class="cl">          
</span></span><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonApp</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;name: {}&#34;</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;age: {}&#34;</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;hobbies: {}&#34;</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;hobbies&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/abstract-document-9f6a2e8d.png" alt="alt text"  />
</p>
<h2 id="适用性">适用性</h2>
<p>使用抽象文档模式，当</p>
<ul>
<li>需要即时添加新属性</li>
<li>你想要一种灵活的方式来以树状结构组织域</li>
<li>你想要更宽松的耦合系统</li>
</ul>
<p>下面是抽象文档模式的一些实际应用：</p>
<h3 id="1xml-和-json-解析">1、XML 和 JSON 解析</h3>
<p>抽象文档模式可以用于解析 XML 和 JSON 数据。由于 XML 和 JSON 数据通常包含动态属性，因此抽象文档模式可以提供一种灵活的方式来处理这些数据。通过将 XML 或 JSON 数据映射到文档和属性对象，可以轻松地访问和修改这些数据。</p>
<h4 id="xml解析">XML解析</h4>
<p>假设我们有一个简单的XML文件，内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bookstore&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;book</span> <span class="na">category=</span><span class="s">&#34;cooking&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;title</span> <span class="na">lang=</span><span class="s">&#34;en&#34;</span><span class="nt">&gt;</span>Everyday Italian<span class="nt">&lt;/title&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;author&gt;</span>Giada De Laurentiis<span class="nt">&lt;/author&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;year&gt;</span>2005<span class="nt">&lt;/year&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;price&gt;</span>30.00<span class="nt">&lt;/price&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/book&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;book</span> <span class="na">category=</span><span class="s">&#34;children&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;title</span> <span class="na">lang=</span><span class="s">&#34;en&#34;</span><span class="nt">&gt;</span>Harry Potter<span class="nt">&lt;/title&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;author&gt;</span>J.K. Rowling<span class="nt">&lt;/author&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;year&gt;</span>2003<span class="nt">&lt;/year&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;price&gt;</span>29.99<span class="nt">&lt;/price&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/book&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bookstore&gt;</span>
</span></span></code></pre></div><p>我们可以使用抽象文档模式来解析这个XML文件，首先定义一个<code>Document</code>接口，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后定义一个具体的XML文档类，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">XmlDocument</span> <span class="kd">implements</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Element</span> <span class="n">element</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">XmlDocument</span><span class="o">(</span><span class="n">Element</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">element</span> <span class="o">=</span> <span class="n">element</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">element</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">NodeList</span> <span class="n">nodes</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getElementsByTagName</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nodes</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">XmlDocument</span><span class="o">((</span><span class="n">Element</span><span class="o">)</span> <span class="n">nodes</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">children</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个具体的XML文档类中，我们实现了<code>Document</code>接口的三个方法，其中<code>children</code>方法使用了DOM API来获取子元素列表，并将每个子元素包装成一个新的<code>XmlDocument</code>对象。</p>
<p>现在，我们可以使用这个具体的XML文档类来解析XML文件，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">DocumentBuilderFactory</span> <span class="n">dbFactory</span> <span class="o">=</span> <span class="n">DocumentBuilderFactory</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">DocumentBuilder</span> <span class="n">dBuilder</span> <span class="o">=</span> <span class="n">dbFactory</span><span class="o">.</span><span class="na">newDocumentBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlDocument</span><span class="o">(</span><span class="n">dBuilder</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&#34;books.xml&#34;</span><span class="o">)).</span><span class="na">getDocumentElement</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 获取根元素的属性值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">bookstoreCategory</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;category&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 获取所有书的信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">books</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;book&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="n">Document</span> <span class="n">book</span> <span class="o">:</span> <span class="n">books</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">category</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;category&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">title</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">book</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;title&#34;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">author</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">book</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;author&#34;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">year</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">book</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;year&#34;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">price</span> <span class="o">=</span> <span class="o">(</span><span class="kt">double</span><span class="o">)</span> <span class="n">book</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;price&#34;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Category: &#34;</span> <span class="o">+</span> <span class="n">category</span> <span class="o">+</span> <span class="s">&#34;, Title: &#34;</span> <span class="o">+</span> <span class="n">title</span> <span class="o">+</span> <span class="s">&#34;, Author: &#34;</span> <span class="o">+</span> <span class="n">author</span> <span class="o">+</span> <span class="s">&#34;, Year: &#34;</span> <span class="o">+</span> <span class="n">year</span> <span class="o">+</span> <span class="s">&#34;, Price: &#34;</span> <span class="o">+</span> <span class="n">price</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h4 id="json解析">JSON解析</h4>
<p>假设我们有一个简单的JSON文件，以下是<code>example.json</code>文件的内容：：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Smith&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;address&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;street&#34;</span><span class="p">:</span> <span class="s2">&#34;123 Main St&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;city&#34;</span><span class="p">:</span> <span class="s2">&#34;Anytown&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;state&#34;</span><span class="p">:</span> <span class="s2">&#34;CA&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;zip&#34;</span><span class="p">:</span> <span class="s2">&#34;12345&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;phone&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;home&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;number&#34;</span><span class="p">:</span> <span class="s2">&#34;555-1234&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;work&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;number&#34;</span><span class="p">:</span> <span class="s2">&#34;555-5678&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们可以使用抽象文档模式来解析这个JSON文件，首先定义一个<code>Document</code>接口，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后定义一个具体的JSON文档类，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.google.gson.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonDocument</span> <span class="kd">implements</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JsonObject</span> <span class="n">object</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">JsonDocument</span><span class="o">(</span><span class="n">JsonObject</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">JsonElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">element</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">isJsonPrimitive</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonPrimitive</span> <span class="n">primitive</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAsJsonPrimitive</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">primitive</span><span class="o">.</span><span class="na">isNumber</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">primitive</span><span class="o">.</span><span class="na">getAsNumber</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">primitive</span><span class="o">.</span><span class="na">isBoolean</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">primitive</span><span class="o">.</span><span class="na">getAsBoolean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">primitive</span><span class="o">.</span><span class="na">getAsString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">isJsonObject</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">JsonDocument</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">getAsJsonObject</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">isJsonArray</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonArray</span> <span class="n">array</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAsJsonArray</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">JsonElement</span> <span class="n">child</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">JsonDocument</span><span class="o">(</span><span class="n">child</span><span class="o">.</span><span class="na">getAsJsonObject</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">children</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">object</span><span class="o">.</span><span class="na">addProperty</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">Number</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">object</span><span class="o">.</span><span class="na">addProperty</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="o">(</span><span class="n">Number</span><span class="o">)</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">Boolean</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">object</span><span class="o">.</span><span class="na">addProperty</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="o">(</span><span class="n">Boolean</span><span class="o">)</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">Document</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonDocument</span> <span class="n">jsonDocument</span> <span class="o">=</span> <span class="o">(</span><span class="n">JsonDocument</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">object</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">jsonDocument</span><span class="o">.</span><span class="na">object</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">List</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonArray</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonArray</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">Document</span> <span class="n">child</span> <span class="o">:</span> <span class="n">children</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">JsonDocument</span> <span class="n">jsonChild</span> <span class="o">=</span> <span class="o">(</span><span class="n">JsonDocument</span><span class="o">)</span> <span class="n">child</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">array</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">jsonChild</span><span class="o">.</span><span class="na">object</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">object</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">array</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">JsonElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">element</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">element</span><span class="o">.</span><span class="na">isJsonArray</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonArray</span> <span class="n">array</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAsJsonArray</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">JsonElement</span> <span class="n">child</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">JsonDocument</span><span class="o">(</span><span class="n">child</span><span class="o">.</span><span class="na">getAsJsonObject</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">children</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，我们可以使用这个具体的JSON文档类来解析JSON文件，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonParsingExample</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 读取JSON文件并解析
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonElement</span> <span class="n">jsonElement</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&#34;example.json&#34;</span><span class="o">),</span> <span class="n">JsonElement</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonDocument</span> <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonDocument</span><span class="o">(</span><span class="n">jsonElement</span><span class="o">.</span><span class="na">getAsJsonObject</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取根元素的属性值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">JsonDocument</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="n">JsonDocument</span><span class="o">)</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;address&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">street</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">address</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;street&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">city</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">address</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;city&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">state</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">address</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;state&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">zip</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">address</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;zip&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取电话号码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">phoneList</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;phone&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">Document</span> <span class="n">phone</span> <span class="o">:</span> <span class="n">phoneList</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">String</span> <span class="n">type</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">phone</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;type&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">String</span> <span class="n">number</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">phone</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;number&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">type</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="n">number</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="2动态配置">2、动态配置</h3>
<p>抽象文档模式可以用于动态配置。通过将配置数据映射到文档和属性对象，可以轻松地访问和修改配置数据。此外，由于抽象文档模式支持动态属性，因此可以在运行时添加或删除属性，从而使配置更加灵活。</p>
<p>假设有一个学生信息管理系统，需要存储和检索学生信息。学生信息包括学生姓名、学生年龄、学生性别、学生家庭地址等属性。由于学生属性可能会随时变化，因此需要使用一种灵活的方式来处理这些属性，并且需要轻松地访问和修改这些属性。</p>
<p>为了实现这个功能，可以使用抽象文档模式。定义一个学生文档类（StudentDocument），该类包含学生属性的访问器和修改器方法，并且支持动态属性。然后，定义一个学生属性类（Property），该类包含属性名称、属性类型和属性值等属性，并且支持动态属性。最后，使用一个构建器（Builder）类来创建具体的学生文档对象，并将学生属性添加到文档中。</p>
<p>示例代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Property</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Object</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Property</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Property</span><span class="o">&gt;</span> <span class="n">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getProperty</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Property</span> <span class="n">property</span> <span class="o">:</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">property</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">property</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProperty</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Property</span> <span class="n">property</span> <span class="o">:</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">property</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">property</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">properties</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Property</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StudentDocument</span> <span class="kd">extends</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">getProperty</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">setProperty</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">getProperty</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">setProperty</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getGender</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">getProperty</span><span class="o">(</span><span class="s">&#34;gender&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">String</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">setProperty</span><span class="o">(</span><span class="s">&#34;gender&#34;</span><span class="o">,</span> <span class="n">gender</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAddress</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">getProperty</span><span class="o">(</span><span class="s">&#34;address&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddress</span><span class="o">(</span><span class="n">Stringaddress</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">setProperty</span><span class="o">(</span><span class="s">&#34;address&#34;</span><span class="o">,</span> <span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StudentBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">StudentDocument</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StudentDocument</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">student</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">student</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">String</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">student</span><span class="o">.</span><span class="na">setGender</span><span class="o">(</span><span class="n">gender</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddress</span><span class="o">(</span><span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">student</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">StudentDocument</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">student</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用抽象文档模式，可以轻松地访问和修改学生属性，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">StudentBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StudentBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Tom&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">18</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="o">.</span><span class="na">setGender</span><span class="o">(</span><span class="s">&#34;Male&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="s">&#34;Beijing&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">StudentDocument</span> <span class="n">student</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span> <span class="c1">// 输出：Tom
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">student</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="s">&#34;Shanghai&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getAddress</span><span class="o">());</span> <span class="c1">// 输出：Shanghai
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">student</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&#34;phoneNumber&#34;</span><span class="o">,</span> <span class="s">&#34;1234567890&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;phoneNumber&#34;</span><span class="o">));</span> <span class="c1">// 输出：1234567890
</span></span></span></code></pre></div><h3 id="3业务规则引擎">3、业务规则引擎</h3>
<p>抽象文档模式可以用于实现业务规则引擎。通过将规则数据映射到文档和属性对象，可以轻松地访问和修改规则数据。此外，由于抽象文档模式支持动态属性，因此可以在运行时添加或删除规则，从而使规则引擎更加灵活。</p>
<p>假设我们有一个简单的业务规则，用于确定用户是否有资格获得某项奖励。这个规则可能涉及到多个条件，例如用户的年龄、所在地区以及购物金额等。</p>
<p>我们可以将这个规则表示为一个文档，例如一个JSON文档，其中每个属性对应一个规则条件。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;&gt;=&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="mi">18</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;region&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;in&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;east&#34;</span><span class="p">,</span> <span class="s2">&#34;south&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;amount&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;&gt;=&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后，我们可以使用抽象文档模式来解析这个文档，并将其转换为一个规则对象。例如，我们可以创建一个名为<code>Rule</code>的类，它包含三个属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Rule</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">key</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">operator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">secondValue</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Rule</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">operator</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">operator</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Rule</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">operator</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">Object</span> <span class="n">secondValue</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">operator</span> <span class="o">=</span> <span class="n">operator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">secondValue</span> <span class="o">=</span> <span class="n">secondValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">evaluate</span><span class="o">(</span><span class="n">Document</span> <span class="n">document</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">documentValue</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">documentValue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">switch</span> <span class="o">(</span><span class="n">operator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;&gt;=&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;&lt;=&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;&gt;&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;&lt;&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;==&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span><span class="n">value</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;!=&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">;</span>  
</span></span><span class="line"><span class="cl">          	<span class="k">case</span> <span class="s">&#34;in&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">List</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">listValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;?&gt;)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">item</span> <span class="o">:</span> <span class="n">listValue</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="o">(</span><span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">item</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                        <span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;not in&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">            		<span class="kt">boolean</span> <span class="n">found</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">List</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">listValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;?&gt;)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">item</span> <span class="o">:</span> <span class="n">listValue</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="o">(</span><span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">item</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                            <span class="n">found</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                          	<span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                        <span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="o">!</span><span class="n">found</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          	<span class="k">case</span> <span class="s">&#34;between&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">secondValue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">cmp1</span> <span class="o">=</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">cmp2</span> <span class="o">=</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">secondValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">cmp1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cmp2</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;not between&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">secondValue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">cmp1</span> <span class="o">=</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">cmp2</span> <span class="o">=</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">secondValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">cmp1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">cmp2</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          	<span class="k">case</span> <span class="s">&#34;regex&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">documentValue</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strDocumentValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">documentValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">strDocumentValue</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="n">strValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;startswith&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="o">(</span><span class="n">documentValue</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strDocumentValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">documentValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">strDocumentValue</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="n">strValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;endswith&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">documentValue</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strDocumentValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">documentValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">strDocumentValue</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="n">strValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;like&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">documentValue</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strDocumentValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">documentValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">strDocumentValue</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">strValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          	<span class="k">case</span> <span class="s">&#34;not like&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">documentValue</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strDocumentValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">documentValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="o">!</span><span class="n">strDocumentValue</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">strValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">           	<span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Object</span> <span class="n">a</span><span class="o">,</span> <span class="n">Object</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="k">instanceof</span> <span class="n">Number</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="k">instanceof</span> <span class="n">Number</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">Double</span><span class="o">.</span><span class="na">compare</span><span class="o">(((</span><span class="n">Number</span><span class="o">)</span> <span class="n">a</span><span class="o">).</span><span class="na">doubleValue</span><span class="o">(),</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span> <span class="n">b</span><span class="o">).</span><span class="na">doubleValue</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">a</span><span class="o">).</span><span class="na">compareTo</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">b</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">a</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Rule</code>类有一个<code>evaluate</code>方法，它接受一个<code>Document</code>对象，并根据规则条件对文档进行评估。例如，对于上面的规则文档，我们可以创建三个<code>Rule</code>对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Rule</span> <span class="n">ageRule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rule</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">,</span> <span class="s">&#34;between&#34;</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">Rule</span> <span class="n">regionRule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rule</span><span class="o">(</span><span class="s">&#34;region&#34;</span><span class="o">,</span> <span class="s">&#34;in&#34;</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;east&#34;</span><span class="o">,</span> <span class="s">&#34;south&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="n">Rule</span> <span class="n">amountRule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rule</span><span class="o">(</span><span class="s">&#34;amount&#34;</span><span class="o">,</span> <span class="s">&#34;&gt;=&#34;</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
</span></span></code></pre></div><p>然后，我们可以将这些规则应用于用户数据，例如一个存储在数据库中的用户记录。我们可以将用户数据表示为一个文档，例如一个XML文档：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;user&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;name&gt;</span>John Doe<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;age&gt;</span>25<span class="nt">&lt;/age&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;region&gt;</span>east<span class="nt">&lt;/region&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;amount&gt;</span>1200<span class="nt">&lt;/amount&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/user&gt;</span>
</span></span></code></pre></div><p>我们可以使用抽象文档模式解析该文档并将其转换为<code>Document</code>对象。然后，我们可以使用<code>Rule</code>对象和<code>Document</code>对象来评估用户是否有资格获得奖励。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Document</span> <span class="n">userDocument</span> <span class="o">=</span> <span class="o">...</span> <span class="c1">// 解析用户数据为一个Document对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span> <span class="n">isEligible</span> <span class="o">=</span> <span class="n">ageRule</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">userDocument</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">regionRule</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">userDocument</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">amountRule</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">userDocument</span><span class="o">);</span>
</span></span></code></pre></div><h3 id="4数据库映射">4、数据库映射</h3>
<p>抽象文档模式可以用于将数据库数据映射到文档和属性对象上。通过将数据库表映射到文档对象，将表的列映射到属性对象，可以轻松地访问和修改数据库数据。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Abstract Factory</title>
      <link>https://blog.chensoul.com/posts/2023/05/22/java-design-patterns-abstract-factory/</link>
      <pubDate>Mon, 22 May 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/22/java-design-patterns-abstract-factory/</guid>
      <description>本文主要介绍 Abstract Factory 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计</description>
      <content:encoded><![CDATA[<p>本文主要介绍  Abstract Factory 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="目的">目的</h2>
<p>抽象工厂（Abstract Factory）是一种创建型设计模式，它提供了一种方式来创建一系列相关或依赖对象的家族，而无需指定它们具体的类。</p>
<p>抽象工厂模式使用一个抽象工厂接口来定义一组相关的工厂方法，每个工厂方法都能够创建一组相关的产品。具体的工厂实现了这个接口，并能够创建具体的产品。客户端代码只需要使用抽象工厂接口来创建产品，而不需要关心具体的产品实现。</p>
<h2 id="解释">解释</h2>
<p>真实世界例子</p>
<blockquote>
<p>要创建一个王国，我们需要具有共同主题的对象。精灵王国需要精灵国王、精灵城堡和精灵军队，而兽人王国需要兽人国王、兽人城堡和兽人军队。王国中的对象之间存在依赖关系。</p>
</blockquote>
<p>通俗的说</p>
<blockquote>
<p>工厂的工厂； 一个将单个但相关/从属的工厂分组在一起而没有指定其具体类别的工厂。</p>
</blockquote>
<p>维基百科上说</p>
<blockquote>
<p>抽象工厂模式提供了一种封装一组具有共同主题的单个工厂而无需指定其具体类的方法</p>
</blockquote>
<p><strong>程序示例</strong></p>
<p>翻译上面的王国示例。 首先，我们为王国中的对象提供了一些接口和实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Castle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="nf">getDescription</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">King</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="nf">getDescription</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Army</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="nf">getDescription</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Elven implementations -&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElfCastle</span> <span class="kd">implements</span> <span class="n">Castle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DESCRIPTION</span> <span class="o">=</span> <span class="s">&#34;This is the Elven castle!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">DESCRIPTION</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElfKing</span> <span class="kd">implements</span> <span class="n">King</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DESCRIPTION</span> <span class="o">=</span> <span class="s">&#34;This is the Elven king!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">DESCRIPTION</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElfArmy</span> <span class="kd">implements</span> <span class="n">Army</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DESCRIPTION</span> <span class="o">=</span> <span class="s">&#34;This is the Elven Army!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">DESCRIPTION</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Orcish implementations similarly -&gt; ...
</span></span></span></code></pre></div><p>然后我们有了王国工厂的抽象和实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">KingdomFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Castle</span> <span class="nf">createCastle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">King</span> <span class="nf">createKing</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">Army</span> <span class="nf">createArmy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElfKingdomFactory</span> <span class="kd">implements</span> <span class="n">KingdomFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Castle</span> <span class="nf">createCastle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">ElfCastle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">King</span> <span class="nf">createKing</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">ElfKing</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Army</span> <span class="nf">createArmy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">ElfArmy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrcKingdomFactory</span> <span class="kd">implements</span> <span class="n">KingdomFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Castle</span> <span class="nf">createCastle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">OrcCastle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">King</span> <span class="nf">createKing</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">OrcKing</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Army</span> <span class="nf">createArmy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">OrcArmy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在我们有了抽象工厂，使我们可以制作相关对象的系列，即精灵王国工厂创建了精灵城堡，国王和军队等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">KingdomFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ElfKingdomFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Castle</span> <span class="n">castle</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createCastle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">King</span> <span class="n">king</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createKing</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Army</span> <span class="n">army</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createArmy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">castle</span><span class="o">.</span><span class="na">getDescription</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">king</span><span class="o">.</span><span class="na">getDescription</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">army</span><span class="o">.</span><span class="na">getDescription</span><span class="o">();</span>
</span></span></code></pre></div><p>程序输出:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">This</span> <span class="n">is</span> <span class="n">the</span> <span class="n">Elven</span> <span class="n">castle</span><span class="o">!</span>
</span></span><span class="line"><span class="cl"><span class="n">This</span> <span class="n">is</span> <span class="n">the</span> <span class="n">Elven</span> <span class="n">king</span><span class="o">!</span>
</span></span><span class="line"><span class="cl"><span class="n">This</span> <span class="n">is</span> <span class="n">the</span> <span class="n">Elven</span> <span class="n">Army</span><span class="o">!</span>
</span></span></code></pre></div><p>现在，我们可以为不同的王国工厂设计工厂。 在此示例中，我们创建了FactoryMaker，负责返回ElfKingdomFactory或OrcKingdomFactory的实例。 客户可以使用FactoryMaker来创建所需的具体工厂，该工厂随后将生产不同的具体对象（军队，国王，城堡）。 在此示例中，我们还使用了一个枚举来参数化客户要求的王国工厂类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">FactoryMaker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">enum</span> <span class="n">KingdomType</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ELF</span><span class="o">,</span> <span class="n">ORC</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">KingdomFactory</span> <span class="nf">makeFactory</span><span class="o">(</span><span class="n">KingdomType</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">switch</span> <span class="o">(</span><span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="n">ELF</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ElfKingdomFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="n">ORC</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">OrcKingdomFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">default</span> <span class="o">-&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;KingdomType not supported.&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Kingdom</span> <span class="n">kingdom</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Kingdom</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Kingdom</span> <span class="nf">getKingdom</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">kingdom</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">App</span> <span class="n">app</span> <span class="o">=</span> <span class="k">new</span> <span class="n">App</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;elf kingdom&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">createKingdom</span><span class="o">(</span><span class="n">KingdomType</span><span class="o">.</span><span class="na">ELF</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getArmy</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getCastle</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getKing</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;orc kingdom&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">createKingdom</span><span class="o">(</span><span class="n">KingdomType</span><span class="o">.</span><span class="na">ORC</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getArmy</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getCastle</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getKing</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/abstract-factory.urm-fe0340de.png" alt="alt text"  />
</p>
<h2 id="优缺点">优缺点</h2>
<p>优点包括：</p>
<ol>
<li>抽象工厂模式能够帮助我们创建具有高内聚性的对象家族，这些对象家族之间相互协作，从而构成一个完整的系统。</li>
<li>抽象工厂模式能够保证客户端代码与具体产品实现之间的解耦，从而让系统更加灵活和可扩展。</li>
<li>抽象工厂模式能够隐藏产品的具体实现细节，从而提高系统的安全性和稳定性。</li>
</ol>
<p>而缺点则包括：</p>
<ol>
<li>抽象工厂模式比较复杂，需要定义许多接口和抽象类，这会增加系统的复杂性和开发成本。</li>
<li>如果需要添加新的产品族，那么就需要修改抽象工厂接口以及所有的具体工厂实现，这会带来一定的风险和不便。</li>
<li>抽象工厂模式可能会导致系统的扩展性受限，因为一旦定义了抽象工厂接口，就不能够轻易地修改它。</li>
</ol>
<p>在《Effective Java》中，作者还提到了一个关于抽象工厂模式的建议：在设计抽象工厂接口时，要考虑到未来可能的变化。例如，如果我们预计将来可能会添加新的产品族，那么就应该尽量设计一个灵活的抽象工厂接口，以便在不修改现有代码的情况下添加新的产品族。</p>
<p>举例：<a href="https://www.digitalocean.com/community/tutorials/abstract-factory-design-pattern-in-java">Abstract Factory Design Pattern in Java</a></p>
<p>Computer.java：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">getRAM</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">getHDD</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">getCPU</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;RAM= &#34;</span><span class="o">+</span><span class="k">this</span><span class="o">.</span><span class="na">getRAM</span><span class="o">()+</span><span class="s">&#34;, HDD=&#34;</span><span class="o">+</span><span class="k">this</span><span class="o">.</span><span class="na">getHDD</span><span class="o">()+</span><span class="s">&#34;, CPU=&#34;</span><span class="o">+</span><span class="k">this</span><span class="o">.</span><span class="na">getCPU</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>PC.java：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PC</span> <span class="kd">extends</span> <span class="n">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">PC</span><span class="o">(</span><span class="n">String</span> <span class="n">ram</span><span class="o">,</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">,</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">=</span><span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">=</span><span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">=</span><span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getRAM</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getHDD</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCPU</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Server.java：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="kd">extends</span> <span class="n">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Server</span><span class="o">(</span><span class="n">String</span> <span class="n">ram</span><span class="o">,</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">,</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">=</span><span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">=</span><span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">=</span><span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getRAM</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getHDD</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCPU</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>抽象工厂方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ComputerAbstractFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Computer</span> <span class="nf">createComputer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PCFactory</span> <span class="kd">implements</span> <span class="n">ComputerAbstractFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">PCFactory</span><span class="o">(</span><span class="n">String</span> <span class="n">ram</span><span class="o">,</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">,</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">=</span><span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">=</span><span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">=</span><span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Computer</span> <span class="nf">createComputer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">PC</span><span class="o">(</span><span class="n">ram</span><span class="o">,</span><span class="n">hdd</span><span class="o">,</span><span class="n">cpu</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServerFactory</span> <span class="kd">implements</span> <span class="n">ComputerAbstractFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ServerFactory</span><span class="o">(</span><span class="n">String</span> <span class="n">ram</span><span class="o">,</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">,</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">=</span><span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">=</span><span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">=</span><span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Computer</span> <span class="nf">createComputer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">Server</span><span class="o">(</span><span class="n">ram</span><span class="o">,</span><span class="n">hdd</span><span class="o">,</span><span class="n">cpu</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>工厂类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComputerFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Computer</span> <span class="nf">getComputer</span><span class="o">(</span><span class="n">ComputerAbstractFactory</span> <span class="n">factory</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">factory</span><span class="o">.</span><span class="na">createComputer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDesignPatterns</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">testAbstractFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testAbstractFactory</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Computer</span> <span class="n">pc</span> <span class="o">=</span> <span class="n">ComputerFactory</span><span class="o">.</span><span class="na">getComputer</span><span class="o">(</span><span class="k">new</span> <span class="n">PCFactory</span><span class="o">(</span><span class="s">&#34;2 GB&#34;</span><span class="o">,</span><span class="s">&#34;500 GB&#34;</span><span class="o">,</span><span class="s">&#34;2.4 GHz&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">Computer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">ComputerFactory</span><span class="o">.</span><span class="na">getComputer</span><span class="o">(</span><span class="k">new</span> <span class="n">ServerFactory</span><span class="o">(</span><span class="s">&#34;16 GB&#34;</span><span class="o">,</span><span class="s">&#34;1 TB&#34;</span><span class="o">,</span><span class="s">&#34;2.9 GHz&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;AbstractFactory PC Config::&#34;</span><span class="o">+</span><span class="n">pc</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;AbstractFactory Server Config::&#34;</span><span class="o">+</span><span class="n">server</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>输出结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">AbstractFactory PC Config::RAM<span class="o">=</span> <span class="m">2</span> GB, <span class="nv">HDD</span><span class="o">=</span><span class="m">500</span> GB, <span class="nv">CPU</span><span class="o">=</span>2.4 GHz
</span></span><span class="line"><span class="cl">AbstractFactory Server Config::RAM<span class="o">=</span> <span class="m">16</span> GB, <span class="nv">HDD</span><span class="o">=</span><span class="m">1</span> TB, <span class="nv">CPU</span><span class="o">=</span>2.9 GHz
</span></span></code></pre></div><p>类图：<img loading="lazy" src="../../../../../../../Downloads/Abstract-Factory-Pattern-ComputerFactory.png" alt="Abstract-Factory-Pattern-ComputerFactory"  />
</p>
<h2 id="适用性">适用性</h2>
<p>在以下情况下使用抽象工厂模式</p>
<ul>
<li>该系统应独立于其产品的创建，组成和表示方式</li>
<li>系统应配置有多个产品系列之一</li>
<li>相关产品对象系列旨在一起使用，你需要强制执行此约束</li>
<li>你想提供产品的类库，并且只想暴露它们的接口，而不是它们的实现。</li>
<li>从概念上讲，依赖项的生存期比使用者的生存期短。</li>
<li>你需要一个运行时值来构建特定的依赖关系</li>
<li>你想决定在运行时从系列中调用哪种产品。</li>
<li>你需要提供一个或更多仅在运行时才知道的参数，然后才能解决依赖关系。</li>
<li>当你需要产品之间的一致性时</li>
<li>在向程序添加新产品或产品系列时，您不想更改现有代码。</li>
</ul>
<h2 id="相关模式">相关模式</h2>
<ul>
<li><a href="https://java-design-patterns.com/patterns/factory-method/">Factory Methodopen</a></li>
<li><a href="https://java-design-patterns.com/patterns/factory-kit/">Factory Kit</a></li>
</ul>
<h2 id="使用">使用</h2>
<p>jdk中以下类使用了抽象工厂模式：</p>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">javax.xml.parsers.DocumentBuilderFactoryopen</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--">javax.xml.transform.TransformerFactoryopen</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--">javax.xml.xpath.XPathFactoryopen</a></li>
</ul>
<p>以下是一些常见的开源框架和库：</p>
<ol>
<li>Spring Framework：Spring Framework 是一个流行的 Java 应用程序框架，它使用了抽象工厂模式来创建不同类型的对象，例如数据源、事务管理器和消息队列等。</li>
<li>Hibernate ORM：Hibernate ORM 是一个用于管理对象关系映射（ORM）的框架，它使用了抽象工厂模式来创建数据库连接、事务管理器和查询语句等对象。</li>
<li>Apache Commons：Apache Commons 是一个开源的 Java 工具库，它包含了许多常用的工具类和函数。其中，一些模块（例如 Commons Codec 和 Commons Pool）使用了抽象工厂模式来创建不同类型的对象。</li>
<li>Apache Struts：Apache Struts 是一个基于 MVC（模型-视图-控制器）模式的 Web 应用程序框架，它使用了抽象工厂模式来创建不同类型的 Action 类和结果类型。</li>
<li>Apache CXF：Apache CXF 是一个用于构建 Web 服务的框架，它使用了抽象工厂模式来创建不同类型的 Web 服务端点和客户端。</li>
<li>Apache Axis：Apache Axis 是一个用于构建 Web 服务的框架，它使用了抽象工厂模式来创建不同类型的 Web 服务端点和客户端。</li>
<li>Apache Log4j：Apache Log4j 是一个流行的 Java 日志框架，它使用了抽象工厂模式来创建不同类型的日志记录器和 Appender（日志输出器）。</li>
<li>Apache Commons Configuration：Apache Commons Configuration 是一个用于读取和写入配置文件的库，它使用了抽象工厂模式来创建不同类型的配置对象，例如 XMLConfiguration 和 PropertiesConfiguration 等。</li>
</ol>
<p>除此之外，许多其他的开源框架和库也使用了抽象工厂模式，例如 Hibernate、MyBatis、JDBC、JPA、JUnit 等。这些框架和库使用抽象工厂模式的原因是它能够帮助创建具有高内聚性的对象家族，并且能够保证客户端代码与具体产品实现之间的解耦。同时，抽象工厂模式也能够隐藏产品的具体实现细节，从而提高系统的安全性和稳定性。这些优点让抽象工厂模式成为了这些框架和库中常用的设计模式之一。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-19｜武功山看日出、Python初学建议</title>
      <link>https://blog.chensoul.com/posts/2023/05/18/weekly_review_19/</link>
      <pubDate>Thu, 18 May 2023 18:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/18/weekly_review_19/</guid>
      <description>前言 本篇是对 2023-05-08 到 2023-05-14 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 本周继续学习 python，发现一个质量非常高的 python</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-19-00.png" alt="weekly-review-19-00"  />
</p>
<p>本篇是对 <code>2023-05-08</code> 到 <code>2023-05-14</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>本周继续学习 python，发现一个质量非常高的 python 学习网站 <a href="https://realpython.com/">Real Python</a>，该网站有学习 python 的一些教程，是收费的，部分章节是可以免费观看的。</p>
<p>另外，周五晚上老婆临时起意想去武功山看日出，于是立即规划行程并购买火车票。因为一年半之前，我去过一次，所以规划起来还是很轻松的。上一次去是国庆节碰到下雨，没有看到日出。幸运的是，这次是晴天，不仅看到了日落还看到了日出。这一次没有选择住帐篷，而是住在了云中雾客栈，没想到这个客栈离金顶需要40分钟左右的路程，而且有段路程是坑坑洼洼。</p>
<p>去武功山之前，先去了长沙，再次游了橘子洲头，并第一次在长沙跑步打卡。本想在萍乡也跑步打卡，奈何没有得逞。</p>
<p>这次去了长沙和武功山，下次基本上是再也不会去爬武功山了。长沙还会去，因为从武功山回来路上，就和老婆规划着什么时候去张家界。</p>
<h2 id="武功山看日出">武功山看日出</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-19-01.png" alt="weekly-review-19-01"  />
</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-19-02.png" alt="weekly-review-19-02"  />
</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 1784 元，明细如下：</p>
<ul>
<li>5月8日：12元</li>
<li>5月9日：18元</li>
<li>5月10日：200元</li>
<li>5月11日：12元</li>
<li>5月12日：445元</li>
<li>5月13日：662元</li>
<li>5月14日：435元</li>
</ul>
<p>因为周末出去旅游，所以本周支出有所增多。</p>
<h2 id="健身">健身</h2>
<p>本周跑步 56 公里，最长跑步距离为 13 公里。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-19-05.png" alt="weekly-review-19-05"  />
</p>
<p>明细数据如下：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-19-04.png" alt="weekly-review-19-04"  />
</p>
<p>周末出去旅游，路过长沙，在长沙跑了两天，累计跑了6公里。这样，我的<a href="https://run.chensoul.com/">跑步数据</a> 从 <code>2 年里我跑过 1 个省份 1 个城市</code> 变成了<code> 2 年里我跑过 2 个省份 2 个城市</code>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-19-03.png" alt="."  />
</p>
<h2 id="工作">工作</h2>
<h3 id="java">Java</h3>
<h4 id="博客">博客</h4>
<p>本周完成两篇博客</p>
<ul>
<li><a href="/posts/2023/05/17/obey-the-general-contract-when-overriding-equals/">《Effective Java 3》笔记10：覆盖equals方法时应遵守的约定</a></li>
<li><a href="/posts/2023/05/18/jsr-166/">JSR 166规范</a></li>
</ul>
<h3 id="python">Python</h3>
<h4 id="python初学建议">Python初学建议</h4>
<p><strong>1、新手如何学习 python？</strong></p>
<p>推荐几篇文章：</p>
<ul>
<li>
<p><a href="http://cpython.org/">cPython - 给大学生的入门教程</a></p>
</li>
<li>
<p><a href="https://www.kawabangga.com/how-to-learn-python">如何学Python？</a></p>
</li>
</ul>
<p><strong>2、学习 python 编程的11个建议</strong></p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-19-06.webp" alt="weekly-review-19-06"  />
</p>
<p>原文：<a href="https://realpython.com/python-beginner-tips/">11 Beginner Tips for Learning Python Programming</a>，总结出以下11条新手编程建议：</p>
<ul>
<li>提示 #1：每天编写代码</li>
<li>提示#2：写出来</li>
<li>提示#3：互动</li>
<li>提示#4：休息</li>
<li>提示#5：成为漏洞赏金猎人</li>
<li>提示#6：与正在学习的其他人在一起</li>
<li>技巧#7：教导</li>
<li>技巧#8：结对编程</li>
<li>提示#9：提出“好的”问题</li>
<li>技巧#10：构建一些东西</li>
<li>技巧#11：为开源做贡献</li>
</ul>
<p><strong>3、Pyhton播客：</strong> <a href="https://pythonhunter.org/episodes/1">Ep 01. 新人到底需要什么</a></p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-19-07.png" alt="weekly-review-19-07"  />
</p>
<p>播客中提到的内容：</p>
<ul>
<li><a href="https://www.youtube.com/channel/UC4xKdmAXFh4ACyhpiQ_3qBw">Tech lead</a></li>
<li><a href="https://github.com/encode/starlette">starlette</a></li>
<li><a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/">Python’s super() considered super!</a></li>
<li><a href="https://github.com/coleifer/huey">huey</a></li>
<li><a href="https://github.com/agronholm/apscheduler">apscheduler</a></li>
<li><a href="https://www.youtube.com/watch?v=Aj3KMefwOqI">Python 3: ten years later - PyCon 2018</a></li>
<li><a href="https://www.youtube.com/watch?v=MCs5OvhV9S4">David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015</a></li>
<li><a href="https://github.com/uber/pyflame">pyflame</a></li>
<li><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md">提问的智慧</a></li>
<li><a href="http://xyproblem.info/">XY问题</a></li>
<li><a href="https://docs.python.org/3/library/logging.html">Python Logger</a></li>
<li><a href="https://docs.python.org/3/library/pdb.html">pdb</a></li>
<li><a href="https://www.jetbrains.com/pycharm/">PyCharm</a></li>
<li><a href="https://jupyter.org/">Jupyter notebook</a></li>
<li><a href="http://www.letmegooglethat.com/">Let me google that</a>, <a href="https://lmgtfy.com/">let me google that for you</a></li>
<li><a href="https://www.zhihu.com/question/27871198">学习操作系统的知识，看哪本书好？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27288770">PHP黑系列之二：PHP 为什么函数命名是如此不一致？</a></li>
<li><a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</a></li>
<li><a href="https://7chan.org/pr/src/The_Little_Schemer_4th_2.pdf">The Little Schemer</a></li>
<li><a href="https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs">SICP</a></li>
<li><a href="https://cs61a.org/">CS 61A: Structure and Interpretation of Computer Programs</a></li>
</ul>
<h4 id="python--tips">Python  Tips</h4>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-19-08.png" alt="weekly-review-19-08"  />
</p>
<p>本周订阅了 <a href="https://realpython.com/"><strong>Real Python</strong></a> 的 Python Tricks，收到两封邮件，分享如下：</p>
<p><strong>1、如何一行代码合并两个字典</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># How to merge two dictionaries</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in Python 3.5+</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">z</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">x</span><span class="p">,</span> <span class="o">**</span><span class="n">y</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">z</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># In Python 2.x you could</span>
</span></span><span class="line"><span class="cl"><span class="c1"># use this:</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">z</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">**</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">z</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># In these examples, Python merges dictionary keys</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in the order listed in the expression, overwriting </span>
</span></span><span class="line"><span class="cl"><span class="c1"># duplicates from left to right.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># See: https://www.youtube.com/watch?v=Duexw08KaC8</span>
</span></span></code></pre></div><blockquote>
<p><strong>说明：</strong></p>
<p>这段代码用于将两个字典 <code>x</code> 和 <code>y</code> 合并成一个新字典 <code>z</code>，其中 <code>**</code> 是 Python 中的解包运算符，可以将一个字典拆分成多个键值对，然后将这些键值对作为参数传递给一个函数或用于创建一个新的字典。</p>
<p>在这个例子中，<code>{**x, **y}</code> 表示将字典 <code>x</code> 和 <code>y</code> 拆分成多个键值对，然后将这些键值对合并成一个新字典。由于字典 <code>y</code> 中的键 <code>b</code> 与字典 <code>x</code> 中的键 <code>b</code> 相同，因此在合并后的字典中，键 <code>b</code> 对应的值将被更新为字典 <code>y</code> 中的值（即 <code>3</code>）。</p>
</blockquote>
<p>除了上面的方法之外，还可以使用 <code>update()</code> 方法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">z</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p>在上面的代码中，首先将字典 <code>x</code> 复制一份到 <code>z</code> 中，然后使用 <code>update()</code> 方法将字典 <code>y</code> 合并到 <code>z</code> 中。如果字典 <code>y</code> 中的键在字典 <code>x</code> 中已经存在，则会使用字典 <code>y</code> 中的值来更新字典 <code>z</code> 中的值。最终得到一个新字典 <code>z</code>，它包含了字典 <code>x</code> 和 <code>y</code> 中的所有键值对。</p>
</blockquote>
<p><strong>2、在 Python 中一次测试多个标志的不同方法</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Different ways to test multiple</span>
</span></span><span class="line"><span class="cl"><span class="c1"># flags at once in Python</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">z</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="mi">1</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># These only test for truthiness:</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">x</span> <span class="ow">or</span> <span class="n">y</span> <span class="ow">or</span> <span class="n">z</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">any</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span></code></pre></div><p>除了前面提到的四种方法外，还有其他几种方式来测试多个变量是否至少有一个等于某个值：</p>
<ol>
<li><strong>使用列表解析式</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">any</span><span class="p">([</span><span class="n">i</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)]):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p>在上面的代码中，使用列表解析式生成一个新列表，其中包含变量 <code>x</code>、<code>y</code>、<code>z</code> 中每个变量是否等于 1 的布尔值。然后，使用 <code>any()</code> 函数来测试新列表中是否存在至少一个为真的元素，如果存在，则条件为真，执行 <code>print()</code> 语句。</p>
</blockquote>
<ol start="2">
<li><strong>使用 <code>sum()</code> 函数</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">sum</span><span class="p">((</span><span class="n">i</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">))):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p>在上面的代码中，使用生成器表达式生成一个新的迭代器对象，其中包含变量 <code>x</code>、<code>y</code>、<code>z</code> 中每个变量是否等于 1 的布尔值。然后，将迭代器对象传递给 <code>sum()</code> 函数，它会将所有为真的元素加起来并返回一个整数。如果返回的整数大于 0，则条件为真，执行 <code>print()</code> 语句。</p>
</blockquote>
<ol start="3">
<li><strong>使用 <code>map()</code> 函数和 <code>any()</code> 函数</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">any</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">i</span><span class="p">:</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">))):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p>在上面的代码中，使用 <code>map()</code> 函数将一个匿名函数 <code>lambda i: i == 1</code> 应用于变量 <code>x</code>、<code>y</code>、<code>z</code> 中的每个元素，它会将每个元素与 1 进行比较并返回一个布尔值。然后，使用 <code>any()</code> 函数来测试返回的布尔值序列中是否存在至少一个为真的元素，如果存在，则条件为真，执行 <code>print()</code> 语句。</p>
</blockquote>
<ol start="4">
<li><strong>使用 <code>reduce()</code> 方法</strong></li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">reduce</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="ow">or</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">))):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;passed&#39;</span><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p>在上面的代码中，使用生成器表达式生成一个新的迭代器对象，其中包含变量 <code>x</code>、<code>y</code>、<code>z</code> 中每个变量是否等于 1 的布尔值。然后，使用 <code>reduce()</code> 函数将一个匿名函数 <code>lambda a, b: a or b</code> 应用于迭代器对象中的所有元素，它会将所有元素按照布尔逻辑 <code>or</code> 进行聚合，并返回一个布尔值。如果返回的布尔值为真，则条件为真，执行 <code>print()</code> 语句。</p>
</blockquote>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中。我写了一个 python 脚本从 memos读取最近一周的 memos 记录。</p>
<ul>
<li><strong>2023-05-10</strong> 一些非常有趣的python爬虫例子,对新手比较友好,主要爬取淘宝、天猫、微信、微信读书、豆瓣、QQ等网站。<a href="https://github.com/shengqiangzhang/examples-of-web-crawlers">查看链接</a>  <code>#memos</code> <code>#python</code> <code>#tool</code></li>
<li><strong>2023-05-08</strong> 这个网站整理了开发者的学习成长路线图，有比较详细的技能树，推荐学习内容等等，偏向开发者。 <a href="https://roadmap.sh/python">查看链接</a>  <code>#memos</code> <code>#tool</code></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>JSR 166规范</title>
      <link>https://blog.chensoul.com/posts/2023/05/18/jsr-166/</link>
      <pubDate>Thu, 18 May 2023 16:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/18/jsr-166/</guid>
      <description>JSR 介绍 JSR，全称 Java Specification Requests， 即Java规范提案， 主要是用于向 JCP(Java Community Process) 提出新增标准化技术规范的正式请求。每次 JAVA 版本更新都会有对应的 JSR</description>
      <content:encoded><![CDATA[<h2 id="jsr-介绍">JSR 介绍</h2>
<p>JSR，全称 Java Specification Requests， 即Java规范提案， 主要是用于向 JCP(Java Community Process) 提出新增标准化技术规范的正式请求。每次 JAVA 版本更新都会有对应的 JSR 更新，比如在 Java 8 版本中，其新特性 Lambda 表达式对应的是 <a href="http://jcp.org/en/jsr/detail?id=335">JSR 335</a>，新的日期和时间API对应的是 <a href="http://jcp.org/en/jsr/detail?id=310">JSR 310</a>。</p>
<p><a href="https://jcp.org/en/jsr/detail?id=166">JSR 166</a> 是 Doug Lea 提出的一个关于 Java 并发编程的规范提案。JDK1.5 之前，我们控制程序并发访问同步代码只能使用 synchronized，那个时候 synchronized 的性能还没优化好，性能并不好，控制线程也只能使用 Object 的 wait 和 notify 方法。这个时候 Doug Lea 给 JCP 提交了 JSR-166 的提案，在提交 JSR-166 之前，Doug Lea 已经使用了类似 J.U.C 包功能的代码已经三年多了，这些代码就是 J.U.C 的原型。</p>
<p>J.U.C，即 <code>java.util.concurrent</code> 的缩写，该包参考自EDU.oswego.cs.dl.util.concurrent，是JSR 166标准规范的一个实现。</p>
<ul>
<li>Doug Lea 主页：<a href="https://gee.cs.oswego.edu/">Doug Lea&rsquo;s Home Page</a></li>
<li>JSR-166：<a href="https://gee.cs.oswego.edu/dl/concurrency-interest/index.html">Concurrency JSR-166 Interest Site</a></li>
<li>JSR 166 Slider：<a href="https://gee.cs.oswego.edu/dl/concurrency-interest/jsr166-slides.pdf">JSR-166: Concurrency Utilities</a></li>
<li>java.util.concurrent JavaDoc: <a href="https://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/package-summary.html">JDK 1.5 </a>、 <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/package-summary.html">JDK 7 </a>、 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html">JDK 8 </a>、 <a href="https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/package-summary.html">JDK 9 </a></li>
</ul>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/jsr-166-concurrency-utilities.png" alt="jsr-166-concurrency-utilities"  />
</p>
<p>JSR-166 包括多个规范，每个规范都引入了一些新的接口和类，以下是详细描述：</p>
<ol>
<li><code>JSR-166（Java SE 5）</code>：定义了Java并发包的核心接口和类，包括 Executors 框架、Queues、Timing、Synchronizers、Concurrent Collections、Memory Consistency Properties、Atomic、Locks 等。这些接口和类提供了一种方便、高效、可扩展的方式来处理异步任务和并发编程。</li>
<li><code>JSR-166x（Java SE 7）</code>：定义了Java并发包中的一些新特性，包括 Phaser、TransferQueue、Exchanger、LinkedTransferQueue 等接口和类。其中 Phaser 支持分阶段执行任务，TransferQueue 和 LinkedTransferQueue 实现了高效的生产者-消费者模式，Exchanger 支持两个线程之间交换数据。</li>
<li><code>JSR-166y（Java SE 8）</code>：定义了Java并发包中的一些新特性，包括 StampedLock、CompletableFuture、LongAdder 等接口和类。其中 StampedLock 是一种乐观锁，支持读写分离，CompletableFuture 支持异步任务执行和结果处理，LongAdder 是一种高效的计数器。</li>
<li><code>JSR-166z（Java SE 9）</code>：定义了 Java 并发包中的一些新特性，包括 VarHandle、Fences 等接口和类。其中 VarHandle 提供了一种更加灵活的原子操作方式，Fences 提供了一些方法用于控制内存屏障。</li>
</ol>
<h2 id="juc">JUC</h2>
<p>java.util.concurrent 包下的类以及引入版本（没有标注版本号的为 <code>1.5</code> ）：</p>
<ul>
<li>java.util.concurrent
<ul>
<li>java.util.concurrent.locks
<ul>
<li>AbstractOwnableSynchronizer <code>1.6</code></li>
<li>AbstractQueuedLongSynchronizer <code>1.6</code></li>
<li>AbstractQueuedSynchronizer</li>
<li>Condition</li>
<li>Lock</li>
<li>LockSupport</li>
<li>ReadWriteLock</li>
<li>ReentrantLock</li>
<li>ReentrantReadWriteLock</li>
<li>StampedLock  <code>1.8</code></li>
</ul>
</li>
<li>java.util.concurrent.atomic
<ul>
<li>AtomicBoolean</li>
<li>AtomicInteger</li>
<li>AtomicIntegerArray</li>
<li>AtomicIntegerFieldUpdater</li>
<li>AtomicLong</li>
<li>AtomicLongArray</li>
<li>AtomicLongFieldUpdater</li>
<li>AtomicMarkableReference</li>
<li>AtomicReference</li>
<li>AtomicReferenceArray</li>
<li>AtomicReferenceFieldUpdater</li>
<li>AtomicStampedReference</li>
<li>DoubleAccumulator <code>1.8</code></li>
<li>DoubleAdder <code>1.8</code></li>
<li>LongAccumulator <code>1.8</code></li>
<li>LongAdder <code>1.8</code></li>
</ul>
</li>
<li>AbstractExecutorService</li>
<li>ArrayBlockingQueue</li>
<li>BlockingDeque <code>1.6</code></li>
<li>BlockingQueue</li>
<li>BrokenBarrierException</li>
<li>Callable</li>
<li>CancellationException</li>
<li>CompletableFuture  <code>1.8</code></li>
<li>CompletionException <code>1.8</code></li>
<li>CompletionService</li>
<li>CompletionStage <code>1.8</code></li>
<li>ConcurrentHashMap</li>
<li>ConcurrentLinkedDeque <code>1.7</code></li>
<li>ConcurrentLinkedQueue</li>
<li>ConcurrentMap</li>
<li>ConcurrentNavigableMap <code>1.6</code></li>
<li>ConcurrentSkipListMap <code>1.6</code></li>
<li>ConcurrentSkipListSet <code>1.6</code></li>
<li>CopyOnWriteArrayList</li>
<li>CopyOnWriteArraySet</li>
<li>CountDownLatch</li>
<li>CountedCompleter  <code>1.8</code></li>
<li>CyclicBarrier</li>
<li>Delayed</li>
<li>DelayQueue</li>
<li>Exchanger</li>
<li>ExecutionException</li>
<li>Executor</li>
<li>ExecutorCompletionService</li>
<li>Executors</li>
<li>ExecutorService</li>
<li>Flow <code>1.9</code></li>
<li>ForkJoinPool <code>1.7</code></li>
<li>ForkJoinTask <code>1.7</code></li>
<li>ForkJoinWorkerThread <code>1.7</code></li>
<li>Future</li>
<li>FutureTask</li>
<li>LinkedBlockingDeque <code>1.6</code></li>
<li>LinkedBlockingQueue</li>
<li>LinkedTransferQueue <code>1.7</code></li>
<li>Phaser <code>1.7</code></li>
<li>PriorityBlockingQueue</li>
<li>RecursiveAction <code>1.7</code></li>
<li>RecursiveTask <code>1.7</code></li>
<li>RejectedExecutionException</li>
<li>RejectedExecutionHandler</li>
<li>RunnableFuture</li>
<li>RunnableScheduledFuture</li>
<li>ScheduledExecutorService</li>
<li>ScheduledFuture</li>
<li>ScheduledThreadPoolExecutor</li>
<li>Semaphore</li>
<li>SubmissionPublisher <code>1.9</code></li>
<li>SynchronousQueue</li>
<li>ThreadFactory</li>
<li>ThreadLocalRandom <code>1.7</code></li>
<li>ThreadPoolExecutor</li>
<li>TimeoutException</li>
<li>TimeUnit</li>
<li>TransferQueue <code>1.7</code></li>
</ul>
</li>
</ul>
<p>大致可以分为以下几类：</p>
<ul>
<li>原子更新</li>
<li>锁和条件</li>
<li>线程池</li>
<li>并发容器</li>
<li>同步器</li>
</ul>
<p>在学习 <code>JUC</code> 之前我们需要了解 <code>CAS</code>，<code>AQS</code> 和 <code>Unsafe</code>。</p>
<ul>
<li>CAS：</li>
<li>AQS：</li>
<li>Unsafe：</li>
</ul>
<h2 id="cas">CAS</h2>
<p>CAS（<code>Compare and Swap</code>）是一种基于原子性操作的并发编程技术，常用于实现线程安全的数据结构和算法。CAS操作由三个参数组成：内存位置V、期望值A、新值B。当且仅当V的值等于A时，CAS操作才会将V的值设置为B，否则不做任何操作。它的实现原理可以简单概括为以下几个步骤：</p>
<ol>
<li>读取内存位置V的值，同时记录下该值的版本号或标记位。</li>
<li>检查内存位置V的值是否等于期望值A。如果相等，则执行第3步；否则，操作失败。</li>
<li>将新值B写入内存位置V，并更新其版本号或标记位。</li>
<li>返回操作结果。</li>
</ol>
<p>CAS操作是一种<code>乐观锁</code>机制，它不需要锁定整个共享资源，而是只针对需要修改的值进行原子性操作，从而避免了锁的竞争和开销。在执行CAS操作时，线程会对内存位置进行读取和写入，但同时也会检查内存位置的版本号或标记位，以保证操作的原子性和一致性。</p>
<p>需要注意的是，如果多个线程同时执行CAS操作，可能会出现ABA问题。例如，线程A读取内存位置V的值为A，然后线程B将V的值修改为B，最后线程B又将V的值修改为A。此时，线程A执行CAS操作时，会发现内存位置V的值还是A，虽然这个A的版本号或标记位与之前不同，但线程A并不知道V的值曾经被修改过，因此会将新值写入内存位置V，从而导致数据不一致。为了解决ABA问题，可以使用带有版本号或标记位的CAS操作，或者使用其他的并发编程技术，例如锁或读写锁。</p>
<p>Java中的<code>AtomicXXX</code>类实现了CAS操作，例如AtomicInteger、AtomicLong等。这些类提供了一组原子性操作方法，例如get()、set()、addAndGet()、compareAndSet()等，它们可以被多个线程安全地使用。</p>
<p>CAS操作虽然免去了锁的开销，但也存在一些问题。首先，CAS操作需要进行多次尝试，直到成功为止。如果并发程度较高，多个线程同时进行CAS操作，可能会导致大量的CAS操作失败，从而降低性能。其次，CAS操作只能保证单个变量的原子性操作，无法保证多个变量之间的操作的原子性，因此需要额外的措施来保证多个变量之间的一致性。</p>
<p>下面是一个使用AtomicInteger实现简单计数器的例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.atomic.AtomicInteger</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Counter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">AtomicInteger</span> <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">oldValue</span><span class="o">,</span> <span class="n">newValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">oldValue</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">newValue</span> <span class="o">=</span> <span class="n">oldValue</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">value</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">oldValue</span><span class="o">,</span> <span class="n">newValue</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">value</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>increment()</code> 方法使用do-while循环和<code>compareAndSet()</code>方法执行CAS操作来增加计数器的值。该方法重复使用<code>get()</code>方法读取计数器的当前值，计算新值，然后尝试使用<code>compareAndSet()</code>方法更新计数器。循环将继续，直到CAS操作成功并且计数器成功更新。</p>
<p><code>getValue()</code> 方法使用<code>get()</code>方法简单地返回计数器的当前值。</p>
<p>需要注意的是，在使用CAS操作时，需要小心处理潜在的ABA问题，其中共享变量的值可能在初始读取和更新尝试之间多次更改。一种处理方法是在共享变量中使用版本号或时间戳，以确保更新仅在值未更改的情况下成功。</p>
<p>ABA问题是在使用CAS（<code>Compare-and-Swap</code>）操作进行并发编程时经常遇到的一个问题。它发生在一个线程从共享内存位置读取一个值，然后另一个线程将该值更改为另一个值，最后又将其更改回原始值，从而使第一个线程的操作意外成功。</p>
<p>为了处理ABA问题，常用的方法是在共享内存位置中添加一个版本号或时间戳。版本号或时间戳可以在每次修改内存位置时进行递增或更新。这可以确保CAS操作不仅检查值，还检查内存位置的版本号或时间戳。</p>
<p>以下是使用版本号处理ABA问题的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.atomic.AtomicStampedReference</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcurrentStack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">AtomicStampedReference</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">top</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicStampedReference</span><span class="o">&lt;&gt;(</span><span class="kc">null</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">newHead</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;&gt;(</span><span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span><span class="o">[]</span> <span class="n">stampHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">oldHead</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">oldHead</span> <span class="o">=</span> <span class="n">top</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stampHolder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">newHead</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">oldHead</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">stampHolder</span><span class="o">[</span><span class="mi">0</span><span class="o">]++;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">top</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">oldHead</span><span class="o">,</span> <span class="n">newHead</span><span class="o">,</span> <span class="n">stampHolder</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">stampHolder</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">T</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">oldHead</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span><span class="o">[]</span> <span class="n">stampHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">do</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">oldHead</span> <span class="o">=</span> <span class="n">top</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">stampHolder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">oldHead</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">top</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">oldHead</span><span class="o">,</span> <span class="n">oldHead</span><span class="o">.</span><span class="na">next</span><span class="o">,</span> <span class="n">stampHolder</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">stampHolder</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">oldHead</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kd">final</span> <span class="n">T</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="nf">Node</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>ConcurrentStack</code> 类使用 <code>AtomicStampedReference</code> 存储栈顶节点。<code>AtomicStampedReference</code> 类存储值的引用和版本号，版本号在引用更改时进行更新。</p>
<p><code>push()</code> 方法使用新值创建一个新的 <code>Node</code>，然后尝试使用CAS操作将其推入栈中。循环将继续，直到CAS操作成功，节点成功推入栈中。</p>
<p><code>pop()</code> 方法尝试使用CAS操作从栈中弹出顶部节点。循环将继续，直到顶部节点成功弹出或栈为空为止。</p>
<p>通过使用具有版本号的 <code>AtomicStampedReference</code>，<code>ConcurrentStack</code> 类可以处理在并发操作中可能发生的ABA问题。</p>
<h2 id="aqs">AQS</h2>
<p>AQS（<code>AbstractQueuedSynchronizer</code>）是Java中用于实现同步器（如锁，信号量等）的框架，它提供了一些基本的同步操作，例如<code>获取锁</code>、<code>释放锁</code>、<code>等待条件</code>、<code>唤醒线程</code>等。</p>
<p>AQS的实现原理基于一个双向链表，用于维护等待线程的队列。当一个线程需要获取同步器时，它会首先尝试使用CAS操作来获取同步器，如果获取成功，则继续执行；如果获取失败，则将线程加入等待队列中，并将其挂起。当同步器释放时，它会唤醒等待队列中的一个或多个线程，并将它们从等待队列中移除，使它们可以继续执行。</p>
<p>AQS的等待队列是通过一个双向链表来实现的，每个节点代表一个等待线程，节点中包含了线程的状态以及等待条件等信息。等待队列中的节点是按照等待时间的先后顺序排列的，先等待的线程排在前面，后等待的线程排在后面。当一个线程被唤醒时，它会重新尝试获取同步器，如果获取成功，则继续执行；如果获取失败，则它会再次加入等待队列中，并将自己挂起。</p>
<p>AQS的具体实现是通过重写其内部的一些方法来实现的。例如，<code>tryAcquire()</code> 方法用于实现获取同步器的逻辑，它会首先尝试使用CAS操作来获取同步器，如果获取成功，则返回 true；否则返回 false。<code>tryRelease()</code> 方法用于实现释放同步器的逻辑，它会释放同步器，并唤醒等待队列中的一个或多个线程。<code>tryAcquireShared()</code> 和 <code>tryReleaseShared()</code> 方法则用于实现共享式同步器的逻辑，它们类似于 <code>tryAcquire()</code> 和 <code>tryRelease()</code> 方法，但是可以支持多个线程同时获取或释放同步器。</p>
<h2 id="unsafe">Unsafe</h2>
<p>Unsafe类是Java中一个非常特殊且强大的类，它提供了一些不安全的操作，例如直接操作内存、线程挂起和恢复等。Unsafe类是Java中少数几个不被公开支持的类之一，它主要被用于Java核心库和其他一些高级框架中，如Netty、Hadoop和Kafka等。</p>
<p>由于Unsafe类提供了一些不安全的操作，因此它的使用需要非常小心。如果不正确地使用Unsafe类，可能会导致程序崩溃或安全漏洞。因此，Java官方并不建议开发人员使用Unsafe类，而是建议开发人员使用更加安全和标准的Java API。</p>
<p>Unsafe类中一些常用的方法包括：</p>
<ol>
<li><code>allocateMemory(long size)</code>：分配一段指定大小的内存空间。</li>
<li><code>freeMemory(long address)</code>：释放指定地址的内存空间。</li>
<li><code>putXXX(Object target, long offset, XXX value)</code>：将指定类型的值写入目标对象的指定偏移量处。</li>
<li><code>getXXX(Object target, long offset)</code>：从目标对象的指定偏移量处读取指定类型的值。</li>
<li><code>park(boolean isAbsolute, long time)</code>：挂起当前线程，直到被其他线程唤醒或指定的时间到期。</li>
<li><code>unpark(Thread thread)</code>：恢复指定线程的运行。</li>
</ol>
<p>需要注意的是，Unsafe类中的大部分方法都是native方法，实现方式依赖于底层操作系统和硬件平台。这意味着Unsafe类中的方法在不同的平台上可能会有不同的行为，因此需要针对不同的平台进行测试和验证。</p>
<p>Java 9中官方提出了移除Sun.misc.Unsafe类，并在该版本中将该类标记为不推荐使用。然而，由于Unsafe类在Java语言生态中的应用非常广泛，许多框架和库都依赖于Unsafe类来实现高性能和低层次的操作。因此，在Java 9中，官方引入了jdk.internal.misc.Unsafe类来替代Sun.misc.Unsafe类的功能，以保持对Java生态中使用Unsafe类的支持。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记10：覆盖equals方法时应遵守的约定</title>
      <link>https://blog.chensoul.com/posts/2023/05/17/obey-the-general-contract-when-overriding-equals/</link>
      <pubDate>Wed, 17 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/17/obey-the-general-contract-when-overriding-equals/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：覆盖 equals 方法时应遵守的约定。 介绍 覆盖 equals 方法似乎很简单，但是有很多覆盖的方式</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：覆盖 equals 方法时应遵守的约定。</p>
<h2 id="介绍">介绍</h2>
<p>覆盖 equals 方法似乎很简单，但是有很多覆盖的方式会导致出错，而且后果可能非常严重。避免问题的最简单方法是不覆盖 equals 方法，在这种情况下，类的每个实例都只等于它自己。如果符合下列任何条件，就是正确的做法：</p>
<ul>
<li>
<p><strong>类的每个实例本质上都是唯一的。</strong> 对于像 Thread 这样表示活动实体类而不是值类来说也是如此。Object 提供的 equals 实现对于这些类具有完全正确的行为。</p>
</li>
<li>
<p><strong>该类不需要提供「逻辑相等」测试。</strong> 例如，<code>java.util.regex.Pattern</code> 可以覆盖 equals 来检查两个 Pattern 实例是否表示完全相同的正则表达式，但设计人员认为客户端不需要或不需要这个功能。在这种情况下，从 Object 继承的 equals 实现是理想的。</p>
</li>
<li>
<p><strong>超类已经覆盖了 equals，超类行为适合于这个类。</strong> 例如，大多数 Set 的实现从 AbstractSet 继承其对等实现，List 从 AbstractList 继承实现，Map 从 AbstractMap 继承实现。</p>
</li>
<li>
<p><strong>类是私有的或包私有的，并且你确信它的 equals 方法永远不会被调用。</strong> 如果你非常厌恶风险，你可以覆盖 equals 方法，以确保它不会意外调用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">throw</span> <span class="k">new</span> <span class="n">AssertionError</span><span class="o">();</span> <span class="c1">// Method is never called
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div></li>
</ul>
<p>什么时候覆盖 equals 方法是合适的？当一个类有一个逻辑相等的概念，而这个概念不同于仅判断对象的同一性（相同对象的引用），并且超类还没有覆盖 equals。对于值类通常是这样。值类只是表示值的类，例如 Integer 或 String。使用 equals 方法比较引用和值对象的程序员希望发现它们在逻辑上是否等价，而不是它们是否引用相同的对象。覆盖 equals 方法不仅是为了满足程序员的期望，它还使实例能够作为 Map 的键或 Set 元素时，具有可预测的、理想的行为。</p>
<p><strong>有一个表示状态的内部类。没有覆盖 equals 方法时，equals 的结果与 s1==s2 相同，为 false，即两者并不是相同对象的引用。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">class</span> <span class="nc">Status</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">String</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Status</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Status</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Status</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Status</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">==</span><span class="n">s2</span><span class="o">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p><strong>覆盖 equals 方法后，以业务逻辑来判断是否相同，具备相同 status 字段即为相同。在使用去重功能时，也以此作为判断依据。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">class</span> <span class="nc">Status</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">String</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">status</span><span class="o">,</span> <span class="o">((</span><span class="n">Status</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">status</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Status</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Status</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Status</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Status</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">==</span><span class="n">s2</span><span class="o">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>不需要覆盖 equals 方法的一种值类是使用实例控件来确保每个值最多只存在一个对象的类。枚举类型属于这一类。对于这些类，逻辑相等与对象标识相同，因此对象的 equals 方法函数与逻辑 equals 方法相同。</p>
<p>当你覆盖 equals 方法时，你必须遵守它的通用约定。以下是具体内容，来自 Object 规范：equals 方法实现了等价关系。它应有这些属性：</p>
<ul>
<li>反射性：对于任何非空的参考值 x，<code>x.equals(x)</code> 必须返回 true。</li>
<li>对称性：对于任何非空参考值 x 和 y，<code>x.equals(y)</code> 必须在且仅当 <code>y.equals(x)</code> 返回 true 时返回 true。</li>
<li>传递性：对于任何非空的引用值 x, y, z，如果 <code>x.equals(y)</code> 返回 true，<code>y.equals(z)</code> 返回 true，那么 <code>x.equals(z)</code> 必须返回 true。</li>
<li>一致性：对于任何非空的引用值 x 和 y, <code>x.equals(y)</code> 的多次调用必须一致地返回 true 或一致地返回 false，前提是不修改 equals 中使用的信息。</li>
<li>对于任何非空引用值 x，<code>x.equals(null)</code> 必须返回 false。</li>
</ul>
<p>除非你有数学方面的倾向，否则这些起来有点可怕，但不要忽略它！如果你违反了它，你的程序很可能会出现行为异常或崩溃，并且很难确定失败的根源。用 John Donne 的话来说，没有一个类是孤立的。一个类的实例经常被传递给另一个类。许多类（包括所有集合类）依赖于传递给它们的对象遵守 equals 约定。</p>
<p>既然你已经意识到了违反 equals 约定的危险，让我们详细讨论一下。好消息是，尽管表面上看起来很复杂，但其实并不复杂。一旦你明白了，就不难坚持下去了。</p>
<p>什么是等价关系？简单地说，它是一个操作符，它将一组元素划分为子集，子集的元素被认为是彼此相等的。这些子集被称为等价类。为了使 equals 方法有用，从用户的角度来看，每个等价类中的所有元素都必须是可互换的。现在让我们依次检查以下五个需求：</p>
<ul>
<li>
<p><strong>反射性</strong> ，第一个要求仅仅是说一个对象必须等于它自己。很难想象会无意中违反了这条规则。如果你违反了它，然后将类的一个实例添加到集合中，contains 方法很可能会说该集合不包含你刚才添加的实例。</p>
</li>
<li>
<p><strong>对称性</strong> ，第二个要求是任何两个对象必须在是否相等的问题上达成一致。与第一个要求不同，无意中违反了这个要求的情况不难想象。例如，考虑下面的类，它实现了不区分大小写的字符串。字符串的情况是保留的 toString，但忽略在 equals 的比较：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken - violates symmetry!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">CaseInsensitiveString</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">s</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">CaseInsensitiveString</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">s</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Broken - violates symmetry!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">CaseInsensitiveString</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(((</span><span class="n">CaseInsensitiveString</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="c1">// One-way interoperability!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">o</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>这个类中的 equals 方法天真地尝试与普通字符串进行互操作。假设我们有一个不区分大小写的字符串和一个普通字符串：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">CaseInsensitiveString</span> <span class="n">cis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CaseInsensitiveString</span><span class="o">(</span><span class="s">&#34;Polish&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;polish&#34;</span><span class="o">;</span>
</span></span></code></pre></div><p>正如预期的那样，<code>cis.equals(s)</code> 返回 true。问题是，虽然 CaseInsensitiveString 中的 equals 方法知道普通字符串，但是 String 中的 equals 方法对不区分大小写的字符串不知情。因此，<code>s.equals(cis)</code> 返回 false，这明显违反了对称性。假设你将不区分大小写的字符串放入集合中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">CaseInsensitiveString</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cis</span><span class="o">);</span>
</span></span></code></pre></div><p>此时 <code>list.contains(s)</code> 返回什么？谁知道呢？在当前的 OpenJDK 实现中，它碰巧返回 false，但这只是一个实现案例。在另一个实现中，它可以很容易地返回 true 或抛出运行时异常。一旦你违反了 equals 约定，就不知道当其他对象面对你的对象时，会如何表现。</p>
<blockquote>
<p><strong>contains 方法在 ArrayList 中的实现源码如下</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// ArrayList 的大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 保存 ArrayList 元素的容器，一个 Object 数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">transient</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">elementData</span><span class="o">;</span> <span class="c1">// non-private to simplify nested class access
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">contains</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">indexOf</span><span class="o">(</span><span class="n">o</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">int</span> <span class="nf">indexOf</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">indexOfRange</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">indexOfRange</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Object</span><span class="o">[]</span> <span class="n">es</span> <span class="o">=</span> <span class="n">elementData</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">es</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">es</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></blockquote>
</li>
</ul>
<p>​		为了消除这个问题，只需从 equals 方法中删除与 String 互操作的错误尝试。一旦你这样做了，你可以重构方法为一个单一的返回语句：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">o</span> <span class="k">instanceof</span> <span class="n">CaseInsensitiveString</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">CaseInsensitiveString</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">s</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p><strong>传递性</strong> ，equals 约定的第三个要求是，如果一个对象等于第二个对象，而第二个对象等于第三个对象，那么第一个对象必须等于第三个对象。同样，无意中违反了这个要求的情况不难想象。考虑向超类添加新的值组件时，子类的情况。换句话说，子类添加了一条影响 equals 比较的信息。让我们从一个简单的不可变二维整数点类开始：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">Point</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Point</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="n">Point</span><span class="o">)</span><span class="n">o</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>假设你想继承这个类，对一个点添加颜色的概念：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ColorPoint</span> <span class="kd">extends</span> <span class="n">Point</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Color</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ColorPoint</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="n">Color</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>equals 方法应该是什么样子？如果你完全忽略它，则实现将从 Point 类继承而来，在 equals 比较中颜色信息将被忽略。虽然这并不违反 equals 约定，但显然是不可接受的。假设你写了一个 equals 方法，该方法只有当它的参数是另一个颜色点，且位置和颜色相同时才返回 true：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken - violates symmetry!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">ColorPoint</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">o</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">ColorPoint</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">color</span> <span class="o">==</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这种方法的问题是，当你比较一个点和一个颜色点时，你可能会得到不同的结果，反之亦然。前者比较忽略颜色，而后者比较总是返回 false，因为参数的类型是不正确的。为了使问题更具体，让我们创建一个点和一个颜色点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Point</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ColorPoint</span> <span class="n">cp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ColorPoint</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
</span></span></code></pre></div><p>然后，<code>p.equals(cp)</code> 返回 true，而 <code>cp.equals(p)</code> 返回 false。当你做「混合比较」的时候，你可以通过让 <code>ColorPoint.equals</code> 忽略颜色来解决这个问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken - violates transitivity!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">Point</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// If o is a normal Point, do a color-blind comparison
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">ColorPoint</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// o is a ColorPoint; do a full comparison
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">o</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">ColorPoint</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">color</span> <span class="o">==</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这种方法确实提供了对称性，但牺牲了传递性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ColorPoint</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ColorPoint</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">Point</span> <span class="n">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ColorPoint</span> <span class="n">p3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ColorPoint</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLUE</span><span class="o">);</span>
</span></span></code></pre></div><p>现在，<code>p1.equals(p2)</code> 和 <code>p2.equals(p3)</code> 返回 true，而 <code>p1.equals(p3)</code> 返回 false，这明显违反了传递性。前两个比较是「色盲」，而第三个比较考虑了颜色。</p>
<p>同样，这种方法会导致无限的递归：假设有两个点的子类，比如 ColorPoint 和 SmellPoint，每个都使用这种 equals 方法。然后调用 <code>myColorPoint.equals(mySmellPoint)</code> 会抛出 StackOverflowError。</p>
<p>那么解决方案是什么？这是面向对象语言中等价关系的一个基本问题。<strong>除非你愿意放弃面向对象的抽象优点，否则无法继承一个可实例化的类并添加一个值组件，同时保留 equals 约定。</strong></p>
<p>你可能会听到它说你可以继承一个实例化的类并添加一个值组件，同时通过在 equals 方法中使用 getClass 测试来代替 instanceof 测试来保持 equals 约定：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken - violates Liskov substitution principle (page 43)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">getClass</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Point</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="n">Point</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">y</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>只有当对象具有相同的实现类时，才会产生相等的效果。这可能看起来不是很糟糕，但其后果是不可接受的：Point 的子类的实例仍然是一个 Point，并且它仍然需要作为一个函数来工作，但是如果采用这种方法，它就不会这样做！假设我们要写一个方法来判断一个点是否在单位圆上。我们可以这样做：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Initialize unitCircle to contain all Points on the unit circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">unitCircle</span> <span class="o">=</span> <span class="n">Set</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">Point</span><span class="o">(</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">Point</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">onUnitCircle</span><span class="o">(</span><span class="n">Point</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">unitCircle</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>虽然这可能不是实现功能的最快方法，但它工作得很好。假设你以一种不添加值组件的简单方式继承 Point，例如，让它的构造函数跟踪创建了多少实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CounterPoint</span> <span class="kd">extends</span> <span class="n">Point</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">AtomicInteger</span> <span class="n">counter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">CounterPoint</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">counter</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">numberCreated</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">counter</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Liskov 替换原则指出，类型的任何重要属性都应该适用于所有子类型，因此为类型编写的任何方法都应该在其子类型上同样有效。这是我们先前做的正式声明，即点的子类（如 CounterPoint）仍然是一个 Point，并且必须作为一个 Point。但假设我们传递了一个 CounterPoint 给 onUnitCircle 方法。如果 Point 类使用基于 getclass 的 equals 方法，那么不管 CounterPoint 实例的 x 和 y 坐标如何，onUnitCircle 方法都会返回 false。这是因为大多数集合，包括 onUnitCircle 方法使用的 HashSet，都使用 equals 方法来测试包含性，没有一个 CounterPoint 实例等于任何一个点。但是，如果你在 Point 上使用了正确的基于实例的 equals 方法，那么在提供对位实例时，相同的 onUnitCircle 方法就可以很好地工作。</p>
<blockquote>
<p><strong>里氏替换原则（Liskov Substitution Principle，LSP）面向对象设计的基本原则之一。里氏替换原则指出：任何父类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当衍生类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正被复用，而衍生类也能够在父类的基础上增加新的行为。</strong></p>
</blockquote>
</li>
</ul>
<p>虽然没有令人满意的方法来继承一个可实例化的类并添加一个值组件，但是有一个很好的解决方案：遵循的建议，「Favor composition over inheritance.」。给 ColorPoint 一个私有的 Point 字段和一个 public 视图方法，而不是让 ColorPoint 继承 Point，该方法返回与这个颜色点相同位置的点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Adds a value component without violating the equals contract
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ColorPoint</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Point</span> <span class="n">point</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Color</span> <span class="n">color</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ColorPoint</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="n">Color</span> <span class="n">color</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">point</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">    * Returns the point-view of this color point.
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Point</span> <span class="nf">asPoint</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">point</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">ColorPoint</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ColorPoint</span> <span class="n">cp</span> <span class="o">=</span> <span class="o">(</span><span class="n">ColorPoint</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cp</span><span class="o">.</span><span class="na">point</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">point</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">cp</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">color</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>Java 库中有一些类确实继承了一个可实例化的类并添加了一个值组件。例如，<code>java.sql.Timestamp</code> 继承 <code>java.util.Date</code> 并添加了纳秒字段。如果在同一个集合中使用时间戳和日期对象，或者以其他方式混合使用时间戳和日期对象，那么时间戳的 equals 实现确实违反了对称性，并且可能导致不稳定的行为。Timestamp 类有一个免责声明，警告程序员不要混合使用日期和时间戳。虽然只要将它们分开，就不会遇到麻烦，但是没有什么可以阻止你将它们混合在一起，因此产生的错误可能很难调试。时间戳类的这种行为是错误的，不应该效仿。</p>
<p>注意，你可以向抽象类的子类添加一个值组件，而不违反 equals 约定。这对于遵循中的建议而得到的类层次结构很重要，「Prefer class hierarchies to tagged classes.」。例如，可以有一个没有值组件的抽象类形状、一个添加半径字段的子类圆和一个添加长度和宽度字段的子类矩形。只要不可能直接创建超类实例，前面显示的那种问题就不会发生。</p>
<ul>
<li>
<p><strong>非无效性</strong> ，最后的要求没有一个正式的名称，所以我冒昧地称之为「非无效性」。它说所有对象都不等于 null。虽然很难想象在响应调用 <code>o.equals(null)</code> 时意外地返回 true，但不难想象意外地抛出 NullPointerException。一般约定中禁止这样做。许多类都有相等的方法，通过显式的 null 测试来防止它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个测试是不必要的。要测试其参数是否相等，equals 方法必须首先将其参数转换为适当的类型，以便能够调用其访问器或访问其字段。在执行转换之前，方法必须使用 instanceof 运算符来检查其参数的类型是否正确：</p>
<p>如果缺少这个类型检查，并且 equals 方法传递了一个错误类型的参数，equals 方法将抛出 ClassCastException，这违反了 equals 约定。但是，如果 instanceof 操作符的第一个操作数为空，则指定该操作符返回 false，而不管第二个操作数中出现的是什么类型。因此，如果传入 null，类型检查将返回 false，因此不需要显式的 null 检查。</p>
</li>
</ul>
<p>综上所述，这里有一个高质量构建 equals 方法的秘诀：</p>
<p>1、<strong>使用 == 运算符检查参数是否是对该对象的引用。</strong> 如果是，返回 true。这只是一种性能优化，但如果比较的代价可能很高，那么这种优化是值得的。</p>
<p>2、<strong>使用 instanceof 运算符检查参数是否具有正确的类型。</strong> 如果不是，返回 false。通常，正确的类型是方法发生的类。有时候，它是由这个类实现的某个接口。如果类实现了一个接口，该接口对 equals 约定进行了改进，以允许跨实现该接口的类进行比较，则使用该接口。集合接口，如 Set、List、Map 和 Map.Entry 具有此属性。</p>
<p>3、<strong>将参数转换为正确的类型。</strong> 因为在这个强制类型转换之前有一个实例测试，所以它肯定会成功。</p>
<p>4、<strong>对于类中的每个「重要」字段，检查参数的字段是否与该对象的相应字段匹配。</strong> 如果所有这些测试都成功，返回 true；否则返回 false。如果第 2 步中的类型是接口，则必须通过接口方法访问参数的字段；如果是类，你可以根据字段的可访问性直接访问它们。</p>
<p>对于类型不是 float 或 double 的基本类型字段，使用 == 运算符进行比较；对于对象引用字段，递归调用 equals 方法；对于 float 字段，使用 <code>static Float.compare(float,float)</code> 方法；对于 double 字段，使用 <code>Double.compare(double, double)</code>。float 和 double 字段的特殊处理是由于 <code>Float.NaN</code>、-0.0f 和类似的双重值的存在而必须的；请参阅 Float.equals<code>文档。虽然你可以将 float 和 double 字段与静态方法 Float.equals 和 Double.equals 进行比较，这将需要在每个比较上进行自动装箱，这将有较差的性能。对于数组字段，将这些指导原则应用于每个元素。如果数组字段中的每个元素都很重要，那么使用</code>Arrays.equals` 方法之一。</p>
<p>一些对象引用字段可能合法地包含 null。为了避免可能出现 NullPointerException，请使用静态方法 <code>Objects.equals(Object, Object)</code> 检查这些字段是否相等。</p>
<p>对于某些类，例如上面的 CaseInsensitiveString，字段比较比简单的 equal 测试更复杂。如果是这样，你可能希望存储字段的规范形式，以便 equals 方法可以对规范形式进行廉价的精确比较，而不是更昂贵的非标准比较。这种技术最适合于不可变类；如果对象可以更改，则必须使规范形式保持最新。</p>
<p>equals 方法的性能可能会受到字段比较顺序的影响。为了获得最佳性能，你应该首先比较那些更可能不同、比较成本更低的字段，或者理想情况下两者都比较。不能比较不属于对象逻辑状态的字段，例如用于同步操作的锁字段。你不需要比较派生字段（可以从「重要字段」计算），但是这样做可能会提高 equals 方法的性能。如果派生字段相当于整个对象的摘要描述，那么如果比较失败，比较该字段将节省比较实际数据的开销。例如，假设你有一个多边形类，你缓存这个区域。如果两个多边形的面积不相等，你不需要比较它们的边和顶点。</p>
<p><strong>写完 equals 方法后，问自己三个问题：它具备对称性吗？具备传递性吗？具备一致性吗？</strong> 不要只问自己，要编写单元测试来检查，除非使用 AutoValue（第 49 页）来生成 equals 方法，在这种情况下，你可以安全地省略测试。如果属性不能保持，请找出原因，并相应地修改 equals 方法。当然，equals 方法还必须满足其他两个属性（反射性和非无效性），但这两个通常会自己处理。</p>
<p>在这个简单的 PhoneNumber 类中，根据前面的方法构造了一个 equals 方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Class with a typical equals method
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">short</span> <span class="n">areaCode</span><span class="o">,</span> <span class="n">prefix</span><span class="o">,</span> <span class="n">lineNum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">PhoneNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">areaCode</span><span class="o">,</span> <span class="kt">int</span> <span class="n">prefix</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lineNum</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">areaCode</span> <span class="o">=</span> <span class="n">rangeCheck</span><span class="o">(</span><span class="n">areaCode</span><span class="o">,</span> <span class="mi">999</span><span class="o">,</span> <span class="s">&#34;area code&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">prefix</span> <span class="o">=</span> <span class="n">rangeCheck</span><span class="o">(</span><span class="n">prefix</span><span class="o">,</span> <span class="mi">999</span><span class="o">,</span> <span class="s">&#34;prefix&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">lineNum</span> <span class="o">=</span> <span class="n">rangeCheck</span><span class="o">(</span><span class="n">lineNum</span><span class="o">,</span> <span class="mi">9999</span><span class="o">,</span> <span class="s">&#34;line num&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">short</span> <span class="nf">rangeCheck</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">,</span> <span class="kt">int</span> <span class="n">max</span><span class="o">,</span> <span class="n">String</span> <span class="n">arg</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="n">arg</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="n">val</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="kt">short</span><span class="o">)</span> <span class="n">val</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="k">this</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">PhoneNumber</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">PhoneNumber</span> <span class="n">pn</span> <span class="o">=</span> <span class="o">(</span><span class="n">PhoneNumber</span><span class="o">)</span><span class="n">o</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">pn</span><span class="o">.</span><span class="na">lineNum</span> <span class="o">==</span> <span class="n">lineNum</span> <span class="o">&amp;&amp;</span> <span class="n">pn</span><span class="o">.</span><span class="na">prefix</span> <span class="o">==</span> <span class="n">prefix</span> <span class="o">&amp;&amp;</span> <span class="n">pn</span><span class="o">.</span><span class="na">areaCode</span> <span class="o">==</span> <span class="n">areaCode</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="o">...</span> <span class="c1">// Remainder omitted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>以下是一些最后的警告：</p>
<ul>
<li>
<p><strong>当你覆盖 equals 时，也覆盖 hashCode。</strong></p>
</li>
<li>
<p><strong>不要自作聪明。</strong> 如果你只是为了判断相等性而测试字段，那么遵循 equals 约定并不困难。如果你在寻求对等方面过于激进，很容易陷入麻烦。一般来说，考虑到任何形式的混叠都不是一个好主意。例如，File 类不应该尝试将引用同一文件的符号链接等同起来。值得庆幸的是，它不是。</p>
</li>
<li>
<p><strong>不要用另一种类型替换 equals 声明中的对象。</strong> 对于程序员来说，编写一个类似于这样的 equals 方法，然后花上几个小时思考为什么它不能正常工作是很常见的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Broken - parameter type must be Object!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">MyClass</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这里的问题是，这个方法没有覆盖其参数类型为 Object 的 Object.equals，而是重载了它。即使是普通的方法，提供这样一个「强类型的」equals 方法是不可接受的，因为它会导致子类中的重写注释产生误报并提供错误的安全性。</p>
<p>如本条目所示，一致使用 Override 注释将防止你犯此错误。这个 equals 方法不会编译，错误消息会告诉你什么是错误的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Still broken, but won’t compile
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">MyClass</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>编写和测试 equals （和 hashCode）方法很乏味，生成的代码也很单调。手动编写和测试这些方法的一个很好的替代方法是使用谷歌的开源 AutoValue 框架，它会自动为你生成这些方法，由类上的一个注释触发。在大多数情况下，AutoValue 生成的方法与你自己编写的方法基本相同。</p>
<p>IDE 也有生成 equals 和 hashCode 方法的功能，但是生成的源代码比使用 AutoValue 的代码更冗长，可读性更差，不会自动跟踪类中的变化，因此需要进行测试。也就是说，让 IDE 生成 equals（和 hashCode）方法通常比手动实现更可取，因为 IDE 不会出现粗心的错误，而人会。</p>
<p>总之，除非必须，否则不要覆盖 equals 方法：在许多情况下，从 Object 继承而来的实现正是你想要的。如果你确实覆盖了 equals，那么一定要比较类的所有重要字段，并以保留 equals 约定的所有 5 项规定的方式进行比较。</p>
</li>
</ul>
<h2 id="总结">总结</h2>
<p>《Effective Java》第三版的第10条内容讲解了在重写Java中的<code>equals</code>方法时，遵循通用协定的重要性。<code>equals</code>方法用于确定两个对象是否相等。</p>
<p>通用协定定义了<code>equals</code>方法必须具有以下特性：</p>
<ol>
<li>反射性：对于任何非空的<code>x</code>，<code>x.equals(x)</code>必须返回<code>true</code>。</li>
<li>对称性：对于任何非空引用<code>x</code>和<code>y</code>，如果<code>x.equals(y)</code>返回<code>true</code>，则<code>y.equals(x)</code>必须返回<code>true</code>。</li>
<li>传递性：对于任何非空引用<code>x</code>、<code>y</code>和<code>z</code>，如果<code>x.equals(y)</code>返回<code>true</code>并且<code>y.equals(z)</code>返回<code>true</code>，则<code>x.equals(z)</code>必须返回<code>true</code>。</li>
<li>一致性：对于任何非空引用<code>x</code>和<code>y</code>，多次调用<code>x.equals(y)</code>必须始终返回<code>true</code>或始终返回<code>false</code>，前提是在equals比较中使用的信息未被修改。</li>
<li>可空性：对于任何非空引用<code>x</code>，<code>x.equals(null)</code>必须返回<code>false</code>。</li>
</ol>
<p>在重写<code>equals</code>方法时，重要的是要确保满足这些特性。此外，建议遵循一些最佳实践，例如：</p>
<ol>
<li>
<p>比较前检查引用是否相同：如果两个对象引用相同，即它们指向同一个对象，那么它们一定相等。在比较两个对象之前，首先使用<code>==</code>运算符检查它们的引用是否相同，以提高效率。</p>
</li>
<li>
<p>比较对象类型：在比较两个对象之前，首先使用<code>instanceof</code>运算符检查它们是否属于同一个类。如果不是，那么它们不可能相等。这样可以避免在继承层次结构中出现问题。</p>
</li>
<li>
<p>比较每个重要字段：在比较两个对象时，需要比较它们的每个重要字段。对于基本类型字段，使用<code>==</code>运算符进行比较；对于对象引用字段，递归调用<code>Objects.equals()</code>方法比较；对于<code>float</code>和<code>double</code>类型的字段，使用<code>Float.compare</code>和<code>Double.compare</code>方法进行比较；对于数组字段，使用<code>Arrays.equals</code>方法进行比较。</p>
</li>
<li>
<p>覆盖<code>hashCode</code>方法：根据通用协定，如果两个对象相等，它们的<code>hashCode</code>值也必须相等。因此，在重写<code>equals</code>方法时，通常也需要重写<code>hashCode</code>方法，以确保对象的相等性被正确地判断，并且避免散列表中出现哈希冲突。</p>
</li>
<li>
<p>考虑使用<code>@Override</code>注释指示您正在覆盖<code>equals</code>方法。</p>
</li>
<li>
<p>不将<code>equals</code>方法定义为只接受特定类型的参数：<code>equals</code>方法的参数类型应该是<code>Object</code>类型，而不是具体的类或接口类型。这样可以确保<code>equals</code>方法可以比较任何类型的对象，而不仅仅是特定类型的对象。</p>
</li>
<li>
<p>不使用<code>getClass</code>方法比较对象类型：在比较两个对象的类型时，不应该使用<code>getClass</code>方法，而应该使用<code>instanceof</code>运算符。这是因为<code>getClass</code>方法可能会被子类重写，并返回不同的结果，从而导致比较结果出现问题。</p>
</li>
<li>
<p>不将<code>equals</code>方法与<code>==</code>运算符混淆：<code>equals</code>方法用于比较对象的内容，而<code>==</code>运算符用于比较对象的引用。在比较两个对象时，应该使用<code>equals</code>方法而不是<code>==</code>运算符。</p>
</li>
<li>
<p>不将<code>equals</code>方法与<code>compareTo</code>方法混淆：<code>equals</code>方法用于比较对象的内容，而<code>compareTo</code>方法用于比较对象的顺序。在比较两个对象时，应该使用适当的方法，避免混淆它们的作用。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git Flow分支模型和使用</title>
      <link>https://blog.chensoul.com/posts/2023/05/11/git-flow-model-and-usage/</link>
      <pubDate>Thu, 11 May 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/11/git-flow-model-and-usage/</guid>
      <description>介绍 Git Flow 是由Vincent Driessen在2010年提出的一种Git工作流。在这之前，Git没有一个明确的标准工作流，导致团队在使用Git</description>
      <content:encoded><![CDATA[<h2 id="介绍">介绍</h2>
<p><a href="https://nvie.com/posts/a-successful-git-branching-model/">Git Flow</a> 是由Vincent Driessen在2010年提出的一种Git工作流。在这之前，Git没有一个明确的标准工作流，导致团队在使用Git时往往会遇到一些问题，如分支管理、版本控制等。为了解决这些问题，Vincent Driessen提出了Git Flow分支模型，成为了Git在实际应用中的一种标准工作流。</p>
<p>随着时间的推移，Git Flow也在不断发展和完善。在2011年，Atlassian发布了SourceTree，这是一款图形化的Git客户端，支持Git Flow分支模型。在2013年，Git Flow的一些开发者发布了Git Flow AVH Edition，这是Git Flow的一个增强版本，提供了更多的功能和选项。此外，Git Flow还得到了其他开源工具和平台的支持，如GitHub、GitLab等。</p>
<h2 id="git-flow-分支模型">Git Flow 分支模型</h2>
<p>Git Flow分支模型定义了一种标准的Git分支模型，它将代码分为两个长期分支（master和develop）和三个短期分支（feature、release和hotfix），使得团队可以更好地管理代码的版本和发布。</p>
<p>以下是Git Flow分支模型的详细介绍：</p>
<ol>
<li>master分支
master分支是代码库的主分支，它包含了所有已发布的代码和版本。所有代码都应该在该分支上进行测试和验证，以确保代码的质量和稳定性。<code>master分支只能通过合并release或hotfix分支来更新</code>。</li>
<li>develop分支
develop分支是代码库的开发分支，它包含了所有开发中的代码和功能。所有新的代码都应该在该分支上进行开发和测试，以确保代码的可靠性和稳定性。<code>develop分支只能通过合并feature分支来更新</code>。</li>
<li>feature分支
feature分支是为开发新的功能或修复bug而创建的临时分支。<code>每个feature分支都是从develop分支分离出来的，开发完成后会合并回develop分支</code>。feature分支的命名应该清晰明确，以反映该分支所涉及的功能或问题。</li>
<li>release分支
release分支是为发布新版本而创建的临时分支。<code>每个release分支都是从develop分支分离出来的，发布完成后会合并回develop分支和master分支</code>。在release分支上可以进行一些小的修复和调整，以确保发布的代码的质量和稳定性。</li>
<li>hotfix分支
hotfix分支是为快速修复生产环境中的问题而创建的临时分支。每个hotfix分支都是从master分支分离出来的，修复完成后会合并回develop分支和master分支。<code>hotfix分支的优先级比其他分支更高，因为它们需要尽快修复生产环境中的问题。</code></li>
</ol>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/git-model@2x.png" alt="img"  />
</p>
<p>根据上面的理论，我们来实际操作一遍。首先，是 develop 分支创建一个 feature 分支。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout -b feature-test develop
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s2">&#34;feature-test&#34;</span>
</span></span></code></pre></div><p>将 feature 分支的修改合并到 develop 分支，然后删除 feature 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;develop&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git merge --no-ff feature-test
</span></span><span class="line"><span class="cl">Updating ea1b82a..05e9557
</span></span><span class="line"><span class="cl"><span class="o">(</span>Summary of changes<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git branch -d feature-test
</span></span><span class="line"><span class="cl">Deleted branch feature-test <span class="o">(</span>was 05e9557<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git push origin develop
</span></span></code></pre></div><p>合并分支时，添加<code>--no-ff</code> 参数和不添加的区别：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/merge-without-ff@2x.png" alt="img"  />
</p>
<p>从 develop 分支创建一个 release 分支，并将版本号改为 1.2 ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout -b release-1.2 develop
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s2">&#34;release-1.2&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ./bump-version.sh 1.2
</span></span><span class="line"><span class="cl">Files modified successfully, version bumped to 1.2.
</span></span><span class="line"><span class="cl">$ git commit -a -m <span class="s2">&#34;Bumped version number to 1.2&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>release-1.2 74d9424<span class="o">]</span> Bumped version number to 1.2
</span></span><span class="line"><span class="cl"><span class="m">1</span> files changed, <span class="m">1</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">1</span> deletions<span class="o">(</span>-<span class="o">)</span>
</span></span></code></pre></div><p>release 分支完成开发之后，将 release 分支合并到 master 分支，并创建一个标签：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout master
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;master&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.2
</span></span><span class="line"><span class="cl">Merge made by recursive.
</span></span><span class="line"><span class="cl"><span class="o">(</span>Summary of changes<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git tag -a 1.2
</span></span></code></pre></div><p>将 release 分支合并到 develop 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;develop&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.2
</span></span><span class="line"><span class="cl">Merge made by recursive.
</span></span><span class="line"><span class="cl"><span class="o">(</span>Summary of changes<span class="o">)</span>
</span></span></code></pre></div><p>最后删除 release 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git branch -d release-1.2
</span></span><span class="line"><span class="cl">Deleted branch release-1.2 <span class="o">(</span>was ff452fe<span class="o">)</span>.
</span></span></code></pre></div><p>对于 hoftfix 分支，操作步骤和 release 分支类似，故不在赘述。</p>
<h2 id="git-flow-工具">git-flow 工具</h2>
<p>git-flow 工具可以简化上面的操作步骤，关于 git-flow的介绍可以参考文章：<a href="https://jeffkreeftmeijer.com/git-flow/">Using git-flow to automate your git branching workflow</a>。</p>
<p>macos 上安装 git-flow：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install git-flow
</span></span></code></pre></div><p>git-flow 首先需要初始化，如果不存在 develop 分支，则会新建一个 develop 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow init
</span></span><span class="line"><span class="cl">No branches exist yet. Base branches must be created now.
</span></span><span class="line"><span class="cl">Branch name <span class="k">for</span> production releases: <span class="o">[</span>master<span class="o">]</span>
</span></span><span class="line"><span class="cl">Branch name <span class="k">for</span> <span class="s2">&#34;next release&#34;</span> development: <span class="o">[</span>develop<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">How to name your supporting branch prefixes?
</span></span><span class="line"><span class="cl">Feature branches? <span class="o">[</span>feature-<span class="o">]</span>
</span></span><span class="line"><span class="cl">Release branches? <span class="o">[</span>release-<span class="o">]</span>
</span></span><span class="line"><span class="cl">Hotfix branches? <span class="o">[</span>hotfix/<span class="o">]</span>
</span></span><span class="line"><span class="cl">Support branches? <span class="o">[</span>support/<span class="o">]</span>
</span></span><span class="line"><span class="cl">Version tag prefix? <span class="o">[]</span>
</span></span></code></pre></div><h3 id="feature-分支">feature 分支</h3>
<p>开发一个新功能，创建一个新分支 foo</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="err">$</span> <span class="nx">git</span> <span class="nx">flow</span> <span class="nx">feature</span> <span class="nx">start</span> <span class="nx">foo</span>
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#切换到develop分支,确保新的 feature 分支是基于最新的 develop 分支创建的。</span>
</span></span><span class="line"><span class="cl">$ git checkout -b feature-foo develop
</span></span></code></pre></div><p>取消正在进行中的功能分支，并且会将分支删除</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow feature delete foo
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git branch -D feature-foo
</span></span></code></pre></div><p>foo 功能自测通过后，合并到 develop</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow feature finish foo
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">//切换到 develop 分支
</span></span><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl">//将 feature-foo 分支中的更改合并到 develop 分支。 --no-ff 参数将保留 foo 分支的commit记录。
</span></span><span class="line"><span class="cl">$ git merge --no-ff feature-foo
</span></span><span class="line"><span class="cl">//删除已完成的分支
</span></span><span class="line"><span class="cl">$ git branch -d feature-foo
</span></span></code></pre></div><h3 id="release-分支">release 分支</h3>
<p>当所有新的功能和必要的修复已经被彻底的测试过了，那就开始生成一个新的 release , 在此之后不能添加新功能，只有错误修复、文档生成和其他面向发布的任务应该在该分支中进行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 1.0.0 是版本号</span>
</span></span><span class="line"><span class="cl">$ git flow release start 1.0.0
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 从 develop 分支 创建release分支</span>
</span></span><span class="line"><span class="cl">$ git checkout -b release-1.0.0 develop
</span></span></code></pre></div><p>取消正在进行中的发布分支，并且会将分支删除。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow release delete 1.0.0
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch -D release-1.0.0
</span></span></code></pre></div><p>添加完发布文档之后，完成 release</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow release finish 1.0.0
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#切换到 develop 分支。</span>
</span></span><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl"><span class="c1">#将 release-1.0.0 分支合并到 develop 分支，--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.0.0
</span></span><span class="line"><span class="cl"><span class="c1">#创建一个名为 1.0.0 的标签</span>
</span></span><span class="line"><span class="cl">$ git tag -a 1.0.0 -m <span class="s2">&#34;Release 1.0.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#切换到 master 分支。</span>
</span></span><span class="line"><span class="cl">$ git checkout master
</span></span><span class="line"><span class="cl"><span class="c1">#将 release-1.0.0 分支合并到 master 分支，--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff release-1.0.0
</span></span><span class="line"><span class="cl"><span class="c1">#删除 release-1.0.0 分支。</span>
</span></span><span class="line"><span class="cl">$ git branch -d release-1.0.0
</span></span></code></pre></div><h3 id="hotfixes-分支">Hotfixes 分支</h3>
<p>线上发生问题的时候，先回滚到之前的稳定版本，稳定局势
然后创建热修复分支开始改 BUG</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow hotfix start 1.0.1
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#从master分支 创建一个hotfix/1.0.1分支</span>
</span></span><span class="line"><span class="cl">$ git checkout -b hotfix/1.0.1 foo master
</span></span></code></pre></div><p>紧急修复完毕</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git flow hotfix finish 1.0.1
</span></span></code></pre></div><p>等价于</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#切换 master 分支</span>
</span></span><span class="line"><span class="cl">$ git checkout master
</span></span><span class="line"><span class="cl"><span class="c1">#合并热修复分支到master,--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff hotfix/ohno
</span></span><span class="line"><span class="cl"><span class="c1">#创建一个名为 1.0.1 的标签</span>
</span></span><span class="line"><span class="cl">$ git tag 1.0.1
</span></span><span class="line"><span class="cl"><span class="c1">#切换到 develop 分支</span>
</span></span><span class="line"><span class="cl">$ git checkout develop
</span></span><span class="line"><span class="cl"><span class="c1">#合并热修复分支到 develop ,--no-ff 选项以保留 feature 分支的 commit 记录</span>
</span></span><span class="line"><span class="cl">$ git merge --no-ff hotfix/1.0.1
</span></span><span class="line"><span class="cl"><span class="c1">#删除热修复分支</span>
</span></span><span class="line"><span class="cl">$ git branch -d hotfix/1.0.1
</span></span></code></pre></div><h2 id="git-flow-avh-edition">git-flow (AVH Edition)</h2>
<p>Git-flow (AVH Edition)是Git Flow的一个增强版本，由一些Git Flow的开发者开发和维护。Git-flow (AVH Edition)在保留Git Flow基本思想的前提下，增加了一些新的功能和选项，使得Git Flow更加灵活和适用于不同的团队和项目。</p>
<p>Git-flow (AVH Edition)的主要增强功能包括：</p>
<ol>
<li>支持git-flow init命令，可以在一个新的Git仓库中快速初始化Git Flow。</li>
<li>支持git flow feature pull命令，可以拉取其他团队成员的feature分支。</li>
<li>支持git flow feature publish命令，可以将feature分支发布到远程仓库。</li>
<li>支持git flow hotfix finish命令，可以在修复生产环境问题时自动合并到develop分支和master分支并发布新版本。</li>
<li>支持git flow support分支，可以为旧版本提供长期支持。</li>
<li>允许使用Hooks and Filters来扩展和自定义Git Flow的行为。</li>
</ol>
<p>除了以上功能之外，Git-flow (AVH Edition)还提供了更多的选项和配置，使得团队可以根据不同的需求和情况来自定义Git Flow的分支模型和工作流程。</p>
<h3 id="初始化">初始化</h3>
<p>使用下面命令初始化 git fow，<code>-d</code> 是可选参数，表示使用默认参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow init <span class="o">[</span>-d<span class="o">]</span>
</span></span></code></pre></div><h3 id="创建-featurereleasehotfixsupport--分支">创建 feature/release/hotfix/support  分支</h3>
<p>查看、开始、完成、删除 feature 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow feature
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># &lt;base&gt; 参数必须是分支名称，缺失时，默认为 develop 分支</span>
</span></span><span class="line"><span class="cl">git flow feature start &lt;name&gt; <span class="o">[</span>&lt;base&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git flow feature finish &lt;name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git flow feature delete &lt;name&gt;
</span></span></code></pre></div><p>发布或者跟踪 feature 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#如果当前在 feature/name 分支，则可以省略 &lt;name&gt; 参数</span>
</span></span><span class="line"><span class="cl">git flow feature publish &lt;name&gt;
</span></span><span class="line"><span class="cl">git flow feature track &lt;name&gt;
</span></span></code></pre></div><p>当 feature 分支发布之后，其他人可以拉取该分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git pull
</span></span><span class="line"><span class="cl">git checkout feature/&lt;name&gt;
</span></span></code></pre></div><p>类似地，查看、开始、完成、删除 release 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow release
</span></span><span class="line"><span class="cl">git flow release start &lt;name&gt; <span class="o">[</span>&lt;base&gt;<span class="o">]</span>
</span></span><span class="line"><span class="cl">git flow release finish &lt;name&gt;
</span></span><span class="line"><span class="cl">git flow release delete &lt;name&gt;
</span></span></code></pre></div><p>类似地，查看、开始、完成、删除 hotfix 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git flow hotfix
</span></span><span class="line"><span class="cl">git flow hotfix start &lt;name&gt; [&lt;base&gt;]
</span></span><span class="line"><span class="cl">git flow hotfix finish &lt;name&gt;
</span></span><span class="line"><span class="cl">git flow hotfix delete &lt;name&gt;
</span></span></code></pre></div><p>查看、开始 support 分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow support
</span></span><span class="line"><span class="cl">git flow support start &lt;name&gt; &lt;base&gt;
</span></span></code></pre></div><h3 id="hooks-和-filters">Hooks 和 Filters</h3>
<p>Git-flow (AVH Edition)允许使用Hooks and Filters来扩展和自定义Git Flow的行为。Hooks和Filters是Git Flow中的两个关键概念，它们可以在Git Flow的不同阶段执行自定义脚本或命令，从而实现Git Flow的高度定制化。</p>
<p>Hooks是一些脚本或命令，它们会在Git Flow的不同阶段被调用。Git Flow (AVH Edition)支持以下Hooks：</p>
<ol>
<li>git-flow-init: 该Hook会在git-flow init命令执行时被调用。</li>
<li>git-flow-feature-start: 该Hook会在创建新的feature分支时被调用。</li>
<li>git-flow-feature-finish: 该Hook会在完成feature分支时被调用。</li>
<li>git-flow-release-start: 该Hook会在创建新的release分支时被调用。</li>
<li>git-flow-release-finish: 该Hook会在完成release分支时被调用。</li>
<li>git-flow-hotfix-start: 该Hook会在创建新的hotfix分支时被调用。</li>
<li>git-flow-hotfix-finish: 该Hook会在完成hotfix分支时被调用。</li>
</ol>
<p>Filters是一些命令或参数，它们会在Git Flow的不同阶段被过滤或修改。Git Flow (AVH Edition)支持以下Filters：</p>
<ol>
<li>git-flow-feature-start-message: 可以用于修改feature分支创建时的提交信息。</li>
<li>git-flow-feature-finish-message: 可以用于修改feature分支完成时的提交信息。</li>
<li>git-flow-release-start-message: 可以用于修改release分支创建时的提交信息。</li>
<li>git-flow-release-finish-message: 可以用于修改release分支完成时的提交信息。</li>
<li>git-flow-hotfix-start-message: 可以用于修改hotfix分支创建时的提交信息。</li>
<li>git-flow-hotfix-finish-message: 可以用于修改hotfix分支完成时的提交信息。</li>
</ol>
<p>下面是一些使用Hooks和Filters的例子：</p>
<ol>
<li>使用git-flow-init Hook</li>
</ol>
<p>如果需要在执行git-flow init命令时执行一些自定义脚本，可以使用git-flow-init Hook。假设我们想在git-flow init命令执行时输出一些信息，可以在<code>.git/hooks/git-flow-init</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Executing git-flow-init Hook&#34;</span>
</span></span></code></pre></div><ol start="2">
<li>使用git-flow-feature-start Hook</li>
</ol>
<p>如果需要在创建新的feature分支时执行一些自定义脚本，可以使用git-flow-feature-start Hook。假设我们想在创建新的feature分支时自动为该分支设置一些默认值，可以在<code>.git/hooks/git-flow-feature-start</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Set default values for feature branch</span>
</span></span><span class="line"><span class="cl">git config branch.<span class="nv">$GIT_BRANCH_NAME</span>.some_config_value <span class="s2">&#34;default_value&#34;</span>
</span></span></code></pre></div><ol start="3">
<li>使用git-flow-feature-finish-message Filter</li>
</ol>
<p>如果需要修改feature分支完成时的提交信息，可以使用git-flow-feature-finish-message Filter。假设我们想在feature分支完成时强制要求填写提交信息，可以在<code>.git/config</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">gitflow</span> <span class="s2">&#34;feature&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">finishmessage</span> <span class="p">=</span> <span class="nx">Please</span> <span class="nx">provide</span> <span class="nx">a</span> <span class="nx">meaningful</span> <span class="nx">commit</span> <span class="nx">message</span> <span class="nx">for</span> <span class="nx">the</span> <span class="nx">feature</span> <span class="nx">branch</span>
</span></span></code></pre></div><ol start="4">
<li>使用 git-flow-hotfix-start Hook</li>
</ol>
<p>如果需要在创建新的hotfix分支时执行一些自定义脚本，可以使用git-flow-hotfix-start Hook。假设我们想在创建新的hotfix分支时自动为该分支设置一些默认值，可以在<code>.git/hooks/git-flow-hotfix-start</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Set default values for hotfix branch</span>
</span></span><span class="line"><span class="cl">git config branch.<span class="nv">$GIT_BRANCH_NAME</span>.some_config_value <span class="s2">&#34;default_value&#34;</span>
</span></span></code></pre></div><ol start="5">
<li>使用  git-flow-hotfix-finish Hook</li>
</ol>
<p>在<code>.git/hooks/git-flow-hotfix-finish</code>文件中添加以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># Update version number in package.json</span>
</span></span><span class="line"><span class="cl"><span class="nv">VERSION</span><span class="o">=</span><span class="k">$(</span>cat package.json <span class="p">|</span> jq -r <span class="s1">&#39;.version&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">NEW_VERSION</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$VERSION</span> <span class="p">|</span> awk -F. <span class="s1">&#39;{$NF++;print}&#39;</span> <span class="p">|</span> sed <span class="s1">&#39;s/ /./g&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;&#39;</span> <span class="s2">&#34;s/\&#34;version\&#34;: \&#34;</span><span class="nv">$VERSION</span><span class="s2">\&#34;/\&#34;version\&#34;: \&#34;</span><span class="nv">$NEW_VERSION</span><span class="s2">\&#34;/g&#34;</span> package.json
</span></span></code></pre></div><blockquote>
<p>该脚本用于修改前端项目中的版本号。</p>
</blockquote>
<h2 id="github-flow-模型">GitHub Flow 模型</h2>
<p>GitHub Flow是一种基于GitHub的分支模型和代码开发工作流程，它是一个简单而灵活的模型，在敏捷开发和持续交付方面具有很高的效率。相比于Git Flow，GitHub Flow更加适合团队和开发者进行快速迭代和快速上线。</p>
<p>GitHub Flow的分支模型非常简单：只有一个主分支（通常是master分支）和多个特性分支。主分支始终处于稳定状态并用于生产环境。每个特性分支用于开发新功能或修复bug，并在开发人员完成相应的开发和测试工作后合并到主分支中。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/github-flow.png" alt="github flow"  />
</p>
<p>GitHub Flow 遵循以下 6 条原则：</p>
<ol>
<li><code>master</code> 分支永远是随时可部署发布的</li>
<li>需求新增基于 <code>master</code> 分支，并创建一个语义化分支</li>
<li>定期推送本地分支到远端</li>
<li>合并到 <code>master</code> 需要提 <code>PR</code></li>
<li><code>PR</code> 一旦经过 <code>code review</code> 无误后即可合并到 <code>master</code></li>
<li><code>master</code> 一旦接收到合并请求，即可立即部署发布</li>
</ol>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/github-flow-whole.png" alt="github-flow-whole"  />
</p>
<p>GitHub Flow的代码开发工作流程如下：</p>
<ol>
<li>创建特性分支：从主分支中创建一个新的特性分支，用于开发新功能或修复bug。</li>
<li>开发和测试：在特性分支上进行开发和测试，确保代码符合质量标准，并通过自动化测试。</li>
<li>发起合并请求：将特性分支合并到主分支中，发起一个合并请求（pull request），并邀请其他开发者进行代码审查和讨论。</li>
<li>代码审查：其他开发者对代码进行审查和讨论，提出意见和建议，并确保代码符合质量标准和最佳实践。</li>
<li>合并代码：在经过审查和讨论后，将特性分支合并到主分支中，并将代码部署到生产环境。</li>
<li>部署代码：在合并到主分支后，使用自动化部署工具将代码部署到生产环境。</li>
</ol>
<h2 id="gitlab-flow-模型">Gitlab flow 模型</h2>
<p>GitLab Flow是一个基于GitLab的分支模型和开发工作流程，旨在支持敏捷开发和持续交付。</p>
<p><code>GitLab</code> 在 2014 年提出 <code>11</code> 条最佳实践，更多请点击<a href="https://about.gitlab.com/topics/version-control/what-are-gitlab-flow-best-practices/">这里</a>，其相对 <code>GitHub</code> 增加了环境分支，且代码必须由<code>上游</code>（<code>master</code>）向<code>下游</code>（<code>staging</code>）发展，并且针对持续发布和版本发布都提出了相应的准则，下面是其大致流程图：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/gilab-flow-cidi.png" alt="img"  />
</p>
<p>GitLab Flow的主要特点包括：</p>
<ol>
<li>简单的分支模型：GitLab Flow使用一个简单的分支模型，包括一个主分支（通常命名为“master”或“production”）和一个开发分支（通常命名为“develop”或“staging”）。特性分支从开发分支创建，并在特性或错误修复完成并通过测试后合并回开发分支中。</li>
<li>持续集成和交付：GitLab Flow强调持续集成和交付（CI/CD），这意味着每次对代码的更改都会自动构建、测试和部署到测试环境或生产环境（如果测试通过）。</li>
<li>代码审查：GitLab Flow鼓励进行代码审查，这意味着每次对代码的更改都会由至少一个其他开发人员进行审查，以确保其符合质量标准并不会引入任何安全漏洞。</li>
<li>合并请求：GitLab Flow使用合并请求来管理将代码更改合并到主分支的过程。合并请求允许开发人员在将更改合并到主分支之前对其进行审查和讨论。</li>
<li>环境管理：GitLab Flow提供高级的环境管理功能，允许团队创建和管理不同的开发、测试、暂存和生产环境。</li>
</ol>
<blockquote>
<p>GitLab Flow提供了高级的环境管理功能，可以帮助团队更好地管理不同的开发、测试、暂存和生产环境。以下是使用GitLab Flow进行环境管理的一些方法：</p>
<ol>
<li>创建不同的环境分支：在GitLab Flow中，可以为不同的环境创建分支。例如，可以创建一个名为“develop”的开发分支，一个名为“staging”的暂存分支，和一个名为“production”的生产分支。这些分支可以帮助团队更好地管理不同环境的代码，确保每个环境都有自己的代码版本。</li>
<li>配置环境变量：在GitLab中，可以为每个环境设置不同的环境变量。这些环境变量可以用于配置不同环境中的应用程序和服务，例如数据库连接字符串、API密钥等。通过设置正确的环境变量，可以确保应用程序在不同环境中正确运行。</li>
<li>自动化部署和测试：GitLab Flow支持自动化部署和测试，可以帮助团队更快地部署代码到不同环境中。可以使用GitLab的CI/CD管道来自动化测试和部署过程，并将代码推送到正确的环境分支中。</li>
<li>环境监控和报告：GitLab Flow还支持环境监控和报告功能，可以帮助团队更好地了解不同环境的运行状况和性能。可以使用GitLab的监控和报告工具来监视不同环境的性能指标、错误率等，并及时发现和解决问题。</li>
</ol>
</blockquote>
<p>GitLab Flow的分支模型如下：</p>
<ol>
<li>主分支：主分支始终处于稳定状态，并用于生产环境。在GitLab Flow中，主分支通常是master分支或production分支。</li>
<li>特性分支：特性分支用于开发新功能或修复bug，并从主分支中创建。在GitLab Flow中，特性分支通常以feature/或fix/为前缀。</li>
<li>集成分支：集成分支用于将特性分支集成到主分支中，并进行测试和部署。在GitLab Flow中，集成分支通常是develop分支或staging分支。</li>
<li>发布分支：发布分支用于将特性分支和集成分支的代码发布到生产环境中。在GitLab Flow中，发布分支通常是release/为前缀的分支。</li>
</ol>
<p>GitLab Flow的开发工作流程如下：</p>
<ol>
<li>创建特性分支：从主分支中创建一个新的特性分支，用于开发新功能或修复bug。</li>
<li>开发和测试：在特性分支上进行开发和测试，确保代码符合质量标准，并通过自动化测试。</li>
<li>合并到集成分支：将特性分支合并到集成分支中，并进行集成测试和自动化部署。</li>
<li>发布到生产环境：将集成分支的代码发布到生产环境中，并进行最终测试和部署。</li>
<li>合并到主分支：在发布到生产环境后，将集成分支合并到主分支中，并将代码部署到生产环境。</li>
</ol>
<p>GitLab Flow强调CI/CD集成和测试自动化，以确保代码质量和快速迭代。它还支持自动化部署和环境管理，以帮助开发人员更轻松地管理不同环境和部署代码。GitLab Flow是一个灵活和强大的开发工作流程，适用于各种类型的项目和团队。</p>
<h2 id="gitlab-flowgit-flow和github-flow">GitLab Flow、Git Flow和GitHub Flow</h2>
<p>GitLab Flow、Git Flow和GitHub Flow都是三种常见的基于Git的工作流程。下面是GitLab Flow与其他工作流程的主要区别：</p>
<ol>
<li>GitLab Flow与Git Flow的比较：</li>
</ol>
<ul>
<li>
<p>GitLab Flow比Git Flow更简单和更灵活。Git Flow有一个更复杂的分支模型，包含多个长期存在的分支，而GitLab Flow只使用几个主要分支和特性分支。</p>
</li>
<li>
<p>GitLab Flow强调持续集成和持续部署（CI/CD），鼓励频繁合并到主要分支。Git Flow更注重版本控制和发布管理。</p>
</li>
<li>
<p>GitLab Flow与GitLab内置的CI/CD管道更紧密地集成在一起，更容易自动化开发工作流程。</p>
</li>
</ul>
<ol start="2">
<li>GitLab Flow与GitHub Flow的比较：</li>
</ol>
<ul>
<li>GitLab Flow和GitHub Flow有许多相似之处，例如它们都以GitHub或GitLab作为中央仓库，使用特性分支进行开发。</li>
<li>GitLab Flow强调CI/CD集成和测试自动化，而GitHub Flow更注重代码审查和协作。</li>
<li>GitLab Flow还提供更高级的环境管理、部署和监控功能，更适合于大型、复杂的项目。</li>
</ul>
<p>总体而言，GitLab Flow比Git Flow更简单和更灵活，强调CI/CD集成和自动化。与GitHub Flow相比，GitLab Flow提供更高级的环境管理和部署功能，更适合于大型、复杂的项目。选择哪种工作流程最终取决于项目和开发团队的具体需求和要求。</p>
<h2 id="其他-flow">其他 flow</h2>
<ul>
<li>TrunkBased</li>
<li>OneFlow</li>
<li>AoneFlow</li>
</ul>
<h2 id="总结">总结</h2>
<p>目前公司代码部署在自建的 gitlab 上面，对于公司的项目，个人倾向于使用 git-flow 分支模型，并且使用 git-flow (AVH Edition) 来简化操作。</p>
<p>目前，我参与的大多数项目都是 java 项目并且使用 maven 进行构建。</p>
<p>在Maven项目中，可以使用Maven版本控制器来区分release版本和snapshot版本。</p>
<ul>
<li>
<p><strong>Release版本</strong></p>
<p>对于Git Flow中的release分支，通常用于为生产环境准备代码。</p>
<p>在Maven项目中，可以使用Maven Release插件来自动化创建和发布release版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn release:prepare
</span></span><span class="line"><span class="cl">mvn release:perform
</span></span></code></pre></div><p>使用这些命令，Maven Release插件会自动更新项目版本号、创建tag、构建release版本，并发布到Maven仓库中。发布的版本号不包含 <code>-SNAPSHOT</code> 后缀。</p>
<p>或者，使用 <code>mvn versions</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set -DnewVersion<span class="o">=</span>1.0.0-SNAPSHOT
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div></li>
<li>
<p><strong>Snapshot版本</strong></p>
<p>对于Git Flow中的feature和develop分支，通常用于开发和测试新功能或bug修复，这些分支使用snapshot版本。在Maven中，snapshot版本的版本号包含 <code>-SNAPSHOT</code> 后缀，表示当前版本是正在开发的版本。</p>
</li>
</ul>
<p>对于这些项目，git-flow 操作步骤如下：</p>
<p>1、初始化</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow init -d
</span></span></code></pre></div><p>2、开始 feature 分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow feature start <span class="nb">test</span>
</span></span></code></pre></div><p>设置maven项目中版本为 snapshot版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set -DnewVersion<span class="o">=</span>1.0.0-SNAPSHOT
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div><p>对于maven多模块项目，如果使用 revision 来统一定义版本号，则使用下面命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set-property -Dproperty<span class="o">=</span>revision -DnewVersion<span class="o">=</span>1.0.0-SNAPSHOT
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div><p>3、本地在 feature 分支上完成一些开发之后，完成 feature 分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow feature finish <span class="nb">test</span>
</span></span></code></pre></div><p>4、开始 release 分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow release start 1.0.0
</span></span></code></pre></div><p>5、本地在 release 分支上完成一些开发之后，完成 feature 分支</p>
<p>设置maven项目中版本为 release 版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set -DnewVersion<span class="o">=</span>1.0.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div><p>对于maven多模块项目，如果使用 revision 来统一定义版本号，则使用下面命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn versions:set-property -Dproperty<span class="o">=</span>revision -DnewVersion<span class="o">=</span>1.0.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mvn versions:commit
</span></span></code></pre></div><p>另外，对于多模块项目，需要在每个模块执行下面命令将 jar 推送到 maven 中央仓库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn deploy -DskipTests
</span></span></code></pre></div><p>然后完成分支：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git flow release finish 1.0.0
</span></span></code></pre></div><p>6、推送主分支和开发分支</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git push origin develop
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git checkout main
</span></span><span class="line"><span class="cl">git push origin main
</span></span></code></pre></div><p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-18｜导出豆瓣数据、Effective Java 3第二章总结</title>
      <link>https://blog.chensoul.com/posts/2023/05/10/weekly_review_18/</link>
      <pubDate>Wed, 10 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/10/weekly_review_18/</guid>
      <description>前言 本篇是对 2023-05-01 到 2023-05-07 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 继上周实现导出苹果接口数据之后，这周又实现了自动</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-05-01</code> 到 <code>2023-05-07</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>继上周实现导出苹果接口数据之后，这周又实现了自动导出豆瓣数据。此外，还萌生了导出每天阅读的数据的想法。奈何现在阅读 app 都需要收费，只能暂且搁置这个想法。</p>
<p>最近在学习 Python，于是将学习中做的笔记发布到了博客，这周发布了两篇文章，希望通过输出来倒逼输入，以此来快速掌握 python 编程并能开发一些项目。另外，计划在学完之后，继续学习 Rust 和 Go，甚至开始学习前端开发。</p>
<p>最近又一次更换了博客主题，主要出发点是想找一个简洁的主题，减少不必要的信息干扰，也不想花时间在修改主题上面。减少了菜单链接，顺手也修改了 <a href="/about/">关于</a> 页面的内容。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-18-01.png" alt="weekly-review-18-01"  />
</p>
<h2 id="导出豆瓣数据">导出豆瓣数据</h2>
<p>最近阅读了一篇文章 <a href="https://conge.livingwithfcs.org/2023/05/05/leaving-douban/">很认真的在考虑不再使用豆瓣这件事</a> ，于是使用<a href="https://github.com/lizheming/doumark-action"> lizheming/doumark-action</a> 导出豆瓣数据。</p>
<p>在我的 github 主页 <a href="https://github.com/chensoul/chensoul">https://github.com/chensoul/chensoul</a> 创建一个 workflow <a href="https://github.com/chensoul/chensoul/blob/main/.github/workflows/douban.yml">douban.yml</a> ，每隔一个小时同步一次豆瓣数据（读书、电影、音乐）到 <a href="https://github.com/chensoul/chensoul/tree/main/data">csv 文件</a>。拿到这些文件之后，就可以通过 html + css 渲染出来，类似这个页面 <a href="https://conge.livingwithfcs.org/books/">书影音</a>。等豆瓣数据增多之后，再考虑实现这个。</p>
<p>除此之外，之前还实现了通过 n8n 实时同步豆瓣数据到 memos 和 telegram：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-18-05.png" alt="weekly-review-18-05"  />
</p>
<p>通过 <a href="https://github.com/chensoul/chensoul/blob/main/build_readme.py">python 脚本 </a>获取最近10条记录，显示到 <a href="https://github.com/chensoul">我的 github 主页</a>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-18-06.png" alt="weekly-review-18-06"  />
</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 816 元，明细如下：</p>
<ul>
<li>5月1日：55元</li>
<li>5月2日：79元</li>
<li>5月3日：370元，其中270元加油</li>
<li>5月4日：136元，其中捐款50元</li>
<li>5月5日：12元</li>
<li>5月6日：100元，手机话费充值</li>
<li>5月7日：64元</li>
</ul>
<p>最近一直想统计一下工作和生活中的固定支出费用，于是今天花了点时间做了统计。没想到每年工作和生活中固定支出费用竟然达到了1529+6180=7709元。其中大块头是手机话费和停车位费用，手机话费是因为办理一个电信套餐送宽带和一部手机；停车位费用是因为今年买了车。</p>
<p>年费，总计：1529元</p>
<ul>
<li>Typora：89元</li>
<li>百度硬盘：178元，2024-01-28到期</li>
<li>快连VPN：374元，2024-01-16到期</li>
<li>搬瓦工VPS：640元，2024-01-14到期</li>
<li>1Password：248元，2023-08-17到期</li>
</ul>
<p>月费，总计：515*12=6180元</p>
<ul>
<li>
<p>手机话费：189元</p>
</li>
<li>
<p>停车位：320元</p>
</li>
<li>
<p>iCloud：6元</p>
</li>
</ul>
<h2 id="健身">健身</h2>
<p>本周 <a href="https://run.chensoul.com/">跑步</a> 记录如下，总计跑步34.37公里，其中周六第一次跑了12公里，比之前有所进步。遗憾的是，有两天没有跑步，导致连续跑步天数有中断。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-18-04.png" alt="weekly-review-18-04"  />
</p>
<p>从3月份开始跑步到5月，目前总共跑步距离达到了230公里。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-18-03.png" alt="weekly-review-18-03" style="width:50%;" />
<h2 id="工作">工作</h2>
<h3 id="effective-java-3-笔记">Effective Java 3 笔记</h3>
<p>本周写了两篇《Effective Java 3》的学习笔记，分别是：</p>
<ul>
<li><a href="/posts/2023/05/08/avoid-finalizers-and-cleaners/">《Effective Java 3》笔记8：避免使用终结器和清除器</a></li>
<li><a href="/posts/2023/05/08/prefer-try-with-resources-to-try-finally/">《Effective Java 3》笔记9：使用 try-with-resources 优于 try-finally</a></li>
</ul>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-18-02.png" alt="weekly-review-18-02"  />
</p>
<p>至此，《Effective Java 3》第二章学习完了，现在总结如下：</p>
<p>1、静态工厂方法代替构造函数</p>
<p>静态工厂方法是一种创建对象的方式，它们与构造器不同，具有明确的名称，并且可以返回任意类型的对象。静态工厂方法的优点包括：</p>
<ul>
<li>
<p>名称可以描述对象的含义，使得代码更加清晰易读；</p>
</li>
<li>
<p>静态工厂方法可以控制创建对象的方式，提高灵活性；</p>
</li>
<li>
<p>静态工厂方法可以缓存已创建的对象，避免创建重复对象，提高性能；</p>
</li>
<li>
<p>静态工厂方法可以返回任意类型的对象，而不仅仅是该类或者其子类的实例。</p>
</li>
</ul>
<p>2、使用构造器代替构造方法</p>
<p>当一个类需要多个参数时，可以使用构建器，将参数逐个设置，最后调用build方法构建对象。构建器的优点包括：</p>
<ul>
<li>
<p>可以避免长参数列表，使得代码更加清晰易读；</p>
</li>
<li>
<p>构建器可以强制要求必需的参数，提高代码的安全性；</p>
</li>
<li>
<p>构建器可以返回不可变对象，提高代码的线程安全性。</p>
</li>
</ul>
<p>3、使用私有构造函数或枚举类型创建单例</p>
<p>通过私有构造器或者枚举类型来实现Singleton，它们的优点包括：</p>
<ul>
<li>
<p>可以确保只有一个实例存在，提高代码的安全性；</p>
</li>
<li>
<p>可以缩小类的可访问性，提高代码的封装性；</p>
</li>
<li>
<p>可以让代码更加自然，避免使用静态方法和静态变量的限制。</p>
</li>
</ul>
<p>4、用私有构造函数使类不可实例化</p>
<p>使用私有构造函数强制实现不可实例化的主要原因是防止类被意外地实例化，以使代码更加健壮和可靠。在某些情况下，我们只需要使用类中的静态方法和静态字段，而不需要创建该类的实例。</p>
<p>5、依赖注入优于硬编码资源</p>
<p>使用依赖注入比硬编码资源的优点：</p>
<ol>
<li>可测试性：使用依赖注入，很容易创建和注入模拟对象进行测试。这样，我们可以将正在测试的组件隔离开来，并专注于测试其行为，而不必担心其依赖项的行为。</li>
<li>灵活性：使用依赖注入，我们可以轻松地用不同实现替换依赖项。这在需要更改组件的行为而不更改其代码时非常有用。</li>
<li>解耦：依赖注入有助于将组件与其依赖项解耦，使代码更加模块化并易于维护。</li>
<li>关注点分离：依赖注入将依赖项的创建和管理与组件本身分离，允许更清晰地分离关注点。</li>
</ol>
<p>6、避免创建不必要的对象</p>
<p>7、排除过时的对象引用</p>
<p>在代码中及时清理不再使用的对象引用，以避免内存泄漏和性能问题。当一个对象不再需要时，应该尽快将其引用设置为null，这样JVM可以及时回收它所占用的内存。</p>
<p>8、避免使用终结器和清除器</p>
<p>终结方法和清除方法是一种释放资源的方式，但是它们并不可靠，不应该依赖于它们来释放资源。应该使用try-with-resources结构或者显式的调用close方法来释放资源。</p>
<p>9、使用 try-with-resources 优于 try-finally</p>
<p><code>try-with-resources</code> 语句是 Java 7 中引入的一种新语法，主要目的是为了简化资源管理的代码，并确保资源被正确地关闭，避免了资源泄漏和异常处理的问题。</p>
<h3 id="python">Python</h3>
<ul>
<li><a href="/posts/2023/05/09/python-install-build-publish-run/">Python安装、构建、发布、下载和运行</a></li>
<li><a href="/posts/2023/05/09/python-package-and-env-management/">Python包和环境管理</a></li>
</ul>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中。我写了一个 python 脚本从 memos读取最近一周的 memos 记录。</p>
<ul>
<li><strong>2023-05-06</strong> git flow 模型的提出：<a href="https://nvie.com/posts/a-successful-git-branching-model/">查看链接</a>  gitflow-avh 是一个增强工具：<a href="https://github.com/petervanderdoes/gitflow-avh">查看链接</a>  <code>#git</code> <code>#tool</code> <code>#memos</code></li>
<li><strong>2023-05-06</strong> 又有哪家阅读管理网站可取代豆瓣读书 <a href="https://glennwoo.com/2022/07/29/about-reading-tracker-websites/">查看链接</a>  <code>#douban</code> <code>#memos</code></li>
<li><strong>2023-05-05</strong> 分享一些阅人经验：  1. 嘴巴太快的人，往往没什么城府。嘴巴太甜的人，不可以深交。 2. 话少的人往往是两个极端，要么真的简单，要么深不可测。 3. 性格写在脸上的人，人品不会太差。能够控制情绪的人，往往不是一般人。 4. 开口就说“我有一个朋友怎样怎样”的人，往往单纯没啥真本事。 5. 不喜欢麻烦别人的人，通常也不喜欢被别人麻烦。一个不懂拒绝的人，也是一个不懂应酬的人。 6. 如果一个人可以做到潇洒而不合群，这人多半是个老江湖。如果一个人因不合群特别不自在，这人多半是社会小白。 7. 看地位高的大佬推荐什么人、用什么人，那这个大佬就是什么样的人。 8. 越是做事小心翼翼的人，越容易得罪人。反而霸气点的人，往往都会有三分薄面。 9. 善于巴结讨好别人的人，最好不要与之深交，否则必受其累。 10. 看起来一本正经、不苟言笑、斯斯文文的人，往往都比较闷骚。 11. 能在一定位置上的人，无论你多么讨厌他，一定有他某些过人之处。 12. 能够在一段感情失败后，很快走出来的人，要么没有真心付出，要么理性得可怕。 13. 想知道一个人品行如何，可以观察一下他培养出来的孩子。 14. 高度自律的人，往往对别人的要求也很高。 15. 年少得志，太容易获得成功的人，往往容易栽跟头。如果能扛过去并吸取教训，将来的成就会更大，否则容易掉入深渊。 16. 面对恭维或羞辱都不动声色的人，肯定是城府极深的狠角色。这种人千万别乱得罪，否则受到的反击会很突然很猛烈，下场会很惨。 <code>#摘录</code> <code>#memos</code></li>
<li><strong>2023-05-05</strong>  WoodpeckerCI 是一个由社区维护的 DroneCI 分支，使用 Apache License 2.0 许可证发布。社区版进一步扩展了 pipeline 的功能特性、支持对文件路径设置 pipeline 执行条件，并且可以与 Gitea 实现紧密集成。不同的是，DroneCI 的配置文件是 .drone.yml，WoodpeckerCI 重命名为了 .woodpecker.yml。好在 WoodpeckerCI 也兼容 DroneCI 的配置文件，迁移起来并不会太麻烦。   <a href="https://github.com/woodpecker-ci/woodpecker">查看链接</a>  <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-04</strong> git-flow[实战系列]  <a href="https://blog.p2hp.com/archives/10929">查看链接</a>  <code>#memos</code> <code>#git</code> <code>#tool</code></li>
<li><strong>2023-05-04</strong> 在 Node.js 生态系统中查找积极维护和流行的库 <a href="https://nodejstoolbox.com/">查看链接</a>  <code>#web</code> <code>#nodejs</code> <code>#memos</code></li>
<li><strong>2023-05-04</strong> 可以用来取代UUID, 效率更高, 支持自定义字符集 <a href="https://github.com/ai/nanoid">查看链接</a>  <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-04</strong> unDraw: 一个可以免费使用的插图库, 优势: 可免费商用/支持直接改色 <a href="https://undraw.co/illustrations">查看链接</a>  <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-04</strong> 临时文件上传服务  文件传输工具，上传的文件只保留48小时，过期自动删除 <a href="https://sendfiles.online/">查看链接</a>  Pixeldrain 免费文件分享，免费每个文件最大20 GB per file，无广告。 <a href="https://pixeldrain.com/">查看链接</a>  TEMPORARY FILE HOSTING All uploaded files are automatically deleted after 60 minutes. <a href="https://tmpfiles.org/">查看链接</a>  Super simple file sharing! Upload as many files as you like up to 2 GB and get a link to share.（一次下载后，链接即过期） <a href="https://www.file.io/">查看链接</a>  Upload And Share (MP4, WEBM) Temporary Videos <a href="https://tempclip.com/">查看链接</a>  <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-04</strong> 适合编程时听的音乐  <a href="https://coderadio.freecodecamp.org/">查看链接</a>  <a href="https://www.programmersmusic.com/">查看链接</a>  <code>#memos</code> <code>#music</code></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python包和环境管理</title>
      <link>https://blog.chensoul.com/posts/2023/05/09/python-package-and-env-management/</link>
      <pubDate>Tue, 09 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/09/python-package-and-env-management/</guid>
      <description>发展历史 Python 包管理工具是 Python 生态系统中的一个重要组成部分，它们为 Python 开发者提供了方便、快捷的包管理方式。以下是 Python 包管理工具的发展历史概述： 1991 年：P</description>
      <content:encoded><![CDATA[<h2 id="发展历史">发展历史</h2>
<p>Python 包管理工具是 Python 生态系统中的一个重要组成部分，它们为 Python 开发者提供了方便、快捷的包管理方式。以下是 Python 包管理工具的发展历史概述：</p>
<ul>
<li>1991 年：Python 语言首次发布，Python 包管理工具还未出现。</li>
<li>1998 年：Python Distutils 工具发布，它是 Python 的第一个包管理工具，可以用于打包、安装和分发 Python 包。</li>
<li>2004 年：easy_install 工具发布，它是一种用于安装、升级和卸载 Python 包的工具，可以自动解析依赖关系并安装所需的其他包。</li>
<li>2007 年：pip 工具发布，它是 easy_install 的一个替代品，提供了更好的依赖项解析、升级和卸载功能，以及更好的用户体验。</li>
<li>2012 年：Python 软件基金会宣布，pip 将成为 Python 包管理生态系统中的标准工具，取代 easy_install。</li>
<li>2013 年：Wheel 格式发布，它是一种用于打包和分发 Python 包的格式，可以包含 C 扩展模块，并且支持多平台安装。</li>
<li>2018 年：PEP 517 和 518 发布，它们提供了一种新的 Python 包构建和分发标准，可以使包构建和分发变得更加简单和可靠。</li>
<li>2018 年：flit 工具发布，它是一种简单的 Python 包构建和分发工具，可以通过 pyproject.toml 文件来配置包的元数据和依赖项。</li>
<li>2019 年：poetry 工具发布，它是一种专注于依赖管理和项目构建的 Python 包管理工具，可以自动解析依赖关系、构建项目、生成 lock 文件等。</li>
<li>2020 年：PEP 621 发布，它是一种新的 Python 包元数据标准，可以用于定义 Python 包的元数据信息，如名称、版本、作者、许可证等。</li>
<li>2020 年：PEP 636 发布，它是一种新的 CPython 扩展模块元数据标准，可以用于定义 CPython 扩展模块的元数据信息，如名称、版本、作者、许可证等。</li>
<li>2021 年：flit 3 发布，它增加了对 PEP 621 和 PEP 636 的支持，可以使用 pyproject.toml 文件来定义 Python 包和 CPython 扩展模块的元数据信息。</li>
</ul>
<p>PyPA 是 Python Packaging Authority 的缩写，即 Python 包管理权威组织。PyPA 的目标是为 Python 社区提供一个标准的、易于使用的包管理工具和相关工具的生态系统，并提供相关的文档和规范。</p>
<p>PyPA 组织成立于 2013 年，由一些 Python 包管理工具的核心开发者组成。目前，PyPA 组织维护了一些 Python 包管理工具和相关工具的项目，包括：</p>
<ul>
<li><code>pip</code>: Python 包管理工具，用于安装和管理 Python 包。</li>
<li><code>setuptools</code>: Python 包构建和分发工具，用于打包和分发 Python 包。</li>
<li><code>wheel</code>: Python 包二进制分发格式，用于加快 Python 包的安装速度。</li>
<li><code>twine</code>: Python 包上传工具，用于将 Python 包上传到 PyPI 或其他包仓库。</li>
<li><code>virtualenv</code>: Python 虚拟环境工具，用于创建和管理 Python 虚拟环境。</li>
</ul>
<p>此外，PyPA 还制定了一些包管理的标准和规范，如：</p>
<ul>
<li><code>PEP 517</code> 和 <code>PEP 518</code>: 定义了 Python 包的构建规范和构建工具的接口规范。</li>
<li><code>PEP 440</code>: 定义了 Python 包版本号的语义化规范。</li>
<li><code>PEP 503</code>: 定义了 Python 包仓库的 URL 命名规范。</li>
<li><code>PEP 621</code>: 定义了 Python 包元数据的标准格式。</li>
</ul>
<p>PyPA 的工作对 Python 社区的包管理生态系统产生了重要的影响，使得 Python 包的构建、分发、安装和管理更加统一和规范。在使用 Python 包时，可以参考 PyPA 的相关工具和规范，以便更好地管理和使用 Python 包。</p>
<h3 id="distutils-发展历史">Distutils 发展历史</h3>
<p>Distutils 是 Python 生态系统中的第一个包管理工具，它为 Python 开发者提供了一种方便、快捷的包管理方式。以下是 Distutils 的发展历史概述：</p>
<ul>
<li>1998 年：Python 1.5.2 版本发布，它成为第一个具备模块打包功能的 Python 版本，但打包功能还比较简单。</li>
<li>1999 年：Distutils 工具发布，它是 Python 1.6 版本中的一个标准库，可以用于打包、安装和分发 Python 包。</li>
<li>2000 年：Distutils 0.9.1 版本发布，它增加了对 Windows 平台的支持，以及对 Python 2.0 版本的支持。</li>
<li>2002 年：Distutils 1.0 版本发布，它增加了对 Python 2.2 版本的支持，以及一些新特性和改进，如支持 C 扩展模块、支持自定义命令、支持打包多个模块等。</li>
<li>2007 年：setuptools 工具发布，它是 Distutils 的一个扩展，提供了更好的依赖项解析、升级和卸载功能，以及更好的插件机制和扩展性。</li>
<li>2013 年：Distutils 项目停止维护，它的代码被合并到 Python 标准库中，成为 Python 打包和分发的标准工具。</li>
</ul>
<p>总的来说，Distutils 是 Python 生态系统中第一个包管理工具，它为 Python 包的构建、打包、安装和分发提供了很多方便和支持。在其发展历史中，Distutils 不断更新迭代，增加了许多新特性和功能，以适应 Python 生态系统的变化和需求。尽管现在 Distutils 不再主动维护，但它的代码被集成到 Python 标准库中，仍然为 Python 包管理提供基础支持。</p>
<h3 id="easy_install-发展历史">easy_install 发展历史</h3>
<p>easy_install 是 Python 包管理工具之一，它的发展历史可以追溯到 2004 年，以下是 easy_install 的发展历史概述：</p>
<ul>
<li>2004 年：easy_install 首次发布，它是一种用于安装、升级和卸载 Python 包的工具，可以自动解析依赖关系并安装所需的其他包。</li>
<li>2005 年：easy_install 被纳入到 setuptools 中，成为 setuptools 的一部分。此时，easy_install 已经成为 Python 包管理生态系统中的一个核心工具。</li>
<li>2007 年：easy_install 0.6b1 发布，它引入了一些新的功能和改进，如对源码分发的支持、对 egg 格式的支持等。</li>
<li>2008 年：pip 工具发布，它是 easy_install 的一个替代品，提供了更好的依赖项解析、升级和卸载功能，以及更好的用户体验。</li>
<li>2012 年：Python 软件基金会宣布，pip 将成为 Python 包管理生态系统中的标准工具，取代 easy_install。</li>
</ul>
<p>总的来说，easy_install 是 Python 包管理生态系统中的一个重要工具，它为 Python 开发者提供了一种简单、方便的包管理方式。尽管 easy_install 的功能和性能在某些方面已经被 pip 和其他工具取代，但它仍然是 Python 包管理历史上的一个重要里程碑，对 Python 包管理工具的发展产生了积极的影响。</p>
<h3 id="setuptools-发展历史">Setuptools 发展历史</h3>
<p>setuptools 是由 Phillip J. Eby 开发的，它是 Python 的一个包管理工具，用于构建、分发和安装 Python 包。</p>
<p>Phillip J. Eby 是一位知名的 Python 社区成员和开源软件贡献者，他也是 Python Packaging Authority 的成员之一。在 2004 年，他开始开发 setuptools，这个项目的目标是为 Python 开发者提供一个更好、更方便的包管理工具，以替代原有的 distutils 工具。</p>
<p>setuptools 和 distutils 的主要区别在于 setuptools 提供了一些额外的功能，如自动发现依赖关系、支持命令扩展、支持 egg 包等。这些功能使得 Python 包的构建、分发和安装变得更加灵活和高效。</p>
<p>setuptools 从一开始就受到了 Python 社区的欢迎和支持，它的代码托管在 GitHub 上，并逐渐发展成为 Python 生态系统中使用最广泛的包管理工具之一。setuptools 也是许多其他 Python 工具和框架的基础，如 Flask、Django、numpy 等。</p>
<p>以下是 Setuptools 的发展历史概述：</p>
<ul>
<li>1994年：Python 1.0版本中没有 <code>setup.py</code>，安装 Python 包需要手动复制文件。随着 Python 的发展，用户需要更方便的方法来安装和管理包，因此开始出现了一些简单的自动化安装工具。</li>
<li>2000年：Distutils 是 Python1.6 官方的包管理工具，它提供了一组用于打包、构建和分发 Python 包的工具和命令。其中，<code>setup.py</code> 是 Distutils 的核心组件，用于定义和配置包的元数据、依赖项和入口点等信息。</li>
<li>2004 年：Setuptools 首次发布，它是 Distutils 的一个扩展，提供了一些额外的功能和扩展，如对 egg 格式的支持、对依赖项的管理、对命令扩展的支持等。</li>
<li>2008 年：Setuptools 0.6 发布，它引入了一些新的功能和改进，如对 Python 2.6 和 3.0 的支持、对 namespace packages 的支持等。</li>
<li>2010 年：Distribute 发布，它是 Setuptools 的一个分支，旨在提供更好的兼容性和易用性。Distribute 移除了一些过时的功能和选项，并添加了一些新的功能和扩展。</li>
<li>2013 年：Setuptools 0.7 发布，它借鉴了 Distribute 的一些设计和功能，并移除了一些过时的功能和选项。Setuptools 0.7 的语法与 Distribute 的语法相同。</li>
<li>2018 年：Setuptools 40.0 发布，它引入了一些新的功能和改进，并移除了一些过时的功能和选项。Setuptools 40.0 的语法与 Setuptools 0.7 相同。</li>
<li>2020 年：Setuptools 49.0 发布，它增加了对 Python 3.9 的支持，并引入了一些新的功能和改进，如对 GitLab 的支持、对环境变量的支持等。</li>
</ul>
<h3 id="setupcfg-发展历史">setup.cfg 发展历史</h3>
<p><code>setup.cfg</code> 文件是 Python 项目的元数据和构建选项的配置文件，它可以替代 <code>setup.py</code> 脚本来定义 Python 项目的元数据和构建选项。以下是 <code>setup.cfg</code> 的主要发展历史：</p>
<ul>
<li>Python 2.5：<code>setuptools</code> 扩展模块发布，引入了 <code>setup.cfg</code> 文件来定义项目的元数据和构建选项。</li>
<li>Python 3.1：<code>distutils2</code> 项目发布，旨在改进 <code>distutils</code> 模块的设计和实现，引入了 <code>setup.cfg</code> 文件作为定义项目元数据和构建选项的首选方式。</li>
<li>Python 3.4：<code>setuptools</code> 扩展模块被添加到 Python 标准库中，成为 <code>distutils</code> 的一部分，<code>setup.cfg</code> 文件成为标准的配置文件格式。</li>
</ul>
<p>随着 Python 的发展，<code>setup.cfg</code> 文件逐渐成为 Python 项目的标准配置文件格式。它提供了比 <code>setup.py</code> 脚本更简洁、更易于阅读和维护的配置方式，同时也更容易与其他工具集成。需要注意的是，<code>setup.cfg</code> 文件并不是必需的，如果没有指定该文件，则 <code>setuptools</code> 将默认使用 <code>setup.py</code> 脚本来定义项目的元数据和构建选项</p>
<h3 id="pyprojecttoml-发展历史">pyproject.toml 发展历史</h3>
<p><code>pyproject.toml</code> 是一个 TOML 格式的文件，用于定义 Python 项目的元数据和构建选项。它是 Python 中的一个新的标准文件，用于替代 <code>setup.py</code> 脚本和 <code>setup.cfg</code> 文件来定义和构建 Python 项目。以下是 <code>pyproject.toml</code> 的主要发展历史：</p>
<ul>
<li>PEP 517：该 PEP 提出了一个新的构建系统接口，用于替代 <code>setup.py</code> 和 <code>setup.cfg</code>，并引入了 <code>pyproject.toml</code> 文件作为定义 Python 项目的元数据和构建选项的标准文件格式。</li>
<li>PEP 518：该 PEP 提出了一种新的方式来定义项目的依赖关系，并引入了 <code>pyproject.toml</code> 文件作为标准的项目元数据文件格式。</li>
</ul>
<p>随着 PEP 517 和 PEP 518 的发布，<code>pyproject.toml</code> 文件逐渐成为 Python 项目的标准元数据文件格式。它提供了比 <code>setup.py</code> 脚本和 <code>setup.cfg</code> 文件更灵活、更易于配置和扩展的方式，同时也更容易与构建工具和依赖管理器集成。需要注意的是，<code>pyproject.toml</code> 文件只在使用 PEP 517 和 PEP 518 规范的构建工具中才会被识别和使用。</p>
<p>总之，<code>pyproject.toml</code> 文件是 Python 项目的标准元数据和构建选项的配置文件，它提供了比 <code>setup.py</code> 脚本和 <code>setup.cfg</code> 文件更灵活、更易于配置和扩展的方式，成为了 Python 项目的标准元数据文件格式。</p>
<h3 id="pip-发展历史">Pip 发展历史</h3>
<p>在 Python 中，pip 和 setuptools 是两个常用的包管理工具，它们在安装和管理 Python 包方面发挥着重要作用。</p>
<p>pip 是由 Ian Bicking 和其他 Python 社区成员开发的，它是 Python 的包管理器之一，用于在 Python 程序中安装和管理软件包。</p>
<p>Ian Bicking 是一位 Python 程序员和开源软件贡献者，他还是 Pylons 和 Paste 等框架的创始人之一。在 2008 年，他开始开发 pip，这个项目的目标是为 Python 社区提供一个更好、更易用的包管理器，以替代原有的 easy_install 工具。</p>
<p>pip 从一开始就受到了 Python 社区的欢迎和支持，它的代码托管在 GitHub 上，并逐渐发展成为 Python 生态系统中使用最广泛的包管理器之一。pip 支持从 PyPI（Python Package Index）等源中下载和安装 Python 包，并自动处理包之间的依赖关系，使得 Python 包的管理变得更加简单和高效。</p>
<p>目前，pip 已经成为了 Python 官方推荐的包管理器，并且已经集成到 Python 2.7.9 和 Python 3.4 以及更高版本中，可以直接使用，无需额外安装。</p>
<p>pip 与 setuptools 有密切的关系，因为它使用 setuptools 来构建和安装 Python 包。</p>
<p>setuptools 是一个 Python 包的构建和分发工具，它提供了一组 API 来定义、构建和打包 Python 包。setuptools 可以自动生成 setup.py 文件，这个文件描述了 Python 包的元数据和依赖关系，以便 pip 和其他工具可以使用它来安装和管理包。</p>
<p>在安装和管理 Python 包时，pip 会使用 setuptools 来解决依赖关系、构建和安装包。pip 会在下载包之前检查包的依赖关系，并使用 setuptools 来安装这些依赖项。如果包需要进行构建，pip 也会使用 setuptools 来构建它们</p>
<p>以下是 pip 的发展历史概述：</p>
<ul>
<li>2008 年：pip 首次发布，它是 easy_install 的一个替代品，提供了更好的依赖项解析、升级和卸载功能，以及更好的用户体验。</li>
<li>2011 年：pip 正式成为 Python 包管理的标准工具之一，并被纳入到 Python 2.7 和 Python 3.2 中。</li>
<li>2013 年：pip 1.4 发布，它引入了一些新的功能和改进，如对 wheel 格式的支持、对安装源的优化等。</li>
<li>2016 年：pip 8.0 发布，它引入了一些新的功能和改进，如对 hash 校验的支持、对源索引的优化等。</li>
<li>2018 年：pip 18.0 发布，它引入了一些新的功能和改进，如对 Python 3.7 的支持、对源索引的改进等。</li>
<li>2020 年：pip 20.0 发布，它引入了一些新的功能和改进，如对 Python 3.8 的支持、对源索引的优化等。</li>
</ul>
<h3 id="wheel-发展历史">Wheel 发展历史</h3>
<p>Wheel 是 Python 包分发的一种格式，它的发展历史可以追溯到 2012 年，以下是 Wheel 的发展历史概述：</p>
<ul>
<li>
<p>2012 年：Wheel 首次提出，它的目标是提供一种更快、更可靠、更简单的 Python 包分发格式，以取代旧的 egg 格式。</p>
</li>
<li>
<p>2013 年：Wheel 1.0 发布，它引入了一些新的功能和改进，如对 namespace packages 的支持、对多平台支持的改进等。</p>
</li>
<li>
<p>2014 年：Wheel 0.24 发布，它引入了一些新的功能和改进，如对 Python 3.4 的支持、对源码分发的改进等。</p>
</li>
<li>
<p>2016 年：Wheel 0.29 发布，它引入了一些新的功能和改进，如对 Python 3.6 的支持、对源码分发的改进等。</p>
</li>
<li>
<p>2018 年：Wheel 0.31 发布，它引入了一些新的功能和改进，如对 Python 3.7 的支持、对源码分发的改进等。</p>
</li>
<li>
<p>2020 年：Wheel 0.35 发布，它引入了一些新的功能和改进，如对 Python 3.9 的支持、对源码分发的改进等。</p>
</li>
</ul>
<p>Egg 是 Python 包分发格式之一，它的全称是 Easy Install Package，是由 setuptools 提供的一种打包和安装 Python 包的格式。Egg 格式早期是作为 Python 包管理工具 easy_install 的默认格式而出现的，但现在已逐渐被 Wheel 格式取代。</p>
<p>Egg 格式的文件扩展名为 .egg，它是一个压缩文件，可以包含 Python 模块、资源文件、文档等。与其他 Python 包分发格式相比，Egg 格式具有以下特点：</p>
<ul>
<li>Egg 格式的文件可以被 easy_install 直接安装，无需解包。</li>
<li>Egg 格式支持 Python 2.x 和 Python 3.x 的跨版本安装。</li>
<li>Egg 格式支持多版本安装，可以在同一台机器上同时安装多个版本的同一 Python 包。</li>
</ul>
<p>虽然 Egg 格式曾经是 Python 包分发生态系统中的一个重要组成部分，但是随着 setuptools 的发展和 Wheel 格式的出现，Egg 格式已经逐渐被取代。现在大部分 Python 包都已经使用 Wheel 格式进行分发，因为它比 Egg 格式更快、更可靠、更灵活，并且能够支持更多的 Python 版本和平台。</p>
<p>Wheel 是 Python 包分发格式之一，它的全称是 Python Wheel Package，是由 Python 社区提供的一种打包和安装 Python 包的格式。与其他 Python 包分发格式相比，Wheel 格式具有以下特点：</p>
<ul>
<li>Wheel 格式的文件扩展名为 .whl，它是一个压缩文件，可以包含 Python 模块、资源文件、文档等。</li>
<li>Wheel 格式支持 Python 2.x 和 Python 3.x 的跨版本安装。</li>
<li>Wheel 格式可以包含 C 扩展模块，因此可以在安装时直接编译和安装 C 扩展模块，而不需要使用其他工具。</li>
<li>Wheel 格式支持多平台安装，即可以在 Windows、Linux、macOS 等不同的操作系统上安装同一个 Wheel 包。</li>
<li>Wheel 格式的安装速度比 Egg 格式快，因为它使用了更简单、更快速的算法。</li>
<li>Wheel 格式可以通过 pip 工具直接安装，无需使用其他 Python 包管理工具。</li>
</ul>
<h2 id="twine-发展历史">Twine 发展历史</h2>
<p>Twine 是 Python 生态系统中的一个包管理工具，它主要用于将打包好的 Python 包上传到 PyPI（Python Package Index）等包仓库中。以下是 Twine 的发展历史概述：</p>
<ul>
<li>2015 年：Twine 工具发布，它是一个用于上传 Python 包到 PyPI 的命令行工具，支持 GPG 签名和 HTTPS 传输。</li>
<li>2016 年：Twine 1.4 版本发布，它增加了对 Wheel 包格式的支持，以及一些新特性和改进，如支持多个 PyPI 仓库、支持检查包重复上传等。</li>
<li>2017 年：Twine 1.8 版本发布，它增加了对 PEP 517 和 PEP 518 的支持，以及一些新特性和改进，如支持源码安装、支持上传多个包文件等。</li>
<li>2018 年：Twine 1.12 版本发布，它增加了对 Python 3.7 和 PyPI 的新特性的支持，以及一些新特性和改进，如支持使用环境变量配置 PyPI 仓库、支持使用 .pypirc 文件配置认证信息等。</li>
<li>2020 年：Twine 3.2 版本发布，它移除了 Python 2 的支持，增加了对 Python 3.9 的支持，以及一些新特性和改进，如支持使用 twine check 命令检查包是否符合 PyPI 标准、支持使用 twine register 命令在 PyPI 中注册项目等。</li>
</ul>
<h2 id="virtualenv-发展历史">virtualenv 发展历史</h2>
<p>Virtualenv 是 Python 生态系统中的一个重要工具，它提供了一种在单个系统中运行多个独立 Python 环境的方式。</p>
<p>Virtualenv 是由 Ian Bicking 开发的，它是一个 Python 虚拟环境管理工具。Ian Bicking 是一位 Python 程序员和开源软件贡献者，他还是 Pylons 和 Paste 等框架的创始人之一。</p>
<p>Virtualenv 的第一个版本于 2007 年发布，它的主要目的是为了解决 Python 包依赖性的问题。在 Python 中，不同的项目可能需要不同的 Python 版本和依赖包，而这些依赖包可能会相互冲突。Virtualenv 可以创建一个隔离的 Python 环境，使得每个项目都可以独立地安装和使用其所需的 Python 版本和依赖包，从而避免了冲突问题。</p>
<p>在 Virtualenv 发布之后，它很快成为了 Python 开发社区中的一个重要工具，受到了广泛的关注和使用。Virtualenv 后来也被集成到了 Python 官方的文档中，并且有许多其他的虚拟环境管理工具，如 Pyenv 和 Conda，也是基于 Virtualenv 的思想和实现方式开发的。</p>
<p>以下是 Virtualenv 的发展历史概述：</p>
<ul>
<li>2007 年：Virtualenv 工具发布，它是一个用于创建独立 Python 环境的工具，可以避免不同项目之间的依赖冲突。</li>
<li>2009 年：Virtualenvwrapper 工具发布，它是 Virtualenv 的一个扩展，提供了更好的虚拟环境管理方式，如创建、切换、删除虚拟环境等。</li>
<li>2010 年：Virtualenv 1.5 版本发布，它增加了对 Python 3 的支持，以及一些新特性和改进，如支持使用 requirements.txt 文件安装依赖、支持使用 pip 安装包等。</li>
<li>2011 年：Virtualenv 1.6 版本发布，它增加了对 Python 3.2 的支持，以及一些新特性和改进，如支持使用 -p 选项指定 Python 解释器、支持使用 &ndash;system-site-packages 选项共享系统 Python 包等。</li>
<li>2013 年：Virtualenv 1.10 版本发布，它增加了对 Python 3.3 的支持，以及一些新特性和改进，如支持使用 &ndash;always-copy 选项复制依赖包、支持使用 &ndash;clear 选项清空虚拟环境等。</li>
<li>2017 年：Virtualenv 16.0 版本发布，它增加了对 Python 3.6 和 pip 10 的支持，以及一些新特性和改进，如支持使用 &ndash;upgrade 选项更新包、支持使用 &ndash;prompt 选项设置虚拟环境提示符等。</li>
<li>2018 年：Virtualenv 16.1 版本发布，它增加了对 Python 3.7 的支持，以及一些新特性和改进，如支持使用 &ndash;creator 选项指定创建虚拟环境的方式、支持使用 &ndash;verbose 选项显示详细信息等。</li>
<li>2019 年：Virtualenv 16.7.0 版本发布，它增加了对 Python 3.8 的支持，以及一些新特性和改进，如支持使用 &ndash;system-site-packages 选项共享系统 Python 包、支持使用 &ndash;copies 选项复制依赖包等。</li>
<li>2020 年：Virtualenv 20.0.0 版本发布，它增加了对 Python 3.9 和 pip 20 的支持，以及一些新特性和改进，如支持使用 &ndash;prompt-cmd 选项设置虚拟环境提示符、支持使用 &ndash;no-pip 选项创建不包含 pip 的虚拟环境等。</li>
<li>2021 年：Virtualenv 20.8.1 版本发布，它增加了对 Python 3.10 的支持，以及一些新特性和改进，如支持使用 &ndash;download 选项从指定 URL 下载 Python 解释器、支持使用 &ndash;clear 选项清空虚拟环境等。</li>
</ul>
<p>总的来说，Virtualenv 是 Python 生态系统中一个非常重要的工具，它提供了一种方便、快捷的虚拟环境管理方式，为 Python 开发者提供了很多便利。在其发展历史中，Virtualenv 不断更新迭代，增加了许多新特性和功能，以适应 Python 生态系统的变化和需求。虽然现在 Virtualenv 已经不再主动维护，但它的代码被集成到其他工具中，如 venv 和 pipenv，仍然为 Python 开发者提供基础支持。</p>
<h2 id="venv-发展历史">venv 发展历史</h2>
<p>venv 是由 Python 官方开发团队开发的，它是 Python 3.3 版本引入的标准库模块，用于创建 Python 虚拟环境。</p>
<p>Python 的官方文档中对 venv 的介绍如下：</p>
<p>&ldquo;venv 模块提供了 Python 3 中的虚拟环境支持。虚拟环境是 Python 环境的隔离副本，包括 Python 解释器和一个独立的库副本。虚拟环境通常用于为不同的项目创建独立的环境，以避免项目之间的依赖冲突。&rdquo;</p>
<p>与 Virtualenv 和其他虚拟环境管理工具不同，venv 是 Python 官方提供的标准库模块，因此它的功能和用法都与 Python 解释器密切相关，并且在 Python 安装时已经预装了 venv 模块，因此不需要额外安装。</p>
<p>在使用 venv 创建虚拟环境时，可以选择使用系统中已经安装的 Python 解释器，也可以使用 venv 模块自动安装一个新的 Python 解释器。创建的虚拟环境和它所依赖的 Python 包都是独立的，不会与系统中的 Python 环境和其他虚拟环境产生冲突。</p>
<p>以下是 venv 的发展历史概述：</p>
<ul>
<li>
<p>2012 年：Python 3.3 版本发布，它引入了 venv 标准库，用于创建独立的 Python 环境，取代了 Python 2 中的 virtualenv 工具。</p>
</li>
<li>
<p>2013 年：venv 1.1 版本发布，它增加了对 Python 3.4 的支持，以及一些新特性和改进，如支持使用 &ndash;system-site-packages 选项共享系统 Python 包、支持使用 &ndash;copies 选项复制依赖包等。</p>
</li>
<li>
<p>2014 年：venv 1.2 版本发布，它增加了对 Python 3.5 的支持，以及一些新特性和改进，如支持使用 &ndash;clear 选项清空虚拟环境、支持使用 &ndash;upgrade 选项更新包等。</p>
</li>
<li>
<p>2015 年：venv 1.3 版本发布，它增加了对 Python 3.6 的支持，以及一些新特性和改进，如支持使用 &ndash;prompt 选项设置虚拟环境提示符、支持使用 &ndash;without-pip 选项创建不包含 pip 的虚拟环境等。</p>
</li>
<li>
<p>2017 年：venv 3.6.0 版本发布，它增加了对 Python 3.6 的支持，以及一些新特性和改进，如支持使用 activate.csh 和 activate.fish 脚本、支持使用 bin/python3 命令启动 Python 解释器等。</p>
</li>
<li>
<p>2018 年：venv 3.7.0 版本发布，它增加了对 Python 3.7 的支持，以及一些新特性和改进，如支持使用 venv 模块创建虚拟环境、支持使用 ensurepip 模块安装 pip 等。</p>
</li>
<li>
<p>2019 年：venv 3.8.0 版本发布，它增加了对 Python 3.8 的支持，以及一些新特性和改进，如支持使用 &ndash;symlinks 选项创建符号链接而非复制文件、支持使用 &ndash;upgrade-deps 选项更新依赖包等。</p>
</li>
<li>
<p>2020 年：venv 3.9.0 版本发布，它增加了对 Python 3.9 的支持，以及一些新特性和改进，如支持使用 &ndash;list 选项列出虚拟环境中已安装的包、支持使用 &ndash;upgrade 选项更新 pip 等。</p>
</li>
<li>
<p>2021 年：venv 3.10.0 版本发布，它增加了对 Python 3.10 的支持，以及一些新特性和改进，如支持使用 &ndash;symlink-to 选项指定符号链接目录、支持使用 &ndash;prompt-cmd 选项设置虚拟环境提示符等。</p>
</li>
</ul>
<h2 id="pyenv发展历史">Pyenv发展历史</h2>
<p>Pyenv 是一个 Python 版本管理工具，可以用于在同一系统中管理多个 Python 版本。以下是 Pyenv 的发展历史概述：</p>
<ul>
<li>2011 年：Pyenv 0.1.0 版本发布，最初由 Yasuhiro Matsumoto 开发。这个版本只支持在 Bash shell 中使用。</li>
<li>2012 年：Pyenv 0.2.0 版本发布，支持在其他 shell 中使用，如 Zsh 和 Fish。</li>
<li>2013 年：Pyenv 0.4.0 版本发布，增加了对 Python 3 的支持。</li>
<li>2014 年：Pyenv 0.4.1 版本发布，增加了对 Jython 和 Stackless Python 的支持。</li>
<li>2015 年：Pyenv 1.0.0 版本发布，它增加了对 Python 的解释器和标准库的支持，以及一些新特性和改进，如增加了 pyenv virtualenv 命令来管理虚拟环境、增加了 pyenv whence 命令来查找可执行文件的位置等。</li>
<li>2018 年：Pyenv 1.2.0 版本发布，增加了对 PyPy3 的支持，并修复了一些 bug。</li>
<li>2020 年：Pyenv 1.2.21 版本发布，增加了对 Python 3.9.0 的支持，并修复了一些 bug。</li>
</ul>
<p>Pyenv 的发展历史显示出它的长期稳定性和不断改进的趋势，以适应不断变化的 Python 生态系统和开发者需求。Pyenv 的主要特点是可以在同一系统中管理多个 Python 版本，可以很方便地切换版本，也支持使用虚拟环境来隔离不同项目的依赖。Pyenv 在 Python 开发者社区中广受欢迎，是一个不可或缺的工具之一。</p>
<h2 id="pipenv发展历史">Pipenv发展历史</h2>
<p>Pipenv 是在 2017 年由 Kenneth Reitz 开发的 Python 项目依赖管理工具。以下是 Pipenv 的发展历史概述：</p>
<ul>
<li>2017 年：Pipenv 1.0.0 版本发布，它是第一个稳定版本。Pipenv 结合了 pip 和 virtualenv 的功能，提供了一个更简单的方式来管理 Python 项目依赖。它自动为每个项目创建虚拟环境，并使用 Pipfile 和 Pipfile.lock 文件来管理项目依赖。</li>
<li>2018 年：Pipenv 2018.5.18 版本发布，它增加了许多新特性和改进，如支持使用 &ndash;skip-lock 选项跳过生成 Pipfile.lock 文件、支持使用 &ndash;deploy 选项安装 Pipfile.lock 文件中的依赖、支持使用 &ndash;update 选项更新依赖等。</li>
<li>2019 年：Pipenv 2019.6.3 版本发布，它增加了对 Python 3.8 的支持，以及一些新特性和改进，如支持使用 &ndash;use-feature 选项安装依赖、支持使用 &ndash;outdated 选项显示过期的依赖等。</li>
<li>2020 年：Pipenv 2020.6.2 版本发布，它增加了支持使用 &ndash;python 选项指定 Python 解释器版本、支持使用 &ndash;pre 选项安装预览版依赖、支持使用 &ndash;keep-outdated 选项保留过期的依赖等。</li>
<li>2021 年：Pipenv 2021.5.29 版本发布，它增加了对 Python 3.10 的支持，以及一些新特性和改进，如支持使用 &ndash;platform 选项指定安装依赖的平台、支持使用 &ndash;bundle 选项生成依赖包压缩文件等。</li>
</ul>
<h2 id="poetry-发展历史">Poetry 发展历史</h2>
<p>Poetry 是一个较新的 Python 项目依赖管理工具，在 2018 年由 Sébastien Eustace 开发。以下是 Poetry 的发展历史概述：</p>
<ul>
<li>2018 年：Poetry 0.1.0 版本发布，它是第一个公开发布的版本。Poetry 通过 pyproject.toml 文件来管理项目依赖，并使用虚拟环境来隔离项目依赖。</li>
<li>2019 年：Poetry 0.12.0 版本发布，它增加了对 Python 3.8 的支持，以及一些新特性和改进，如支持使用 &ndash;lock 选项生成锁文件、支持使用 &ndash;develop 选项安装开发依赖等。</li>
<li>2020 年：Poetry 1.0.0 版本发布，它增加了对 Python 3.9 的支持，以及一些新特性和改进，如支持使用 &ndash;experimental 选项启用实验性功能、支持使用 &ndash;remove-untracked 选项删除未跟踪的依赖等。</li>
<li>2021 年：Poetry 1.2.0 版本发布，它增加了对 Python 3.10 的支持，以及一些新特性和改进，如支持使用 &ndash;workspace 选项管理多个相关项目、支持使用 &ndash;source 选项指定依赖源等。</li>
</ul>
<p>Poetry 的发展历史显示出它的快速发展和不断改进的趋势，以适应不断变化的 Python 生态系统和开发者需求。Poetry 相较于 pipenv 和 virtualenv 等工具，它有着更加简洁的配置文件和更加易于使用的命令行接口，因此在 Python 开发者中越来越受欢迎。</p>
<h2 id="pdm发展历史">Pdm发展历史</h2>
<p>PDM 是一个比较新的 Python 项目依赖管理工具，由李辉开发，它于 2020 年首次发布。以下是 PDM 的发展历史概述：</p>
<ul>
<li>2020 年：PDM 0.1.0 版本发布，它是第一个公开发布的版本。PDM 使用 pyproject.toml 文件来管理项目依赖，并使用虚拟环境来隔离项目依赖。与其他依赖管理工具不同，PDM 可以使用多个依赖源，以便从不同的源安装依赖。</li>
<li>2021 年：PDM 1.0.0 版本发布，它增加了对 Python 3.10 的支持，以及一些新特性和改进，如支持使用 &ndash;edit 选项编辑依赖文件、支持使用 &ndash;update-prereleases 选项更新预览版依赖等。</li>
<li>2022 年：PDM 2.0.0 版本发布，它增加了对 Python 3.11 的支持，以及一些新特性和改进，如支持使用 &ndash;lockfile 选项指定锁定文件、支持使用 &ndash;find-links 选项指定依赖的本地路径或 URL 等。</li>
</ul>
<p>PDM 的发展历史显示出它的快速发展和不断改进的趋势，以适应不断变化的 Python 生态系统和开发者需求。PDM 具有类似 Poetry 的简洁配置文件和易于使用的命令行接口，但 PDM 的多源支持和依赖快照功能则是它的独特特点，这些功能使得 PDM 在一些特定场景下更加适用。</p>
<h2 id="pyflow-发展历史">Pyflow 发展历史</h2>
<p>Pyflow 是另一个 Python 项目依赖管理工具，于 2016 年首次发布。以下是 Pyflow 的发展历史概述：</p>
<ul>
<li>2016 年：Pyflow 0.1.0 版本发布，它是第一个公开发布的版本。Pyflow 使用 requirements.txt 文件来管理项目依赖，并使用虚拟环境来隔离项目依赖。与其他依赖管理工具不同，Pyflow 支持自动化的依赖解决方案，以便更轻松地安装和更新依赖。</li>
<li>2017 年：Pyflow 0.3.0 版本发布，它增加了许多新特性和改进，如支持使用 &ndash;editable 选项安装可编辑依赖、支持使用 &ndash;pre 选项安装预览版依赖等。</li>
<li>2018 年：Pyflow 2.0.0 版本发布，它增加了对 Python 3 的支持，以及一些新特性和改进，如支持使用 Pipfile.lock 文件管理依赖、支持在 Pipfile 中使用多个依赖源等。</li>
</ul>
<p>尽管 Pyflow 的开发已经停止，但是它的一些思想和特性被其他依赖管理工具所采纳，例如 Pipenv 和 Poetry。Pyflow 在其时代内曾经是一个有影响力的依赖管理工具，它的自动化依赖解决方案、虚拟环境功能和多个依赖源等特性为后来的依赖管理工具提供了启示。</p>
<h2 id="conda-发展历史">Conda 发展历史</h2>
<p>Conda 是一个开源的包管理系统和环境管理系统，用于管理 Python 包和其他科学计算相关的软件包。以下是 Conda 的发展历史：</p>
<ol>
<li>
<p>2012 年，Continuum Analytics 公司发布了第一个版本的 Conda，用于管理 Python 环境和软件包。</p>
</li>
<li>
<p>2015 年，Conda 发布了 4.0 版本，引入了虚拟环境和交叉平台支持，支持 Python、R 和其他语言的包管理。</p>
</li>
<li>
<p>2016 年，Conda 发布了 4.2 版本，引入了 Conda Forge，一个社区驱动的软件包仓库，提供了更丰富的软件包和更快的更新周期。</p>
</li>
<li>
<p>2018 年，Conda 发布了 4.5 版本，引入了命令行界面的改进和新功能，如环境快速复制和包依赖关系的可视化。</p>
</li>
<li>
<p>2019 年，Conda 发布了 4.6 版本，引入了环境锁定和自动环境激活功能，提高了环境管理的效率和可靠性。</p>
</li>
<li>
<p>2020 年，Anaconda Inc. 收购了 Quansight 公司，并将其旗下的 Mamba 包管理器与 Conda 进行整合，提高了包管理的速度和稳定性。</p>
</li>
<li>
<p>2021 年，Conda 发布了 4.10 版本，引入了 Conda 市场，一个用户界面友好的软件包搜索和安装工具，提供了更好的用户体验和社区支持。</p>
</li>
</ol>
<h2 id="总结">总结</h2>
<p>项目依赖管理工具（虚拟环境）：</p>
<ul>
<li>官方的：
<ul>
<li>venv</li>
</ul>
</li>
<li>三方的：
<ul>
<li>virtualenv</li>
<li>pyenv</li>
<li>pipenv</li>
<li>pyflow</li>
<li>poetry</li>
<li>pdm</li>
<li>Conda</li>
</ul>
</li>
</ul>
<p>包管理工具：</p>
<ul>
<li>setuptools：包构建</li>
<li>twine：包上传和发布</li>
<li>pip：包安装工具</li>
<li>pypa/build：包构建，用于替代 setuptools</li>
</ul>
<p>下面是 pdm、poetry、pipenv、venv、virtualenv、conda 的简要对比：</p>
<p>1、pdm：</p>
<p>优点：</p>
<ul>
<li>支持 Pipfile.lock 管理依赖项，可以保证依赖项的版本和环境的一致性。</li>
<li>自动创建和管理虚拟环境，可以避免环境冲突和版本问题。</li>
<li>自动安装缺失的系统依赖项，可以避免出现缺少系统库导致的问题。</li>
<li>自动审查安全漏洞，可以避免使用有安全漏洞的依赖项。</li>
</ul>
<p>缺点：</p>
<ul>
<li>还比较新，生态不够完善。</li>
<li>没有像 poetry 和 pipenv 那样支持发布包到 PyPI。</li>
</ul>
<p>2、poetry：</p>
<p>优点：</p>
<ul>
<li>支持 pyproject.toml 管理依赖项，可以保证依赖项的版本和环境的一致性。</li>
<li>自动创建和管理虚拟环境，可以避免环境冲突和版本问题。</li>
<li>自动安装缺失的系统依赖项，可以避免出现缺少系统库导致的问题。</li>
<li>自动审查安全漏洞，可以避免使用有安全漏洞的依赖项。</li>
<li>支持发布包到 PyPI。</li>
</ul>
<p>缺点：</p>
<ul>
<li>有些人觉得配置比较复杂，学习曲线比较陡峭。</li>
</ul>
<p>3、pipenv：</p>
<p>优点：</p>
<ul>
<li>支持 Pipfile 和 Pipfile.lock 管理依赖项，可以保证依赖项的版本和环境的一致性。</li>
<li>自动创建和管理虚拟环境，可以避免环境冲突和版本问题。</li>
<li>自动安装缺失的系统依赖项，可以避免出现缺少系统库导致的问题。</li>
<li>自动审查安全漏洞，可以避免使用有安全漏洞的依赖项。</li>
<li>支持发布包到 PyPI。</li>
</ul>
<p>缺点：</p>
<ul>
<li>有些人觉得速度比较慢。</li>
<li>有些人觉得配置比较复杂，学习曲线比较陡峭。</li>
</ul>
<p>4、venv：</p>
<p>优点：</p>
<ul>
<li>自带 Python，无需安装额外的依赖。</li>
<li>简单易用，命令行操作方便。</li>
<li>Python 3.3+ 后自带，不需要安装额外的库。</li>
</ul>
<p>缺点：</p>
<ul>
<li>只支持 Python 3.3+。</li>
<li>需要手动安装依赖项。</li>
</ul>
<p>5、virtualenv：</p>
<p>优点：</p>
<ul>
<li>支持 Python 2 和 Python 3。</li>
<li>可以在同一台机器上创建多个虚拟环境，可以避免环境冲突和版本问题。</li>
<li>可以在不同的 Python 版本之间切换。</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要手动安装依赖项。</li>
</ul>
<p>6、conda：</p>
<p>优点：</p>
<ul>
<li>支持多个操作系统和多个 Python 版本。</li>
<li>可以管理 Python 环境和非 Python 环境。</li>
<li>可以管理依赖项和安装包。</li>
<li>可以创建和管理虚拟环境。</li>
<li>支持发布包到 Anaconda Cloud。</li>
</ul>
<p>缺点：</p>
<ul>
<li>安装包可能比较大。</li>
<li>有些人觉得配置比较复杂，学习曲线比较陡峭。</li>
</ul>
<p>总的来说，这些工具都有各自的优缺点，可以根据自己的需求和使用习惯选择最适合自己的工具。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python安装、构建、发布、下载和运行</title>
      <link>https://blog.chensoul.com/posts/2023/05/09/python-install-build-publish-run/</link>
      <pubDate>Tue, 09 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/09/python-install-build-publish-run/</guid>
      <description>最近开始学习 python，这篇文章记录如何安装 python、搭建 python 开发环境，以及如何构建、发布 python 包。我使用的是 macos 系统，所以本篇文章中的一些命</description>
      <content:encoded><![CDATA[<p>最近开始学习 python，这篇文章记录如何安装 python、搭建 python 开发环境，以及如何构建、发布 python 包。我使用的是 macos 系统，所以本篇文章中的一些命令是基于 macos ，特此说明。</p>
<h2 id="1安装">1、安装</h2>
<p>MacOS 上通过 brew 安装 Python3：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install python3
</span></span></code></pre></div><p>查看 python3 安装路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ which python3
</span></span><span class="line"><span class="cl">/opt/homebrew/bin/python3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="nb">type</span> python3
</span></span><span class="line"><span class="cl">python3 is /opt/homebrew/bin/python3
</span></span></code></pre></div><p>查看版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python --version
</span></span></code></pre></div><p>设置环境变量，我使用的是 zsh，所以需要修改 ~/.zshrc，添加下面代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PYTHON_HOME</span><span class="o">=</span>/opt/homebrew/opt/python@3.11
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PYTHON_HOME</span>/bin:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">python</span><span class="o">=</span>python3
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">pip</span><span class="o">=</span>pip3
</span></span></code></pre></div><p>使配置生效：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h2 id="2创建项目">2、创建项目</h2>
<p>创建一个目录 chensoul_hello：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir chensoul_hello
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> chensoul_hello
</span></span></code></pre></div><p>创建一个 main.py ，打印 helloworld：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;hello world&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>试试运行 main.py：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python main.py
</span></span></code></pre></div><h2 id="3创建虚拟环境">3、创建虚拟环境</h2>
<p>使用 python venv 模块创建虚拟环境 .venv：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python -m venv .venv
</span></span></code></pre></div><p>使用 . 开头的目录或者文件为隐藏文件。<code>如果使用 git 管理项目，则需要将 .venv 添加到 .gitignore</code>。</p>
<p>激活虚拟环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span></code></pre></div><h2 id="4使用-setuptools-管理项目">4、使用 setuptools 管理项目</h2>
<p>setuptools 是 Python 的一个包管理工具，它可以帮助开发人员更方便地打包和发布 Python 代码。setuptools 提供了一些命令行工具，例如 easy_install 和 setup.py。</p>
<p><code>setup.py</code> 文件是 setuptools 用于构建、打包和发布 Python 包的核心文件之一。通过 <code>setup.py</code> 文件，开发人员可以指定包的元数据、依赖关系、安装脚本等信息，从而实现包的安装、升级和卸载等操作。</p>
<p>具体来说，<code>setup.py</code> 文件通常包含以下内容：</p>
<ul>
<li>包的元数据，例如包的名称、版本号、作者、许可证等信息。</li>
<li>包的依赖关系，例如需要依赖哪些其他 Python 包。</li>
<li>包的安装脚本，例如需要安装哪些文件、脚本等。</li>
<li>其他自定义的构建和发布选项，例如文档生成、命令行工具的生成等。</li>
</ul>
<p>通过运行 <code>python setup.py</code> 命令，可以执行一系列操作，例如将包构建为源代码或二进制分发包、将其上传到 PyPI 或其他包仓库、安装包到本地系统等。同时，setuptools 还提供了一些功能，例如自动化依赖关系管理、版本控制、命令行工具的生成和文档的生成等，可以帮助开发人员更加高效地进行 Python 开发。</p>
<p>1、安装 setuptools</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install setuptools
</span></span></code></pre></div><p>2、创建 setup.py 文件</p>
<p>在使用 setuptools 时，通常需要创建一个 setup.py 文件，用来描述包的信息、依赖关系和安装方式等。setup.py 文件通常包含一个 setup() 函数，用来定义包的元数据和依赖关系等信息。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">find_packages</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">setup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;chensoul_hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">version</span><span class="o">=</span><span class="s1">&#39;1.0.0&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">author</span><span class="o">=</span><span class="s1">&#39;chensoul&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">author_email</span><span class="o">=</span><span class="s1">&#39;chensoul@chensoul.com&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span><span class="o">=</span><span class="s1">&#39;A simple Python package&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">packages</span><span class="o">=</span><span class="n">find_packages</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;numpy&gt;=1.16.0&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;pandas&gt;=0.23.4&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;console_scripts&#39;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hello_command=chensoul_hello.cli:main&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><p>这个 <code>setup.py</code> 文件定义了一个名为 <code>chensoul_hello</code> 的 Python 包，指定了包的元数据、依赖关系等信息。</p>
<ul>
<li><code>name</code>：包的名称。</li>
<li><code>version</code>：包的版本号。</li>
<li><code>author</code>：包的作者。</li>
<li><code>author_email</code>：作者的电子邮件地址。</li>
<li><code>description</code>：包的简要描述。</li>
<li><code>packages</code>：包含需要打包的 Python 包的列表，使用 <code>find_packages()</code> 函数可以自动查找所有包。</li>
<li><code>install_requires</code>：包依赖的其他 Python 包。</li>
<li><code>console_scripts</code>： 是一个可选参数，用于定义包中的命令行工具。它是一个字典，键是命令的名称，值是命令对应的入口点（entry point）。入口点是一个字符串，通常是模块名和函数名的组合，例如 &ldquo;chensoul_hello.cli:main&rdquo;，表示调用 chensoul_hello 包中的 cli 模块的 main 函数。当使用 setuptools 安装包时，console_scripts 会自动创建一个可执行文件，并将入口点指向该文件。这个文件通常被放在 Python 的 bin 目录下，例如 /usr/local/bin。</li>
</ul>
<p>对于上面的例子，如果想要在命令行中使用 hello_command 命令，需要创建名为 &ldquo;chensoul_hello&rdquo; 的 Python 包：</p>
<ul>
<li>
<p>创建一个名为 &ldquo;chensoul_hello&rdquo; 的文件夹，并进入该文件夹。</p>
</li>
<li>
<p>在 &ldquo;chensoul_hello&rdquo; 文件夹中创建一个名为 <code>__init__.py</code> 的空文件。这个文件用于指示 Python 解释器该文件夹是一个 Python 包。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir chensoul_hello
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> chensoul_hello
</span></span><span class="line"><span class="cl">touch __init__.py
</span></span></code></pre></div></li>
<li>
<p>在 &ldquo;chensoul_hello&rdquo; 文件夹中创建一个名为 <code>cli.py</code> 的文件。这个文件用于定义命令行脚本的入口函数。在 <code>cli.py</code> 文件中添加以下代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello, world!&#34;</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="5使用-setuptools-构建包">5、使用 setuptools 构建包</h2>
<p>在项目的根目录，使用以下命令来构建源码分发包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python setup.py sdist
</span></span></code></pre></div><p>或者使用以下命令来构建二进制 wheel 包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python setup.py bdist_wheel
</span></span></code></pre></div><p>在执行上面两个命令之前，需要确保已经安装了 setuptools 和 wheel。如果没有安装，可以使用以下命令安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install setuptools wheel
</span></span></code></pre></div><p>也可以一起执行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python setup.py sdist bdist_wheel
</span></span></code></pre></div><p>执行完成后，会在当前目录下生成 dist 目录，并在其中生成两个包文件：一个源代码包和一个二进制包。这两个包文件可以通过 pip 安装，也可以直接将它们拷贝到其他机器上使用。</p>
<h2 id="6使用-twine-发布包">6、使用 twine 发布包</h2>
<p>twine 是一个 Python 包，用于将 Python 包上传到 PyPI 或其他类似的包仓库。它可以帮助你将打包好的 Python 包上传到 PyPI 服务器或其他类似的服务器。</p>
<ol>
<li>安装 twine</li>
</ol>
<p>在终端或命令行中运行以下命令安装 twine：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install twine
</span></span></code></pre></div><ol start="2">
<li>打包 Python 包</li>
</ol>
<p>如果你已经使用 setuptools 构建了源码分发包或二进制 wheel 包，可以使用 <code>wheel</code> 工具来将其转换为 wheel 包或上传到 PyPI 或其他支持的包仓库。例如，使用以下命令将源码分发包转换为 wheel 包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip wheel dist/chensoul_hello-1.0.0.tar.gz
</span></span></code></pre></div><ol start="3">
<li>注册账号</li>
</ol>
<p>在上传包之前，你需要注册一个 PyPI 账号。如果你还没有注册，请访问 PyPI 网站（https://pypi.org/account/register/）进行注册。</p>
<p>在使用 <code>twine</code> 工具上传包时，需要先在 PyPI 网站上注册账号并获取上传凭证（例如 API 密钥或用户名密码），然后将凭证保存在本地的 <code>$HOME/.pypirc</code> 文件中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">pypi</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">username</span> <span class="p">=</span> <span class="nx">__token__</span>
</span></span><span class="line"><span class="cl">  <span class="nx">password</span> <span class="p">=</span> <span class="nx">pypi-XXXXXX</span>
</span></span></code></pre></div><ol start="4">
<li>上传 Python 包</li>
</ol>
<p><code>twine</code> 工具支持上传到以下包仓库：</p>
<ul>
<li>
<p>PyPI（Python Package Index）：PyPI 是 Python 社区的官方包仓库，提供了大量的 Python 包供用户下载和使用。PyPI 使用 <a href="https://pypi.org/">https://pypi.org/</a> 作为官方网站，可以使用 <code>twine</code> 工具将包上传到 PyPI。</p>
</li>
<li>
<p>Test PyPI：Test PyPI 是 PyPI 的一个测试环境，用于测试和验证包的上传和分发过程。Test PyPI 使用 <a href="https://test.pypi.org/">https://test.pypi.org/</a> 作为官方网站，可以使用 <code>twine</code> 工具将包上传到 Test PyPI。</p>
</li>
<li>
<p>任何支持 twine 格式的包仓库：<code>twine</code> 工具支持将包上传到任何支持 twine 格式的包仓库，只需要指定包仓库的 URL 和凭证即可。例如，可以使用 <code>twine</code> 工具将包上传到自己的私有包仓库或第三方包仓库。</p>
</li>
</ul>
<p>例如，使用以下命令将一个 wheel 包上传到 PyPI：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ twine upload dist/chensoul_hello-1.0.0-py3-none-any.whl
</span></span><span class="line"><span class="cl">Enter your username: __token__
</span></span><span class="line"><span class="cl">Enter your password:
</span></span></code></pre></div><p>或者使用以下命令将一个源码分发包上传到 PyPI：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">twine upload dist/chensoul_hello-1.0.0.tar.gz
</span></span></code></pre></div><p>同时上传wheel 包和源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">twine upload dist/*
</span></span></code></pre></div><p>这个命令将会上传 <code>dist</code> 目录下的所有包到 Test PyPI。需要注意的是，上传到不同的包仓库可能需要不同的命令和参数，具体可以参考包仓库的文档或帮助信息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">twine upload --repository-url https://test.pypi.org/legacy/ dist/*
</span></span></code></pre></div><p>如果上传时提示错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Uploading distributions to https://upload.pypi.org/legacy/
</span></span><span class="line"><span class="cl">Uploading chensoul_hello-1.0.0-py3-none-any.whl
</span></span><span class="line"><span class="cl">100% ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 4.5/4.5 kB • 00:00 • ?
</span></span><span class="line"><span class="cl">WARNING  Error during upload. Retry with the --verbose option <span class="k">for</span> more details.
</span></span><span class="line"><span class="cl">ERROR    HTTPError: <span class="m">403</span> Forbidden from https://upload.pypi.org/legacy/
</span></span><span class="line"><span class="cl">        The user <span class="s1">&#39;chensoul&#39;</span> isn<span class="s1">&#39;t allowed to upload to project &#39;</span>my-package<span class="err">&#39;</span>. See https://pypi.org/help/#project-name <span class="k">for</span> more information.
</span></span></code></pre></div><p>原因是项目名称 my-package 不合法或者已存在，需要修改包名称。</p>
<p>如果项目已经存在，则可以添加参数覆盖已经存在的项目：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">twine upload dist/* --skip-existing
</span></span></code></pre></div><h2 id="7使用-pip-安装包">7、使用 pip 安装包</h2>
<p>如果你想安装、升级或删除 Python 包，可以使用 <code>pip</code> 工具来进行操作。</p>
<p>使用以下命令来安装本地的包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install dist/chensoul_hello-1.0.0.tar.gz
</span></span></code></pre></div><p>或者安装本地的 wheel 包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install dist/chensoul_hello-1.0.0-py3-none-any.whl
</span></span></code></pre></div><p>也可以使用以下命令来从仓库中安装一个包及其依赖项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pip install chensoul_hello
</span></span></code></pre></div><p>查看本地下载的安装包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ pip list<span class="p">|</span>grep chensoul-hello
</span></span><span class="line"><span class="cl">chensoul-hello     1.0.0
</span></span></code></pre></div><blockquote>
<p>在使用 setuptools 构建 Python 包时，包名应该符合 Python 包命名规范。具体来说，包名应该只包含小写字母、数字和短横线 <code>-</code>，不能包含其他字符，包名应该以字母开头，并且不能超过 32 个字符。</p>
<p>另外，如果你在包名中使用了短横线 <code>-</code>，在引用包时需要将其替换成下划线 <code>_</code>。例如，如果你的包名为 <code>chensoul-hello</code>，在引用包时应该使用 <code>import chensoul_hello</code>。</p>
<p>总之，在使用 setuptools 构建 Python 包时，包名应该符合 Python 包命名规范，并且如果包名中包含短横线 <code>-</code>，在引用包时应该使用下划线 <code>_</code>。</p>
</blockquote>
<p>可以使用以下命令导出当前环境中的所有依赖项列表到 requirements.txt 文件中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip freeze &gt; requirements.txt
</span></span></code></pre></div><p>可以使用以下命令根据 requirements.txt 文件中的依赖项列表安装包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install -r requirements.txt
</span></span></code></pre></div><h2 id="8运行命令">8、运行命令</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ hello_command
</span></span><span class="line"><span class="cl">Hello, world!
</span></span></code></pre></div><h2 id="9使用-pypabuild-构建包">9、使用 pypa/build 构建包</h2>
<p>执行下面命令时：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python setup.py bdist_wheel
</span></span></code></pre></div><p>出现一个警告：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">        ********************************************************************************
</span></span><span class="line"><span class="cl">        Please avoid running <span class="sb">``</span>setup.py<span class="sb">``</span> directly.
</span></span><span class="line"><span class="cl">        Instead, use pypa/build, pypa/installer, pypa/build or
</span></span><span class="line"><span class="cl">        other standards-based tools.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        See https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html <span class="k">for</span> details.
</span></span><span class="line"><span class="cl">        ********************************************************************************
</span></span></code></pre></div><p>pypa/build 和 pypa/installer 是 Python Packaging Authority（PyPA）维护的两个工具，分别用于构建和安装 Python 包。pypa/build 就是 build 模块，而 pypa/installer 就是pip。</p>
<p>下面是它们的使用方法：</p>
<ol>
<li>
<p>安装 pypa/build 工具：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pip install build
</span></span></code></pre></div></li>
<li>
<p>运行以下命令构建包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">python -m build
</span></span></code></pre></div><p><code>python -m build</code> 是一个用于构建 Python 包的命令行工具，它是 Python 3.10 中新增的标准库模块 <code>build</code> 的入口点。使用 <code>python -m build</code> 可以方便地构建源代码发行包和二进制发行包，支持多种格式，包括 <code>sdist</code>、<code>wheel</code>、<code>zip</code>、<code>tar</code> 等。</p>
<p>在使用 <code>python -m build</code> 构建 Python 包之前，需要确保你的项目符合 Python 包的标准。具体来说，你需要在项目根目录下创建一个 <code>setup.cfg</code> 文件和一个 <code>setup.py</code> 文件，其中 <code>setup.cfg</code> 文件包含项目元数据和构建选项，<code>setup.py</code> 文件包含构建和打包的具体实现。</p>
</li>
<li>
<p>如果需要发布包到 PyPI 或其他包仓库，可以使用以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">twine upload dist/*
</span></span></code></pre></div></li>
</ol>
<h2 id="10附录">10、附录</h2>
<h3 id="pypabuild-和-setuptools-对比">pypa/build 和 setuptools 对比</h3>
<p><code>python -m build</code> 和 <code>python setup.py sdist bdist_wheel</code> 都是用于构建 Python 包的命令行工具，但它们有一些区别。</p>
<ul>
<li><code>python -m build</code> 是 Python 3.10 中新增的标准库模块 <code>build</code> 的入口点，支持多种构建格式，包括 <code>sdist</code>、<code>wheel</code>、<code>zip</code>、<code>tar</code> 等。它可以自动构建源代码发行包和二进制发行包，并支持多种平台和 Python 版本。<code>python -m build</code> 的使用方式比较简单，需要在项目根目录下创建一个 <code>setup.py</code> 文件或者 <code>pyproject.toml</code> 文件，然后在项目根目录下执行 <code>python -m build</code> 命令即可。</li>
<li><code>python setup.py sdist bdist_wheel</code> 是传统的 Python 包构建方式，需要在项目根目录下创建一个 <code>setup.py</code> 文件，其中包含构建和打包的具体实现。它支持的构建格式比较有限，只包括 <code>sdist</code> 和 <code>bdist_wheel</code> 两种格式。<code>python setup.py sdist bdist_wheel</code> 的使用方式相对较为繁琐，需要执行多个命令，并指定相应的参数和选项。</li>
</ul>
<p>总之，<code>python -m build</code> 是 Python 3.10 中新增的标准库模块 <code>build</code> 的入口点，支持多种构建格式，使用起来比较简单。而 <code>python setup.py sdist bdist_wheel</code> 是传统的 Python 包构建方式，使用起来相对较为繁琐，但仍然是一种常见的构建方式。需要根据自己的实际情况选择适合的构建工具。</p>
<p>相对于使用 <code>python setup.py sdist bdist_wheel</code> 命令，使用 <code>python -m build</code> 命令有以下几个优点：</p>
<ol>
<li>更简单的命令：<code>python -m build</code> 命令比 <code>python setup.py sdist bdist_wheel</code> 命令更加简单易用，因为它不需要你编写 <code>setup.py</code> 文件。你可以使用 <code>pyproject.toml</code> 文件来代替，这样会更简单和现代化。</li>
<li>更好的配置：<code>build</code> 模块使用 <code>pyproject.toml</code> 文件来配置包的构建，这是一种更现代和标准化的配置方式。该文件可以指定构建依赖项、包含在软件包中的其他文件以及其他元数据。</li>
<li>更多的输出格式：<code>python -m build</code> 支持比 <code>python setup.py sdist bdist_wheel</code> 更多的输出格式，包括 <code>wheel</code>、<code>sdist</code>、<code>zip</code>、<code>tar</code> 等等。</li>
<li>更好的性能：相对于 <code>python setup.py sdist bdist_wheel</code> 命令，<code>python -m build</code> 命令通常更快，特别是对于具有许多依赖项的大型项目而言。这是因为 <code>build</code> 可以并行处理某些任务，例如构建二进制软件包。</li>
<li>更好的兼容性：<code>python -m build</code> 设计为与多个 Python 版本和平台兼容，而 <code>python setup.py sdist bdist_wheel</code> 命令通常特定于特定版本或平台。</li>
</ol>
<p>综上所述，相对于 <code>python setup.py sdist bdist_wheel</code> 命令，<code>python -m build</code> 提供了一种更简单、更现代、更灵活的构建 Python 包的方式，具有更好的性能和兼容性。不过，<code>python setup.py sdist bdist_wheel</code> 命令仍然是构建软件包的常用和得到广泛支持的方法，特别是对于较老的项目或具有更复杂要求的项目而言。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记9：使用 try-with-resources 优于 try-finally</title>
      <link>https://blog.chensoul.com/posts/2023/05/08/prefer-try-with-resources-to-try-finally/</link>
      <pubDate>Mon, 08 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/08/prefer-try-with-resources-to-try-finally/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：使用 try-with-resources 优于 try-finally。 介绍 Java 库包含许多必须通过调用 close 方法手动关闭的资源。常见的</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记：使用 try-with-resources 优于 try-finally。</p>
<h2 id="介绍">介绍</h2>
<p>Java 库包含许多必须通过调用 close 方法手动关闭的资源。常见的有 InputStream、OutputStream 和 java.sql.Connection。关闭资源常常会被客户端忽略，这会导致可怕的性能后果。虽然这些资源中的许多都使用终结器作为安全网，但终结器并不能很好地工作。</p>
<p>从历史上看，try-finally 语句是确保正确关闭资源的最佳方法，即使在出现异常或返回时也是如此：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// try-finally - No longer the best way to close resources!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="n">String</span> <span class="nf">firstLineOfFile</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这可能看起来不坏，但添加第二个资源时，情况会变得更糟：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// try-finally is ugly when used with more than one resource!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="kt">void</span> <span class="nf">copy</span><span class="o">(</span><span class="n">String</span> <span class="n">src</span><span class="o">,</span> <span class="n">String</span> <span class="n">dst</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">src</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">OutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">dst</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">BUFFER_SIZE</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="o">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用 try-finally 语句关闭资源的正确代码（如前两个代码示例所示）也有一个细微的缺陷。try 块和 finally 块中的代码都能够抛出异常。例如，在 firstLineOfFile 方法中，由于底层物理设备发生故障，对 readLine 的调用可能会抛出异常，而关闭的调用也可能出于同样的原因而失败。<code>在这种情况下，第二个异常将完全覆盖第一个异常</code>。异常堆栈跟踪中没有第一个异常的记录，这可能会使实际系统中的调试变得非常复杂（而这可能是希望出现的第一个异常，以便诊断问题）。虽然可以通过编写代码来抑制第二个异常而支持第一个异常，但实际上没有人这样做，因为它太过冗长。</p>
<p>当 Java 7 引入 try-with-resources 语句时，所有这些问题都一次性解决了。要使用这个结构，资源必须实现 AutoCloseable 接口，它由一个单独的 void-return close 方法组成。Java 库和第三方库中的许多类和接口现在都实现或扩展了 AutoCloseable。如果你编写的类存在必须关闭的资源，那么也应该实现 AutoCloseable。</p>
<p>下面是使用 try-with-resources 的第一个示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// try-with-resources - the the best way to close resources!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="n">String</span> <span class="nf">firstLineOfFile</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">)))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>下面是使用 try-with-resources 的第二个示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// try-with-resources on multiple resources - short and sweet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="kt">void</span> <span class="nf">copy</span><span class="o">(</span><span class="n">String</span> <span class="n">src</span><span class="o">,</span> <span class="n">String</span> <span class="n">dst</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">src</span><span class="o">);</span><span class="n">OutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">dst</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">byte</span><span class="o">[]</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">BUFFER_SIZE</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="o">((</span><span class="n">n</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buf</span><span class="o">))</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">buf</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>和使用 try-finally 的原版代码相比，try-with-resources 为开发者提供了更好的诊断方式。考虑 firstLineOfFile 方法。如果异常是由 readLine 调用和不可见的 close 抛出的，则后一个异常将被抑制，以支持前一个异常。实际上，还可能会抑制多个异常，以保留实际希望看到的异常。这些被抑制的异常不会仅仅被抛弃；它们会被打印在堆栈跟踪中，并标记它们被抑制。可以通过编程方式使用 getSuppressed 方法访问到它们，该方法是在 Java 7 中添加到 Throwable 中的。</p>
<p>可以在带有资源的 try-with-resources 语句中放置 catch 子句，就像在常规的 try-finally 语句上一样。这允许处理异常时不必用另一层嵌套来影响代码。作为一个特指的示例，下面是我们的 firstLineOfFile 方法的一个版本，它不抛出异常，但如果无法打开文件或从中读取文件，则返回一个默认值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// try-with-resources with a catch clause
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="n">String</span> <span class="nf">firstLineOfFile</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">,</span> <span class="n">String</span> <span class="n">defaultVal</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">(</span><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">path</span><span class="o">)))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">defaultVal</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="扩展">扩展</h2>
<p><code>try-with-resources</code> 语句是 Java 7 中引入的一种新语法，主要目的是为了简化资源管理的代码，并确保资源被正确地关闭，避免了资源泄漏和异常处理的问题。</p>
<p>在 Java 中，当使用一些需要手动释放资源的类时，例如 I/O 流、数据库连接等，我们需要在代码中显式地调用 <code>close()</code> 方法来释放资源。这种方式可能会出现一些问题，例如：</p>
<ol>
<li>忘记关闭资源：如果开发人员忘记关闭资源，可能会导致资源泄漏，占用系统资源，降低系统性能。</li>
<li>异常处理问题：如果在关闭资源之前发生异常，可能会导致资源未能正确关闭，进一步导致资源泄漏和其他问题。</li>
</ol>
<p>为了解决这些问题，Java 7 引入了 <code>try-with-resources</code> 语句。它提供了一种更简洁、更安全、更易读的方式来管理资源的关闭，避免了开发人员手动释放资源的问题，并且可以确保资源被正确地关闭。</p>
<p>使用 <code>try-with-resources</code> 语句，我们可以将资源的创建和初始化放在 <code>try</code> 语句的括号内，它们在 <code>try</code> 块执行结束后，会自动关闭资源。如果在关闭资源时发生异常，<code>try-with-resources</code> 语句会自动处理异常，确保所有资源都被正确地关闭。</p>
<p><code>try-with-resources</code> 语句使用以下语法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">Resource1</span> <span class="n">r1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource1</span><span class="o">();</span> <span class="n">Resource2</span> <span class="n">r2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource2</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// use r1 and r2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// handle the exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>Resource1</code> 和 <code>Resource2</code> 是需要在使用后关闭的资源，它们将在 <code>try</code> 块结束后自动关闭。如果发生异常，<code>catch</code> 块将处理它。</p>
<p><code>Resource1</code> 和 <code>Resource2</code> 必须实现 <code>AutoCloseable</code> 接口，该接口定义了 <code>close()</code> 方法，用于关闭资源。当 <code>try</code> 块结束时，<code>close()</code> 方法将自动被调用，以便关闭资源。</p>
<p>需要注意的是，<code>try-with-resources</code> 语句可以同时管理多个资源，资源的创建和初始化应该在 <code>try</code> 语句的括号内完成。</p>
<p><code>try-with-resources</code> 语句有以下优点：</p>
<ol>
<li>简洁性：<code>try-with-resources</code> 语句可以让代码更简洁，不需要显式地调用 <code>close()</code> 方法。</li>
<li>安全性：<code>try-with-resources</code> 语句可以确保资源被正确地关闭，避免了资源泄漏和异常处理的问题。</li>
<li>可读性：<code>try-with-resources</code> 语句可以让代码更易读，更容易理解资源的使用和管理。</li>
</ol>
<p>需要注意的是，<code>try-with-resources</code> 语句只能用于管理实现了 <code>AutoCloseable</code> 接口的资源，并且只有在 Java 7 及以上版本才支持该语法。</p>
<p>除了 I/O 流和数据库连接之外，还有一些类需要手动释放资源，例如：</p>
<ol>
<li>图形界面组件：在使用图形界面组件时，例如窗口、对话框、面板等，需要手动释放资源，例如关闭窗口、释放图形资源等。</li>
<li>线程：在使用线程时，需要手动停止线程，释放线程占用的系统资源。</li>
<li>Socket 和 ServerSocket：在使用 Socket 和 ServerSocket 时，需要手动关闭它们，以便释放网络资源。</li>
<li>文件句柄：在使用文件系统时，需要手动关闭文件句柄，以便释放系统资源。</li>
<li>JDBC Statement 和 ResultSet：在使用 JDBC 时，需要手动关闭 Statement 和 ResultSet 对象，以便释放数据库资源。</li>
<li>JNI 资源：在使用 JNI 调用本地方法时，需要手动释放 JNI 资源，例如 C/C++ 中的内存和文件句柄等。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记8：避免使用终结器和清除器</title>
      <link>https://blog.chensoul.com/posts/2023/05/08/avoid-finalizers-and-cleaners/</link>
      <pubDate>Mon, 08 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/08/avoid-finalizers-and-cleaners/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：避免使用终结器和清除器。 介绍 终结器是不可预测的、常常是危险的，通常也是不必要的。 它们的使用</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记：避免使用终结器和清除器。</p>
<h2 id="介绍">介绍</h2>
<p><strong>终结器是不可预测的、常常是危险的，通常也是不必要的。</strong> 它们的使用可能导致不稳定的行为、低效率和可移植性问题。终结器有一些有效的用途，我们稍后会介绍，但通常情况下应该避免使用它们。从 Java 9 开始，终结器已经被弃用，但它们仍然被 Java 库使用。Java 9 中终结器的替代品是清除器。 <strong>清除器的危险比终结器小，但仍然不可预测、缓慢，而且通常是不必要的。</strong></p>
<blockquote>
<p>终结器是通过在对象上实现 <code>finalize()</code> 方法来实现的，而清除器是通过使用 <code>Cleaner</code> 类来实现的。它们的工作方式有所不同：</p>
<ul>
<li>
<p>终结器是由垃圾回收器自动执行的，无法预测何时执行，也无法保证一定会执行。当垃圾回收器决定将对象回收时，它会调用对象的 <code>finalize()</code> 方法，以便对象在被销毁之前执行一些清理操作。</p>
</li>
<li>
<p>清除器是由 Java 9 虚拟机通过引用队列和 <code>Cleaner</code> 对象执行的，可以在对象被回收之前或之后执行。在对象被垃圾回收之前，Java 虚拟机会将该对象的引用添加到一个引用队列中，然后在某些时刻，Java 虚拟机会创建一个 <code>Cleaner</code> 对象，并将该引用队列与 <code>Cleaner</code> 对象关联起来。当该对象被垃圾回收时，它的引用将被添加到与 <code>Cleaner</code> 对象关联的引用队列中，<code>Cleaner</code> 对象会在某些时刻自动执行，以便对象在被销毁之前或之后执行一些清理操作。</p>
</li>
<li>
<p>在 Java 9 中，引入了 <code>java.lang.ref.Cleaner</code> 类，作为终结器的替代品，用于执行对象清理操作。相比终结器，Cleaner 具有以下优点：</p>
<ol>
<li>显式管理：Cleaner 使用明确的代码路径来管理清理操作，而不是使用隐式的终结器机制。</li>
<li>可控性：Cleaner 允许开发人员控制何时执行清理操作，而不是完全依赖于垃圾回收器的行为。</li>
<li>安全性：Cleaner 执行清理操作时，会确保类加载器已准备好，因此可以安全地执行本地清理操作。</li>
</ol>
<p>Cleaner 通过注册一个任务来执行清理操作。该任务可以是 Runnable 或者继承自 PhantomReference 类的子类对象。当对象被垃圾回收器回收时，Cleaner 将自动执行注册的任务。</p>
</li>
</ul>
</blockquote>
<p>终结器和清除器的使用场景非常有限，因为它们的执行时间不可预测，可能会导致一些问题，例如性能问题、不稳定的行为、低效率和可移植性问题。</p>
<p>终结器和清除器的主要问题是：</p>
<ul>
<li>
<p>它们无法可靠地及时执行，甚至可能根本不会执行。当对象变得不可访问，终结器或清除器对它进行操作的时间是不确定的。这意味着永远不应该在终结器或清除器中执行任何对时间要求很严格的操作。例如，依赖终结器或清除器关闭文件就是一个严重错误，因为打开的文件描述符是有限的资源。如果由于系统在运行终结器或清除器的延迟导致许多文件处于打开状态，程序可能会运行失败，因为它不能再打开其他文件。</p>
<p>终结器的另一个问题是，在终结期间抛出的未捕获异常被忽略，该对象的终结终止。未捕获的异常可能会使其他对象处于损坏状态。如果另一个线程试图使用这样一个损坏的对象，可能会导致任意的不确定性行为。正常情况下，未捕获的异常将终止线程并打印堆栈跟踪，但如果在终结器中出现，则不会打印警告。清除器没有这个问题，因为使用清除器的库可以控制它的线程。</p>
</li>
<li>
<p>它们可能会导致性能问题。终结器由垃圾回收器执行，这可能会导致垃圾回收过程中的延迟。另一方面，清除器使用单独的线程执行，这可能会导致额外的开销和同步问题。</p>
</li>
</ul>
<p>《Effective Java》第三版建议使用显式终止方法，例如 <code>close()</code>，释放系统资源。当应用程序完成对资源的使用时，可以显式调用这些方法，而不依赖于垃圾回收器来执行它们。</p>
<p>如果必须使用终结器或清除器， 《Effective Java》第三版建议使用防御性编程实现它们，即使用 try-finally 块确保执行关键的清理操作，并避免引用其他可能已被垃圾回收的对象或资源。</p>
<h2 id="扩展">扩展</h2>
<h3 id="systemgc">System.gc()</h3>
<p><code>System.gc()</code> 方法是 Java 中的一种垃圾回收机制，它可以在请求垃圾回收器运行时强制进行一次垃圾回收。</p>
<p><code>System.gc()</code> 方法不是强制垃圾回收的方法，因为 Java 虚拟机可以忽略它。Java 编程语言规范要求 <code>System.gc()</code> 方法只是一个建议，不能保证它一定会导致垃圾回收器运行。因此，它不应该被频繁地调用，因为这可能会导致性能问题。</p>
<p><code>System.gc()</code> 方法的使用场景非常有限。通常情况下，应该让垃圾回收器自行管理内存，而不是使用 <code>System.gc()</code> 方法来强制进行垃圾回收。如果需要确保某些对象在垃圾回收之前被释放，可以使用弱引用或软引用来管理这些对象，或使用显式终止方法来释放系统资源。</p>
<p>需要注意的是，<code>System.gc()</code> 方法可能会耗费较长时间，因为它可能会强制回收所有未使用的对象。因此，在实际使用中，应该谨慎使用 <code>System.gc()</code> 方法，并仅在必要时使用它。</p>
<h3 id="systemrunfinalization">System.runFinalization()</h3>
<p><code>System.runFinalization()</code> 方法是在 Java 1.2 版本中引入的。在 Java 1.2 中，引入了垃圾回收器的改进，包括使用引用类型、终结器和垃圾回收器性能的提升。<code>System.runFinalization()</code> 方法作为终结器机制的一部分，用于确保所有对象的<code>finalize()</code> 方法被执行。在垃圾回收器将对象从内存中释放之前，如果该对象具有终结器，则垃圾回收器会调用对象的 <code>finalize()</code> 方法，以便在对象被销毁之前执行一些清理操作。<code>System.runFinalization()</code> 方法可以确保所有对象的 <code>finalize()</code> 方法被执行。</p>
<p><code>System.runFinalization()</code> 方法不是强制终结器执行的方法，因为 Java 虚拟机可以忽略它。Java 编程语言规范要求 <code>System.runFinalization()</code> 方法只是一个建议，不能保证它一定会导致终结器执行。因此，它不应该被频繁地调用，因为这可能会导致性能问题。</p>
<p><code>System.runFinalization()</code> 方法的使用场景非常有限。通常情况下，应该避免使用终结器来执行清理操作，因为终结器的执行时间不可预测，可能会导致一些问题，例如性能问题、不稳定的行为、低效率和可移植性问题。相反，应该使用显式终止方法来释放系统资源。</p>
<p>需要注意的是，<code>System.runFinalization()</code> 方法可能会耗费较长时间，因为它可能会执行所有对象的终结器。因此，在实际使用中，应该谨慎使用 <code>System.runFinalization()</code> 方法，并仅在必要时使用它</p>
<h3 id="清除器和终结器使用场景">清除器和终结器使用场景</h3>
<p>使用清除器和终结器的例子并不常见，因为它们的使用场景非常有限。以下是一些可能需要使用清除器和终结器的场景：</p>
<ul>
<li>在 Java 8 及之前的版本中，<code>java.sql.Connection</code> 类中的 <code>finalize()</code> 方法被用于关闭数据库连接。在 Java 9 中，这个方法被弃用，因为终结器的使用不可靠和危险。相反，<code>Connection</code> 接口中添加了一个 <code>close()</code> 方法，应该使用这个方法来释放数据库连接。</li>
<li>在 Java 9 中，<code>java.lang.ref.Cleaner</code> 类被引入作为终结器的替代品，可以用于执行对象清理操作。例如，如果需要在对象被垃圾回收之前执行一些清理操作（例如释放本地内存或关闭文件句柄），可以使用 <code>Cleaner</code> 类来实现。以下是一个使用 <code>Cleaner</code> 类的简单示例：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Resource</span> <span class="kd">implements</span> <span class="n">AutoCloseable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Cleaner</span> <span class="n">cleaner</span> <span class="o">=</span> <span class="n">Cleaner</span><span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">File</span> <span class="n">file</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Resource</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">file</span> <span class="o">=</span> <span class="n">file</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">cleaner</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="k">new</span> <span class="n">CleanupTask</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// release any resources held by this object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">CleanupTask</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kd">final</span> <span class="n">File</span> <span class="n">file</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="nf">CleanupTask</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">file</span> <span class="o">=</span> <span class="n">file</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// clean up the resource associated with the given file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>Resource</code> 类持有一个 <code>File</code> 对象，并在创建对象时使用 <code>Cleaner</code> 类注册了一个 <code>CleanupTask</code> 对象。当 <code>Resource</code> 对象被垃圾回收时，<code>Cleaner</code> 对象将自动调用 <code>CleanupTask</code> 对象的 <code>run()</code> 方法，以便执行 <code>File</code> 对象的清理操作（例如关闭文件句柄）。</p>
<p>需要注意的是，这仅是一个简单的示例，实际使用中需要谨慎使用和考虑清除器和终结器的局限性。通常情况下，我们应该避免使用它们，使用显式终止方法来释放系统资源。</p>
<p>以下是一些使用显式终止方法的例子：</p>
<ol>
<li>Java I/O 类。Java I/O 类通常需要使用显式终止方法来释放系统资源，例如关闭文件句柄或网络连接。例如，<code>java.io.FileInputStream</code> 类中的 <code>close()</code> 方法用于关闭打开的文件。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;example.txt&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// read from the file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// handle the exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，使用 <code>try-with-resources</code> 语句来创建 <code>FileInputStream</code> 对象，这将自动调用 <code>close()</code> 方法，以便释放文件句柄。</p>
<ol start="2">
<li>数据库连接。数据库连接通常需要使用显式终止方法来释放连接。例如，<code>java.sql.Connection</code> 接口中的 <code>close()</code> 方法用于关闭数据库连接。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">DriverManager</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">user</span><span class="o">,</span> <span class="n">password</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// use the database connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// handle the exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，使用 <code>try-with-resources</code> 语句来创建 <code>Connection</code> 对象，这将自动调用 <code>close()</code> 方法，以便释放数据库连接。</p>
<ol start="3">
<li>线程池。线程池通常需要使用显式终止方法来关闭线程池，以便释放线程资源。例如，<code>java.util.concurrent.ExecutorService</code> 接口中的 <code>shutdown()</code> 方法用于关闭线程池。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// submit tasks to the executor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，使用 <code>finally</code> 块来确保在执行完任务后关闭线程池，以便释放线程资源。</p>
<h3 id="如何避免资源泄漏">如何避免资源泄漏？</h3>
<p>资源泄漏是指在使用资源（如文件句柄、网络连接、数据库连接、线程等）时，没有正确地释放或关闭它们，导致资源长时间占用，最终可能导致程序崩溃或系统性能下降。</p>
<p>以下是一些避免资源泄漏的方法：</p>
<ol>
<li>使用 <code>try-with-resources</code> 语句。<code>try-with-resources</code> 语句是一种自动关闭资源的机制，可以确保在使用完资源后自动关闭它们。例如：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;example.txt&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// read from the file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// handle the exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>FileInputStream</code> 对象将在 <code>try</code> 块结束后自动关闭。</p>
<ol start="2">
<li>
<p>显式关闭资源。如果不能使用 <code>try-with-resources</code> 语句，应该使用显式关闭资源的方法来释放资源。例如，在使用完数据库连接后，应该调用 <code>Connection</code> 接口中的 <code>close()</code> 方法来释放连接。</p>
</li>
<li>
<p>使用防御性编程。在使用资源时，应该使用防御性编程，确保在任何情况下都能正确地释放资源。例如，在使用文件句柄时，应该确保在读取或写入文件时，使用 <code>try-finally</code> 块来确保在发生异常时关闭文件句柄。</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">FileInputStream fis = null;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">try {
</span></span><span class="line"><span class="cl">    fis = new FileInputStream(&#34;example.txt&#34;);
</span></span><span class="line"><span class="cl">    // read from the file
</span></span><span class="line"><span class="cl">} catch (IOException e) {
</span></span><span class="line"><span class="cl">    // handle the exception
</span></span><span class="line"><span class="cl">} finally {
</span></span><span class="line"><span class="cl">    if (fis != null) {
</span></span><span class="line"><span class="cl">        try {
</span></span><span class="line"><span class="cl">            fis.close();
</span></span><span class="line"><span class="cl">        } catch (IOException e) {
</span></span><span class="line"><span class="cl">            // handle the exception
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><p>在这个例子中，使用 <code>try-finally</code> 块来确保在发生异常时关闭文件句柄。</p>
<ol start="4">
<li>使用资源管理框架。一些资源管理框架，例如 Apache Commons IO 和 Google Guava，提供了一些实用工具类和方法，可以帮助避免资源泄漏。</li>
</ol>
<h2 id="总结">总结</h2>
<p>终结器和清除器都是 Java 中用于对象清理的机制，它们各有优缺点。</p>
<p>终结器的优点：</p>
<ol>
<li>无需显式调用：终结器是一种自动的机制，无需显式调用，可以在对象被垃圾回收时自动执行。</li>
<li>灵活性：终结器允许开发人员编写任意的清理代码，无需考虑清理操作的执行时间或顺序。</li>
</ol>
<p>终结器的缺点：</p>
<ol>
<li>不可控性：终结器的执行时间和顺序是不可预测的，可能会导致一些问题，例如性能问题、不稳定的行为、低效率和可移植性问题。</li>
<li>安全性问题：终结器可能会引起一些安全性问题，例如在 <code>finalize()</code> 方法中重新启动线程或打开文件等。</li>
</ol>
<p>清除器的优点：</p>
<ol>
<li>明确的代码路径：清除器使用明确的代码路径来执行清理操作，相比终结器，它更加可控和安全。</li>
<li>可控性：清除器允许开发人员控制何时执行清理操作，而不是完全依赖于垃圾回收器的行为。</li>
<li>安全性：清除器执行清理操作时，会确保类加载器已准备好，因此可以安全地执行本地清理操作。</li>
</ol>
<p>清除器的缺点：</p>
<ol>
<li>显式调用：清除器需要显式调用，开发人员需要为每个需要清理的对象注册一个清理器，这可能会增加代码的复杂性。</li>
<li>限制性：清除器只能用于执行一些清理操作，不能用于执行其他类型的操作。</li>
</ol>
<p>综上所述，终结器和清除器各有优缺点，应该根据实际需求和场景选择适当的机制来管理对象清理。<code>一般来说，应该优先使用显式终止方法来释放系统资源，只有在必要时才考虑使用终结器或清除器。</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-17｜导出苹果健康数据、自动化收集个人数据、FlexyPool动态连接池</title>
      <link>https://blog.chensoul.com/posts/2023/05/06/weekly_review_17/</link>
      <pubDate>Sat, 06 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/06/weekly_review_17/</guid>
      <description>前言 本篇是对 2023-04-24 到 2023-04-30 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 本周二早上跑步右小腿抽筋，跑步暂停了两天，所以有</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-04-24</code> 到 <code>2023-04-30</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>本周二早上跑步右小腿抽筋，跑步暂停了两天，所以有两天走路没有到一万步。在小腿恢复之后，继续跑步，查看 strava 上的统计，这周总共跑了27公里，比上周41公里少了14公里。</p>
<p>这周空闲时间就在想，能不能每天自动收集个人的一些数据，比如，目前我能想到的数据包括跑步、走路、体重、编码、早起等等。</p>
<p>目前是使用 strava app 记录跑步数据，通过 <a href="https://github.com/chensoul/running_page">running_page</a> 可以实时收集我的每天 <a href="https://github.com/chensoul/running_page/blob/master/assets/running.csv">跑步数据</a>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-01.png" alt="weekly-review-17-01"  />
</p>
<p>走路、体重数据可以从苹果健康数据获取：</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-06.png" alt="weekly-review-17-06" style="width:50%;" />
<p>编码数据可以从 wakatime 获取：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-02.png" alt="weekly-review-17-02"  />
</p>
<p>早起的数据，我目前是通过 ios workflow 自动化来实现的。当早起闹钟响起时，往 memos 写入一条记录。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-08.png" alt="weekly-review-17-08"  />
</p>
<p>如果可以获取到苹果屏幕使用时间数据，则可以从苹果手机获取每日第一次拿起手机的时间作为早起时间（待研究）。</p>
<h2 id="导出苹果健康数据">导出苹果健康数据</h2>
<p>如何导出苹果健康数据？可以参考这篇文章 <a href="https://sspai.com/post/42135">想要分析或备份 iPhone 「健康」应用数据？教你 3 种方法将其导出</a> 。这篇文章提到的 Health Export  工具和 python 脚本我都试过，QS Access 在手机上没有找到。</p>
<h3 id="1-health-export-在线解析">1. Health Export 在线解析</h3>
<p><a href="https://sspai.com/link?target=http%3A%2F%2Fericwolter.com%2Fprojects%2Fhealth-export.html">Health Export</a> 是国外一名独立开发者写的在线解析工具，它专门用于将健康应用导出的 XML 文件转换为 CSV 文件。</p>
<p>Health Export 提供了一个 <a href="https://www.ericwolter.com/projects/apple-health-export/">web 网站</a> 可以解析传苹果手机导出的健康数据。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-03.png" alt="weekly-review-17-03"  />
</p>
<p>如何从 IPhone 手机导出苹果健康数据呢？您可以通过以下步骤导出这些数据：</p>
<ol>
<li>打开“健康”应用程序。</li>
<li>点击屏幕右上角的“个人资料”图标。</li>
<li>滚动到页面底部，找到“导出健康数据”选项，并点击它。</li>
<li>在弹出窗口中选择要导出的数据类型，例如步数、心率等。</li>
<li>点击“下一步”按钮。</li>
<li>在下一个页面中，您可以选择要导出的时间范围。您可以选择“全部数据”或指定日期范围。</li>
<li>点击“请求导出”按钮。</li>
<li>您将被要求输入一个密码以保护您的数据。输入密码后，点击“下一步”按钮。</li>
<li>在弹出窗口中，您可以选择将数据发送到您的电子邮件地址或其他应用程序。</li>
<li>点击“导出”按钮。</li>
</ol>
<p>完成这些步骤后，您的健康数据将被导出为一个可下载的 zip 文件。您可以将其保存到您的设备上或发送到其他应用程序或云存储服务。</p>
<p>将导出的文件 export.xml 上传到  <a href="https://www.ericwolter.com/projects/apple-health-export/">web 网站</a> ，稍等片刻可以导出结果。导出的健康数据是一个指标一个 csv 文件，如果想合并数据，需要做进一步处理。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-04.png" alt="weekly-review-17-04"  />
</p>
<p>另外，Health Export 也提供了IOS APP，功能好用，支持选择指定指标数据按日期聚合导出为一个 csv，还有定时导出的功能，遗憾的是需要收费。</p>
<h3 id="2使用-python-脚本">2、使用 python 脚本</h3>
<p>这里使用了 <a href="https://sspai.com/link?target=https%3A%2F%2Fgithub.com%2Ftdda%2Fapplehealthdata">@Radcliffe</a> 提供的开源代码。目前，Github 可以在国内自由访问，所以直接通过<a href="https://sspai.com/link?target=https%3A%2F%2Fgithub.com%2Ftdda%2Fapplehealthdata%2Fraw%2Fmaster%2Fapplehealthdata.py">此链接</a>下载名称为 <code>applehealthdata.py</code> 的脚本文件。</p>
<p>然后，将之前下载好的 <code>导出.xml</code> 与该脚本文件放置在<strong>同一目录</strong>下方。为了防止报错，这里需要将 <code>导出.xml</code> 更名为 <code>export.xml</code>。</p>
<p>接下来，在该文件夹下打开终端（macOS &amp; Linux）或者命令行工具（Windows），使用 Python 2 执行该脚本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python applehealthdata.py export.xml
</span></span></code></pre></div><p>稍等片刻，XML 文件就会被解析为数个 CSV 文件了。</p>
<p>这里，我对 applehealthdata.py 这个文件做了一点修改，只导出指定的指标的指定列的数据，修改后的脚本在 <a href="https://github.com/chensoul/chensoul/blob/main/applehealthdata.py">applehealthdata.py</a>。目前，我只关注以下6个指标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">RECORDS</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;BodyFatPercentage&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;BodyMass&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;BodyMassIndex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;DistanceWalkingRunning&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;LeanBodyMass&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;StepCount&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>这 6 个指标中文含义分别是：</p>
<ul>
<li>BodyFatPercentage：脂肪率</li>
<li>BodyMass：体重</li>
<li>BodyMassIndex：BMI 指数</li>
<li>LeanBodyMass：净体重</li>
<li>DistanceWalkingRunning：走路跑步距离</li>
<li>StepCount：走路步数</li>
</ul>
<p>导出的列只需要 type、startDate、value 这 3 个：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">RECORD_FIELDS</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">((</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;sourceName&#39;, &#39;s&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;sourceVersion&#39;, &#39;s&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;device&#39;, &#39;s&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;unit&#39;, &#39;s&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;creationDate&#39;, &#39;d&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s1">&#39;startDate&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;endDate&#39;, &#39;d&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">))</span>
</span></span></code></pre></div><p>这样导出了这 6 个 csv 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">BodyMass.csv               
</span></span><span class="line"><span class="cl">DistanceWalkingRunning.csv 
</span></span><span class="line"><span class="cl">StepCount.csv
</span></span><span class="line"><span class="cl">BodyFatPercentage.csv      
</span></span><span class="line"><span class="cl">BodyMassIndex.csv          
</span></span><span class="line"><span class="cl">LeanBodyMass.csv
</span></span></code></pre></div><p>接下来，把这6个文件导入数据库，并进行合并处理。数据库我选择的是 postgres，以上 6 个文件对于 6 个建表语句：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">SEQUENCE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">health_id_seq</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;BodyFatPercentage&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;BodyMass&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;BodyMassIndex&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;DistanceWalkingRunning&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;LeanBodyMass&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;StepCount&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>我想把这6个文件按照日期合并到一个表中，于是创建 health 表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;health&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;day&#34;</span><span class="w"> </span><span class="nb">text</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;fat_pct&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;bmi&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;lean_weight&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;step_count&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;step_distance&#34;</span><span class="w"> </span><span class="nb">numeric</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;weight&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;day&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>接下来，通过 sql 合并数据插入到 health 表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">health</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="k">day</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">fat_pct</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">bmi</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">lean_weight</span><span class="p">,</span><span class="n">f</span><span class="p">.</span><span class="n">step_count</span><span class="p">,</span><span class="k">g</span><span class="p">.</span><span class="n">step_distance</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">weight</span><span class="w"> </span><span class="k">from</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">day</span><span class="p">,</span><span class="k">sum</span><span class="p">(</span><span class="s2">&#34;value&#34;</span><span class="p">)</span><span class="w"> </span><span class="n">step_count</span><span class="w">  </span><span class="k">from</span><span class="w"> </span><span class="s2">&#34;StepCount&#34;</span><span class="w"> </span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="n">f</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">select</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">day</span><span class="p">,</span><span class="n">round</span><span class="p">(</span><span class="k">cast</span><span class="p">(</span><span class="k">sum</span><span class="p">(</span><span class="s2">&#34;value&#34;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nb">numeric</span><span class="p">)</span><span class="w"> </span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">step_distance</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="s2">&#34;DistanceWalkingRunning&#34;</span><span class="w"> </span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">g</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="k">day</span><span class="o">=</span><span class="k">g</span><span class="p">.</span><span class="k">day</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">select</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="k">day</span><span class="p">,</span><span class="n">a</span><span class="p">.</span><span class="n">weight</span><span class="p">,</span><span class="n">e</span><span class="p">.</span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="s2">&#34;lean_weight&#34;</span><span class="p">,</span><span class="k">cast</span><span class="p">(</span><span class="k">c</span><span class="p">.</span><span class="s2">&#34;value&#34;</span><span class="o">*</span><span class="mi">100</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nb">numeric</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s2">&#34;fat_pct&#34;</span><span class="p">,</span><span class="n">d</span><span class="p">.</span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="s2">&#34;bmi&#34;</span><span class="w"> </span><span class="k">from</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">select</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">day</span><span class="p">,</span><span class="k">min</span><span class="p">(</span><span class="n">start_date</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">min_start_date</span><span class="p">,</span><span class="k">min</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">weight</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="s2">&#34;BodyMass&#34;</span><span class="w"> </span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="k">day</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">)</span><span class="w"> </span><span class="n">a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="s2">&#34;BodyFatPercentage&#34;</span><span class="w"> </span><span class="k">c</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">min_start_date</span><span class="o">=</span><span class="k">c</span><span class="p">.</span><span class="n">start_date</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="s2">&#34;BodyMassIndex&#34;</span><span class="w"> </span><span class="n">d</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">min_start_date</span><span class="o">=</span><span class="n">d</span><span class="p">.</span><span class="n">start_date</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="s2">&#34;LeanBodyMass&#34;</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">min_start_date</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">start_date</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="k">day</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="k">day</span><span class="o">=</span><span class="n">f</span><span class="p">.</span><span class="k">day</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="k">day</span><span class="w"> </span><span class="k">asc</span><span class="w">
</span></span></span></code></pre></div><p>最后的数据如下：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-05.png" alt="weekly-review-17-05"  />
</p>
<p>完整的 csv 文件保存在 <a href="https://github.com/chensoul/chensoul/blob/main/data/health.csv">health.csv</a> 。有些记录中体重相关的数据为空，这是因为体重相关数据是通过其他和电子秤关联的 app 写进去的。<code>要想每天都有体重相关的数据，则需要每天使用电子称测量体重。</code></p>
<p>得到这份数据之后，就可以进行统计了，比如统计体重的变化、每天走路的步数等等。</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 732 元，明细如下：</p>
<ul>
<li>4月25日：117元，100元加油</li>
<li>4月26日：59元，买药</li>
<li>4月28日：419元，加油360元</li>
<li>4月29日：21元</li>
<li>4月30日：116元</li>
</ul>
<p>4 月累计支出共 3048 元，比 3 月支出 3520 元少了 472 元。主要支出来自这几个：</p>
<ul>
<li>交通：1177元，其中300元是缴纳 ETC 押金</li>
<li>餐饮：827元</li>
<li>购物：751元</li>
<li>娱乐：216元，看电影</li>
</ul>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-07.png" alt="weekly-review-17-07" style="width:50%;" />
<h2 id="健身">健身</h2>
<p>四月跑步记录如下，总计跑了16小时、125公里。更详细数据，可以参考我的 <a href="https://run.chensoul.com/">跑步主页</a>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-09.png" alt="weekly-review-17-09"  />
</p>
<h2 id="工作">工作</h2>
<h3 id="effective-java-3-笔记">Effective Java 3 笔记</h3>
<p>请参考 <a href="/posts/2023/05/05/enforce-noninstantiability-with-a-private-constructor/">《Effective Java 3》笔记4：用私有构造函数使类不可实例化</a> 和 《Effective Java 3》笔记7：<a href="/posts/2023/05/05/eliminate-obsolete-object-references/">排除过时的对象引用</a>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-10.png" alt="weekly-review-17-10"  />
</p>
<h3 id="flexypool">FlexyPool</h3>
<p>FlexyPool 是一个用于监控数据库连接池的开源工具。它支持监控和报告连接池的使用情况、性能和瓶颈，以及自动调整连接池的大小和行为。FlexyPool 支持多种流行的 Java 数据库连接池，例如 HikariCP、Tomcat JDBC Pool、C3P0、BoneCP 等等。</p>
<p>FlexyPool 主要提供以下功能：</p>
<ol>
<li>监控连接池的使用情况，包括连接数、请求数、等待时间、执行时间等等。</li>
<li>报告连接池的性能和瓶颈，例如最慢的查询、最频繁的错误、最短的连接时间等等。</li>
<li>自动调整连接池的大小和行为，以提高性能和减少资源消耗。</li>
<li>集成到常见的监控工具中，例如 Prometheus、Grafana、InfluxDB 等等。</li>
</ol>
<p>FlexyPool 的使用相对简单，只需要将其添加到应用程序的依赖中，然后配置连接池和 FlexyPool 的参数即可。例如，如果你正在使用 HikariCP 连接池，可以按照以下步骤配置 FlexyPool：</p>
<p>1、添加 FlexyPool 的依赖到应用程序的 pom.xml 文件中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.vladmihalcea.flexypool<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>flexy-pool-core<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>2.0.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>2、在应用程序的配置文件中，配置连接池和 FlexyPool 的参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># HikariCP 数据库连接池配置</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.dataSourceClassName</span><span class="o">=</span><span class="s">com.mysql.jdbc.jdbc2.optional.MysqlDataSource</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.dataSource.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/mydb</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.dataSource.user</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.dataSource.password</span><span class="o">=</span><span class="s">secret</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.minimumIdle</span><span class="o">=</span><span class="s">10</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.maximumPoolSize</span><span class="o">=</span><span class="s">20</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.idleTimeout</span><span class="o">=</span><span class="s">30000</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.poolName</span><span class="o">=</span><span class="s">hikariPool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># FlexyPool 配置</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metricsFactory</span><span class="o">=</span><span class="s">histogram</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metric.log.enabled</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metric.log.level</span><span class="o">=</span><span class="s">info</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metric.log.interval</span><span class="o">=</span><span class="s">10</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metric.prometheus.enabled</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metric.prometheus.port</span><span class="o">=</span><span class="s">9090</span>
</span></span></code></pre></div><p>在这个配置中，我们首先配置了 HikariCP 连接池的参数，然后配置了 FlexyPool 的参数。这些参数包括度量工厂、日志和度量记录的级别、度量记录的间隔、是否启用 Prometheus 集成等等。</p>
<p>3、在应用程序启动时，将 FlexyPool 的代理对象添加到连接池中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// 获取连接池对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">FlexyPoolDataSource</span> <span class="n">flexyPoolDataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FlexyPoolDataSource</span><span class="o">&lt;&gt;(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span></code></pre></div><p>在这个代码中，我们首先获取 HikariCP 连接池对象，然后将其包装成 FlexyPool 的代理对象。这样，所有的数据库操作都将通过 FlexyPool 进行代理和监控。</p>
<p>Baeldung 网站上有一篇介绍 Spring Boot 中如何使用 FlexyPool 连接池监控工具的教程，名为 <a href="https://www.baeldung.com/spring-flexypool-guide">A Guide to FlexyPool in Spring Boot</a>。</p>
<p>这篇文章首先介绍了 FlexyPool 工具的作用，以及如何将其集成到 Spring Boot 应用程序中。FlexyPool 可以监控和报告连接池的使用情况、性能和瓶颈，以及自动调整连接池的大小和行为，以提高性能和减少资源消耗。</p>
<p>然后，文章介绍了如何在 Spring Boot 应用程序中使用 FlexyPool。具体步骤包括：</p>
<ol>
<li>添加 FlexyPool 的依赖到应用程序的 pom.xml 文件中。</li>
<li>配置连接池和 FlexyPool 的参数，例如 HikariCP 连接池的参数、FlexyPool 的度量工厂、日志和度量记录的级别、度量记录的间隔、是否启用 Prometheus 集成等等。</li>
<li>创建 FlexyPoolDataSource 对象，作为连接池的代理对象。该对象将自动创建和管理连接池，并使用 FlexyPool 工具进行监控和调整。</li>
<li>在应用程序中使用连接池，例如获取连接、执行 SQL 语句、关闭连接等等。</li>
</ol>
<p>最后，文章总结了一些连接池监控和优化的最佳实践，例如：</p>
<ol>
<li>使用 FlexyPool 工具监控连接池的使用情况和性能瓶颈，以及调整连接池的大小和行为，以提高性能和减少资源消耗。</li>
<li>配置连接池和 FlexyPool 的参数，以适应应用程序的负载和性能要求。</li>
<li>避免连接池泄漏和死锁等问题，例如及时关闭连接、设置合理的超时时间等等。</li>
</ol>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中。我写了一个 python 脚本从 memos读取最近一周的 memos 记录。</p>
<ul>
<li><strong>2023-04-28 09:01:43</strong> 4个文生图AI工具 <a href="https://xugaoxiang.com/2023/04/27/4-text-to-image-ai-tools/">查看链接</a>  <code>#memos</code></li>
<li><strong>2023-04-27 13:29:50</strong> 这是 Jony Ive 的 LoveFrom 团队出品的一本关于乔布斯的书，书中几乎全部引用乔布斯自己的话，没有解读，更加「原汁原味」，同时也收录了一些珍贵的照片。 <a href="https://stevejobsarchive.com/book">查看链接</a>  <a href="https://limboy.me/books/make-something-wonderful/">查看链接</a>  <code>#memos</code></li>
<li><strong>2023-04-27 09:52:58</strong> Alpine, Tailwind, Deno, SQLite 我的本地服务四件套 <a href="https://limboy.me/posts/local-services-tools/">查看链接</a>  Update: 用 Remix 替代了 Alpine 和 Deno，确实方便。  <code>#web</code> <code>#memos</code></li>
<li><strong>2023-04-27 08:32:37</strong> FlexyPool 是一个用于监控数据库连接池的开源工具。它支持监控和报告连接池的使用情况、性能和瓶颈，以及自动调整连接池的大小和行为。FlexyPool 支持多种流行的 Java 数据库连接池，例如 HikariCP、Tomcat JDBC Pool、C3P0、BoneCP 等等。  FlexyPool 主要提供以下功能：  监控连接池的使用情况，包括连接数、请求数、等待时间、执行时间等等。  报告连接池的性能和瓶颈，例如最慢的查询、最频繁的错误、最短的连接时间等等。  自动调整连接池的大小和行为，以提高性能和减少资源消耗。  集成到常见的监控工具中，例如 Prometheus、Grafana、InfluxDB 等等。  <a href="https://www.baeldung.com/spring-flexypool-guide">查看链接</a>  <code>#java</code> <code>#memos</code></li>
<li><strong>2023-04-27 07:24:03</strong> 人一生中最重要的两天就是出生那天和发现人生目标的那天。   &mdash;&mdash;马克吐温  <code>#摘录</code></li>
<li><strong>2023-04-25 20:07:58</strong> 受 <a href="https://github.com/yihong0618/2023/blob/main/get_up.py">查看链接</a> 启发，在 iPhone上，创建了一个自动化捷径。当早起闹铃响起时，往memos发送一条早起记录，内容如下：  早起时间：2023年4月25日 20:02  今日语录： 有些事情本身我们无法控制，只好控制自己。  起床啦，喝杯咖啡，去跑步，每天进步一点点。  <code>#memos</code></li>
<li><strong>2023-04-25 08:57:03</strong> 【怎样种时间的种子？】  时间不够用，如何种时间的种子？ 1.走电梯时耐心等候自动关门，让更多的人进来，节约了他们的时间。（这还是一颗空间、房子的种子） 2.帮父母完成她的心愿或者事务性工作。 3.教会家里的小孩子如何节约父母的时间，这个就非常高级了。 4.路上随手捡走垃圾、不乱扔垃圾，让清洁工人有更多的时间。 5.帮助老师或者有更多能量的平台做事情。 6.经常性的做义工。 7.打电话长话短说，简洁明了节约对方的时间。 8.微信尽可能用打字，让对方快速简单地知道事情。 9.开会提前到，至少准时到，千万不能迟到，会议迟到，那种下的都是巨大的种子。 10.开车让人，腾出时间给别人。 11.开心收拾家务，让家人更加容易找到东西。 12.主动收拾公共办公区域，让同事快速有效工作。 13.不闲聊八卦浪费别人时间（这颗闲聊八卦的坏种子，还会让你在工作中没有人听从你的好意见，缺乏领导力） 14.参加任何会议提前准备，积极回应。 15.与别人分享时间的管理工具，分享获得富裕时间的好种子，这可也是法布施的好种子。 16.提醒、帮助或者关注拖延症的朋友。 17.不爽约父母安排的聚餐吃饭，不回家吃饭提前说。（恩田的大种子） 18.鼓励别人的梦想，真诚由心地赞美别人。  <code>#金刚智慧</code></li>
<li><strong>2023-04-24 19:21:02</strong> 有一个想法，可以写一段脚本从 telegram 或者 memos 读取上周的分享记录，然后，转换为 markdown 格式发布在周报中。这样，周报就可以变成半自动化了。 于是，写了一个 python 脚本实现了从 memos 读取记录。😁  <code>#skill</code></li>
<li><strong>2023-04-24 17:26:52</strong> 晚唐李商隐的《锦瑟》  锦瑟无端五十弦，一弦一柱思华年。 庄生晓梦迷蝴蝶，望帝春心托杜鹃。 沧海月明珠有泪，蓝田日暖玉生烟。 此情可待成追忆，只是当时已惘然。  <code>#诗词</code></li>
<li><strong>2023-04-24 14:07:04</strong> 使用一行代码为网站的输入框增加上 AI 能力。 <a href="https://www.enhanceai.dev/">查看链接</a>  <code>#skill</code></li>
<li><strong>2023-04-24 14:04:23</strong> 平常是糊里糊涂的，现在变得出人意外的小心谨慎，这正是由于报复的欲望，而这种欲望多么能够锻炼人！  —— 大仲马   <code>#摘录</code></li>
<li><strong>2023-04-24 14:03:59</strong> 使人疲乏的不是远方的深谷，而是鞋子里的一粒沙子。  —— 伏尔泰 <code>#摘录</code></li>
<li><strong>2023-04-24 11:00:30</strong> 📝 《Effective Java 3》笔记：避免创建不必要的对象 <code>#blog</code>   <a href="https://blog.chensoul.com/posts/2023/04/24/avoid-creating-unnecessary-objects/">查看链接</a></li>
<li><strong>2023-04-24 08:20:31</strong> 使用 Python 实现 RSS 转 Newsletter.   <a href="https://www.skyue.com/23042217.html">查看链接</a>  <code>#python</code></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记7：排除过时的对象引用</title>
      <link>https://blog.chensoul.com/posts/2023/05/05/eliminate-obsolete-object-references/</link>
      <pubDate>Fri, 05 May 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/05/eliminate-obsolete-object-references/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：排除过时的对象引用。 介绍 &amp;ldquo;Eliminate obsolete object references&amp;rdquo; 是一条Java编程最佳实践的原则，指的是在代码中及时清理不</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记：排除过时的对象引用。</p>
<h2 id="介绍">介绍</h2>
<p>&ldquo;Eliminate obsolete object references&rdquo; 是一条Java编程最佳实践的原则，指的是在代码中及时清理不再使用的对象引用，以避免内存泄漏和性能问题。当一个对象不再需要时，应该尽快将其引用设置为null，这样JVM可以及时回收它所占用的内存。</p>
<p>考虑以下简单的堆栈实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.EmptyStackException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Can you spot the &#34;memory leak&#34;?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Stack</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">elements</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_INITIAL_CAPACITY</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Stack</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">elements</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="n">DEFAULT_INITIAL_CAPACITY</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">Object</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ensureCapacity</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">elements</span><span class="o">[</span><span class="n">size</span><span class="o">++]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">EmptyStackException</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">elements</span><span class="o">[--</span><span class="n">size</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">     * Ensure space for at least one more element, roughly
</span></span></span><span class="line"><span class="cl"><span class="cm">     * doubling the capacity each time the array needs to grow.
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">ensureCapacity</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="n">size</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">elements</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">size</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个程序没有明显的错误。你可以对它进行详尽的测试，它会以优异的成绩通过所有的测试，但是有一个潜在的问题。简单地说，该程序有一个「内存泄漏」问题，由于垃圾收集器活动的增加或内存占用的增加，它可以悄无声息地表现为性能的降低。在极端情况下，这种内存泄漏可能导致磁盘分页，甚至出现 OutOfMemoryError 程序故障，但这种故障相对少见。</p>
<p>那么内存泄漏在哪里呢？如果堆栈增长，然后收缩，那么从堆栈中弹出的对象将不会被垃圾收集，即使使用堆栈的程序不再引用它们。这是因为栈保留了这些对象的旧引用。一个过时的引用，是指永远不会被取消的引用。在本例中，元素数组的「活动部分」之外的任何引用都已过时。活动部分由索引小于大小的元素组成。</p>
<p>垃圾收集语言中的内存泄漏（更确切地说是无意的对象保留）是暗藏的风险。如果无意中保留了对象引用，那么对象不仅被排除在垃圾收集之外，该对象引用的任何对象也被排除在外，依此类推。即使只是无意中保留了一些对象引用，许多许多的对象也可能被阻止被垃圾收集，从而对性能产生潜在的巨大影响。</p>
<p>解决这类问题的方法很简单：一旦引用过时，就将置空。在我们的 Stack 类中，对某个项的引用一旦从堆栈中弹出就会过时。pop 方法的正确版本如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">Object</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">EmptyStackException</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[--</span><span class="n">size</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">elements</span><span class="o">[</span><span class="n">size</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// Eliminate obsolete reference
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>用 null 处理过时引用的另一个好处是，如果它们随后被错误地关联引用，程序将立即失败，出现 NullPointerException，而不是悄悄地做错误的事情。尽可能快地检测编程错误总是有益的。</p>
<p>那么，什么时候应该取消引用呢？Stack 类的哪些方面容易导致内存泄漏？简单地说，它管理自己的内存。存储池包含元素数组的元素（对象引用单元，而不是对象本身）数组的活动部分（如前面所定义的）中的元素被分配，而数组其余部分中的元素是空闲的。垃圾收集器没有办法知道这一点；对于垃圾收集器，元素数组中的所有对象引用都同样有效。只有程序员知道数组的非活动部分不重要。只要数组元素成为非活动部分的一部分，程序员就可以通过手动清空数组元素，有效地将这个事实传递给垃圾收集器。</p>
<p>一般来说，一个类管理它自己的内存时，程序员应该警惕内存泄漏。当释放一个元素时，该元素中包含的任何对象引用都应该被置为 null。</p>
<p><strong>另一个常见的内存泄漏源是缓存。</strong> 一旦将对象引用放入缓存中，就很容易忘记它就在那里，并且在它变得无关紧要之后很久仍将它留在缓存中。有几个解决这个问题的办法。如果你非常幸运地实现了一个缓存，只要缓存外有对其键的引用，那么就将缓存表示为 WeakHashMap；当条目过时后，条目将被自动删除。记住，WeakHashMap 只有在缓存条目的预期生存期由键的外部引用（而不是值）决定时才有用。</p>
<p>更常见的情况是，缓存条目的有效生存期定义不太好，随着时间的推移，条目的价值会越来越低。在这种情况下，缓存偶尔应该清理那些已经停用的条目。这可以通过后台线程（可能是 <code>ScheduledThreadPoolExecutor</code>）或向缓存添加新条目时顺便完成。LinkedHashMap 类通过其 <code>removeEldestEntry</code> 方法简化了后一种方法。对于更复杂的缓存，你可能需要直接使用 <code>java.lang.ref</code>。</p>
<p><strong>内存泄漏的第三个常见来源是侦听器和其他回调。</strong> 如果你实现了一个 API，其中客户端注册回调，但不显式取消它们，除非你采取一些行动，否则它们将累积。确保回调被及时地垃圾收集的一种方法是仅存储对它们的弱引用，例如，将它们作为键存储在 WeakHashMap 中。</p>
<h3 id="如何排除过时对象引用">如何排除过时对象引用</h3>
<p>以下是一些示例，展示了如何使用Java语言中的一些技术来排除过时的对象引用。</p>
<ol>
<li>在循环中使用局部变量</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// do something with str
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用局部变量<code>str</code>来引用列表中的元素，而不是重复地使用<code>list.get(i)</code>。这样，当循环结束时，<code>str</code>的引用将被自动清除，避免了过时的对象引用。</p>
<ol start="2">
<li>在使用完对象后及时清除引用</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">SomeObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SomeObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="c1">// do something with obj
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// clear the reference to obj
</span></span></span></code></pre></div><p>在这个示例中，我们在使用完对象后立即将其引用设置为null，以便JVM可以及时回收它所占用的内存。如果不清除引用，对象将一直存在于内存中，直到JVM进行垃圾回收。</p>
<ol start="3">
<li>使用弱引用</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">SomeObject</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">SomeObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// do something with obj
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// clear the reference to obj
</span></span></span></code></pre></div><p>在这个示例中，我们使用了一个弱引用来引用对象，以便在对象不再被强引用时可以被及时回收。当我们需要使用对象时，可以通过弱引用获取对象的引用，使用完后及时将其引用设置为null。</p>
<ol start="4">
<li>使用try-with-resources语句</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&#34;file.txt&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// do something with in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用了try-with-resources语句来打开一个文件流，并在使用完后自动关闭它。这样可以确保在不再需要文件流时，它的引用将被清除，避免了过时的对象引用。</p>
<ol start="5">
<li>使用软引用</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SoftReference</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">SomeObject</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">SomeObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">ref</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// do something with obj
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// clear the reference to obj
</span></span></span></code></pre></div><p>在这个示例中，我们使用了一个软引用来引用对象，以便在JVM需要回收内存时可以回收对象。软引用在内存不足时通常会被回收，但在内存充足时可以保留对象，避免了过时的对象引用。</p>
<ol start="6">
<li>使用虚引用</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ReferenceQueue</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReferenceQueue</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="n">PhantomReference</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PhantomReference</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">SomeObject</span><span class="o">(),</span> <span class="n">queue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">ref</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span> <span class="c1">// clear the reference to obj
</span></span></span></code></pre></div><p>在这个示例中，我们使用了一个虚引用来引用对象，以便在JVM回收对象之前可以进行一些必要的清理工作。虚引用在JVM回收对象时会被添加到一个引用队列中，因此我们可以在对象被回收之前执行必要的清理工作。</p>
<ol start="7">
<li>使用对象池</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">ObjectPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">objects</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">T</span> <span class="nf">getObject</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">T</span> <span class="n">obj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">objects</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">obj</span> <span class="o">=</span> <span class="n">createObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">obj</span> <span class="o">=</span> <span class="n">objects</span><span class="o">.</span><span class="na">iterator</span><span class="o">().</span><span class="na">next</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">objects</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">returnObject</span><span class="o">(</span><span class="n">T</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">objects</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">T</span> <span class="nf">createObject</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// create a new object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用了一个对象池来管理对象的生命周期。当需要一个对象时，我们从对象池中获取一个对象，而不是每次都创建一个新的对象。当不再需要对象时，我们将其返回到对象池中，以便其他对象可以重复使用。对象池可以避免过时的对象引用，并提高代码的性能和可伸缩性。</p>
<ol start="8">
<li>使用弱散列映射</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">SomeObject</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SomeObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// clear the reference to key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// the entry in the map may be removed if key is not strongly referenced elsewhere
</span></span></span></code></pre></div><p>在这个示例中，我们使用了一个弱散列映射来存储对象引用和相应的值。当对象不再被强引用时，它的引用可能被从映射中删除，从而避免了过时的对象引用。弱散列映射通常用于缓存和事件处理等场景。</p>
<ol start="9">
<li>使用缓存</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">SomeObjectCache</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">MAX_SIZE</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">SomeObject</span><span class="o">&gt;(</span><span class="n">MAX_SIZE</span><span class="o">,</span> <span class="mf">0.75f</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">removeEldestEntry</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">eldest</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">MAX_SIZE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kd">static</span> <span class="n">SomeObject</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">SomeObject</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用了一个缓存来存储对象引用和相应的值。当缓存达到最大大小时，最旧的条目将被自动删除，从而避免了过时的对象引用。缓存通常用于频繁访问的数据和计算结果，可以提高代码的性能和可伸缩性。</p>
<ol start="10">
<li>使用对象池框架</li>
</ol>
<p>对象池框架是一种用于管理对象生命周期的通用框架，可以避免过时的对象引用和提高代码的性能和可伸缩性。一些流行的对象池框架包括Apache Commons Pool和Google Guava Cache。</p>
<h2 id="扩展">扩展</h2>
<h3 id="弱引用软引用和虚引用区别">弱引用、软引用和虚引用区别</h3>
<p>弱引用、软引用和虚引用是Java中三种不同类型的引用，它们之间的区别如下：</p>
<h4 id="弱引用weakreference">弱引用（WeakReference）</h4>
<p>弱引用是一种较弱的引用类型，当一个对象只被弱引用所引用时，它在下一次垃圾回收时会被回收。</p>
<p>弱引用通常用于需要缓存大量对象的应用场景，例如缓存和高速缓存等。在这些场景中，使用弱引用可以避免占用过多的内存，同时又可以快速访问缓存中的对象。</p>
<p>应该使用弱引用的情况包括：</p>
<ol>
<li>
<p>需要缓存大量对象：使用弱引用可以避免占用过多的内存空间，从而可以缓存更多的对象。</p>
</li>
<li>
<p>不需要快速访问缓存中的对象：由于弱引用只有在下一次垃圾回收时才会被回收，因此可能会导致较长的访问延迟。如果应用程序可以容忍这种情况，可以考虑使用弱引用。</p>
</li>
<li>
<p>需要频繁的垃圾回收：由于弱引用只有在下一次垃圾回收时才会被回收，因此可能会导致频繁的垃圾回收。如果应用程序可以容忍这种情况，可以考虑使用弱引用。</p>
</li>
</ol>
<p>例如，我们可以使用弱引用来实现一个缓存，当内存不足时，JVM会自动回收弱引用所引用的对象，从而避免内存泄漏和OOM错误。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">SomeObject</span> <span class="nf">getObject</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">SomeObject</span> <span class="n">obj</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">SomeObject</span><span class="o">&gt;</span> <span class="n">reference</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">reference</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">obj</span> <span class="o">=</span> <span class="n">reference</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">obj</span> <span class="o">=</span> <span class="n">createObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="n">obj</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用弱引用来缓存对象，当内存不足时，JVM会自动回收弱引用所引用的对象。这样可以避免占用过多的内存，同时又可以快速访问缓存中的对象。</p>
<h4 id="软引用softreference">软引用（SoftReference）</h4>
<p>软引用是一种较强的引用类型，当一个对象只被软引用所引用时，只有在内存不足时才会被回收。</p>
<p>软引用通常用于需要缓存大量对象的应用场景，例如图片缓存、数据缓存等。在这些场景中，使用软引用可以避免占用过多的内存，同时又可以快速访问缓存中的对象。</p>
<p>应该使用软引用的情况包括：</p>
<ol>
<li>
<p>需要缓存大量对象：使用软引用可以避免占用过多的内存空间，从而可以缓存更多的对象。</p>
</li>
<li>
<p>需要快速访问缓存中的对象：使用软引用可以快速访问缓存中的对象，避免频繁地加载和计算。</p>
</li>
<li>
<p>可以容忍偶尔的垃圾回收：由于软引用只有在内存不足时才会被回收，因此可能会导致偶尔的垃圾回收。如果应用程序可以容忍这种情况，可以考虑使用软引用。</p>
</li>
</ol>
<p>例如，我们可以使用软引用来实现一个图片缓存，当内存不足时，JVM会自动回收软引用所引用的对象，从而避免内存泄漏和OOM错误。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">Bitmap</span><span class="o">&gt;&gt;</span> <span class="n">imageCache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">Bitmap</span> <span class="nf">loadImage</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">SoftReference</span><span class="o">&lt;</span><span class="n">Bitmap</span><span class="o">&gt;</span> <span class="n">reference</span> <span class="o">=</span> <span class="n">imageCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">reference</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">bitmap</span> <span class="o">=</span> <span class="n">reference</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">bitmap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">bitmap</span> <span class="o">=</span> <span class="n">downloadImage</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">bitmap</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">imageCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="k">new</span> <span class="n">SoftReference</span><span class="o">&lt;&gt;(</span><span class="n">bitmap</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">bitmap</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们使用软引用来缓存图片，当内存不足时，JVM会自动回收软引用所引用的对象。这样可以避免占用过多的内存，同时又可以快速访问缓存中的图片。</p>
<h4 id="虚引用phantomreference">虚引用（PhantomReference）</h4>
<p>虚引用是Java中四种引用类型中最弱的一种，它主要用于跟踪对象被垃圾回收的状态。虚引用本身并不会对对象的生命周期产生影响，但可以在对象被垃圾回收时收到一个通知，从而进行一些清理或其他操作。</p>
<p>虚引用的使用场景比较少，一般用于以下几个方面：</p>
<ol>
<li><strong>对象的finalize()方法：</strong> 虚引用可以用于实现对象的finalize()方法，当对象被垃圾回收时，虚引用会收到一个通知，从而触发对象的finalize()方法。</li>
<li><strong>NIO DirectByteBuffer对象的释放：</strong> 在使用NIO编程时，可能会创建大量的DirectByteBuffer对象，这些对象可能会占用大量的内存空间。当这些对象不再使用时，需要手动调用System.gc()方法触发一次垃圾回收，才能释放这些对象的内存。使用虚引用可以避免手动调用System.gc()方法，当这些对象被垃圾回收时，虚引用会收到一个通知，从而释放这些对象的内存。</li>
<li><strong>对象池的管理：</strong> 在一些需要频繁创建和销毁对象的应用场景中，可以使用对象池来提高性能。当对象不再使用时，可以将对象放入虚引用中，当对象被垃圾回收时，虚引用会收到一个通知，从而将对象从对象池中移除。</li>
</ol>
<p>需要注意的是，虚引用不适用于缓存或其他需要快速访问对象的应用场景，因为虚引用本身并不保证对象的可用性和可访问性。</p>
<blockquote>
<p>因此，软引用和弱引用的主要区别在于它们的强度和垃圾回收的时机。软引用比弱引用更强，只有在内存不足时才会被回收，而弱引用则更弱，只有在下一次垃圾回收时才会被回收。同时，使用软引用可能会导致更少的垃圾回收，但可能会占用更多的内存空间，而使用弱引用可能会导致更频繁的垃圾回收，但可以更快地释放内存空间。</p>
</blockquote>
<h3 id="弱引用是否会影响程序的性能">弱引用是否会影响程序的性能？</h3>
<p><code>弱引用可能会影响程序的性能，因为它们可能会导致频繁的垃圾回收。</code>由于弱引用<code>只有在下一次垃圾回收时才会被回收</code>，因此当使用大量的弱引用时，可能会导致更频繁的垃圾回收，从而降低程序的性能。</p>
<p>当一个对象只被弱引用所引用时，在下一次垃圾回收时它会被回收。如果应用程序中存在大量的弱引用对象，每次垃圾回收都需要扫描这些对象，从而增加了垃圾回收的时间和开销。</p>
<p>因此，在使用弱引用时需要注意以下几点：</p>
<ol>
<li>不要过度使用弱引用：如果应用程序中存在大量的弱引用对象，可能会导致频繁的垃圾回收，从而影响程序的性能。因此，应该避免过度使用弱引用，尽可能减少弱引用对象的数量。</li>
<li>注意垃圾回收的时机：弱引用只在下一次垃圾回收时才会被回收，因此可能会导致较长的访问延迟。在使用弱引用时需要注意垃圾回收的时机，如果应用程序需要快速访问缓存中的对象，可能需要使用其他类型的引用。</li>
<li>检查弱引用是否被回收：当一个对象只被弱引用所引用时，它在下一次垃圾回收时会被回收。在使用弱引用时需要注意检查弱引用对象是否被回收，避免引用无效的对象。</li>
</ol>
<h3 id="如何检查弱引用对象是否被回收">如何检查弱引用对象是否被回收？</h3>
<p>在Java中，可以通过获取弱引用对象的get()方法返回的对象来检查引用对象是否被回收。当一个弱引用所引用的对象被回收后，get()方法返回的对象将为null。</p>
<p>例如，以下示例代码演示了如何使用弱引用检查对象是否被回收：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">weakRef</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 检查对象是否被回收
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="o">(</span><span class="n">weakRef</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对象未被回收
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Object is alive&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 对象已被回收
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Object has been collected&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们创建了一个对象，并使用弱引用来引用它。然后，我们通过检查弱引用对象的get()方法返回的对象来判断对象是否被回收。</p>
<p>当对象未被回收时，get()方法返回的对象不为null，表示对象仍然存活。当对象被回收时，get()方法返回的对象为null，表示对象已经被回收。</p>
<p>需要注意的是，由于弱引用只在下一次垃圾回收时才会被回收，因此在使用弱引用检查对象是否被回收时，需要注意垃圾回收的时机。如果应用程序需要立即检查对象是否被回收，可以手动触发一次垃圾回收，例如通过<code>System.gc()</code>方法来触发。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记4：用私有构造函数使类不可实例化</title>
      <link>https://blog.chensoul.com/posts/2023/05/05/enforce-noninstantiability-with-a-private-constructor/</link>
      <pubDate>Fri, 05 May 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/05/enforce-noninstantiability-with-a-private-constructor/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：用私有构造函数使类不可实例化。 介绍 使用私有构造函数强制实现不可实例化的主要原因是防止类被意</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记：用私有构造函数使类不可实例化。</p>
<h2 id="介绍">介绍</h2>
<p>使用私有构造函数强制实现不可实例化的主要原因是防止类被意外地实例化，以使代码更加健壮和可靠。在某些情况下，我们只需要使用类中的静态方法和静态字段，而不需要创建该类的实例。如果类中没有显式地定义私有构造函数，Java编译器将会自动为该类生成一个默认的公共构造函数，这意味着该类可以在其他类中被实例化。如果这不是我们想要的，为了防止其他人意外地实例化我们的类，我们可以将构造函数设置为私有。</p>
<p>此外，使用私有构造函数强制实现不可实例化还有以下优点：</p>
<ol>
<li>明确表明该类不可被实例化，提高了代码的可读性和可维护性。</li>
<li>防止类被子类化，从而避免了继承所带来的副作用和不必要的复杂性。</li>
<li>提高了代码的安全性，防止其他类在不合适的情况下实例化该类。</li>
</ol>
<p>这是一个实现了私有构造函数强制实现不可实例化的类的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UtilityClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 禁止默认构造函数防止实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="nf">UtilityClass</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">throw</span> <span class="k">new</span> <span class="n">AssertionError</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 其他静态方法和字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>这个类中的私有构造函数会在被调用时抛出<code>AssertionError</code>。这样做可以确保构造函数永远不会从类内部或外部调用。</p>
<p>通过将构造函数设置为私有，这个类就不能从外部被实例化。这个习惯用法也防止了类被子类化。如果一个类的构造函数是私有的，那么它不能被子类调用，因为子类必须调用父类的构造函数来完成初始化。因此，如果一个类的构造函数是私有的，它就不能被子类化，因为子类不能调用父类的构造函数来完成初始化。</p>
<p>以下是一个示例，展示了如何使用私有构造函数防止类被子类化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">FinalClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">FinalClass</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，<code>FinalClass</code>被声明为<code>final</code>，因此不能被子类化。此外，它的构造函数是私有的，因此不能从子类中被调用。由于该类不能被子类化，因此它的行为不会受到子类的影响，从而避免了继承所带来的副作用和不必要的复杂性。</p>
<p>在某些情况下，将类设置为不能被实例化，但可以被子类化是有用的。这通常是因为我们希望子类化的类能够继承父类的行为和属性，同时又不希望外部能够实例化该类。以下是一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="nf">Animal</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">makeSound</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">extends</span> <span class="n">Animal</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Dog</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeSound</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Woof!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>Animal</code>类被设置为抽象类，它的构造函数被设置为<code>protected</code>，这意味着该类不能被实例化，但可以被子类化。<code>Dog</code>类继承了<code>Animal</code>类，并实现了<code>makeSound()</code>方法。由于<code>Animal</code>类的构造函数被设置为<code>protected</code>，所以<code>Dog</code>类可以调用父类的构造函数来进行初始化。</p>
<p>在这个例子中，我们希望<code>Animal</code>类能够提供一些通用的行为和属性，同时又不希望外部能够实例化该类，因为<code>Animal</code>类本身并不是一种具体的动物。而<code>Dog</code>类作为<code>Animal</code>类的子类，可以继承<code>Animal</code>类的行为和属性，并实现自己的特定行为，以实现具体的功能。</p>
<h2 id="用途">用途</h2>
<p>私有构造函数还有其他一些用途，以下是一些常见的用途：</p>
<ol>
<li>
<p>防止实例化：私有构造函数可以防止类被实例化，这对于只包含静态方法和静态字段的实用工具类非常有用。这些类可以通过将构造函数设置为私有来防止它们被实例化，从而避免不必要的对象创建和资源浪费。</p>
</li>
<li>
<p>强制实现单例：单例模式是一种常见的设计模式，它要求一个类有且仅有一个实例，并提供一个全局访问点。私有构造函数可以强制实现单例模式，因为它可以防止类被实例化，除非类的内部定义了一个静态实例并提供了一个公共的静态访问方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，<code>Singleton</code>类的构造函数是私有的，因此它不能被其他类实例化。<code>getInstance()</code>方法提供了一个全局访问点，并在需要时创建了一个静态实例。由于构造函数是私有的，因此只有<code>Singleton</code>类的内部才能创建实例，从而实现了单例模式。</p>
</li>
<li>
<p>防止子类化：私有构造函数可以防止类被子类化，从而避免了继承所带来的副作用和不必要的复杂性。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">FinalClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">FinalClass</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，<code>FinalClass</code>类被声明为<code>final</code>，它的构造函数是私有的，因此它不能被子类化。该类提供了一些静态方法，可以在其他类中调用，但是不能被子类化。</p>
</li>
<li>
<p>限制继承：如果一个类的构造函数是私有的，那么它不能被继承，这可以用来限制类的继承。</p>
</li>
<li>
<p>实现工厂方法：工厂方法是一种常见的设计模式，它提供了一个创建对象的接口，但是将具体的对象创建过程留给了子类或具体的实现类。私有构造函数可以与工厂方法一起使用，以确保只有工厂方法能够创建对象，从而使对象创建过程更加可控和安全。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Shape</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Shape</span> <span class="nf">createRectangle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Rectangle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Shape</span> <span class="nf">createCircle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">Circle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Rectangle</span> <span class="kd">extends</span> <span class="n">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Rectangle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Circle</span> <span class="kd">extends</span> <span class="n">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Circle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，<code>Shape</code>类的构造函数是私有的，因此它不能被实例化。<code>Shape</code>类提供了两个静态工厂方法，<code>createRectangle()</code>和<code>createCircle()</code>，用于创建不同的形状。<code>Rectangle</code>和<code>Circle</code>类继承自<code>Shape</code>类，并实现了自己的构造函数。</p>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-16｜《灌篮高手》电影、《春山如笑》话剧</title>
      <link>https://blog.chensoul.com/posts/2023/04/25/weekly_review_16/</link>
      <pubDate>Tue, 25 Apr 2023 08:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/25/weekly_review_16/</guid>
      <description>前言 本篇是对 2023-04-17 到 2023-04-23 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这周的工作，手上累积了三个迭代版本，因为临近五一</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-01.png" alt="weekly-review-16-01"  />
</p>
<p>本篇是对 <code>2023-04-17</code> 到 <code>2023-04-23</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周的工作，手上累积了三个迭代版本，因为临近五一及其他原因，短期内无法发布上线。开发过程中，想着这些版本都会一个个上线，所以三个版本之间合并了代码，存在了依赖关系。以后，还是需要小版本迭代、上一个版本发布之后再从 main 分支合并代码。</p>
<p>这周先后看了《灌篮高手》电影、《春山如笑》话剧，体验了两种艺术表现形式，都让人失望。</p>
<p>利用空余时间，将 n8n 进行了调整，只将我在豆瓣、github、spotify、blog、strava上的活动同步到telegram，而直接不同步到 memos，单独创建一个 workflow 将 telegram 同步到 memos。这样 telegram 是一个对外分享的频道，而 memos 可以分享一些个人的心情或者说说。另外，为了减少对大家的干扰，不再将 rss 订阅内容同步到我的 <a href="https://t.me/chensoul_share">telegram 频道</a>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-16.png" alt="weekly-review-16-16"  />
</p>
<h2 id="灌篮高手">灌篮高手</h2>
<p>4月20日，灌篮高手国内上映，抽时间下班和老婆去看了这场电影。看完之后发了一个朋友圈：</p>
<blockquote>
<p>两个小时的电影，一场篮球比赛，尽是回忆，留下的是半亩良田半亩差评</p>
</blockquote>
<p>这就是我对这个电影的评价。因为情怀而去看了这部电影，却被情怀出卖了，这年头情怀不值钱了么？整部电影以宫城良田为视角，不停的回忆，四十分钟的比赛节奏不停的中断。很多片段都是动画里的内容，没有多少新内容。流川枫的刻画太少、樱木花道还是那样勇猛、晴子就没出现几次。。。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-11.jpeg" alt="weekly-review-16-11"  />
</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-12.jpeg" alt="weekly-review-16-12"  />
</p>
<h2 id="看话剧">看话剧</h2>
<p>周六去中南剧场看了一个话剧《春山如笑》，这是第一次看话剧，第一次接触话剧这个艺术表现形式。相比较于电影，我还是更喜欢看电影。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-13.jpeg" alt="weekly-review-16-13"  />
</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-14.jpeg" alt="weekly-review-16-14"  />
</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-15.jpeg" alt="weekly-review-16-15"  />
</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 292.5 元，明细如下：</p>
<ul>
<li>4月21日：59元，和同事一起吃饭</li>
<li>4月22日：232元，周末买菜做饭，买水果</li>
<li>4月24日：1.5元，跑步小腿抽筋，骑共享单车回公司</li>
</ul>
<p>四月累计支出共 2417 元，其中餐饮和购物占了一半。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-09.jpeg" alt="weekly-review-16-09" style="width:50%;" />
<h2 id="健身">健身</h2>
<p>每天走一万步，这周完成了目标。以后每天跑步的话，这个目标就很容易达成了，甚至这个目标会换成每天跑步。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-10.jpeg" alt="weekly-review-16-10" style="width:50%;" />
<p>从 strava 的训练日志，可以看到本周运动记录如下：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-07.png" alt="weekly-review-16-07"  />
</p>
<p>从 strava 的训练日历，可以看到截至24日，本月运动了20天，23次，一共跑步了100公里。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-08.png" alt="weekly-review-16-08"  />
</p>
<h2 id="工作">工作</h2>
<h3 id="effective-java-3-笔记">Effective Java 3 笔记</h3>
<p>请参考《<a href="https://blog.chensoul.com/posts/2023/04/24/avoid-creating-unnecessary-objects/">《Effective Java 3》笔记：避免创建不必要的对象</a>》。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-02.png" alt="weekly-review-16-02"  />
</p>
<p>上面这个图是使用 <a href="https://shots.so/">Shots</a>  制作的，它是免费的，可以制作好看的图片，强烈推荐使用。</p>
<h2 id="本周分享">本周分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li><a href="https://www.skyue.com/23042217.html">使用 Python 实现 RSS 转 Newsletter</a></li>
<li><a href="https://www.bilibili.com/read/cv23249529">5种微服务注册中心该如何选型？</a></li>
<li><a href="https://allisonseboldt.com/5-years-of-indie-hacking/">5 Years of Indie Hacking</a></li>
<li><a href="https://feizhaojun.com/?p=3832">一个技术精致的网站：接口设计和图片加载</a></li>
<li><a href="https://newzone.top/posts/2022-11-03-ffmpeg_screen_recording.html">抛弃又贵又难用的录屏软件，3 分钟入门 FFmpeg</a></li>
<li><a href="http://weishu.me/2021/09/26/start-to-use-Rust/">开始学习和使用 Rust</a></li>
</ul>
<h3 id="一些工具">一些工具</h3>
<ul>
<li>
<p><a href="https://www.enhanceai.dev/">EnhanceAI</a> 使用一行代码为网站的输入框增加上 AI 能力。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-03.png" alt="weekly-review-16-03"  />
</p>
</li>
<li>
<p><a href="https://avatarmaker.com/">Avatar Maker</a> 一款在线 2D 动漫头像生成器，效果比较偏美漫风格。针对于半身头像的一些特征，提供了丰富的选项。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-04.png" alt="weekly-review-16-04"  />
</p>
</li>
<li>
<p><a href="https://markflow.app/">Markflow</a> 网页元素快速拷贝的工具，支持复制粘贴到 Figma，React，Html 里。这个网页中可以试用，Inspector 的效果还是很不错的。就是 Free Plan 每个月只能拷贝 5 个 elements 有点过于没诚意。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-05.png" alt="weekly-review-16-05"  />
</p>
</li>
<li>
<p><a href="https://shots.so/">Shots</a> 一款在线 Mockup 工具，能非常快速的做出套壳的效果图，内置的模版很多，样式调整的颗粒度也很细。适合独立开发快速出图。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-06.png" alt="weekly-review-16-06"  />
</p>
</li>
</ul>
<h3 id="本周嘀咕">本周嘀咕</h3>
<p>其实，大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中，如果有一个脚本可以读取 Telegram 或者 memos 接口获取上周的分享记录，则可以自动化生成分享内容了。于是，花了一点时间写了一个 python 脚本 <a href="https://github.com/chensoul/chensoul.github.io/blob/main/fetch_memos.py">fetch_memos.py</a> 来读取 memos 接口。</p>
<p>获取到的内容如下：</p>
<ul>
<li><strong>2023-04-21 08:31:23</strong> 📺 看过灌篮高手 <code>#douban</code> <code>#watched</code>   <a href="http://movie.douban.com/subject/35315950/">查看链接</a></li>
<li><strong>2023-04-18 20:33:47</strong> 📺 看过龙马精神 <code>#douban</code> <code>#watched</code>  <a href="http://movie.douban.com/subject/35595615/">查看链接</a></li>
<li><strong>2023-04-18 20:33:47</strong> 📖 最近在读Rust权威指南 <code>#douban</code> <code>#reading</code>  <a href="https://book.douban.com/subject/35081743/">查看链接</a></li>
<li><strong>2023-04-18 20:33:47</strong> 📖 最近在读Python编程 <code>#douban</code> <code>#reading</code>  <a href="https://book.douban.com/subject/35196328/">查看链接</a></li>
<li><strong>2023-04-18 20:33:47</strong> 📖 最近在读Python工匠 <code>#douban</code> <code>#reading</code>  <a href="https://book.douban.com/subject/35723705/">查看链接</a></li>
<li><strong>2023-04-18 18:40:50</strong> 📝 周报-15｜Umami升级到2.0、汉街蜡像馆、使用Strava跑步 <code>#blog</code>   <a href="https://blog.chensoul.com/posts/2023/04/18/weekly_review_15/">查看链接</a></li>
<li><strong>2023-04-17 17:48:43</strong> 🌟 chensoul starred chensoul/chensoul.github.io <code>#github</code> <code>#star</code>  <a href="https://github.com/chensoul/chensoul.github.io">查看链接</a></li>
<li><strong>2023-04-17 17:10:45</strong> 📝 《Effective Java 3》笔记：使用私有构造函数或枚举类型创建单例 <code>#blog</code>   <a href="https://blog.chensoul.com/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/">查看链接</a></li>
</ul>
<p>后续的想法：对上面内容进行分类，比如，将带有豆瓣、Github、Strava、Spotfy、Blog标签的内容，归纳为我最近的活动；将带有 tool、skill 等标签其他内容归纳为我的分享（技术相关）；将其他内容归纳为我发表的说说。</p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记6：避免创建不必要的对象</title>
      <link>https://blog.chensoul.com/posts/2023/04/24/avoid-creating-unnecessary-objects/</link>
      <pubDate>Mon, 24 Apr 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/24/avoid-creating-unnecessary-objects/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：避免创建不必要的对象。 介绍 创建对象时，经常会复用对象。如果对象是不可变的，那么它总是可以被</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记：避免创建不必要的对象。</p>
<h2 id="介绍">介绍</h2>
<p>创建对象时，经常会复用对象。如果对象是不可变的，那么它总是可以被复用的。</p>
<p>下面一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;bikini&#34;</span><span class="o">);</span> <span class="c1">// DON&#39;T DO THIS!
</span></span></span></code></pre></div><p>该语句每次执行时都会创建一个新的 String 实例，而这些对象创建都不是必需的。String 构造函数的参数 <code>(&quot;bikini&quot;)</code> 本身就是一个 String 实例，在功能上与构造函数创建的所有对象相同。如果这种用法发生在循环或频繁调用的方法中，创建大量 String 实例是不必要的。</p>
<p>改进后的版本如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;bikini&#34;</span><span class="o">;</span>
</span></span></code></pre></div><p>这个版本使用单个 String 实例，而不是每次执行时都创建一个新的实例。此外，可以保证在同一虚拟机中运行的其他代码都可以复用该对象，只要恰好包含相同的字符串字面量。</p>
<p>通常可以通过使用静态工厂方法来避免创建不必要的对象，而不是在提供这两种方法的不可变类上使用构造函数。例如，工厂方法 <code>Boolean.valueOf(String)</code> 比构造函数 <del>Boolean(String)</del> 更可取，后者在 Java 9 中被弃用了。构造函数每次调用时都必须创建一个新对象，而工厂方法从来不需要这样做，在实际应用中也不会这样做。除了复用不可变对象之外，如果知道可变对象不会被修改，也可以复用它们。</p>
<p>有些对象的创建的代价相比而言要昂贵得多。如果你需要重复地使用这样一个「昂贵的对象」，那么最好将其缓存以供复用。</p>
<p>下面是使用正则表达式最简单的方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Performance can be greatly improved!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isRomanNumeral</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="s">&#34;^(?=.)M*(C[MD]|D?C{0,3})&#34;</span> <span class="o">+</span> <span class="s">&#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个实现的问题是它依赖于 <code>String.matches</code> 方法。<strong>虽然 String.matches 是检查字符串是否与正则表达式匹配的最简单方法，但它不适合在性能关键的情况下重复使用。</strong> 问题在于，它在内部为正则表达式创建了一个 Pattern 实例，并且只使用一次，之后就进行垃圾收集了。创建一个 Pattern 实例是很昂贵的，因为它需要将正则表达式编译成有限的状态机。</p>
<p>为了提高性能，将正则表达式显式编译为 Pattern 实例（它是不可变的），作为类初始化的一部分，缓存它，并在每次调用 isRomanNumeral 方法时复用同一个实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Reusing expensive object for improved performance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RomanNumerals</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Pattern</span> <span class="n">ROMAN</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&#34;^(?=.)M*(C[MD]|D?C{0,3})&#34;</span> <span class="o">+</span> <span class="s">&#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isRomanNumeral</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ROMAN</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">matches</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果频繁调用 isRomanNumeral，改进版本将提供显著的性能提升。不仅性能得到了改善，清晰度也得到了提高。为不可见的 Pattern 实例创建一个静态终态字段允许我们为它命名，这比正则表达式本身更容易阅读。</p>
<p>如果加载包含改进版 isRomanNumeral 方法的类时，该方法从未被调用过，那么初始化字段 ROMAN 是不必要的。因此，可以用延迟初始化字段的方式在第一次调用 isRomanNumeral 方法时才初始化字段，而不是在类加载时初始化，<strong>但不建议这样做</strong>。通常情况下，<strong>延迟初始化会使实现复杂化，而没有明显的性能改善</strong>。</p>
<p>当一个对象是不可变的，很明显，它可以安全地复用，但在其他情况下，它远不那么明显，甚至违反直觉。考虑适配器的情况，也称为视图。适配器是委托给支持对象的对象，提供了一个替代接口。因为适配器的状态不超过其支持对象的状态，所以不需要为给定对象创建一个给定适配器的多个实例。</p>
<p>例如，Map 接口的 keySet 方法返回 Map 对象的 Set 视图，其中包含 Map 中的所有键。事实上，返回的 Set 实例通常是可变的，但所有返回的对象在功能上都是相同的，因为它们都由相同的 Map 实例支持。因此，对给定 Map 对象上的 keySet 的每次调用都可能返回相同的 Set 实例。</p>
<p>由于返回的 Set 实例在功能上是相同的，因此创建 keySet 视图对象的多个实例是不必要的，也没有好处。因此，在使用 keySet 视图的时候，我们应该尽可能地重用同一个 Set 实例，而不是每次调用 keySet 方法都创建一个新的 Set 实例。</p>
<p>以下是一个示例，展示了如何重用 keySet 视图的 Set 实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestKeySetReuse</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">&#34;one&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&#34;two&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&#34;three&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">keySet1</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">keySet2</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">keySet1</span> <span class="o">==</span> <span class="n">keySet2</span><span class="o">);</span> <span class="c1">// true，说明是同一个实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="n">keySet1</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">);</span> <span class="c1">// {2=two, 3=three}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">keySet2</span><span class="o">);</span> <span class="c1">// [2, 3]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们首先创建了一个 HashMap 对象，并向其中添加了一些键值对。然后，我们两次调用 keySet 方法，分别将返回的 Set 实例保存到 keySet1 和 keySet2 变量中。</p>
<p>由于 keySet1 和 keySet2 是由相同的 Map 实例支持的，因此它们是相等的，即 <code>keySet1 == keySet2</code> 返回 true。我们可以看到，实际上它们是同一个 Set 实例。</p>
<p>然后，我们从 keySet1 中删除一个键，并打印出 Map 和 keySet2 的内容。我们可以看到，当我们修改了 keySet1 中的内容时，keySet2 也被修改了，因为它们是同一个 Set 实例。</p>
<p>因此，在使用 Map 的 keySet 方法时，应该尽可能地重用同一个 Set 实例，以避免不必要的对象创建和不必要的行为。</p>
<p>另一种创建不必要对象的方法是自动装箱，它允许程序员混合基本类型和包装类型，根据需要自动装箱和拆箱。<strong>自动装箱模糊了基本类型和包装类型之间的区别，</strong> 两者有细微的语义差别和不明显的性能差别。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Hideously slow! Can you spot the object creation?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">sum</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="n">L</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个程序得到了正确的答案，但是由于一个字符的印刷错误，它的速度比实际要慢得多。变量 sum 被声明为 Long 而不是 long，这意味着程序将构造大约 231 个不必要的 Long 实例（大约每次将 Long i 添加到 Long sum 时都有一个实例）。将 sum 的声明从 Long 更改为 long，机器上的运行时间将从 6.3 秒减少到 0.59 秒。教训很清楚：<strong>基本类型优于包装类，还应提防意外的自动装箱。</strong></p>
<p>本条目不应该被曲解为是在暗示创建对象是成本昂贵的，应该避免。相反，创建和回收这些小对象的构造函数成本是很低廉的，尤其是在现代 JVM 实现上。<strong>创建额外的对象来增强程序的清晰性、简单性或功能通常是件好事。</strong></p>
<p>相反，通过维护自己的对象池来避免创建对象不是一个好主意，除非池中的对象非常重量级。证明对象池是合理的对象的典型例子是数据库连接。建立连接的成本非常高，因此复用这些对象是有意义的。然而，一般来说，维护自己的对象池会使代码混乱，增加内存占用，并损害性能。现代 JVM 实现具有高度优化的垃圾收集器，在轻量级对象上很容易胜过这样的对象池。</p>
<h2 id="总结">总结</h2>
<ol>
<li>
<p>避免创建不必要的对象可以提高性能和减少内存占用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会创建不必要的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用基本类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>如果一个对象是不可变的，可以将其缓存起来并重复使用，而不是每次需要时都创建一个新对象。</p>
<p>以下是一些常见的不可变对象和它们的缓存实现：</p>
<ul>
<li><strong>字符串常量池</strong></li>
</ul>
<p>Java 语言中的字符串是不可变的，因此字符串常量可以被缓存起来并重复使用。Java 虚拟机维护了一个字符串常量池，它缓存了所有的字符串常量，并确保相同的字符串只被创建一次。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">&#34;Hello&#34;</span><span class="o">;</span> <span class="c1">// 从字符串常量池中获取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">&#34;Hello&#34;</span><span class="o">;</span> <span class="c1">// 从字符串常量池中获取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;Hello&#34;</span><span class="o">);</span> <span class="c1">// 创建新的字符串对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span> <span class="o">==</span> <span class="n">s2</span><span class="o">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span> <span class="o">==</span> <span class="n">s3</span><span class="o">);</span> <span class="c1">// false
</span></span></span></code></pre></div><ul>
<li><strong>数字常量池</strong></li>
</ul>
<p>Java 语言中的整数、浮点数和字符等基本数据类型的值也可以被缓存起来并重复使用。Java 虚拟机维护了一个数字常量池，它缓存了一定范围内的整数、浮点数和字符等基本数据类型的值，并确保相同的值只被创建一次。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Integer</span> <span class="n">i1</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="c1">// 从数字常量池中获取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Integer</span> <span class="n">i2</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span> <span class="c1">// 从数字常量池中获取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Integer</span> <span class="n">i3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span> <span class="c1">// 创建新的 Integer 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i1</span> <span class="o">==</span> <span class="n">i2</span><span class="o">);</span> <span class="c1">// true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i1</span> <span class="o">==</span> <span class="n">i3</span><span class="o">);</span> <span class="c1">// false
</span></span></span></code></pre></div><p>注意：数字常量池的范围可以通过 JVM 参数 <code>-XX:AutoBoxCacheMax=&lt;size&gt;</code> 来调整，其中 <code>&lt;size&gt;</code> 是常量池的大小。</p>
<ul>
<li><strong>枚举常量</strong></li>
</ul>
<p>Java 语言中的枚举常量是不可变的，它们在枚举类型被加载时就被创建并缓存起来，而不是每次需要时都创建一个新对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">enum</span> <span class="n">Color</span> <span class="o">{</span> <span class="n">RED</span><span class="o">,</span> <span class="n">GREEN</span><span class="o">,</span> <span class="n">BLUE</span> <span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="n">Color</span> <span class="n">c1</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">;</span> <span class="c1">// 获取枚举常量 RED
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Color</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">Color</span><span class="o">.</span><span class="na">GREEN</span><span class="o">;</span> <span class="c1">// 获取枚举常量 GREEN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Color</span> <span class="n">c3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Color</span><span class="o">(</span><span class="s">&#34;YELLOW&#34;</span><span class="o">);</span> <span class="c1">// 创建新的枚举常量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c1</span> <span class="o">==</span> <span class="n">c2</span><span class="o">);</span> <span class="c1">// false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c1</span> <span class="o">==</span> <span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span> <span class="c1">// true
</span></span></span></code></pre></div><ul>
<li><strong>LocalDate、LocalTime、LocalDateTime</strong></li>
</ul>
<p>Java 8 引入的日期时间 API 中的 LocalDate、LocalTime、LocalDateTime 类型都是不可变的。这些类型的对象可以被缓存起来并重复使用，以提高程序的性能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">LocalDate</span> <span class="n">today</span> <span class="o">=</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span> <span class="c1">// 获取当前日期
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LocalDate</span> <span class="n">tomorrow</span> <span class="o">=</span> <span class="n">today</span><span class="o">.</span><span class="na">plusDays</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 计算明天的日期
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">LocalDate</span> <span class="n">yesterday</span> <span class="o">=</span> <span class="n">today</span><span class="o">.</span><span class="na">minusDays</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 计算昨天的日期
</span></span></span></code></pre></div><p>可以使用线程安全的 ConcurrentHashMap 来实现 LocalDate 的缓存：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ConcurrentHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">LocalDate</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="n">LocalDate</span> <span class="n">date</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="s">&#34;2023-04-24&#34;</span><span class="o">,</span> <span class="n">LocalDate</span><span class="o">::</span><span class="n">parse</span><span class="o">);</span>
</span></span></code></pre></div><ul>
<li><strong>BigDecimal</strong></li>
</ul>
<p>Java 中的 BigDecimal 类型也是不可变的，它们的值在创建后不会改变。因此，可以将 BigDecimal 对象缓存起来并重复使用，以避免不必要的对象创建。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">BigDecimal</span> <span class="n">zero</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ZERO</span><span class="o">;</span> <span class="c1">// 缓存 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">BigDecimal</span> <span class="n">one</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span> <span class="c1">// 缓存 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">BigDecimal</span> <span class="n">ten</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">TEN</span><span class="o">;</span> <span class="c1">// 缓存 10
</span></span></span></code></pre></div><p>可以使用静态 final 常量来实现 BigDecimal 的缓存：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Constants</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BigDecimal</span> <span class="n">ZERO</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ZERO</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BigDecimal</span> <span class="n">ONE</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BigDecimal</span> <span class="n">TEN</span> <span class="o">=</span> <span class="n">BigDecimal</span><span class="o">.</span><span class="na">TEN</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><strong>Immutable Collections</strong></li>
</ul>
<p>Guava 和 Java 9+ 中都提供了不可变集合类，如 ImmutableList、ImmutableSet、ImmutableMap 等。这些不可变集合类的对象是不可变的，因此可以被缓存起来并重复使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span> <span class="c1">// 创建不可变列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span> <span class="c1">// 创建不可变集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span> <span class="c1">// 创建不可变映射
</span></span></span></code></pre></div><p>可以使用静态 final 常量来实现不可变集合的缓存：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Constants</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">LIST</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">SET</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">MAP</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>避免使用装箱类型，如 Integer、Boolean 等，因为它们在自动装箱和拆箱时会创建不必要的对象。可以使用基本类型和对象包装类型之间的相互转换方法来避免这种情况。</p>
</li>
<li>
<p>对于大量的短字符串，可以考虑使用字符串池或者使用 String.intern() 方法，以避免创建大量的 String 对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会创建大量的 String 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">str</span> <span class="o">+=</span> <span class="s">&#34;a&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用 StringBuilder 和字符串池
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">intern</span><span class="o">();</span>
</span></span></code></pre></div><blockquote>
<p><strong>String.intern() 方法</strong></p>
<p>String.intern() 方法是一个 native 方法，它的作用是返回字符串对象的规范化表示形式，即返回字符串常量池中与该字符串相等的对象的引用（如果常量池中已经存在该字符串，则直接返回常量池中的对象；否则，将该字符串添加到常量池中，并返回该字符串的引用）。</p>
<p>例如，假设我们有如下代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="n">s2</span><span class="o">.</span><span class="na">intern</span><span class="o">();</span>
</span></span></code></pre></div><p>在这个代码中，我们首先创建了一个字符串对象 s1，它是字符串常量池中的一个对象。然后，我们通过 new 关键字创建了一个新的字符串对象 s2，它与 s1 的内容相同，但是它在堆内存中创建。接下来，我们调用 s2 的 intern() 方法，将 s2 放入字符串常量池中，并返回常量池中的对象引用。因此，s3 指向的是字符串常量池中的对象。</p>
<p>需要注意的是，由于字符串常量池中的字符串对象是唯一的，因此使用 intern() 方法可以节省内存空间。但是，由于字符串常量池的空间是有限的，如果程序中大量使用 intern() 方法，可能会导致常量池溢出的问题。因此，如果不是必须使用 intern() 方法，最好不要使用它。</p>
<p>另外，<strong>由于 intern() 方法是一个 native 方法，它的性能可能会比较低。在实际开发中，应该根据具体情况进行选择，避免滥用 intern() 方法</strong>。</p>
</blockquote>
</li>
<li>
<p>尽量使用静态工厂方法而不是构造方法创建对象，因为静态工厂方法可以重复使用已经创建的对象，从而避免创建不必要的对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，每次都创建一个新的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Date</span> <span class="n">now</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用静态工厂方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Date</span> <span class="n">now</span> <span class="o">=</span> <span class="n">Date</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
</span></span></code></pre></div></li>
<li>
<p>避免创建不必要的数组，可以使用 List、Set、Map 等集合类型来代替数组。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会创建不必要的数组对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用 List
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>如果必须创建不可变的数组，可以使用静态工厂方法 Arrays.asList() 来创建 List，从而避免创建额外的数组对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会创建不必要的数组对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">arr</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用 Arrays.asList()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">,</span> <span class="s">&#34;b&#34;</span><span class="o">,</span> <span class="s">&#34;c&#34;</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p>避免创建过多的临时对象，如在循环中创建的对象。可以重复使用已经创建的对象，或者使用可重用的对象池来减少对象的创建和垃圾回收。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会创建不必要的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用可重用的对象池
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl"><span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sb</span><span class="o">.</span><span class="na">setLength</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>避免在类的构造方法中创建大量的对象。如果在构造方法中创建大量的对象，会导致内存占用过大，从而影响程序的性能。可以将对象的创建放在需要使用的方法中，或者使用懒加载的方式来延迟对象的创建。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会在构造方法中创建大量的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MyClass</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，将对象的创建放在需要使用的方法中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MyClass</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getList</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">list</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
<li>
<p>避免在递归方法中创建不必要的对象。如果在递归方法中创建不必要的对象，会导致内存占用过大，从而导致栈溢出等问题。可以使用可重用的对象池来减少对象的创建和垃圾回收。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 不推荐的写法，会在递归方法中创建不必要的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐的写法，使用可重用的对象池
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">cache</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">cache</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">,</span> <span class="n">cache</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="适配器模式">适配器模式</h2>
<p>适配器模式是一种常见的设计模式，它可以帮助我们将一个对象的接口适配成另一个对象的接口。适配器模式通常用于以下情况：</p>
<ol>
<li>当我们需要使用一个已有的类，但是它的接口与我们期望的不兼容时，我们可以使用适配器模式来将其接口适配成我们需要的接口。</li>
<li>当我们需要使用多个不兼容的类时，我们可以使用适配器模式来将它们的接口适配成一个统一的接口。</li>
</ol>
<p>在适配器模式中，适配器对象通常是不可变的，因为它们的状态不超过支持对象的状态。因此，可以安全地复用适配器对象。</p>
<p>例如，考虑一个支持英国插头的设备，但我们需要将其插入到一个美国插座上。我们可以使用一个适配器来适配英国插头到美国插座。适配器的状态不超过英国插头的状态，因此可以安全地复用适配器对象，而不必为每个设备创建一个新的适配器对象。</p>
<p>以下是一个简单的适配器示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 支持英国插头的设备
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BritishDevice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">plugIn</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Plugged in British device&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 美国插座接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">USPlug</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">plug</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 英国到美国的适配器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BritishToUSAdapter</span> <span class="kd">implements</span> <span class="n">USPlug</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BritishDevice</span> <span class="n">device</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">BritishToUSAdapter</span><span class="o">(</span><span class="n">BritishDevice</span> <span class="n">device</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">device</span> <span class="o">=</span> <span class="n">device</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">plug</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">device</span><span class="o">.</span><span class="na">plugIn</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 美国插座
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">USOutlet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">plugIn</span><span class="o">(</span><span class="n">USPlug</span> <span class="n">plug</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">plug</span><span class="o">.</span><span class="na">plug</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 测试适配器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">BritishDevice</span> <span class="n">device</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BritishDevice</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">BritishToUSAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BritishToUSAdapter</span><span class="o">(</span><span class="n">device</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">USOutlet</span> <span class="n">outlet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">USOutlet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">outlet</span><span class="o">.</span><span class="na">plugIn</span><span class="o">(</span><span class="n">adapter</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们定义了一个 BritishDevice 类来模拟一个支持英国插头的设备。我们还定义了一个 USPlug 接口来表示一个美国插头，以及一个 USOutlet 类来表示一个美国插座。</p>
<p>我们使用一个适配器类 BritishToUSAdapter 来适配 BritishDevice 到 USPlug 接口。适配器类的构造函数接收一个 BritishDevice 对象，并将其保存在一个成员变量中。适配器实现了 USPlug 接口，并将 plug 方法委托给 BritishDevice 对象的 plugIn 方法。</p>
<p>在测试适配器时，我们创建了一个 BritishDevice 对象和一个适配器对象，并将适配器对象传递给 USOutlet 的 plugIn 方法。USOutlet 对象使用适配器对象来将 BritishDevice 对象适配到 USPlug 接口，从而将其插入到美国插座中。</p>
<p>在这个示例中，<strong>适配器对象是不可变的，因为它的状态不超过支持对象的状态。因此，我们可以安全地复用适配器对象，而不必为每个设备创建一个新的适配器对象。</strong></p>
<h2 id="扩展">扩展</h2>
<h3 id="java-8-的-stream-api--避免创建不必要对象">Java 8 的 Stream API  避免创建不必要对象</h3>
<p>下面这段代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">categoryStatistics</span><span class="o">.</span><span class="na">getData</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToLong</span><span class="o">(</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">t</span><span class="o">.</span><span class="na">getValue</span><span class="o">()).</span><span class="na">sum</span><span class="o">();</span>
</span></span></code></pre></div><p>在使用 <code>list.stream().mapToLong(t -&gt; t.getValue()).sum()</code> 对集合中的元素进行求和时，确实可以通过这种方式来避免创建不必要的对象。</p>
<p>具体来说，<code>mapToLong()</code> 方法会将集合中的元素映射为一个 LongStream 对象，而 LongStream 对象是一个<code>原始类型流</code>，它在内存中的占用空间比较小。因此，使用 <code>mapToLong() </code>方法可以避免创建不必要的对象，从而提高程序的性能。</p>
<p>另外，sum() 方法是一个终端操作，它会对流中的所有元素进行求和，并返回最终的结果。由于 sum() 方法是一个终端操作，它会直接对流中的元素进行求和，而不会创建新的对象。因此，使用 sum() 方法可以进一步避免创建不必要的对象，从而提高程序的性能。</p>
<blockquote>
<p>在大多数情况下，<code>list.stream().mapToLong(t -&gt; t.getValue()).sum()</code> 的性能会比 <code>list.stream().mapToLong(t -&gt; t.getValue()).reduce(0L, (a, b) -&gt; a + b)</code> 更好。</p>
<p>原因是，<code>sum()</code> 方法是一个终端操作，它会对流中的所有元素进行求和，并返回最终的结果。<strong><code>sum()</code> 方法底层使用了一些优化技术，例如使用循环展开、使用 SIMD 指令等，从而充分利用 CPU 的性能优势，提高计算速度</strong>。</p>
<p>相比之下，<code>reduce()</code> 方法是一个归约操作，它将对流中的元素进行累计计算，并返回最终的结果。由于 <code>reduce() </code>方法需要对元素进行二元操作，因此它比 <code>sum()</code> 方法更加复杂，可能会带来一些额外的开销。此外，<code>reduce()</code> 方法还需要指定一个初始值，如果初始值不当，可能会导致结果错误或者性能下降。</p>
<p>不过，对于某些特殊情况，<code>reduce()</code> 方法可能会比 <code>sum()</code> 方法更加适用。例如，如果我们需要对流中的元素进行自定义的累计计算，就需要使用 <code>reduce() </code>方法。此外，<code>reduce()</code>方法还支持并行计算，可以充分利用多核处理器的性能优势，提高计算速度。</p>
<p>综上所述，我们应该根据具体情况选择使用 <code>sum()</code> 方法还是 <code>reduce()</code> 方法。<strong>对于大多数情况下的求和操作，<code>sum()</code> 方法是一个更好的选择，因为它比<code> reduce()</code> 方法更加高效。但是，在某些特殊情况下，<code>reduce()</code> 方法可能会更加适用</strong>。</p>
</blockquote>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-15｜Umami升级到2.0、汉街蜡像馆、使用Strava跑步</title>
      <link>https://blog.chensoul.com/posts/2023/04/18/weekly_review_15/</link>
      <pubDate>Tue, 18 Apr 2023 17:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/18/weekly_review_15/</guid>
      <description>前言 ​ 题图：楚河汉街蜡像馆 本篇是对 2023-04-10 到 2023-04-16 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这周的工作不算忙碌，继续学</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-01.png" alt="weekly-review-15-01"  />
</p>
<p>​														<em>题图：楚河汉街蜡像馆</em></p>
<p>本篇是对 <code>2023-04-10</code> 到 <code>2023-04-16</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周的工作不算忙碌，继续学习《Effective Java 3》这本书，并花了一些时间学习 Rust、Python 的基础语法。</p>
<p>这个月已经过了一半，减肥也进行了两周，体重从72公斤减到了现在的68.4公斤。在之前每天走路1万步的基础上，打算开始每天跑步，比记录跑步数据。</p>
<p>这周总计支出916元，明细如下：</p>
<ul>
<li>4月12日：329元，开通ETC预存300元</li>
<li>4月15日：116元，周末买菜做饭</li>
<li>4月16日：471元，老婆过生，吃饭和看电影</li>
</ul>
<p>四月累计支出共 2025 元，其中餐饮和购物占了一半。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-05.jpeg" alt="weekly-review-15-05" style="width:50%;" />
<h2 id="健身">健身</h2>
<p>这周每天走路步数如下，其中有一天因为加班而没有完成一万步的目标。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-06.png" alt="weekly-review-15-06" style="width:50%;" />
<p>受 <a href="https://conge.livingwithfcs.org/">@Conge</a> 博客影响，开始记录每天的跑步数据。首先是注册了 strava 账号，然后参考 <a href="https://github.com/yihong0618/running_page">running_page</a> 部署了一个我的跑步主页 <a href="https://run.chensoul.com/">run.chensoul.com</a>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-02.png" alt="weekly-review-15-02"  />
</p>
<p>因为我之前是使用悦跑圈 APP 记录跑步，所以又参考<a href="https://github.com/yihong0618/running_page/blob/master/README-CN.md#joyrun%E6%82%A6%E8%B7%91%E5%9C%88">这篇文章</a>导出 gpx 数据，然后<a href="https://github.com/yihong0618/running_page/blob/master/README-CN.md#gpx_to_strava">同步</a>到 Strava。最后，可以把悦跑圈 APP 卸载了。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-03.png" alt="weekly-review-15-03"  />
</p>
<p>上周跑步数据如下，总计28.64公里，比上周的19.05公里多了9.6公里。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-04.png" alt="weekly-review-15-04"  />
</p>
<p>上面搞定了之后，就可以使用 Strava 来跑步了。为了增加社交乐趣性，我在 n8n 里面创建了一个 workflow，将 Strava 活动发送到我的『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，效果如下。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-07.png" alt="weekly-review-15-07" style="width:50%;" />
<h2 id="umami升级到20">Umami升级到2.0</h2>
<p>1、首先备份数据库</p>
<p>2、升级数据库</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/umami-software/migrate-v1-v2.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> migrate-v1-v2
</span></span><span class="line"><span class="cl">yarn install
</span></span><span class="line"><span class="cl">yarn build
</span></span></code></pre></div><p>创建 .env 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1">#修改为你的数据库地址</span>
</span></span><span class="line"><span class="cl"><span class="na">DATABASE_URL</span><span class="o">=</span><span class="s">postgresql://umami:xxxxx@postgres.chensoul.com:5432/umami</span>
</span></span></code></pre></div><p>运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yarn start
</span></span></code></pre></div><p>3、重新部署静态页面</p>
<p>日志提示报错：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-16.png" alt="weekly-review-15-16"  />
</p>
<p>解决办法是修改 scripts/check-db.js：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-17.png" alt="weekly-review-15-17"  />
</p>
<p>4、修改跟踪脚本，把站点中所有追踪脚本名字<code>umami.js</code>改为<code>script.js</code>。</p>
<p>5、最后查看实时仪表盘。我的 umami 实时 <a href="https://umami.chensoul.com/realtime/f110cfa0-b737-4690-a032-2b9073a57fc3">访问地址</a></p>
<h2 id="工作">工作</h2>
<h3 id="effective-java-3-笔记">Effective Java 3 笔记</h3>
<p>请参考《<a href="/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources">Effective Java 3 笔记：依赖注入优于硬编码资源</a>》。</p>
<h2 id="汉街蜡像馆">汉街蜡像馆</h2>
<p>周末趁武汉旅游大年卡还没过期，跑到楚河汉街蜡像馆去溜达了一圈。因为有年卡，省去了150元的门票。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-08.png" alt="weekly-review-15-08" style="width:67%;" />
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-09.png" alt="weekly-review-15-09" style="width:67%;" />
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-10.png" alt="weekly-review-15-10" style="width:67%;" />
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-11.png" alt="weekly-review-15-11" style="width:67%;" />
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-12.png" alt="weekly-review-15-12" style="width:67%;" />
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-13.png" alt="weekly-review-15-13" style="width:67%;" />
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-14.png" alt="weekly-review-15-14" style="width:67%;" />
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-15-15.png" alt="weekly-review-15-15" style="width:67%;" />
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<p>1、<a href="https://www3.ntu.edu.sg/home/ehchua/programming/index.html">Java 编程教程</a></p>
<p><img loading="lazy" src="https://cdn.beekka.com/blogimg/asset/202301/bg2023011504.webp" alt="img"  />
</p>
<p>这个网站是新加坡南洋理工大学的一位老师的教案（英文），主要内容为新生的 Java 编程</p>
<p>2、<a href="https://offsec.tools/">offsec.tools</a></p>
<p><img loading="lazy" src="https://cdn.beekka.com/blogimg/asset/202301/bg2023012101.webp" alt="img"  />
</p>
<p>这个网站收集各种安全相关的软件工具，目前共有600多个。</p>
<p>3、<a href="https://juemuren4449.com/archives/habit-formation-plan">我的习惯养成计划：五分钟规则+打卡</a></p>
<p>4、<a href="https://www.jitao.tech/posts/my-guiding-principles-after-20-years-of-programming/">我编程 20 年的指导原则</a></p>
<p>5、<a href="https://lenciel.com/2022/10/renaming-with-zmv/">用 zmv 批量重命名文件</a></p>
<h3 id="一些工具">一些工具</h3>
<ul>
<li><a href="https://webperformancereport.com/">WebPerformance Report</a> 这个网站可以用邮箱订阅你的网站性能的个性化报告。它会监控指定网站的性能，每周会发送一封报告邮件给你。</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记5：依赖注入优于硬编码资源</title>
      <link>https://blog.chensoul.com/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/</link>
      <pubDate>Mon, 17 Apr 2023 17:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。 介绍 依赖注入是软件工程中使用的一种设计模式，用</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。</p>
<h2 id="介绍">介绍</h2>
<p>依赖注入是软件工程中使用的一种设计模式，用于将组件和依赖项相互解耦。而不是在组件内部创建和管理依赖项，我们从外部传递它们。这种方法可以帮助创建更模块化和灵活的代码。</p>
<p>相比之下，硬编码资源涉及在组件内部直接创建和管理依赖项。这种方法可能会使代码不太灵活，难以维护。</p>
<h2 id="举例">举例</h2>
<p>许多类依赖于一个或多个底层资源。例如，拼写检查程序依赖于字典。常见做法是，将这种类实现为静态实用工具类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Inappropriate use of static utility - inflexible &amp; untestable!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpellChecker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Lexicon</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="o">...;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SpellChecker</span><span class="o">()</span> <span class="o">{}</span> <span class="c1">// Noninstantiable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">suggestions</span><span class="o">(</span><span class="n">String</span> <span class="n">typo</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>类似地，我们也经常看到它们的单例实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Inappropriate use of singleton - inflexible &amp; untestable!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpellChecker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpellChecker</span><span class="o">(...);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Lexicon</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="o">...;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SpellChecker</span><span class="o">(...)</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">suggestions</span><span class="o">(</span><span class="n">String</span> <span class="n">typo</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这两种方法都不令人满意，因为它们假设只使用一个字典。在实际应用中，每种语言都有自己的字典，特殊的字典用于特殊的词汇表。另外，最好使用一个特殊的字典进行测试。</p>
<p>你可以尝试让 SpellChecker 支持多个字典：首先取消 dictionary 字段的 final 修饰，并在现有的拼写检查器中添加更改 dictionary 的方法。但是在并发环境中这种做法是笨拙的、容易出错的和不可行的。<strong>静态实用工具类和单例不适用于由底层资源参数化的类。</strong></p>
<p>所需要的是支持类的多个实例的能力（在我们的示例中是 SpellChecker），每个实例都使用客户端需要的资源（在我们的示例中是 dictionary）。满足此要求的一个简单模式是在<strong>创建新实例时将资源传递给构造函数。</strong> 这是依赖注入的一种形式：字典是拼写检查器的依赖项，在创建它时被注入到拼写检查器中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Dependency injection provides flexibility and testability
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpellChecker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Lexicon</span> <span class="n">dictionary</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SpellChecker</span><span class="o">(</span><span class="n">Lexicon</span> <span class="n">dictionary</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">dictionary</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">dictionary</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">suggestions</span><span class="o">(</span><span class="n">String</span> <span class="n">typo</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>依赖注入模式非常简单，许多程序员在不知道其名称的情况下使用了多年。虽然拼写检查器示例只有一个资源（字典），但是依赖注入可以处理任意数量的资源和任意依赖路径。它保持了不可变性，因此多个客户端可以共享依赖对象（假设客户端需要相同的底层资源）。<strong>依赖注入同样适用于构造函数、静态工厂和构建器</strong>。</p>
<p>以下是这些情况的示例：</p>
<h3 id="构造函数">构造函数</h3>
<p>在构造函数中使用依赖注入是最常见的方式。例如，假设我们有一个名为<code>UserService</code>的类，它需要一个能够验证用户的<code>UserValidator</code>接口作为依赖项。我们可以像这样在构造函数中注入<code>UserValidator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="静态工厂">静态工厂</h3>
<p>静态工厂是一种创建对象的方式，它将创建对象的逻辑封装在一个静态方法中。例如，假设我们有一个名为<code>UserServiceFactory</code>的类，它负责创建<code>UserService</code>实例。我们可以像这样在静态工厂方法中注入<code>UserValidator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="nf">createUserService</span><span class="o">(</span><span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">userValidator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="构建器">构建器</h3>
<p>构建器是一种创建对象的方式，它将创建对象的逻辑封装在一个构建器类中。例如，假设我们有一个名为<code>UserServiceBuilder</code>的类，它负责创建<code>UserService</code>实例。我们可以像这样在构建器类中注入<code>UserValidator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserServiceBuilder</span> <span class="nf">withUserValidator</span><span class="o">(</span><span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserService</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">userValidator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这样，我们可以使用构建器来创建<code>UserService</code>实例，并在构建器中注入<code>UserValidator</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">UserValidator</span> <span class="n">userValidator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomUserValidator</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceBuilder</span><span class="o">().</span><span class="na">withUserValidator</span><span class="o">(</span><span class="n">userValidator</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><p>这种模式的一个有用变体是将资源工厂传递给构造函数。资源工厂是一种创建和提供对象的方式，它可以在需要时动态地创建和返回资源。在将资源工厂传递给构造函数时，我们可以将对象的创建和配置逻辑从类中移除，从而实现更好的可测试性和可维护性。</p>
<p>以下是一个使用资源工厂传递给构造函数的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="n">ResourceFactory</span> <span class="n">resourceFactory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">resourceFactory</span><span class="o">.</span><span class="na">createUserValidator</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">resourceFactory</span><span class="o">.</span><span class="na">createDataSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">authenticate</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// perform authentication using userValidator and dataSource
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>UserService</code>类需要一个能够验证用户的<code>UserValidator</code>实例和一个<code>DataSource</code>实例。这两个依赖项都是通过资源工厂来创建的。通过将资源工厂传递给构造函数，我们可以将对象的创建和配置逻辑从类中移除，并使其更加灵活和可维护。</p>
<p>例如，假设我们有一个名为<code>MySqlResourceFactory</code>的类，它实现了<code>ResourceFactory</code>接口，并用于创建<code>UserValidator</code>和<code>DataSource</code>实例。我们可以像这样使用它来创建<code>UserService</code>实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResourceFactory</span> <span class="n">resourceFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySqlResourceFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">resourceFactory</span><span class="o">);</span>
</span></span></code></pre></div><p>使用这种方法，我们将<code>UserService</code>类与具体的资源实现解耦，并使其更加灵活和可维护。同时，我们可以轻松地模拟和测试<code>UserService</code>类，因为我们可以在测试中传递不同的资源工厂实现，而不需要依赖于外部资源。</p>
<h3 id="函数式接口">函数式接口</h3>
<p>在Java 8中，<code>Supplier&lt;T&gt;</code>是一个函数式接口，用于表示一个无参数函数，该函数返回类型为<code>T</code>。由于其函数式特性，<code>Supplier&lt;T&gt;</code>非常适合表示工厂，因为它可以提供一种通用的方式来创建对象。</p>
<p>以下是一个使用<code>Supplier&lt;T&gt;</code>表示工厂的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">UserValidator</span><span class="o">&gt;</span> <span class="n">userValidatorFactory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">userValidatorFactory</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">authenticate</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// perform authentication using userValidator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>UserService</code>类的构造函数接受一个<code>Supplier&lt;UserValidator&gt;</code>作为参数。这个<code>Supplier</code>可以在需要时动态地创建<code>UserValidator</code>实例。在<code>UserService</code>类中，我们可以通过调用<code>userValidatorFactory.get()</code>来获取<code>UserValidator</code>实例。</p>
<p>例如，假设我们有一个名为<code>CustomUserValidator</code>的类，它实现了<code>UserValidator</code>接口，并用于验证用户。我们可以像这样使用<code>UserService</code>类和<code>Supplier&lt;T&gt;</code>来创建<code>UserService</code>实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">UserValidator</span><span class="o">&gt;</span> <span class="n">userValidatorFactory</span> <span class="o">=</span> <span class="n">CustomUserValidator</span><span class="o">::</span><span class="k">new</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">userValidatorFactory</span><span class="o">);</span>
</span></span></code></pre></div><p>在上面的示例中，<code>userValidatorFactory</code>是一个<code>Supplier&lt;UserValidator&gt;</code>实例，它使用<code>CustomUserValidator::new</code>构造函数引用来创建<code>UserValidator</code>实例。通过将这个<code>Supplier</code>传递给<code>UserService</code>类的构造函数，我们可以创建<code>UserService</code>实例，而无需显式地创建<code>UserValidator</code>实例。</p>
<p>使用<code>Supplier&lt;T&gt;</code>表示工厂可以使我们的代码更加简洁和灵活。它可以使对象的创建更加通用，并允许我们在需要时动态地创建对象。同时，由于<code>Supplier&lt;T&gt;</code>是一个函数式接口，我们可以使用lambda表达式和方法引用来创建工厂，使代码更加简洁和易于理解。</p>
<h2 id="优点">优点</h2>
<p>以下是使用依赖注入比硬编码资源的优点：</p>
<ol>
<li>可测试性：使用依赖注入，很容易创建和注入模拟对象进行测试。这样，我们可以将正在测试的组件隔离开来，并专注于测试其行为，而不必担心其依赖项的行为。</li>
<li>灵活性：使用依赖注入，我们可以轻松地用不同实现替换依赖项。这在需要更改组件的行为而不更改其代码时非常有用。</li>
<li>解耦：依赖注入有助于将组件与其依赖项解耦，使代码更加模块化并易于维护。</li>
<li>关注点分离：依赖注入将依赖项的创建和管理与组件本身分离，允许更清晰地分离关注点。</li>
</ol>
<h2 id="运用">运用</h2>
<p>依赖注入是一种常见的设计模式，被广泛应用于许多开源框架中。以下是一些常见的开源框架和库，它们使用依赖注入来管理对象之间的依赖关系：</p>
<ol>
<li>Spring Framework：Spring是一个非常流行的Java框架，它使用依赖注入来管理应用程序中的对象之间的依赖关系。Spring通过<code>@Autowired</code>注解和XML配置文件来实现依赖注入。</li>
<li>Google Guice：Guice是一个轻量级的依赖注入框架，它使用Java注解来实现依赖注入。Guice提供了一个<code>Binder</code>接口，使用户可以配置注入规则。</li>
<li>Dagger：Dagger是一个基于Java和Android平台的依赖注入框架，它使用Java注解和代码生成技术来实现依赖注入。Dagger提供了一个<code>Component</code>接口，用于表示应用程序对象之间的依赖关系。</li>
<li>CDI：CDI是Java EE 6中引入的一种依赖注入框架，它使用Java注解和XML配置文件来实现依赖注入。CDI提供了一个<code>BeanManager</code>接口，使用户可以配置和管理应用程序对象之间的依赖关系。</li>
<li>Micronaut：Micronaut是一个轻量级的依赖注入框架，它使用Java注解和字节码生成技术来实现依赖注入。Micronaut提供了一个<code>@Inject</code>注解，用于标记需要注入的依赖项。</li>
<li>Weld：Weld是一个Java SE和Java EE的依赖注入框架，它使用Java注解和XML配置文件来实现依赖注入。Weld提供了一个<code>BeanManager</code>接口，用于配置和管理应用程序对象之间的依赖关系。</li>
<li>PicoContainer：PicoContainer是一个轻量级的依赖注入框架，它使用Java注解和代码生成技术来实现依赖注入。PicoContainer提供了一个<code>Container</code>接口，用于表示应用程序对象之间的依赖关系。</li>
<li>HK2：HK2是Java EE 8和Jakarta EE 9的依赖注入框架，它使用Java注解和XML配置文件来实现依赖注入。HK2提供了一个<code>ServiceLocator</code>接口，用于配置和管理应用程序对象之间的依赖关系。</li>
<li>Micrometer：Micrometer是一个用于度量应用程序性能的库，它使用依赖注入来管理度量记录器之间的依赖关系。Micrometer支持多种依赖注入框架，包括Spring和Guice。</li>
<li>Google Dagger Hilt：Dagger Hilt是一个基于Dagger 2的依赖注入库，它使用注解来管理对象之间的依赖关系。它提供了一些附加功能，例如使用<code>@ViewModelInject</code>注解来注入ViewModel依赖项。</li>
<li>Quarkus：Quarkus是一个用于构建可扩展的Java应用程序的框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括CDI、Spring和Guice。</li>
<li>Micronaut Data：Micronaut Data是一个用于管理数据库访问的库，它使用依赖注入来管理数据访问对象之间的依赖关系。它支持多种ORM框架，包括Hibernate和JDBC。</li>
<li>Akka：Akka是一个用于构建事件驱动应用程序的库，它使用依赖注入来管理Actor之间的依赖关系。它提供了一个<code>@Inject</code>注解，用于标记需要注入的依赖项。</li>
<li>JHipster：JHipster是一个用于生成现代Web应用程序的框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括Spring和Guice。</li>
<li>Vert.x：Vert.x是一个基于事件驱动的应用程序框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括CDI和Guice。</li>
<li>Quarkus Reactive：Quarkus Reactive是一个用于构建反应式应用程序的框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括CDI和Spring。</li>
<li>Micronaut Security：Micronaut Security是一个用于管理Web应用程序安全的库，它使用依赖注入来管理安全服务之间的依赖关系。它支持多种安全框架，包括Spring Security和Apache Shiro。</li>
<li>Eclipse MicroProfile：Eclipse MicroProfile是一个用于构建微服务的框架，它使用依赖注入来管理微服务之间的依赖关系。它支持多种依赖注入框架，包括CDI和Guice。</li>
<li>Kotlin Koin：Koin是一个用于Kotlin应用程序的依赖注入库，它使用DSL语法来管理应用程序对象之间的依赖关系。它支持单例、工厂和懒加载等不同的注入模式。</li>
<li>Spring Cloud：Spring Cloud是一个用于构建分布式系统的框架，它使用依赖注入来管理分布式系统之间的依赖关系。它支持多种依赖注入框架，包括Spring和Guice。</li>
<li>Micronaut HTTP Client：Micronaut HTTP Client是一个用于管理HTTP客户端的库，它使用依赖注入来管理HTTP客户端之间的依赖关系。它支持多种HTTP客户端实现，包括Apache HttpClient和Netty。</li>
<li>Quarkus Security：Quarkus Security是一个用于管理Web应用程序安全的库，它使用依赖注入来管理安全服务之间的依赖关系。它支持多种安全框架，包括Spring Security和Apache Shiro。</li>
</ol>
<p>这些框架和库都使用依赖注入来管理对象之间的依赖关系，使代码更加灵活、可维护和可测试。它们提供了一些不同的注入技术和API，以适应不同的应用场景和需求。</p>
<h3 id="spring依赖注入">Spring依赖注入</h3>
<p>在Spring框架中，依赖注入是核心特性之一。Spring使用依赖注入来管理应用程序对象之间的依赖关系，以实现松耦合、可测试和可扩展的代码。以下是Spring中使用依赖注入的方法：</p>
<ol>
<li>注解：Spring使用注解将依赖项注入到对象中。常用的注解包括<code>@Autowired</code>、<code>@Qualifier</code>和<code>@Value</code>。其中，<code>@Autowired</code>注解用于自动装配依赖项，<code>@Qualifier</code>注解用于指定依赖项的名称或限定符，<code>@Value</code>注解用于从属性文件或环境变量中注入值。</li>
<li>XML配置文件：Spring也支持使用XML配置文件来定义对象之间的依赖关系。在XML配置文件中，可以使用<code>&lt;bean&gt;</code>元素定义对象，并使用<code>&lt;property&gt;</code>元素设置对象的属性和依赖项。</li>
<li>Java配置类：Spring还支持使用Java配置类来定义对象之间的依赖关系。在Java配置类中，可以使用<code>@Configuration</code>注解定义配置类，并使用<code>@Bean</code>注解定义对象，并使用<code>@Autowired</code>注解注入依赖项。</li>
</ol>
<p>以下是一些在Spring中使用依赖注入的例子：</p>
<p><strong>1、自动装配示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kd">final</span> <span class="n">MyRepository</span> <span class="n">myRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="nf">MyService</span><span class="o">(</span><span class="n">MyRepository</span> <span class="n">myRepository</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">this</span><span class="o">.</span><span class="na">myRepository</span> <span class="o">=</span> <span class="n">myRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>MyService</code>类通过构造函数注入了<code>MyRepository</code>依赖。在<code>MyService</code>对象创建时，Spring框架自动装配并注入了<code>MyRepository</code>对象。</p>
<p><strong>2、XML配置示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.example.MyService&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&#34;myRepository&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myRepository&#34;</span> <span class="na">class=</span><span class="s">&#34;com.example.MyRepository&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>在这个例子中，<code>MyService</code>类和<code>MyRepository</code>类被定义为Spring的bean，并在XML配置文件中指定它们之间的依赖关系。在<code>MyService</code>对象创建时，Spring框架自动创建并注入了<code>MyRepository</code>对象。</p>
<p><strong>3、Java配置示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">MyService</span> <span class="nf">myService</span><span class="o">(</span><span class="n">MyRepository</span> <span class="n">myRepository</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="k">new</span> <span class="n">MyService</span><span class="o">(</span><span class="n">myRepository</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">MyRepository</span> <span class="nf">myRepository</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="k">new</span> <span class="n">MyRepository</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>AppConfig</code>类通过<code>@Bean</code>注解定义了<code>MyService</code>对象和<code>MyRepository</code>对象，并通过方法参数的方式注入了<code>MyRepository</code>依赖。在应用程序启动时，Spring框架会自动创建并注入这些对象。</p>
<h4 id="spring依赖注入意事项">Spring依赖注入意事项</h4>
<p>在使用Spring中的依赖注入时，有一些注意事项需要注意，以确保代码的正确性和可维护性。</p>
<ol>
<li>依赖项注入的顺序：如果一个类依赖于多个其他类，那么这些依赖项的注入顺序可能会影响到代码的正确性。为了避免这种情况，可以使用<code>@DependsOn</code>注解指定依赖项之间的顺序。</li>
<li>循环依赖：如果两个或多个类之间出现循环依赖，那么会导致对象无法正确创建。为了避免这种情况，可以使用构造函数注入或setter注入来解决循环依赖问题。</li>
<li>作用域：Spring提供了多种作用域，包括单例、原型和请求作用域等。在使用依赖注入时，需要了解每种作用域的区别和适用场景，并选择合适的作用域。</li>
<li>配置文件管理：在使用XML配置文件或Java配置类时，需要注意配置文件或类的管理和维护。可以使用Spring的Profile功能来管理不同的配置文件或类，并根据不同的环境或需求来选择合适的配置。</li>
<li>依赖注入类型选择：Spring支持多种依赖注入类型，包括构造函数注入、setter注入和字段注入等。需要根据情况选择合适的依赖注入类型，并考虑到代码的可测试性和可维护性。</li>
</ol>
<h4 id="如何避免循环依赖问题">如何避免循环依赖问题</h4>
<p>循环依赖是指两个或多个类之间相互依赖而导致无法正确创建对象的情况。在Spring中，可以通过以下几种方式来避免循环依赖问题：</p>
<ol>
<li>使用构造函数注入：构造函数注入是指依赖项通过构造函数的方式进行注入。这种方式可以避免循环依赖问题，因为对象的创建顺序是确定的，每个对象都必须先创建其依赖项，然后才能创建自身。</li>
<li>使用setter注入：setter注入是指依赖项通过setter方法进行注入。这种方式可以避免循环依赖问题，因为对象的创建顺序是不确定的，每个对象都可以先创建自身，然后再通过setter方法注入其依赖项。</li>
<li>使用<code>@Lazy</code>注解：<code>@Lazy</code>注解可以延迟依赖项的注入，直到对象第一次使用该依赖项时才进行注入。这种方式可以避免循环依赖问题，因为对象的创建顺序是不确定的，每个对象都可以先创建自身，然后再等待其依赖项被注入。</li>
<li>优化依赖关系：如果出现循环依赖问题，可以通过优化依赖关系来解决。例如，将依赖项抽象成接口或抽象类，然后通过不同的实现类来解决循环依赖问题。</li>
</ol>
<h4 id="spring多种依赖注入类的优缺点">Spring多种依赖注入类的优缺点</h4>
<p>Spring支持多种依赖注入类型，包括构造函数注入、setter注入和字段注入等。各种依赖注入类型的优缺点如下：</p>
<p><strong>1、构造函数注入</strong></p>
<p>优点：</p>
<ul>
<li>对象创建时依赖项已经确定，可以保证依赖项的完整性和正确性。</li>
<li>依赖项是只读的，可以保证对象的不变性。</li>
</ul>
<p>缺点：</p>
<ul>
<li>构造函数注入比较繁琐，需要在每个类中添加构造函数和依赖项参数。</li>
</ul>
<p><strong>2、setter注入</strong></p>
<p>优点：</p>
<ul>
<li>setter注入比较灵活，可以随时注入或更改依赖项。</li>
<li>可以使用默认构造函数创建对象，简化代码。</li>
</ul>
<p>缺点：</p>
<ul>
<li>对象创建时依赖项可能还未注入，需要进行null检查。</li>
<li>setter方法是公共的，可能会影响对象的不变性。</li>
</ul>
<p><strong>3、字段注入</strong></p>
<p>优点：</p>
<ul>
<li>简单方便，不需要手动编写构造函数或setter方法。</li>
<li>可以使用默认构造函数创建对象，简化代码。</li>
</ul>
<p>缺点：</p>
<ul>
<li>依赖项是公共的，可能会影响对象的不变性。</li>
<li>对象创建时依赖项可能还未注入，需要进行null检查。</li>
</ul>
<p>总的来说，**构造函数注入是最推荐的依赖注入方式，因为它可以保证对象的完整性和正确性。**setter注入和字段注入则比较灵活，但需要注意依赖项的注入时机和可能对对象不变性的影响。根据具体的情况和需求，可以选择合适的依赖注入方式。</p>
<h2 id="总结">总结</h2>
<p>总之，不要使用单例或静态实用工具类来实现依赖于一个或多个底层资源的类，这些资源的行为会影响类的行为，也不要让类直接创建这些资源。相反，将创建它们的资源或工厂传递给构造函数（或静态工厂或构建器）。这种操作称为依赖注入，它将大大增强类的灵活性、可复用性和可测试性。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-14｜如何学习一门编程语言</title>
      <link>https://blog.chensoul.com/posts/2023/04/13/weekly_review_14/</link>
      <pubDate>Thu, 13 Apr 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/13/weekly_review_14/</guid>
      <description>前言 本篇是对 2023-04-03 到 2023-04-09 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这周还是和以前一样每天运动，并开始施行断食。因为</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekl-review-14-01.jpg" alt="weekl-review-14-01"  />
</p>
<p>本篇是对 <code>2023-04-03</code> 到 <code>2023-04-09</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周还是和以前一样每天运动，并开始施行断食。因为是刚开始断食，有时候忍不住饥饿感而吃了一些东西。</p>
<p>本周工作主要是发布了一个版本，其余时间用来学习 Rust 和 Python，初学这两种语言，他们语法上有很多相似之处。如何学习一门编程语言？整理了一些步骤。尝试了一下用多种语言编写猜数游戏，这些语言包括 Rust、Ptyhon、Go、NodeJs、JavaScript、Kotlin、Bash，除了 Java。这是一个很有意思的事情，如果能够把这些语言都熟练掌握，那就更好了。</p>
<h2 id="关于健身">关于健身</h2>
<p>完成了每天一万步的计划，并且共跑步 5 次，一共 18.6 公里，平均配速 7 分钟4 9 秒，每天跳绳 500+。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekl-review-14-03.jpg" alt="weekl-review-14-03" style="width:67%;" />
<h2 id="关于记账">关于记账</h2>
<p>本周继续使用微信记账本记录每天支出。累计消费835元，明细如下：</p>
<ul>
<li>
<p>4月3日，周一：支出 59 元，餐饮</p>
</li>
<li>
<p>4月4日，周二：支出 0 元，</p>
</li>
<li>
<p>4月5日，周三：支出 228 元，超市购物</p>
</li>
<li>
<p>4月6日，周四：支出 15 元，停车费</p>
</li>
<li>
<p>4月7日，周五：支出 12 元</p>
</li>
<li>
<p>4月8日，周六：支出 415 元，加油+餐饮</p>
</li>
<li>
<p>4月8日，周日：支出 106 元，餐饮</p>
</li>
</ul>
<h2 id="如何学习一门编程语言">如何学习一门编程语言</h2>
<p>学习一门编程语言的基础语法对于初学者来说非常重要，以下是一些详细的步骤：</p>
<ol>
<li>了解编程语言的基础概念：在学习编程语言之前，了解编程的基础概念是非常重要的。例如，变量、数据类型、条件语句、循环、函数等等。</li>
<li>寻找学习资源：学习编程语言的基础语法可以通过各种学习资源来实现，如书籍、教程、在线视频和交互式学习平台等。选择适合自己的学习资源是非常重要的。</li>
<li>学习变量和数据类型：在学习编程语言之前，学习变量和数据类型是必须的。了解如何定义变量、赋值和使用不同的数据类型，例如字符串、整数、浮点数、布尔值等等。</li>
<li>学习条件语句：条件语句是编程语言中的重要概念之一。例如，学习如何使用if语句和else语句，使程序在特定条件下执行不同的代码块。</li>
<li>学习循环：循环是编程语言中的另一个重要概念。例如，学习如何使用while循环和for循环，使程序在特定条件下重复执行代码块。</li>
<li>学习函数：函数是编程语言中的重要概念之一。学习如何定义和使用函数，以将代码结构化并重用。</li>
<li>练习编写代码：练习编写代码是学习编程语言基础语法的重要方式。编写小程序或项目，例如打印&quot;Hello World&quot;、计算器或猜数字游戏等。</li>
<li>学习调试和错误处理：学习如何调试代码和处理常见错误，例如语法错误、逻辑错误和运行时错误等。</li>
</ol>
<p>总结一下，学习一门编程语言的步骤：</p>
<ul>
<li>
<p>安装</p>
</li>
<li>
<p>Hello World</p>
<ul>
<li>注释</li>
<li>格式化输出</li>
</ul>
</li>
<li>
<p>变量和常量</p>
</li>
<li>
<p>数据类型</p>
<ul>
<li>基本类型
<ul>
<li>运算</li>
<li>类型转换</li>
</ul>
</li>
<li>复杂类型</li>
</ul>
</li>
<li>
<p>表达式和语句</p>
<ul>
<li>条件</li>
<li>循环</li>
<li>断言</li>
</ul>
</li>
<li>
<p>函数</p>
</li>
<li>
<p>类和对象</p>
</li>
<li>
<p>包和模块</p>
</li>
<li>
<p>异常处理</p>
</li>
<li>
<p>标准库</p>
<ul>
<li>IO</li>
<li>网络</li>
<li>多线程</li>
</ul>
</li>
<li>
<p>单元测试</p>
</li>
</ul>
<p>接下来，打算按照上面的步骤来学习 Rust、Python、Go，也许还会有 NodeJs 和 Kotlin，并整理相关笔记。</p>
<h2 id="工作">工作</h2>
<h3 id="effective-java-3-笔记">Effective Java 3 笔记</h3>
<p>请参考 <a href="/posts/2023/04/11/enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type/">《Effective Java 3》笔记：使用私有构造函数或枚举类型创建单例</a></p>
<h3 id="rust">Rust</h3>
<p>因为对 <a href="https://tauri.app/">Tauri</a> 这个 GUI 框架挺感兴趣，所以我开始学习 Rust 了，目前在参考 <a href="https://rustwiki.org/">https://rustwiki.org/</a> 上的 <a href="https://rustwiki.org/zh-CN/rust-by-example/">通过例子学 Rust</a> 和 《Rust权威指南》 学习 Rust。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekl-review-14-02.jpg" alt="weekl-review-14-02" style="width:50%;" />
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li><a href="http://ebookconverter.blogspot.com/2013/11/where-to-find-epub-file-in-ibooks-for.html">Where to find the EPUB file in iBooks for Mac under OS X 10.9 Mavericks</a></li>
<li><a href="https://roy.wang/umami-js-quicken/">使用 CDN 加速 Umami 静态资源</a></li>
<li><a href="https://blog.alswl.com/2023/04/web-api-guidelines/">实用 Web API 规范</a></li>
<li><a href="https://utgd.net/article/9367">一次本地免费过滤 RSS 的尝试：NetNewsWire</a></li>
<li><a href="https://catcoding.me/p/redis-antriez/">不想当作家的程序员写不出 Redis</a></li>
<li><a href="https://www.lijiaocn.com/%E7%BC%96%E7%A8%8B/2023/03/30/kotlin-syntax.html">Kotlin 语法一站式手册</a></li>
</ul>
<h3 id="一些工具">一些工具</h3>
<ul>
<li><a href="https://listmonk.app/">Listmonk</a> 一款自主托管的电子邮件列表管理工具。它允许您将邮件列表导入到自己的服务器中，并使用它来管理您的邮件列表和发送电子邮件。Listmonk具有良好的可扩展性和自定义性，可通过REST API进行操作，并支持高级功能，例如自定义字段、模板和自动化工作流程，从而使其成为一个非常有用和灵活的电子邮件列表管理工具。与其他在线邮件列表服务相比，Listmonk的优势之一是您完全掌控自己的数据和服务器，因此您不必担心第三方公司的数据隐私问题。</li>
<li><a href="https://ricks-apps.com/osx/sitesucker/index.html">SiteSucker</a> SiteSucker是一款MacOS平台上的免费工具，它可以帮助用户将整个网站下载到本地电脑中。使用SiteSucker，用户只需要输入目标网站的URL，它就会自动下载该网站的所有页面、图像、视频和其他资源，并将它们保存在本地硬盘上，以便用户离线浏览或备份。SiteSucker支持多线程下载和断点续传，可以在不中断下载的情况下暂停和恢复下载任务。此外，它还可以过滤URL，以便用户只下载特定类型的文件，例如HTML、图像或视频文件。总之，SiteSucker是一款非常实用的工具，适用于需要离线浏览网站、备份网站或进行网站抓取的用户。</li>
<li><a href="https://montaigne.io/">Montaigne</a> 用苹果笔记来创建网站、博客或作品集</li>
<li><a href="https://github.com/BlueMatthew/WechatExporter">WechatExporter</a> 聊天记录导出</li>
<li><a href="https://paw.cloud/">RapidAPI</a> 一款MacOS平台上的API开发工具，它旨在帮助开发人员更轻松地设计、测试和调试API。Paw提供了一个直观的用户界面，可以让用户轻松地构建和调试API请求，并查看服务器响应。Paw支持多种API协议和格式，例如REST、SOAP、GraphQL、JSON和XML等，可以与多种服务器端点和身份验证方式进行集成。此外，Paw还具有强大的自动化和脚本化功能，允许用户使用JavaScript或Python编写自定义脚本，以自动化API测试和集成工作流程。</li>
<li><a href="https://gist.github.com/VincentSit/a682f4162b998c7f24d08ab34bf233da">卸载MacOS微信键盘</a></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记3：使用私有构造函数或枚举类型创建单例</title>
      <link>https://blog.chensoul.com/posts/2023/04/11/enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type/</link>
      <pubDate>Tue, 11 Apr 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/11/enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。 介绍 单例是一个只实例化一次的类。单例通常表示无</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。</p>
<h2 id="介绍">介绍</h2>
<p>单例是一个只实例化一次的类。单例通常表示无状态对象，比如函数或系统组件，它们在本质上是唯一的。<strong>将一个类设计为单例会使它的客户端测试时变得困难，</strong> 除非它实现了作为其类型的接口，否则无法用模拟实现来代替单例。</p>
<h2 id="实现">实现</h2>
<p>实现单例有两种常见的方法。两者都基于保持构造函数私有和导出公共静态成员以提供对唯一实例的访问。</p>
<p>在第一种方法中，成员是一个 final 字段：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Singleton with public final field
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Elvis</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Elvis</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Elvis</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Elvis</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leaveTheBuilding</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>私有构造函数只调用一次，用于初始化 <code>public static final </code>修饰的 Elvis 类型字段 <code>INSTANCE</code>。不使用 <code>public</code> 或 <code>protected</code> 的构造函数保证了「独一无二」的空间：一旦初始化了 Elvis 类，就只会存在一个 Elvis 实例，不多也不少。客户端所做的任何事情都不能改变这一点，但有一点需要注意：拥有特殊权限的客户端可以借助 <code>AccessibleObject.setAccessible</code> 方法利用反射调用私有构造函数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Constructor</span><span class="o">&lt;?&gt;[]</span> <span class="n">constructors</span> <span class="o">=</span> <span class="n">Elvis</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredConstructors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">AccessibleObject</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="n">constructors</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">constructors</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">name</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;Elvis&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Elvis</span> <span class="n">instance</span> <span class="o">=</span> <span class="o">(</span><span class="n">Elvis</span><span class="o">)</span> <span class="n">name</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">instance</span><span class="o">.</span><span class="na">leaveTheBuilding</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">});</span>
</span></span></code></pre></div><p>如果需要防范这种攻击，请修改构造函数，使其在请求创建第二个实例时抛出异常。</p>
<p>在实现单例的第二种方法中，公共成员是一种静态工厂方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Singleton with static factory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Elvis</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Elvis</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Elvis</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Elvis</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Elvis</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leaveTheBuilding</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>所有对 <code>getInstance()</code> 方法的调用都返回相同的对象引用，并且不会创建其他 Elvis 实例。</p>
<p>公共字段方法的主要优点是 API 明确了类是单例的：public static 修饰的字段是 final 的，因此它总是包含相同的对象引用。第二个优点是更简单。</p>
<p>静态工厂方法的一个优点是，它可以在不更改 API 的情况下决定类是否是单例。工厂方法返回唯一的实例，但是可以对其进行修改，为调用它的每个线程返回一个单独的实例。第二个优点是，如果应用程序需要的话，可以编写泛型的单例工厂。使用静态工厂的最后一个优点是方法引用能够作为一个提供者，例如 <code>Elvis::getInstance</code> 是 <code>Supplier&lt;Elvis&gt;</code> 的提供者。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Elvis</span><span class="o">&gt;</span> <span class="n">sup</span> <span class="o">=</span> <span class="n">Elvis</span><span class="o">::</span><span class="n">getInstance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Elvis</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">sup</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span><span class="o">.</span><span class="na">leaveTheBuilding</span><span class="o">();</span>
</span></span></code></pre></div><p>除非能够与这些优点沾边，否则使用 public 字段的方式更可取。</p>
<p>要使单例类使用这两种方法中的任何一种实现可序列化，仅仅在其声明中添加实现 <code>serializable</code> 是不够的。要维护单例保证，应声明所有实例字段为 <code>transient</code>，并提供 <code>readResolve</code> 方法。否则，每次反序列化实例时，都会创建一个新实例，在我们的示例中，这会导致出现虚假的 Elvis。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// readResolve method to preserve singleton property
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">private</span> <span class="n">Object</span> <span class="nf">readResolve</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Return the one true Elvis and let the garbage collector
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// take care of the Elvis impersonator.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>实现单例的第三种方法是声明一个单元素枚举：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Enum singleton - the preferred approach
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Elvis</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">leaveTheBuilding</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这种方法类似于 <code>public</code> 字段方法，但是它更简洁，默认提供了序列化机制，提供了对多个实例化的严格保证，即使面对复杂的序列化或反射攻击也是如此。这种方法可能有点不自然，但是<strong>单元素枚举类型通常是实现单例的最佳方法。</strong> 注意，如果你的单例必须扩展一个超类而不是 <code>Enum</code>（尽管你可以声明一个 Enum 来实现接口），你就不能使用这种方法。</p>
<h2 id="扩展">扩展</h2>
<p>单例模式是一种创建型设计模式，它确保一个类只有一个实例，并提供一个全局访问点来访问该实例。在Java语言中，单例模式一般有以下几种实现方式：</p>
<h3 id="饿汉式单例模式">饿汉式单例模式</h3>
<p>在类加载时就创建单例实例，因此也称为静态初始化单例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EagerSingleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">EagerSingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EagerSingleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">EagerSingleton</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">EagerSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="懒汉式单例模式">懒汉式单例模式</h3>
<p>在第一次调用<code>getInstance()</code>方法时才创建单例实例，也称为延迟初始化单例。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例代码中，我们使用了<code>synchronized</code>关键字来保证线程安全。但是这种方式会影响性能，因为每次调用<code>getInstance()</code>方法都会进行同步。因此，我们可以使用双重检查锁定来提高性能。</p>
<h3 id="双重检查锁定单例模式">双重检查锁定单例模式</h3>
<p>在懒汉式单例模式的基础上，使用双重检查锁定来保证线程安全和性能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LazySingleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">LazySingleton</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">LazySingleton</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">LazySingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">LazySingleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LazySingleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述实现中，<code>instance</code> 字段使用 <code>volatile</code> 关键字修饰，可以确保多个线程都能够正确地处理该变量。</p>
<p>在 <code>getInstance()</code> 方法中，首先检查实例是否已经存在，如果存在则直接返回实例引用。否则，获取类对象的锁，再次检查实例是否存在。如果实例仍然不存在，则创建实例。由于 <code>synchronized</code> 关键字可以确保同一时刻只有一个线程可以进入临界区，因此可以避免多个线程同时创建实例的情况。</p>
<p>需要注意的是，在使用双重锁检测时，需要使用 <code>volatile</code> 关键字来保证多个线程都能够正确地处理共享变量。同时，为了保证所有线程都看到同一个实例，需要使用静态字段来存储单例实例。</p>
<blockquote>
<p><strong>关于  <code>volatile</code> 关键字修饰</strong></p>
<p>在 Java 中，当一个变量被多个线程共享时，如果没有采取特殊的措施，可能会出现一个线程修改了变量值，但其他线程并没有看到该变量的变化的情况。这是因为每个线程都有自己的 CPU 缓存，该变量的值可能存在于某个线程的 CPU 缓存中，但其他线程并没有及时更新缓存中的值。</p>
<p><code>volatile</code> 是一种 Java 关键字，它可以确保多个线程都能够正确地处理该变量。当一个变量被声明为 <code>volatile</code> 时，它会具有以下特性：</p>
<ol>
<li>可见性：当一个线程修改了 <code>volatile</code> 变量的值时，其他线程可以立即看到该变化。</li>
<li>禁止指令重排：编译器和 CPU 会对指令进行重排以提高执行效率，但有时这种重排可能会导致多线程程序出现问题。<code>volatile</code> 变量的写操作会在读操作之前，确保变量的修改对其他线程立即可见，从而禁止指令重排。</li>
</ol>
<p>在上述单例模式实现中，<code>instance</code> 字段被声明为 <code>volatile</code>，这是为了确保多个线程都能够正确地处理该变量。如果没有使用 <code>volatile</code>，可能会出现某个线程创建了实例，但其他线程并没有看到该变化的情况。使用 <code>volatile</code> 可以确保多个线程都能够正确地处理 <code>instance</code> 变量，从而避免出现多个实例的情况。</p>
</blockquote>
<h3 id="枚举单例模式">枚举单例模式</h3>
<p>使用枚举类型来定义单例，它保证了线程安全和序列化安全。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">EnumSingleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p><strong>关于枚举</strong></p>
<p>在 Java 中，枚举是一种特殊的类，它可以用于定义一组常量。枚举常量是在枚举类被加载时创建的，且只会被创建一次。因此，枚举天然具有单例模式的特性。</p>
<p>在 Java 中，单例模式是一种常用的设计模式，它可以确保某个类只有一个实例，并提供全局访问点。单例模式的实现方式有多种，包括懒汉式、饿汉式、双重检查锁等。但是，这些实现方式都需要考虑线程安全和序列化等问题，而枚举天然具有线程安全和序列化的特性。</p>
<p>枚举类是在 Java 1.5 版本中引入的，它是一个特殊的类，可以用于定义一组常量。枚举常量是在枚举类被加载时创建的，且只会被创建一次。因此，枚举天然具有单例模式的特性，而且枚举类的实现方式非常简单，无需考虑线程安全和序列化等问题。因此，使用枚举实现单例模式是一种简单、安全、高效的方式。</p>
</blockquote>
<p>一个实际中使用的例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@AllArgsConstructor</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Getter</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">ChannelType</span> <span class="kd">implements</span> <span class="n">CodeAware</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">VMS</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">&#34;语音电话&#34;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">AbstractNotificationStrategy</span> <span class="nf">strategy</span><span class="o">(</span><span class="n">Properties</span> <span class="n">properties</span><span class="o">,</span> <span class="n">NotificationTemplate</span> <span class="n">notificationTemplate</span><span class="o">,</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">NotificationUser</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">VmsNotificationStrategy</span><span class="o">(</span><span class="k">new</span> <span class="n">VmsNotificationChannel</span><span class="o">(</span><span class="n">properties</span><span class="o">),</span> <span class="n">notificationTemplate</span><span class="o">,</span> <span class="n">users</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">NotificationTemplate</span> <span class="nf">template</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">template</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">imageUrls</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">VmsNotificationTemplate</span><span class="o">(</span><span class="n">title</span><span class="o">,</span> <span class="n">template</span><span class="o">,</span> <span class="n">imageUrls</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">},</span>
</span></span><span class="line"><span class="cl">    <span class="n">FEISHU</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="s">&#34;飞书&#34;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">AbstractNotificationStrategy</span> <span class="nf">strategy</span><span class="o">(</span><span class="n">Properties</span> <span class="n">properties</span><span class="o">,</span> <span class="n">NotificationTemplate</span> <span class="n">notificationTemplate</span><span class="o">,</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">NotificationUser</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">FeishuNotificationStrategy</span><span class="o">(</span><span class="k">new</span> <span class="n">FeishuNotificationChannel</span><span class="o">(</span><span class="n">properties</span><span class="o">),</span> <span class="n">notificationTemplate</span><span class="o">,</span> <span class="n">users</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">NotificationTemplate</span> <span class="nf">template</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">template</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">imageUrls</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">FeishuNotificationTemplate</span><span class="o">(</span><span class="n">title</span><span class="o">,</span> <span class="n">template</span><span class="o">,</span> <span class="n">imageUrls</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">code</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">AbstractNotificationStrategy</span> <span class="nf">strategy</span><span class="o">(</span><span class="n">Properties</span> <span class="n">properties</span><span class="o">,</span> <span class="n">NotificationTemplate</span> <span class="n">notificationTemplate</span><span class="o">,</span> <span class="n">Collection</span><span class="o">&lt;</span><span class="n">NotificationUser</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">NotificationTemplate</span> <span class="nf">template</span><span class="o">(</span><span class="n">String</span> <span class="n">title</span><span class="o">,</span> <span class="n">String</span> <span class="n">template</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">imageUrls</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="静态内部类单例模式">静态内部类单例模式</h3>
<p>静态内部类单例模式是一种常用的实现单例模式的方式，它可以保证线程安全且实现简单。在该模式中，单例实例是通过静态内部类来实现的。</p>
<blockquote>
<p>在 Java 中，静态内部类是一种特殊的类，它是在另一个类内部定义的静态类。静态内部类可以访问外部类的静态字段和方法，但不能访问外部类的非静态字段和方法。</p>
</blockquote>
<p>使用静态内部类实现单例模式的方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StaticInnerClassSingleton</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">StaticInnerClassSingleton</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SingletonHolder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">StaticInnerClassSingleton</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StaticInnerClassSingleton</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">StaticInnerClassSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">SingletonHolder</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述代码中，<code>SingletonHolder</code> 是静态内部类，它包含一个静态常量 <code>INSTANCE</code>，该常量是在静态内部类被加载时创建的，且只会被创建一次。由于静态内部类的加载是在需要时才进行的，因此可以实现懒加载的效果。在 <code>getInstance</code> 方法中，直接返回 <code>SingletonHolder.INSTANCE</code> 即可获取单例实例。</p>
<p>在静态内部类单例模式中，由于静态内部类的加载是在需要时才进行的，且只会被加载一次，因此可以保证单例实例的线程安全。在多线程环境下，多个线程同时调用 <code>getInstance</code> 方法时，由于静态内部类的加载是线程安全的，因此可以保证只有一个单例实例被创建。</p>
<p>此外，静态内部类单例模式的实现方式简单且易于理解，而且不需要考虑线程安全和序列化等问题，因此是一种常用的实现单例模式的方式。</p>
<h3 id="注册式单例模式">注册式单例模式</h3>
<p>使用容器来存储单例实例，通过唯一的标识符来访问单例实例。</p>
<p>总的来说，每种实现方式都有其适用的场景和优缺点，开发者需要根据具体的需求来选择合适的实现方式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingletonRegistry</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">registry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SingletonRegistry</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">Object</span> <span class="nf">getSingleton</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">registry</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例代码中，我们在<code>register()</code>方法和<code>getSingleton()</code>方法上都加了<code>synchronized</code>关键字，确保了多线程情况下的线程安全。但是这种方式会影响性能，因为每次调用<code>getSingleton()</code>方法都会进行同步。</p>
<p>以下是使用并发容器实现线程安全的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingletonRegistry</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">registry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SingletonRegistry</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">getSingleton</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">registry</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用<code>ConcurrentMap</code>的<code>computeIfAbsent</code>方法可以更加简洁地实现线程安全的注册式单例模式，它可以确保多线程情况下的线程安全，并且避免了使用<code>synchronized</code>关键字带来的性能问题。</p>
<p>以下是使用<code>ConcurrentMap</code>的<code>computeIfAbsent</code>方法实现线程安全的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SingletonRegistry</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">registry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SingletonRegistry</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">registry</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">obj</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">getSingleton</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">registry</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">key</span> <span class="o">-&gt;</span> <span class="n">createSingleton</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">createSingleton</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// create singleton object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例代码中，我们使用<code>ConcurrentHashMap</code>来存储注册信息，并且使用了<code>putIfAbsent</code>方法来避免重复添加元素。在<code>getSingleton</code>方法中，我们使用了<code>computeIfAbsent</code>方法来获取单例实例，如果实例不存在，则调用<code>createSingleton</code>方法创建实例。由于<code>ConcurrentHashMap</code>的并发操作是线程安全的，因此使用<code>computeIfAbsent</code>方法可以确保多线程情况下的线程安全。</p>
<h2 id="运用">运用</h2>
<p>以下，整理了常见的开源框架中单例模式运用。</p>
<h3 id="log4j">Log4j</h3>
<p>Log4j 是一个用于记录日志的开源框架，它使用单例模式来管理 Logger 的实例。Logger 是一个线程安全的类，用于记录应用程序的日志信息。</p>
<p>以下是 Log4j 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Logger</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Logger</span><span class="o">&gt;</span> <span class="n">instances</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Logger</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="nf">getLogger</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Logger</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">instances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">instances</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">instance</span> <span class="o">=</span> <span class="n">instances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Logger</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instances</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Logger 使用一个 Map 来缓存所有的 Logger 实例，并在需要获取 Logger 实例时使用双重检查锁定机制来确保只有一个线程可以创建实例。</p>
<h3 id="jedis">Jedis</h3>
<p>Jedis 是一个用于连接 Redis 数据库的开源框架，它使用单例模式来管理 JedisPool 的实例。JedisPool 是一个线程安全的类，用于管理可重用的 Jedis 实例。</p>
<p>以下是 Jedis 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JedisPool</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">JedisPool</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">JedisPool</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">JedisPool</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">host</span><span class="o">,</span> <span class="kt">int</span> <span class="n">port</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">host</span> <span class="o">+</span> <span class="s">&#34;:&#34;</span> <span class="o">+</span> <span class="n">port</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">JedisPool</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JedisPool</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Jedis 使用一个 ConcurrentHashMap 来缓存所有的 JedisPool 实例，并在需要获取 JedisPool 实例时使用 synchronized 方法来确保只有一个线程可以创建实例。</p>
<h3 id="retrofit">Retrofit</h3>
<p>Retrofit 是一个用于简化 HTTP 请求的开源框架，它使用单例模式来管理 Retrofit 的实例。Retrofit 是一个线程安全的类，用于创建 HTTP 请求。</p>
<p>以下是 Retrofit 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Retrofit</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Retrofit</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Retrofit</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Retrofit</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Retrofit</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">create</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// create HTTP request using service interface
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Retrofit 使用静态变量和静态方法来获取单例实例，并在整个应用程序中共享使用。</p>
<h3 id="gson">Gson</h3>
<p>Gson 是一个用于将 JSON 字符串转换为 Java 对象的开源框架，它使用单例模式来管理 Gson 的实例。Gson 是一个线程安全的类，用于处理 JSON 数据。</p>
<p>以下是 Gson 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Gson</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Gson</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Gson</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Gson</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="nf">fromJson</span><span class="o">(</span><span class="n">String</span> <span class="n">json</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">classOfT</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// convert JSON string to Java object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Gson 使用静态变量和静态方法来获取单例实例，并在整个应用程序中共享使用。</p>
<h3 id="spring-framework">Spring Framework</h3>
<p>Spring Framework 是一个用于构建企业级 Java 应用程序的开源框架，它使用单例模式来管理 Bean 的实例。Bean 是一个线程安全的类，用于实现应用程序的业务逻辑。</p>
<p>以下是 Spring Framework 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultListableBeanFactory</span> <span class="kd">implements</span> <span class="n">BeanFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">singletonObjects</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;(</span><span class="mi">256</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getBean</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">BeansException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">bean</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">singletonObjects</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">bean</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">singletonObjects</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">bean</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">singletonObjects</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">bean</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">bean</span> <span class="o">=</span> <span class="n">createBean</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                    <span class="k">this</span><span class="o">.</span><span class="na">singletonObjects</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">bean</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Object</span> <span class="nf">createBean</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// create Bean instance
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Spring Framework 使用一个 ConcurrentHashMap 来缓存所有的 Bean 实例，并在需要获取 Bean 实例时使用双重检查锁定机制来确保只有一个线程可以创建实例。</p>
<h3 id="hibernate">Hibernate</h3>
<p>Hibernate 是一个用于处理关系数据库的开源框架，它使用单例模式来管理 SessionFactory 的实例。SessionFactory 是一个线程安全的类，用于创建和管理 Session 对象。</p>
<p>以下是 Hibernate 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">SessionFactory</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SessionFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SessionFactory</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">SessionFactory</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Session</span> <span class="nf">openSession</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// create and return new Session object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Hibernate 使用静态变量和静态方法来获取单例实例，并在整个应用程序中共享使用。</p>
<h3 id="junit">JUnit</h3>
<p>JUnit 是一个用于编写单元测试的开源框架，它使用单例模式来管理 TestSuite 的实例。TestSuite 是一个线程安全的类，用于管理测试用例的集合。</p>
<p>以下是 JUnit 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestSuite</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">TestSuite</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TestSuite</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">TestCase</span><span class="o">&gt;</span> <span class="n">testCases</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">TestSuite</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">TestSuite</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">INSTANCE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addTestCase</span><span class="o">(</span><span class="n">TestCase</span> <span class="n">testCase</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">testCases</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">testCase</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">TestResult</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">TestCase</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">testCases</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">testCase</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，JUnit 使用静态变量和静态方法来获取 TestSuite 的单例实例，并在整个测试应用程序中共享使用。</p>
<h3 id="apache-commons-lang">Apache Commons Lang</h3>
<p>Apache Commons Lang 是一个用于提供常用 Java 工具类的开源库，它使用单例模式来管理 CharSet 的实例。CharSet 是一个线程安全的类，用于管理字符集编码。</p>
<p>以下是 Apache Commons Lang 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CharSet</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">CharSet</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">CharSet</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">CharSet</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CharSet</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">CharSet</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CharSet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                    <span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Apache Commons Lang 使用一个 ConcurrentHashMap 来缓存所有的 CharSet 实例，并在需要获取 CharSet 实例时使用双重检查锁定机制来确保只有一个线程可以创建实例。</p>
<h3 id="apache-commons-pool">Apache Commons Pool</h3>
<p>Apache Commons Pool 是一个用于管理对象池的开源库，它使用单例模式来管理 ObjectPool 的实例。ObjectPool 是一个线程安全的类，用于管理可重用对象的池。</p>
<p>以下是 Apache Commons Pool 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GenericObjectPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">ObjectPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ObjectPool</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">GenericObjectPool</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ObjectPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">PooledObjectFactory</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">factory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ObjectPool</span><span class="o">&lt;?&gt;</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericObjectPool</span><span class="o">&lt;&gt;(</span><span class="n">factory</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">ObjectPool</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;)</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Apache Commons Pool 使用一个 ConcurrentHashMap 来缓存所有的 ObjectPool 实例，并在需要获取 ObjectPool 实例时使用 synchronized 方法来确保只有一个线程可以创建实例。</p>
<h3 id="tomcat">Tomcat</h3>
<p>Tomcat 是一个用于运行 Java Web 应用程序的开源服务器，它使用单例模式来管理 ServletContext 的实例。ServletContext 是一个线程安全的类，用于管理 Web 应用程序的上下文信息。</p>
<p>以下是 Tomcat 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationContext</span> <span class="kd">extends</span> <span class="n">StandardContext</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ApplicationContext</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">ApplicationContext</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ApplicationContext</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">contextPath</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ApplicationContext</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">contextPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">ApplicationContext</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">contextPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ApplicationContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                    <span class="n">instance</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="n">contextPath</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                    <span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">contextPath</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，Tomcat 使用一个 ConcurrentHashMap 来缓存所有的 ServletContext 实例，并在需要获取 ServletContext 实例时使用双重检查锁定机制来确保只有一个线程可以创建实例。</p>
<h3 id="okhttp">OkHttp</h3>
<p>OkHttp 是一个用于进行网络请求的开源框架，它使用单例模式来管理 OkHttpClient 的实例。OkHttpClient 是一个线程安全的类，用于管理网络请求的配置和执行。</p>
<p>以下是 OkHttp 的单例模式实现代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OkHttpClient</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">OkHttpClient</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">OkHttpClient</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// private constructor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">OkHttpClient</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&#34;default&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">OkHttpClient</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OkHttpClient</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// other methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，OkHttp 使用一个 ConcurrentHashMap 来缓存所有的 OkHttpClient 实例，并在需要获取 OkHttpClient 实例时使用 synchronized 方法来确保只有一个线程可以创建实例。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-13｜健身、记账、更新SSL证书、代码提交百度站点收录</title>
      <link>https://blog.chensoul.com/posts/2023/04/04/weekly_review_13/</link>
      <pubDate>Tue, 04 Apr 2023 15:40:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/04/weekly_review_13/</guid>
      <description>前言 本篇是对 2023-03-27 到 2023-04-02 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 本周是三月的最后一周，想到这，就想对随便对三月份</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-13-01.jpeg" alt="weekly-review-13-01"  />
</p>
<p>本篇是对 <code>2023-03-27</code> 到 <code>2023-04-02</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>本周是三月的最后一周，想到这，就想对随便对三月份做个总结。总结的方面，大概包括工作、生活、学习、健身、财务、娱乐几个方面。万事开头难，不知道能者多少，但是，相信不管写多少，都是有意义的。</p>
<p>先来说说最近一周做了什么。查看一下 gitlab 上标签提交记录，这周发布了一个版本，其余时间是进行测试，为下周发布做准备。在工作之余，开始学习《Effective Java 3》，并用 chatgpt 作为辅助工作，加深对技术的理解。另外，有了想学习 React、Rust、Go、Pyhon 的想法。想学的东西有点多，只能一步步来。争取每天利用下班之后的一个小时进行碎片化的学习，并且做好相关笔记，如有可能发布在这个博客上面。加油！</p>
<p>这周完成了每天一万步的计划，其中周末走了 3 万多步，并且还开始了跑步。</p>
<h2 id="关于健身">关于健身</h2>
<p>完成了每天一万步的计划，并且共跑步 8 次，一共 26 公里，最高平均配速 7 分钟，还跳绳一次（550 下）。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-13-03.jpeg" alt="weekly-review-13-03" style="width:50%;" />
<p>跑步的目的不是快，而是乐此不疲。每天跑步 5 公里，每次消耗 300 卡路里的热量，大概需要 10 周才能瘦 10 斤。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-13-02.jpeg" alt="weekly-review-13-02" style="width:50%;" />
<p>光靠走路和跑步，想在 4 月完成瘦 10 斤的目标，应该是不可能的，打算辅助间歇性断食，看下效果。</p>
<blockquote>
<p>跑步是一种有氧运动，可以促进身体代谢，消耗体内的脂肪和热量，达到减肥的效果。但是减肥的效果受到很多因素的影响，如个人的体重、身高、年龄、性别、饮食习惯、跑步强度、频率和时长等。</p>
<p>通常来说，减肥的基本原理是消耗更多的热量，从而达到体重减轻的效果。每天跑步 5 公里的运动量相对较小，一般在一个小时左右可以完成。如果每天坚持跑步，同时注意饮食控制，增加其他有氧运动和合理的休息，可能会在几个月内看到一定的减肥效果。</p>
<p>根据一般的减肥经验，每消耗 3500 卡路里的热量就可以减少一斤体重。假设每次跑步消耗 300 卡路里的热量，那么每天跑步 5 公里约消耗 300 ~ 400 卡路里的热量。如果每天坚持跑步，并且保持每天消耗 300 ~ 400 卡路里的热量，那么大约需要 10 周时间才能减少 10 斤体重。</p>
</blockquote>
<h2 id="关于记账">关于记账</h2>
<p>上周开始，在寻找一个记账的 APP，想开始记录每天的收入与支出。当然，更多的应该是支出了。现在，大环境不行，公司裁员不停，必须要开源节流，手上储备足够的现金。</p>
<p>找来找去，发现微信里没有有个『微信记账本』小程序就可以在微信里自动记账，也支持手动记账。于是，这周试了一下这个小程序，并有意的控制自己每天的输出。因为每天都有带饭，这样中饭就不用花钱了；早餐呢，是泡之前买的黑芝麻糊喝，省去了早餐费用。结果是，这周的支出只有 4.5 元。一次是早上买了一本豆浆，一次是早上跑步怕迟到就骑了一次动感单车。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-13-05.jpeg" alt="weekly-review-13-05" style="width:50%;" />
<p>正好三月结束了，查看了一下三月的支出报表。总的来说，三月支出的有点多，超乎了我的想象。如果每个月都是支出这么多，那以后的零花钱就不够用了。还是要勒紧裤腰带过日子啊。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-13-04.jpeg" alt="weekly-review-13-04" style="width:50%;" />
<h2 id="更新-ssl-证书">更新 SSL 证书</h2>
<p>安装 acme.sh</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl https://get.acme.sh <span class="p">|</span> sh -s <span class="nv">email</span><span class="o">=</span>chensoul.eth@gmail.com
</span></span></code></pre></div><p><strong>我的域名托管在cloudflare</strong>，故需要获取 <a href="https://dash.cloudflare.com/profile/api-tokens">cloudflare API key</a>，在 <code>API 令牌</code> 页面，点击查看 <code>Global API Key</code>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-13-06.png" alt="weekly-review-13-06"  />
</p>
<p>保存 <code>CF_Key</code> 和 <code>CF_Email</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CF_Key</span><span class="o">=</span><span class="s2">&#34;cloudflare 中查看你的 key&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CF_Email</span><span class="o">=</span><span class="s2">&#34;chensoul.eth@gmail.com&#34;</span>
</span></span></code></pre></div><p>生成证书，并重启 nginx：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">acme.sh --issue -d <span class="s2">&#34;chensoul.com&#34;</span> -d <span class="s2">&#34;*.chensoul.com&#34;</span> --dns dns_cf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--cert-file      /usr/local/nginx/ssl/chensoul.com.cer  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--key-file       /usr/local/nginx/ssl/chensoul.com.key  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--fullchain-file /usr/local/nginx/ssl/fullchain.cer <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--reloadcmd <span class="s2">&#34;nginx -s reload&#34;</span>
</span></span></code></pre></div><p>移除域名证书自动更新</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">acme.sh --remove -d chensoul.com -d <span class="s2">&#34;*.chensoul.com&#34;</span>
</span></span></code></pre></div><h2 id="百度站点收录">百度站点收录</h2>
<p>参考 <a href="https://ifttl.com/push-urls-to-baidu/">向百度主动推送网站链接</a> 使用脚本定时推送网站链接到百度站点。对 <code>push_to_baidu.sh</code> 脚本的  parse 方法做了如下修改，以解决 <code>xmllint 解析带有命名空间的 xml 文件报错</code> 的问题。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">function</span> parse <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">file</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$file</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$XMLLINT</span> --format --xpath <span class="s2">&#34;//*[local-name()=&#39;loc&#39; and namespace-uri()=&#39;http://www.sitemaps.org/schemas/sitemap/0.9&#39;]/text()&#34;</span> <span class="s2">&#34;</span><span class="nv">$file</span><span class="s2">&#34;</span> <span class="p">|</span> sed -e <span class="s1">&#39;s/https/\nhttps/g&#39;</span> &gt; <span class="s2">&#34;</span><span class="nv">$URL_TEMP</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="nv">$URL_TEMP</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="工作">工作</h2>
<h3 id="effective-java-3-笔记">Effective Java 3 笔记</h3>
<p>请参考 <a href="/posts/2023/04/03/builder-instead-of-constructors/">《Effective Java 3》笔记：使用构造器代替构造函数</a></p>
<h3 id="rust">Rust</h3>
<p>因为对 <a href="https://tauri.app/">Tauri</a> 这个 GUI 框架挺感兴趣，所以我开始学习 Rust 了，目前在参考 <a href="https://rustwiki.org/">https://rustwiki.org/</a> 上的 <a href="https://rustwiki.org/zh-CN/rust-by-example/">通过例子学 Rust</a> 和 <a href="https://rustwiki.org/zh-CN/book/">Rust 程序设计语言</a> 学习 Rust。</p>
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li>
<p><a href="https://www.lijiaocn.com/%E7%BC%96%E7%A8%8B/2023/03/28/go-wasm-usage.html">Go wasm 使用：Go 代码编译成 WebAssembly 及调用</a></p>
</li>
<li>
<p><a href="https://ourai.ws/posts/what-i-have-done-in-2023-q1/">失业三个月，我都干了啥？</a></p>
</li>
<li>
<p><a href="https://www.bboy.app/2023/04/04/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8Bgitea%E7%9A%84action/">介绍一下gitea的action</a></p>
</li>
<li>
<p><a href="https://blog.p2hp.com/archives/10711">作为绝对初学者学习 Web 开发</a></p>
</li>
</ul>
<h3 id="一些工具">一些工具</h3>
<ul>
<li>
<p>数据统计分析：<a href="https://usefathom.com/">https://usefathom.com</a></p>
</li>
<li>
<p>Cloudflare 图床：<a href="https://www.cloudflare.com/zh-cn/products/cloudflare-images/">Cloudflare Images</a></p>
</li>
<li>
<p>Java 单元测试插件：<a href="https://squaretest.com/">Squaretest for IntelliJ IDEA</a></p>
</li>
<li>
<p>基于标记的科学排版系统：<a href="https://typst.app/">Typst</a>。可以协同工作，且界面更友好。旨在成为 LaTeX、Word 和 Google Docs 等的替代品。</p>
</li>
<li>
<p>数据可视化资源库：<a href="https://vis.zone/lib/">https://vis.zone/lib/</a>。网站提供非常全面的可视化图表类型供参考，还收集了很多实现可视化的代码、工具、课程、书籍。</p>
</li>
<li>
<p>一个免费的 chatgpt 在线 web：https://chatbot.theb.ai/#/chat/1002</p>
</li>
</ul>
<h3 id="一些视频">一些视频</h3>
<p>以下是最近在看的电视、动画片</p>
<p>-《飚速宅男》第五季。一群高中生骑自行车的热血故事。</p>
<p>-《潘多拉伪造的乐园》。此剧讲述了一名拥有令人称羡生活的女子在恢复过往的记忆后，为保护自己和家人对随意操纵自己命运的人展开报复的故事</p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记2：使用构造器代替构造方法</title>
      <link>https://blog.chensoul.com/posts/2023/04/03/builder-instead-of-constructors/</link>
      <pubDate>Mon, 03 Apr 2023 16:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/03/builder-instead-of-constructors/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。 介绍 当一个类需要多个构造函数参数时，可以考虑使</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。</p>
<h2 id="介绍">介绍</h2>
<p>当一个类需要多个构造函数参数时，可以考虑使用<strong>构建器模式</strong>来创建对象。构建器模式是一种创建对象的设计模式，它可以通过链式调用方法的方式来设置对象的构造参数，并最终返回一个构造完整的对象。</p>
<h2 id="优点">优点</h2>
<p>使用构建器模式的原因有以下几点：</p>
<ol>
<li>避免构造函数参数过多的问题：当一个类需要多个构造函数参数时，构造函数的参数列表可能会变得很长，这会导致代码难以理解和维护。使用构建器模式可以将构造函数参数拆分成多个方法，从而使代码更加清晰易懂。</li>
<li>提高代码的可读性和可维护性：使用构建器模式可以使代码更加易懂和易维护，因为可以通过方法名来清晰地表达每个参数的含义。</li>
<li>提供更多的灵活性和可定制性：构建器模式可以提供更多的灵活性和可定制性，因为可以在构造对象时进行更多的逻辑处理和判断。例如，可以在构建器中添加验证逻辑，以确保参数的有效性。</li>
<li>支持多线程环境：构建器模式可以支持多线程环境，因为每个构建器都是独立的，不会受到其他线程的影响。</li>
</ol>
<p>以下是一个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NutritionFacts</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">calories</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">fat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">sodium</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">carbohydrate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">servingSize</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">servings</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">calories</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">calories</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">fat</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">fat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">sodium</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">sodium</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">carbohydrate</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">carbohydrate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//省略 get set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Required parameters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Optional parameters - initialized to default values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">private</span> <span class="kt">int</span> <span class="n">calories</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kt">int</span> <span class="n">fat</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kt">int</span> <span class="n">sodium</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kt">int</span> <span class="n">carbohydrate</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="nf">Builder</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">servingSize</span> <span class="o">=</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">servings</span> <span class="o">=</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">calories</span><span class="o">(</span><span class="kt">int</span> <span class="n">calories</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">calories</span> <span class="o">=</span> <span class="n">calories</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">fat</span><span class="o">(</span><span class="kt">int</span> <span class="n">fat</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">fat</span> <span class="o">=</span> <span class="n">fat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">sodium</span><span class="o">(</span><span class="kt">int</span> <span class="n">sodium</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">sodium</span> <span class="o">=</span> <span class="n">sodium</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">carbohydrate</span><span class="o">(</span><span class="kt">int</span> <span class="n">carbohydrate</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">carbohydrate</span> <span class="o">=</span> <span class="n">carbohydrate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">NutritionFacts</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">NutritionFacts</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述示例中，我们定义了一个名为 NutritionFacts 的类，它包含了一些营养成分的信息，例如每份的大小、总份数、卡路里、脂肪、钠和碳水化合物等成员变量。我们还定义了一个名为 Builder 的静态内部类，用于构建 NutritionFacts 对象。</p>
<p>在 Builder 类中，我们定义了一个带有两个参数的构造方法，并在其中初始化了必需的成员变量 servingSize 和 servings。我们还定义了一些可选的方法，用于设置 NutritionFacts 对象的卡路里、脂肪、钠和碳水化合物等成员变量。这些方法都支持链式调用，并返回 Builder 对象本身，以便进行多次方法调用。</p>
<p>在 Builder 类中，我们最终定义了一个 build() 方法，用于创建 NutritionFacts 对象并返回。在 build() 方法中，我们调用 NutritionFacts 的私有构造器并将 Builder 对象作为参数传递进去，从而创建 NutritionFacts 对象并初始化其成员变量。</p>
<p>现在，我们可以使用 NutritionFacts.Builder 类来创建 NutritionFacts 对象，并使用链式调用来设置 NutritionFacts 对象的成员变量。例如，我们可以使用以下代码来创建一个每份大小为 240ml、总共有 8 份、卡路里为 100、脂肪为 2、钠为 35、碳水化合物为 27 的 NutritionFacts 对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">NutritionFacts</span> <span class="n">cocaCola</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NutritionFacts</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="mi">240</span><span class="o">,</span> <span class="mi">8</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">calories</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">fat</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">sodium</span><span class="o">(</span><span class="mi">35</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">carbohydrate</span><span class="o">(</span><span class="mi">27</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><p>在上述代码中，我们首先创建了一个 NutritionFacts.Builder 对象，并在构造函数中传递了每份大小和总份数等参数。然后，我们使用链式调用来设置卡路里、脂肪、钠和碳水化合物等成员变量，并最终调用 build() 方法来创建 NutritionFacts 对象。</p>
<p>可以使用 lombok 注解来简化代码，但是，<strong>无法在构造器的构造方法里设置必要参数。</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">lombok.Builder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Builder</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NutritionFacts</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">calories</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">fat</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">sodium</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">carbohydrate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="缺点">缺点</h2>
<p>虽然构建器模式可以提高代码的可读性、可维护性以及提供更多的灵活性和可定制性，但它也有一些缺点，包括：</p>
<ol>
<li>增加代码复杂度：使用构建器模式会增加代码的复杂度，因为需要创建一个独立的构建器类，并且需要在构建器类中定义多个方法来设置对象的属性。这会增加代码量并且需要更多的时间来编写和维护代码。</li>
<li>增加内存开销：使用构建器模式需要创建一个独立的构建器对象，并且需要在构建器对象中保存对象的属性。这会增加内存开销，并且在创建对象时需要更多的时间和资源。</li>
<li>对于简单对象不适用：构建器模式更适用于构造复杂对象，对于简单对象来说，使用构建器模式可能会增加代码的复杂度和开销。</li>
<li>需要额外的代码：使用构建器模式需要编写额外的代码来创建构建器类和定义方法。如果只需要构造一个简单的对象，使用构建器模式可能会浪费时间和资源。</li>
</ol>
<h2 id="层次构建器">层次构建器</h2>
<p>层次构建器（Hierarchical Builder）是一种构建器模式的扩展，它允许创建层次结构的对象，并支持在父对象中嵌套子对象。它通常由一个抽象的构建器接口，多个具体的构建器实现和一个指导者（Director）组成。</p>
<p>在层次构建器中，每个构建器都负责创建特定类型的对象，并且可以在其构建方法中调用其他构建器的构建方法来创建嵌套的子对象。指导者负责协调构建器的顺序和调用构建器的方法来构建对象层次结构。</p>
<p>层次构建器模式的优点包括：</p>
<ol>
<li>支持创建复杂的对象层次结构，能够构建包含多个层次和嵌套子对象的对象。</li>
<li>提供了更好的可读性和可维护性，因为每个构建器都只需要关注一个特定类型的对象，而且可以通过方法名来清晰地表达每个参数的含义。</li>
<li>提供了更多的灵活性和可定制性，因为可以在构建器中添加验证逻辑，以确保参数的有效性，并且可以动态地组合构建器来创建不同类型的对象。</li>
</ol>
<p>层次构建器模式的缺点包括：</p>
<ol>
<li>
<p>代码量：由于层次构建器模式需要定义多个构建器类，因此代码量会比较大，尤其是在构建复杂对象时。</p>
</li>
<li>
<p>嵌套层次：层次构建器模式中的对象层次结构是通过嵌套多个构建器实现的，这会导致代码的嵌套层次较深，可能会影响代码的可读性和可维护性。</p>
</li>
<li>
<p>可能会增加内存开销：因为每个构建器都需要创建一个独立的对象，并且需要在构建器对象中保存对象的属性。对于大型对象和多级嵌套结构，开销可能会很大。</p>
</li>
<li>
<p>不适合简单对象的构建：层次构建器模式适用于构建复杂对象层次结构，但对于简单的对象构建，使用层次构建器模式可能会显得过于繁琐和不必要。</p>
</li>
</ol>
<h3 id="使用">使用</h3>
<h4 id="举例-1">举例 1</h4>
<p>1、定义抽象的构建器接口，用于创建不同类型的对象和添加子对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ComputerBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">buildCPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">buildGPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">buildMemory</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">addStorage</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">addPeripheral</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Computer</span> <span class="nf">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>2、创建具体的构建器实现，用于构建不同类型的对象和添加子对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DesktopBuilder</span> <span class="kd">implements</span> <span class="n">ComputerBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Desktop</span> <span class="n">computer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Desktop</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildCPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setCPU</span><span class="o">(</span><span class="k">new</span> <span class="n">CPU</span><span class="o">(</span><span class="n">model</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildGPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setGPU</span><span class="o">(</span><span class="k">new</span> <span class="n">GPU</span><span class="o">(</span><span class="n">model</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildMemory</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setMemory</span><span class="o">(</span><span class="k">new</span> <span class="n">Memory</span><span class="o">(</span><span class="n">size</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addStorage</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">addStorage</span><span class="o">(</span><span class="k">new</span> <span class="n">Storage</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">size</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addPeripheral</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">addPeripheral</span><span class="o">(</span><span class="k">new</span> <span class="n">Peripheral</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Computer</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">computer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LaptopBuilder</span> <span class="kd">implements</span> <span class="n">ComputerBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Laptop</span> <span class="n">computer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Laptop</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildCPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setCPU</span><span class="o">(</span><span class="k">new</span> <span class="n">CPU</span><span class="o">(</span><span class="n">model</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildGPU</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setGPU</span><span class="o">(</span><span class="k">new</span> <span class="n">GPU</span><span class="o">(</span><span class="n">model</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildMemory</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">setMemory</span><span class="o">(</span><span class="k">new</span> <span class="n">Memory</span><span class="o">(</span><span class="n">size</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addStorage</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">addStorage</span><span class="o">(</span><span class="k">new</span> <span class="n">Storage</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="n">size</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addPeripheral</span><span class="o">(</span><span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">computer</span><span class="o">.</span><span class="na">addPeripheral</span><span class="o">(</span><span class="k">new</span> <span class="n">Peripheral</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Computer</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">computer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>3、创建指导者类，用于协调构建器的顺序和调用构建器的方法来构建对象层次结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComputerDirector</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">ComputerBuilder</span> <span class="n">builder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ComputerDirector</span><span class="o">(</span><span class="n">ComputerBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">builder</span> <span class="o">=</span> <span class="n">builder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">construct</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildCPU</span><span class="o">(</span><span class="s">&#34;Intel Core i7&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildGPU</span><span class="o">(</span><span class="s">&#34;Nvidia GeForce RTX 3080&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildMemory</span><span class="o">(</span><span class="mi">16</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">addStorage</span><span class="o">(</span><span class="s">&#34;SSD&#34;</span><span class="o">,</span> <span class="mi">512</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">addPeripheral</span><span class="o">(</span><span class="s">&#34;Keyboard&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">addPeripheral</span><span class="o">(</span><span class="s">&#34;Mouse&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>4、使用层次构建器模式创建计算机系统对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ComputerBuilder</span> <span class="n">desktopBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DesktopBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">ComputerBuilder</span> <span class="n">laptopBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LaptopBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ComputerDirector</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ComputerDirector</span><span class="o">(</span><span class="n">desktopBuilder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Computer</span> <span class="n">desktop</span> <span class="o">=</span> <span class="n">desktopBuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ComputerDirector</span><span class="o">(</span><span class="n">laptopBuilder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Computer</span> <span class="n">laptop</span> <span class="o">=</span> <span class="n">laptopBuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 将两个计算机系统对象组合成一个更大的计算机系统对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ComputerSystem</span> <span class="n">system</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ComputerSystem</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">system</span><span class="o">.</span><span class="na">addComputer</span><span class="o">(</span><span class="n">desktop</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">system</span><span class="o">.</span><span class="na">addComputer</span><span class="o">(</span><span class="n">laptop</span><span class="o">);</span>
</span></span></code></pre></div><p>在上面的示例中，DesktopBuilder和LaptopBuilder分别是具体的构建器实现，用于创建桌面计算机和笔记本电脑对象。ComputerDirector是指导者类，用于协调构建器的顺序和调用构建器的方法来构建对象层次结构。使用ComputerDirector构建计算机系统对象时，可以先使用DesktopBuilder构建桌面计算机对象，再使用LaptopBuilder构建笔记本电脑对象，最后将两个计算机系统对象组合成一个更大的计算机系统对象。</p>
<p>下面是另一个使用层次构建器模式创建层次结构对象的例子，假设需要创建一个组织结构的层次结构对象，其中包含多个部门和嵌套子部门：</p>
<p>1、定义抽象的构建器接口，用于创建不同类型的对象和添加子对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DepartmentBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">buildName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">buildManager</span><span class="o">(</span><span class="n">String</span> <span class="n">manager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">addSubDepartment</span><span class="o">(</span><span class="n">Department</span> <span class="n">subDepartment</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Department</span> <span class="nf">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">DepartmentImpl</span> <span class="kd">implements</span> <span class="n">Department</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">String</span> <span class="n">manager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Department</span><span class="o">&gt;</span> <span class="n">subDepartments</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setManager</span><span class="o">(</span><span class="n">String</span> <span class="n">manager</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">manager</span> <span class="o">=</span> <span class="n">manager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSubDepartment</span><span class="o">(</span><span class="n">Department</span> <span class="n">subDepartment</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">subDepartments</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">subDepartment</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">removeSubDepartment</span><span class="o">(</span><span class="n">Department</span> <span class="n">subDepartment</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">subDepartments</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">subDepartment</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Department</span><span class="o">&gt;</span> <span class="nf">getSubDepartments</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">subDepartments</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getManager</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">manager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DevelopmentDepartment</span> <span class="kd">extends</span> <span class="n">DepartmentImpl</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加特定于开发部门的属性和方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SalesDepartment</span> <span class="kd">extends</span> <span class="n">DepartmentImpl</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加特定于销售部门的属性和方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>2、创建具体的构建器实现，用于构建不同类型的对象和添加子对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SalesDepartmentBuilder</span> <span class="kd">implements</span> <span class="n">DepartmentBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">SalesDepartment</span> <span class="n">department</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SalesDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildManager</span><span class="o">(</span><span class="n">String</span> <span class="n">manager</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="n">manager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSubDepartment</span><span class="o">(</span><span class="n">Department</span> <span class="n">subDepartment</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">subDepartment</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Department</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">department</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DevelopmentDepartmentBuilder</span> <span class="kd">implements</span> <span class="n">DepartmentBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">DevelopmentDepartment</span> <span class="n">department</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DevelopmentDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">buildManager</span><span class="o">(</span><span class="n">String</span> <span class="n">manager</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="n">manager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addSubDepartment</span><span class="o">(</span><span class="n">Department</span> <span class="n">subDepartment</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">department</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">subDepartment</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Department</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">department</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>3、创建指导者类，用于协调构建器的顺序和调用构建器的方法来构建对象层次结构：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrganizationDirector</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">DepartmentBuilder</span> <span class="n">builder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">OrganizationDirector</span><span class="o">(</span><span class="n">DepartmentBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">builder</span> <span class="o">=</span> <span class="n">builder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">construct</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildName</span><span class="o">(</span><span class="s">&#34;Organization&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">buildManager</span><span class="o">(</span><span class="s">&#34;CEO&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Department</span> <span class="n">salesDept</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SalesDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">salesDept</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Sales Department&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">salesDept</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="s">&#34;Sales Manager&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">salesDept</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Department</span> <span class="n">devDept</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DevelopmentDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">devDept</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Development Department&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">devDept</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="s">&#34;Development Manager&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Department</span> <span class="n">frontendDevDept</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DevelopmentDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">frontendDevDept</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Front-end Development Department&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">frontendDevDept</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="s">&#34;Front-end Development Manager&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">devDept</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">frontendDevDept</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Department</span> <span class="n">backendDevDept</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DevelopmentDepartment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">backendDevDept</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Back-end Development Department&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">backendDevDept</span><span class="o">.</span><span class="na">setManager</span><span class="o">(</span><span class="s">&#34;Back-end Development Manager&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">devDept</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">backendDevDept</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">addSubDepartment</span><span class="o">(</span><span class="n">devDept</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>4、使用层次构建器模式创建组织结构对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">DepartmentBuilder</span> <span class="n">salesDeptBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SalesDepartmentBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">DepartmentBuilder</span> <span class="n">devDeptBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DevelopmentDepartmentBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">OrganizationDirector</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OrganizationDirector</span><span class="o">(</span><span class="n">salesDeptBuilder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Department</span> <span class="n">salesDept</span> <span class="o">=</span> <span class="n">salesDeptBuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="n">OrganizationDirector</span><span class="o">(</span><span class="n">devDeptBuilder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Department</span> <span class="n">devDept</span> <span class="o">=</span> <span class="n">devDeptBuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 将两个部门对象组合成一个更大的组织结构对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Organization</span> <span class="n">organization</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Organization</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">organization</span><span class="o">.</span><span class="na">addDepartment</span><span class="o">(</span><span class="n">salesDept</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">organization</span><span class="o">.</span><span class="na">addDepartment</span><span class="o">(</span><span class="n">devDept</span><span class="o">);</span>
</span></span></code></pre></div><p>在上面的示例中，SalesDepartmentBuilder和DevelopmentDepartmentBuilder分别是具体的构建器实现，用于创建销售部门和开发部门对象。OrganizationDirector是指导者类，用于协调构建器的顺序和调用构建器的方法来构建对象层次结构。使用OrganizationDirector构建组织结构对象时，可以先使用SalesDepartmentBuilder构建销售部门对象，再使用DevelopmentDepartmentBuilder构建开发部门对象，最后将两个部门对象组合成一个更大的组织结构对象。</p>
<h4 id="举例-2">举例 2</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ComputerComponent</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">manufacturer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="nf">ComputerComponent</span><span class="o">(</span><span class="n">Builder</span><span class="o">&lt;?&gt;</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">manufacturer</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">manufacturer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">model</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getManufacturer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">manufacturer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getModel</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Builder</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Builder</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">manufacturer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">T</span> <span class="nf">setManufacturer</span><span class="o">(</span><span class="n">String</span> <span class="n">manufacturer</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">manufacturer</span> <span class="o">=</span> <span class="n">manufacturer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">self</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">T</span> <span class="nf">setModel</span><span class="o">(</span><span class="n">String</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">model</span> <span class="o">=</span> <span class="n">model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">self</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">protected</span> <span class="kd">abstract</span> <span class="n">T</span> <span class="nf">self</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">ComputerComponent</span> <span class="nf">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Motherboard</span> <span class="kd">extends</span> <span class="n">ComputerComponent</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">socketType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="nf">Motherboard</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">socketType</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">socketType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getSocketType</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">socketType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="kd">extends</span> <span class="n">ComputerComponent</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">Builder</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">socketType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setSocketType</span><span class="o">(</span><span class="n">String</span> <span class="n">socketType</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">socketType</span> <span class="o">=</span> <span class="n">socketType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">protected</span> <span class="n">Builder</span> <span class="nf">self</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Motherboard</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Motherboard</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CPU</span> <span class="kd">extends</span> <span class="n">ComputerComponent</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">coreCount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="nf">CPU</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">builder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">coreCount</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">coreCount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getCoreCount</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">coreCount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="kd">extends</span> <span class="n">ComputerComponent</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">Builder</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kt">int</span> <span class="n">coreCount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setCoreCount</span><span class="o">(</span><span class="kt">int</span> <span class="n">coreCount</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">coreCount</span> <span class="o">=</span> <span class="n">coreCount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">protected</span> <span class="n">Builder</span> <span class="nf">self</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">CPU</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">CPU</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Motherboard</span> <span class="n">motherboard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CPU</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="nf">Computer</span><span class="o">(</span><span class="n">Builder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">motherboard</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">motherboard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">cpu</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Motherboard</span> <span class="nf">getMotherboard</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">motherboard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CPU</span> <span class="nf">getCpu</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">Motherboard</span> <span class="n">motherboard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">CPU</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setMotherboard</span><span class="o">(</span><span class="n">Motherboard</span> <span class="n">motherboard</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">motherboard</span> <span class="o">=</span> <span class="n">motherboard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Builder</span> <span class="nf">setCpu</span><span class="o">(</span><span class="n">CPU</span> <span class="n">cpu</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">cpu</span> <span class="o">=</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Computer</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Computer</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Motherboard</span><span class="o">.</span><span class="na">Builder</span> <span class="n">motherboardBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Motherboard</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setManufacturer</span><span class="o">(</span><span class="s">&#34;ASUS&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="s">&#34;ROG Strix Z590-E Gaming&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setSocketType</span><span class="o">(</span><span class="s">&#34;LGA 1200&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">CPU</span><span class="o">.</span><span class="na">Builder</span> <span class="n">cpuBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CPU</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setManufacturer</span><span class="o">(</span><span class="s">&#34;Intel&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setModel</span><span class="o">(</span><span class="s">&#34;Core i9-11900K&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setCoreCount</span><span class="o">(</span><span class="mi">8</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Computer</span><span class="o">.</span><span class="na">Builder</span> <span class="n">computerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Computer</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setMotherboard</span><span class="o">(</span><span class="n">motherboardBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setCpu</span><span class="o">(</span><span class="n">cpuBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Computer</span> <span class="n">computer</span> <span class="o">=</span> <span class="n">computerBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><p>在这个示例中，<code>ComputerComponent</code> 类是一个抽象基类，定义了计算机组件的基本属性和方法。它还定义了一个抽象的构建器类，用于构建它的子类的实例。</p>
<p>每个 <code>ComputerComponent</code> 的具体子类都有自己的具体构建器类，该类扩展了抽象构建器类。具体构建器提供了设置相应组件属性的方法，例如主板的制造商、型号和插座类型，处理器的时钟速度和内存的容量。</p>
<p><code>Computer</code> 类代表一个完整的计算机系统，并具有用于构建 <code>Computer</code> 类的实例的构建器类。<code>Computer.Builder</code> 类提供了设置每个组件属性的方法，使用 <code>Consumer</code> 函数接口来接受配置相应构建器的 lambda 表达式。</p>
<h2 id="使用-1">使用</h2>
<p>以下是几个常见开源框架中使用建造者模式的例子：</p>
<h3 id="retrofit">Retrofit</h3>
<p>Retrofit是一个Android和Java平台上的RESTful API库，它使用建造者模式来创建RestAdapter对象。RestAdapter.Builder类是一个建造者类，它包含了一系列的方法，用于设置Retrofit的配置选项，如设置API的base URL、设置HTTP Client、设置Converter等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">RestAdapter</span> <span class="n">restAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestAdapter</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setEndpoint</span><span class="o">(</span><span class="s">&#34;https://api.github.com&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setClient</span><span class="o">(</span><span class="k">new</span> <span class="n">OkClient</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setLogLevel</span><span class="o">(</span><span class="n">RestAdapter</span><span class="o">.</span><span class="na">LogLevel</span><span class="o">.</span><span class="na">FULL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="gson">Gson</h3>
<p>Gson是一个用于在Java对象和JSON数据之间进行序列化和反序列化的库。它使用建造者模式来创建Gson对象。GsonBuilder类是一个建造者类，它包含了一系列的方法，用于配置Gson的行为，如设置日期格式、设置字段的命名策略等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GsonBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setDateFormat</span><span class="o">(</span><span class="s">&#34;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setFieldNamingPolicy</span><span class="o">(</span><span class="n">FieldNamingPolicy</span><span class="o">.</span><span class="na">LOWER_CASE_WITH_UNDERSCORES</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">create</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="apache-httpclient">Apache HttpClient</h3>
<p>Apache HttpClient是一个用于创建HTTP客户端的库，它使用建造者模式来创建HttpClient对象。HttpClientBuilder类是一个建造者类，它包含了一系列的方法，用于配置HttpClient的行为，如设置连接池、设置代理、设置Cookie管理器等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">HttpClient</span> <span class="n">httpClient</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setMaxConnTotal</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setMaxConnPerRoute</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setProxy</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpHost</span><span class="o">(</span><span class="s">&#34;localhost&#34;</span><span class="o">,</span> <span class="mi">8080</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setDefaultCookieStore</span><span class="o">(</span><span class="k">new</span> <span class="n">BasicCookieStore</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="apache-kafka">Apache Kafka</h3>
<p>Apache Kafka是一个分布式消息队列系统，它使用建造者模式来创建Producer和Consumer对象。ProducerConfig和ConsumerConfig类是建造者类，它们包含了一系列的方法，用于配置Producer和Consumer的行为，如设置broker地址、设置序列化器等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Properties</span> <span class="n">producerProps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">producerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">BOOTSTRAP_SERVERS_CONFIG</span><span class="o">,</span> <span class="s">&#34;localhost:9092&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">producerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">KEY_SERIALIZER_CLASS_CONFIG</span><span class="o">,</span> <span class="n">StringSerializer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">producerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ProducerConfig</span><span class="o">.</span><span class="na">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="o">,</span> <span class="n">StringSerializer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Producer</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">producer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KafkaProducer</span><span class="o">&lt;&gt;(</span><span class="n">producerProps</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Properties</span> <span class="n">consumerProps</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">consumerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ConsumerConfig</span><span class="o">.</span><span class="na">BOOTSTRAP_SERVERS_CONFIG</span><span class="o">,</span> <span class="s">&#34;localhost:9092&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">consumerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ConsumerConfig</span><span class="o">.</span><span class="na">KEY_DESERIALIZER_CLASS_CONFIG</span><span class="o">,</span> <span class="n">StringDeserializer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">consumerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ConsumerConfig</span><span class="o">.</span><span class="na">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="o">,</span> <span class="n">StringDeserializer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">consumerProps</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">ConsumerConfig</span><span class="o">.</span><span class="na">GROUP_ID_CONFIG</span><span class="o">,</span> <span class="s">&#34;my-group&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Consumer</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">KafkaConsumer</span><span class="o">&lt;&gt;(</span><span class="n">consumerProps</span><span class="o">);</span>
</span></span></code></pre></div><h3 id="apache-commons-configuration">Apache Commons Configuration</h3>
<p>Apache Commons Configuration是一个用于读取和写入各种配置文件的库，它使用建造者模式来创建Configuration对象。ConfigurationBuilder类是一个建造者类，它包含了一系列的方法，用于配置Configuration的行为，如设置配置文件类型、设置属性的分隔符等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Configuration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConfigurationBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setDelimiterParsingDisabled</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setFile</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&#34;config.properties&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setListDelimiterHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">DefaultListDelimiterHandler</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="guava">Guava</h3>
<p>Guava是一个Google开发的Java库，它包含了许多实用的工具类和数据结构，其中包括使用建造者模式来创建的ImmutableList、ImmutableMap和ImmutableSet等不可变集合类。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;foo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;bar&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;baz&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;foo&#34;</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;bar&#34;</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;baz&#34;</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;foo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;bar&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;baz&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="jpa">JPA</h3>
<p>Java Persistence API（JPA）是Java EE平台的一个ORM框架，它使用建造者模式来创建EntityManagerFactory对象。EntityManagerFactoryBuilder类是一个建造者类，它包含了一系列的方法，用于配置EntityManagerFactory的行为，如设置数据源、设置JPA的属性等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">EntityManagerFactory</span> <span class="n">entityManagerFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EntityManagerFactoryBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">dataSource</span><span class="o">(</span><span class="n">myDataSource</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">persistenceUnit</span><span class="o">(</span><span class="s">&#34;myPersistenceUnit&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">properties</span><span class="o">(</span><span class="n">myProperties</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h3 id="spring-framework">Spring Framework</h3>
<p>Spring Framework是一个Java平台上的开源应用程序框架，它使用建造者模式来创建RestTemplate和HttpHeaders对象。RestTemplateBuilder和HttpHeadersBuilder类是建造者类，它们包含了一系列的方法，用于配置RestTemplate和HttpHeaders的行为，如设置连接超时、设置请求头等。</p>
<p>示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">RestTemplate</span> <span class="n">restTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestTemplateBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setConnectTimeout</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">10</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setReadTimeout</span><span class="o">(</span><span class="n">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">10</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeadersBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><h2 id="优化">优化</h2>
<p>建造者模式的优化主要包括以下几个方面：</p>
<h3 id="使用静态内部类优化建造者模式">使用静态内部类优化建造者模式</h3>
<p>建造者模式通常使用一个Builder类来构建复杂对象，为了避免Builder类变得过于臃肿，可以将其设计为静态内部类，这样可以使代码更加清晰，同时也能够保证线程安全。</p>
<h3 id="使用流式接口优化建造者模式">使用流式接口优化建造者模式</h3>
<p>流式接口是一种链式调用的方式，它可以将多个方法调用连接起来，形成一个链式结构，使得代码更加简洁易读。在建造者模式中，可以使用流式接口来优化Builder类，使得客户端可以通过链式调用的方式来创建复杂对象，从而简化代码。</p>
<h3 id="使用默认值优化建造者模式">使用默认值优化建造者模式</h3>
<p>在建造者模式中，有些属性是必须的，而有些属性是可选的，可以使用默认值来为可选属性设置默认值，从而避免客户端必须为每个可选属性都提供值的情况，同时也能够简化客户端代码。</p>
<h3 id="使用java-8中的optional类优化建造者模式">使用Java 8中的Optional类优化建造者模式</h3>
<p>Java 8中引入了Optional类，该类可以用于处理可能为null的值，可以进一步优化建造者模式中的代码。</p>
<p>在建造者模式中，我们通常需要设置多个属性，其中有些属性可能是可选的，如果直接使用null来表示可选属性的值，可能会导致代码出现空指针异常，而使用Optional类可以避免这个问题。</p>
<p>下面是一个使用Optional类优化建造者模式的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">graphicsCard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Computer</span><span class="o">(</span><span class="n">ComputerBuilder</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cpu</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">memory</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">hardDisk</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">graphicsCard</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">graphicsCard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 省略getter方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ComputerBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">graphicsCard</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setCpu</span><span class="o">(</span><span class="n">String</span> <span class="n">cpu</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">cpu</span> <span class="o">=</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setMemory</span><span class="o">(</span><span class="n">String</span> <span class="n">memory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">memory</span> <span class="o">=</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setHardDisk</span><span class="o">(</span><span class="n">String</span> <span class="n">hardDisk</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">hardDisk</span> <span class="o">=</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setGraphicsCard</span><span class="o">(</span><span class="n">String</span> <span class="n">graphicsCard</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">graphicsCard</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">graphicsCard</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Computer</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Computer</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例代码中，我们使用 <code>Optional</code> 类来表示可选属性的值，将graphicsCard属性的类型改为<code>Optional&lt;String&gt;</code>。在 ComputerBuilder 类中，我们使用 <code>Optional.ofNullable </code>方法来将可选属性的值转换为 Optional 对象，并在调用 build 方法时，将 Optional 对象转换为普通的字符串类型。</p>
<h3 id="使用-lambda表达式优化建造者模式">使用 Lambda表达式优化建造者模式</h3>
<p>Lambda表达式是Java 8中引入的一种新的语言特性，可以进一步优化建造者模式中的代码，使得代码更加简洁易读。</p>
<p>在建造者模式中，我们通常需要定义多个属性，并在构造方法中进行初始化。使用Lambda表达式可以避免定义多个属性的问题，将属性的赋值操作通过Lambda表达式传递给构造方法。</p>
<p>下面是一个使用Lambda表达式优化建造者模式的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.function.Consumer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">graphicsCard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">Computer</span><span class="o">(</span><span class="n">Consumer</span><span class="o">&lt;</span><span class="n">ComputerBuilder</span><span class="o">&gt;</span> <span class="n">builder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ComputerBuilder</span> <span class="n">computerBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ComputerBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">builder</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">computerBuilder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cpu</span> <span class="o">=</span> <span class="n">computerBuilder</span><span class="o">.</span><span class="na">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">memory</span> <span class="o">=</span> <span class="n">computerBuilder</span><span class="o">.</span><span class="na">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">hardDisk</span> <span class="o">=</span> <span class="n">computerBuilder</span><span class="o">.</span><span class="na">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">graphicsCard</span> <span class="o">=</span> <span class="n">computerBuilder</span><span class="o">.</span><span class="na">graphicsCard</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 省略getter方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ComputerBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">String</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">graphicsCard</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setCpu</span><span class="o">(</span><span class="n">String</span> <span class="n">cpu</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">cpu</span> <span class="o">=</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setMemory</span><span class="o">(</span><span class="n">String</span> <span class="n">memory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">memory</span> <span class="o">=</span> <span class="n">memory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setHardDisk</span><span class="o">(</span><span class="n">String</span> <span class="n">hardDisk</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">hardDisk</span> <span class="o">=</span> <span class="n">hardDisk</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">ComputerBuilder</span> <span class="nf">setGraphicsCard</span><span class="o">(</span><span class="n">String</span> <span class="n">graphicsCard</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">graphicsCard</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">graphicsCard</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Computer</span> <span class="n">computer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Computer</span><span class="o">(</span><span class="n">builder</span> <span class="o">-&gt;</span> <span class="n">builder</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">setCpu</span><span class="o">(</span><span class="s">&#34;Intel i7&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">setMemory</span><span class="o">(</span><span class="s">&#34;16GB&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">setHardDisk</span><span class="o">(</span><span class="s">&#34;512GB SSD&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">setGraphicsCard</span><span class="o">(</span><span class="s">&#34;NVIDIA GTX 1660&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例代码中，我们将 Computer 类的构造方法改为接收一个 <code>Consumer&lt;ComputerBuilder&gt; </code>类型的参数，这个参数表示一个包含属性赋值操作的 Lambda 表达式。在构造方法中，我们先创建一个ComputerBuilder 对象，然后通过 Lambda 表达式调用 ComputerBuilder 对象的方法来设置属性值，并最终通过 ComputerBuilder 对象创建 Computer 对象。</p>
<h3 id="使用泛型和反射优化">使用泛型和反射优化</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">EntityCreator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">classInstance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">T</span> <span class="n">entityObj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">EntityCreator</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">classInstance</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">initParams</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">classInstance</span> <span class="o">=</span> <span class="n">classInstance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">paramTypes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Class</span><span class="o">&lt;?&gt;[</span><span class="n">initParams</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="n">initParams</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">checkStr</span> <span class="o">=</span> <span class="n">initParams</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="na">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">checkStr</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;Integer&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">paramTypes</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">checkStr</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;Double&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">paramTypes</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="kt">double</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">checkStr</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;Boolean&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">paramTypes</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="kt">boolean</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">checkStr</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;String&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">paramTypes</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">initParams</span><span class="o">[</span><span class="n">index</span><span class="o">].</span><span class="na">getClass</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">Constructor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">constructor</span> <span class="o">=</span> <span class="n">classInstance</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">(</span><span class="n">paramTypes</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">constructor</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">entityObj</span> <span class="o">=</span> <span class="n">constructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">initParams</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">EntityCreator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">setValue</span><span class="o">(</span><span class="n">String</span> <span class="n">paramName</span><span class="o">,</span> <span class="n">Object</span> <span class="n">paramValue</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Field</span> <span class="n">field</span> <span class="o">=</span> <span class="n">classInstance</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="n">paramName</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">field</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">entityObj</span><span class="o">,</span> <span class="n">paramValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">T</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">entityObj</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>​		如此，可移除整个内部 Builder 类，NutritionFacts 类私有构造的参数仅包括两个必填的 servingSize、servings 字段：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NutritionFacts</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Required parameters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Optional parameters - initialized to default values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">calories</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">fat</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">sodium</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="n">carbohydrate</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">NutritionFacts</span><span class="o">(</span><span class="kt">int</span> <span class="n">servingSize</span><span class="o">,</span> <span class="kt">int</span> <span class="n">servings</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">servingSize</span> <span class="o">=</span> <span class="n">servingSize</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">servings</span> <span class="o">=</span> <span class="n">servings</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>该案例的客户端代码改为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">NutritionFacts</span> <span class="n">cocaCola</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EntityCreator</span><span class="o">&lt;&gt;(</span><span class="n">NutritionFacts</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="mi">240</span><span class="o">,</span> <span class="mi">8</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">&#34;calories&#34;</span><span class="o">,</span> <span class="mi">100</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">&#34;sodium&#34;</span><span class="o">,</span> <span class="mi">35</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">&#34;carbohydrate&#34;</span><span class="o">,</span> <span class="mi">27</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记1：静态工厂方法代替构造函数</title>
      <link>https://blog.chensoul.com/posts/2023/04/03/static-factory-methods-instead-of-constructors/</link>
      <pubDate>Mon, 03 Apr 2023 12:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/03/static-factory-methods-instead-of-constructors/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。 介绍 静态工厂方法是指在类中定义一个静态方法，用</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。</p>
<h2 id="介绍">介绍</h2>
<p>静态工厂方法是指在类中定义一个静态方法，用于创建该类的实例。示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="n">Boolean</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">b</span> <span class="o">?</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TRUE</span> <span class="o">:</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">FALSE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>与构造函数不同的是，静态工厂方法可以有自己的名称，并且可以根据参数的不同返回不同的对象实例。</p>
<h2 id="优点">优点</h2>
<p>这本书中提到了一些静态工厂方法的优点，包括：</p>
<ol>
<li>
<p>静态工厂方法可以有意义的名称：与构造函数不同，静态工厂方法可以有自己的名称，这使得代码更具有可读性和可维护性。</p>
<blockquote>
<p>例如，BigInteger 类提供了一个返回素数的静态工厂方法 <code>BigInteger.probablePrime</code> 。</p>
</blockquote>
</li>
<li>
<p>静态工厂方法可以隐藏实现细节：静态工厂方法可以隐藏对象的创建和初始化过程，使客户端代码更加简洁和易于维护。</p>
<blockquote>
<p>这是服务提供者框架的基础。</p>
<p>服务提供者框架中有三个基本组件：服务接口，代表要实现的服务；提供者注册 API，提供者使用它来注册实现，以及服务访问
API，客户端使用它来获取服务的实例。服务访问 API 允许客户端指定选择实现的标准。在没有这些条件的情况下，API
返回一个默认实现的实例，或者允许客户端循环使用所有可用的实现。服务访问 API 是灵活的静态工厂，它构成了服务提供者框架的基础。</p>
<p>服务提供者框架的第四个可选组件是服务提供者接口，它描述了产生服务接口实例的工厂对象。在没有服务提供者接口的情况下，必须以反射的方式实例化实现。</p>
<p>在 JDBC 中，<code>Connection</code> 扮演服务接口的角色。<code>DriverManager.registerDriver</code> 是提供者注册的
API，<code>DriverManager.getConnection</code> 是服务访问 API，<code>Driver</code> 是服务提供者接口。</p>
<p>服务提供者框架模式有许多变体。例如，服务访问 API 可以向客户端返回比提供者提供的更丰富的服务接口，这是桥接模式。依赖注入框架可以看作是强大的服务提供者。由于是
Java 6，该平台包括一个通用服务提供者框架 <code>Java.util.ServiceLoader</code>，所以你不需要，通常也不应该自己写。JDBC 不使用
ServiceLoader，因为前者比后者要早。</p>
</blockquote>
</li>
<li>
<p>静态工厂方法可以返回缓存的对象：静态工厂方法可以返回缓存的对象，这避免了创建新对象的开销，提高了性能。</p>
<blockquote>
<p>这种技术类似于享元模式。如果经常请求相同的对象，特别是在创建对象的代价很高时，它可以极大地提高性能。</p>
</blockquote>
<p><strong>举例 1：使用 ConcurrentHashMap</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadSafeCache</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ThreadSafeCache</span><span class="o">&gt;</span> <span class="n">instances</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">ThreadSafeCache</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ThreadSafeCache</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instances</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">k</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ThreadSafeCache</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>computeIfAbsent</code> 方法用于计算缓存对象。如果 <code>key</code> 在 <code>instances</code> 中不存在，则使用 lambda
表达式 <code>k -&gt; new ThreadSafeCache()</code> 创建一个新的 <code>ThreadSafeCache</code> 对象，并将该对象与 <code>key</code> 关联。如果 <code>key</code>
已经存在，则直接返回与之关联的 <code>ThreadSafeCache</code> 对象。</p>
<p>使用 <code>computeIfAbsent</code> 方法可以更简洁地实现线程安全的缓存类，并且可以确保在多线程环境下的线程安全性。</p>
</li>
</ol>
<p><strong>举例 2：使用 synchronized 关键字</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadSafeCache</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ThreadSafeCache</span><span class="o">&gt;</span> <span class="n">instances</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">ThreadSafeCache</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ThreadSafeCache</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">instances</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">instances</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">ThreadSafeCache</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol start="4">
<li>
<p>静态工厂方法可以返回子类对象：静态工厂方法可以返回实现了某个接口或继承了某个类的子类对象，这提高了代码的灵活性和可扩展性。</p>
<blockquote>
<p>例如，Java 的 Collections 框架有 45
个接口实用工具实现，提供了不可修改的集合、同步集合等。几乎所有这些实现都是通过一个非实例化类（<code>java.util.Collections</code>
）中的静态工厂方法导出的。返回对象的类都是私有的子类。</p>
</blockquote>
<p><strong>举例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">draw</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Circle</span> <span class="kd">implements</span> <span class="n">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Drawing Circle&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Square</span> <span class="kd">implements</span> <span class="n">Shape</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Drawing Square&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShapeFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Shape</span> <span class="nf">getShape</span><span class="o">(</span><span class="n">String</span> <span class="n">shapeType</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">shapeType</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">shapeType</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&#34;CIRCLE&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Circle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">shapeType</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">&#34;SQUARE&#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">Square</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>ShapeFactory</code> 类使用静态工厂方法 <code>getShape</code> 来创建 <code>Shape</code> 对象。如果 <code>shapeType</code> 参数为 <code>CIRCLE</code>
，则创建 <code>Circle</code> 对象并返回，如果参数为 <code>SQUARE</code>，则创建 <code>Square</code> 对象并返回。</p>
</li>
<li>
<p>静态工厂方法可以返回不可变对象：静态工厂方法可以返回不可变对象，这确保了对象的安全性和线程安全性。</p>
<p><strong>举例</strong>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ThreadSafeImmutableClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">ThreadSafeImmutableClass</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ThreadSafeImmutableClass</span> <span class="nf">getInstance</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">ThreadSafeImmutableClass</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>ThreadSafeImmutableClass</code> 类使用静态工厂方法 <code>getInstance</code>
来创建不可变对象。由于该类的属性都是 <code>final</code> 的，因此该对象是不可变的。由于没有任何状态可以修改，因此该对象是线程安全的。</p>
</li>
</ol>
<h2 id="缺点">缺点</h2>
<p>使用静态工厂方法也有一些缺点，例如：</p>
<ol>
<li>静态工厂方法可能会导致代码的可测试性变差，因为它们往往是静态的，难以进行模拟和替换。</li>
<li>静态工厂方法可能会使代码的扩展性变差，因为它们通常是静态的，难以扩展和修改。</li>
<li>静态工厂方法可能会使代码的可读性变差，因为它们往往是自定义的，难以理解和维护。</li>
</ol>
<p>仅提供静态工厂方法也存在一些局限：</p>
<ol>
<li>不可继承：静态工厂方法是通过类名直接调用的，因此无法通过继承来创建对象的变体或子类对象。</li>
<li>可能难以扩展：如果在实现静态工厂方法时没有考虑到所有可能的用例，那么在需要添加新功能或对象类型时可能会很难扩展。</li>
<li>可能难以测试：如果静态工厂方法中包含复杂的逻辑或依赖外部资源，那么在测试时可能会很难模拟或替换这些依赖项。</li>
<li>可能会引起混淆：如果在同一个类中定义多个静态工厂方法，它们可能具有相似的名称或参数类型，从而可能会导致混淆或误用。</li>
<li>对象创建可能较慢：如果创建对象需要进行复杂的计算或依赖大量的外部资源，那么静态工厂方法可能会导致对象创建的性能问题。</li>
</ol>
<p>所以，在选择不同的静态工厂方法时，需要考虑以下几个因素：</p>
<ol>
<li>目的：考虑每个工厂方法的目的，以及它是否符合您的需求。不同的工厂方法可能有不同的目的，例如创建新对象、返回共享实例或从一种类型转换为另一种类型。</li>
<li>灵活性：考虑每个工厂方法的灵活性。某些工厂方法可能比其他工厂方法更灵活，允许更多的自定义或配置选项。</li>
<li>可读性：考虑工厂方法的可读性。好的工厂方法应该易于阅读和理解，具有清晰的名称和明确的参数。</li>
<li>性能：考虑每个工厂方法的性能影响。根据具体的用例，某些工厂方法可能比其他工厂方法更高效或更快。</li>
<li>兼容性：考虑工厂方法是否与您现有的代码库和第三方库兼容。根据具体的技术和框架，某些工厂方法可能比其他工厂方法更兼容。</li>
<li>维护：考虑每个工厂方法的维护影响。根据实现的复杂性以及文档和支持的可用性，某些工厂方法可能比其他工厂方法更易于维护。</li>
</ol>
<h2 id="使用">使用</h2>
<p>以下是一些常见静态工厂方法的名称：</p>
<ul>
<li>
<p><code>from</code>，用于从其他类型的对象或数据源中创建一个对象，例如 <code>Date.from</code> 和 <code>Duration.from</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Date</span> <span class="n">d</span> <span class="o">=</span> <span class="n">Date</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">instant</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>of</code>，一个聚合方法，它接受多个参数并返回一个包含这些参数的实例，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Set</span><span class="o">&lt;</span><span class="n">Rank</span><span class="o">&gt;</span> <span class="n">faceCards</span> <span class="o">=</span> <span class="n">EnumSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">JACK</span><span class="o">,</span> <span class="n">QUEEN</span><span class="o">,</span> <span class="n">KING</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>valueOf</code>，一种替代 <code>from</code> 和 <code>of</code> 但更冗长的方法，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">BigInteger</span> <span class="n">prime</span> <span class="o">=</span> <span class="n">BigInteger</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>instance</code> 或 <code>getInstance</code>，返回一个实例，该实例由其参数（如果有的话）描述，但不具有相同的值，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">StackWalker</span> <span class="n">luke</span> <span class="o">=</span> <span class="n">StackWalker</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">options</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>create</code> 或 <code>newInstance</code>，与 <code>instance</code> 或 <code>getInstance</code> 类似，只是该方法保证每个调用都返回一个新实例，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Object</span> <span class="n">newArray</span> <span class="o">=</span> <span class="n">Array</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">classObject</span><span class="o">,</span> <span class="n">arrayLen</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>getType</code>，类似于 <code>getInstance</code>，但如果工厂方法位于不同的类中，则使用此方法。其类型是工厂方法返回的对象类型，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">FileStore</span> <span class="n">fs</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">getFileStore</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Runtime</span> <span class="n">runtime</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">();</span>
</span></span></code></pre></div></li>
<li>
<p><code>newType</code>，与 <code>newInstance</code> 类似，但是如果工厂方法在不同的类中使用。类型是工厂方法返回的对象类型，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="n">Files</span><span class="o">.</span><span class="na">newBufferedReader</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>type</code>，一个用来替代 <code>getType</code> 和 <code>newType</code> 的比较简单的方式，例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">List</span><span class="o">&lt;</span><span class="n">Complaint</span><span class="o">&gt;</span> <span class="n">litany</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">list</span><span class="o">(</span><span class="n">legacyLitany</span><span class="o">);</span>
</span></span></code></pre></div></li>
<li>
<p><code>parse</code>：用于从字符串或其他格式中解析出一个对象，例如 <code>LocalDate.parse</code> 和 <code>NumberFormat.parse</code>。</p>
</li>
<li>
<p><code>build</code>：用于构建一个对象，例如 <code>RequestBuilder.build</code> 和 <code>ResponseBuilder.build</code>。</p>
</li>
</ul>
<p>还有一些常用的静态工厂方法名称：</p>
<ol>
<li><code>asXxx</code>：用于将该类的对象转换为其他类型的对象，例如 <code>ByteBuffer.asCharBuffer</code> 和 <code>FileChannel.asIntBuffer</code>。</li>
<li><code>toXxx</code>：用于将该类的对象转换为其他类型的对象，例如 <code>BigInteger.toByteArray</code> 和 <code>String.toCharArray</code>。</li>
<li><code>getXXX</code>：用于获取某个对象，例如 <code>TimeZone.getDefault</code>。</li>
<li><code>newXxx</code>：用于创建一个新的对象，例如 <code>File.newFile</code> 和 <code>Thread.newThread</code>。</li>
<li><code>withXxx</code>：用于创建一个修改了指定属性的对象的副本，例如 <code>LocalDate.withYear</code> 和 <code>HttpHeaders.withAccept</code>。</li>
<li><code>forXxx</code>：用于创建一个与指定参数相关的对象，例如 <code>Charset.forName</code> 和 <code>ThreadLocalRandom.forWeb</code>。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-12｜车辆被堵、开车总结、Effective Java3笔记</title>
      <link>https://blog.chensoul.com/posts/2023/03/28/weekly_review_12/</link>
      <pubDate>Tue, 28 Mar 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/03/28/weekly_review_12/</guid>
      <description>前言 本篇是对 2023-03-20 到 2023-03-26 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 上周去同济医院检查鼾症，检查结果是轻度症状，医生</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-12-01.jpeg" alt="weekly-review-12-01"  />
</p>
<p>本篇是对 <code>2023-03-20</code> 到 <code>2023-03-26</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>上周去同济医院检查鼾症，检查结果是轻度症状，医生建议多运动减肥。这周每天走路 1 万步的目标已达成。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-12-02.png" alt="weekly-review-12-02" style="width:50%;" />
<p>工作上发布了一个版本，另外两个迭代正在进行中，预计这周再发布一个版本。从飞书通讯录看到又有三个非技术类同事被裁，这周周会，部门领导说最近又有一个做商务的同事被优化了。</p>
<p>上周有一天早上，车子停在小区里面，被两个车子挡住了前后道路，联系不上车主，只好坐地铁上班。话说，自从开车上班之后，使用手机的频率明显降低了很多。</p>
<p>上周末阳光正好，于是回家去给已故的亲人扫墓。周六回老家，周日回老婆家。逝者已逝，活着的人要善待自己，好好吃饭，好好睡觉，好好工作，好好运动。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-12-03.jpeg" alt="weekly-review-12-03" style="width:50%;" />
<h2 id="工作">工作</h2>
<h3 id="effective-java-3-笔记">Effective Java 3 笔记</h3>
<p>请参考 <a href="/posts/2023/04/03/static-factory-methods-instead-of-constructors/">《Effective Java 3》笔记：静态工厂方法代替构造函数</a>。</p>
<h3 id="machine-learning-with-go">Machine-Learning-With-Go</h3>
<p>B站视频：<a href="https://www.bilibili.com/video/BV1iW411w7ev">「课程」使用Go做机器学习</a></p>
<p>源代码：<a href="https://github.com/PacktPublishing/Machine-Learning-With-Go">Machine-Learning-With-Go</a></p>
<h2 id="生活">生活</h2>
<h3 id="车辆被堵">车辆被堵</h3>
<p>早上准备开车上班，发现车子前后道路都被车辆占道了。前面车辆占道，昨天晚上下班回来就发现了，也确认了这个车辆没有留挪车电话。当时就隐隐担忧今天早上会被挡住前后道路。没有想到，真的被挡了。后面的车辆留了挪车电话。六点半开始，我就给后面车的车主打电话发短信，对方一直没接电话，估计手机调静音还在睡觉吧。没有想到的是，截止到现在时间八点，他还没有给我回电话，这哥们睡得那是真香啊。</p>
<p>在道路被占用之后，我做了什么？除了给留了号码的那个车主打电话之外，我还想到交管 12123 APP 上面有一个一键挪车功能。于是，试了一下这个功能。原以为这个功能可以电话通知到对方挪车。实际情况却只是提交了一个工单而已，真是一个鸡肋的功能。用户使用这个功能，是希望及时联系到车主过来挪车，而不是提交一个工单之后，傻傻的等待。另外，这个功能也不能叫一键挪车，因为点击了这个功能之后，还要输入车牌号、上传照片。更好的体验应该是只用上传占用道路的车辆照片，由系统识别出车牌号，然后后台找到车主的手机号，生成一个临时号码并调用手机的拨号功能。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-12-04.jpeg" alt="weekly-review-12-04" style="width:50%;" />
<p>在道路被占用之后，我的心态是怎样的？刚开始想生气愤怒，后来想了想，事已至此，没有必要生气，生气只能影响自己一天的心情和好运。并尝试把这种对自己不利的一面转化为对自己有利的一面。原想六点半开车上班，道路被占之后，就可以体验一下七点多甚至八点多开车上班需要多长时间以及是否堵车。</p>
<p>如果是我把道路占用了，我该怎么做呢？首先，是车上留一个手机号码；其次，是第二天早上保证手机不关机并且没有静音。</p>
<p>如何避免再次出现这样的情况呢？一是通过电话或者便条的形式提醒车主要在车上留一个挪车电话并保证电话畅通，二是反馈给物业让物业来提醒小区里的车主不要随意占用车道。</p>
<h3 id="开车总结">开车总结</h3>
<p>学到了新知识：</p>
<ul>
<li>学会了如何调节前灯的高度。数字越大，灯光照射的越近。</li>
</ul>
<p>开车需要改进的地方：</p>
<ul>
<li>1、今天在菜场点火的时候，错把油门当刹车</li>
<li>2、准备加速超过左边货车的时候，货车打了右前灯，下意识地把方向盘向右打了一点</li>
<li>3、遇到红绿灯变黄灯时，刹车太急。想冲过去，但犹豫了。这样做太危险，不能存在侥幸心理。下次遇到这种情况，宁可提前刹车，等红灯过了，再向前行驶。</li>
</ul>
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li>
<p><a href="https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/">做了 6 年程序员，我学到的 10 条经验</a></p>
</li>
<li>
<p><a href="https://mritd.com/2021/06/06/jetbrains-plugins/">JetBrains 常用插件</a></p>
</li>
<li>
<p><a href="https://blog.skyju.cc/post/v2ray-warp-go-unlock-new-bing/">v2ray + warp-go 非全局使用Cloudflare WARP解锁New Bing等服务</a></p>
</li>
<li>
<p><a href="https://blog.17lai.site/posts/8f152670/">如何创建属于自己的私人资料库与私人搜索引擎 _</a></p>
</li>
<li>
<p><a href="https://1byte.io/google-large-scale-dev/">如何高效地协作开发：一些 Google 的实践</a></p>
</li>
<li>
<p><a href="https://jasonkayzk.github.io/2023/03/28/Java%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%93%E5%AD%98%E5%BA%93Caffeine/">Java高性能缓存库Caffeine</a></p>
</li>
</ul>
<h3 id="一些工具">一些工具</h3>
<ul>
<li>
<p><a href="https://hao.uisdc.com/">优设导航官网</a>：设计导航2013年上线至今，是优设网旗下最专业好用的设计师导航网站！设计导航为设计师提供UI设计、设计教程、素材下载、高清图库、配色方案、App设计、网页设计等设计网站导航指引。设计导航每周更新，设计风向标就看优设网！</p>
</li>
<li>
<p><a href="https://dusays.com/567/">Zeabur 属于国人的免费托管平台</a></p>
</li>
<li>
<p><a href="https://luyuhuang.tech/2023/03/21/nvim.html">Neovim 使用体验</a></p>
</li>
<li>
<p><a href="https://www.domon.cn/github-copilotmian-fei-ping-ti-codeium/">Github Copilot免费平替 - Codeium</a></p>
</li>
<li>
<p><a href="https://chatdoc.com/">Chat with documents</a></p>
</li>
<li>
<p><a href="https://codeium.com/">Codeium</a>：一款免费的类 Github Copilot 的 AI 代码辅助产品，可以便捷的和 AI 进行结对编程。初步使用下来和主流的 IDE 的集成很好，感兴趣的朋友可以先到<a href="https://codeium.com/playground">浏览器里在线尝试一番</a>。</p>
</li>
</ul>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-12-05.jpeg" alt="codeium"  />
</p>
<h3 id="一些视频">一些视频</h3>
<ul>
<li>飚速宅男第五季</li>
<li>魔女</li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-11｜从语雀迁移到Obsidian</title>
      <link>https://blog.chensoul.com/posts/2023/03/20/weekly_review_11/</link>
      <pubDate>Mon, 20 Mar 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/03/20/weekly_review_11/</guid>
      <description>前言 ​ 图片：涨渡湖湿地水上森林公园 本篇是对 2023-03-13 到 2023-03-19 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这周的工作主要是重</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-04.jpeg" alt="weekly-review-11-04"  />
</p>
<p>​														              					图片：<em>涨渡湖湿地水上森林公园</em></p>
<p>本篇是对 <code>2023-03-13</code> 到 <code>2023-03-19</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周的工作主要是重构、优化系统，工作节奏比之前轻缓了很多。这周也开始了开车上下班，除去周五去医院做检查，一共开了 4 天车。从汉口到光谷，一共 29 公里，如果早上 6:30 出发，就只需要 50 分钟；如果 6:45 出发，竟然需要两个小时，真是无语了。无奈之下，只能每天早点出门早点到公司，然后，打完卡之后，在公司楼下走路。</p>
<p>这周开始心里默默定了一个 flag，就是每天走路 10000 步。看了一下微信运动，基本上达成了，除了周五晚上因为加班，而少走了 64 步。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-03.png" alt="weekly-review-11-03" style="width:67%;" />
<h2 id="从语雀迁移到obsidian">从语雀迁移到Obsidian</h2>
<p>上周提到开始使用格志 APP 来写日志，使用了一段时间之后，发现了一些缺点：</p>
<ul>
<li>部分功能收费</li>
<li>导出的 markdown 不支持图片显示</li>
<li>不支持本地存储</li>
</ul>
<p>于是，放弃了使用格志 APP，继而在使用了一段时间 Obsidian 之后，改为使用 Obsidian 来写日志和周报。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-02.png" alt="weekly-review-11-02" style="width:67%;" />
<p>为了不给自己太大压力，日报每天复盘内容包括以下几方面：</p>
<ul>
<li>
<p>今日待办</p>
</li>
<li>
<p>学习</p>
</li>
<li>
<p>工作</p>
</li>
<li>
<p>生活</p>
</li>
<li>
<p>健身</p>
</li>
</ul>
<h3 id="导出语雀文档为-markdown">导出语雀文档为 markdown</h3>
<p>参考 <a href="https://github.com/yuque/yuque-exporter">yuque/yuque-exporter</a> 文档，下载 yuque-exporter  之后进行导出操作，发现以下问题：</p>
<ul>
<li>该项目需要使用的 nodejs 版本为 18.0.4</li>
<li>nodejs 使用正确的版本还是导出失败</li>
</ul>
<p>于是，改为使用源码编译和运行导出。</p>
<p>1、先下载代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/yuque/yuque-exporter.git
</span></span></code></pre></div><p>2、修改 main.ts 中需要导出的语雀知识库地址为自己的仓库地址：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// Determining if an ESM module is main then run the code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">&#39;file:&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="kr">module</span><span class="nx">Path</span> <span class="o">=</span> <span class="nx">fileURLToPath</span><span class="p">(</span><span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="kr">module</span><span class="nx">Path</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">urlPaths</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;chensoul/rose&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;chensoul/growup&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;chensoul/tech&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="nx">start</span><span class="p">({</span> <span class="nx">urlPaths</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>3、参考 <a href="https://www.yuque.com/yuque/developer/api#785a3731">文档</a> 申请语雀 TOKEN。</p>
<p>4、下载项目依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">npm i
</span></span></code></pre></div><p>5、运行项目，开始导出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">YUQUE_TOKEN</span><span class="o">=</span>XXXXXX npm start
</span></span></code></pre></div><blockquote>
<p>导出的文件在 storage 目录，接下来可以拷贝到 Obsidian 目录里。</p>
</blockquote>
<p>6、另外，可以对 yuque-exporter 源码做一些修改：</p>
<ul>
<li>导出的 markdown 文件不要有 frontmatter，修改 doc.ts 中 buildDoc 方法：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">async</span> <span class="kd">function</span> <span class="nx">buildDoc</span><span class="p">(</span><span class="nx">doc</span>: <span class="kt">TreeNode</span><span class="p">,</span> <span class="nx">mapping</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">string</span><span class="err">,</span> <span class="na">TreeNode</span><span class="p">&gt;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">docDetail</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">readJSON</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">metaDir</span><span class="p">,</span> <span class="nx">doc</span><span class="p">.</span><span class="kr">namespace</span><span class="p">,</span> <span class="s1">&#39;docs&#39;</span><span class="p">,</span> <span class="sb">`</span><span class="si">${</span><span class="nx">doc</span><span class="p">.</span><span class="nx">url</span><span class="si">}</span><span class="sb">.json`</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">remark</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;settings&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">bullet</span><span class="o">:</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="nx">listItemIndent</span><span class="o">:</span> <span class="s1">&#39;one&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">use</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span> <span class="nx">replaceHTML</span> <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span> <span class="nx">relativeLink</span><span class="p">,</span> <span class="p">{</span> <span class="nx">doc</span><span class="p">,</span> <span class="nx">mapping</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span> <span class="nx">downloadAsset</span><span class="p">,</span> <span class="p">{</span> <span class="nx">doc</span><span class="p">,</span> <span class="nx">mapping</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">process</span><span class="p">(</span><span class="nx">docDetail</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">//  doc.content = frontmatter(doc) + content.toString();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">doc</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// FIXME: remark will transform `*` to `\*`
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">doc</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">replaceAll</span><span class="p">(</span><span class="s1">&#39;\\*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">doc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li>导出的段落之间增加换行，修改 doc.ts 中 replaceHTML 方法：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">replaceHTML() {</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">tree</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">htmlNodes</span> <span class="o">=</span> <span class="nx">selectAll</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="nx">tree</span><span class="p">)</span> <span class="kr">as</span> <span class="nx">Text</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">node</span> <span class="k">of</span> <span class="nx">htmlNodes</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;&lt;br /&gt;&#39;</span> <span class="o">||</span> <span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;&lt;br/&gt;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">node</span><span class="p">.</span><span class="kr">type</span> <span class="o">=</span> <span class="s1">&#39;text&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;\n\n\n&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>7、删除导出的 markdown 文件当中的锚点标签（例如：<code>&lt;a name=&quot;xx&quot;&gt;&lt;/a&gt;</code>）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> storage
</span></span><span class="line"><span class="cl"><span class="c1"># macos 上执行</span>
</span></span><span class="line"><span class="cl">find . -type f -name <span class="s1">&#39;*.md&#39;</span> -exec sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/&lt;a name=\&#34;[^\&#34;]*\&#34;&gt;&lt;\/a&gt;//g&#39;</span> <span class="o">{}</span> +
</span></span></code></pre></div><img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-01.png" alt="weekly-review-11-01" style="width:67%;" />
<p>在上面的示例代码中，我们使用了 sed 命令来删除 Markdown 文件中所有的类似 <code>&lt;a name=&quot;xx&quot;&gt;&lt;/a&gt;</code> 的锚点标签。其中：</p>
<ul>
<li><code>-i ''</code> 参数表示直接修改源文件，而不是输出到标准输出流。<code>''</code> 表示在 macOS 系统上备份修改前的文件，如果在 Linux 系统上使用该命令，可以省略该参数。</li>
<li><code>s/&lt;a name=\&quot;[^\&quot;]*\&quot;&gt;&lt;\/a&gt;//g</code> 表示用空字符串替换所有符合正则表达式 <code>&lt;a name=\&quot;[^\&quot;]*\&quot;&gt;&lt;\/a&gt;</code> 的字符串。该正则表达式匹配所有以 <code>&lt;a name=</code> 开头，以 <code>&quot;&gt;&lt;/a&gt;</code> 结尾的标签，且中间的文本不包含双引号。</li>
</ul>
<p>8、将导出的 markdown 文件中的本地图片批量上传到图床，操作方法：使用 typora 打开 storage 目录，然后依次点击 格式、图像、上传所有本地图片</p>
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li>
<p><a href="https://moelove.info/2023/03/21/GitHub-Actions-%E6%88%90%E6%9C%AC%E4%BC%98%E5%8C%96%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%9B%A2%E9%98%9F%E6%9B%B4%E5%85%B7%E7%AB%9E%E4%BA%89%E5%8A%9B/">GitHub Actions 成本优化：让你的团队更具竞争力</a></p>
</li>
<li>
<p><a href="https://juemuren4449.com/archives/open-gzip-on-nginx">Nginx 开启 gzip 压缩</a></p>
</li>
<li>
<p><a href="https://www.superheaoz.top/2022/06/57091/">Obsidan日记、记账与自动同步</a></p>
</li>
<li>
<p><a href="https://elmagnifico.tech/2023/03/16/Doprax-V2ray/">Doprax搭建免费V2ray节点</a></p>
</li>
<li>
<p><a href="https://elizen.me/posts/2023/03/hi-icloud/">Hi，土区 iCloud</a></p>
</li>
<li>
<p><a href="https://btsogiwudc.feishu.cn/docx/CgoJdHyWKopl3UxV12GcG3psnjf">国区使用土耳其iCloud服务，手把手保姆级上车教程</a></p>
</li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-10｜通过Cloudflare Tunnel访问服务、Vercel部署Cusdis和Umami</title>
      <link>https://blog.chensoul.com/posts/2023/03/13/weekly_review_10/</link>
      <pubDate>Mon, 13 Mar 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/03/13/weekly_review_10/</guid>
      <description>前言 本篇是对 2023-03-06 到 2023-03-12 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这周发现 VPS 上 某些使用 docker 部署的服务（cusdis、</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-10-00.jpeg" alt="weekly-review-10-00"  />
</p>
<p>本篇是对 <code>2023-03-06</code> 到 <code>2023-03-12</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周发现 VPS 上 <a href="https://blog.chensoul.com/posts/2023/01/25/notes-about-deploy-services-in-vps/">某些使用 docker 部署的服务</a>（cusdis、umami、uptime、n8n、rsshub、memos）国内用户无法访问了，于是就折腾了一下使用 Cloudflare Tunnel 来代理这些服务。配置成功之后，又发现本地如果开启 VPN，Cloudflare Tunnel 代理的域名还是无法访问，于是放弃了使用 Cloudflare Tunnel，改为将这些国内无法访问的服务部署到免费的 VPS 服务器上，比如：Railway、Vercel。</p>
<p>这周工作忙完之后，就开始着手通知系统的重构改造服务，想着 chatgpt 这么火，于是就试试让它来写代码。在不断地修改需求的情况下，chatgpt 写出来的代码稍加调整逐渐可以使用了。</p>
<p>周六从汉口开车去白沙洲湖北财税职业学院，全程 20 公里，回来的时候不小心把路边的面包车擦碰了一下。于是一脸懵的经历了一次保险定损维修。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-10-07.jpeg" alt="weekly-review-10-07"  />
</p>
<p>周六开始使用 格志 APP 写日志，选择它来记录日志的原因是它支持批量导出 mardkown、pdf、图片等。唯一有个小遗憾的是，这个应用没有图床，导出的 markdown 文件里面图片的链接不是 http 协议。</p>
<img src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-10-08.png" alt="weekly-review-10-08" style="width:67%;" />
<p>周日去新荣龙湖天耀天街售房部看了一下房子。107 平三室两厅两卫，单价 2 万 5 带精装修，公积金贷款 90 万，商业贷款 30 年，每个月房贷 6000。目前来说，买不起这里的房子，但是，作为一个买房目标还是可以的，加油！</p>
<h2 id="开车总结">开车总结</h2>
<p>最近刷视频，总结的一些开车经验如下：</p>
<ul>
<li>
<p>提前预判，前面车子刹车，不管是正前方，还是左右前方，这时候也要刹车</p>
</li>
<li>
<p>前面有大货车，不要从右边超车</p>
</li>
<li>
<p>会车时，看路宽</p>
</li>
<li>
<p>不要连续变道，变道时既要看后视镜，又要看窗边</p>
</li>
<li>
<p>红灯路口右转时，要看地面或者路边是否有禁止右转标识</p>
</li>
</ul>
<h2 id="通过-cloudflare-tunnel-访问服务">通过 Cloudflare Tunnel 访问服务</h2>
<p>以下内容参考 <a href="https://dejavu.moe/posts/cloudflare-tunnel-access-uptime/">初探 Cloudflare 零信任 - 通过 Cloudflare Tunnel 访问服务</a>。</p>
<h3 id="1创建-cloudflare-tunnel">1、创建 Cloudflare Tunnel</h3>
<p>登录 <a href="https://one.dash.cloudflare.com/">Cloudflare Zero Trust</a> 控制台，选择左侧导航栏的 Access 菜单，进入 Tunnels 配置，点击 Create a tunnel 创建一个 Tunnel，输入 Tunnel 隧道名称</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-10-01.png" alt="weekly-review-10-01"  />
</p>
<p>选择服务器的操作系统和平台架构：</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-10-02.webp" alt="weekly-review-10-02"  />
</p>
<p>可以看到安装命令：</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-10-03.png" alt="weekly-review-10-03"  />
</p>
<p>复制左边命令粘贴到 SSH 会话里安装 Cloudflared（注意保护 Refresh Token 不要泄漏）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install cloudflare/cloudflare/cloudflared <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo cloudflared service install eyJhIjoiMmUxOTgwYTBlZjQzZjU3YjkyMGVhMjhjZGY5ZDM4ZDEiLCJ0IjoiYzU1ZTU3MmUtMTEyMS00OWJkLTgzMTgtNjc3NDIyYWMwMjU0IiwicyI6Ik1qZGtZakkyTldFdE5XVTRNUzAwTXpWaExXRXlNRFl0T0RobE5EbGpObVZpWmpJMSJ9
</span></span></code></pre></div><h3 id="2删除-cloudflare-dns-的-a-记录解析">2、删除 Cloudflare DNS 的 A 记录解析</h3>
<p>我的域名托管在 Cloudflare 上，所以需要将原来的域名解析记录删除，主要涉及以下两个需要被国内用户访问的域名（其余域名是我个人使用，所以只需要我开启 VPN 访问即可。）：</p>
<ul>
<li>cusdis.chensoul.com</li>
<li>umami.chensoul.com</li>
</ul>
<h3 id="3在--cloudflare-tunnel-添加-hostname">3、在  Cloudflare Tunnel 添加 hostname</h3>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-10-04.png" alt="weekly-review-10-04"  />
</p>
<p>如果需要对 ssh 服务开启代理，请参考：<a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/use_cases/ssh/">Connect with SSH through Cloudflare Tunnel</a>。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-10-05.png" alt="weekly-review-10-05"  />
</p>
<p>关键步骤是：</p>
<ul>
<li>
<p>为 ssh 通道创建 Hostname</p>
</li>
<li>
<p>在本地安装 <a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation/"><code>cloudflared</code></a></p>
</li>
<li>
<p>配置 ~/.ssh/config，添加下面配置（注意：我使用 Homebrew 安装的 cloudflared）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Host ssh.chensoul.com
</span></span><span class="line"><span class="cl">ProxyCommand /opt/homebrew/bin/cloudflared access ssh --hostname %h
</span></span></code></pre></div></li>
<li>
<p>通过 ssh 访问 ssh.chensoul.com：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh root@ssh.chensoul.com
</span></span></code></pre></div></li>
</ul>
<h3 id="4在-vps-上启用防火墙停止-nginx-服务">4、在 vps 上启用防火墙，停止 nginx 服务</h3>
<p>将 vps 上 nginx 配置的反向代理删除，并可以禁用这些服务暴露的端口。</p>
<h3 id="5测试">5、测试</h3>
<p>经过测试，<del>又发现本地如果开启 VPN，Cloudflare Tunnel 代理的域名还是无法访问</del>，于是放弃了使用 Cloudflare Tunnel，改为将这些国内无法访问的服务部署到免费的 VPS 服务器上，比如：Railway、Vercel。</p>
<h2 id="vercel-部署-cusdisumami">Vercel 部署 Cusdis、umami</h2>
<p>参考 <a href="https://www.pseudoyu.com/zh/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案（Cusdis + Railway）</a> 在 Railway 上部署 cusdis，数据库还是可以使用 vps 上部署的 postgresql，只需要配置一个 jdbc 链接即可：</p>
<ul>
<li>postgresql://cusdis:xxxxxx@postgres.chensoul.com:5432/cusdis</li>
</ul>
<p>部署完之后，发现存在跨域问题，故全部改为使用 Vercel 来部署。</p>
<p>参考 <a href="https://cusdis.com/doc#/self-host/vercel">Cusdis 官方文档</a> 来部署 Cusdis，对于 Cusdis 存在跨域问题，参考 <a href="https://github.com/djyde/cusdis/issues/135">Sometimes form shows on page, sometimes not - CORS issue #135</a>，修改你的 github 的 cusdis 仓库中的 next.config.js 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">async</span> <span class="nx">headers</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">source</span><span class="o">:</span> <span class="s2">&#34;/:path*&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">headers</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span> <span class="nx">key</span><span class="o">:</span> <span class="s2">&#34;Access-Control-Allow-Origin&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s2">&#34;*&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span></code></pre></div><p>参考 <a href="https://umami.is/docs/running-on-vercel">Umami 官方文档</a> 来部署 Umami，umami 的 postgresql jdbc 链接还是使用 vps 上面部署的 postgresql</p>
<ul>
<li>postgresql://umami:xxxxxxpostgres.chensoul.com:5432/umami</li>
</ul>
<h2 id="chatgpt-写代码">Chatgpt 写代码</h2>
<p>在 <a href="https://poe.com/chatgpt">https://poe.com/chatgpt</a> 里面输入下面文字：</p>
<blockquote>
<p>请用 java 实现一个通知系统，给出完整的代码，需求如下：</p>
<p>1、通知事件，指业务平台触发的事件，通知事件有名称，描述，编码。通知事件可以定义多个属性。属性有名称、描述、编码，类型。类型有整形、字符串、日期、时间、浮点数、列表几种。</p>
<p>2、通知规则。通知规则有名称、生效时间（一直生效，或者指定时间段生效），通知事件（从创建好的事件选择一个）、描述。通知规则可以创建多个规则项。每个规则项要选择事件下面的某一个属性，并且可以对该事件属性选择一个操作符（大于、小于、等于、在两个指之间）和设置对应的值。如果是大于、小于、等于，则只用选择一个值。如果是在两个指之间，则需要选择两个值。多个执行条件在规则执行时，是按与执行。规则可以指定多个通知用户（姓名、手机号）。</p>
<p>3、通知策略。一个规则可以定义多个通知策略。通知策略有通知模版、通知渠道。每个通知模版有标题、描述以及模版内容（模板内容支持变量替换）。</p>
<p>4、通知渠道有类型、配置属性，可以发送消息，支持的通知渠道有飞书、邮件。</p>
<p>5、通知规则测试。给定一个事件码和事实数据，系统查询出该事件码关联的多个规则。每个规则通过 easy-rule 4.1.0 框架去执行。每个规则项执行前，需要校验事实数据里的值的类型和事件属性定义的类型是否一致。多个规则项的执行结果求交集。当最后结果为 true 时，将通知策略中的模板内容进行变量替换，然后通过渠道发送消息给这些人。</p>
<p>注意：相同的消息内容，在一分钟内，只通过一个渠道给某一个用户发送一次，不要重复发送。</p>
</blockquote>
<p>chatgpt 回答如下：</p>
<img src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-10-06.png" alt="weekly-review-10-06" style="width:67%;" />
<p><strong>总结：</strong></p>
<p>让 chatgpt 写代码相对来说，还是很方便的，可以提供一些编程示例或者开阔编程思路，但是也有一些缺陷：</p>
<ul>
<li>chatgpt 写的代码不一定准确，或者说没有考虑一些异常情况。需要不断地和 chatgpt 聊天，描述清楚需求，让 chatgpt 来修正代码，这样交互式聊天，相对来说会有点耗时。</li>
<li>提供的 url 链接可能 404。</li>
</ul>
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li>
<p><a href="https://www.infoq.cn/article/txS9hHTfxasv2uHBATgL">Java 近期新闻：Gradle 8.0、Maven、Payara 平台、Piranha、Spring Framework、MyFaces 和 Piranha</a></p>
</li>
<li>
<p><a href="https://blognas.hwb0307.com/ad">RackNerd VPS 推荐</a></p>
</li>
</ul>
<h3 id="一些工具">一些工具</h3>
<h4 id="zedhttpszeddev"><a href="https://zed.dev/">Zed</a></h4>
<p>Atom 作者新开发的编辑器 Zed 速度确实非常快，基本的功能也都支持，现在还在内测阶段，暂时不支持安装 extension。</p>
<h4 id="图片转-webphttpsdevelopersgooglecomspeedwebpdocscwebphlzh-cn"><a href="https://developers.google.com/speed/webp/docs/cwebp?hl=zh-cn">图片转 webp</a></h4>
<p>mac 上安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install webp
</span></span></code></pre></div><p>使用示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cwebp -q <span class="m">50</span> -lossless picture.png -o picture_lossless.webp
</span></span><span class="line"><span class="cl">cwebp -q <span class="m">70</span> picture_with_alpha.png -o picture_with_alpha.webp
</span></span><span class="line"><span class="cl">cwebp -sns <span class="m">70</span> -f <span class="m">50</span> -size <span class="m">60000</span> picture.png -o picture.webp
</span></span></code></pre></div><h3 id="一些影视">一些影视</h3>
<ul>
<li>
<p><a href="https://movie.douban.com/subject/6538807/">冰海陷落</a>，推荐指数：☆☆☆☆。疯狂的芭堤雅将军杜罗夫（米哈伊尔・戈尔沃伊 Mikhail Gorevoy 饰）预谋发动第三次世界大战，他制造了一场巨大的水域爆炸，致使附近的美军潜艇队遇袭。美国海军派出了海底经验丰富但名声寥寥的乔・格拉斯潜水艇船长（杰拉德・巴特勒 Gerard Butler 饰）率领潜艇队前去调查。</p>
</li>
<li>
<p><a href="https://movie.douban.com/subject/36193784/">黑暗荣耀第二季</a>，推荐指数：☆☆☆☆。</p>
</li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-9｜开车总结、博客该写什么、Web3批量空投</title>
      <link>https://blog.chensoul.com/posts/2023/03/07/weekly_review_9/</link>
      <pubDate>Tue, 07 Mar 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/03/07/weekly_review_9/</guid>
      <description>前言 本篇是对 2023-02-27 到 2023-03-05 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这周的主要工作是版本测试和项目上线，在大家的共同</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-07.png" alt="将军山"  />
</p>
<p>本篇是对 <code>2023-02-27</code> 到 <code>2023-03-05</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周的主要工作是版本测试和项目上线，在大家的共同努力下，最后是成功上线。</p>
<p>由于公司最近在裁员，留下来的都开始卷起来，每天晚上 8 点之后下班，这样平均一天的工作时间才有 11 小时。据说，旁边组的同事平均每天都是 12 个小时工作时间。裁了三位同事之后，我们软件组还有 8 人，算法组有 7 人，产品组有 6 人，终端组有 4 人。距集团公司六月上市还有两个月，裁员估计还会继续，同志们还需努力加班，争取被裁的不是自己。</p>
<p>这周还是没有开车，每天坐地铁上下班，刷刷 rss 看看 b 站视频，了解一些行业最新动态，同时也看看同样在写博客的那些独立开发者每周都在做什么，也学习一些新技术或者新技能。</p>
<p>这周接触了 web3 空投，花了几个小时使用自动加手动的方式刷了 120 多个账号。自动的方式，就是用 nodejs 代码在 bsc 网络批量创建账号并保存为 csv 文件；其次，通过 onekey web 上的批量转账功能，给每个账户转了 0.00125bnb。手动操作的部分就是，一个个的将账号私钥导入狐狸钱包，然后，用 lifeform cartoon 连接钱包账户，mint 成功之后，分享链接，再继续连接狐狸的下一个账号，重复上面操作。</p>
<p>因为太耗时间，所以只刷了 120 个账号。趁工作不忙的时候，用 chatgpt 搜索一下如何将上面的操作全部自动化。</p>
<p>周末两天，继续练车，从汉口到阳逻，再到新洲，最后去新洲的将军山爬山、去道观河看风景。算下来，最近这三个周末六天时间，我一共开了 800 多公里了。目前，暂时没有收到违规通知，但还是存在很多不足的地方。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-08.png" alt="weekly-review-09-08"  />
</p>
<h2 id="开车总结">开车总结</h2>
<p>这周开车，发现存在以下问题：</p>
<ul>
<li>1、停车还是会忘记熄火拔钥匙。</li>
<li>2、红绿灯口，停在大货车后面，并靠得近，前方视线受阻。经过红绿灯时，感觉像是闯了红灯。</li>
<li>3、超车时候，没有加速。</li>
<li>4、在山路行驶，入弯和出弯都会减速。</li>
<li>5、判断车距的经验不足。表现在行驶过程中、侧方停车、倒车入库。</li>
</ul>
<p>针对以上问题，晚上刷了一些视频，做了一些笔记，希望能够帮助自己改正上面这些问题。</p>
<ul>
<li>
<p>1、目光看远。入弯提前收油，脚备刹车。如果弯道过急，就带点刹车，如果车速你可以控制，直接收油过弯；出弯加油，眼睛看出弯口。身体跟随方向盘靠。这样，车速不降，可以控制车速。如果以 80 码速度过弯，且这个车还在车道内，这个车的速度你就控制住了。但凡有点越线，说明车速过快，你就要降低速度。</p>
</li>
<li>
<p>2、靠右行驶。会车时，主动靠右。转弯时，发现对面有来车，鸣笛示意。</p>
</li>
<li>
<p>3、路口远道的原则，跟小车不跟大车。如果跟着大车，留一个车位空间，让大车先走，确认绿灯再走。</p>
</li>
<li>
<p>4、红绿灯路口，提前减速，提醒后面车减速，不要急刹车，防止后面车追尾。特别是在绿灯闪的时候，不要没有减速，突然停车。否则后面车会以为你要加速冲过去，他也加速，这样，他就会追尾你。</p>
</li>
</ul>
<h2 id="博客该写什么">博客该写什么</h2>
<p>看到一篇博客 <a href="https://simonwillison.net/2022/Nov/6/what-to-blog-about/">What to blog about</a>，里面聊到了博客该写什么。一时兴起，想翻译成中文。于是，分别使用了 chrome 沉浸式翻译插件和 chatgpt 来翻译这篇文章，得到结果如下：</p>
<p>1、<strong>使用 <a href="https://chrome.google.com/webstore/detail/immersive-translate/bpoadfkcbjbfhfodiogcnhhhpibjhbnh">chrome 沉浸式翻译插件</a> 翻译这篇文章：</strong></p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-01.png" alt="weekly-review-01"  />
</p>
<p>总结来说，博客可以写两部分内容：</p>
<ul>
<li>今天学到的东西</li>
<li>正在做的项目</li>
</ul>
<p>2、<strong>使用 chatgpt 翻译这篇文章：</strong></p>
<p>请 chatgpt 翻译这篇文章 <a href="https://simonwillison.net/2022/Nov/6/what-to-blog-about/">https://simonwillison.net/2022/Nov/6/what-to-blog-about/</a> 为中文，得到的结果如下：</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-02.png" alt="weekly-review-02"  />
</p>
<p>标题：该写什么博客？</p>
<p>随着我写了一篇新的博客文章，我想分享一下我最近学到的关于写博客的一些事情。</p>
<p>一旦你开始写博客，你就必须保持一定的频率和持续的内容更新。这不仅是为了吸引和保持读者，也是为了让自己不断成长和发展。对于我来说，博客是我最有价值的自我表达形式之一，因为它迫使我去思考和组织我的想法，而这些想法可能会被淹没在日常生活的喧嚣中。</p>
<p>但是，选择博客内容可以很困难，特别是当你有多个感兴趣的话题和项目。以下是一些我最近学到的有关选择博客主题的技巧：</p>
<ul>
<li>每周至少写一篇文章</li>
</ul>
<p>尽管这可能听起来像一个艰巨的任务，但保持每周至少写一篇文章的频率可以帮助你保持写作的习惯和进展。这也有助于避免长时间的空白期，这可能会使你失去写作的动力和读者的兴趣。</p>
<ul>
<li>写下你的目标和想法清单</li>
</ul>
<p>在开始写博客之前，先写下你感兴趣的话题和你想写的内容。这可以帮助你保持焦点并避免浪费时间在想要的内容上。</p>
<ul>
<li>关注你的读者</li>
</ul>
<p>虽然你的博客可能是一个人的项目，但是考虑到你的读者的兴趣和需求是至关重要的。试着想一下你的读者会对哪些话题感兴趣，并尝试写出他们会发现有趣或有用的内容。</p>
<ul>
<li>保持开放和灵活</li>
</ul>
<p>不要把自己局限在一个主题或领域中。保持开放和灵活，尝试不同的话题和领域。这不仅可以让你发现新的兴趣和机会，还可以让你在写作方面更有创意和灵感。</p>
<ul>
<li>尝试不同的博客格式</li>
</ul>
<p>不仅可以通过写作来表达自己，还可以通过不同的博客格式来实现这一点。尝试写一篇教程、一篇演示、一篇评论或一篇问题解答文章。这可以让你更好地探索和展示你的技能和知识。</p>
<p>总之，写博客可以是一种令人满意的表达方式，可以帮助你探索和发现新的想法和机会。关键是要保持频率和灵活性，并尝试不同的博客格式。</p>
<h2 id="web3-批量空投">Web3 批量空投</h2>
<p>最近，参与了 <a href="https://cartoon.lifeform.cc/login">Lifeform Cartoon</a> 的空投，这是我第一次参与 web3。下面是记录一下操作步骤：</p>
<ul>
<li>下载狐狸钱包</li>
<li>批量创建账号</li>
<li>批量从一个账号转币到多个账号</li>
<li>批量导入账号到狐狸钱包</li>
<li>访问 Lifeform Cartoon 的邀请链接地址，比如：https://cartoon.lifeform.cc?referral=0x068b021B7d44e4795c6ec07234D66c144644dC37，然后，连接狐狸钱包里的账号，mint 之后，分享链接再使用新的链接重复上面动作</li>
</ul>
<p>上面的步骤，如果是几百个账号手动执行，则需要花费很长时间。作为一个程序员，有没有办法让程序自动实现呢？</p>
<p>在网上查找了一些资料，同时使用 chatgpt（备注：https://poe.com/chatgpt）找到了使用  nodejs 实现的相关代码。</p>
<h3 id="1批量创建账号">1、批量创建账号</h3>
<p>在BSC网络上使用Node.js编程语言批量创建账户并保存为CSV文件的完整代码，不使用csv-writer库</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-03.png" alt="weekly-review-03"  />
</p>
<h3 id="2批量转账">2、批量转账</h3>
<p>在BSC网络上使用Node.js编程语言从一个账号批量转 0.0125bnb 到前面创建的多个账号，输出完整的可以运行的代码</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-05.png" alt="weekly-review-05"  />
</p>
<h3 id="3批量导入账号到-metamask-钱包">3、批量导入账号到 metamask 钱包</h3>
<p>通过编程实现在 BSC 网络 批量导入账号到浏览器的 metamask 钱包</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-04.png" alt="weekly-review-04"  />
</p>
<p>下一步，就是测试上面代码，实现全流程代码托管。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-06.png" alt="weekly-review-09-06"  />
</p>
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li><a href="https://feeds.feedblitz.com/~/729974291/0/baeldung~Service-Profiles-in-Docker">Service Profiles in Docker | Baeldung</a></li>
<li><a href="https://geekr.dev/posts/chatgpt-ultimate-guide">ChatGPT 终极指南</a></li>
<li><a href="https://reorx.com/makers-daily/004-prompts-and-parameters-transparancy/">谈谈我对 ChatGPT 应用的 prompt 的看法</a></li>
<li><a href="https://anotherdayu.com/2023/4866/">支持 OpenAI ChatGPT API 的优秀软件</a></li>
<li><a href="https://geekr.dev/posts/chatgpt-start">编程新手如何通过ChatGPT一天完成一个MVP产品</a></li>
<li><a href="https://github.com/Zhengqbbb/cz-git">让 OpenAI 生成 git commit message</a></li>
<li><a href="https://insights.thoughtworks.cn/good-code-five-qualities-cupid/">好代码的五个特质 - Thoughtworks洞见</a></li>
<li><a href="https://www.joshwcomeau.com/blog/how-i-built-my-blog/">我如何搭建自己的博客</a>（英文）</li>
<li><a href="https://zedex.cn/8399.html">从Mac开箱开始 设置一个开发环境 - ZedeX</a></li>
<li><a href="https://mp.weixin.qq.com/s/eil_zYS4ISK-4ojezzP-pg">创始人CEO为什么要写作（原创5000字长文尝试说透）</a></li>
<li><a href="https://mp.weixin.qq.com/s/xfphy67PTbtjeggo7LpjSA">从抄书到开源之巅：章亦春的程序人生</a></li>
</ul>
<h3 id="一些工具">一些工具</h3>
<h4 id="1poecomhttpspoecom">1、<a href="https://poe.com/"><strong>poe.com</strong></a></h4>
<p>美国问答网站Quora开发的ChatBot产品，整合不同聊天机器，包括ChatGPT。响应速度非常快，比chat.openai.com的免费账户快非常多。有ios版，手机也能用了。ios版有社区，可以分享聊天记录。</p>
<h4 id="2founderbeatshttpsfounderbeatscom">2、<a href="https://founderbeats.com/"><strong>FounderBeats</strong></a></h4>
<p>Founder Beats是一家面向初创企业和创业者的音乐制作工作室，专门为他们提供高质量的背景音乐和音效。Founder Beats的音乐库包含了各种类型的音乐，如流行、摇滚、电子、嘻哈、民谣等，以及各种音效和配乐，可以满足不同用户的需求。Founder Beats的音乐都是由专业音乐人和制作人制作的，具有高品质和原创性。</p>
<p>除了音乐制作，Founder Beats还提供了其他服务，如音频制作、混音和母带处理等，可以帮助客户制作高质量的音频内容。Founder Beats的团队拥有丰富的音乐制作和音频处理经验，可以为客户提供专业的建议和支持。</p>
<p>Founder Beats的客户包括初创企业、广告代理商、视频制作公司、游戏开发商等，他们可以使用Founder Beats的音乐和音效来增强他们的品牌形象、视频内容、游戏体验等。Founder Beats的定价模式灵活，客户可以根据自己的需求选择适合自己的价格和许可证。</p>
<h4 id="3manticore-searchhttpsgithubcommanticoresoftwaremanticoresearch">3、<a href="https://github.com/manticoresoftware/manticoresearch">Manticore Search</a></h4>
<p>Manticore Search是一款开源的全文搜索引擎，支持高性能的搜索和分析。它是Sphinx Search的后继者，使用了类似的架构和API，并且在功能和性能方面有很多改进。Manticore Search使用C++编写，具有高效的索引和查询引擎，可以处理大量的数据和高并发访问。它支持多种数据源和数据格式，包括MySQL、PostgreSQL、XML、JSON、CSV等。</p>
<p>Manticore Search提供了丰富的查询语言和API，包括SQL、SPHINQL和HTTP API等，可以满足不同用户的需求。它支持全文搜索、模糊搜索、短语搜索、近义词搜索、地理位置搜索等多种搜索方式，并且支持高级过滤、排序、分组、聚合等功能。Manticore Search还具有高可用性和可扩展性，支持主从复制、分片、集群等部署方式，可以满足不同规模和负载的应用场景。</p>
<p>Manticore Search是一款使用广泛的全文搜索引擎，它被广泛应用于电子商务、社交网络、新闻媒体、在线教育等领域，帮助用户快速检索和发现所需信息。Manticore Search在GitHub上开源，拥有活跃的社区和开发者，用户可以通过GitHub社区获得支持和贡献代码。</p>
<h4 id="4unsilencehttpsgithubcomlagmoellertimunsilence">4、<a href="https://github.com/lagmoellertim/unsilence">Unsilence</a></h4>
<p>unsilence是一个基于Python的命令行工具，用于检测和修复音频文件中的静音区域。它可以帮助用户自动检测和删除音频文件中的静音部分，从而提高音频的质量和可听性。unsilence支持多种音频格式，如MP3、WAV、OGG等，可以在不损失音频质量的情况下删除静音。</p>
<p>使用unsilence非常简单，用户只需在命令行中输入unsilence命令和音频文件名，unsilence就会自动检测和修复音频文件中的静音部分。用户也可以通过设置参数来调整unsilence的处理方式，如设置最小静音长度、最小音量阈值等。</p>
<h4 id="5css-bedhttpswwwcssbedcom">5、<a href="https://www.cssbed.com/">CSS Bed</a></h4>
<p>这个网页收集并展示各种无类的极简化 CSS 框架。如果你想选一个简单的 CSS 框架，可以看看它</p>
<h4 id="6lightrunhttpslightruncom">6、<a href="https://lightrun.com/">lightrun</a></h4>
<p>lightrun.com是一款基于云的实时Java和Kotlin应用程序调试和观察工具。它提供了一种无需修改代码即可实时调试Java和Kotlin应用程序的方式，减少了开发人员的调试时间，提高了应用程序的稳定性和可靠性。lightrun.com还提供了实时日志查看和分析，可以帮助开发人员快速定位问题和解决问题，提高了应用程序的可维护性。</p>
<p>lightrun.com可以与常见的Java开发工具集成，如Eclipse、IntelliJ IDEA和VS Code。它还支持多种操作系统和云平台，如Windows、Linux、Docker、AWS和Azure等。开发人员可以使用lightrun.com来调试和监视本地应用程序，也可以在云端快速诊断生产环境中的问题。</p>
<p>lightrun.com采用了安全的云架构，并且使用了端到端加密来保护用户数据的安全性。它还提供了灵活的计费模式，用户可以根据自己的需求选择适合自己的计费方式。</p>
<h4 id="7httpsgithubcomappscr-gpt">7、https://github.com/apps/cr-gpt</h4>
<p>基于 ChatGPT 的 Github Code Review 机器人</p>
<h4 id="8妙记多-mojidoc-httpsmojidoccom">8、<a href="https://mojidoc.com/">妙记多 Mojidoc </a></h4>
<p>新一代生产协同工具</p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-8｜内存泄漏、公司裁员、练车</title>
      <link>https://blog.chensoul.com/posts/2023/02/27/weekly_review_8/</link>
      <pubDate>Mon, 27 Feb 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/02/27/weekly_review_8/</guid>
      <description>前言 本篇是对 2023-02-20 到 2023-02-26 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这篇周报又是在地铁上完成编写的。回顾这一周的工作</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-02-20</code> 到 <code>2023-02-26</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这篇周报又是在地铁上完成编写的。回顾这一周的工作，还是项目测试、修复 bug 和准备上线发布。平静的工作节奏因为突如其来的裁员消息而变得内卷起来，大家下班的时间都纷纷往后移到了20 点左右。周末的时候，还是练车，从汉口开车到新洲。刚开始有点不敢，后来还是鼓起勇气，平安的到达。</p>
<h2 id="工作">工作</h2>
<h3 id="内存泄漏">内存泄漏</h3>
<p>这周线上环境，出现了告警，提示 jvm 出现了 full gc。于是赶紧 dump 内存进行分析查找原因。顺便整理了内存相关的知识。</p>
<p><strong>什么是内存泄漏？</strong></p>
<p>这个问题直接问 chatgpt：</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-08-01.png" alt="weekly-review-08-01"  />
</p>
<p>内存泄漏（Memory Leak）是指在程序中动态分配的内存由于某些原因程序未能释放或无法释放，导致系统内存的实际可用空间不断减少的现象。内存泄漏的发生会导致程序占用的内存越来越多，最终导致程序崩溃或系统变慢。</p>
<p>在Java中，程序员通常使用new运算符在堆上分配内存，这些内存不再使用时必须释放，否则就会出现内存泄漏。下面是一些常见的Java内存泄漏的情况：</p>
<ol>
<li>对象持有过多的引用</li>
</ol>
<p>当一个对象持有其他对象的引用时，这些对象就不能被垃圾收集器回收，导致内存泄漏。比如，一个静态集合（如Map、List）持有了大量对象的引用，但是这些对象已经不再需要了，却因为集合中仍然持有这些对象的引用，导致这些对象无法被回收，造成内存泄漏。</p>
<ol start="2">
<li>长时间持有对象锁</li>
</ol>
<p>在Java中，如果一个线程获取了一个对象的锁，但是在释放锁之前发生了异常，那么这个锁就不会被释放，从而导致内存泄漏。这种情况特别容易发生在synchronized块中。</p>
<ol start="3">
<li>不正确的缓存使用</li>
</ol>
<p>如果程序员不正确地使用缓存，就会导致内存泄漏。比如，如果使用一个静态Map来缓存对象，但是不从Map中删除对象，那么这些对象就会一直存在于内存中，造成内存泄漏。</p>
<ol start="4">
<li>大量创建临时对象</li>
</ol>
<p>如果程序频繁地创建临时对象，而这些对象又没有被及时清除，就会导致内存泄漏。比如，在循环中创建大量的字符串对象，但是没有及时清除，就会导致内存泄漏。</p>
<p>为了避免内存泄漏，Java程序员可以使用一些技术来优化程序，比如使用缓存池、避免使用不必要的静态变量、使用finalize()方法释放资源等等。</p>
<p><strong>如何排查内存泄漏？</strong></p>
<ul>
<li>
<p>内存分析工具：内存分析工具可以帮助您找到哪些对象占用了大量的内存。一些常用的内存分析工具包括：Eclipse MAT、VisualVM 和 YourKit。这些工具可以帮助您分析内存快照、查找内存泄漏并确定导致内存泄漏的代码位置。</p>
</li>
<li>
<p>堆转储文件：堆转储文件是一个包含了 JVM 堆中所有对象的快照。您可以使用以下命令生成一个堆转储文件：jmap -dump:format=b,file=heap.bin <PID>，其中<PID>是您的 Java 应用程序的进程 ID。然后，您可以使用内存分析工具来分析该文件。</p>
</li>
<li>
<p>代码审查：在编写代码时，您可以使用一些技巧来避免内存泄漏。例如，您应该确保正确地关闭流和数据库连接，避免在循环中创建对象，以及使用软引用或弱引用来存储缓存数据等。通过仔细审查代码并识别可能导致内存泄漏的部分，可以避免这些问题在运行时发生。</p>
</li>
<li>
<p>监视工具：JVM 提供了一些监视工具，例如 jstat 和 jconsole，可以用于监视 JVM 的内存使用情况。通过监视这些指标，您可以识别是否存在内存泄漏的迹象。</p>
</li>
<li>
<p>代码注入：在您的应用程序中，您可以注入一些代码，例如使用 JMX、AOP 等，以便您可以实时监视内存使用情况，并记录任何内存泄漏迹象。</p>
</li>
</ul>
<p>参考文章</p>
<ul>
<li>
<p><a href="https://www.cnblogs.com/rude3knife/p/13570423.html">一次完整的JVM堆外内存泄漏故障排查记录</a></p>
</li>
<li>
<p><a href="https://droidyue.com/blog/2015/11/28/article-java-8-lambdas-a-peek-under-the-hood">深入探索Java 8 Lambda表达式</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/weixin_34722015/article/details/114815917">java lambda表达式内存泄露_浅谈Java内存泄露</a></p>
</li>
</ul>
<h3 id="裁员">裁员</h3>
<p>去年公司就在裁员，陆陆续续裁了几次，每次都是裁两三个，动作都不大，但是很高效。因为部门人数就在五十左右，所以谁没来上班，都能很快察觉。</p>
<p>公司要在六月份上市，上市之前要使财报好看，就要开源节流、降本增效。节约成本的一个方式就是裁员，据说这次裁员动作比以前都大都迅速，今天提出裁员人数，明天就要给出名单，月底就要走人。</p>
<p>现在还只是二月份，离六月还有三个月。谁也不知道，后面还会有什么更大的裁员动作。说不定哪天就空出一个工位，说不定哪天领导就换了人，说不定哪天部门就被拆散了。</p>
<p>互联网公司最大的变化就是变化。之前在阿里工作，公司的价值观里有一条就是拥抱变化。</p>
<p>拥抱变化的最好方式就是积极面对，主动加班，提高工作效率，增加工作产出。</p>
<h2 id="生活">生活</h2>
<h3 id="练车">练车</h3>
<p>这是买车之后的第二周，还是没有开车去上班。一是因为开车不过熟练，胆子小，不敢开得太快；二是公司楼下的停车位还没有办好。</p>
<p>周六本想叫朋友过来给我当陪练，后来因为要回新洲，就算了，还是自己开车，带着老婆回新洲。</p>
<p>老婆科目一考过了，后面因为工作原因就没去练车和考试。她坐副驾驶，一边剥豆子一边提醒我注意交通规则。</p>
<p>在老婆的坐镇之下，顺利的从汉口开车六十公里到达新洲，路上没有违反交通规则。</p>
<p>周六下午去看了一下潘塘花朝节，有点失望，没有想象中的热闹。可能因为这不是正宗的花朝节，正宗的应该是在旧街。</p>
<p>逛了一圈，买了两百菜刀、一个砧板、两颗果树、一盆墨兰花。</p>
<p>周六从新洲开回阳逻，周日又从阳逻开回老家去看父亲。买车后第一次回家，放了鞭炮🧨。</p>
<p>中午包饺子，吃完饭就去菜园收割青菜。农村对于城市里上班族来说，一大好处是，每次回家，都可以装满青菜带回城市。</p>
<p>下午，从老家驱车回阳逻再到汉口。在开车的过程中，发现和总结了一些问题。</p>
<p>之前开车，总是盯着仪表盘，看车速达到了多少。车速一到 70 多就下意识地松油门和踩刹车。现在开始把眼睛注意力放到前方，不去可以在意车速，只是当导航提示我超速的时候，我白降低一点速度。</p>
<p>在红绿灯之前，如果不转弯，不要提前换道或者超车，保持中间道路行驶即可。</p>
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li>
<p><a href="https://blog.baoshuo.ren/post/actions-ssl-cert/">使用 GitHub Actions 自动申请与部署 SSL 证书</a></p>
</li>
<li>
<p><a href="https://phind.com/">The AI search engine for developers</a></p>
</li>
<li>
<p><a href="https://magickpen.com/">用 AI 写文章</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/weixin_34722015/article/details/114815917">java lambda表达式内存泄露_浅谈Java内存泄露</a></p>
</li>
<li>
<p><a href="https://kenengba.com/post/3769.html">在家躺着拿工资，是挺过意不去的</a></p>
</li>
<li>
<p><a href="https://blog.mikeoperfect.com/posts/11517/">车辆违章和交通事故处理流程</a></p>
</li>
<li>
<p><a href="https://blog.alswl.com/2020/03/before-code-review/">浅谈 Code Review 之事前准备</a></p>
</li>
</ul>
<h3 id="一些工具">一些工具</h3>
<h4 id="1raycasthttpswwwraycastcom">1、<a href="https://www.raycast.com/">Raycast</a></h4>
<p>Raycast是一款想要取代 Spotlight 的快捷启动器，通过 Mac 上面的一些组合键来为让你完成在 Mac 上面的快捷启动，提高你日常当中在 Mac 上面的操作效率，如果以 macOS 系统版本风格来比喻的话，Alfred 的 UI 风格应该能匹配几年前的 macOS 吧，而 Raycast 却是能够驾驭 macOS Big Sur 全新的视觉风格。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-08-02.png" alt="weekly-review-08-02"  />
</p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-7｜练车、博客优化、注册ChatGPT账号</title>
      <link>https://blog.chensoul.com/posts/2023/02/21/weekly_review_7/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/02/21/weekly_review_7/</guid>
      <description>前言 本篇是对 2023-02-13 到 2023-02-19 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 练车 这周末开始练车，周六是第一次开自己的车，简单</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-02-13</code> 到 <code>2023-02-19</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<h2 id="练车">练车</h2>
<p>这周末开始练车，周六是第一次开自己的车，简单试驾了一样；周日则开了一百多公里，具体行程是从阳逻到新洲，从新洲单汉口，从汉口到光谷，从光谷回汉口。</p>
<p>这途中走了江北快速公路、二环、二七长江大桥、东湖隧道，从白天开到晚上夜行，经历过堵车，路上看到车祸后的事故现场。</p>
<p>一天下来，总共开车有五个多小时，感觉开车好累。作为新手，开车的过程中要全神贯注，铭记开车最重要的是慢这一原则，速度不敢过快。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-07-06.webp" alt="weekly-review-06"  />
</p>
<p>回顾这一天的练车过程，发现自己存在以下问题：</p>
<ul>
<li>
<p>对汽车不熟悉，不清楚车内每个按钮有什么作用。</p>
</li>
<li>
<p>不敢开的太快，油门踩到六十公里之后，就下意识地松油门。整个行驶过程中，平均车速大概在二十多公里每小时。</p>
</li>
<li>
<p>对交规不熟悉，第一次用高德地图，不知道什么时候改该变道、什么时候该走中间道路。要变道时候，不够果敢，打了灯光之后，没有快速变道，甚至还降速，等后面车子，而后面车子也在等我。</p>
</li>
<li>
<p>对车距不敏感。行驶过程中，和左右车辆相隔距离多近，没有一个直观的感受。观察后视镜，后面车距多远，有时候也判断不准，导致自己变道犹豫不决，险些擦碰。</p>
</li>
<li>
<p>变道、转弯，有时候忘记打灯。转弯时候，方向盘动得太早，没有等车过斑马线再打方向盘。左转弯时候，没有转大弯，导致车子有一次擦到了左边的石墩子，幸好不是很严重。</p>
</li>
<li>
<p>倒车和侧方停车不够熟练。</p>
</li>
<li>
<p>对上班路线不熟悉，不知道怎么进入公司楼下停车场。</p>
</li>
</ul>
<p>基于以上表现，接下来一周还是坐地铁上班。目前来说还是更喜欢坐地铁上班，可以看视频听音频，可以查看 RSS   订阅文章，可以写周报，可以闭目养神。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-07-07.png" alt="weekly-review-07"  />
</p>
<p>老婆给我买的实习期贴牌到了，后面司机看到这么可爱的牌子，估计以为是个妹子在开车吧，应该会喇叭下留情了吧😄。</p>
<p>接下来的周末，还要继续练车，和车子培养感情，从内到外熟悉车子，熟悉上班路线和交通规则，提高行驶速度。加油💪🏻！</p>
<h2 id="博客优化">博客优化</h2>
<p>这周重新对博客进行了优化，主要包括以下几个方面：</p>
<h3 id="1优化页面加载速度">1、优化页面加载速度</h3>
<p>每次打开博客首页，感觉页面加载有点慢，故想加快博客打开速度，第一个想到的是减少博客加载资源的次数，也就是去掉一些飞必须的 css 和 javascript 引用；其次，是对 css 进行压缩。</p>
<ul>
<li>去掉对 font-awesome css 的引用。这个对博客来说可有可无，所以直接去掉。</li>
<li>去掉对 jquery、bootstrap js 的引用。同样也不是必须的，自定义的 javascript 直接使用原生的操作就行。</li>
<li>移除未使用的 css。想参考这篇文章 <a href="https://dujun.io/cleancss-remove-unused-css.html">CleanCSS - 移除未使用的 CSS 代码</a>，对 css 进行瘦身，无奈文章中的服务器出现故障，无法访问服务。故，暂时搁浅。</li>
</ul>
<h3 id="2修改网站字体">2、修改网站字体</h3>
<p>参考这篇文章 <a href="https://www.albertaz.com/blog/web-font-best-practice">字体漫谈-网站字体最佳实践</a> 引入 open-sans 字体：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;preload&#34;</span> <span class="na">as</span><span class="o">=</span><span class="s">&#34;font&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;font/woff2&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/css/font/open-sans.css&#34;</span> <span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span>  <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/css&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/css/font/open-sans.css&#34;</span>  <span class="na">media</span><span class="o">=</span><span class="s">&#34;print&#34;</span> <span class="na">onload</span><span class="o">=</span><span class="s">&#34;this.media=&#39;all&#39;&#34;</span> <span class="p">/&gt;</span>
</span></span></code></pre></div><p>并修改网站 font-family 如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">body</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">font-family</span><span class="p">:</span> <span class="n">Open</span> <span class="n">Sans</span><span class="p">,</span><span class="n">system-ui</span><span class="p">,</span><span class="o">-</span><span class="n">apple-system</span><span class="p">,</span><span class="n">Arial</span><span class="p">,</span><span class="kc">sans-serif</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">word-break</span><span class="p">:</span> <span class="kc">break-word</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="3修改关于页面内容">3、修改关于页面内容</h3>
<p>参考这篇文章 <a href="https://rahuldkjain.github.io/gh-profile-readme-generator/">GitHub Profile README Generator</a>，对 GitHub <a href="https://github.com/chensoul/chensoul">首页</a> 进行改造，并通过 GitHub Action 同步到博客的 <a href="https://blog.chensoul.com/about/">关于</a> 页面。</p>
<h3 id="4dns-解析迁移到-cloudflare">4、dns 解析迁移到 cloudflare</h3>
<p>将 dns 解析从 AWS 迁移到 cloudflare，并开启 CDN 缓存。</p>
<h3 id="5博客测速">5、博客测速</h3>
<p>以上优化完成之后，在 <a href="https://pagespeed.web.dev/">PageSpeed Insights</a> 网站上对博客首页加载速度进行了测速。移动端测试结果为 93 分，如下图：</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-07-01.png" alt="weekly-review-07-01"  />
</p>
<p>影响评分的原因在于：</p>
<ul>
<li>First Contentful Paint (3G)</li>
<li>加载的 <a href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">bootstrap.min.css</a> 文件过大，包括了一些未使用的 CSS</li>
</ul>
<p>桌面端测试结果评分为 99 分：</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-07-02.png" alt="weekly-review-07-02"  />
</p>
<p>另外，试了一下使用 chatgpt 来给出网站优化建议，回答如下：</p>
<h2 id="n8n-调整">n8n 调整</h2>
<p>新增了 3 个 workflow：</p>
<ul>
<li>
<p>定时获取 <a href="https://www.bitstamp.net/api/v2/ticker/btcusd">BTC 价格</a>，并发送到 <a href="https://t.me/chensoul_share">我的电报群组</a></p>
</li>
<li>
<p>定时获取 spotify 喜欢列表，并发送到电报和 memos</p>
</li>
<li>
<p>每天早上 7 点，发送天气预报给微信</p>
</li>
</ul>
<p>修改了以下 workflow：</p>
<ul>
<li>将豆瓣最近动态同步到电报群组以及 <a href="https://memos.chensoul.com/">memos</a></li>
<li>将 GitHub 最近动态同步到电报群组以及  <a href="https://memos.chensoul.com/">memos</a></li>
<li>将 <a href="https://blog.chensoul.com/index.xml">博客 RSS</a> 同步到电报群组以及  <a href="https://memos.chensoul.com/">memos</a></li>
</ul>
<p>此外，在苹果手机上添加了两个捷径：</p>
<ul>
<li><a href="https://sharecuts.cn/shortcut/12640">捷径一</a>：调用 memos API 创建 memos</li>
<li><a href="https://www.icloud.com/shortcuts/d990253f43e148469af5e85c296961cf">捷径二</a>：对网站通过 RSSBud 获取 RSS 订阅地址并发送到电报的 flowerrss 机器人进行订阅</li>
</ul>
<h2 id="chatgpt-注册账号">ChatGPT 注册账号</h2>
<p>参考 <a href="https://sms-activate.org/cn/info/ChatGPT">注册ChatGPT详细指南</a> 注册账号，我在 sms-activate 网站是购买的巴西的手机号来接验证码。</p>
<p>解决地区受限问题：在浏览器地址栏里输入 <code>javascript:</code>，然后粘贴下面代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nb">window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="nx">i</span><span class="p">=&gt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">&#39;@@auth0spajs&#39;</span><span class="p">)))</span>
</span></span></code></pre></div><blockquote>
<p>如果还是无效，则清理浏览器 cookie 和 session，再刷新页面。</p>
</blockquote>
<p>账号创建成功之后，创建了几个 chat：</p>
<ul>
<li>『文案小助手』：在今后的会话里，你都将扮演我的文案纠错润色助理，并综合给出优化后的版本。</li>
<li>『专业后端开发老师』：在今后的对话里，你是一个专业的后端语言开发者老师，会回答我所有关于后端开发相关的问题，尤其是 Java、Pyhon、Go 语言，同时也包括 Shell 脚本、Makefile、Docker、K8S 等运维部署相关的疑问，每次都会给出代码示例，不需要我再额外提醒。</li>
<li>『专业前端开发老师』：在今后的对话里，你是一个专业的前端开发者老师，会回答我所有关于前端语言开发相关的问题，尤其是 TypeScript、React、Vuejs、CSS、Html 和 Nextjs，每次都会给出代码示例，不需要我再额外提醒。</li>
<li>『个人搜索引擎』：在今后的会话里，请你扮演我的专业搜索引擎，为我搜索查阅相关问题的答案和信息，每个问题尽量给出链接和出处，不需要我额外再说明。</li>
</ul>
<p>点击 <a href="https://platform.openai.com/account/api-keys">链接</a>，可以创建应用。给飞书用户准备的 ChatGPT 机器人，参看 <a href="https://github.com/bestony/ChatGPT-Feishu">ChatGPT-Feishu</a>。</p>
<h1 id="-好物分享">💻 好物分享</h1>
<h3 id="一些文章">一些文章</h3>
<ul>
<li>
<p>技术类：</p>
<ul>
<li>
<p><a href="https://writings.stephenwolfram.com/2019/02/seeking-the-productive-life-some-details-of-my-personal-infrastructure/">我的个人 IT 基础设施（英文）</a></p>
</li>
<li>
<p><a href="https://arun.is/blog/desk-setup/">打造我的家庭办公环境（英文）</a></p>
</li>
<li>
<p><a href="https://www.ruanyifeng.com/blog/2022/01/weekly-issue-191.html">科技爱好者周刊（第 191 期）：一个程序员的财务独立之路</a></p>
</li>
<li>
<p><a href="https://www.zlovezl.cn/articles/programming-is-still-hard-after-14-years/">入行 14 年，我还是觉得编程很难</a></p>
</li>
<li>
<p><a href="https://www.piglei.com/articles/how-to-design-config-file-for-software/">设计服务端软件配置的 4 条建议</a></p>
</li>
</ul>
</li>
<li>
<p>非技术类：</p>
<ul>
<li>
<p><a href="https://tingtalk.me/health/">除了健康，都是小事</a></p>
</li>
<li>
<p><a href="https://tingtalk.me/driving-test/">驾考指南</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="一些工具">一些工具</h3>
<h4 id="1亲戚关系计算器httpspasser-bycomrelationshipvue">1、<a href="https://passer-by.com/relationship/vue/#/">亲戚关系计算器</a></h4>
<h4 id="2imageoptimhttpsimageoptimcommac">2、<a href="https://imageoptim.com/mac">ImageOptim</a></h4>
<p>开源图片压缩软件：一款 Mac 小工具，可以方便的进行图片压缩，支持多格式、批量处理。值得注意的是，它压缩之后的图片会覆盖之前的图片。使用了这个工具之后，我就把  TinyPNG4Mac 卸载了。</p>
<h4 id="3沉浸式双语网页翻译扩展--immersive-translatehttpsimmersive-translateowenyoungcom">3、<a href="https://immersive-translate.owenyoung.com/">沉浸式双语网页翻译扩展 – immersive-translate</a></h4>
<p>强烈推荐这个网页翻译插件，和其他插件翻译整个页面相比，这个插件的优势是可以同时显示双语，中英文对照非常棒，是一个 <a href="https://github.com/immersive-translate/immersive-translate">开源</a> 的项目，完全免费使用。也支持 PDF，配合任何 <a href="https://epub-reader.online/">epub 在线阅读网站</a>对照翻译阅读书也非常方便。也支持了Deepl，腾讯翻译等等的翻译服务。开发者 <a href="https://twitter.com/OwenYoungZh">@OwenYoungZh</a></p>
<h4 id="4input-source-prohttpsinputsourceprozh-cn">4、<a href="https://inputsource.pro/zh-CN">Input Source Pro</a></h4>
<p>Input Source Pro 可以根据应用或是网站自动切换输入法，并且在切换窗口的时候还会贴心的提示当前的输入法是什么，比如设置 VSCode、iTerm、Xcode 默认为英文输入法，而笔记软件和企业微信默认为中文输入法，切换软件时再也不需要按 shift 键了！</p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-6｜买车和选号、粉色理论</title>
      <link>https://blog.chensoul.com/posts/2023/02/13/weekly_review_6/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/02/13/weekly_review_6/</guid>
      <description>前言 本篇是对 2023-02-06 到 2023-02-12 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这篇周报又是在坐地铁的时候完成编写的，一边坐地铁</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-02-06</code> 到 <code>2023-02-12</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这篇周报又是在坐地铁的时候完成编写的，一边坐地铁，一边回顾上一周发生的事情，一边复盘和总结。坐地铁大概有一个半小时，从家到公司的一段通勤路程。现在还没有买车，所以都是坐地铁上下班。</p>
<p>说到车，周六去二手市场买了一辆 17 年出产的上汽宝来，今天周一去过了户并且选了一个幸运的车牌号，尾号是 8688，寓意着要发发发！</p>
<p>上个月报名的内观训练营，这周也结业了，训练营运营人员还给我发了一个结业证书。</p>
<p>这是写周报的第六周，观察了一下博客访问量，从开始统计起到这周不到一个月的时间，访问量突破了 1000。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/blog-pv-1000.png" alt="blog-pv-1000"  />
</p>
<h2 id="工作">工作</h2>
<p>这周的工作主要内容是在项目里实现用户可以切换租户和租户数据拆分。</p>
<p>第一个功能的需求是一个账号（有姓名、手机号、密码等属性）可以访问多个租户，在每个租户里有自己的数据权限和角色。第二个功能，主要是使用 SQL 进行数据加工。</p>
<p>总体上来说，这周工作处于充实忙碌的情况。而且，上下班的通勤时间，也在 B 站上看视频。这周主要看的是小马哥的 Java 训练营的公开视频。小马哥的 B 站视频，是我最近刷的比较多的一个视频，另外一个是 coder1v5 的视频，他们分享的视频都是关于 Java 的，里面有非常多的干货，而且还提供了源代码。如果你也是一名 Java 开发工程师，推荐你也关注他们。</p>
<h2 id="生活">生活</h2>
<h3 id="买车和选号">买车和选号</h3>
<p>去年 11 月 16 日，拿到了驾照，直到现在才买了一辆车。过年前，因为疫情加上工作忙，一直没有抽出时间去了解车子行情。可能是对于车子的需求感没有那么强的原因，才导致考驾照、买车不积极。结婚之前，住在公司旁边，走路五分钟上下班，根本就用不上车。结婚之后，从光谷搬到汉口，每天上下班在路上通勤时间都有三个小时了。每天早上七点就要起来做饭（带饭到公司，中午微波炉热着吃，每天可以省下一餐伙食费），然后去赶地铁。疫情放开之前，地铁上人不多，每次都有位置坐。疫情放开之后，地铁里都是人，不是每次都有位置坐，经常要站着。站着的时候，有时候就内观冥想，想想最近有没有做得不对的地方，想想工作下一步该怎么计划；有时候就看 B 站关于 Java 的视频。也算是充分利用了这段通勤时间。</p>
<p>为了上下班通勤更方便，才计划买车的，也不知道开车能够缩短多少通勤时间，也希望这节约下来的时间，可以用在读书和健身上。另外一方面，买车了之后，回家看望父母会更方便。这就是买车的原因。</p>
<img src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/my-first-car.jpeg" style="width:60%"/>
<p>考虑到刚拿驾照、以后还要买房，这次就只买了一个二手车。原计划只买个三万左右的车，最后还是超出了预算。</p>
<p>去二手市场买车的时候，是在周六，周末过不了户，所以这周一又过来办理过户和选车牌号。过户的过程还是很快的，全部交给二手市场的人代办。至于，选车牌号，之前了解了一下，车牌号尽量选尾号都是数字的，这样好记；不要带数字 4，不吉利；选号有时间限制，超过了时间未选，会默认选第一个。点击 “选号开始” 按钮之前，心里还有点紧张。当看到第一屏的号码时候，很快地扫描了一遍，发现了一个尾号为 8688 的号码。于是，就跟一同过来买车的姐夫说，这个号码怎么样。姐夫激动地说这个号码好，就选这个。真的没有想到今天运气这么好，选到了这么好的一个号码。激动得想跟朋友圈里的好友分享。之前买车的时候，付完预付款，就有分享买车的喜悦的冲动。这时候，老婆在旁边跟我说，要低调，不要和身边的亲戚说。所以，就一直没有告诉亲人和身边的朋友。没想到，这次选了一个幸运的车牌号，还是没忍住发了一个部分好友不可见的朋友圈。</p>
<p>这说明自己定力还是不够，分享欲太强，不够谦虚和低调。满招损，谦受益。只是买了一个车和选到一个幸运的车牌号而已，不能高兴太早，后面还要花时间练车上路、开车还要慢和稳，不能出交通事故，铭记 “新手上路，多多指教”。</p>
<p>学英语，最重要的是练习。开车，最重要的是慢。</p>
<h2 id="学习">学习</h2>
<h3 id="内观冥想">内观冥想</h3>
<p>一月份报名内观冥想训练营的初衷是想学习内观冥想的方法，后来因为每天早上要赶地铁以及觉得课程内容和自己期望的有些差距，就没有坚持听课和打卡。</p>
<p>虽然，没有听完所有课程，但是从开始几节课程，初步体会和感受了一下什么是内观冥想，也认识了一些内观冥想的朋友。也没有想到，最后还收到了一个结业证书。</p>
<img src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/vipassana-study-certificate.jpeg" style="width:60%"/>
<h3 id="python">Python</h3>
<p>最近有个机器学习的项目，用到了 Python，所以需要学习 Python 并掌握相关的业务知识。这一个机会，同时也是一个挑战。</p>
<h2 id="娱乐">娱乐</h2>
<p>-《粉色理论》。这部泰国双女主的同性电视剧，豆瓣上评分 9.2，在这周完结了。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/fenhonglilun.jpeg" alt="fenhonglilun"  />
</p>
<h2 id="分享">分享</h2>
<ul>
<li>
<p><a href="https://pdai.tech/md/spring/springboot/springboot-x-task-hashwheeltimer-timer.html">HashedWheelTimer</a>：是来自于 Netty 的工具类，在 netty-common 包中。它用于实现延时任务。</p>
</li>
<li>
<p><a href="https://github.com/killbill/killbill-commons">Killbill common queue</a>：一个基于DB实现的分布式的队列，它上层还包装了EventBus事件总线机制。</p>
</li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-5｜项目事故、牙疼、Damus</title>
      <link>https://blog.chensoul.com/posts/2023/02/07/weekly_review_5/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/02/07/weekly_review_5/</guid>
      <description>前言 本篇是对 2023-01-30 到 2023-02-05 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这周是过年后的第一个工作周，被国家安排了连上七天</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-01-30</code> 到 <code>2023-02-05</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周是过年后的第一个工作周，被国家安排了连上七天班，算是体会了一次 “过年七天乐，上班七天累” 的过山车。七天的工作主要是测试并发布项目，每天忙的焦头乱额，生怕项目出了问题。有句话说，怕什么来什么。没想到周六还是报出了一个故障，还在睡觉中的我被一个电话吵醒，接着忙着找问题和解决方法，一天的时间就都花在这上面。万幸的是事故影响不大，发布了一个小版本进行修复。事故原因，还是值得警惕。</p>
<h2 id="工作总结">工作总结</h2>
<h3 id="项目事故">项目事故</h3>
<p>这周主要是自定义拦截器和 ErrorCoder 来记录 feign 请求的调用次数，包括调用成功的和失败的。另外，如果调用失败，设置了重试两次。这里重试的前提是 http 请求出现 4xx 或者 5xx 状态码错误，如果是状态码为 200 但返回了自定义业务异常，是不会触发重试机制的。这一点没有注意到，而发布前，我想当然的把一个接口的手动重试代码删掉了，导致调用该接口出现业务异常之后没有进行重试，影响了业务方的使用。</p>
<p>出现该问题的原因，一是没想出重试的前提条件，没有写代码注释；二是没有写单元测试；三是没有交叉代码审核。此外，还有一点，越是项目发布关键时期，越要注意休息，保持大脑足够清晰和敏捷。</p>
<h3 id="aop-日志记录">AOP 日志记录</h3>
<p>参考 【<a href="https://b23.tv/2HCODuM">每天进步一点点（二）-哔哩哔哩</a>】 在项目里添加代码对 controller 方法请求参数、返回结果、执行时间的记录。视频中讲的很清楚，这里就不贴代码了。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/spring-aop-customizable-trace-interceptor.png" alt="spring-aop-customizable-trace-interceptor"  />
</p>
<ul>
<li>
<p>该方法，可以对 controller 的所有方法（不管是 get 还是 post 或其他方法），都记录日志。如果想排除 get 方法（一个项目里查询比修改请求大很多），需要添加代码进行过滤。</p>
</li>
<li>
<p>另外，打印请求参数时，实际是记录的请求参数的 toString 方法，如果请求参数里有些对象没有定义toString 方法，则记录的是对象的引用地址。再者，如果对象里有些敏感字段不想输出到日志里，则需要重写toString 方法。一个可选的方法是，改为打印请求参数的 json 序列化值，这样做又会带来序列化开销。</p>
</li>
<li>
<p>如果 controller 层代码被代理了多次，则请求参数和返回结果会打印多次。</p>
</li>
</ul>
<h2 id="生活">生活</h2>
<h3 id="牙疼">牙疼</h3>
<p>一个月黑风高的晚上，加班回来的程序员偷偷喝了三杯牛奶，结果第二天牙齿开始疼了，特别是吃到冷热酸甜的东西，都会短暂的巨疼。去牙科诊所看了，医生说要做根管治疗，费用 800，可以报销 420，做完以后，牙套价格另算，有一千到几千的价格不等。刚不久还刷到视频说，有两个省要规范治疗牙齿费用。</p>
<p>忍着疼痛上了一周班，结果不仅牙痛，吃饭没胃口，还影响了上班，真是得不偿失。</p>
<p>周六晚上，在牙齿疼痛的地方，插了一点老爸给我的药水。睡觉时，先是畏冷，再就是牙疼的地方发炎，肚子发烧，烧到了不知道多少度，反正我是没有拿温度计去测量。烧的我大脑都是糊的，一晚上没睡好，中途还醒了几次。好在第二天，就好了一些，吃东西也没那么疼了。看来，专家顺发烧是体内细菌在和病毒做斗争，应该是对的啰。</p>
<p>经历了这一晚上，感觉像是体验了一次阳的过程。之前新冠阳了，我是轻症状，没有发烧。这次牙疼发烧，算是把之前新冠没有吃过的苦找补回来，人生也算是多了一种体验。</p>
<h3 id="娱乐">娱乐</h3>
<p>-《狂飙》。最近很火，也刚好完结了。我没有去看，没有时间去追，就看了前面几集。</p>
<p>-《粉红理论》。老婆在追的一部泰剧，她是在微博看些别人剪辑的几分钟的片段。叫我也去微博看看，我说我不用微博，我翻墙去找网站观看。老婆眼睛一亮，说那不是可以看到无删减版本，那个兴奋劲哟！很快，我找到了<a href="https://www.dandanzan.com/dianshiju/112399.html">网站</a>，发现已经上线了 11 集，而且每集都有 60 多分钟长（老婆看的都是阉割版～😯）。</p>
<h2 id="学习">学习</h2>
<p>最近 Damus 很火，我也去注册了一个账号，为此还重新下载了狐狸🦊钱包。随即，干脆也注册了 Mastodon 账号和 Crossbell 账号。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/damus-profile.png" alt="damus-profile"  />
</p>
<ul>
<li>
<p>我的 Damus 账号 npub1dav96pmjv58n60eqz7ctmhvsd7t2yljvzevf6uckmchz6zamx2wq0k7dm5</p>
</li>
<li>
<p>我的 Mastodon 账号 @chensoul@mas.to</p>
</li>
<li>
<p>我的 crossbell 账号 chensoul@crossbell</p>
</li>
</ul>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/xsync-profile.png" alt="xsync-profile"  />
</p>
<h2 id="好物分享">好物分享</h2>
<ul>
<li><strong><a href="https://ssnhd.com/2022/01/01/mac-inputdel/">Mac 删除原生英文 ABC</a></strong></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-4｜过年、向上管理、工作周总结</title>
      <link>https://blog.chensoul.com/posts/2023/01/30/weekly_review_4/</link>
      <pubDate>Mon, 30 Jan 2023 09:47:03 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/01/30/weekly_review_4/</guid>
      <description>前言 本篇是对 2023-01-23 到 2023-01-29 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 过年 这周处于过年吃喝拜年模式，除了腊月二十九和正</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-01-23</code> 到 <code>2023-01-29</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<h2 id="过年">过年</h2>
<p>这周处于过年吃喝拜年模式，除了腊月二十九和正月初一，其他时间都是和老婆在路上。因为是结婚第一个新年，需要带着老婆去各个亲戚家拜年。因为是第一次在新房过年，就把老爸从农村接过来一起过年。因为年前没有来得及买车，去哪里都不方便，都要需要滴滴打车。为此，打车花了不少钱，当然，给红包也给了不少钱。趁初一不用拜年的缝隙时间，带老婆和老爸去看了两场电影《无名》和《交换人生》。老爸很少去看电影院看电影，听到要去看电影，像个小孩似的，饭还吃完，就跑去电梯门口等电梯。这两场电影，看的我瞌睡来了，倒是初二晚上看《满江红》睡意全无。</p>
<p>总结下来，这个年过的不轻松，身体忙碌，心里幸福🥰。</p>
<h2 id="向上管理">向上管理</h2>
<p>年前，部门领导找我谈 2022 年绩效结果时候，提到我可以 “向上管理” 他。最近从 <a href="https://www.duyidong.com/">杜屹东</a> 的博客 <a href="https://www.duyidong.com/2020/01/01/2019-learn-from-alibaba/">这一年我在阿里学到的</a> 也看到了他在阿里工作一年后悟到对向上管理的理解。</p>
<ul>
<li>及时和老板表达想法</li>
<li>让老板知道你在忙什么</li>
<li>主动帮老板做一些脏活累活</li>
</ul>
<p>前两条是老板知道你的想法，后面一条是帮老板解决问题。此外，还可以帮老板规避风险。</p>
<h2 id="本周工作">本周工作</h2>
<p>这是年后的第一周，主要是处理年前没有完成的项目迭代。</p>
<h3 id="feign-集成-micometer">Feign 集成 Micometer</h3>
<p>OpenFeign 官方提供了 feign-micrometer 来支持 feign 集成 micrometer。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">GitHub</span> <span class="n">github</span> <span class="o">=</span> <span class="n">Feign</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="na">addCapability</span><span class="o">(</span><span class="k">new</span> <span class="n">MicrometerCapability</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="na">target</span><span class="o">(</span><span class="n">GitHub</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&#34;https://api.github.com&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>其本质是对 feign 拦截器、client、encoder、decoder 进行封装，测试过程中在没有获取到指标。故，改为使用z自定义拦截器和 ErrorCoder 来记录请求次数和失败次数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">GitHub</span> <span class="nf">gihhub</span><span class="o">(</span><span class="n">MetricsInterceptor</span> <span class="n">metricsInterceptor</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">  <span class="n">GitHub</span> <span class="n">github</span> <span class="o">=</span> <span class="n">Feign</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="na">requestInterceptor</span><span class="o">(</span><span class="n">metricsInterceptor</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="na">errorDecoder</span><span class="o">(</span><span class="k">new</span> <span class="n">MetricsErrorDecoder</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">  <span class="o">.</span><span class="na">target</span><span class="o">(</span><span class="n">GitHub</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&#34;https://api.github.com&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>MetricsInterceptor 代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MetricsInterceptor</span> <span class="kd">implements</span> <span class="n">RequestInterceptor</span><span class="o">,</span> <span class="n">MeterBinder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">MeterRegistry</span> <span class="n">meterRegistry</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FEIGN_REQUEST</span> <span class="o">=</span> <span class="s">&#34;feign.requests&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FEIGN_REQUEST_ERROR</span> <span class="o">=</span> <span class="s">&#34;feign.requests.error&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MetricsInterceptor</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">RequestTemplate</span> <span class="n">template</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Micrometers</span><span class="o">.</span><span class="na">async</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">methodKey</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="na">methodMetadata</span><span class="o">().</span><span class="na">configKey</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">Counter</span> <span class="n">counter</span> <span class="o">=</span> <span class="n">Counter</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="s">&#34;feign.requests&#34;</span><span class="o">).</span><span class="na">tags</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&#34;method&#34;</span><span class="o">,</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">substringBefore</span><span class="o">(</span><span class="n">methodKey</span><span class="o">,</span> <span class="s">&#34;(&#34;</span><span class="o">)}).</span><span class="na">register</span><span class="o">(</span><span class="n">meterRegistry</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">counter</span><span class="o">.</span><span class="na">increment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bindTo</span><span class="o">(</span><span class="n">MeterRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">meterRegistry</span> <span class="o">=</span> <span class="n">registry</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>MetricsErrorDecoder 代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MetricsErrorDecoder</span> <span class="kd">implements</span> <span class="n">ErrorDecoder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">MetricsErrorDecoder</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">MeterRegistry</span> <span class="n">registry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleMeterRegistry</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">MetricsErrorDecoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">metrics</span><span class="o">(</span><span class="n">String</span> <span class="n">methodKey</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Micrometers</span><span class="o">.</span><span class="na">async</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Metrics</span><span class="o">.</span><span class="na">counter</span><span class="o">(</span><span class="s">&#34;feign.requests.error&#34;</span><span class="o">,</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&#34;method&#34;</span><span class="o">,</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">substringBefore</span><span class="o">(</span><span class="n">methodKey</span><span class="o">,</span> <span class="s">&#34;(&#34;</span><span class="o">)}).</span><span class="na">increment</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Exception</span> <span class="nf">decode</span><span class="o">(</span><span class="n">String</span> <span class="n">methodKey</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">metrics</span><span class="o">(</span><span class="n">methodKey</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">FeignException</span> <span class="n">exception</span> <span class="o">=</span> <span class="n">FeignException</span><span class="o">.</span><span class="na">errorStatus</span><span class="o">(</span><span class="n">methodKey</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">exception</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Counter</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="s">&#34;feign.requests.error&#34;</span><span class="o">).</span><span class="na">register</span><span class="o">(</span><span class="n">registry</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="sentry-集成飞书通知">Sentry 集成飞书通知</h3>
<p>参考 <a href="https://www.ytjia.xyz/blog/2022/05/20/sentry-webhook.html">通过Webhook实现Sentry错误自动化飞书机器人报警</a> 这篇文章，使用 fastapi 部署一个 http 服务将 sentry 的回调转发到飞书群的机器人。由于，fastapi 需要在服务器上安装 python3，为了不污染我的 vps，我创建一个 docker 镜像 <a href="https://github.com/chensoul/dockerfiles/tree/master/sentry-feishu-hook">sentry-feishu-hook</a>，修改了 python 脚本中的编译错误，并在 vps 上通过 docker 启动该服务。</p>
<p>先编译镜像，再运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker build -t sentry-feishu-hook .
</span></span><span class="line"><span class="cl">docker run -d --name sentry-feishu-hook -p 3080:3080 sentry-feishu-hook
</span></span></code></pre></div><p>接下来在 sentry 项目的 WebHooks 里添加 http://ip:3080/hook</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/sentry-feishu-webhooks-test.png" alt="sentry-feishu-webhooks-test"  />
</p>
<p>点击 Test Plugin，飞书群组可以收到消息：</p>
<img src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/sentry-feishu-webhooks-test-message.png" alt="sentry-feishu-webhooks-test-message" style="width: 60%"/>
<h2 id="好物分享">好物分享</h2>
<ul>
<li><a href="https://www.warp.dev/">https://www.warp.dev/</a>：一个 Rust 编写，使用 GPU 渲染的终端应用。目标是提升开发者的效率。</li>
<li><a href="https://strrl.dev/post/before-2022/restful-api-mock-%E5%B7%A5%E5%85%B7-jsonplaceholder/">Restful API Mock 工具：JSONPlaceholder</a></li>
<li><a href="https://netnewswire.com/">NetNewsWire</a>。Inoreader 最近总是抽风，就改为使用 NetNewsWire 了。使用起来，还是比较顺滑，遗憾的是没有安卓 App。</li>
<li><a href="https://cubox.pro/">Cubox</a>。最近看到这个收藏工具，下载了使用起来。</li>
</ul>
<img src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/cubox-screen.png" alt="cubox-screen" style="width: 60%"/>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>我的VPS服务部署记录</title>
      <link>https://blog.chensoul.com/posts/2023/01/25/notes-about-deploy-services-in-vps/</link>
      <pubDate>Wed, 25 Jan 2023 10:38:34 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/01/25/notes-about-deploy-services-in-vps/</guid>
      <description>服务器设置 [可选] 设置系统 Swap 交换分区 因为 vps 服务器的运行内存很小，所以这里先设置下 Swap # 1GB RAM with 2GB Swap sudo fallocate -l 2G /swapfile &amp;amp;&amp;amp; \ sudo dd if=/dev/zero of=/swapfile bs=1024 count=2097152 &amp;amp;&amp;amp; \ sudo chmod 600 /swapfile &amp;amp;&amp;amp; \ sudo mkswap</description>
      <content:encoded><![CDATA[<h2 id="服务器设置">服务器设置</h2>
<p><strong>[可选] 设置系统 Swap 交换分区</strong></p>
<p>因为 vps 服务器的运行内存很小，所以这里先设置下 Swap</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 1GB RAM with 2GB Swap</span>
</span></span><span class="line"><span class="cl">sudo fallocate -l 2G /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/swapfile <span class="nv">bs</span><span class="o">=</span><span class="m">1024</span> <span class="nv">count</span><span class="o">=</span><span class="m">2097152</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo chmod <span class="m">600</span> /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo mkswap /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo swapon /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="nb">echo</span> <span class="s2">&#34;/swapfile swap swap defaults 0 0&#34;</span> <span class="p">|</span> sudo tee -a /etc/fstab <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo swapon --show <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo free -h
</span></span></code></pre></div><h2 id="安装并生成证书">安装并生成证书</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl https://get.acme.sh <span class="p">|</span> sh -s <span class="nv">email</span><span class="o">=</span>czj.june@gmail.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.acme.sh/acme.sh --issue --server letsencrypt --dns dns_aws -d chensoul.com -d <span class="s1">&#39;*.chensoul.com&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.acme.sh/acme.sh --installcert -d chensoul.com -d *.chensoul.com  --cert-file /usr/local/nginx/ssl/chensoul.com.cer --key-file /usr/local/nginx/ssl/chensoul.com.key --fullchain-file /usr/local/nginx/ssl/fullchain.cer --ca-file /usr/local/nginx/ssl/ca.cer   --reloadcmd <span class="s2">&#34;sudo nginx -s reload&#34;</span>
</span></span></code></pre></div><h2 id="docker-安装和配置">Docker 安装和配置</h2>
<h3 id="docker-安装">Docker 安装</h3>
<p>具体过程可以参考网上文章。</p>
<h3 id="自定义网络">自定义网络</h3>
<p>参考 <a href="https://nginxproxymanager.com/advanced-config/#best-practice-use-a-docker-network">Best Practice: Use a Docker network </a>
，创建一个自定义的网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker network create custom
</span></span></code></pre></div><p>查看 docker 网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@vps ~<span class="o">]</span><span class="c1"># docker network ls</span>
</span></span><span class="line"><span class="cl">NETWORK ID     NAME            DRIVER    SCOPE
</span></span><span class="line"><span class="cl">68f4aeaa57bd   bridge          bridge    <span class="nb">local</span>
</span></span><span class="line"><span class="cl">6a96b9d8617e   custom          bridge    <span class="nb">local</span>
</span></span><span class="line"><span class="cl">4a8679e35f4d   host            host      <span class="nb">local</span>
</span></span><span class="line"><span class="cl">ba21bef23b04   none            null      <span class="nb">local</span>
</span></span></code></pre></div><blockquote>
<p>注意：bridge、host、none 是内部预先创建的网络。</p>
</blockquote>
<p>然后，在其他服务的 docker-compose.yml 文件添加：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">default</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">custom</span><span class="w">
</span></span></span></code></pre></div><p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pgsql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:13</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5433</span><span class="p">:</span><span class="m">5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_USER=chenzj</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_PASSWORD=chenzj@vps2021</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/postgres:/var/lib/postgresql/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">default</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">custom</span><span class="w">
</span></span></span></code></pre></div><h2 id="服务部署">服务部署</h2>
<h3 id="postgresql">Postgresql</h3>
<p>1、参考 <a href="/posts/2022/08/19/postgresql-install-deploy/">PostgreSql安装和部署</a> ，通过 docker-compose 安装，创建
postgresql.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pgsql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:13-alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">pgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5432</span><span class="p">:</span><span class="m">5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_USER=postgres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_PASSWORD=admin@pg!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/postgres:/var/lib/postgresql/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>2、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f postgresql.yaml up -d
</span></span></code></pre></div><h3 id="rsshub">Rsshub</h3>
<p>直接通过 Docker 安装运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d --name rsshub -p 1200:1200 diygod/rsshub
</span></span></code></pre></div><p>配置 nginx ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">rsshub.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">rsshub.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:1200</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="uptime-kuma">Uptime Kuma</h3>
<p>参考 <a href="https://uptime.kuma.pet/">kuma</a>，使用 docker compose 部署，创建 uptime.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uptime-kuma</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">louislam/uptime-kuma:1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">uptime-kuma</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">~/.uptime-kuma:/app/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">3001</span><span class="p">:</span><span class="m">3001</span><span class="w">  </span><span class="c"># &lt;Host Port&gt;:&lt;Container Port&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span></code></pre></div><p>启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f uptime.yaml up -d
</span></span></code></pre></div><p>配置 nginx ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">uptime.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">uptime.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3001</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kn">proxy_set_header</span>   <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_http_version</span> <span class="mi">1</span><span class="s">.1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Connection</span> <span class="s">&#34;upgrade&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f uptime.yaml down 
</span></span><span class="line"><span class="cl">docker pull louislam/uptime-kuma:1
</span></span><span class="line"><span class="cl">docker-compose -f uptime.yaml up -d
</span></span></code></pre></div><h3 id="umami">Umami</h3>
<p>参考 <a href="https://github.com/umami-software/umami/blob/master/docker-compose.yml">umami docker-compose.yml</a> ，使用 docker 镜像
umami:postgresql-latest 来安装 umami。</p>
<p>1、在 pqsql 容器创建 umami 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE USER umami WITH PASSWORD &#39;umami@pg&#39;;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE DATABASE umami owner=umami;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;GRANT ALL privileges ON DATABASE umami TO umami;&#34;</span>
</span></span></code></pre></div><p>然后，初始化数 umami 数据。先进入容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker exec -it pgsql bash
</span></span></code></pre></div><p>进入 umami 数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">psql -U umami -d umami
</span></span><span class="line"><span class="cl"><span class="nv">umami</span><span class="o">=</span>&gt;
</span></span></code></pre></div><p>执行 <a href="https://github.com/umami-software/umami/blob/master/sql/schema.postgresql.sql"><strong>schema.postgresql.sql</strong></a> 文件内容。</p>
<p>2、通过 docker-compose 安装，创建 umami.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">umami</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">ghcr.io/umami-software/umami:postgresql-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">umami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3000:3000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">DATABASE_URL</span><span class="p">:</span><span class="w"> </span><span class="l">postgresql://umami:umami@pg@pgsql:5432/umami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">DATABASE_TYPE</span><span class="p">:</span><span class="w"> </span><span class="l">postgresql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">HASH_SALT</span><span class="p">:</span><span class="w"> </span><span class="l">vps@2023</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f umami.yaml up -d
</span></span></code></pre></div><p>3、设置自定义域名</p>
<p>umami.chensoul.com</p>
<p>4、配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">umami.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">umami.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>5、添加网站</p>
<p>访问 <a href="https://umami.chensoul.com/">https://umami.chensoul.com/</a>，默认用户名和密码为 admin/umami。登陆之后，修改密码，并添加网站。</p>
<p>6、升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f umami.yaml down 
</span></span><span class="line"><span class="cl">docker pull ghcr.io/umami-software/umami:postgresql-latest
</span></span><span class="line"><span class="cl">docker-compose -f umami.yaml up -d
</span></span></code></pre></div><h3 id="cusdis">Cusdis</h3>
<blockquote>
<p>VPS IP 可能被墙，所以可以使用三方云服务部署，具体参考<a href="https://www.pseudoyu.com/zh/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></p>
</blockquote>
<p>1、在 pqsql 容器创建 cusdis 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE USER cusdis WITH PASSWORD &#39;cusdis@pg&#39;;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE DATABASE cusdis owner=cusdis;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;GRANT ALL privileges ON DATABASE cusdis TO cusdis;&#34;</span>
</span></span></code></pre></div><p>2、通过 docker-compose 安装，创建 cusdis.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cusdis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">djyde/cusdis:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3010:3000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">USERNAME=admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PASSWORD=cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">JWT_SECRET=vps@2023</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">NEXTAUTH_URL=https://cusdis.chensoul.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">HOST=https://cusdis.chensoul.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_TYPE=pgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_URL=postgresql://cusdis:cusdis@pg@pgsql:5432/cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>以下配置为 EMAIL 配置可选，下面是使用 <a href="https://cusdis.com/doc#/features/notification?id=gmail">Gmail</a>
进行配置，需要首先开启两阶段验证并创建一个应用密码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">SMTP_HOST</span><span class="o">=</span><span class="s">smtp.gmail.com</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_PORT</span><span class="o">=</span><span class="s">465</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_SECURE</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_USER</span><span class="o">=</span><span class="s">your gmail email</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_PASSWORD</span><span class="o">=</span><span class="s">&lt;app password&gt;</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_SENDER</span><span class="o">=</span><span class="s">your gmail email</span>
</span></span></code></pre></div><p>3、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f cusdis.yaml up -d
</span></span></code></pre></div><p>4、配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">cusdis.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">cusdis.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3010</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kn">proxy_pass_header</span> <span class="s">Authorization</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kn">proxy_pass_header</span> <span class="s">WWW-Authenticate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kn">if</span> <span class="s">(</span><span class="nv">$uri</span> <span class="p">=</span> <span class="s">&#39;/js/iframe.umd.js&#39;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        	<span class="kn">add_header</span> <span class="s">&#39;Access-Control-Allow-Origin&#39;</span> <span class="s">&#39;*&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        	<span class="c1">#add_header &#39;Access-Control-Allow-Origin&#39; &#39;http://localhost:1313&#39;;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>5、部署一个 Telegram 机器人，参考 <a href="https://cusdis.chensoul.com/doc#/advanced/webhook?id=official-telegram-bot">Official Telegram bot</a>。</p>
<p>6、升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f cusdis.yaml down 
</span></span><span class="line"><span class="cl">docker pull djyde/cusdis:latest
</span></span><span class="line"><span class="cl">docker-compose -f cusdis.yaml up -d
</span></span></code></pre></div><h3 id="memos">memos</h3>
<p>通过 docker-compose 安装，创建 memos.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">memos</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">neosmemo/memos:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">memos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">~/.memos/:/var/opt/memos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5230</span><span class="p">:</span><span class="m">5230</span><span class="w">
</span></span></span></code></pre></div><p>启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f memos.yaml up -d
</span></span></code></pre></div><p>配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">memos.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">memos.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:5230</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f memos.yaml down 
</span></span><span class="line"><span class="cl">docker pull neosmemo/memos:latest
</span></span><span class="line"><span class="cl">docker-compose -f memos.yaml up -d
</span></span></code></pre></div><h3 id="n8n">n8n</h3>
<p>1、在 pqsql 容器创建 n8n 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE USER n8n WITH PASSWORD &#39;n8n@pg&#39;;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE DATABASE n8n owner=n8n;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;GRANT ALL privileges ON DATABASE n8n TO n8n;&#34;</span> <span class="p">;</span>
</span></span></code></pre></div><p>2、通过 docker-compose 安装，创建 n8n.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.8&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">n8n</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">n8nio/n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_TYPE=postgresdb</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_HOST=pgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_PORT=5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_DATABASE=n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_USER=n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_PASSWORD=n8n@pg</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">N8N_BASIC_AUTH_ACTIVE=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">N8N_BASIC_AUTH_USER=admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">N8N_BASIC_AUTH_PASSWORD=chenzj</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=&#34;Asia/Shanghai&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">WEBHOOK_URL=https://n8n.chensoul.com/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5678</span><span class="p">:</span><span class="m">5678</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/n8n:/home/node/.n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">/bin/sh -c &#34;n8n start --tunnel&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>3、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f n8n.yaml up -d
</span></span></code></pre></div><p>4、设置 nginx 转发</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:5678/</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_http_version</span> <span class="mi">1</span><span class="s">.1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">chunked_transfer_encoding</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_buffering</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_cache</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">access_log</span> <span class="s">/var/log/nginx/forward.log</span> <span class="s">combined</span> <span class="s">buffer=128k</span> <span class="s">flush=5s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这里面的转发配置不对的话，会导致直接访问 5678 端口正常，但是访问 nginx 的话，workflow 会一直处于执行。</p>
<p>5、添加 workflow</p>
<p>参考这篇文章 <a href="http://stiles.cc/archives/237/">http://stiles.cc/archives/237/</a> ，目前我配置了以下 workflows，实现了 github、douban、rss、memos 同步到 Telegram。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/my-n8n-workflows.png" alt="my-n8n-workflows"  />
</p>
<p>6、升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f n8n.yaml down 
</span></span><span class="line"><span class="cl">docker pull n8nio/n8n
</span></span><span class="line"><span class="cl">docker-compose -f n8n.yaml up -d
</span></span></code></pre></div><h3 id="plausible">plausible</h3>
<p>1、下载代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -L https://github.com/plausible/hosting/archive/master.tar.gz <span class="p">|</span> tar -xz
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> hosting-master
</span></span></code></pre></div><p>2、更新配置文件 plausible-conf.env</p>
<p>生成一个随机字符串：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl rand -base64 <span class="m">64</span> <span class="p">|</span> tr -d <span class="s1">&#39;\n&#39;</span> <span class="p">;</span> <span class="nb">echo</span>
</span></span></code></pre></div><p>修改 plausible-conf.env：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">BASE_URL</span><span class="o">=</span>https://plausible.chensoul.com
</span></span><span class="line"><span class="cl"><span class="nv">SECRET_KEY_BASE</span><span class="o">=</span>ywewRup6H0pT1TK+qIPwdRdOYNixC/GAr5vy2IoTvzNJygD3Z7rPgQI6v1c/tUV/SsJQYxsfZ60yrn6kMiDxAA<span class="o">==</span>
</span></span></code></pre></div><p>3、设置反向代理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">    listen 80;
</span></span><span class="line"><span class="cl">    listen [::]:80;
</span></span><span class="line"><span class="cl">    server_name plausible.chensoul.com;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    return 301 https://$host$request_uri;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">    listen          443 ssl;
</span></span><span class="line"><span class="cl">    server_name     plausible.chensoul.com;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ssl_certificate      /usr/local/nginx/ssl/fullchain.cer;
</span></span><span class="line"><span class="cl">    ssl_certificate_key  /usr/local/nginx/ssl/chensoul.com.key;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ssl_session_cache    shared:SSL:1m;
</span></span><span class="line"><span class="cl">    ssl_session_timeout  5m;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    ssl_ciphers  HIGH:!aNULL:!MD5;
</span></span><span class="line"><span class="cl">    ssl_prefer_server_ciphers  on;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    location / {
</span></span><span class="line"><span class="cl">        proxy_pass http://127.0.0.1:8000;
</span></span><span class="line"><span class="cl">	    proxy_set_header   X-Real-IP $remote_addr;
</span></span><span class="line"><span class="cl">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
</span></span><span class="line"><span class="cl">        proxy_set_header   Host $host;
</span></span><span class="line"><span class="cl">	    proxy_http_version 1.1;
</span></span><span class="line"><span class="cl">        proxy_set_header   Upgrade $http_upgrade;
</span></span><span class="line"><span class="cl">        proxy_set_header   Connection &#34;upgrade&#34;;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><p>4、启动服务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose up -d
</span></span></code></pre></div><p>5、升级</p>
<p>Docker Compose 的更新比较简单：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose down 
</span></span><span class="line"><span class="cl">docker compose pull plausible
</span></span><span class="line"><span class="cl">docker compose up -d
</span></span></code></pre></div><p>6、访问 postgres 数据库</p>
<p>第一次登录时可能会要求验证邮箱地址，如果前面没有配置 SMTP，可以通过下面的命令认证所有当前用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose <span class="nb">exec</span> plausible_db psql -U postgres -d plausible_db -c <span class="s2">&#34;UPDATE users SET email_verified = true;&#34;</span>
</span></span></code></pre></div><p>进入 plausible_db 数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose <span class="nb">exec</span> plausible_db psql -U postgres -d plausible_db
</span></span></code></pre></div><p>7、博客添加统计代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">defer</span> <span class="nx">data</span><span class="o">-</span><span class="nx">domain</span><span class="o">=</span><span class="s2">&#34;blog.chensoul.com&#34;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&#34;https://plausible.chensoul.com/js/script.js&#34;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></span></code></pre></div><p>8、配置 dns</p>
<p>在 dns 服务商添加 A 记录 plausible，稍等一下，访问 <a href="https://plausible.chensoul.com/">https://plausible.chensoul.com/</a></p>
<p>参考文章：</p>
<ul>
<li><a href="https://atpx.com/blog/docker-plausible-web-analytics/">使用 Plausible 自建网站流量统计分析工具</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-3｜博客定制、VPS部署服务</title>
      <link>https://blog.chensoul.com/posts/2023/01/25/weekly_review_3/</link>
      <pubDate>Wed, 25 Jan 2023 09:47:03 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/01/25/weekly_review_3/</guid>
      <description>前言 本篇是对 2023-01-16 到 2023-01-22 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这是过年前的最后一周，上了三天班，请了两天假回去</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-01-16</code> 到 <code>2023-01-22</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这是过年前的最后一周，上了三天班，请了两天假回去准备年货、去亲戚家吃年饭。趁放假之前，继续对博客做了一些定制，也在我的 VPS 上通过 Docker 部署了一些服务。</p>
<h2 id="定制博客">定制博客</h2>
<p>基于 <a href="https://www.pseudoyu.com/">pseudoyu</a> 的博客和主题定制博客，发现并修复了bug，还做了一些改进，并在他的 github 提交 <a href="https://github.com/pseudoyu/pseudoyu/issues/2">issue</a> 和 merge request。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/github-issue-build-aboutme-py.png" alt="github-issue-build-aboutme-py" style="width: 80%"/>
<p>接着在他博客主页留言，几个来回下来，收获不少。一是解决了我提出的问题，二是给我分享了一个搬瓦工的 the plan 优惠码。这时候去看了下我原来的 vps 刚好还有一天要到期，就立即花了92 美元（原价是 99 美元）购买了一台 2G 内存托管在香港的服务器。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/vps-main-controlls.png" alt="vps-main-controlls"  />
</p>
<p>缘分就是这么奇妙，如果我不主动和这个博主联系，就不会知道搬瓦工还有这个优惠，就不会帮助我解决了博客定制过程中遇到的疑惑。</p>
<blockquote>
<p>当你想要什的时候，先给出去，你就会收获更。有舍才有得。</p>
</blockquote>
<h2 id="博客个人介绍">博客个人介绍</h2>
<p>我的博客源文件托管在 <a href="https://github.com/chensoul/chensoul.github.io">gihub</a>，在这个仓库可以看到我的一些个人介绍，当然，我的博客也有个人介绍（在<a href="https://blog.chensoul.com/about/">关于</a>页面），如果你仔细观察，可以发现他们基本上是一样的，这个是怎么实现的呢？</p>
<img src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/chensoul-github-io-readme.png" alt="chensoul-github-io-readme" style="width: 80%"/>
<p>首先，github 里面可以创建一个以 github 账号为名称的仓库，然后编辑好 README.md 文件，README.md 文件内容就会渲染成 html 显示到个人 github 主页。例如，我的 github 主页是 <a href="https://github.com/chensoul">https://github.com/chensoul</a>，我的个人仓库地址为 <a href="https://github.com/chensoul/chensoul">https://github.com/chensoul/chensoul</a>，这个仓库是通过 github actions 来构建 README.md，构建文件查看仓库的 workflows 文件，主要有两个文件：</p>
<ul>
<li>build.yml：周期性的调用 <a href="https://github.com/chensoul/chensoul/blob/main/build_readme.py">build_readme.py</a> 来生成 README.md 文件（包括：获取最近 5 篇博客文章、或者 豆瓣上最近 5 个电影书籍动态、获取 github 上发布的项目、显示 wakatime 报表）</li>
<li>waketime.yml：生成 wakatime-charts</li>
</ul>
<p>当 README.md 生成之后，只需要将该文件内容同步到博客的 about.md 文件即可。怎么实现呢？参考博客源文件里的 <a href="https://github.com/chensoul/chensoul.github.io/blob/main/build_about.py">build_about.py</a>。这样就可以实现一个自我介绍同步到多个平台（除了博客，还可以通过 api 接口同步到语雀等其他平台）。</p>
<h2 id="vps-上服务部署">vps 上服务部署</h2>
<p>购买了新的 VPS 之后，就将原来的 VPS 导出镜像，然后导入到新的 VPS，最后再安装了以下服务：</p>
<ul>
<li><a href="https://github.com/indes/flowerss-bot">flowerss-bot</a>：一个支持应用内阅读的 Telegram RSS Bot。</li>
<li><a href="https://n8n.io/">n8n</a>：一款开源的自动工作流服务，类似 IFTTT、Zapier，可以互联互通包括 GitHub、Dropbox、Google、NextCLoud、RSS、Slack、Telegram 在内的几十款在线服务。</li>
<li>memos：一个开源且免费的自托管知识库</li>
<li>cusdis：一个界面清爽、注重隐私的轻量级 (~5kb gzip) 评论系统，可以很方便地与 React、Vue 或其他博客系统结合，并且还提供了一个后台来管理所有的评论</li>
<li>umami：一个简单易用、自托管的开源网站访问流量<em>统计</em>分析工具</li>
<li>pgsql</li>
<li>uptime-kuma：一个开源免费的监控工具</li>
<li>rsshub：一个开源、简单易用、易于扩展的RSS 生成器，可以给任何奇奇怪怪的内容生成RSS 订阅源</li>
</ul>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/vps-docker-service.png" alt="vps-docker-service"  />
</p>
<p>通过 Docker 部署这些服务非常简单，主要是需要注意的一点是：将这些服务部署到同一个网路，这样各个服务之间可以互相通信。比如：很多服务都需要依赖数据库 postgresql，可以使用 docker-compose 来编排服务。安装部署过程参考：<a href="/posts/2023/01/25/notes-about-deploy-services-in-vps/">我的VPS服务部署记录</a></p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-2｜博客重构</title>
      <link>https://blog.chensoul.com/posts/2023/01/15/weekly_review_2/</link>
      <pubDate>Sun, 15 Jan 2023 09:47:03 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/01/15/weekly_review_2/</guid>
      <description>前言 本篇是对 2023-01-09 到 2023-01-15 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这是年前倒数第二个工作周，工作上主要是完成项目一</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-01-09</code> 到 <code>2023-01-15</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这是年前倒数第二个工作周，工作上主要是完成项目一个版本的测试和发布。这个博客主要是分享一些技术相关笔记和个人的生活记录与思考，所以不会涉及具体的工作内容。</p>
<p>周三晚上是部门年会，领导提出了 2023 年收入 6.2 亿的目标，比 2022 年收入增长 140%。从公司领导层这乐观的年度规划，看得出来公司的发展属于上升趋势，同时意味着 2023 年又是忙碌和压力巨大的一年。</p>
<p>工作闲暇之余，看到了一些独立开发者的博客，并受他们博客文章的影响，立即决定重新捣鼓博客。于是，在一腔热情之下，花了三天时间重构了博客，也对博客以后的方向做了一些规划。</p>
<p>周末是过小年，小年伊始，年味渐浓。周六晚上，堂哥家吃年饭。周日中午，自己家吃年饭。这是新婚后第一次两边的家人一起吃年饭。虽然很早就确定了年饭时间大家都有时间的周末、预定了可以坐下 20 多人的大桌，但还是遗憾人没有到齐。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/new-year-dinner-20230115.png" alt="new-year-dinner-20230115"  />
</p>
<h2 id="博客重构">博客重构</h2>
<h3 id="博客主题">博客主题</h3>
<p>以前的博客主要是纯粹分享技术，很少有自己的思考，基本上就是代码比汉字要多不少。博客没有博主的思考，无法让读者认识、了解博主，并和博主产生深入的链接。这样的博客没有灵魂，就仅仅是一个纯分享的 wiki。</p>
<p>这次重新开始写博客之后，规划的博客主题是分享技术、记录生活、启发思考。技术上的文章，要有深度；生活的点滴，要有复盘；思考的内容，要有共鸣。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/blog-homepage-den-theme.png" alt="blog-homepage-den-theme"  />
</p>
<h3 id="博客规划">博客规划</h3>
<p>以前博客文章的分类有 java、database、devops、web，在删了一些文章之后，将博客的分类调整为想法（Ideas）、笔记（Notes）两类，后面再根据实际情况添加或者调整分类。</p>
<blockquote>
<p>健康，爱情和使命，按照这个顺序，其它的都不重要</p>
</blockquote>
<h3 id="文章链接">文章链接</h3>
<p>以前的博客链接格式是 <code>posts/:slug</code>，现在调整为 <code>posts/:year/:month/:day/:slug</code>。因为现在博客只有几篇文章，所以暂时不打算做原有链接路径到新路径的重定向工作。</p>
<h3 id="博客部署">博客部署</h3>
<p>目前有三种方案部署方案：</p>
<ul>
<li>github pages。国内访问速度受影响。</li>
<li>cloudflare pages。可以使用 cdn 加速。</li>
<li>Self hosted。需要购买云主机和手动运维。</li>
</ul>
<p>目前，是倾向于使用第二种方案。源码保存到 github 上，github actions 编译和部署静态文件到 cf-pages 分支，通过 cloudflare pages 链接 github 仓库、自动化部署静态文件并设置自定义域名 <code>blog.chensoul.com</code>。</p>
<h3 id="发布流程">发布流程</h3>
<p>本地编写 markdown 文件，图片保存到公有云，通过 git 提交到 github 仓库，使用 github actions 通过 n8n 自动发布到多平台，比如：公众号，语雀等。</p>
<h3 id="待办事项">待办事项</h3>
<p>本周对博客重构，计划完成以下功能：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 在不修改原主题的前提下，通过 git log 记录对主题的改动</li>
<li><input checked="" disabled="" type="checkbox"> 添加 <a href="https://cusdis.com/">Cusdis </a>评论系统</li>
<li><input checked="" disabled="" type="checkbox"> 添加 <a href="https://umami.is/">Umami</a> 统计分析</li>
<li><input checked="" disabled="" type="checkbox"> 添加 <a href="https://uptime.kuma.pet/">Kuma</a> 服务监控</li>
<li><input checked="" disabled="" type="checkbox"> 添加搜索、回到顶部功能</li>
<li><input checked="" disabled="" type="checkbox"> 使用 <a href="https://oss.console.aliyun.com/overview">阿里云对象存储</a> 作为图床</li>
<li><input disabled="" type="checkbox"> github actions 集成 <a href="https://n8n.io/">n8n</a></li>
<li><input disabled="" type="checkbox"> 域名 dns 解析迁移到 cloudflare</li>
</ul>
<p>以下是使用 kuma 监控我的 VPS 上的服务。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/chensoul-uptime.png" alt="chensoul-uptime"  />
</p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-1｜开始写周报、冥想</title>
      <link>https://blog.chensoul.com/posts/2023/01/08/weekly_review_1/</link>
      <pubDate>Sun, 08 Jan 2023 09:47:03 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/01/08/weekly_review_1/</guid>
      <description>前言 本篇是对 2023-01-02 到 2023-01-08 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这是 2023 年的第一周，元旦放了三天假之后，就用投入了</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-01-02</code> 到 <code>2023-01-08</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这是 2023 年的第一周，元旦放了三天假之后，就用投入了工作之中。元旦已过，过年就没多远了，很多公司也开始准备年会了。因为疫情，这个年注定不好过。现在疫情放开，不知道有多少公司能够熬过这个年，进入百废待兴的节奏。</p>
<p>最近把 rss 阅读器又用起来，每天阅读订阅的未读文章，关注到好几个独立开发者。他们每周都在坚持写博客、分享技术文章。从他们的分享里面，可以看到他们有在做自己的 side projects，也有在开源项目提交代码。看着他们的 github 主页每天都有提交代码，再看看我的 github 主页很久没有提交过代码，顿感惭愧。目前，公司使用的是自建的 gitlab 仓库托管代码，很多代码不方便公开分享，自己夜很少花时间写一些小项目公开分享到 github。干脆就清理一些 github 长期没有维护的仓库，取关了一些好友，更新了 github 主页，最后看了一下粉丝还有 574 人，相对而言也是少的可怜🥺。</p>
<h2 id="开始写周报">开始写周报</h2>
<p>前段时间，开始尝试在 <a href="https://www.yuque.com/chensoul">语雀</a> 上每天写日记，写了几天之后，没有坚持下来。</p>
<img src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/yuque-life-note.png" alt="yuque-life-note" style="width: 50%"/>
<p>总结了一下，没有坚持下来的原因主要是在于每天没有积累足够的分享内容，也就是输入不够；另外，输出之后的反馈不够，这和观众流量有关。作为一个程序员，更喜欢自动化工作的快感和满足感。哟还是更倾向于将博客以 markdown 文件保存到本地或者 git 仓库，然后通过自动化脚本编译部署到多平台。在关注了一些独立开发者的博客之后，更是坚定了这种想法。于是有了这篇写周报的文章，以周为单位记录每一周的所看所思所感。</p>
<p>关于写博客的流程，电脑上使用 typora 编辑器有着很好的用户体验。如果也能在手机上用 markdown 写文章并提交到 github 上就更完美了。刚开始我使用的是 mweb 这个 app，最近在 ios 上又发现了 metion 这个 app 就可以支持和 git 同步。</p>
<img src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/ios-app-metion.png" alt="ios-app-metion" style="width: 50%"/>
<p>这篇文章就是通过 metion 编写和提交的。图片是本地上传的，图片名称应该是一串随机数，待文章发布之后，需要将图片重命名为有意义的名称，这样方便在图床里查阅和管理。</p>
<img src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/metion-writing-first-blog.png" alt="metion-writing-first-blog" style="width: 50%"/>
<p>关于图片的宽度设置，特别是竖形图，建议将宽度设置为一半。设置方法是：在 md 文件里使用 <code>img</code> 标签引入图片，这样就可以添加一个 <code>sytle=&quot;width: 50%&quot;</code> 来设置宽度。例如，上面图片就是这样设置的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/ios-app-metion.png&#34;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;ios-app-metion&#34;</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;width: 50%&#34;</span><span class="p">&gt;</span>
</span></span></code></pre></div><h2 id="内观冥想">内观冥想</h2>
<p>这个月参加了一个内观冥想 21 天训练营，每天早上 7 点到 8 点是上课时间，正好也是我上班时间。在听了几天课程并打卡之后，就放弃了。</p>
<p>21 天课程内容，每天的主题分别是：</p>
<ul>
<li>目标</li>
<li>计划</li>
<li>结果</li>
<li>比较</li>
<li>抱怨</li>
<li>后悔</li>
<li>他应该知道自己错了</li>
<li>不可能</li>
</ul>
<h3 id="目标">目标</h3>
<blockquote>
<p>今日内观冥想主题是目标</p>
<p>静静地放空自己，回想自己关注目标的记忆。好像自己曾经设立过很多目标，又好像什么都没有。目标是什么，好像描述不出来，又琢磨不透。</p>
<p>曾经立下的那些目标算是目标吗？他们可以实现吗？他们实现了吗？为什么没有实现呢？无志之人常立志，有志之人立常志。远的不说，先看看 2022 年实现了哪些目标。读书，是彻底放下了；健身，元旦前减到 130 斤的目标在 “阳康后不要剧烈运动” 的说辞下耽误了；定投，也是终止了；买车，车是消耗品；结婚，实现了。</p>
<p>算了下，实现了的目标也就是结婚了。少的可怜。为什么会这样呢？大抵是自己不够自律，没有持续的坚持，也没有及时的反思和调整。也就是自我察觉不够吧！或者说没有养成自我察觉的方法和习惯。这也就是为什么要参加 21 天内观训练营的原因吧。</p>
<p>一个人很难认清自身的局限性，很难扩大自己的认知，多与身边的人交流和学习，通过观他人，再来思自己，应该可以提升自己的察觉意识。</p>
</blockquote>
<h3 id="计划">计划</h3>
<blockquote>
<p>今日内观冥想主题是计划。</p>
<p>早上冥想是在地铁，冥想的时候放空自己，感受自己的思绪、情绪和身体的注意力。因为是站着，注意力一会儿在脚上，一会儿在手上，不能完全地放空自己。想必要是完全放松，估计就站不住了吧。</p>
<p>冥想地过程中，重要的是感受和观察。感受当下的感受，观察自己的观察，任有他们流动和发展。所谓没有绝对的对与错，冥想的过程中，重要的是作为一个旁观者，不要有过多的主观意识。</p>
</blockquote>
<h3 id="结果">结果</h3>
<blockquote>
<p>今天的内观冥想主题是结果。</p>
<p>把身体挂在钩子上，静静地观察和感受。一方面感受身体，一方面会思考自己对结果的理解。什么是结果？自己过去一年取得了什么样的结果？为什么没有取得？</p>
</blockquote>
<h3 id="比较">比较</h3>
<blockquote>
<p>今日内观冥想主题是比较。冥想时，观察自己的感受、情绪、想法，他们可能是任何样子的。不管是怎样的，他们都是正常的，都是他们本来的样子，也就是空性。</p>
<p>把比较这个念头挂起来，静静地看比较这两个字。然后开始觉察比较这两个字。这个时候，大脑开始在思考比较这个念头是什么。思绪在变化的时候，对对比较这个念头的感受也在变化。无论如何变化，自己都不要干预。当自己有了比较这个念头，自己的感受是失望的。失望自己不如别人，不如过去。失望过后，又不服气，又暗下决心要好好努力。这个过程中，我是我的主人，是我在有着各种各样的感受。如果我能控制自己的情绪，就能控制自己的行为。</p>
</blockquote>
<h3 id="抱怨">抱怨</h3>
<blockquote>
<p>今日冥想主题是抱怨。</p>
<p>生活中有什么抱怨的？抱怨又解决不了问题？问题又不是自己造成的，可能是别人造成的！别人的事情是别人的事情，自己的事情是自己造成。别人的事情，你管不了，你能管理的是你自己的。管好自己的心态情绪和行为，因为抱怨解决不了别人的问题，也解决不了自己的事情。甚至你的抱怨还会给别人带来负能量，给你们带来争吵，给自己带来蛮烦，给自己地能力和情绪带来消耗。与其消耗自己，还不如提升自己。有时候不要局限在自己的思维里，换个角度，提升格局，一切事情都不是事情了。这个世界哪有那么多所谓重要的事情。那些今天你看来很重要的事儿，在十年二十年之后，根本就不值得一提。所以很多时候，要用发展的眼光看问题。一切都会过去，一切都会好起来。当你这样想的时候，在你心里在你眼前，就没有什么烦恼了，也就不会抱怨了。</p>
</blockquote>
<h2 id="好物分享">好物分享</h2>
<p>几个截图软件：</p>
<ul>
<li>
<p><a href="https://immmmm.com/chrome-extensions-tinysnap/">TinySnap</a> Chrome 截图插件，支持设置背景</p>
</li>
<li>
<p>Snipaste 截图</p>
</li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://blog.chensoul.com/about/</link>
      <pubDate>Sun, 01 Jan 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/about/</guid>
      <description>Hi there 👋 健康，爱情和使命，按照这个顺序，其它的都不重要。 &amp;mdash;&amp;mdash; 纳瓦尔 我是 ChenSoul，一个 Java 软件开发工程师，目前工作在武汉。 热爱编程，喜欢跑步</description>
      <content:encoded><![CDATA[<!-- readme starts -->
<h2 id="hi-there-">Hi there 👋</h2>
<blockquote>
<p>健康，爱情和使命，按照这个顺序，其它的都不重要。 &mdash;&mdash; 纳瓦尔</p>
</blockquote>
<p>我是 ChenSoul，一个 Java 软件开发工程师，目前工作在武汉。</p>
<p>热爱编程，喜欢跑步。读书、健身、定投、帮朋友、陪家人，做一个长期主义者。</p>
<h3 id="网站">网站</h3>
<ul>
<li>博客：<a href="https://blog.chensoul.com/">https://blog.chensoul.com/</a></li>
<li>跑步：<a href="https://run.chensoul.com/">https://run.chensoul.com/</a></li>
<li>Memos：<a href="https://memos.chensoul.com/">https://memos.chensoul.com/</a></li>
</ul>
<h3 id="找到我">找到我</h3>
<ul>
<li>微信：chenshu_eth</li>
<li><a href="mailto:chensoul.eth@gmail.com">Email</a></li>
<li><a href="https://blog.chensoul.com/index.xml">Blog RSS</a></li>
<li><a href="https://github.com/chensoul">Github</a></li>
<li><a href="https://twitter.com/chensoul_eth">Twitter</a></li>
<li><a href="https://t.me/chensoul_share">Telegram</a></li>
</ul>
<h2 id="最新博客">最新博客</h2>
<!-- blog starts -->
<ul>
<li><a href="https://blog.chensoul.com/posts/2023/06/26/microservice-design-patterns/">[译]微服务设计模式</a></li>
<li><a href="https://blog.chensoul.com/posts/2023/06/26/java-design-patterns-aggregator-microservices/">Java设计模式：Aggregator Microservices</a></li>
<li><a href="https://blog.chensoul.com/posts/2023/06/25/python-modules-packages/">[译]Python模块和包-简介</a></li>
<li><a href="https://blog.chensoul.com/posts/2023/06/25/python-function/">Python学习5：函数</a></li>
<li><a href="https://blog.chensoul.com/posts/2023/06/25/developing-with-bottle/">[译]用 Bottle 开发</a></li>
<li><a href="https://blog.chensoul.com/posts/2023/06/21/weekly_review_24/">周报-24｜如果没有疼痛</a></li>
<li><a href="https://blog.chensoul.com/posts/2023/06/21/modern-css-explained-for-dinosaurs/">[译]为恐龙解释现代CSS</a></li>
<li><a href="https://blog.chensoul.com/posts/2023/06/20/modern-html-explained-for-dinosaurs/">[译]为恐龙解释现代HTML</a></li>
<li><a href="https://blog.chensoul.com/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/">[译]为恐龙解释现代JavaScript</a></li>
<li><a href="https://blog.chensoul.com/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/">《Effective Java 3》笔记15：尽量减少类和成员的可访问性</a></li>
</ul>
<!-- blog ends -->
<h2 id="最近活动">最近活动</h2>
<!-- douban starts -->
<ul>
<li><a href="http://movie.douban.com/subject/35496350/">想看志愿军：雄兵出击</a> 2023-06-26</li>
<li><a href="http://movie.douban.com/subject/10604086/">想看封神第一部</a> 2023-06-26</li>
<li><a href="http://movie.douban.com/subject/35818074/">想看我爱你！</a> 2023-06-26</li>
<li><a href="http://movie.douban.com/subject/35660795/">看过消失的她</a> 2023-06-26</li>
<li><a href="https://book.douban.com/subject/35446284/">想读Java高并发核心编程 卷1</a> 2023-06-12</li>
<li><a href="https://book.douban.com/subject/35446285/">最近在读Java高并发核心编程 卷2</a> 2023-06-12</li>
<li><a href="https://book.douban.com/subject/27094706/">最近在读财富自由之路</a> 2023-06-09</li>
<li><a href="http://movie.douban.com/subject/25728006/">看过速度与激情9</a> 2023-06-09</li>
<li><a href="http://movie.douban.com/subject/35652451/">看过刀剑神域进击篇：暮色黄昏</a> 2023-06-09</li>
<li><a href="http://movie.douban.com/subject/26260853/">看过速度与激情8</a> 2023-05-19</li>
</ul>
<!-- douban ends -->
<h2 id="最近发布">最近发布</h2>
<!-- recent_releases starts -->
<ul>
<li><a href="https://github.com/chensoul/learning-hadoop/releases/tag/v0.0.1">learning-hadoop</a>：学习 hadoop 示例代码</li>
<li><a href="https://github.com/chensoul/scrapy-zhihu-github/releases/tag/v0.0.1">scrapy-zhihu-github</a>：Scrapy爬取知乎、Github用户</li>
<li><a href="https://github.com/chensoul/grab/releases/tag/v0.0.1">grab</a>：基于spark、spring boot构建推荐系统</li>
</ul>
<!-- recent_releases ends -->
<h2 id="最近一周编码">最近一周编码</h2>
<p><img loading="lazy" src="https://raw.githubusercontent.com/chensoul/chensoul/main/images/wakatime_weekly_language_stats.svg#gh-light-mode-only" alt="light"  />
</p>
<h2 id="最近一年跑步">最近一年跑步</h2>
<p><a href="https://run.chensoul.com"><img loading="lazy" src="https://raw.githubusercontent.com/chensoul/running_page/master/assets/github_2023.svg#gh-light-mode-only" alt="light"  />
</a></p>
<!-- readme ends -->
]]></content:encoded>
    </item>
    
    <item>
      <title>博客中如何使用图床服务</title>
      <link>https://blog.chensoul.com/posts/2022/08/19/using-images-in-blog/</link>
      <pubDate>Fri, 19 Aug 2022 12:15:54 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2022/08/19/using-images-in-blog/</guid>
      <description>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。 喜欢 Typora 的理由： 所见即所得的编辑，Markdown</description>
      <content:encoded><![CDATA[<p>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/my-typora-license.png" alt="my-typora-license"  />
</p>
<p>喜欢 Typora 的理由：</p>
<ul>
<li>
<p>所见即所得的编辑，Markdown的语法都支持快捷键操作，非常方便</p>
</li>
<li>
<p>可以自定义主题的 CSS，包括文章内容就可以粘贴到公众号里</p>
</li>
<li>
<p>上传图片，支持图床服务。可以将图片上传到指定的图床，前提是需要先安装一个客户端，这里我使用的是 PicGo。然后，PicGo支持常见的一些图床服务。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/picgo-setting-image-server.png" alt="picgo-setting-image-server"  />
</p>
</li>
<li>
<p>支持导出</p>
</li>
</ul>
<h2 id="typora-图片复制到本地">Typora 图片复制到本地</h2>
<p>接下来，聊聊 Typora 的图片上传设置：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/typora-setting-image.png" alt="typora-setting-image"  />
</p>
<p>当你插入图片时，你可以分情况对图片进行设置。比如：</p>
<p>1、对本地位置的图片，可以设置一个上传规则：复制到指定路径或者是当前路径下的一个文件夹、上传图片。</p>
<ul>
<li>如果是编写一个文档，我们就设置把图片保存到本地的 assets 文件夹内，这样方便管理。</li>
<li>如果是编写博客，图片一般是集中管理的，我们可以设置复制到一个指定路径</li>
</ul>
<p>2、类似的，对网络位置的图片也可以使用上面的规则。</p>
<p>注意，如果将图片保存到本地目录，在文章中引用图片是使用的相对或者绝对路径。如果只是在本地查看，是可以预览图片的。但是，如果将博客上传到服务器，则因为路径问题可能会出现无法预览图片的情况。</p>
<p>所以，这种情况我们需要做一些修改。通常我会设置图片复制到博客的静态页面目录下面，比如，我现在使用的是 Hugo 构建静态博客，会将图片保存到 static/img 目录下，并且，还需要修改图片的 markdown 引用路径为 <code>/images/image-20220819124422239.png</code> ，以表示绝对路径查找图片，在博客服务器上就是相对根域名目录去 img 路径下查找图片。待hugo 编译完成上传静态文件到服务器之后，可以通过 <a href="https://blog.chensoul.com/images/">https://blog.chensoul.com/images/</a> 加上图片名称的方式访问到图片。</p>
<p>但是，显然，这时候在 Typora 是无法预览图片的，因为在本地查找不到这个绝对路径地址。这时候可以在 Typora 里面设置一个绝对路径，操作方法是，在 显示 -&gt; 图片 -&gt; 图像 -&gt; 设置图片根目录 里进行设置。</p>
<p>设置完成之后，在当前文件的 md 文件的顶部元数据代码里会多一行代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;博客中如何使用图床服务&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">date</span><span class="p">:</span><span class="w"> </span><span class="ld">2022-08-19T12:15:54</span><span class="m">+08</span><span class="p">:</span><span class="m">00</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">slug</span><span class="p">:</span><span class="w"> </span><span class="l">using-images-in-blog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">categories</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">日志]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">tags</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">hugo]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">draft</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">typora-root-url</span><span class="p">:</span><span class="w"> </span><span class="l">../../static</span><span class="w">
</span></span></span></code></pre></div><p>这样博客里所有的图片都会保存的博客服务器，如果博客访问量增大，则图片加载时间会变慢。为了解决这个问题，需要将图片进行压缩，并给博客设置 CDN 加速。</p>
<h2 id="typora-图片上传到网络">Typora 图片上传到网络</h2>
<p>将图片保存到本地，待博客静态页面部署到服务器上之后，可以实现正常预览情况。但是，如果我们想把 md 文件打包上传到一些云笔记，比如：语雀，你会发现上传之后会出现图片无法预览的情况。</p>
<p>这时候，我们需要将图片上传到网络。首先，我们需要安装 PicGo，然后设置图床服务，这里我使用的是 github 作为图床来保存图片，并使用  <a href="https://www.jsdelivr.com">jsDelivr</a> 的 CDN 服务进行加速访问。</p>
<p>如何利用 Github 搭建自己的免费图床？可以参考这篇 <a href="https://zhuanlan.zhihu.com/p/353775844">文章</a>。这里，记录一下我的操作步骤。</p>
<p>1、使用博客的<a href="https://github.com/chensoul/blog.chensoul.com">托管仓库</a> 的 static/img 目录来保存图片，这样方便图片的管理（比如：压缩、重命名，删除无用图片），如果图床服务不可用了，所有博客图片还有一个备份，只需要修改博客内图片的引用地址。前提是需要将仓库设置为 public。</p>
<p>2、在 github 设置里面创建一个 Token。以此打开 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code></p>
<p>3、在 PicGo 里设置 github 图床：</p>
<ul>
<li>
<p>设定仓库名：chensoul/blog.chensoul.com</p>
</li>
<li>
<p>设定分支：main</p>
</li>
<li>
<p>设定 Token：XXXXXXXXXXXXXXXXX</p>
</li>
<li>
<p>指定存储路径：static/images/</p>
</li>
<li>
<p>设置自定义域名：https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com</p>
</li>
</ul>
<p>4、需要修改博客文章内引用的图片地址，将 /images/ 替换为 <a href="https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/images/">https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/images/</a> ，可以使用<a href="https://dvel.me/posts/macos-replace-contents-multiple-files/">脚本批量替换</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">grep -lr --null <span class="s1">&#39;](\/img\/&#39;</span> <span class="p">|</span> xargs -0 sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/](\/img\//](https:\/\/cdn.jsdelivr.net\/gh\/chensoul\/blog.chensoul.com\/static\/img\//g&#39;</span>
</span></span></code></pre></div><blockquote>
<p>参数说明：</p>
<ul>
<li>grep
<ul>
<li><code>-i, --ignore-case</code> 查找文件时不区分大小写</li>
<li><code>-l, --files-with-matches</code> 返回文件名</li>
<li><code>-R, -r, --recursive</code> 递归搜索子目录</li>
</ul>
</li>
<li>sed
<ul>
<li><code>-i</code> 默认 <code>sed</code> 会打印到标准输出，使用 <code>-i</code> 将直接在文件内编辑替换</li>
<li><code>s</code> 替换</li>
<li><code>g</code> 全局替换标志</li>
<li><code>I</code> 大小写不敏感标志</li>
</ul>
</li>
</ul>
</blockquote>
<p>反过来，查询 <a href="https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/">https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/</a> 下的图片地址替换 <code>/img</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">grep -lr --null <span class="s1">&#39;](https://cdn.jsdelivr.net/gh/chensoul/blog.chensoul.com/static/images/&#39;</span> <span class="p">|</span> xargs -0 sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/](https:\/\/cdn.jsdelivr.net\/gh\/chensoul\/blog.chensoul.com\/static\/img\//](\/img\//g&#39;</span>
</span></span></code></pre></div><p>另外，在博客编译部署的流程之中，可以定制化一些步骤将博客同步发布到其他系统。当然，在发布之前，也可以先将本地图片的 url 替换成图床地址的 url。等后续实现了，再发布一篇文章。</p>
<p>如果 github 或者 jsdelivr 服务不稳定，则需要考虑使用其他图床了。</p>
<blockquote>
<p>可以通过这个地址 <a href="https://tcp.ping.pe/">https://tcp.ping.pe/</a> 来检测 IP 或者域名是否可以访问</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Mac开发环境配置</title>
      <link>https://blog.chensoul.com/posts/2021/09/09/mac-development-environment-setup/</link>
      <pubDate>Thu, 09 Sep 2021 18:14:34 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2021/09/09/mac-development-environment-setup/</guid>
      <description>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是Mac开发环境，所以，这篇文章主要是基于Mac操作系</description>
      <content:encoded><![CDATA[<p>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是Mac开发环境，所以，这篇文章主要是基于Mac操作系统，记录开发环境搭建过程。</p>
<h2 id="偏好设置">偏好设置</h2>
<ul>
<li>系统所有偏好设置
<ul>
<li>通用：关闭文稿时要求保存更改</li>
<li>Siri：关闭</li>
<li>辅助功能 - 指针控制（或鼠标与触控板） - 触控板选项：启动拖移(三指拖移)</li>
<li>触控板 &gt; 光标与点击，轻拍来点按，辅助点按</li>
<li>Dock
<ul>
<li>置于屏幕上的位置：右边</li>
<li>设置 Dock 图标更小（大小随个人喜好）</li>
</ul>
</li>
</ul>
</li>
<li>Finder
<ul>
<li>显示各种栏</li>
<li>显示所有文件扩展名</li>
<li>标题栏显示完整路径：defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES;killall Finder</li>
</ul>
</li>
<li>禁用大部分 iCloud 同步</li>
<li>键盘 -&gt; 快捷键
<ul>
<li>command + 空格：spotlight  </li>
<li>control + 空格：切换输入法</li>
</ul>
</li>
</ul>
<h2 id="安装xcode">安装XCode</h2>
<p>从 App store 或苹果开发者网站安装 <a href="https://developer.apple.com/xcode/">Xcode</a> ，然后安装 Xcode command line tools：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">xcode-select --install
</span></span></code></pre></div><p>安装完成后，你将可以直接在 terminal 中使用主要的命令，比如：<code>make, GCC, clang, perl, svn, git, size, strip, strings, libtool, cpp</code>等等。</p>
<p>如果你想了解 Xcode command line tools 包含多少可用的命令，可以通过下面命令查看：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ls /Library/Developer/CommandLineTools/usr/bin/
</span></span></code></pre></div><h2 id="homebrew">Homebrew</h2>
<p><a href="http://brew.sh/">Brew</a> 是 Mac 下面的包管理工具，通过 Github 托管适合 Mac 的编译配置以及 Patch，可以方便的安装开发工具。</p>
<p>打开终端模拟器，开始安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/bin/bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>替换 brew.git 源</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git -C <span class="s2">&#34;</span><span class="k">$(</span>brew --repo<span class="k">)</span><span class="s2">&#34;</span> remote set-url origin https://mirrors.cloud.tencent.com/homebrew/brew.git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git -C <span class="s2">&#34;</span><span class="k">$(</span>brew --repo homebrew/core<span class="k">)</span><span class="s2">&#34;</span> remote set-url origin https://mirrors.cloud.tencent.com//homebrew/homebrew-core.git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">brew update
</span></span></code></pre></div><p>设置环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;eval &#34;$(/opt/homebrew/bin/brew shellenv)&#34;&#39;</span> &gt;&gt; ~/.bash_profile
</span></span></code></pre></div><p>如果安装了zsh，则是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;eval &#34;$(/opt/homebrew/bin/brew shellenv)&#34;&#39;</span> &gt;&gt; ~/.zshrc
</span></span></code></pre></div><h2 id="终端">终端</h2>
<h3 id="iterm2">iTerm2</h3>
<p>iTerm2 是 macOS 系统终端的开源替代品，它是高度可定制化的，并且功能十分强大，应该是 macOS 最好用的终端模拟器之一。</p>
<h4 id="安装">安装</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install --cask iterm2
</span></span></code></pre></div><p>设置：</p>
<ul>
<li>Preferences &ndash;&gt; Profiles&ndash;&gt; Default &ndash;&gt; Terminal：设置 cursor 颜色为黄色</li>
<li>Preferences &ndash;&gt; Profiles &ndash;&gt; Window &ndash;&gt; Transparency：设置透明度 10%~20% 即可，太高会和桌面背景冲突。如果需要临时禁用透明度可以使用快捷键 ⌘+u。</li>
</ul>
<h4 id="字体">字体</h4>
<p>在 iTerm2 中，终端的字体可以对正常字体和非 ASCII 字体进行单独的设置，<a href="https://github.com/ryanoasis/nerd-fonts">Nerd-Fonts</a> 是一个使用大量字形（图标）修补开发人员目标字体的项目</p>
<p>分别安装  <a href="https://github.com/ryanoasis/nerd-fonts">font-fantasque-sans-mono-nerd-font</a> + <a href="https://github.com/lxgw/LxgwWenKai">霞鹜文楷</a>  这两种字体</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># brew 添加字体库</span>
</span></span><span class="line"><span class="cl">brew tap homebrew/cask-fonts
</span></span><span class="line"><span class="cl"><span class="c1"># 搜索可用 Nerd Font 字体</span>
</span></span><span class="line"><span class="cl">brew search nerd-font
</span></span><span class="line"><span class="cl"><span class="c1"># 以 font-fantasque-sans-mono-nerd-font 为例（我比较喜欢这个字体🥰）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 安装喜欢的 nerd-font 字体</span>
</span></span><span class="line"><span class="cl">brew install font-fantasque-sans-mono-nerd-font
</span></span><span class="line"><span class="cl"><span class="c1"># 安装「霞鹜文楷」字体</span>
</span></span><span class="line"><span class="cl">brew install font-lxgw-wenkai
</span></span></code></pre></div><p>重新启动 iTerm2，按 <code>⌘</code> + <code>,</code> 打开 iTerm2 的偏好设置，修改字体</p>
<h4 id="安装主题"><strong>安装主题</strong></h4>
<p><a href="https://draculatheme.com/iterm">Dracula</a> 主题很好看，下面给 iTerm2 装上</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/dracula/iterm.git
</span></span></code></pre></div><p>点击 <code>import</code> 导入 <code>Dracula.itermcolors</code> 文件，然后选择 <code>Dracula</code> 主题即可</p>
<h3 id="zsh">Zsh</h3>
<p>macOS 现在默认 Shell 是 Zsh 了（以前是 Bash），下面我们可以一边验证一边修改</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># macOS 预设的 Shell</span>
</span></span><span class="line"><span class="cl">cat /etc/shells
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># List of acceptable shells for chpass(1).</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Ftpd will not allow users to connect who are not using</span>
</span></span><span class="line"><span class="cl"><span class="c1"># one of these shells.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/bin/bash
</span></span><span class="line"><span class="cl">/bin/csh
</span></span><span class="line"><span class="cl">/bin/dash
</span></span><span class="line"><span class="cl">/bin/ksh
</span></span><span class="line"><span class="cl">/bin/sh
</span></span><span class="line"><span class="cl">/bin/tcsh
</span></span><span class="line"><span class="cl">/bin/zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看当前正在使用的 Shell</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$SHELL</span>
</span></span><span class="line"><span class="cl">/bin/zsh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 zsh 版本</span>
</span></span><span class="line"><span class="cl">zsh --version
</span></span><span class="line"><span class="cl">zsh 5.9 <span class="o">(</span>arm-apple-darwin21.3.0<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将 brew 安装的 zsh 路径添加到 /etc/shells</span>
</span></span><span class="line"><span class="cl">sudo sh -c <span class="s2">&#34;echo </span><span class="k">$(</span>which zsh<span class="k">)</span><span class="s2"> &gt;&gt; /etc/shells&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 更改当前使用的 Shell</span>
</span></span><span class="line"><span class="cl">chsh -s <span class="k">$(</span>which zsh<span class="k">)</span>
</span></span><span class="line"><span class="cl">Changing shell <span class="k">for</span> dejavu.
</span></span><span class="line"><span class="cl">Password <span class="k">for</span> dejavu: <span class="c1"># 输入密码即可</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 验证当前使用的 Shell</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$SHELL</span>
</span></span><span class="line"><span class="cl">/opt/homebrew/bin/zsh
</span></span></code></pre></div><p>如果你的 macOS 系统语言是中文，终端里会使用系统语言作为 <code>locale</code> 设置，我想要终端里的 Shell 显示语言为英语，可以编辑 zsh 配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 编辑 zsh 配置用户</span>
</span></span><span class="line"><span class="cl">vim ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="c1"># 在开头加入以下配置</span>
</span></span><span class="line"><span class="cl"><span class="c1"># You may need to manually set your language environment</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span></span></code></pre></div><h3 id="oh-my-zsh">oh-my-zsh</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 通过 cURL 安装</span>
</span></span><span class="line"><span class="cl">sh -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 或是通过 Wget 安装</span>
</span></span><span class="line"><span class="cl">sh -c <span class="s2">&#34;</span><span class="k">$(</span>wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>oh-my-zsh 的默认主题是 <code>robbyrussell</code>，修改为 &ldquo;pygmalion&rdquo;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 编辑配置文件</span>
</span></span><span class="line"><span class="cl">vim ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="c1"># 找到 ZSH_THEME 字段</span>
</span></span><span class="line"><span class="cl"><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&#34;robbyrussell&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将 robbyrussell 改为 ys 即可</span>
</span></span><span class="line"><span class="cl"><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&#34;pygmalion&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使配置文件生效</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><p>接下来安装几个 Zshell + oh-my-zsh 的增强插件</p>
<h4 id="zsh-z">zsh-z</h4>
<p><a href="https://github.com/agkozak/zsh-z#known-bugs">zsh-z</a> 快速跳转到经常访问的目录，是 <a href="https://github.com/rupa/z">rupa/z</a> 的原生 Zshell 端口，具有附加功能</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 源码安装</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/agkozak/zsh-z <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/zsh-z
</span></span><span class="line"><span class="cl"><span class="c1"># 编辑配置文件</span>
</span></span><span class="line"><span class="cl">vim ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="c1"># 找到 plugins 字段，加入 zsh-autosuggestions</span>
</span></span><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>git zsh-z<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 配置文件生效</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h4 id="zsh-autosuggestions">zsh-autosuggestions</h4>
<p><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a> 可以根据历史记录对输入进行提示和建议</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 源码安装</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/zsh-users/zsh-autosuggestions <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/zsh-autosuggestions
</span></span><span class="line"><span class="cl"><span class="c1"># 编辑配置文件</span>
</span></span><span class="line"><span class="cl">vim ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="c1"># 找到 plugins 字段，加入 zsh-autosuggestions</span>
</span></span><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>git zsh-z zsh-autosuggestions<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 配置文件生效</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h4 id="zsh-syntax-highlighting">zsh-syntax-highlighting</h4>
<p><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a> 可以对 Shell 中的命令进行高亮显示</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="si">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="si">}</span>/plugins/zsh-syntax-highlighting
</span></span></code></pre></div><p>修改 .zshrc ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">plugins</span><span class="o">=(</span>git mvn zsh-z zsh-autosuggestions zsh-syntax-highlighting<span class="o">)</span>
</span></span></code></pre></div><h2 id="git">Git</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install git
</span></span></code></pre></div><p>查看git命令位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">which git
</span></span></code></pre></div><p>配置用户名和邮箱：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;Your Name Here&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email <span class="s2">&#34;your_email@youremail.com&#34;</span>
</span></span></code></pre></div><ul>
<li>这些配置会加到 ~/.gitconfig</li>
</ul>
<p>为了将代码推送到 GitHub 仓库，建议使用HTTPS方法。如果你不想每次都输入用户名和密码的话，可以按照此 <a href="https://help.github.com/articles/set-up-git">描述</a> 说的那样，运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global credential.helper osxkeychain
</span></span></code></pre></div><p>设置默认分支名称为main：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global init.defaultBranch main
</span></span></code></pre></div><p>配置ssh秘钥：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-keygen -t rsa -C <span class="s2">&#34;your_email@example.com&#34;</span>
</span></span></code></pre></div><p>添加 SSH 公钥到 ssh-agent ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">eval</span> <span class="s2">&#34;</span><span class="k">$(</span>ssh-agent -s<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">ssh-add -K ~/.ssh/id_rsa
</span></span></code></pre></div><p>添加SSH 公钥到 GitHub 账户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pbcopy &lt; ~/.ssh/id_rsa.pub
</span></span></code></pre></div><p>打开 <a href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a>，然后添加。</p>
<p>macOS 的 Finder 会在目录下生成一些隐藏文件（如 <code>.DS_Store</code>），我们可以使用 GitHub 维护的 macOS <code>.gitignore</code> 模板，并让它对当前用户所有的 Git 存储库都生效</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl https://raw.githubusercontent.com/github/gitignore/master/Global/macOS.gitignore -o ~/.gitignore
</span></span><span class="line"><span class="cl"><span class="c1"># 附加到全局 .gitignore 文件</span>
</span></span><span class="line"><span class="cl">git config --global core.excludesfile ~/.gitignore
</span></span></code></pre></div><h2 id="java">Java</h2>
<p>下载 Oracle JDK：</p>
<ul>
<li><a href="http://support.apple.com/downloads/DL1572/en_US/JavaForOSX2013-05.dmg">jdk6</a></li>
<li><a href="http://download.oracle.com/otn-pub/java/jdk/7u60-b19/jdk-7u60-macosx-x64.dmg">jdk7</a></li>
</ul>
<p>设置 java_home 为 1.8:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;export JAVA_HOME=$(/usr/libexec/java_home -v 1.8) &#39;</span> &gt;&gt; ~/.zshrc
</span></span></code></pre></div><p>安装OpenJDK：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install openjdk
</span></span></code></pre></div><h3 id="sdkman">SDKMAN</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> curl -s <span class="s2">&#34;https://get.sdkman.io&#34;</span> <span class="p">|</span> bash
</span></span></code></pre></div><p>安装complete：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> <span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.sdkman/bin/sdkman-init.sh&#34;</span>
</span></span></code></pre></div><p>查看版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sdk version
</span></span></code></pre></div><p>使用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1">#安装jdk</span>
</span></span><span class="line"><span class="cl">sdk install java
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#安装scala</span>
</span></span><span class="line"><span class="cl">sdk install scala 2.12.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#卸载</span>
</span></span><span class="line"><span class="cl">sdk uninstall scala 2.11.6
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#查看</span>
</span></span><span class="line"><span class="cl">sdk list
</span></span></code></pre></div><h3 id="maven">Maven</h3>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install maven
</span></span></code></pre></div><h2 id="nodejs">Node.js</h2>
<p>安装node：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install node
</span></span></code></pre></div><h3 id="nvs">nvs</h3>
<p>Linux / macOS 环境通过 Git Clone 对应的项目即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">export</span> <span class="nv">NVS_HOME</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.nvs&#34;</span>
</span></span><span class="line"><span class="cl">$ git clone https://github.com/jasongin/nvs --depth<span class="o">=</span><span class="m">1</span> <span class="s2">&#34;</span><span class="nv">$NVS_HOME</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">$ . <span class="s2">&#34;</span><span class="nv">$NVS_HOME</span><span class="s2">/nvs.sh&#34;</span> install
</span></span></code></pre></div><p>在国内由于大家都懂的原因，需要把对应的镜像地址修改下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ nvs remote node https://npm.taobao.org/mirrors/node/
</span></span><span class="line"><span class="cl">$ nvs remote
</span></span></code></pre></div><p>通过以下命令，即可非常简单的安装 Node.js 最新的 LTS 版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装最新的 LTS 版本</span>
</span></span><span class="line"><span class="cl">$ nvs add lts
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置为默认版本</span>
</span></span><span class="line"><span class="cl">$ nvs link lts
</span></span></code></pre></div><p>安装其他版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装其他版本尝尝鲜</span>
</span></span><span class="line"><span class="cl">$ nvs add <span class="m">12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看已安装的版本</span>
</span></span><span class="line"><span class="cl">$ nvs ls
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在当前 Shell 切换版本</span>
</span></span><span class="line"><span class="cl">$ nvs use <span class="m">12</span>
</span></span></code></pre></div><p>更多指令参见 <code>nvs --help</code> 。</p>
<h2 id="go">Go</h2>
<p>安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install go
</span></span></code></pre></div><p>设置环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;export GOPATH=</span><span class="nv">$HOME</span><span class="s2">/workspace/goProjects&#34;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;export GOBIN=</span><span class="nv">$GOPATH</span><span class="s2">/bin&#34;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;export PATH=</span><span class="nv">$GOPATH</span><span class="s2">:</span><span class="nv">$GOBIN</span><span class="s2">:</span><span class="nv">$PATH</span><span class="s2">&#34;</span> &gt;&gt; ~/.zshrc
</span></span><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h2 id="python">Python</h2>
<p>MacOS 上通过 brew 安装</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install python3
</span></span></code></pre></div><p>查看 python3 安装路径：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ which python3
</span></span><span class="line"><span class="cl">/opt/homebrew/bin/python3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="nb">type</span> python3
</span></span><span class="line"><span class="cl">python3 is /opt/homebrew/bin/python3
</span></span></code></pre></div><p>查看版本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python --version
</span></span></code></pre></div><p>修改 ~/.zshrc，设置环境变量：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PYTHON_HOME</span><span class="o">=</span>/opt/homebrew/opt/python@3.11
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PYTHON_HOME</span>/bin:<span class="nv">$PATH</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">python</span><span class="o">=</span>python3
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">pip</span><span class="o">=</span>pip3
</span></span></code></pre></div><p>使配置生效：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc
</span></span></code></pre></div><h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="https://sourabhbajaj.com/mac-setup/">https://sourabhbajaj.com/mac-setup/</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>从零开始搭建个人博客</title>
      <link>https://blog.chensoul.com/posts/2021/09/09/build-personal-blog-from-zero/</link>
      <pubDate>Thu, 09 Sep 2021 18:14:34 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2021/09/09/build-personal-blog-from-zero/</guid>
      <description>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。 域名 搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科</description>
      <content:encoded><![CDATA[<p>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。</p>
<h2 id="域名">域名</h2>
<p>搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科上的解释：</p>
<blockquote>
<p><strong>域名</strong>（英语：<strong>Domain Name</strong>），又称<strong>网域</strong>，是由一串用点分隔的名字组成的<a href="https://baike.baidu.com/item/Internet">Internet</a>上某一台<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。</p>
<p>由于<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80/150859">IP地址</a>具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（<a href="https://baike.baidu.com/item/DNS">DNS</a>，Domain Name System）来将域名和<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>相互<a href="https://baike.baidu.com/item/%E6%98%A0%E5%B0%84/20402621">映射</a>，使人更方便地访问<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91/199186">互联网</a>，而不用去记住能够被机器直接读取的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>数串。</p>
</blockquote>
<p>简单来说，IP地址可以标识一台计算机，但是不容易记忆，所以，设计出了域名。而域名就是标识因特网上的一台计算机，由网域名称系统DNS来完成域名和IP之间的映射。</p>
<p>如何注册域名？有很多网站提供域名注册服务，比如国内的：</p>
<ul>
<li><a href="https://www.alibabacloud.com/zh/domain">阿里云</a></li>
<li><a href="https://cloud.tencent.com/act/domainsales">腾讯云</a></li>
<li><a href="https://www.huaweicloud.com/">华为云</a></li>
</ul>
<p>国外的：</p>
<ul>
<li><a href="https://sg.godaddy.com/zh/offers/domain">GoDaddy</a></li>
<li><a href="https://www.namecheap.com/">Namecheap</a></li>
<li><a href="https://console.aws.amazon.com/route53/home?#DomainRegistration:">Amazon</a></li>
</ul>
<p>注册域名的建议：</p>
<ul>
<li>1、建议在正规、出名的网站注册域名，防止网站跑路。我曾经在一个小网站注册了一个域名，使用了几年之后，续期的时候，联系不上对方，导致无法使用该域名，甚至该域名被别人抢注册了。</li>
<li>2、在国内网站注册域名，都需要备案。如果不想备案，请在国外网站注册域名。我的域名 chensoul.com 就是在亚马逊上注册的。一是不想备案，二是对比了上面几个网站，发现亚马逊上的com域名价格相对便宜，所以一次性购买了5年。</li>
<li>3、建议优先注册com域名，域名尽可能的简短并且方便记忆。</li>
</ul>
<p>我曾经注册过的域名：</p>
<ul>
<li>javachen.com、javachen.space、javachen.xyz</li>
<li>huaiu.com</li>
</ul>
<h2 id="服务器">服务器</h2>
<p>注册了域名之后，需要一台服务器运行程序。服务器可以是一台物理机，比如你可以使用自己的电脑作为服务器；也可以是一台虚拟的云服务器，比如在云服务提供商购买一台独立的服务器；也可以使用第三方提供的服务器空间，比如Github上可以部署静态程序。不管哪种方式，服务器都需要有一个公网IP，这样才能在因特网上访问你服务器上部署的程序。有了服务器之后，就可以给服务器公网IP设置域名解析。</p>
<p>我的服务器是在<a href="https://bandwagonhost.com/aff.php?aff=58710">搬瓦工</a>购买的，一年49.99美元。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/bwg-plan.png" alt="bwg-plan"  />
</p>
<h2 id="程序">程序</h2>
<h3 id="安装hugo">安装Hugo</h3>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/hugo-logo.svg" alt="使用 Hugo 搭建博客"  />
</p>
<p>在 Mac 下安装 Hugo：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brew install hugo
</span></span></code></pre></div><h3 id="新建站点">新建站点</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo new site chensoul.github.io -y yaml
</span></span></code></pre></div><p>上述命令会生成一个名为 <code>chensoul.github.io</code> 的文件夹，下面对文件夹结构做个说明：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree chensoul.github.io
</span></span><span class="line"><span class="cl">chensoul.github.io
</span></span><span class="line"><span class="cl">├── archetypes
</span></span><span class="line"><span class="cl">│   └── default.md
</span></span><span class="line"><span class="cl">├── config.yaml
</span></span><span class="line"><span class="cl">├── content
</span></span><span class="line"><span class="cl">├── data
</span></span><span class="line"><span class="cl">├── layouts
</span></span><span class="line"><span class="cl">├── static
</span></span><span class="line"><span class="cl">└── themes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">6</span> directories, <span class="m">2</span> files
</span></span></code></pre></div><p>新建的站点，还没有加入 Git 版本管理，进入到这个目录下，执行一下如下命令，完成 Git Repo 的初始化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> chensoul.github.io
</span></span><span class="line"><span class="cl">git init .
</span></span></code></pre></div><p>新建站点后，我们开始添加主题。</p>
<h3 id="添加主题">添加主题</h3>
<p>在 Hugo 的官网上 <a href="https://themes.gohugo.io/">Hugo Themes</a> 有非常非常多的主题，可以根据自己的喜好选择一个主题。这里，我使用的是 hugo-theme-den 主题。</p>
<p>使用 git submodule&ndash;helper 下载主题到 theme 目录下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git submodule--helper add https://github.com/shaform/hugo-theme-den themes/den --depth<span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git submodule--helper update --init --recursive <span class="c1"># needed when you reclone your repo (submodules may not get cloned automatically)</span>
</span></span></code></pre></div><p>以后，当主题有更新时，执行下面命令更新：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule update --remote --merge
</span></span></code></pre></div><p>如果遇到异常，可以参考<a href="https://xuzhijvn.github.io/zh-cn/posts/other/git-submodule-update-init-recursive/">文章</a>解决。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">fatal: remote error: upload-pack: not our ref fc7223ca00124e8f5b5b354457379071e2fd091b
</span></span></code></pre></div><h3 id="启动">启动</h3>
<p>启动预览：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo server
</span></span></code></pre></div><p>默认是 <code>1313</code> 端口号，在浏览器中直接访问 http://localhost:1313/ 就可以访问到新建的博客了。</p>
<h2 id="定制化">定制化</h2>
<h3 id="站点信息">站点信息</h3>
<p>配置网站的基本信息，将 config.yaml 修改如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">baseURL: https://blog.chensoul.com/
</span></span><span class="line"><span class="cl">title: ChenSoul
</span></span><span class="line"><span class="cl">theme: den
</span></span><span class="line"><span class="cl">enableRobotsTXT: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">enableEmoji: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">hasCJKLanguage: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">preserveTaxonomyNames: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">rssLimit: <span class="m">100</span>
</span></span><span class="line"><span class="cl">page_view_conter: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">enableRelated: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Copyright, appears in the footer</span>
</span></span><span class="line"><span class="cl"><span class="c1"># copyright = &#34;&#34;             # default: author.name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Pagination</span>
</span></span><span class="line"><span class="cl"><span class="c1"># number of entries per page for archives, tags and categories</span>
</span></span><span class="line"><span class="cl"><span class="c1"># since we don&#39;t have list view, recommend a large value</span>
</span></span><span class="line"><span class="cl">paginate: <span class="m">20</span>
</span></span><span class="line"><span class="cl">paginatePath: <span class="s2">&#34;page&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Syntax Hightlight</span>
</span></span><span class="line"><span class="cl">PygmentsCodeFences: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">PygmentsUseClasses: <span class="nb">true</span>    <span class="c1"># required for shhighlight shortcode</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># service plugins</span>
</span></span><span class="line"><span class="cl">disqusShortname: <span class="s2">&#34;&#34;</span>         <span class="c1"># disqus_shortname</span>
</span></span><span class="line"><span class="cl">googleAnalytics: <span class="s2">&#34;&#34;</span>         <span class="c1"># UA-XXXXXXXX-X</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># language support # en / zh / other... translations present in i18n/</span>
</span></span><span class="line"><span class="cl">defaultContentLanguage: <span class="s2">&#34;zh&#34;</span>           <span class="c1"># Default language to use</span>
</span></span><span class="line"><span class="cl">defaultContentLanguageInSubdir: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">permalinks:
</span></span><span class="line"><span class="cl">  posts: /posts/:slug/
</span></span><span class="line"><span class="cl">  categories: /categories/:slug/
</span></span><span class="line"><span class="cl">  tags: /tags/:slug/
</span></span><span class="line"><span class="cl">  pages: /:slug/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">author:
</span></span><span class="line"><span class="cl">  name: chensoul
</span></span><span class="line"><span class="cl">sitemap:
</span></span><span class="line"><span class="cl">  changefreq: weekly
</span></span><span class="line"><span class="cl">  priority: 0.5
</span></span><span class="line"><span class="cl">  filename: sitemap.xml
</span></span><span class="line"><span class="cl">params:
</span></span><span class="line"><span class="cl">  since: <span class="s2">&#34;2020&#34;</span>
</span></span><span class="line"><span class="cl">  rssFullContent: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">  keywords:
</span></span><span class="line"><span class="cl">    - devops
</span></span><span class="line"><span class="cl">    - programming
</span></span><span class="line"><span class="cl">  description: Programming <span class="p">|</span> Devops
</span></span><span class="line"><span class="cl">  logoTitle: ChenSoul
</span></span><span class="line"><span class="cl">  siteLogoImage: images/fly.png
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># headerTitle = &#34;chensoul&#34;                   # default: title</span>
</span></span><span class="line"><span class="cl">  headerImage: images/background.webp
</span></span><span class="line"><span class="cl">  showAuthorCard: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">  showMenuLanguages: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">  autoLoadComments: <span class="nb">false</span>
</span></span><span class="line"><span class="cl">  paginateOriginalStyle: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># The date format to use; for a list of valid formats, see https://gohugo.io/functions/format/</span>
</span></span><span class="line"><span class="cl">  dateFormatToUse: 2006-01-02
</span></span><span class="line"><span class="cl">  google_verification: <span class="s2">&#34;D8XBzUhT4irNUQLKut79HFni0v3Xow4FY-oxUcsUlVk&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Link custom CSS and JS assets</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   (relative to /static/css and /static/js respectively)</span>
</span></span><span class="line"><span class="cl">  customCSS: <span class="o">[]</span>
</span></span><span class="line"><span class="cl">  customJS: <span class="o">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">markup:
</span></span><span class="line"><span class="cl">  goldmark:
</span></span><span class="line"><span class="cl">    renderer:
</span></span><span class="line"><span class="cl">      unsafe: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ------------------------------------- #</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ---- Related Articles --------------- #</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ------------------------------------- #</span>
</span></span><span class="line"><span class="cl">related:
</span></span><span class="line"><span class="cl">  <span class="c1"># Only include matches with rank &gt;= threshold. This is a normalized rank between 0 and 100.</span>
</span></span><span class="line"><span class="cl">  threshold: <span class="m">50</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># To get stable &#34;See also&#34; sections we, by default, exclude newer related pages.</span>
</span></span><span class="line"><span class="cl">  includeNewer: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Will lower case keywords in both queries and in the indexes.</span>
</span></span><span class="line"><span class="cl">  toLower: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  indices:
</span></span><span class="line"><span class="cl">    - name: categories
</span></span><span class="line"><span class="cl">      weight: <span class="m">200</span>
</span></span><span class="line"><span class="cl">    - name: keywords
</span></span><span class="line"><span class="cl">      weight: <span class="m">150</span>
</span></span><span class="line"><span class="cl">    - name: tags
</span></span><span class="line"><span class="cl">      weight: <span class="m">100</span>
</span></span><span class="line"><span class="cl">languages:
</span></span><span class="line"><span class="cl">  zh:
</span></span><span class="line"><span class="cl">    languageCode: zh
</span></span><span class="line"><span class="cl">    languageName: 中文
</span></span><span class="line"><span class="cl">    contentDir: content
</span></span><span class="line"><span class="cl">    weight: <span class="m">1</span>
</span></span><span class="line"><span class="cl">    params:
</span></span><span class="line"><span class="cl">      description: Devops <span class="p">|</span> Programming
</span></span><span class="line"><span class="cl">    menu:
</span></span><span class="line"><span class="cl">      main:
</span></span><span class="line"><span class="cl">        - name: 思考
</span></span><span class="line"><span class="cl">          weight: <span class="m">10</span>
</span></span><span class="line"><span class="cl">          identifier: idea
</span></span><span class="line"><span class="cl">          url: categories/idea/
</span></span><span class="line"><span class="cl">      social:
</span></span><span class="line"><span class="cl">        - name: Telegram
</span></span><span class="line"><span class="cl">          weight: <span class="m">10</span>
</span></span><span class="line"><span class="cl">          identifier: telegram
</span></span><span class="line"><span class="cl">          url: https://t.me/chensoul_share
</span></span><span class="line"><span class="cl">        - name: Twitter
</span></span><span class="line"><span class="cl">          weight: <span class="m">20</span>
</span></span><span class="line"><span class="cl">          identifier: twitter
</span></span><span class="line"><span class="cl">          url: https://twitter.com/chensoul_eth
</span></span><span class="line"><span class="cl">        - name: BiliBili
</span></span><span class="line"><span class="cl">          weight: <span class="m">40</span>
</span></span><span class="line"><span class="cl">          identifier: bilibili
</span></span><span class="line"><span class="cl">          url: https://space.bilibili.com/699805065/
</span></span><span class="line"><span class="cl">      links:
</span></span><span class="line"><span class="cl">        - name: GitHub
</span></span><span class="line"><span class="cl">          weight: <span class="m">10</span>
</span></span><span class="line"><span class="cl">          identifier: github
</span></span><span class="line"><span class="cl">          url: https://github.com/chensoul
</span></span><span class="line"><span class="cl">        - name: Services
</span></span><span class="line"><span class="cl">          weight: <span class="m">20</span>
</span></span><span class="line"><span class="cl">          identifier: services-status
</span></span><span class="line"><span class="cl">          url: https://uptime.chensoul.com/status/services
</span></span><span class="line"><span class="cl">        - name: Analytics
</span></span><span class="line"><span class="cl">          weight: <span class="m">30</span>
</span></span><span class="line"><span class="cl">          identifier: chensoul-analytics
</span></span><span class="line"><span class="cl">          url: https://data.chensoul.com/share/8YKX7FUa/pseudoyu-blog
</span></span></code></pre></div><h2 id="部署">部署</h2>
<h3 id="github-actions部署">GitHub Actions部署</h3>
<p><strong>1、首先在github里创建一个仓库：chensoul.github.io</strong></p>
<p><strong>2、将本地文件提交到github</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> chensoul.github.io
</span></span><span class="line"><span class="cl">git init .
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;# chensoul.github.io&#34;</span> &gt;&gt; README.md
</span></span><span class="line"><span class="cl">git remote add origin git@github.com:chensoul/chensoul.github.io.git
</span></span></code></pre></div><p><strong>3、将本地代码推送到仓库</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git commit -m <span class="s2">&#34;first commit&#34;</span>
</span></span><span class="line"><span class="cl">git push -u origin main
</span></span></code></pre></div><p><strong>4、创建 GitHub Actions 的 workflow</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p .github/workflows
</span></span><span class="line"><span class="cl">touch .github/workflows/gh-page.yml
</span></span></code></pre></div><p>gh-page.yml内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">timeout-minutes</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="l">latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_branch</span><span class="p">:</span><span class="w"> </span><span class="l">gh-pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span></code></pre></div><p>上面的工作流是在 gh-pages 分支上触发，当有代码提交时候，会运行 hugo 命令生成静态文件（public目录），并且将他们推送到main分支。</p>
<p>所以，我们需要基于当前分支创建一个新分支 gh-pages ，并且推送到远程仓库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch gh-pages
</span></span><span class="line"><span class="cl">git checkout gh-pages
</span></span><span class="line"><span class="cl">git push origin gh-pages
</span></span></code></pre></div><p><strong>5、修改代码，推送到仓库，触发工作流</strong></p>
<p>在本地修改某个文件，提交代码，然后在 github <a href="https://github.com/chensoul/chensoul.github.io/actions">网站</a> 查看工作流</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git push origin gh-pages
</span></span></code></pre></div><p><strong>7、设置自定义域名</strong></p>
<p>参考<a href="https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-a-subdomain">管理 GitHub Pages 站点的自定义域</a>，添加一个自定义域名：blog.chensoul.com：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/github-page-settings.png" alt="github-page-settings"  />
</p>
<p>或者，在仓库的 static 目录创建一个CNAME文件，内容为：blog.chensoul.com，然后，保存提交，Github Actions会将该文件推送到main分支。</p>
<p>然后，在亚马逊网站添加 <a href="https://console.aws.amazon.com/route53/v2/hostedzones#">CNAME记录</a>：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/amazon-dns-settings.png" alt="amazon-dns-settings"  />
</p>
<p>8、部署到 CloudFlare Pages</p>
<p>参考 <a href="https://hee.ink/p/%E4%BB%8E-github-pages-%E8%BF%81%E7%A7%BB%E5%88%B0-cloudflare-pages-%E7%9A%84%E4%BD%93%E9%AA%8C%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%B0%8F%E8%AE%B0/">从 GitHub Pages 迁移到 CloudFlare Pages 的体验与踩坑小记</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
