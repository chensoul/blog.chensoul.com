<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on ChenSoul</title>
    <link>https://blog.chensoul.cc/posts/</link>
    <description>Recent content in Posts on ChenSoul</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 27 Aug 2024 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ActiveMQ源码-BrokerService和PersistenceAdapter</title>
      <link>https://blog.chensoul.cc/posts/2024/08/27/activemq-source-code-broker-service/</link>
      <pubDate>Tue, 27 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/27/activemq-source-code-broker-service/</guid>
      <description>activemq-broker 模块 test/java 目录下有个 IDERunner 类：
public class IDERunner { private static final boolean TRANSPORT_TRACE = false; public static void main(String[]args) throws Exception { BrokerService brokerService = new BrokerService(); // brokerService.addConnector( // &amp;#34;tcp://0.0.0.0:61616?trace=&amp;#34; + TRANSPORT_TRACE + // &amp;#34;&amp;amp;transport.wireFormat.maxFrameSize=104857600&amp;#34;); brokerService.setPersistent(false); brokerService.setUseJmx(false); brokerService.setAdvisorySupport(false); brokerService.start(); brokerService.waitUntilStopped(); } } 注释掉 brokerService 调用 addConnector 方法的三行代码，然后 debug 运行该类的 main 方法。
BrokerService BrokerService 管理 ActiveMQ Broker 的生命周期。BrokerService 由许多传输连接器、网络连接器和一系列属性组成，这些属性可用于在延迟创建代理时对其进行配置。
BrokerService 类实现了 Service 接口。Service 接口是 ActiveMQ 组件的核心生命周期接口。如果有标准方法，最好将此接口注册到 Spring，以便它将启动/ 停止方法视为 org.springframework.beans.factory.InitializingBean 和 org.springframework. beans.factory.DisposableBean 的方法
public interface Service { void start() throws Exception; void stop() throws Exception; } BrokerService 类没有构造方法，有一个 static 代码块：
static { try { Boolean bouncyCastleNotAdded = Boolean.getBoolean(&amp;#34;org.apache.activemq.broker.BouncyCastleNotAdded&amp;#34;); if (bouncyCastleNotAdded == null || bouncyCastleNotAdded == false) { ClassLoader loader = BrokerService.</description>
    </item>
    <item>
      <title>ThingsBoard源码编译和Idea运行</title>
      <link>https://blog.chensoul.cc/posts/2024/08/27/thingsboard-code-source-compile/</link>
      <pubDate>Tue, 27 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/27/thingsboard-code-source-compile/</guid>
      <description>ThingsBoard 源码地址：https://github.com/thingsboard/thingsboard，从 3.7 版本之后，要求 JDK17。官方提供了源码编译的文档：Building from sources
源码编译 下载代码：
git clone git@github.com:thingsboard/thingsboard.git 设置当前 JDK 版本为 17 以上。这里我使用 sdkman 切换 java。
sdk use java 17.0.12-tem 终端编译源码：
cd thingsboard mvn clean install -Dmaven.test.skip=true 如果在编译过程中提示找不到 Gradle：
[ERROR] Failed to execute goal org.thingsboard:gradle-maven-plugin:1.0.12:invoke (default) on project http: org.gradle.tooling.BuildException: Could not execute build using connection to Gradle distribution &amp;#39;https://services.gradle.org/distributions/gradle-7.3.3-bin.zip&amp;#39;. -&amp;gt; [Help 1] 往上查看详细异常日志：
* What went wrong: Could not compile build file &amp;#39;/Users/chensoul/Codes/github/thingsboard/packaging/java/build.gradle&amp;#39;. &amp;gt; startup failed: General error during conversion: Unsupported class file major version 65 java.lang.IllegalArgumentException: Unsupported class file major version 65 可以看到是 JDK 版本过高的原因。需要确认 JDK 版本使用 17，不能是 21。
如果 maven 下载太慢，则修改 mirrors 节点如下：</description>
    </item>
    <item>
      <title>ActiveMQ源码本地调试运行</title>
      <link>https://blog.chensoul.cc/posts/2024/08/09/debug-activemq-source-code/</link>
      <pubDate>Fri, 09 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/09/debug-activemq-source-code/</guid>
      <description>源码构建 1、从 https://github.com/apache/activemq 下载源码
git clone https://github.com/apache/activemq 2、切换至 activemq-5.18.x 分支
cd activemq git checkout activemq-5.18.x 3、构建源码
mvn package -DskipTests 构建成功之后，在 assembly/target 目录可以看到打包好的压缩文件。
在 Idea 中运行代码 activemq-console 在 Idea 中运行代码 activemq-console，启动 activemq：
1、在 idea 中打开项目
2、解压 assembly/target 目录下生成的压缩文件，将 conf、webapps 和 lib 目录拷贝到项目的根目录下面。
3、在idea中选中子模块 activemq-console，右击 选择 Open Module Settings —&amp;gt; Modules —&amp;gt; Dependencies，点击+(加号) —&amp;gt;选择 JARS or directories，把 lib 中的包（包括子目录下的）全部导入
4、配置从 activemq-console 下的 Main 类启动，在 Program arguments 添加 start
5、debug 运行 Main.java 类
在 Idea 中运行单元测试类 分析 Main.java 类的 main 方法，调用链如下：
Main.java -&amp;gt; ShellCommand.java -&amp;gt; StartCommand.java -&amp;gt; BrokerService.java 从 BrokerService 类，可以看到启动 broker 的关键代码如下：
final BrokerService broker; try { // If no config uri, use default setting if (brokerURIs.</description>
    </item>
    <item>
      <title>[译]关系数据库设计速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-relational-database/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-relational-database/</guid>
      <description>原文链接：https://blog.bytebytego.com/p/a-crash-course-on-relational-database
在当今数据驱动的世界中，高效存储和管理信息是各种规模的企业和组织的关键要求。
关系数据库提供了一个强大的框架，用于根据实体之间明确定义的关系来存储和检索数据。它们提供了一种结构化的数据管理方法，使用户能够：
定义表 建立关系 执行复杂查询以从存储的信息中提取有意义的见解 然而，仅仅使用关系数据库还不足以获得其好处。
有效的数据库设计对于优化性能、确保数据完整性和促进高效的数据检索至关重要。数据库设计原则（例如规范化、索引、连接和关系）在创建结构良好且性能良好的数据库中起着至关重要的作用。
在这篇文章中，我们将研究关系数据库的基础知识，探讨其关键概念、管理系统以及有效数据库设计的基础原则。
什么是关系数据库？ 关系数据库是一种将数据组织成结构化表格（也称为关系）的数据库。这些表格由行（记录）和列（字段）组成，形成表格结构，可实现高效的数据存储和检索。
关系数据库的强大之处在于它能够在多个表之间建立关系。
通过定义相关表之间的连接，可以链接和组合信息。这允许跨多个表进行复杂的查询和数据检索操作，使您能够以各种方式访问和分析数据。
为了有效地使用关系数据库，我们需要一个关系数据库管理系统 (RDBMS)。
RDBMS 是一种用于创建、管理和与关系数据库交互的软件应用程序。
RDBMS 提供的一些关键功能包括：
数据定义： 定义数据库的结构，包括表、列、数据类型和约束。 数据操作： 对数据库中存储的数据执行各种操作。包括插入新记录、更新现有记录、删除记录等。 数据完整性： RDBMS 强制执行数据完整性规则来维护数据的准确性和一致性。 数据安全： RDBMS 还通过定义用户角色、权限和身份验证措施来提供控制数据库访问的机制。 查询优化： RDBMS 优化复杂查询的执行，以高效检索数据。它采用各种技术，例如索引和查询优化算法。 市场上有多种 RDBMS，每种都具有一组特性和功能。以下是一些示例：
MySQL： 一种开源 RDBMS，以其简单性、可靠性和广泛采用而闻名。 PostgreSQL： 一个强大的开源 RDBMS，具有高级功能和对数据完整性的强大支持。 Oracle 数据库： 一种功能全面、丰富的 RDBMS，常用于企业环境。 SQL：关系数据库语言 SQL（结构化查询语言）是用于与关系数据库交互的标准编程语言。
其主要优势之一是通用性。在 MySQL、PostgreSQL、Oracle 等上工作时，语法基本保持不变。
这种可移植性使开发人员能够以最小的学习曲线从一个 RDBMS 切换到另一个 RDBMS。
SQL 提供了一套全面的命令和语法，允许开发人员和数据库管理员对数据库中存储的数据执行各种操作。
SQL 支持四种基本的数据操作，通常称为 CRUD：
创建： 将新记录插入数据库表，有效地创建新的数据条目。 读取： 根据特定条件从一个或多个表中检索数据。 更新： 修改数据库中现有的记录。 删除： 从数据库表中删除不再需要或满足特定删除条件的记录。 除了数据操作之外，SQL 还提供定义和修改数据库结构的命令。
基本 RDBMS 概念 使用关系数据库时，了解基本概念和术语至关重要。
让我们探讨一些关键术语：
表： 按行和列组织的相关数据的结构化集合。每个表代表一个特定的实体或概念，例如客户、订单或产品。 行： 行，也称为记录或元组，表示表中的单个实例或条目。例如，在“客户”表中，每一行都属于具有某些属性的单个客户。 列： 列，也称为字段或属性，表示表中特定记录的特定特征或属性。列用于组织和分类表中的数据。 主键： 主键是一列或多列的组合，用作表中每条记录的唯一标识符。它通过防止主键列中的重复值或空值来确保数据的唯一性和完整性。 外键： 外键是表中引用另一个表的主键的列或列组合。它建立两个表之间的关系，并有助于加强引用完整性和数据一致性。 连接： 连接是一种根据相关列将两个或多个表中的行组合在一起的操作。通过指定组合表的条件，可以从多个表中检索数据。 索引： 索引是一种数据结构，可提高数据库中数据检索操作的性能。它根据一个或多个列创建表中数据的排序表示。 视图： 视图是从一个或多个基础表动态生成的虚拟表。它提供数据的自定义和简化表示。视图可用于安全性、简化或数据抽象目的。 关系数据库中的键 键是关系数据库设计中的基本组件，在数据完整性和建立表间关系方面发挥着至关重要的作用。
它们作为记录的唯一标识符，使数据检索和处理更加高效。
让我们看看不同类型的键及其在关系数据库设计中的意义。
主键和索引 主键是唯一标识表中每条记录的一列或多列的组合。
它确保每条记录都是唯一的，并且可以在表中轻松找到。主键约束强制主键列的唯一性和非空性。
下面的示例显示如何将表中的某一列定义为主键：
CREATE TABLE books ( book_id INT PRIMARY KEY, title VARCHAR(100), author VARCHAR(100), isbn VARCHAR(20) UNIQUE, publication_year INT, genre VARCHAR(50) ); 通过指定 book_id INT PRIMARY KEY，我们将 book_id 列声明为“books”表的主键。换句话说，book_id 列中的每个值都必须是唯一的，并且不能为空。</description>
    </item>
    <item>
      <title>[译]分布式系统速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-distributed-systems/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-distributed-systems/</guid>
      <description>原文链接：https://blog.bytebytego.com/p/a-crash-course-on-distributed-systems
分布式系统是多台计算机（也称为节点）的集合，它们协作执行特定任务或提供服务。
这些节点在物理上是分开的，并通过网络传递消息相互通信。分布式系统可以跨越地理边界，使其能够利用来自不同位置的资源。
分布式系统有几个区别于传统集中式系统的特点：
分布式系统中的计算机在物理上是分开的，并通过网络连接。它们不共享内存或公共时钟。 从外部视角来看，分布式系统对于最终用户来说是一个单一、统一的实体。 分布式系统提供了在系统中添加或删除计算机的灵活性。 分布式系统中的节点需要相互协调并达成一致才能一致地执行操作。 分布式系统中的节点可能独立发生故障，并且消息可能会在网络上丢失或延迟。 分布式系统在我们的日常生活中无处不在。例如 Google 搜索等大型 Web 应用程序、在线银行系统、多人游戏等。这些系统利用多台计算机协同工作，提供无缝且响应迅速的用户体验。
在本文中，我们将探讨分布式系统的优势和挑战。我们还将讨论用于解决这些挑战并确保分布式系统可靠运行的常用方法和技术。
理解分布式系统 “分布式系统”这个术语有时会让开发人员感到困惑。
一些常见的混淆是关于分散系统和并行系统。
让我们在分布式系统的背景下了解这些术语的含义以及它们有何异同。
分散式系统与分布式系统 “分散式系统”和“分布式系统”等术语经常互换使用，但它们有一个关键的区别。
虽然这两种类型的系统都涉及多个组件协同工作，但决策过程却使它们有所区别。
在去中心化系统中，这也是一种分布式系统，没有任何一个组件能够完全控制决策过程。相反，每个组件都拥有决策的一部分，但不拥有做出独立决策所需的完整信息。
并行系统与分布式系统 与分布式系统密切相关的另一个术语是并行系统。
分布式和并行系统都旨在扩大计算能力，但它们使用不同的方法实现这一目标。
在并行计算中，一台机器内的多个处理器同时执行多个任务。这些处理器通常可以访问共享内存，从而可以交换数据并高效地协调其活动。
另一方面，分布式系统由多台不共享内存的自主机器组成。这些机器通过网络传递消息来通信和协调其操作。每台机器独立运行，通过执行分配的任务为整体计算做出贡献。
分布式系统的主要优点 虽然设计和构建分布式系统比传统的集中式系统更复杂，但它们的优势使得付出的努力值得。
让我们探索分布式系统的一些主要优势：
可扩展性：垂直扩展涉及增加单台机器的硬件资源，通常受到物理约束的限制。例如，单台机器可以添加的处理器核心数量是有限的。相比之下，分布式系统支持水平扩展，可以将其他商用机器添加到系统中。这样可以通过添加相对便宜的硬件来扩展系统。 可靠性：与集中式系统相比，分布式系统对故障的恢复能力更强。由于数据在多个节点上复制，因此单个节点或部分节点的故障不一定会导致整个系统崩溃。其余节点可以继续运行，尽管容量会降低，但可以确保整个系统保持正常运行。 性能：分布式计算通常涉及将复杂的工作负载分解为更小、更易于管理的部分，这些部分可以在多台机器上同时处理。这种并行处理能力可以提高计算密集型任务（例如矩阵乘法或大规模数据处理）的性能。 分布式系统的挑战 分布式系统在操作方面也面临多重挑战。
了解这些挑战和克服这些挑战的技术是利用分布式系统的关键。
让我们探讨分布式系统的主要挑战以及处理这些挑战的技术。
沟通 在分布式系统中，节点需要通过网络相互通信和协调，以作为一个有凝聚力的单元发挥作用。
然而，由于底层网络基础设施不可靠，这种通信具有挑战性。
负责在节点之间传递数据包的互联网协议 (IP) 仅提供“尽力而为”的服务。这意味着网络无法保证数据包的可靠传递。
数据包传输过程中可能会出现几个问题：
数据包丢失：由于网络拥塞、硬件故障或其他因素，数据包可能在传输过程中丢失或丢弃。 数据包重复：在某些情况下，数据包可能会被重复，导致同一数据包的多个副本被传送到目标节点。 数据包损坏：数据包在传输过程中可能会损坏。损坏的数据包可能包含无效或不正确的数据，从而导致通信错误。 无序传送：数据包到达目标节点的顺序可能与发送时的顺序不同。 在这个不可靠的基础上建立可靠的沟通是一项重大挑战。
分布式系统处理这些问题的一些关键技术如下：
1 - 使用 TCP 进行可靠通信 传输控制协议 (TCP) 是一种基础协议，它提供了一种强大的机制来确保进程之间字节流的可靠、按序传输，使其成为分布式系统中可靠数据传输的基石。
它采用了几种关键机制来克服网络固有的不可靠性：
TCP 将字节流分割成更小的、有序的数据包（称为段）。 它要求接收方在收到数据包后向发送方发送确认（ACK）。 TCP 使用校验和来验证传输数据的完整性。 TCP 实现流量控制以防止发送方用大量数据淹没接收方。 最后，TCP 采用拥塞控制机制来适应可用的网络带宽。 下图显示了客户端和服务器之间建立连接的 TCP 三次握手过程。
2 - 使用 TLS 确保通信安全 尽管 TCP 能够确保在不可靠的网络上进行可靠通信，但它并未解决数据传输的安全问题。这时，传输层安全性 (TLS) 协议便应运而生。
TLS 是一种加密协议，为 TCP 建立的通信通道添加加密、身份验证和完整性。
TLS 使用多种机制来保护节点之间的通信：
TLS 使用非对称和对称加密的组合来保护数据的机密性。 TLS 依靠数字证书来验证通信方的身份。 为了确保传输数据的完整性，TLS 在每条消息中都包含校验和或消息认证码。 3 - 使用 DNS 进行服务发现 在分布式系统中，节点需要一种机制来发现彼此并相互通信。这就是域名系统 (DNS) 发挥作用的地方，它解决了服务发现问题。</description>
    </item>
    <item>
      <title>[译]数据库分片速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-sharding/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-sharding/</guid>
      <description>原文链接：https://blog.bytebytego.com/p/a-crash-course-in-database-sharding
随着应用程序越来越受欢迎，它会吸引更多活跃用户并加入更多功能。这种增长导致每日数据生成量增加，从业务角度来看，这是一个积极的指标。
然而，它也给应用程序的架构带来挑战，特别是在数据库可扩展性方面。
数据库是任何应用程序的关键组件，但它也是最难水平扩展的组件之一。当应用程序的流量和数据量增加时，数据库可能会成为性能瓶颈，影响用户体验。
分片是一种解决数据库横向扩展难题的技术。它涉及将数据库划分为更小、更易于管理的单元（称为分片）。
在这篇文章中，我们将介绍数据库分片的基础知识，探讨其各种方法、技术考虑因素，以及展示公司如何实施分片来扩展其数据库的真实案例研究。
什么是分片？ 分片是一种架构模式，用于解决管理和查询数据库中大型数据集的难题。它涉及将大型数据库拆分为更小、更易于管理的部分（称为分片）。
共享建立在水平分区的概念之上，水平分区涉及根据分区键将表的行分成多个表。这些表称为分区。跨分区分布数据可减少查询和操作数据所需的工作量。
下图说明了水平分区的一个例子。
数据库分片将水平分区提升到了一个新的水平。分区将所有数据组存储在同一台计算机中，而分片则将它们分布在不同的计算机或节点上。这种方法通过利用多台机器的资源来实现更好的可扩展性和性能。
值得注意的是，不同数据库使用的分片术语有所不同。
在 MongoDB 中，分区称为分片 (shard)。 Couchbase 使用术语 vBucket 来表示分片。 Cassandra 将分片称为 vNode。 尽管术语存在差异，但其基本概念保持不变：将数据分成更小、更易于管理的单元，以提高查询性能和可扩展性。
数据库分片的好处 数据库分片有几个主要优点：
可扩展性： 分片的主要动机是实现可扩展性。通过将大型数据集分布在多个分片上，查询负载可以分散到多个节点上。对于对单个分片进行操作的查询，每个节点都可以独立执行针对其分配数据的查询。此外，可以在运行时动态添加新分片，而无需关闭应用程序进行维护。 性能提升： 从单个大型数据库中检索数据可能非常耗时。查询需要搜索大量行才能找到所需数据。相比之下，与整个数据库相比，分片包含的行子集更小。由于查询需要处理的行更少，因此搜索空间的减少可加快数据检索速度。 可用性： 在单片数据库架构中，如果托管数据库的节点发生故障，依赖该数据库的应用程序也会停机。数据库分片通过将数据分布在多个节点上来降低这种风险。如果发生节点故障，应用程序可以使用剩余的分片继续运行。 分片和复制 分片通常与复制一起使用，以实现分布式数据库系统中的高可用性和容错能力。
复制涉及创建数据的多个副本并将其存储在不同的节点上。在主从复制模型中，一个节点充当主节点并处理写入操作，而从节点复制主节点的数据并处理读取操作。
通过在多个节点上复制每个分片，系统可确保即使个别节点发生故障，数据仍可访问。一个节点可以存储多个分片，每个分片在主从复制模型中可以是主分片或从分片。
下图说明了一种安排，其中每个分片的领导者被分配给一个节点，而其追随者分布在其他节点上：
在此设置中，一个节点可以同时充当某些分区的领导者和其他分区的追随者。这种分布式架构允许系统在发生节点故障或网络中断时保持数据可用性和弹性。
分片类型 数据库分片的主要目标是在多个节点上均匀分布数据和查询负载。
然而，如果数据分区不平衡，一些分片最终可能会处理比其他分片多得多的数据或查询。这种情况称为倾斜分片，它会削弱分片的优势。
在极端情况下，设计不良的分片策略可能导致单个分片承担全部负载，而其余分片保持空闲状态。
这种情况称为热点，其中一个节点因过高的负载而变得不堪重负。
为了减轻分片倾斜和热点的风险，选择适当的分片策略以确保数据和查询在分片之间均匀分布至关重要。
我们来了解一些常用的分片策略：
基于范围的分片 基于范围的分片是一种根据一系列值拆分数据库行的技术。
在这种方法中，每个分片都会分配一个连续的键范围，从最小值到最大值。每个分片内的键都按排序顺序维护，以实现高效的范围扫描。
为了说明这个概念，让我们考虑一个存储产品信息的产品数据库。
可以应用基于范围的分片，根据产品的价格范围将数据库拆分为不同的分片。例如，一个分片可以存储价格范围在 0 美元到 75 美元之间的所有产品，而另一个分片可以包含价格范围在 76 美元到 150 美元之间的产品。
需要注意的是，键的范围不一定需要均匀分布。在实际应用中，数据分布可能不均匀，可以相应地调整键范围，以实现分片间数据分布的平衡。
然而，基于范围的分片有一个潜在的缺点。 某些访问模式可能会导致热点的形成。例如，如果数据库中很大一部分产品属于特定价格范围，则负责存储该范围的分片可能会承受不成比例的高负载，而其他分片仍未得到充分利用。
基于键或哈希的分片 基于密钥的分片（也称为基于哈希的分片）是一种使用哈希函数将特定密钥分配给分片的技术。
精心设计的哈希函数对于实现密钥的均衡分布起着至关重要的作用。基于哈希的分片不会为每个分片分配一系列密钥，而是为每个分片分配一系列哈希。一致性哈希是一种常用于实现基于哈希的分片的技术。
下图说明了基于键或哈希的分片的基本概念：
基于哈希的分片的主要优势之一是它能够在分片之间公平分配密钥。通过对密钥应用哈希函数，该技术有助于降低热点风险。
但是，基于哈希的分片也存在弊端。通过使用键的哈希而不是键本身，我们失去了执行高效范围查询的能力。这是因为相邻的键可能分散在不同的分区中，并且在此过程中会丢失它们的自然排序顺序。
需要注意的是，基于哈希的分片虽然有助于减少热点，但无法消除热点。在所有读取和写入都集中在单个键上的极端情况下，所有请求仍可能被路由到同一分区。例如，在社交媒体网站上，名人用户可以发布对同一键产生大量写入的内容。
基于目录的分片 基于目录的分片是一种依赖查找表来确定分片间记录分布的方法。
查找表充当目录或地址簿，映射数据与其所在的特定分片之间的关系。此表与分片本身分开存储。
下图说明了基于目录的分片的概念，使用“位置”字段作为分片键：
与其他分片策略相比，基于目录的分片的主要优势之一是灵活性。它允许更好地控制分片间数据的放置，因为数据和分片之间的映射在查找表中明确定义。
然而，基于目录的分片也有一个明显的缺点：它严重依赖查找表。与查找表相关的任何问题或故障都可能影响数据库的整体性能和可用性。
选择分片键时要考虑的因素 选择合适的分片键对于实施有效的分片策略至关重要。数据库设计人员在做出此决定时应考虑几个关键因素：
基数 基数是指分片键可以具有的可能值的数量。它决定了可以创建的最大分片数量。
例如，如果选择布尔数据字段作为分片键，则系统将仅限于两个分片。
为了最大限度地发挥水平扩展的优势，通常建议选择具有高基数的分片键。
频率 分片键的频率表示特定分片键值在数据集中出现的频率。
如果大部分记录仅包含可能的分片键值的子集，则负责存储该子集的分片可能会成为热点。
例如，如果健身网站的数据库使用年龄作为分片键，则大多数记录可能最终会出现在包含 30 至 45 岁之间的订阅者的分片中，从而导致数据分布不均匀。
单调变化 单调变化是指对于给定的记录，分片键值随着时间的推移而增加或减少。
如果分片键基于单调增加或减少的值，则可能导致分片不平衡。
考虑存储用户评论的数据库的分片方案。
分片A存储评论少于10条的用户的数据。 分片B存储有11-20条评论的用户的数据。 分片 C 存储了评论超过 30 条的用户的数据。 随着用户随着时间的推移不断添加评论，他们会逐渐迁移到分片 C，这使得它比分片 A 和 B 更加不平衡。</description>
    </item>
    <item>
      <title>[译]数据库扩展策略速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-scaling/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-scaling/</guid>
      <description>原文链接：https://blog.bytebytego.com/p/a-crash-course-in-database-scaling
数据库是现代应用程序开发的支柱。它们在存储、管理和检索数据方面发挥着至关重要的作用，使应用程序和服务能够有效运行。
随着应用程序越来越受欢迎并吸引越来越多的用户群，数据库面临着处理不断增加的数据量、并发用户和复杂查询的挑战。
有效地扩展数据库以确保最佳性能和良好的用户体验变得至关重要。
数据库扩展是调整和扩展数据库基础架构以适应增长并在负载增加的情况下保持性能的过程。它涉及采用各种技术和策略来有效地分配数据，优化查询执行并明智地利用硬件资源。
组织和开发人员必须了解并实施正确的数据库扩展策略。针对特定情况选择错误的策略可能会弊大于利。
在这篇文章中，我们将详细介绍最流行的数据库扩展策略，讨论它们的优点和权衡。
索引 索引是增强数据库可扩展性和性能的基础技术之一。
索引可以看作是数据库的“目录”。它包含对主数据库表中特定数据位置的引用，以便快速搜索和检索。
通过创建单独的数据结构（例如索引），数据库可以快速定位和检索特定数据，而无需扫描主表中的每个记录。
索引本身是数据的一个子集，以针对高效查询进行优化的方式组织。
为了更清楚地理解这个概念，我们假设有一个名为“客户”的数据库表，其中包含“ID”、“姓名”、“电子邮件”和“城市”等列。如果经常需要根据客户的电子邮件地址搜索客户，则在“电子邮件”列上创建索引可以提高搜索性能。
如果没有索引，通过电子邮件搜索客户将需要数据库扫描“客户”表中的每一行，直到找到匹配的记录。这个过程可能非常耗时，尤其是当表的大小增加时，这会导致查询响应时间变慢。
但是，通过在“电子邮件”列上创建索引，数据库可以使用索引数据结构快速查找所需的电子邮件地址并直接检索相应的行。这样就无需进行全表扫描，从而加快了搜索操作。
请参阅下图中的“电子邮件”列的示例索引：
索引的好处 索引提供了几个显著的好处，在处理大型数据库时这些好处变得越来越重要：
提高查询性能： 随着数据量的增长，如果数据库必须扫描大量记录，查询性能可能会下降。创建正确的索引可使数据库快速定位和检索特定的数据子集，而无需进行全表扫描。 减少资源消耗： 索引允许数据库有效地定位数据子集，从而最大限度地减少所需的磁盘 I/O 量和内存使用量。 提高并发性： 借助索引，数据库可以处理更多查询并容纳更多并发用户。这种改进的并发性在数据库必须扩展以支持大量用户的情况下尤其有益。 与索引的权衡 值得注意的是，索引会带来多重权衡。
当在列上创建索引时（例如我们示例中的电子邮件地址列），数据库会将索引数据与主表分开存储。这意味着对于每个索引列，都有一个额外的数据结构占用磁盘空间。 需要考虑的另一个权衡是索引对写入操作的潜在影响。在表中插入、更新或删除数据时，应更新相应的索引以保持准确性和一致性。这个额外的步骤增加了写入操作的开销，随着表上索引数量的增加，这种开销会变得更加明显。 为了达到正确的平衡，根据特定的查询模式和应用程序的性能要求仔细选择要索引的列非常重要。
物化视图 物化视图是一个数据库对象，它将查询结果存储为单独的、预先计算的结果集。
它源自一个或多个基表或视图，并且独立于底层数据源进行维护。
为了解释物化视图的概念，我们来考虑一个电子商务应用程序，它有一个包含数百万条记录的大型“订单”表。该应用程序经常生成每个产品类别的总销售收入报告。
如果没有物化视图，每次生成报告都需要扫描整个“订单”表，将其与“产品”表连接以获取类别信息，并执行聚合以计算每个类别的总收入。随着数据的增长，此查询会变得更慢且占用大量资源。
通过创建存储预先聚合的数据（例如每个产品类别的总收入）的物化视图，可以加快报告生成过程。
请参见下图，其中显示了存储每个产品类别的总收入的物化视图。
物化视图可以定期刷新，例如每天或每小时刷新一次，以确保数据保持最新状态。然后，可以直接从物化视图执行销售报告查询，提供即时结果，而无需处理整个“订单”表。
物化视图的好处 物化视图可以通过多种方式极大地增强数据库的可扩展性：
改进的查询性能： 物化视图存储预先计算的结果，无需重复执行复杂且耗时的查询。 减少基表的负载： 通过将计算成本高的查询结果存储在物化视图中，可以减少基表的负载。 与物化视图的权衡 虽然物化视图提供了显着的可伸缩性提升，但仍需要牢记一些权衡：
物化视图会消耗额外的存储空间，因为它们存储了结果集的单独副本。 刷新物化视图可能很耗时，尤其是对于大型数据集而言。 物化视图最终与源数据一致。换句话说，物化视图可以在短时间内包含陈旧数据。 反规范化 在规范化数据库设计中，数据被组织到单独的表中，以最大限度地减少冗余并确保数据完整性。每个表代表一个实体或概念，并使用外键建立表关系。这种方法遵循规范化的原则，旨在减少数据重复并保持数据一致性。
然而，严格遵守规范化规则有时会导致性能挑战，特别是在处理涉及跨表的多个连接的复杂查询时。
这就是非规范化发挥作用的地方。
非规范化是一种放宽严格规范化规则并允许受控数据冗余的技术。它涉及在多个表中策略性地复制数据以优化查询性能。目标是减少检索数据所需的连接和计算次数，从而提高查询速度和可扩展性。
为了理解非规范化的概念，请考虑一个包含“产品”表和“订单”表的电子商务应用程序。
在规范化设计中，“订单”表将仅存储对“产品”表的外键引用。需要将两个表连接起来才能检索带有订单信息的产品详细信息。
但随着订单数量的增长，如果应用程序经常需要在订单详情旁边显示产品名称和价格，那么连接操作可能会成为性能瓶颈。在这种情况下，可以应用非规范化来提高查询性能。
下图显示了在“订单”表上应用非规范化的示例：
通过对数据库进行非规范化并将产品名称和价格直接存储在“订单”表中，查询订单详细信息以及产品信息变得更简单、更快捷。冗余数据消除了连接的需求，使数据库在高查询负载下具有更好的扩展性。
非规范化如何帮助提高可扩展性？ 非规范化可以通过多种方式提高数据库的可伸缩性：
更快的查询执行： 消除或减少连接可以显著加快查询执行速度，尤其是对于经常访问或性能至关重要的查询。换句话说，数据库可以处理大量并发查询，从而提高整体可扩展性。 减少数据检索开销： 由于派生数据与主数据一起存储在同一张表中，因此无需执行昂贵的即时计算。 提高读取性能： 非规范化对于扩展读取密集型工作负载特别有益，因为查询无需连接多个表即可访问信息。 与非规范化的权衡 虽然非规范化可以提高查询性能和可伸缩性，但它也有一些缺点：
非规范化会引入数据冗余，从而增加存储需求。 非规范化使数据修改操作（插入、更新、删除）变得更加复杂和缓慢，因为冗余数据需要在多个表之间保持同步。 如果实施不当，非规范化可能会损害数据一致性。 垂直扩展 垂直扩展，也称为“向上扩展”，是一种通过增加单个服务器的硬件资源来提高数据库性能和可扩展性的技术。
这种方法侧重于通过为单个服务器分配更多资源来增强其功能。
垂直扩展的过程可能涉及几个关键升级：
用更快或多核处理器替换现有的 CPU，以提高处理能力并实现更快的查询执行。 向服务器添加更多 RAM 以增加内存容量，从而改善缓存。 升级到更快的存储设备，例如固态硬盘 (SSD)。 为了了解垂直扩展的好处，我们来考虑一个在购物旺季流量激增的电子商务应用程序。随着数据库服务器上的负载增加，查询响应时间可能会受到影响，从而导致用户体验不佳。
为了解决这一可扩展性挑战，应用程序所有者决定垂直扩展数据库服务器。他们使用更强大的 CPU 升级服务器，将 RAM 容量增加一倍，并用 SSD 替换硬盘驱动器 (HDD)。
这些硬件增强功能显著提高了数据库服务器的性能。更快的 CPU 和更大的内存可实现更快的查询执行和高效的缓存，而 SSD 则可提供更快的数据检索和写入速度。
因此，数据库服务器可以处理更多并发用户并提供更高的性能。
垂直扩展与数据库可扩展性的优势 垂直扩展可以通过多种方式提高数据库的可扩展性：</description>
    </item>
    <item>
      <title>[译]领域驱动设计速成课程</title>
      <link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</guid>
      <description>原文链接：https://blog.bytebytego.com/p/a-crash-course-on-domain-driven-design
为复杂领域开发软件是一项具有挑战性的任务。
随着问题领域的复杂性不断增长，创建准确表示业务概念、规则和流程的软件变得越来越困难。设计不良的软件很快就会变成难以理解、难以维护和扩展的混乱代码。
领域驱动设计（DDD）为这个问题提供了解决方案。
DDD 是一种软件开发方法，它通过强调对核心领域和业务逻辑进行建模的重要性并使用这些模型作为软件设计的基础来解决领域复杂性。
领域驱动设计的核心是：
将主要焦点放在核心领域上。 基于领域模型的复杂设计 建立技术专家和领域专家之间的协作。 近年来，领域驱动设计的需求愈发迫切。基于微服务和云计算的架构已导致系统由众多以复杂方式交互的小组件组成。如果没有清晰且定义明确的领域模型来指导其设计，此类系统很快就会变成“一团泥球”。
在本文中，我们将了解领域驱动设计的基础知识及其关键概念，这些概念可以帮助我们构建与核心领域和业务逻辑一致的更易于维护和扩展的系统。
领域驱动设计的核心原则 领域驱动设计 (DDD) 专注于创建与底层业务领域紧密结合的软件系统。
它旨在通过将领域模型置于开发过程的中心来弥合技术实现和业务需求之间的差距。
DDD 有三个核心原则：
根据领域专家的输入创建丰富的领域模型 使用基于领域模型的通用语言 从领域模型驱动软件设计 让我们更详细地探讨每个原则。
创建丰富的领域模型 DDD 的基础在于创建一个丰富的领域模型，该模型可以准确捕捉问题领域的关键概念、关系和业务规则。该模型不是由开发团队单独创建的，而是通过与对业务有深入了解的领域专家密切合作而产生的。
将领域知识提炼为可用模型的过程称为知识消化。
在此过程中，开发团队与领域专家密切合作，以确定和完善与问题最相关的概念和规则。这种协作工作通常包括集思广益、试验不同的模型设计，以及根据开发过程中获得的反馈和见解进行迭代改进。
例如，在银行系统中，与财务部门领域专家进行的知识会议将重点了解账户、客户、交易和利息计算等核心概念。
目标是创建一个模型来捕捉这些基本概念及其关系，这些模型可以被领域专家理解，并可作为软件系统的实践基础。
使用通用语言 随着领域模型的成型，开发团队和领域专家会形成一种共同语言。DDD 将此称为通用语言，因为它渗透到项目的各个方面。
通用语言直接基于领域模型。
代码中的类、方法和变量的名称均源自模型概念。同样，在讨论和文档中，团队使用通用语言的术语和短语，以确保清晰的沟通并避免歧义。
通过一致使用通用语言，代码直接反映模型，使得模型更容易理解和修改。
例如，如果银行领域模型包含“帐户”、“存款”和“取款”等概念，那么这些相同的术语将在代码、开发人员和领域专家之间的讨论以及项目文档中一致使用。当每个人都使用相同的语言时，任何理解上的歧义或不一致之处都会很快显现出来。
这是一个简单的代码示例，演示了在编写类及其方法时如何使用通用语言。
public class Account { private String accountNumber; private double balance; public void deposit(double amount) { // Perform deposit logic balance += amount; } public void withdraw(double amount) { // Perform withdrawal logic if (balance &amp;gt;= amount) { balance -= amount; } else { throw new InsufficientFundsException(&amp;#34;Insufficient funds for withdrawal&amp;#34;); } } } 领域模型到软件设计 在 DDD 中，领域模型不仅仅是一个概念工具。它是软件设计的基础。软件的结构和行为反映了模型的结构和行为。
这种方法称为模型驱动设计。
在实践中，这意味着代码中的类、关系和行为直接对应于领域模型中的概念、关系和规则。设计不是由技术考虑或基础设施细节驱动，而是由有效表达领域模型的需求驱动。
例如，如果银行领域模型定义了一个“帐户”概念，其中包含“存款”和“取款”等行为，那么软件设计将包括一个“帐户”类，其中包含“存款”和“取款”方法。这些方法如何工作的实现细节将由模型中捕获的规则和要求指导。我们已经在上一节中看到了这一点。
构建领域模型的关键模式 构建领域模型是领域驱动设计中最重要的方面。然而，一些关键的模式和实践可以帮助我们实现最佳结果。
让我们详细了解一下其中的主要内容。</description>
    </item>
    <item>
      <title>Github Action 发布 Jar 到 Maven 中央仓库</title>
      <link>https://blog.chensoul.cc/posts/2024/08/01/publishing-a-jar-to-maven-repository-with-github-action/</link>
      <pubDate>Thu, 01 Aug 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/08/01/publishing-a-jar-to-maven-repository-with-github-action/</guid>
      <description>作为一名 Java 开发者,将自己的项目发布到 Maven 中央仓库是一个非常重要的步骤。这不仅可以让更多的开发者发现和使用您的项目,也可以提高项目的知名度和影响力。
在过去,发布 Jar 到 Maven 中央仓库通常需要手动完成一系列繁琐的步骤，比如：申请 JIRA 账号、创建 Sonatype JIRA Issure、上传 Jar 包、签名 Jar 包等。但是随着 Github Action 的出现，这个过程变得更加自动化和简单。
下面我将以一个简单的 Maven 项目为例，介绍如何使用 Github Action 实现自动发布 Jar 到 Maven 中央仓库。
前提条件 在 Github 创建一个 Maven 项目 安装 gpg 并创建 gpg 秘钥和公钥，参考 How to Publish Artifacts to Maven Central 创建 OSSRH 账号，参考 Generate a Token on OSSRH Sonatype Nexus Repository Manager servers 创建 Maven 项目 首先在Github上面创建项目：https://github.com/chensoul/maven-hello-world
增加两个 Maven 插件：
&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-gpg-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.2.2&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;sign&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;phase&amp;gt;verify&amp;lt;/phase&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.sonatype.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;nexus-staging-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.0&amp;lt;/version&amp;gt; &amp;lt;extensions&amp;gt;true&amp;lt;/extensions&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;serverId&amp;gt;ossrh&amp;lt;/serverId&amp;gt; &amp;lt;nexusUrl&amp;gt;https://s01.oss.sonatype.org/&amp;lt;/nexusUrl&amp;gt; &amp;lt;autoReleaseAfterClose&amp;gt;true&amp;lt;/autoReleaseAfterClose&amp;gt; &amp;lt;keepStagingRepositoryOnCloseRuleFailure&amp;gt;false&amp;lt;/keepStagingRepositoryOnCloseRuleFailure&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; 可以将上面的两个插件加入到 pom.xml 的 build 节点下面，也可以配置到 profile 节点下。https://github.</description>
    </item>
    <item>
      <title>[译]JMS 2.0 中的新增功能</title>
      <link>https://blog.chensoul.cc/posts/2024/07/24/what-is-new-in-jms-2-0/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/24/what-is-new-in-jms-2-0/</guid>
      <description>原文链接：What is new in JMS 2.0
在在软件集成领域，从一个软件组件到另一个软件组件进行通信是一项基本要求。虽然已经出现了许多具有这种能力的技术，但 Java 编程语言为我们提供了一个 API，以促进用 Java 编写的组件之间的消息传递。此 API 的实现将由不同的供应商（JMS 提供商）通过代理软件提供。
这个API被称为Java消息服务（JMS）。
JMS 规范的最后一次更新是在 2002 年，当时推出了JMS 1.1。从那时起，多年来，该 API 已在全球许多软件组件中使用，证明了其对开发人员的友好性。JMS 的下一个版本（JMS 2.0）于 2013 年 4 月问世，距离 1.1 版已有数年之久。
JMS 2.0 只能与Java SE 7 及更高版本一起使用。了解 JMS 2.0 中的新功能将会很有趣。
易于使用的语言功能 从语言角度来看，对 API 所做的最重大的更改是减少了开发人员需要编写的代码量。让我们将 JMS 2.0 与 1.1 进行比较，看看它们有什么区别。
连接和会话对象纳入单个 JMSContext 不再需要创建连接和会话对象。您可以创建 JMSContext 并直接使用它来创建消息生产者。
//JMS 1.1 public void sendMessageJMS11(ConnectionFactory connectionFactory, Queue queueString text) { try { Connection connection = connectionFactory.createConnection(); try { Session session =connection.createSession(false,Session.AUTO_ACKNOWLEDGE); MessageProducer messageProducer = session.createProducer(queue); TextMessage textMessage = session.createTextMessage(text); messageProducer.send(textMessage); } finally { connection.close(); } } catch (JMSException ex) { // handle exception (details omitted) } } //JMS 2.</description>
    </item>
    <item>
      <title>[译]JMS 2.0 中的新增功能（第一部分）- 易于使用</title>
      <link>https://blog.chensoul.cc/posts/2024/07/24/jms20/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/24/jms20/</guid>
      <description>原文链接：https://www.oracle.com/technical-resources/articles/java/jms20.html
作者：Nigel Deakin 出版日期：2013 年 5 月
了解新的易用性功能如何使您编写更少的代码行。
本文是两部分系列文章的第一部分，假设读者对 Java 消息服务 (JMS) 1.1 有基本了解，并介绍了 JMS 2.0 中的一些新的易用特性。在第二部分中，我们将介绍新的消息传递特性。
JMS 2.0 于 2013 年 4 月发布，这是自 2002 年发布 1.1 版以来 JMS 规范的首次更新。人们可能会认为，一个长期保持不变的 API 已经变得毫无生机和无人使用。但是，如果根据不同实现的数量来判断 API 标准的成功，JMS 是最成功的 API 之一。
JMS 2.0 的重点是追赶其他企业 Java 技术的易用性改进。虽然企业 JavaBeans 或 Java 持久性等技术现在比十年前使用起来简单得多，但 JMS 仍然保持着成功但相当冗长的 API。
JMS 2.0 中最大的变化是引入了用于发送和接收消息的新 API，从而减少了开发人员必须编写的代码量。对于在 Java EE 应用服务器中运行的应用程序，新 API 还支持资源注入。这允许应用服务器负责创建和管理 JMS 对象，从而进一步简化应用程序。
JMS 2.0 是 Java EE 7 平台的一部分，可用于 Java EE Web 或 EJB 应用程序，也可以在 Java SE 环境中独立使用。正如我在下面解释的那样，这里描述的某些功能仅在独立环境中可用，而其他功能仅在 Java EE Web 或 EJB 应用程序中可用。
简化的 API 新 API 称为简化 API。顾名思义，它旨在比现有的 JMS 1.1 API 更简单、更易于使用，而后者现在（相当可预测地）被称为经典 API。
简化的 API 包含三个新接口：JMSContext、JMSProducer和JMSConsumer：
JMSContext用单个对象替换经典 API 中单独的Connection和Session对象。 JMSProducer是经典 API 中对象的轻量级替代品。它允许使用方法链（有时称为构建器模式MessageProducer）配置消息传递选项、标头和属性。 JMSConsumer替代了MessageConsumer经典API中的对象，使用方式类似。 开发人员现在可以选择是使用传统 API（JMS 1.</description>
    </item>
    <item>
      <title>[译]JMS 2.0 中的新增功能（第二部分）- 新的消息传送功能</title>
      <link>https://blog.chensoul.cc/posts/2024/07/24/jms20/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/24/jms20/</guid>
      <description>原文链接：https://www.oracle.com/technical-resources/articles/java/jms2messaging.html
作者：Nigel Deakin 出版日期：2013 年 5 月
了解如何利用 JMS 2.0 中的新消息传递功能。
本文是两部分系列文章中的第二部分，介绍了 Java 消息服务 (JMS) 2.0 中引入的一些新消息传递功能。本文假设读者对 JMS 1.1 有基本的了解。
在第一部分中，我们了解了 JMS 2.0 中引入的新的易用特性。在这里，我们来了解一下重要的新消息传递特性。
JMS 2.0 于 2013 年 4 月发布，这是自 2002 年发布 1.1 版以来 JMS 规范的首次更新。人们可能会认为，一个长期保持不变的 API 已经变得毫无生机和无人使用。但是，如果根据不同实现的数量来判断 API 标准的成功，JMS 是最成功的 API 之一。
JMS 2.0 的重点是跟上近年来对其他企业 Java 技术所做的易用性改进。同时还借此机会引入了许多新的消息传递功能。
JMS 2.0 是 Java EE 7 平台的一部分，可用于 Java EE Web 或 EJB 应用程序。它也可以单独用于 Java SE 环境中。正如我下面所解释的那样，某些功能仅在独立环境中可用，而其他功能仅在 Java EE Web 或 EJB 应用程序中可用。
这里我们讨论 JMS 2.0 中的五个重要的新消息传递功能。
允许多个消费者订阅同一主题 在 JMS 1.1 中，一个主题的订阅不允许同时有多个使用者。这意味着，处理主题订阅上的消息的工作不能在多个线程、连接或 Java 虚拟机 (JVM) 之间共享，从而限制了应用程序的可伸缩性。JMS 2.0 中引入了一种称为共享订阅的新主题订阅，从而消除了此限制。
让我们回顾一下主题订阅在 JMS 1.1 中的工作方式。在清单 1 中，方法createConsumeronSession用于创建指定主题的非持久订阅（我们稍后将讨论持久订阅）：
private void createUnsharedConsumer(ConnectionFactory connectionFactory, Topic topic) throws JMSException { Connection connection = connectionFactory.</description>
    </item>
    <item>
      <title>[译]JMS 2.0 的十个好处意味着可以减少代码编写量</title>
      <link>https://blog.chensoul.cc/posts/2024/07/24/jms20-means-less-code/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/24/jms20-means-less-code/</guid>
      <description>原文链接：Ten ways in which JMS 2.0 means writing less code
这里有十个简单的例子，说明 JMS 2.0 比 JMS 1.1 需要更少的代码。
单一 JMSContext 而不是单独的 Connection 和 Session 对象 JMS 2.0 简化 API 引入了一个新对象， JMSContext 它提供了与 JMS 1.1 API 中的分隔 Connection 对象 Session 相同的功能：
JMS 1.1
Connection connection = connectionFactory.createConnection(); Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE); JMS 2.0
JMSContext context = connectionFactory.createContext(JMSContext.SESSION_TRANSACTED); 使用 try-with-resources 块意味着不需要调用 close 使用后未能关闭Connection可能会导致您的应用程序耗尽资源。
JMS 1.1
在 JMS 1.1 中，确保使用后关闭连接的最佳方法是调用close()一个finally块：
try { Connection connection = connectionFactory.createConnection(); try { Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE); ... etc ... } finally { connection.close(); } } catch (JMSException ex) { ex.printStackTrace(); } 这太冗长了。更糟糕的是，如果您在块主体中遇到异常try，然后在中遇到异常close()，则第一个异常将会丢失，即使第一个异常可能是失败的根本原因。
JMS 2.0
在 JMS 2.0 中，Connection对象实现了java.lang.AutoCloseable接口。这意味着，如果您Connection 在 try-with-resources 块中创建对象，则该close方法将在该块的末尾自动调用。</description>
    </item>
    <item>
      <title>[译]JMS 事务的实际应用</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/jms-transactions-in-action/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/jms-transactions-in-action/</guid>
      <description>在本文中，您将了解如何选择性地使用 JMS 事务。在 JMS 中，您可以选择控制一个会话的原子操作。每个会话都支持一系列事务。每个事务将一组生成或使用的消息分组为一个原子工作单元。确保您已经理解了JMS 中的消息确认。
交易提交时 – ( jmsContext.commit())
其输入的原子单位被承认。 对于消费者来说，类似地，其相关的输出也被发送（被消费者接收）。 如果事务回滚完成– （jmsContext.rollback()）
其产生的信息被销毁。 其使用的消息被恢复（不会从 JMS 服务器中删除）。 让我们看一下代码示例，以更好地理解其功能。链接到GitHub 代码库。
package lab07.transactons.example; import labxx.common.settings.CommonSettings; import javax.jms.*; public class TransactionExample { public static void main(String[] args) { ConnectionFactory connectionFactory = CommonSettings.getConnectionFactory(); Queue queue = CommonSettings.getDefaultQueue(); Thread messageproducer = new Thread() { public void run() { try (JMSContext jmsContext = connectionFactory.createContext(JMSContext.SESSION_TRANSACTED)) { JMSProducer producer = jmsContext.createProducer(); producer.send(queue, &amp;#34;This is a SESSION_TRANSACTED message&amp;#34;); producer.send(queue, &amp;#34;Sending another message&amp;#34;); //TODO - Comment and see the result, message is not delivered until committed sleep(5000); jmsContext.commit(); //Important //Next message is never delivered as it is rollback() producer.send(queue, &amp;#34;This message will not be delivered&amp;#34;); jmsContext.</description>
    </item>
    <item>
      <title>[译]JMS 发布-订阅消息模型</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/jms-pub-sub-messaging-model/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/jms-pub-sub-messaging-model/</guid>
      <description>在本文中，您将了解 JMS 发布-订阅 (publish-subscribe) 消息传递模型。正如您在JMS 简介文章中所读到的，在发布/订阅模型中，客户端通过称为主题的中介将消息发送给多个接收者。发送者通常称为发布者，接收者称为订阅者。
JMS 发布/订阅消息传递示例 下面是一个简单的代码示例，演示了发布/订阅消息模型的工作原理。我创建了 2 个主线程，publisher和subscriber1。将订阅者 1 克隆到subscriber2。所以基本上我有一个消息发布者和 2 个消息订阅者。链接至GitHub 。
package lab03.message.pubsub; import labxx.common.settings.CommonSettings; import javax.jms.*; public class SimplePubSubExample { private static ConnectionFactory connectionFactory = null; private static Topic defaultTopic = null; static { connectionFactory = CommonSettings.getConnectionFactory(); defaultTopic = CommonSettings.getDefautTopic(); } public static void main(String[] args) { Thread publisher = new Thread(){ @Override public void run(){ try(JMSContext jmsContext = connectionFactory.createContext()) { Thread.sleep(1000); JMSProducer producer = jmsContext.createProducer(); TextMessage message = jmsContext.createTextMessage(&amp;#34;World needs to worry about the Climate changes&amp;#34;); producer.send(defaultTopic, message); } catch (InterruptedException ex){ ex.printStackTrace(); } } }; Thread subscriber1 = new Thread(){ @Override public void run(){ try(JMSContext jmsContext = connectionFactory.</description>
    </item>
    <item>
      <title>[译]JMS 消息优先级</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/jms-prioritize-messages/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/jms-prioritize-messages/</guid>
      <description>我们将通过示例详细讨论 JMS 消息优先级。每条消息的标头字段代表其优先级。我在消息模型教程JMSPriority中讨论过消息优先级。
JMS 有 10 个优先级，从 0 到 9。0 是最低优先级，9 是最高优先级。根据 JMS 标准，优先级为 0-4 的消息为正常优先级，优先级为 5-9 的消息被视为加急优先级。
JMS 优先级示例 在下面的例子中，具有不同优先级的消息被发送给接收方。但是，优先级最高的消息（9）最先到达，同样，优先级最低的消息最后到达。
package lab01.message.model; import labxx.common.settings.CommonSettings; import javax.jms.*; public class MessagePriorityTest { public static void main(String[] args) throws JMSException { ConnectionFactory connectionFactory = CommonSettings.getConnectionFactory(); Queue queue = CommonSettings.getDefaultQueue(); try (JMSContext jmsContext = connectionFactory.createContext()) { JMSProducer producer = jmsContext.createProducer(); String[] messages = {&amp;#34;Msg One&amp;#34;, &amp;#34;Msg two&amp;#34;, &amp;#34;Msg three&amp;#34;, &amp;#34;Msg four&amp;#34;, &amp;#34;Msg five&amp;#34;}; producer.setPriority(0).send(queue, messages[0]); producer.setPriority(9).send(queue, messages[1]); producer.setPriority(4).send(queue, messages[2]); producer.setPriority(2).send(queue, messages[3]); producer.send(queue, messages[4]); JMSConsumer consumer = jmsContext.createConsumer(queue); for (int i = 0; i &amp;lt; messages.length; i++) { Message message = consumer.receive(); System.out.println(&amp;#34;Priority: &amp;#34; + message.</description>
    </item>
    <item>
      <title>[译]JMS 消息模型</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/jms-message-model/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/jms-message-model/</guid>
      <description>消息是 JMS 的核心，无论是事件还是业务数据。消息由标头、自定义属性和正文组成。这是您将在 JMS 消息模型（JMS 消息剖析）中学习的内容。
JMS 消息由 Header、Properties 和 Body（Payload）组成。我们将在下面详细讨论它们。
消息头是有关消息的元数据。消息头有两种类型：开发人员设置的头和 JMS 提供商设置的头。
消息属性是用于向消息添加可选标头字段的附加标头字段。属性字段基本上有 3 种类型。
应用程序特定属性 - 允许设置应用程序特定的自定义标题。 标准属性 – JMS 定义的标准属性。 JMS-Provider 特定属性。 消息主体是发送到目的地的有效负载。JMS 支持多种类型（格式）的有效负载。
1. 消息头字段 一些消息头由程序员设置，一些由 JMS 提供商内部设置。消息头是 JMS 消息模型中首先要探讨的内容。
1.1. JMS 目标 此标头包含消息发送的目的地。收到消息时，目的地必须与分配的值相等。
javax.jms.Message#setJMSDestination(Destination) javax.jms.Message#getJMSDestination() 1.2. JMS交付模式 JMS 支持 PERSISTEN T和 NON_PERSISTENT 消息传输模式。此标头表示传递模式。
javax.jms.Message#setJMSDeliveryMode（int） javax.jms.Message#getJMSDeliveryMode() javax.jms.DeliveryMode 1.3. JMS消息ID 此标头字段值唯一标识提供商发送的每个消息。它是一个字符串值。程序员不需要处理它。
javax.jms.Message#getJMSMessageID() javax.jms.Message#setJMSMessageID(String) javax.jms.MessageProducer#setDisableMessageID(boolean) 1.4. JMS时间戳 消息被交给提供商处理的时间戳。
javax.jms.Message#setJMSTimestamp(long) javax.jms.MessageProducer#setDisableMessageTimestamp(boolean) 1.5. JMS重新交付 当客户端收到带有此标头的消息时，很可能该消息已在过去送达，但未收到确认。程序员无法更改此值。
javax.jms.Message#setJMSRedelivered（boolean） javax.jms.Message#getJMSRedelivered() 1.6. JMSExpiration – 设置消息生存时间 JMS 通过添加生存时间值来为每条消息设置过期值。生存时间值在方法中指定send()。如果生存时间值设置为零，则 JMSExpiration 标头值也会变为零，这意味着消息不会过期。
jmsProducer.setTimeToLive(long timeToLive); javax.jms.Message#setJMSExpiration(long) javax.jms.Message#getJMSExpiration() 下面的示例演示了如何使用producer.setTimeToLive()方法来设置消息过期时间。正如您在输出中看到的那样，消息的生命周期只有 2 秒，5 秒后它将从队列中删除。因此，消费者不会收到该消息并记录 NullPointer 异常。
package lab01.message.model; import labxx.common.settings.CommonSettings; import javax.jms.*; public class MessageExpirationTest { public static void main(String[] args) throws InterruptedException, JMSException { ConnectionFactory connectionFactory = CommonSettings.</description>
    </item>
    <item>
      <title>[译]JMS 消息选择器在过滤消息中的应用</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/jms-message-selectors-in-action-to-filter-messages/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/jms-message-selectors-in-action-to-filter-messages/</guid>
      <description>发送给接收方的消息通常需要根据某些标准进行过滤。JMS 提供消息选择器，允许 JMS 消费者根据消息头指定其感兴趣的消息。在本文中，您将学习使用 JMS 消息选择器来过滤消息。
这是一篇高级教程，在继续阅读本文之前，请确保您对 JMS 有基本的了解。如果您是 JMS 新手，请查看JMS 点对点消息传递模型文章。
为什么要使用消息选择器？ 当一条消息被广播给许多接收者时，将标准放入订阅中以注册特定的兴趣是很有用的。这样只有感兴趣的消息才会被传递给订阅者。
消息选择器是一种String基于SQL92条件表达式的语法。 仅传递标题和属性与选择器匹配的消息。 消息选择器不能引用消息正文值。 消息选择器从左到右进行评估。 选择器文字和运算符通常以大写字母书写，但它们不区分大小写。 1. 按属性过滤消息 就像我之前提到的，你只能根据属性或标头过滤消息，而不能根据实际消息内容过滤消息。下面的示例显示，只有级别日志被传递给消费者。链接至GitHub 代码库。
package lab04.message.filtering; import labxx.common.settings.CommonSettings; import org.junit.jupiter.api.Test; import javax.jms.*; import java.util.UUID; public class MessageSelectorExample { private static ConnectionFactory connectionFactory = null; private static Queue defaultQueue = null; static { connectionFactory = CommonSettings.getConnectionFactory(); defaultQueue = CommonSettings.getDefaultQueue(); } @Test public void messageFilterOnProperties() throws JMSException, InterruptedException { try (JMSContext jmsContext = connectionFactory.createContext()) { LogEvent event1 = new LogEvent(&amp;#34;Sample ERROR Log&amp;#34;, UUID.randomUUID().toString(), LogLevel.ERROR); LogEvent event2 = new LogEvent(&amp;#34;Sample DEBUG Log&amp;#34;, UUID.randomUUID().toString(), LogLevel.DEBUG); LogEvent event3 = new LogEvent(&amp;#34;Sample INFO Log&amp;#34;, UUID.randomUUID().toString(), LogLevel.INFO); LogEvent event4 = new LogEvent(&amp;#34;Sample WARN Log&amp;#34;, UUID.</description>
    </item>
    <item>
      <title>[译]JMS 点对点消息传递的实际应用</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/jms-point-to-point-messaging-in-action/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/jms-point-to-point-messaging-in-action/</guid>
      <description>点对点系统使用队列进行消息传递。客户端将消息发送到特定队列，特定订阅者监听或接收来自该队列的消息。在 JMS 点对点消息传递系统中，队列用于处理单个发送者和单个消费者。确保您已经阅读了有关JMS 消息模型以及如何在 JMS 中发送和接收消息的先前教程。
使用队列进行 PTP 消息传送 您现在知道点对点消息传递完全是利用队列。JMS 提供javax.jms.Queue表示队列对象的功能。我将利用 JMS 2.0 API 来javax.jms.JMSProducer发送javax.jms.JMSConsumer和接收消息。
我已经向您展示了多个使用 JMS 队列的示例。以下代码表示在 JMS 2.0 API 中使用 JMS 队列的步骤，只是为了再次刷新一下概念。
package lab00.simple.helloworld; import javax.jms.*; import javax.naming.InitialContext; import javax.naming.NamingException; public class TestHelloWorld { public static void main(String[] args) { ConnectionFactory connectionFactory = null; Queue queue = null; try { InitialContext initialContext = new InitialContext(); //Step-1 Create ConnectionFactory connectionFactory = (ConnectionFactory) initialContext.lookup(&amp;#34;jms/__defaultConnectionFactory&amp;#34;); //Step-2 Get the Destination queue = (Queue) initialContext.lookup(&amp;#34;jms/PTPQueue&amp;#34;); } catch (NamingException e) { e.printStackTrace(); } //Step-3 Create J MSContext try (JMSContext jmsContext = connectionFactory.createContext()) { //Step-4a Create a Text Message and send TextMessage textMessage = jmsContext.createTextMessage(&amp;#34;Message using JMS 2.</description>
    </item>
    <item>
      <title>[译]JMS介绍 – Java消息服务</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/jms-introduction-java-message-service/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/jms-introduction-java-message-service/</guid>
      <description>JMS 代表 Java 消息服务，它是 Java 中访问消息中间件服务器的标准。这是一个 JMS 介绍教程，为您提供消息传递和 JMS 的简要概述。您将了解使用 JMS 的优势以及 JMS 中的不同消息传递模型。
什么是消息传递？ 消息传递是跨各种应用程序或服务交换业务数据的过程。消息通常是其他应用程序或服务使用的异步请求、响应、报告或事件。这些消息包含重要信息。
消息传递为微服务架构提供了可扩展性。消息传递也传统上用于面向服务的架构，以在它们之间建立异步且可靠的通信。
消息系统也称为面向消息的中间件产品。目前有多种消息中间件可供选择，例如 ActiveMQ、RabbitMQ、ActiveMQ Artemis、Apache Kafka、应用服务器（Glassfish、Wildfly、Websphere MQ）等。
使用消息中间件的优点 可靠性– 消息中间件保证交付。如果消费者因某种原因宕机，消息系统会存储消息，直到其再次启动。 异步– JMS 是异步的，发送者和接收者不需要互相等待。 易于集成– 多个应用程序可以用不同的编程语言编写或运行在不同的服务器上。只要它们使用相同的协议，就可以使用消息中间件在它们之间建立通信。 可扩展性——消息传递有助于向多个接收者广播，从而有助于实现可扩展性。 灵活性——您可以为不同的消息分配不同的协议，这使您在设计架构时具有很大的灵活性。 什么是 JMS？ 目前有几种企业消息中间件（面向消息的中间件）产品，如 TIBCO MQ、Apache ActiveMQ、Apache Kafka、RabbitMQ、ActiveMQ Artemis、IBM MQ 等。
JMS 提供了标准的 Java API，这意味着 Java 程序可以创建、发送、接收和读取企业消息系统的消息。我们将探讨 JMS 1.x 和 2.0 API 标准。
并非所有企业消息中间件都实现 JMS 标准。实现 JMS 标准的中间件称为 JMS 提供程序。其中包括 Apache ActiveMQ、Apache ActiveMQ Artem、Oracle WebLogic Server、Glassfish、IBM MQ、Jboss Wildfly、Apache Qpid 等。无论您使用哪种实现，如果您坚持 JMS 标准，切换供应商都很简单。
JMS 不可互操作，这意味着它主要用于用 Java 或 JVM 语言编写的应用程序。如果您想使用具有更好互操作性支持的消息传递协议（可以在 NodeJS、Python、C# 等中工作），请查看AMQP（高级消息队列协议），例如 RabbitMQ。
JMS 标准的局限性 JMS 标准不包括以下功能，因为 JMS 仅用于发送和接收消息。
负载平衡/容错 错误/建议通知 JMS 提供程序的管理 API 安全 没有消息类型存储库定义 JMS 中的消息传递模型 JMS 支持两种主要的消息传递样式，如下所示。作为 JMS 介绍的一部分，我们在此仅讨论这些类型，本教程的后面部分将通过几个示例介绍每种类型。</description>
    </item>
    <item>
      <title>[译]为 JMS 安装和设置 Glassfish</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/install-and-setup-glassfish-for-jms/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/install-and-setup-glassfish-for-jms/</guid>
      <description>在本文中，我们将为 JMS 2.0 设置 Glassfish，创建一个 Java 项目并添加必要的依赖项。
先决条件 请确保您的系统上安装了以下工具。
已安装JDK 8。尚未使用任何更高版本的 Java 进行测试。 Eclipse、STS 或 IntelliJ IDEA。 Glassfish 安装和设置步骤 步骤 1，下载 Glassfish 并解压缩 您需要从 Glassfish GitHub repo下载开源 Glassfish 版本，然后将其解压缩到我们将运行服务器的文件夹中。我使用的是带有 JDK 8 的 GlassFish 5.0。
步骤2，启动服务器 cd glassfish5\glassfish\bin\从终端导航到解压的文件夹内以启动服务器。
sh startserv如果您使用的是 Mac 或 Linux，请从终端运行。或者，startserv.bat如果您使用的是 Windows，请运行。让服务器有时间进行引导。
步骤 3，打开管理控制台 完成上述步骤后，接下来访问管理控制台http://localhost:4848。
现在，查看“ JMS 资源/连接工厂”，您可以看到 Glassfish 为您创建的默认 JMS 工厂。我们将jms/__defaultConnectionFactory在整个课程中使用它。
步骤 4，创建 JMS 目标资源 默认情况下，Glassfish 管理控制台上不会列出任何目标资源。请记住，您需要先创建这些资源，然后编写代码以通过这些资源发送或接收消息。
点击新建按钮添加新的目标资源，我们将创建 2 个Queue和一个Topic供示例工作，如下所示。
创建队列 1，其 JNDI 名称为jms/PTPQueue，目标名称为PTPQueue。 创建队列2，其JNDI名称为jms/ReplyQueue，目标名称为ReplyQueue。 然后，创建 pub-sub 主题，其 JNDI 名称为jms/PubSubTopic，目标名称为PubSubTopic。 理想情况下，目标资源和 ConnectionFactory 由服务器管理员创建。作为开发人员，您无需在现实世界中创建它们。但出于开发或测试目的，您需要在本地计算机上创建它们。
无论您使用哪个 JMS 提供程序，它们始终需要提供 ConnectionFactory 和 Destination 。这意味着在我们编写 Java 代码之前，需要在 JMS 提供程序中配置它们。您将在本教程的后半部分详细了解它们。有一些例外，例如 ActiveMQ，允许在运行时创建Destination。
一旦创建目标资源，JMS 目标资源将如下面的屏幕截图所示。
配置 IDE 的步骤 ​ 所有代码示例均可在 GitHub 上下载。或者，您可以按照以下步骤创建一个具有下面列出的依赖项的 Maven 项目。
步骤 1，创建一个 Maven 项目 在你的 IDE（Eclipse、STS 或 IntelliJ）中创建一个 maven 项目&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; 打开pom.</description>
    </item>
    <item>
      <title>[译]使用 JMS 消息确认保证传送</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/guaranteed-delivery-using-jms-message-acknowledgement/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/guaranteed-delivery-using-jms-message-acknowledgement/</guid>
      <description>JMS 通过 JMS 消息确认（确认模式）确保消息传递的可靠性。如果会话已进行事务处理，则该commit()方法会自动处理消息确认。否则，该方法将处理恢复rollback()。在本文中，我们将假设会话未进行事务处理。这是一个高级主题，请确保您对 JMS 有基本的了解。如果您是 JMS 新手，可以参考使用 JMS发送和接收消息。
JMS Client会话未进行事务处理时使用消息确认。消息确认是在（JMS 生产者和 JMS 消费者）和之间建立的协议JMS Server。
JMS 提供三种确认选项，并且恢复是手动处理的。
AUTO_ACKNOWLEDGE – JMS 会话自动确认客户端已收到消息。不会发送重复消息。 CLIENT_ACKNOWLEDGE – JMS 客户端必须通过调用消息的acknowledge()方法来确认。 DUPS_OK_ACKNOWLEDGE – JMS 服务器可以放心地向 JMSConsumer 发送重复消息。客户端应用程序应该能够在此模式下处理重复消息。 1. JMS AUTO_ACKNOWLEDGE消息传递的实际操作 这是创建Session或时设置的默认确认模式JMSContext。您可以手动指定AUTO_ACKNOWLEDGE模式，如下所示。
JMSContext jmsContext = connectionFactory.createContext(JMSContext.AUTO_ACKNOWLEDGE); 在此模式下，当客户端成功从接收调用返回或其调用来处理消息的消息侦听器成功返回时，JMS 会话会自动确认客户端已收到消息。以下代码显示了此模式的用法。链接至GitHub 代码库。
package lab06.message.acknowledgement; import labxx.common.settings.CommonSettings; import javax.jms.*; public class AutoAcknowledgeExample { public static void main(String[] args) { ConnectionFactory connectionFactory = CommonSettings.getConnectionFactory(); Queue queue = CommonSettings.getDefaultQueue(); Thread messageproducer = new Thread() { public void run() { try (JMSContext jmsContext = connectionFactory.createContext(JMSContext.AUTO_ACKNOWLEDGE)) { JMSProducer producer = jmsContext.createProducer(); //Send the message Message message = jmsContext.createTextMessage(&amp;#34;This is an AUTO_ACKNOWLEDGEMENT message&amp;#34;); producer.send(queue, message); } } }; Thread messageConsumer = new Thread() { public void run() { try (JMSContext jmsContext = connectionFactory.</description>
    </item>
    <item>
      <title>[译]在 JMS 中发送和接收消息</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/send-and-receive-message-in-jms/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/send-and-receive-message-in-jms/</guid>
      <description>您将了解 JMS 架构，学习如何在 JMS 中发送和接收消息。我将介绍管理对象、JMS 1.1 API 和 JMS 2.0 API。我们还将看到与 JMS 1.1 API 相比，JMS 2.0 API 的使用有多么简单。在继续学习本课程之前，请确保您已完成 JMS 设置。如果您是初学者，请确保您已了解JMS 的基础知识。
请记住，当您使用 JMS 时，需要在 JMS 提供程序中配置ConnectionFactory和Destination对象（队列和主题）。这就是它们被称为受管理对象的原因。 您通常会执行 JNDI 查找以获取ConnectionFactory，然后从 ConnectionFactory获取物理Connection对象。 获得连接后，您将需要打开一个会话来发送/接收消息。 JMS API 版本 您需要了解基本上有两组用于发送和接收消息的主要接口。
JMS 1.1 – 也称为经典 API，这是遗留 API。 JMS 2.0 – 被称为简化 API，提供更简单的 API，需要更少的接口。这正是您在新项目中需要使用的。 通用接口 队列– 用于点对点消息传递的受管理对象。单个生产者和单个接收者。 主题– 用于发布/订阅消息的受管对象。单个生产者，但多个接收者。 目的地– 队列和主题的共同超类型。 Message、ByteMessage、MapMessage、ObjectMessage、StreamMessage和StreamMessage – 表示发送到 JMS 提供程序或从 JMS 提供程序接收的消息类型。 使用 JMS 发送和接收消息 我们将看到使用 JMS 1.1（经典 API）和 JMS 2.0（简化 API）发送和接收文本消息的简单示例。我建议使用 JMS 2.0 API，本教程将对此进行更多讨论。但是，如果您碰巧使用的是旧版应用程序，最好也关注一下旧版 API。
使用 JMS 1.1 开发客户端 下面是一个示例，演示了如何使用经典 API。它创建一条简单的文本消息并将其发送到队列。然后，消息消费者从同一队列读取同一条消息。
package lab00.classic.helloworld; import javax.jms.*; import javax.naming.InitialContext; import javax.naming.NamingException; public class TestHelloWorldQueue { public static void main(String[] args) throws NamingException { InitialContext initialContext = null; try { initialContext = new InitialContext(); //Step-1 Create ConnectionFactory ConnectionFactory connectionFactory = (ConnectionFactory) initialContext.</description>
    </item>
    <item>
      <title>[译]完整的 JMS 2.0 教程</title>
      <link>https://blog.chensoul.cc/posts/2024/07/23/a-complete-jms-2-0-tutorial/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/23/a-complete-jms-2-0-tutorial/</guid>
      <description>JMS 代表 Java 消息服务，它是 Java 中访问消息中间件服务器的标准。消息传递是在各种应用程序或服务之间交换业务数据的过程。这是一个完整的 JMS 2.0 教程， 其中包含大量代码示例。完整的代码示例可在 GitHub 上找到，请下载并运行示例。本教程使用 Glassfish 开源服务器作为 JMS 提供程序的示例。
您可以使用 ActiveMQ 或 ActiveMQ Artemes 作为 JMS 提供程序，JMS API 保持不变，只有使用相应 JMS 提供程序的 maven 依赖项会发生变化。以下是本教程中涵盖的主题。
代码示例
JMS 简介 – Java 消息服务 为 JMS 安装和设置 Glassfish 在 JMS 中发送和接收消息 JMS 消息模型 JMS 确定消息优先级 JMS 点对点消息传递的实际应用 JMS 发布-订阅消息模型 JMS 消息选择器在过滤消息中的应用 使用 JMS 消息确认保证传送 JMS 事务的实际应用 参考 Apache ActiveMQ Artemis 用户手册 管理和排除 Glassfish JMS 故障 JMS 2.0 中的新增功能 原文链接：A Complete JMS 2.0 Tutorial</description>
    </item>
    <item>
      <title>GitLab Runner安装和部署</title>
      <link>https://blog.chensoul.cc/posts/2024/07/19/gitlab-runner-install/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/19/gitlab-runner-install/</guid>
      <description>介绍 GitLab Runner 是一个用于在 GitLab CI/CD（持续集成/持续交付）流水线中运行作业（Jobs）的开源工具。它充当了 GitLab CI/CD 系统中的代理，负责接收作业请求、执行作业脚本并报告结果。
下面是 GitLab Runner 的一些关键特点和功能：
多平台支持：GitLab Runner 可在多种操作系统上运行，包括 Linux、macOS 和 Windows，使其适用于各种开发环境和需求。 作业执行器：Runner 接收来自 GitLab CI/CD 的作业请求，并在指定的环境中执行作业。它可以运行各种类型的作业，如构建、测试、部署等。 并发执行：GitLab Runner 可以同时运行多个作业，以提高整体流水线的处理能力和效率。 弹性扩展：你可以配置多个 GitLab Runner 实例，以满足不同项目和流水线的需求。每个 Runner 实例都可以在不同的环境中运行，比如在不同的物理或虚拟机器上，或者在云服务提供商的容器中。 配置灵活性：Runner 的配置相对灵活，你可以根据项目、分支或标签等条件来指定不同的执行规则。这使得你可以针对不同的场景和需求进行定制化配置。 日志和报告：Runner 会生成详细的日志和报告，用于记录作业的执行过程和结果。这些信息对于故障排除、问题追踪和流水线性能分析非常有帮助。 安全和身份验证：GitLab Runner 可与 GitLab CI/CD 系统集成，并通过访问令牌或其他身份验证机制来确保安全的通信和访问权限控制。 安装 GitLab Runner 的版本需要和 GitLab 保持一致。
查看当前 Gitlab 版本：
root@gitlab:/# gitlab-rake gitlab:env:info System information System:	Current User:	git Using RVM:	no Ruby Version:	3.1.5p253 Gem Version:	3.5.11 Bundler Version:2.5.11 Rake Version:	13.0.6 Redis Version:	7.0.15 Sidekiq Version:7.1.6 Go Version:	unknown GitLab information Version:	17.1.1 Revision:	a1c9a43d543 Directory:	/opt/gitlab/embedded/service/gitlab-rails DB Adapter:	PostgreSQL DB Version:	14.11 URL:	https://gitlab.wesine.com.cn HTTP Clone URL:	https://gitlab.</description>
    </item>
    <item>
      <title>将 Maven 站点发布到 GitHub Pages</title>
      <link>https://blog.chensoul.cc/posts/2024/07/18/publishing-a-maven-site-to-github-pages/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/18/publishing-a-maven-site-to-github-pages/</guid>
      <description>本文源代码：https://github.com/chensoul/maven-site-github-example/ 。
创建 Java Maven 项目 让我们使用 Maven 创建一个简单的 Java 项目
mvn archetype:generate \ -DgroupId=com.mycompany.app \ -DartifactId=maven-site-github-example \ -DarchetypeArtifactId=maven-archetype-quickstart \ -DarchetypeVersion=1.4 \ -DinteractiveMode=false 这将创建包含 Maven 项目的my-app文件夹。让我们进入该文件夹并确保它编译正常：
cd maven-site-github-example mvn clean verify 我们还可以生成该项目的站点：
mvn clean site 该站点将在target/site文件夹中生成，可以使用浏览器打开；例如，让我们打开它的 index.html：
chrome target/site/index.html 创建 github 项目 在你的 github 上创建一个项目 maven-site-github-example，然后在本地的 maven-site-github-example 目录提交代码：
echo &amp;#34;# maven-site-github-example&amp;#34; &amp;gt;&amp;gt; README.md git init git add . git commit -m &amp;#34;first commit&amp;#34; git branch -M main git remote add origin git@github.com:chensoul/maven-site-github-example.git git push -u origin main GitHub Page 设置 现在我们必须在 Git 存储库上创建 gh-pages分支。
git checkout --orphan gh-pages rm .git/index ; git clean -fdx echo &amp;#34;It works&amp;#34; &amp;gt; index.html git add .</description>
    </item>
    <item>
      <title>Gitlab安装和部署-使用yum源</title>
      <link>https://blog.chensoul.cc/posts/2024/07/15/install-gitlab-using-yum/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/15/install-gitlab-using-yum/</guid>
      <description>Gitlab Server 部署 1、环境配置 关闭防火墙、SELinux
开启邮件服务
$ systemctl start postfix $ systemctl enable postfix 2、手动安装 1、安装 gitlab 依赖包 centos7:
$ yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python gitlab-ce 10.x.x以后的版本需要依赖policycoreutils-python
centos8:
$ yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python-utils 2、添加官方源 $ curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash 因为官方源太慢，可以使用国内清华yum源，配置如下
$ vim /etc/yum.repos.d/gitlab-ce.repo [gitlab-ce] name=Gitlab CE Repository baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/ gpgcheck=0 enabled=1 3、安装 Gitlab 自动安装最新版
$ yum -y install gitlab-ce 4、配置 Gitlab 1、查看Gitlab版本 $ head -1 /opt/gitlab/version-manifest.txt gitlab-ce 10.1.1 2、Gitlab 配置登录链接 #设置登录链接 $ vim /etc/gitlab/gitlab.rb *** ## GitLab URL ##! URL on which GitLab will be reachable. ##! For more details on configuring external_url see: ##!</description>
    </item>
    <item>
      <title>Git介绍</title>
      <link>https://blog.chensoul.cc/posts/2024/07/15/git/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/15/git/</guid>
      <description>Git、Github、Gitlab 的区别 Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。
是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。
Github是在线的基于Git的代码托管服务。 GitHub是2008年由Ruby on Rails编写而成。GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，只有付费账户可以创建私有的代码仓库。 Gitlab解决了这个问题, 可以在上面创建免费的私人repo。
git：是一套软件 可以做本地私有仓库
github：本身是一个代码托管网站 公有和私有仓库(收费) 不能做本地私有仓库
gitlab：本身也是一个代码托管的网站 功能上和github没有区别 公有和私有仓库（免费） 可以部署本地私有仓库
Git 与 SVN 区别 GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。
如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。
Git 与 SVN 区别
Git是分布式的，svn不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。 GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。 GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。 GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。 GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 git 是分布式的版本控制器 没有客户端和服务器端的概念。
svn 它是C/S结构的版本控制器 有客户端和服务器端 服务器如果宕机而且代码没有备份的情况下 完整代码就会丢失
Git 工作流程 一般工作流程如下：
克隆 Git 资源作为工作目录。 在克隆的资源上添加或修改文件。 如果其他人修改了，你可以更新资源。 在提交前查看修改。 提交修改。 在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。 Git 的工作流程示意图：
Git 基本概念 **工作区：**就是你在电脑里能看到的目录。 **暂存区：**英文叫stage, 或index。一般存放在&amp;quot;git目录&amp;quot;下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。 **版本库：**工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。 工作区、版本库中的暂存区和版本库之间的关系的示意图：
图中左侧为工作区，右侧为版本库。在版本库中标记为 &amp;ldquo;index&amp;rdquo; 的区域是暂存区（stage, index），标记为 &amp;ldquo;master&amp;rdquo; 的是 master 分支所代表的目录树。
图中我们可以看出此时 &amp;ldquo;HEAD&amp;rdquo; 实际是指向 master 分支的一个&amp;quot;游标&amp;quot;。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。
图中的 objects 标识的区域为 Git 的对象库，实际位于 &amp;ldquo;.git/objects&amp;rdquo; 目录下，里面包含了创建的各种对象及内容。
当对工作区修改（或新增）的文件执行 &amp;ldquo;git add&amp;rdquo; 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。
当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</description>
    </item>
    <item>
      <title>Git使用</title>
      <link>https://blog.chensoul.cc/posts/2024/07/15/git/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/15/git/</guid>
      <description>部署Git 服务 创建git仓库
git-server上的操作：
[root@localhost ~]# yum install git git-core gitweb -y [root@localhost ~]# useradd git [root@localhost ~]# passwd git [root@localhost ~]# mkdir /git-root/ [root@localhost ~]# cd /git-root/ [root@localhost git-root]# git init --bare shell.git Initialized empty Git repository in /git-root/shell.git/ [root@localhost git-root]# chown -R git:git shell.git 注意： git init 和 git init &amp;ndash;bare 的区别:
使用&amp;ndash;bare选项时，不再生成 .git 目录，而是只生成 .git 目录下面的版本历史记录文件，这些版本历史记录文件也不再存放在 .git 目录下面，而是直接存放在版本库的根目录下面。 用&amp;quot;git init&amp;quot;初始化的版本库用户也可以在该目录下执行所有 git 方面的操作。但别的用户在将更新 push 上来的时候容易出现冲突。 使用”git init &amp;ndash;bare”方法创建一个所谓的裸仓库，之所以叫裸仓库是因为这个仓库只保存git历史提交的版本信息，而不允许用户在上面进行各种git操作，如果你硬要操作的话，只会得到下面的错误（”This operation must be run in a work tree”）这个就是最好把远端仓库初始化成bare仓库的原因 git仓库测试
git-client上的操作：
[root@localhost ~]# ssh-keygen [root@localhost ~]# ssh-copy-id git@192.168.1.178 [root@localhost shell]# git config --global user.email &amp;#34;you@example.com&amp;#34; [root@localhost shell]# git config --global user.name &amp;#34;Your Name&amp;#34; [root@localhost ~]# git clone git@192.</description>
    </item>
    <item>
      <title>Minikube快速入门</title>
      <link>https://blog.chensoul.cc/posts/2024/07/10/minikube-quick-start/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/10/minikube-quick-start/</guid>
      <description>安装 macos 系统使用 brew 安装
brew install minikube 启动集群 查看当前集群列表
$ minikube profile list |----------|-----------|---------|--------------|------|---------|---------|-------|----------------|--------------------| | Profile | VM Driver | Runtime | IP | Port | Version | Status | Nodes | Active Profile | Active Kubecontext | |----------|-----------|---------|--------------|------|---------|---------|-------|----------------|--------------------| | minikube | docker | docker | 192.168.49.2 | 8443 | v1.30.0 | Unknown | 1 | * | * | |----------|-----------|---------|--------------|------|---------|---------|-------|----------------|--------------------| 创建一个集群
# 启动一个名称为 minikube 集群，命名空间为 default minikube start 默认情况下，minikube start 创建一个名为“minikube”的集群。如果您想创建不同的集群或更改其名称，可以使用--profile(或-p) 标志：
minikube start -p test 如果只想使用 docker 而不使用 k8s：
minikube start --container-runtime=docker --no-kubernetes 指定资源：
minikube start --cpus 4 --memory 8G 也可以调整资源：
minikube config set cpus 2 minikube config set memory 2G k8s 集群创建成功之后，可以通过 kubectl 查看上下文：</description>
    </item>
    <item>
      <title>Spring Boot集成SpringDoc生成Api文档</title>
      <link>https://blog.chensoul.cc/posts/2024/07/10/springdoc-with-spring-boot/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/10/springdoc-with-spring-boot/</guid>
      <description>以下以 Maven 为例介绍 Spring Boot集成SpringDoc生成Api文档。
添加依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springdoc&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springdoc-openapi-starter-webmvc-ui&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 配置 annotationProcessor，实现通过 javadoc 生成文档。 每个 maven 模块都需要配置：
&amp;lt;properties&amp;gt; &amp;lt;therapi-runtime-javadoc.version&amp;gt;0.15.0&amp;lt;/therapi-runtime-javadoc.version&amp;gt; &amp;lt;maven-compiler-plugin.version&amp;gt;3.13.0&amp;lt;/maven-compiler-plugin.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${maven-compiler-plugin.version}&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;annotationProcessorPaths&amp;gt; &amp;lt;!-- https://springdoc.org/#javadoc-support --&amp;gt; &amp;lt;path&amp;gt; &amp;lt;groupId&amp;gt;com.github.therapi&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;therapi-runtime-javadoc-scribe&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${therapi-runtime-javadoc.version}&amp;lt;/version&amp;gt; &amp;lt;/path&amp;gt; &amp;lt;/annotationProcessorPaths&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; 配置 spring boot 插件，生成 build.properties &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;repackage&amp;lt;/goal&amp;gt; &amp;lt;goal&amp;gt;build-info&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; 自动装配 @Configuration(proxyBeanMethods = false) @ConditionalOnProperty(name = SPRINGDOC_ENABLED, matchIfMissing = true) @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET) public class SpringdocConfig { @Value(&amp;#34;${server.port}&amp;#34;) private String port; @Value(&amp;#34;${openapi.prod-url:https://localhost}&amp;#34;) private String prodUrl; @Bean public OpenAPI openAPI() { Server devServer = new Server(); devServer.setUrl(&amp;#34;http://localhost:&amp;#34; + port); devServer.setDescription(&amp;#34;Server URL in Development environment&amp;#34;); Server prodServer = new Server(); prodServer.</description>
    </item>
    <item>
      <title>Docker安装和配置</title>
      <link>https://blog.chensoul.cc/posts/2024/07/09/install-docker/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/09/install-docker/</guid>
      <description>Centos7安装Docker 配置宿主机网卡转发 ## 配置网卡转发，看值是否为1 $ sysctl -a |grep -w net.ipv4.ip_forward net.ipv4.ip_forward = 1 ## 若未配置，需要执行如下 $ cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/sysctl.d/docker.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward=1 EOF $ sysctl -p /etc/sysctl.d/docker.conf Yum安装配置docker ## 下载阿里源repo文件 $ sudo yum install -y yum-utils $ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/repo/Centos-7.repo $ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo $ sudo yum clean all &amp;amp;&amp;amp; yum makecache ## yum安装 $ sudo yum install -y docker-ce docker-ce-cli ## 设置开机自启 systemctl enable docker systemctl daemon-reload ## 启动docker systemctl start docker ## 查看docker信息 docker info docker version ## docker-client which docker ## docker daemon ps aux |grep docker 安装 Compose plugin：</description>
    </item>
    <item>
      <title>使用 Docker 容器化并运行 Spring Boot 应用程序</title>
      <link>https://blog.chensoul.cc/posts/2024/07/09/docker-for-spring-boot/</link>
      <pubDate>Tue, 09 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/09/docker-for-spring-boot/</guid>
      <description>本文翻译自 Docker 官方网站的《Java language-specific guide》文章，并做了一些改动。
Java 入门指南教您如何使用 Docker 创建容器化的 Spring Boot 应用程序。在本模块中，您将学习如何：
使用 Maven 容器化并运行 Spring Boot 应用程序 设置本地开发环境以将数据库连接到容器，配置调试器，并使用 Compose Watch 进行实时重新加载 在容器内运行单元测试 使用 GitHub Actions 为应用程序配置 CI/CD 管道 将容器化应用程序本地部署到 Kubernetes 以测试和调试您的部署 完成 Java 入门模块后，您应该能够根据本指南中提供的示例和说明来容器化您自己的 Java 应用程序。
容器化你的应用 先决条件 您已安装最新版本的 Docker Desktop，Docker 会定期添加新功能，本指南的某些部分可能仅适用于最新版本的 Docker Desktop。
您有一个 Git 客户端。本节中的示例使用基于命令行的 Git 客户端，但您可以使用任何客户端。
获取示例应用程序 将要使用的示例应用程序克隆到本地开发机器。在终端中运行以下命令来克隆存储库。
$ git clone https://github.com/spring-projects/spring-petclinic.git $ cd spring-petclinic 初始化 Docker 资产 现在您有了一个应用程序，您可以使用它docker init来创建必要的 Docker 资产来容器化您的应用程序。在 spring-petclinic 中已包含 Docker 资产。系统将提示您覆盖现有 Docker 资产。要继续本指南，请选择y覆盖它们。
$ docker init Welcome to the Docker Init CLI! This utility will walk you through creating the following files with sensible defaults for your project: - .dockerignore - Dockerfile - compose.</description>
    </item>
    <item>
      <title>[译]Minikube 中的 Minions - 面向 Java 开发人员的 Kubernetes 简介</title>
      <link>https://blog.chensoul.cc/posts/2024/07/08/minions-in-minikube-a-kubernetes-intro-for-java-de/</link>
      <pubDate>Mon, 08 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/08/minions-in-minikube-a-kubernetes-intro-for-java-de/</guid>
      <description>我们希望我们的微服务是可复制、可替换的工作程序，我们可以轻松升级或降级，无需停机，管理也只需最少。我们可能会说我们希望他们是我们的奴才。在本文中，我们将通过一个简单的示例来了解 Kubernetes 通过创建和编排奴才大军可以为我们做些什么。您可以按照本文进行编码，也可以从此处克隆项目。
先决条件 我们需要将微服务容器化，以便在 Kubernetes 中运行它们 — 我们将使用Docker来实现这一点。我们将使用Minikube，而不是使用云托管的 Kubernetes，这样我们就可以在本地进行沙盒处理。
目的 我们的仆从大军将是 Java 微服务。我们希望我们的大军中有不同类型的仆从，这样我们才能看到 Kubernetes 能为我们做些什么。因此，我们的目标是让每个微服务都响应一个简单的 http 请求，响应如下：
我们将使用 ASCII 艺术来代表仆从类型。
构建Java Minion服务 我们可以使用带有 Web starter 依赖项的Spring Initializr 将我们的微服务作为 Spring Boot Web 应用程序启动：
在项目中，我们将创建一个带注释的控制器来 @RestController 处理请求。我们将使用 @RequestMapping(method=GET) 来提供响应主体。因此，首先我们可以执行以下操作：
@RequestMapping( method=GET) @ResponseBody public String minion() throws UnknownHostException { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(&amp;#34;Host: &amp;#34;).append(InetAddress.getLocalHost().getHostName()).append(&amp;#34;&amp;lt;br/&amp;gt;&amp;#34;); return stringBuilder.toString(); } 但这并不能完全满足我们的要求。我们可以在这里输出 ASCII 艺术，但是我们要选择哪种类型的 Minion？为此，我们可以使用一个技巧。我们将创建一个可以采用我们选择的任何 Minion 类型的应用程序。为此，我们需要它包含一个 ASCII 艺术 Minion 库。因此，我们创建了一个名为 MinionsLibrary 的类，我们用它来注释， @Component 并在其中创建一个映射，我们用来自此博客 的一些 Minion 来初始化它：
@Component public class MinionsLibrary { private Map&amp;lt;String,String&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); public MinionsLibrary(){ map.put(&amp;#34;one-eyed-minion&amp;#34;,&amp;lt;COPY-PASTE MINION ASCII ART HERE&amp;gt;); map.put(&amp;#34;two-eyed-minion&amp;#34;,&amp;lt;COPY-PASTE MINION ASCII ART HERE&amp;gt;); map.put(&amp;#34;sad-minion&amp;#34;,&amp;lt;COPY-PASTE MINION ASCII ART HERE&amp;gt;); map.</description>
    </item>
    <item>
      <title>[译]面向 Java 开发人员的 Kubernetes</title>
      <link>https://blog.chensoul.cc/posts/2024/07/08/kubernetes-for-java-developers/</link>
      <pubDate>Mon, 08 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/08/kubernetes-for-java-developers/</guid>
      <description>有一类新工具可用于将应用程序 docker 化并部署到 Kubernetes，这些工具专门面向开发人员。该类别中的最新工具是 RedHat 的 JKube。
微服务是一种架构风格，由一个小型的、单独的应用程序组件组成，该组件具有单一职责，在部署和可扩展性方面具有高度的自主性。这些组件通过轻量级协议（如 REST over HTTP）进行通信。因此，开发团队规模很小（两个披萨规则），专注于微服务。实际上，团队拥有从开发到部署的整个生命周期——如果你构建了它，你就会运行它。这就产生了一个问题。毕竟，开发团队的核心竞争力通常是 Maven、微服务框架（例如 Spring Boot）、测试框架（如 JUnit）等。但是，如果我们看一下部署微服务所涉及的步骤：
将应用程序打包到 Docker 等容器中。这涉及编写 Dockerfile。 将容器部署到 Kubernetes 等编排器。这涉及编写一些资源；服务描述文件、部署等。 用开发人员熟悉的术语来说，这就是“阻抗不匹配”。为了解决这个问题，我们需要一类能够使用开发人员的语言并使整个部署步骤对他们透明的工具。其中最著名的是Jib ，我们在之前的论文中讨论过它，它可以为您的 Java 应用程序构建优化的 Docker 和OCI映像，并以 Maven 插件的形式提供。此类别中还有其他工具，例如Dekorate，它允许我们仅使用 Maven 和 Java 注释来生成 Kubernetes 清单。此类别中最新且最全面的条目是 RedHat 的 JKube，这是我们的当日主题。
JKube是一个 Maven 插件，其目标包括构建 Docker 映像和创建 Kubernetes 资源描述符。映像和描述符可以在没有配置的情况下生成，基于基于 pom 文件中条目的一些默认设置，或者可以使用 pom 中的 XML 条目进行自定义，或者在极端情况下使用 Dockerfile 和资源片段进行自定义。以下是该插件的目标：
目标 描述 k8s:build 将应用程序 Docker 化为映像。 k8s:resource 生成 k8s 资源描述符。 k8s:apply 应用这些清单。 k8s:log 查看容器的日志。 K8s:undeploy 撤消部署。 首先，我假设您已在本地安装了 Docker 和 Kubernetes。有几种方法可以做到这一点。我还假设您具备 Docker 和 Kubernetes 的基本知识，如 [ Docker ] 和 [ Kubernetes ] 中所述。
&amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jkube&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;kubernetes-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.0&amp;lt;/version&amp;gt; &amp;lt;/plugin&amp;gt; 现在我们可以生成图像：
mvn k8s:build 在通常的 Spring Boot 歌舞之后，您可以列出图像：
您可以自定义图像。例如，您可能希望通过配置frompom 中的元素来选择插件使用的默认图像以外的基础图像：</description>
    </item>
    <item>
      <title>ActiveMQ安装和使用</title>
      <link>https://blog.chensoul.cc/posts/2024/07/05/install-activemq/</link>
      <pubDate>Fri, 05 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/05/install-activemq/</guid>
      <description>ActiveMQ 是一个实现了 JMS 协议的开源消息中间件，目前它有两种版本：ActiveMQ &amp;ldquo;Classic&amp;rdquo; 和 ActiveMQ Artemis。
Artemis 版本作为Classic版本的替代品而诞生，相较的提升点有：
高性能与低延迟：Artemis通过改进的设计实现了更高的吞吐量和更低的消息处理延迟。
存储机制：使用了不同的持久化策略和日志结构，比如Journal文件系统，以获得更好的写性能和恢复速度。
内存管理：内存使用效率更高，尤其是在处理大量小消息时表现更好。
集群和HA：提供了更先进的高可用性解决方案和更灵活的集群模式。
协议支持：除了原有的JMS之外，对AMQP 1.0的支持更加成熟和完善，并且也支持STOMP等多种协议。
架构更新：整体架构更为现代化，为云原生环境和大规模分布式部署进行了优化。
ActiveMQ Classic 各个版本的比较，参考：https://activemq.apache.org/components/classic/download/ 。
6.0.x：需要 JDK17 5.17.x + ：需要 JDK11 5.16.x ：需要 JDK8 本文以 ActiveMQ Classic 5.16.7 进行测试。
压缩包安装 在 linux 服务器上下载和安装：
wget https://archive.apache.org/dist/activemq/5.16.7/apache-activemq-5.16.7-bin.tar.gz tar -zxvf apache-activemq-5.16.7-bin.tar.gz cd apache-activemq-5.16.7 启动：
$ bin/activemq start INFO: Loading &amp;#39;/data/apache-activemq-5.16.7//bin/env&amp;#39; INFO: Using java &amp;#39;/usr/bin/java&amp;#39; INFO: Starting - inspect logfiles specified in logging.properties and log4j.properties to get details INFO: pidfile created : &amp;#39;/data/apache-activemq-5.16.7//data/activemq.pid&amp;#39; (pid &amp;#39;31850&amp;#39;) 查看是否启动成功：
$ netstat -antpule|grep 61616 tcp6 0 0 :::61616 :::* LISTEN 0 382969263 31850/java 查看日志：
tailf data/activemq.log 打开浏览器，访问 http://127.0.0.1:8161/admin ，默认账号：admin，密码：admin
修改配置，支持通过 IP 访问，修改 conf 目录下的 jetty.</description>
    </item>
    <item>
      <title>Gitlab安装和部署-使用Docker</title>
      <link>https://blog.chensoul.cc/posts/2024/06/26/install-gitlab/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/26/install-gitlab/</guid>
      <description>安装 Gitlab 安装 gitlab-ce 版本，当前最新版本为 17.2.0
配置 external_url 参考 https://docs.gitlab.com/ee/install/docker.html#install-gitlab-using-docker-compose
services: gitlab: image: gitlab/gitlab-ce container_name: gitlab restart: always hostname: &amp;#39;gitlab.example.com&amp;#39; environment: GITLAB_OMNIBUS_CONFIG: | external_url &amp;#39;https://gitlab.example.com&amp;#39; ports: - &amp;#39;80:80&amp;#39; - &amp;#39;443:443&amp;#39; - &amp;#39;22:22&amp;#39; volumes: - &amp;#39;/srv/gitlab/config:/etc/gitlab&amp;#39; - &amp;#39;/srv/gitlab/logs:/var/log/gitlab&amp;#39; - &amp;#39;/srv/gitlab/data:/var/opt/gitlab&amp;#39; shm_size: &amp;#39;256m&amp;#39; 停止本地的 sshd 和 nginx 服务，避免 22 、80、443端口备占用：
systemctl stop nginx systemctl stop sshd 启动 gitlab：
export GITLAB_HOME=/srv/gitlab &amp;amp;&amp;amp; docker compose up -d 查看日志：
docker logs -f gitlab 本地配置 /etc/host 文件：
127.0.0.1 gitlab.example.com 打开浏览器访问：https://gitlab.example.com/ ，用户名 root，密码通过下面命令查看：
cat /srv/gitlab/config/initial_root_password 修改默认端口 参考 https://github.com/hutchgrant/gitlab-docker-local/，
services: gitlab: image: gitlab/gitlab-ce container_name: gitlab restart: always hostname: &amp;#39;gitlab.example.com&amp;#39; environment: GITLAB_OMNIBUS_CONFIG: | external_url &amp;#39;https://gitlab.example.com:3143&amp;#39; gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 3122 ports: - &amp;#39;3143:443&amp;#39; - &amp;#39;3122:22&amp;#39; volumes: - &amp;#39;/srv/gitlab/config:/etc/gitlab&amp;#39; - &amp;#39;/srv/gitlab/logs:/var/log/gitlab&amp;#39; - &amp;#39;/srv/gitlab/data:/var/opt/gitlab&amp;#39; shm_size: &amp;#39;256m&amp;#39; 配置时区 进入容器，修改配置 /etc/gitlab/gitlab.</description>
    </item>
    <item>
      <title>Jenkins安装和部署-使用Docker</title>
      <link>https://blog.chensoul.cc/posts/2024/06/26/install-jenkins/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/26/install-jenkins/</guid>
      <description>使用 Docker 安装 $ docker volume create --name jenkins_data $ docker run -p 8080:8080 -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkins/jenkins:jdk21 第一次启动 Jenkins 时，Docker 日志将包含如下消息：
Jenkins initial setup is required. An admin user has been created and a password generated. Please use the following password to proceed to installation: 1883c809f01b4ed585fb5c3e0156543a This may also be found at: /var/jenkins_home/secrets/initialAdminPassword 那串随机的数字和字母是初始管理员密码，这是完成 Jenkins 配置所必需的。
使用 Docker Compose 安装 services: jenkins: image: jenkins/jenkins:jdk21 ports: - &amp;#34;8080:8080&amp;#34; - &amp;#34;50000:50000&amp;#34; volumes: - jenkins_data:/var/jenkins_home - /var/run/docker.sock:/var/run/docker.sock - /etc/localtime:/etc/localtime:ro volumes: jenkins_data: 在 Docker 中下载并运行 Jenkins 参考 在 Docker 中下载并运行 Jenkins。
定制官方 Jenkins Docker 镜像，例如，安装 curl、maven、docker-ce-cli
FROM jenkins/jenkins:jdk21 USER root RUN apt-get update &amp;amp;&amp;amp; apt-get install -y curl maven lsb-release RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.</description>
    </item>
    <item>
      <title>Tengine动态裁剪图片</title>
      <link>https://blog.chensoul.cc/posts/2024/06/26/install-cert-manager/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/26/install-cert-manager/</guid>
      <description>软件列表 Tengine：https://github.com/alibaba/tengine Lua：http://www.lua.org/ftp/ ，这里使用 lua-5.3.1.tar.gz LuaJIT：http://luajit.org/download.html ，这里使用 LuaJIT-2.0.4.tar.gz GraphicdMagick：https://sourceforge.net/projects/graphicsmagick/files/graphicsmagick/ ，这里使用 GraphicsMagick-1.3.18.tar.gz 安装Lua 先安装依赖：
yum install readline readline-devel -y 解压文件
tar -zxvf lua-5.3.1.tar.gz 进入目录，执行：
cd lua-5.3.1 make linux &amp;amp;&amp;amp; make install 验证安装成功:
lua -v 安装luaJIT 解压文件
tar -zxvf LuaJIT-2.0.4.tar.gz 进入目录，执行：
cd LuaJIT-2.0.4 make &amp;amp;&amp;amp; make install 安装tengine 安装依赖：
yum -y install pcre-devel openssl openssl-devel 解压文件：
unzip tengine-master.zip 进入目录，执行：
cd tengine-master ./configure --prefix=/usr/local/Tengine --dso-path=/usr/local/Tengine/modules --with-http_realip_module --with-http_gzip_static_module \ --with-http_stub_status_module --with-http_concat_module \ --with-http_lua_module --http-proxy-temp-path=/var/tmp/Tengine/proxy_temp \ --http-fastcgi-temp-path=/var/tmp/Tengine/fastcgi_temp \ --http-uwsgi-temp-path=/var/tmp/Tengine/uwsgi_temp \ --http-scgi-temp-path=/var/tmp/Tengine/cgi_temp \ --http-client-body-temp-path=/var/tmp/Tengine/client_body_temp \ --http-log-path=/var/log/Tengine/access.log \ --error-log-path=/var/log/Tengine/error.log 再执行：
make &amp;amp;&amp;amp; make install 验证安装成功:
$ /usr/local/Tengine/sbin/nginx /usr/local/Tengine/sbin/nginx: error while loading shared libraries: libluajit-5.1.so.2: cannot open shared object file: No such file or directory 提示找不到文件，配置一个软连接：</description>
    </item>
    <item>
      <title>搭建本地 Maven 仓库 Artifactory 开源版</title>
      <link>https://blog.chensoul.cc/posts/2024/06/25/install-artifactory-oss/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/25/install-artifactory-oss/</guid>
      <description>安装 Artifactory 官方下载安装地址：https://jfrog.com/community/download-artifactory-oss/ ，支持三种安装方式：
Windows Installer Linux Installers tar.gz RPM Debian Docker Compose Docker Helm 手动下载并安装 安装包文件地址在 https://releases.jfrog.io/artifactory/bintray-artifactory/org/artifactory/oss/jfrog-artifactory-oss/ 。以当前最新版本 7.84.15 为例，在 linux 服务器上下载：
wget https://releases.jfrog.io/artifactory/bintray-artifactory/org/artifactory/oss/jfrog-artifactory-oss/7.84.15/jfrog-artifactory-oss-7.84.15-linux.tar.gz tar -zxvf jfrog-artifactory-oss-7.84.15-linux.tar.gz cd jfrog-artifactory-oss-7.84.15/app/bin nohup ./artifactory.sh 通过 docker 安装 设置 JFROG_HOME 并创建目录：
export JFROG_HOME=~/.jfrog mkdir -p $JFROG_HOME/artifactory/var/etc/ sudo chown -R 1030:1030 $JFROG_HOME/artifactory/var sudo chmod -R 777 $JFROG_HOME/artifactory/var touch $JFROG_HOME/artifactory/var/etc/system.yaml 配置数据库。参考 JFrog Recommends Using PostgreSQL ，Artifactory 7.84.7 之后，默认使用 postgresql 数据库。
cat &amp;lt;&amp;lt;EOF &amp;gt; $JFROG_HOME/artifactory/var/etc/system.yaml shared: database: type: postgresql driver: org.postgresql.Driver url: jdbc:postgresql://192.168.2.39:5432/artifactory username: artifactory password: password EOF 如果需要使用其他数据库，需要修改配置文件，并添加 jdbc 驱动。例如，使用 mysql 数据库：
cat &amp;lt;&amp;lt;EOF &amp;gt; $JFROG_HOME/artifactory/var/etc/system.yaml shared: database: allowNonPostgresql: true type: mysql driver: com.mysql.jdbc.Driver url: &amp;#34;jdbc:mysql://192.</description>
    </item>
    <item>
      <title>搭建本地Maven仓库Nexus</title>
      <link>https://blog.chensoul.cc/posts/2024/06/25/install-nexus/</link>
      <pubDate>Tue, 25 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/25/install-nexus/</guid>
      <description>使用 Docker 安装 $ docker volume create --name nexus_data $ docker run -d -p 8081:8081--name nexus -v nexus_data:/nexus-data sonatype/nexus3 8081 是 Nexus UI 端口 使用 Docker Compose 安装 services: nexus: image: sonatype/nexus3 platform: linux/amd64 ports: - &amp;#34;8081:8081&amp;#34; volumes: - nexus_data:/nexus-data - /etc/localtime:/etc/localtime:ro volumes: nexus_data: 访问并配置 Nexus 访问 http://127.0.0.1:8081/ 或者是 http://&amp;lt;your IP&amp;gt;:8081，用户名为 admin ，初始密码在容器里的 /nexus-data/admin.password 文件
docker ps # docker-nexus-1 为容器名称 docker exec -it docker-nexus-1 cat /nexus-data/admin.password 登录之后，将密码修改为自己的密码，比如：admin。
开启匿名访问权限 依次点击【Security】&amp;ndash;【Realms】,将【Docker Bearer Token Tealm】添加到右侧，然后保存。
创建 Maven 仓库 Nexus 提供三种类型的仓库：
hosted : 本地存储
proxy : 提供代理其他仓库的类型，如阿里云镜像加速器
groudp : 组类型，实质作用是组合多个仓库为一个地址
创建一个 maven(proxy) 仓库，名称：aliyun，Version Policy 选择 Mixed，URL 地址：https://maven.aliyun.com/nexus/content/groups/public/，并修改 maven-public 仓库，将 aliyun 加入 maven-public 的 Group 中。</description>
    </item>
    <item>
      <title>All things about OAuth</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/all-things-about-oauth/</link>
      <pubDate>Thu, 06 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/06/all-things-about-oauth/</guid>
      <description>OAuth 是一种开放协议，允许通过网络、移动和桌面应用程序以简单、标准的方式进行安全授权。
OAuth 2 入门 以下是一些 OAuth 2.0 指南，涵盖了理解和实现客户端和服务器所需的许多主题。
OAuth 2.0 简化版 由 Aaron Parecki 编写的*《OAuth 2.0 Simplified*》是一份专注于编写客户端的 OAuth 2.0 指南，它在入门级别上清晰地概述了规范。
角色：应用程序、API 和用户
创建应用程序
授权
：获取访问令牌
Web 服务器应用程序 单页应用程序 移动应用程序 其他的 发出经过身份验证的请求
与 OAuth 1.0 的区别
身份验证和签名 用户体验和替代授权流程 规模性能 资源
OAuth 2.0 服务器 OAuth 2.0 服务器，由Aaron Parecki编写并由Okta发布，是构建 OAuth 2.0 服务器的指南，其中包括许多不属于规范的细节。
代码和库 有多种语言的客户端和服务器库可以帮助您快速入门。
图书 您可以找到一些有关 OAuth 2.0 的优秀书籍。
咨询 寻找一位OAuth 顾问来帮助您的组织。
Spring Authorization Server Spring Authorization Server官方文档
Spring Authorization Server 配置模型
Spring Authorization Server （如何使用具有 PKCE 的单页应用程序进行身份验证-1）
Spring Authorization Server （如何使用具有 PKCE 的单页应用程序进行身份验证-2）
Spring Authorization Server相关文章</description>
    </item>
    <item>
      <title>JWT</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/jwt/</link>
      <pubDate>Thu, 06 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/06/jwt/</guid>
      <description>什么是 JWT？ JWT（JSON Web Token）是一种开放标准(RFC 7519)，用于在网络应用程序之间安全地传输信息。它被设计用于在两方之间传输声明，这些声明可以是身份验证和授权信息，也可以是任何其他类型的信息。
设计目的：不需要服务器端存储状态，安全地传递非敏感信息。
JWT 特点 可扩展性：可以在 payload 中携带任意的 JSON 数据 自包含性：所有用户相关信息都在 JWT 中，不需要依赖数据库 无状态性：服务器不需要保存会话状态，提高了系统的可扩展性 跨域支持：可以跨域传递，因为是 JSON 格式 安全性：通过签名确保数据不被篡改 JWT 组成 eyJraWQiOiJmYTNkZmZjMS0xZmQ3LTRhM2QtYTEyMC1mNjY4OWE4NDM5YjQiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjbGllbnQiLCJhdWQiOiJjbGllbnQiLCJuYmYiOjE3MTc1NDk5NDMsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MCIsImV4cCI6MTcxNzU1MDI0MywiaWF0IjoxNzE3NTQ5OTQzLCJqdGkiOiJiMjU0ZGVhMi1kMWE2LTQxNzEtYjEyYy1lNmYzYzZjMDJkMGQifQ.eRiS0H2E-h5PiDEfJikjoPGH1DCqWVt4VIzLtPoSOaIK6jBIaw0h5m-reZVUyZPNYZG68Ymhey17aZBMveirqCxN-lNcPMIGfuqMptfsD9E6Hfam6bEMgpEAOQsQ6Ruk3vGtdmjnEC2h9ZStoqT5-C6JgArwFLGgX92LXrRYz7-60n0I6EAB07u9kxc6FQKLow90RiyXi2YLur-ttOUQpecf8zHi48zRc-HLLoWAMaNddT-4hg4v0Qts4DultpxZB_Xu7DRc91G_8M6sYFSvFSVFHlcWFgKNLZqUYwepLHX2LxoXdbTLGqV9x__-J8UO0TO3TkpC2BaZAiseYcpYMw JWT 主要有以下三个部分通过 base64 加密组成:
Header（头部）：描述 JWT 的元数据，通常包含两部分信息:
声明类型，通常是 &amp;ldquo;JWT&amp;rdquo; 所使用的哈希算法，如 HMAC SHA256 或 RSA Payload（负载）：包含声明，即一些跟当前用户相关的重要信息，如用户 ID、用户角色等。
Signature（签名）：由 header 和 payload 使用密钥进行签名而组成，用于验证消息不被篡改。
HMAC_SHA256( secret, base64urlEncoding(header) + &amp;#39;.&amp;#39; + base64urlEncoding(payload) ) HMAC-SHA256 是一种基于加密哈希函数的消息认证码（HMAC）算法，是对称算法，它结合使用了 HMAC 和 SHA-256 哈希函数。
Header base64解密后：
{ &amp;#34;kid&amp;#34;: &amp;#34;fa3dffc1-1fd7-4a3d-a120-f6689a8439b4&amp;#34;, &amp;#34;alg&amp;#34;: &amp;#34;RS256&amp;#34; } Payload 解密后：
{ &amp;#34;sub&amp;#34;: &amp;#34;client&amp;#34;, &amp;#34;aud&amp;#34;: &amp;#34;client&amp;#34;, &amp;#34;nbf&amp;#34;: 1717549943, &amp;#34;iss&amp;#34;: &amp;#34;http://localhost:8080&amp;#34;, &amp;#34;exp&amp;#34;: 1717550243, &amp;#34;iat&amp;#34;: 1717549943, &amp;#34;jti&amp;#34;: &amp;#34;b254dea2-d1a6-4171-b12c-e6f3c6c02d0d&amp;#34; } JWS 和 JWE JWS（JSON Web Signature）是 JSON Web Token (JWT) 规范的一个子规范，它定义了使用 JSON 数据结构表示签名或未签名的内容。
只对内容做签名，确保其不被篡改，但内容本身并没有加密。 JWS 主要包含以下三个部分:</description>
    </item>
    <item>
      <title>OAuth2和OIDC区别</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/oauth2-oidc/</link>
      <pubDate>Thu, 06 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/06/oauth2-oidc/</guid>
      <description>认证和授权 认证 (Authentication)：
认证是验证用户、设备或系统身份的过程。 常见的认证方式包括用户名/密码、生物特征(如指纹、人脸)、单点登录(SSO)等。 认证确保只有被授权的实体才能访问系统或资源。 授权 (Authorization)：
授权是确定已认证的实体被允许执行哪些操作或访问哪些资源的过程。 授权通常基于预定义的策略和规则，如角色、权限、访问控制列表(ACL)等。 授权决定了经过身份验证的实体可以执行的操作和访问的资源。 认证和授权的关系：
认证是先决条件，在授权之前必须先完成用户或实体的身份验证。 认证确保只有合法的实体可以访问系统，授权则决定了这些实体可以执行哪些操作。 认证和授权通常结合使用，共同构成完整的访问控制机制。 在实际应用中，认证和授权通常遵循以下流程:
用户或客户端提供身份凭证进行认证。 系统验证用户或客户端的身份，确认其身份有效。 根据已验证的身份，授予用户或客户端相应的访问权限和操作权限。 用户或客户端可以在授权范围内执行操作和访问资源。 OIDC OAuth 2.0 代表开放授权，是一种标准，旨在代表用户提供对资源的同意访问，而无需共享用户的凭据。OAuth 2.0 是一种授权协议，而不是身份验证协议，它主要被设计为授予对一组资源（例如远程 API 或用户数据）的访问权限的一种方式。
OAuth 2.0 仅用于授权，用于授予从一个应用程序到另一个应用程序的数据和功能的访问权限。OpenID Connect (OIDC) 是一个位于 OAuth 2.0 之上的薄层，它添加了有关登录人员的登录和个人资料信息。
​	图片来自Azure 文档
OIDC 的工作原理 授权码流程 要验证用户身份，应用程序首先将用户的浏览器重定向到 OpenID 提供商。OpenID 提供商验证用户身份，并使用授权码将用户的浏览器重定向回应用程序。然后，应用程序使用授权码获取ID Token和Access Token：
隐式流 传统上，无法安全存储机密的应用程序会使用隐式流程。使用此流程不再被视为请求访问令牌的最佳实践。
混合流 混合流程是一种 OpenID Connect 流程，它结合了隐式流程和授权码流程的特征。它使客户端能够直接从授权端点获取一些令牌，同时仍然可以从令牌端点获取其他令牌。
OpenID 演示 您可以使用以下网站来玩自己的：https://openidconnect.net/
OAuth2 和 OIDC OAuth 2.0 和 OpenID Connect (OIDC) 是两个不同但相关的协议，它们之间有以下主要区别:
目的不同： OAuth 2.0 是一种授权框架，目的是授予第三方应用程序有限的访问权限，而不需要共享用户的凭证。 OIDC 是构建在 OAuth 2.0 之上的身份验证协议，目的是提供安全的身份验证和用户信息交换。 认证和授权的区别： OAuth 2.0 主要处理授权，即允许第三方应用程序访问受保护资源的过程。 OIDC 在 OAuth 2.0 的基础上增加了认证功能，即验证用户身份的过程。 返回的数据不同： OAuth 2.0 返回的是访问令牌(Access Token)，用于访问受保护资源。 OIDC 返回的是 ID 令牌(ID Token)，包含了有关已验证用户的声明信息。 协议流程不同： OAuth 2.0 定义了四种授权许可类型，如授权码、隐式、客户端凭证等。 OIDC 在 OAuth 2.</description>
    </item>
    <item>
      <title>Spring Boot项目创建Docker镜像并运行应用</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</link>
      <pubDate>Thu, 06 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</guid>
      <description>手动创建 Dockerfile 添加 Dockerfile
在您的 Spring Boot 项目根目录下创建一个名为 Dockerfile 的文件，并添加以下内容:
# 使用 OpenJDK 21 作为基础镜像 FROM openjdk:21 # 设置工作目录 WORKDIR /app # 将 JAR 文件复制到容器中 COPY target/*.jar app.jar # 暴露 8080 端口 EXPOSE 8080 # 设置容器启动时执行的命令 ENTRYPOINT [&amp;#34;java&amp;#34;, &amp;#34;-jar&amp;#34;, &amp;#34;app.jar&amp;#34;] 这个 Dockerfile 将使用 OpenJDK 21 作为基础镜像，将编译后的 JAR 文件复制到容器中，并在容器启动时执行 java -jar app.jar 命令。
使用 Google Distroless 基础镜像:
Distroless 基础镜像是一种精简的 Linux 发行版,只包含应用程序运行所需的最小依赖项。 在 Dockerfile 中使用 gcr.io/distroless/java:11 作为基础镜像可以大幅减小最终镜像的体积。 如果 target 目录下存在多个 jar 文件，则可以在 dockerfile 同级添加一个 .dockerignore 文件忽略掉 *-sources.jar ：
# Include any files or directories that you don&amp;#39;t want to be copied to your # container here (e.g., local build artifacts, temporary files, etc.</description>
    </item>
    <item>
      <title>[译][译]OAuth2 with Spring 第5部分：使用PKCE保护您的Spring Boot应用程序以增强安全性</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security/</guid>
      <description>原文地址：https://mainul35.medium.com/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security-d8025cd08769
免责声明：本文技术性很强，需要清楚了解本系列前几篇文章，特别是第 1 部分和第 3 部分。
带有代码交换证明密钥 (PKCE) 的授权代码流用于无法存储客户端机密的应用程序。此类应用程序包括：
原生应用程序——可以反编译并检索客户端凭证的移动应用程序。 单页应用 — 整个源代码可在浏览器中使用。因此，无法安全地存储客户端机密。 怎么运行的 Spring Boot OAuth2 与 PKCE
希望这张图已经足够清晰易懂了。因此，我将直接进入演示。
对于此演示，我们有 3 台服务器。
授权服务器：在端口 9001 上运行。 资源服务器：在端口8090上运行。 社交登录客户端（BFF）：在端口 8080 上运行。 让我们看一下代码。
授权服务器 一、pom.xml
授权服务器的 pom.xml 中没有太多需要解释的变化
application.yml.yml
application.yml文件有很多更改，特别是删除了客户端注册。当前版本的application.yml非常简短，如下所示。
server: port: 9001 logging: level: org: springframework: security: trace 三. SecurityConfig 类
所有的安全配置以及客户端和用户详细信息注册、JWT token 解码都放在此类中
@Configuration public class SecurityConfig { // This first SecurityFilterChain Bean is only specific to authorization server specific configurations // More on this can be found in this stackoverflow question answers: // https://stackoverflow.com/questions/69126874/why-two-formlogin-configured-in-spring-authorization-server-sample-code @Bean @Order(1) public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) throws Exception { OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http); http.getConfigurer(OAuth2AuthorizationServerConfigurer.class).oidc(withDefaults()); return http .exceptionHandling(e -&amp;gt; e .</description>
    </item>
    <item>
      <title>[译]OAuth2 with Spring 第1部分：了解基本概念</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/</guid>
      <description>原文地址：https://mainul35.medium.com/oauth2-with-spring-part-1-knowing-the-basic-concepts-5c4aa17884a
在本系列关于 Spring 的 OAuth2的文章中，我将尝试介绍和解释与 OAuth2 相关的每一个问题以及如何在 Spring 框架中实现这些问题。请记住，OAuth2 完全是一个概念性的东西，在不同的框架中，它有自己的实现。此外，许多应用程序开发人员开发自己的 OAuth2 实现，而不使用 Spring 框架提供的 OAuth2 框架支持。因此，我将就这个主题撰写一系列文章。
什么是 OAuth2 以及为什么？ 根据Octa的说法，OAuth2 是一种用于身份验证和授权的开放标准。它实际上不是一种服务，但它通过 TLS 提供基于令牌的安全性来保护服务。它使用令牌而不是凭据来授权设备、服务器、API 和应用程序。
OAuth2 的主要目的是让用户能够从单个点或提供商访问多个应用程序，这些应用程序可以使用相同的身份验证和授权信息。这意味着，并不总是需要使用用户 ID 和密码登录。相反，用户将被重定向到拥有用户身份的授权服务器，用户只需单击一下即可允许其他应用程序使用其身份验证信息。一旦获得授权，用户就可以使用来自授权服务器的相同 ID。
OAuth2 参与者和授权类型 a) 参与者
对于 OAuth2 架构，有 4 个参与者 -
资源所有者——在授权服务器中拥有自己的授权信息（通常是用户名、密码、角色等）的用户 客户端——客户端可以被视为资源所有者能够请求资源服务器中受保护资源的应用程序 授权服务器——位于客户端和资源所有者中间，检查身份验证和授权的服务器 资源服务器——包含资源 所有者想要访问的资源。 b) 授权类型
OAuth2 有几种授权类型来请求访问令牌。授权类型的唯一目的是生成访问令牌。授权类型包括：
授权码— 为了接收访问令牌，授权客户端向授权服务器发送请求以及先前从授权服务器收到的授权码。本系列的第 3 部分专门介绍此授权码授予。 **PKCE —**代码交换证明密钥 (PKCE) 是授权代码授予的扩展版本，旨在支持单页应用程序或移动应用程序，以防止 CSRF 或授权代码注入攻击。PKCE 最初旨在保护移动应用程序中的授权代码流，但其防止授权代码注入的能力使其适用于每种类型的 OAuth 客户端，甚至是使用客户端身份验证的 Web 应用程序。本系列的第 5 部分描述了此流程的代码示例。 客户端凭证— 在此流程中，客户端应用程序使用 client_id 和 client_secret 进行请求，授权类型为 client_credential。这通常发生在使用服务的第三方应用程序中。本系列的第 2 部分专门介绍此客户端凭证。 刷新令牌授权— 此授权类型由客户端使用。当访问令牌过期时，存储在客户端内存中的刷新令牌将以授权类型 refresh_token 发送到授权服务器。服务器将返回一个新的 access_token。我们不会专门写一篇文章，因为它主要由应用程序内部处理。 了解接收访问令牌的工作流程 OAuth 工作流
为了请求资源服务器中的某些资源，资源所有者需要访问令牌 资源所有者打开一个应用程序（可能是授权服务器的客户端，在上图中为 BusinessClient）来请求资源服务器中的一些安全资源。 当资源所有者请求没有任何令牌的资源时，他/她可以选择授权服务器。 选择后，客户端将被重定向到授权服务器 (OAuthSercer)。授权服务器要求输入用户名和密码（以及grant_type）。 资源所有者提供所需信息并提交。如果信息真实，授权服务器将访问令牌（以及其他信息，可选）发送给客户端。 客户端保存令牌并在内部创建对资源的请求，这是资源所有者在没有令牌时提出的。 收到令牌后，资源服务器将其发送到授权服务器以验证令牌。 如果授权服务器向资源服务器提供了肯定的响应，资源服务器将响应资源所有者请求的信息。 这就是整个过程的工作原理。在我的下一篇文章中，我将深入研究代码并演示使用内存客户端的 OAuth2 实现。
参考： OAuth2 授权类型 — https://oauth.net/2/grant-types/ OAuth2 角色 - http://websystique.</description>
    </item>
    <item>
      <title>[译]OAuth2 with Spring 第2部分：授权服务器入门</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/</guid>
      <description>原文地址：https://mainul35.medium.com/oauth2-with-spring-part-2-getting-started-with-authorization-server-13804910cb2a
Spring 团队最近发布了他们的授权服务器。OAuth2 一直是一个热门话题，而构建或理解授权服务器一直是一个谜。在本系列的第 1 部分中，我描述了几乎所有您需要了解的有关 OAuth2 的概念性内容。在本系列的这篇文章中，我将尝试演示如何构建具有client_credential授权类型的授权服务器。我将从使用配置属性进行自动配置开始解释它们，并通过编写 Java 代码自定义配置。让我们开始吧。
设置授权服务器 让我们转到Spring Initializr并生成项目。
为了创建授权服务器，我们需要 Oauth2 授权服务器依赖。
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-oauth2-authorization-server&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 生成项目并导入到您最喜欢的 IDE。
现在让我们在application.yml中添加我们想要的配置。
在第 1 部分中，我们了解到我们需要一个客户端来从授权服务器获取令牌。因此，我们需要授权服务器有一些客户端信息。在 application.yml 中，我将放置获取令牌和其他授权信息所需的最少客户端信息。
spring: security: oauth2: authorization-server: client: client-1: registration: client-id: client client-secret: &amp;#34;{noop}secret&amp;#34; client-authentication-methods: client_secret_basic authorization-grant-types: client_credentials 根据上面的配置属性，我们注册了一个客户端client-1。
对于client-1，我们定义了 4 个属性：
clientId client-secret client-authentication-methods：本例中为基本身份验证（client_secret_basic） authorization-grant-types：用于请求新令牌的授予类型。在本例中为 client_credentials。 现在，我们必须启动授权服务器应用程序。
接下来，在 postman 中，我们向*/oauth2/token端点发出 POST 请求以获取令牌。为什么是/oauth2/token*端点？
我们可以看到，一旦我们提交请求，我们就会收到详细的令牌信息。
瞧，我们最小的授权服务器现在已经启动并运行了。
该项目的链接可以在这里找到。
问题 1. 我们在哪里找到默认令牌端点？
答：在 OAuth2 的 RFC 中，它提到默认令牌端点应该是*/token*。但是，很难找到 Spring Boot 授权服务器的默认令牌端点。我不得不浏览源代码。在类OAuth2TokenEndpointFilter中，提到了默认令牌端点。
感谢您的耐心阅读。在下一篇文章中，我们将尝试创建一个资源服务器，使用authorization_code授权获取令牌以访问一些私人数据。</description>
    </item>
    <item>
      <title>[译]OAuth2 with Spring 第3部分：使用Spring授权服务器授予authorization_code OIDC客户端</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/</guid>
      <description>原文地址：https://mainul35.medium.com/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring-67769f9dd68a
在上一篇文章中，我们讨论了使用 client_credential 的 OAuth2 授权服务器配置。在本文中，我们将讨论使用 authorization_code 授予类型的授权服务器配置。此授权流程将有一个 OIDC 客户端，它将通过使用授权码进行请求来获取 JWT 令牌。
如今，社交登录非常流行，它已由 OAuth2 和 OIDC 规范标准化。我们今天的讨论主题是设置我们的社交登录客户端 (oidc-client) 应用程序，将其注册到 Spring Boot 授权服务器，使用授权服务器登录并从 OIDC 客户端应用程序访问安全资源。
今天的演示将包含 2 个应用程序：
授权服务器（端口 8080） 社交登录客户端（端口 8081） 由于这是一个复杂的主题，让我们首先查看 UI 中的应用程序身份验证和授权流程，然后再讨论配置。
要继续阅读本文，请从此处获取项目源代码。首先启动授权服务器应用程序，然后在您最喜欢的 IDE 上启动社交登录客户端应用程序。
我们的社交登录客户端有 2 个端点：
“/” 将使我们能够访问公共数据 “/private-data” 将为我们提供 JWT 令牌 在浏览器上，导航到“ http://127.0.0.1:8081/private-data ”。这将带我们进入客户端应用程序的登录页面。
由于我们对社交登录感兴趣，因此不要在此登录页面中输入您的用户名和密码，而是单击oidc-client。它将带您进入授权服务器的登录页面。
在下面的屏幕中输入“ user”作为用户名，输入“ secret”作为密码，然后单击“登录”。
这将带您进入同意页面。请注意同意页面的以下 URL：
http://localhost:8080/oauth2/authorize?response_type=code&amp;amp;client_id=oidc-client&amp;amp;scope=openid%20profile%20read%20write&amp;amp;state=PcF7UjHDmYvmhwpKfv9zVosy0ZBIA2pZe7HHPixZ76E%3D&amp;amp;redirect_uri=http://127.0.0.1:8081/login/oauth2/code/oidc-client&amp;amp;nonce=_KHIsN6mNur-AFQz5KNK0TnZi3VPmj567qbe8-4zPMo&amp;amp;continue
从上面的URL我们可以找到几条信息：
response_type=code client_id=oidc-client scope = openid, profile, read, write redirect_uri=http://127.0.0.1:8081/login/oauth2/code/oidc-client 现在，从上面的页面提供您想要允许客户端应用程序的同意。
如果最初请求的URL（/private-data）具有您刚刚提供的正确同意，它将向我们提供访问令牌和刷新令牌，否则它将显示403错误页面。
现在让我们深入研究代码。
授权服务器配置 在这个应用程序中，所有的事情都在 application.yml 文件中完成。Java 方面没有什么内容，除了主类。
spring: security: user: # Definition of the user details that we will use for login # in the authorization server name: user password: &amp;#34;{noop}secret&amp;#34; roles: USER # Oauth2 client registration starts from here oauth2: authorization-server: client: # We have defined only one client: oidc-client # This client information was also mentioned # in the above URL: client_id=oidc-client oidc-client: registration: # The following client ID and client secret will be matched with the # provided client credentials from client application client-id: oidc-client client-secret: &amp;#34;{noop}secret2&amp;#34; # The following authorization-grant-type will be matched with the # provided authorization-grant-type from the client application authorization-grant-types: - &amp;#34;authorization_code&amp;#34; - &amp;#34;refresh_token&amp;#34; client-authentication-methods: - client_secret_basic # This following redirect URI will be used to redirect the resource owner to the # Client application after the resource owner (user) provides necessary consents.</description>
    </item>
    <item>
      <title>[译]OAuth2 with Spring 第4部分：Spring授权客户端与Google授权服务器的社交登录演示</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google/</guid>
      <description>原文地址：https://mainul35.medium.com/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google-be6097ec18a5
在之前的文章中，我们学习了如何使用 OIDC 连接到我们自己的授权服务器。我们在自托管授权服务器中定义了我们自己的客户端应用程序。在今天的文章中，我们将使用 Google 和 GitHub 作为我们的授权服务器，并将我们的授权客户端应用程序连接到这些授权服务器并从它们接收令牌。应用程序登录屏幕将如下所示。
为了实现这一点，我们需要将我们的授权客户端应用程序注册为 Google 授权服务器中的客户端，并使用客户端应用程序中的客户端凭据以及可用范围。
Google 授权服务器中的客户端注册 我们需要在 Google 开发者控制台中创建一个应用程序并配置必要的内容。
打开浏览器并转到https://console.developers.google.com/。您将看到如图 1 所示的屏幕。
图。1
从这里，选择下拉菜单以选择一个项目（1.1）。它将显示一个像上面一样的弹出窗口。从弹出窗口中，单击**“新建项目”按钮（1.2）。由于我已经创建了我的应用程序并将我的应用程序命名为google-auth-server-demo（1.3），所以我不会再创建新的应用程序了。
创建应用程序后，从上面的屏幕中选择您的应用程序，您将看到仪表板。从左侧导航中，单击API 和服务和页面。由于我们目前对列表中的任何 Google 服务都不感兴趣，我们可以单击左侧导航中的凭据 (2.1) 。但如果您有兴趣从客户端应用程序中使用任何 Google 服务，您可能会发现这篇文章很有趣，我在其中演示了如何访问 Google Drive 数据。
图 2
它将带我们进入以下页面。
图 3
从这里，我们可以创建新的凭证 (3.1)。由于我们已经创建了凭证 (3.2)，我们可以编辑它 (3.3) 以查看我们如何配置它。
图 4
在客户端注册页面，我们配置了客户端名称（4.1）、授权 JS 来源（4.2）以注册以应对 CORS 安全问题，授权重定向 URI（4.3）。当我们第一次点击保存按钮（4.4）时，它会为我们生成客户端 ID（4.5）和客户端密钥（4.6）。
我们需要在客户端应用程序的配置文件即application.yml中使用这些客户端ID、客户端密钥和重定向URI。
在授权客户端 application.yml 文件中使用上述信息：
该配置与我们第 3 部分的客户端配置部分非常相似。
spring: security: oauth2: client: registration: google: client-id: &amp;#34;615531537634-806j95c1s18uundif9nl4oggcag7lcm6.apps.googleusercontent.com&amp;#34; client-secret: &amp;#34;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&amp;#34; redirect-uri: &amp;#34;{baseUrl}/login/oauth2/code/{registrationId}&amp;#34; 现在，我们需要在 Google 授权服务器中设置同意屏幕，以允许客户端应用程序请求所需的范围。
要进入同意屏幕，我们需要单击左侧导航栏中的Oauth 同意屏幕（5.1）。
图 5
我已经创建了同意屏幕，所以让我们通过编辑应用程序看看我做了什么（5.2）
图 6
此屏幕已在屏幕右侧详细记录（6.1）。遵循这些准则并保存以继续执行步骤 2：范围（6.2）
图 7
在上面的屏幕上，单击**“添加或删除范围”按钮 (7.1)，右侧会打开一个弹出窗口。从这个弹出窗口中，我们为我们的演示 (7.2) 选择了几个最低要求的范围，然后单击“更新”**按钮 (7.3)。更新后，这些范围将显示在图 7 的 (7.4) 部分中。
当我们从此范围步骤单击**“保存并继续”**按钮时，我们可以从客户端应用程序添加一些测试用户来测试。
图 8
为了测试目的，我们只允许 2 个用户（8.1）。
现在，一旦我们保存了步骤 3 和步骤 4，我们就可以准备在客户端应用程序中使用这些范围了。</description>
    </item>
    <item>
      <title>[译]OAuth2.0服务器</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-server/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-server/</guid>
      <description>背景 前言 作者：Aaron Parecki
我第一次接触 OAuth 是在 2010 年，当时我正在构建一个 API，我知道我希望第三方开发人员能够在其基础上构建应用程序。当时，OAuth 看起来令人生畏。OAuth 1 的实现只有少数几个，而 OAuth 2.0 仍是一个草稿。一天晚上，我决定坐下来，拿着精酿啤酒和最新草案的纸质副本，从头到尾阅读它，直到我理解它。
在仔细阅读了长达 44 页的规范后，我学到了以下几点：阅读规范并不是了解 OAuth 工作原理的最佳方式，而且 OAuth 2.0 远没有我最初想象的那么复杂。我开始撰写一份简化的规范概述，当我第一次学习这个规范时，我希望它就存在。我将其作为一篇名为“OAuth 2.0 简化版”的博客文章发布在我的网站上。现在，这篇文章每年的阅读量达到数十万次。很明显，人们知道 OAuth 2.0 是保护其 API 的正确选择，并且正在寻找资源来帮助理解它。
我一直想将这篇博文扩展为更全面的 OAuth 服务器指南，2016 年，我与 Okta 取得了联系，我们在oauth.com上发布了这个新 OAuth 指南的第一个版本。2017 年，我们合作出版了这本书的印刷版，并于 2018 年和 2020 年出版了修订版。
我希望这本书能让 OAuth 2.0 更加平易近人，并为您在继续使用 Web 技术时提供坚实的知识基础。
背景 在 OAuth 出现之前，向第三方应用授予您帐户访问权限的常见模式是简单地向其提供您的密码并允许其以您的身份行事。我们经常在 Twitter 应用中看到这种情况，这些应用会要求您提供 Twitter 密码，以便向您提供一些帐户统计数据，或者要求能够从您的帐户发送推文以换取一些有价值的东西。
这种应用程序获取用户密码的模式显然存在许多问题。由于应用程序需要以用户身份登录服务，因此这些应用程序通常会以纯文本形式存储用户的密码，这使它们成为密码窃取的目标。一旦应用程序获得了用户的密码，它就可以完全访问用户的帐户，包括访问更改用户密码等功能！另一个问题是，在向应用程序提供密码后，您能够撤销该访问权限的唯一方法是更改密码，而用户通常不愿意这样做。
自然，许多服务很快意识到了这种模式的问题和局限性，并寻求快速解决。许多服务实现了类似于 OAuth 1.0 的东西。Flickr 的 API 使用了所谓的“FlickrAuth”，它使用了“frobs”和“tokens”。谷歌创建了“AuthSub”。Facebook 选择向每个应用程序发布一个秘密，并要求应用程序使用该秘密的 md5 哈希对每个请求进行签名。雅虎创建了“BBAuth”（基于浏览器的身份验证）。结果产生了各种各样的解决方案，彼此完全不兼容，并且经常无法解决某些安全问题。
2006 年 11 月左右，Twitter 首席架构师布莱恩·库克 (Blaine Cook) 正在寻找一种更好的 Twitter API 身份验证方法，这种方法不需要用户向第三方应用程序透露他们的 Twitter 密码。
我们想要类似 Flickr Auth / Google AuthSub / Yahoo! BBAuth 的东西，但以开放标准的形式发布，具有通用的服务器和客户端库等。
– 布莱恩·库克，2007 年 4 月 5 日
2007 年，一群致力于 OpenID 开发的人员聚在一起，创建了一个邮件列表，旨在制定 API 访问控制标准提案，该提案可供任何系统使用，无论其是否使用 OpenID。最初的这个小组包括 Blaine Cook、Kellen Elliott-McCrea、Larry Halff、Tara Hunt、Ian McKeller、Chris Messina 和其他一些人。</description>
    </item>
    <item>
      <title>[译]OAuth2简化版</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth-2-simplified/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth-2-simplified/</guid>
      <description>这篇文章以简化的格式描述了 OAuth 2.0，以帮助开发人员和服务提供商实现该协议。
OAuth 2 规范读起来可能有点混乱，所以我写了这篇文章来帮助以简化的格式描述术语。核心规范将许多决策留给实现者，通常基于实现的安全权衡。这篇文章没有描述成功实施 OAuth 2 所需的所有可能决策，而是做出适用于大多数实现的决策。
注意：本文已根据 OAuth 2.0 的当前最佳实践从原始 2012 版本更新而来。原始版本可以在这里找到。
角色 第三方应用程序：“客户端” 客户端是尝试访问用户帐户的应用程序。它需要先获得用户的许可，然后才能执行此操作。
API：“资源服务器” 资源服务器是用于访问用户信息的 API 服务器。
授权服务器 这是提供用户批准或拒绝请求的接口的服务器。在较小的实现中，这可能与 API 服务器是同一台服务器，但更大规模的部署通常会将其构建为单独的组件。
用户：“资源所有者” 资源所有者是授予访问其帐户某些部分的权限的人员。
创建应用程序 在开始 OAuth 过程之前，必须先向服务注册新应用。注册新应用时，通常会注册应用名称、网站、徽标等基本信息。此外，还必须注册一个重定向 URI，用于将用户重定向到 Web 服务器、基于浏览器的应用程序或移动应用程序。
重定向 URI 该服务只会将用户重定向到已注册的 URI，这有助于防止某些攻击。任何 HTTP 重定向 URI 都必须通过 HTTPS 提供。这有助于防止令牌在授权过程中被截获。本机应用可能会使用应用程序的自定义 URL 方案注册重定向 URI，这可能类似于 demoapp://redirect .
客户端 ID 和密码 注册应用后，你将收到一个客户端 ID 和一个（可选）的客户端密码。客户端 ID 被视为公共信息，用于构建登录 URL，或包含在页面上的 Javascript 源代码中。客户端密码必须保密。如果已部署的应用无法对机密保密，例如单页 Javascript 应用或本机应用，则不会使用该密钥，理想情况下，该服务首先不应向这些类型的应用发布机密。
授权 OAuth 2 的第一步是从用户那里获得授权。对于基于浏览器或移动的应用程序，这通常是通过向用户显示服务提供的界面来实现的。
OAuth 2 为不同的用例提供了几种“授权类型”。定义的授权类型包括：
Authorization Code 在 Web 服务器、基于浏览器的应用程序和移动应用程序上运行的应用程序的授权代码
Password 使用用户名和密码登录的密码（仅适用于第一方应用）
Client credentials 在没有用户在场的情况下进行应用程序访问的客户端凭据
Implicit 隐式以前被推荐给没有秘密的客户端，但已被使用授权代码授予与PKCE取代。
下面将详细介绍每个用例。
Web 服务器应用程序 Web 服务器应用程序是您在处理 OAuth 服务器时遇到的最常见的应用程序类型。Web 应用程序是用服务器端语言编写的，并在应用程序源代码不向公众开放的服务器上运行。这意味着应用程序在与授权服务器通信时能够使用其客户端密钥，这有助于避免许多攻击媒介。
授权 创建一个“登录”链接，将用户发送到：
https://authorization-server.com/auth?response_type=code&amp;amp; client_id=CLIENT_ID&amp;amp;redirect_uri=REDIRECT_URI&amp;amp;scope=photos&amp;amp;state=1234zyx response_type=code 指示您的服务器希望收到授权代码 client_id 首次创建应用程序时收到的客户端 ID redirect_uri 示授权完成后要将用户返回到的 URI scope 一个或多个范围值，指示您希望访问用户帐户的哪些部分 state 应用程序生成的随机字符串，稍后将对其进行验证 用户看到授权提示</description>
    </item>
    <item>
      <title>RFC6749 | OAuth2.0授权框架中文版</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2/</guid>
      <description>前言 摘要 OAuth2.0 授权框架允许第三方应用获取对 HTTP 服务的有限的访问权限，既可以以资源所有者名义在资源所有者和 HTTP 服务之间进行允许的交互，也可以允许第三方应用以自己的名义进行访问。本规范取代并淘汰 RFC 5849 中描述的 OAuth 1.0 协议。
本备忘录状态 这是一个互联网标准化过程文档。
本文档是互联网工程任务组（IETF）的作品。它代表了 IETF 社区的一致看法。它已接受公开审阅并由互联网工程指导小组（IESG）批准公布。有关互联网标准的进一步信息可在 RFC 5741 的第 2 节找到。
有关本文档的当前状态、勘误表以及如何对它提供反馈可参见 http://www.rfc-editor.org/info/rfc6749。
版权声明 IETF 信托及标识为本文档的作者的个人版权所有（c）2012。保留所有权利。
本文档受 BCP78 和 IETF 信托有关 IETF 文档的法律条款 (http://trustee.ietf.org/license-info)的约束，自本文档发布之日起生效。请仔细查阅这些文件，因为它们描述了与本文档有关的权利和限制。从本文档中提取的代码片段必须按信托法律条款 4.e 节所述包括简化 BSD 许可证文本；并且按简化 BSD 许可证中所述不附带质量保证。
目录 [toc]
1. 简介 在传统的客户端-服务器身份验证模式中，客户端请求服务器上限制访问的资源（受保护资源）时，需要使用资源所有者的凭据在服务器上进行身份验证。资源所有者为了给第三方应用提供受限资源的访问，需要与第三方共享它的凭据。 这造成一些问题和局限：
需要第三方应用存储资源所有者的凭据，以供将来使用，通常是明文密码。 需要服务器支持密码身份认证，尽管密码认证天生就有安全缺陷。 第三方应用获得的资源所有者的受保护资源的访问权限过于宽泛，从而导致资源所有者失去对资源使用时限或使用范围的控制。 资源所有者不能在不撤销对所有第三方的访问权限的情况下撤销对单个第三方的访问权限，而且必须通过更改第三方的密码来这样做。 与任何第三方应用的让步导致对终端用户的密码及该密码所保护的所有数据的让步。 OAuth 通过引入授权层以及分离客户端角色和资源所有者角色来解决这些问题。在 OAuth 中，客户端在请求受资源所有者控制并托管在资源服务器上的资源的访问权限时，将被颁发一组不同于资源所有者所拥有凭据的凭据。
客户端获得一个访问令牌（一个代表特定作用域、生命期以及其他访问属性的字符串），用以代替使用资源所有者的凭据来访问受保护资源。访问令牌由授权服务器在资源所有者认可的情况下颁发给第三方客户端。客户端使用访问令牌访问托管在资源服务器的受保护资源。
例如，终端用户（资源所有者）可以授权一个打印服务（客户端）访问她存储在图片分享服务（资源服务器）上的受保护图片，而无需与打印服务分享自己的用户名和密码。反之，她直接与图片分享服务信任的服务器（授权服务器）进行身份验证，该服务器颁发给打印服务具体委托凭据（访问令牌）。
本规范是为 HTTP（[RFC2616]）协议定制。在任何非 HTTP 协议上使用 OAuth 不在本规范的范围之内。
OAuth 1.0 协议（[RFC5849]）作为一个指导性文档发布，是一个小社区的工作成果。本标准化规范在 OAuth 1.0 的部署经验之上构建，也包括其他使用案例以及从更广泛的 IETF 社区收集到的可扩展性需求。OAuth 2.0 协议不向后兼容 OAuth 1.0。这两个版本可以在网络上共存，实现者可以选择同时支持他们。然而，本规范的用意是新的实现支持按本文档指定的 Auth 2.0，OAuth 1.0 仅用于支持现有的部署。OAuth 2.0 协议与 OAuth 1.0 协议实现细节没有太多关联。熟悉 OAuth 1.0 的实现者应该学习本文档，而不对有关 OAuth 2.0 的结构和细节做任何假设。
1.1. 角色 OAuth 定义了四种角色：
资源所有者
能够授予对受保护资源访问权限的实体。当资源所有者是一个人时，它被称为终端用户。
资源服务器</description>
    </item>
    <item>
      <title>[译]使用 Spring Boot 构建 RESTful API：集成 DDD 和六边形架构</title>
      <link>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</link>
      <pubDate>Thu, 30 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</guid>
      <description>原文链接：Building a RESTful API with Spring Boot: Integrating DDD and Hexagonal Architecture
介绍 在快节奏的软件开发世界中，API 扮演着至关重要的角色，可以有效地促进不同系统之间的交互和数据交换。API 创建最突出的技术之一是 Spring Boot，它是一种强大的工具，可以简化 Java 应用程序的开发，使开发人员可以专注于业务逻辑而不是环境设置。
在本文中，我们将探讨如何使用 Spring Boot 设计和构建 RESTful API，但我们将超越单纯的开发。我们将集成领域驱动设计 (DDD) 和六边形架构等高级概念，这些概念对于创建强大、可扩展且易于维护的应用程序至关重要。这些方法不仅可以改善代码结构和关注点分离，还可以促进技术团队和利益相关者之间的协作，使软件设计与业务需求保持一致。
在本文中，我们将把这些复杂的概念分解为简单的解释和实际示例，确保即使是初学者也可以遵循这些高级实践并将其应用到自己的项目中。无论您是希望增强应用程序架构的经验丰富的开发人员，还是 Spring Boot 世界的新手，您都可以在本文中找到适合您的开发需求的宝贵经验和技巧。
让我们深入了解构建 API 的迷人过程，该 API 不仅运行良好，而且从概念到实现都设计精良。
第 0 节：什么是 REST API？ 什么是 API？ API（应用程序编程接口）是一组规则和规范，允许不同的应用程序或软件组件相互交互。它充当中介，使开发人员能够访问软件服务中的特定功能或数据，而无需了解该软件的内部细节。
REST API 的起源 REST（表述性状态转移）架构由 Roy Fielding 于 2000 年在其博士论文中定义。REST 是一套原则，概述了应如何设计客户端和服务器之间的交互。它的创建是出于对标准的需求，该标准可以提高互联网通信的可扩展性，从而提供比当时可用的接口（例如被认为过于复杂和僵化的 SOAP）更简单、更高效的接口。
REST 旨在解决什么问题？ REST 的出现是为了应对现有架构的复杂性，这些复杂性使 Web 应用程序的开发和可扩展性变得复杂。通过采用无状态模型并使用标准 HTTP 方法（GET、POST、PUT、DELETE），REST 简化了客户端与服务器交互的实现。这种简单性使开发人员能够创建更高效、更易于维护的 Web 和移动应用程序。
REST基于六个基本原则：
**统一接口：**确保客户端和服务器之间的接口一致、标准化。 **无状态：**每个客户端对服务器的请求都必须包含理解和完成请求所需的所有信息。 **可缓存：**响应必须隐式或显式地定义它们是否可缓存。 **分层系统：**客户端不需要知道它是直接与终端服务器通信还是与中介通信。 **客户端-服务器：**用户界面（客户端）和数据存储（服务器）之间的职责分离，通过简化服务器组件增强了用户界面跨多个平台的可移植性和可扩展性。 **按需代码（可选）：**服务器可以通过发送可执行代码来扩展或定制客户端的功能。 结合这些原则不仅解决了可扩展性和维护问题，而且还促进了更为健壮、交互和高效的 Web 应用程序的创建。
现在，如果你已经读到这里，你可能会想，“HTTP 到底是什么？”好吧，让我们开始吧。
HTTP 简介 HTTP（超文本传输协议）是互联网工程任务组（IETF）定义的网络交互中使用的底层协议。它是浏览器（客户端）和网络服务器之间传输数据的手段。该协议基于请求-响应模型，对于 RESTful 通信至关重要，因为它的方法促进了 REST API 中基本的 CRUD（创建、读取、更新、删除）操作。
HTTP 方法及其使用时机 HTTP 方法定义您想要对已识别的资源执行的操作。以下是 REST API 中最常用的方法：
**GET：**用于从服务器检索信息。它不应修改资源的状态，因此非常适合无副作用的读取操作。示例：获取用户列表或特定用户的详细信息。 **POST：**用于创建新资源。当请求结果导致服务器状态改变或产生副作用时，此方法非常有用。例如：添加新用户。 **PUT：**用于更新/替换现有资源。在请求中发送完整实体很重要。示例：更新现有用户的姓名和年龄。 **DELETE：**用于删除资源。例如：删除用户。 **PATCH：**与 PUT 不同，PATCH 用于对资源进行部分更新。例如：仅更新用户的名称而不触及其他字段。 HTTP 方法的最佳实践 在设计 RESTful API 时，遵循一些最佳实践以确保 API 易于理解和使用至关重要：</description>
    </item>
    <item>
      <title>[译]如何组织代码</title>
      <link>https://blog.chensoul.cc/posts/2024/05/30/how-to-structure-our-code/</link>
      <pubDate>Thu, 30 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/30/how-to-structure-our-code/</guid>
      <description>原文链接：How to Structure Code
软件设计最佳实践，逐层发现包、按功能发现包以及六角形架构/端口和适配器。
在这篇博文中，我将探讨如何构建我们的代码并讨论最佳实践，涵盖三种不同的方法：按层打包、按功能打包以及六边形架构/端口和适配器及其优缺点。
在探索构建代码的不同方法之前，我们需要了解基本的软件设计原则：
内聚力：指模块内各类之间的相互关联程度。 耦合度：指不同模块之间的依赖程度。 模块化：指软件系统被划分为独立模块的程度。每个模块都封装了一组特定的功能，并设计为独立工作，同时通过明确定义的接口相互交互。 抽象：隐藏实现细节并仅通过接口公开必要的功能。 关注点分离：设有不同的部分，每个部分解决一个特定的关注点。 封装：将数据和方法捆绑到单个模块或类中以隐藏内部细节。 让我们仔细看看内聚力和耦合力？
内聚力描述了软件的集中程度。它与单一责任原则密切相关。
高内聚力意味着模块内的类紧密相关并具有共同的、明确定义的目的。 低内聚力意味着模块内的类之间关系松散，缺乏明确的目的且职责不相关。 要遵循的最佳实践是实现模块之间的高内聚和松散耦合。
松耦合被认为是结构良好和设计良好的计算机系统的标志，与高内聚力相结合，可带来较高的可读性和可维护性。
现在，让我们探索构建代码的不同方式。首先，我将逐层介绍包，然后逐功能介绍包，并比较两者。之后，我们将探索端口和适配器模式。
层封装 它代表一个项目结构，其中类被组织成多个层，每个层负责一组特定的功能。
src ├── main │ ├── java │ │ └── com │ │ └── app │ │ ├── service │ │ │ └── UserService.java │ │ │ └── OrderService.java │ │ │ └── ProductService.java │ │ ├── domain │ │ │ └── User.java │ │ │ └── Order.java │ │ │ └── Product.java │ │ ├── repository │ │ │ └── UserRepository.java │ │ │ └── OrderRepository.java │ │ │ └── ProductRepository.java │ │ ├── controller │ │ │ └── UserController.</description>
    </item>
    <item>
      <title>Redis安装和部署</title>
      <link>https://blog.chensoul.cc/posts/2024/05/14/redis-install/</link>
      <pubDate>Tue, 14 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/14/redis-install/</guid>
      <description>单机安装 通过 yum 安装 在 CentOS 7 上通过 yum 安装 Redis，可以按照以下步骤进行操作：
更新系统软件包：
sudo yum update 安装 Redis：
sudo yum install redis 可以看到默认安装的 redis 版本是 3.2.12-2.el7
如果需要安装 redis 7，这需要下载 yum 源：
sudo yum install epel-release sudo yum -y install http://rpms.remirepo.net/enterprise/remi-release-7.rpm 然后，在指定源进行安装：
yum --enablerepo=remi install redis 启动 Redis 服务：
sudo systemctl start redis 配置 Redis 开机自启动：
sudo systemctl enable redis 修改配置文件 /etc/redis.conf
修改 bind 和 requirepass
bind 0.0.0.0 requirepass 123456 然后重启 redis：
sudo systemctl restart redis 开启防火墙（可选）
# 添加 redis 端口 firewall-cmd --zone=public --add-port=6379/tcp --permanent firewall-cmd --zone=public --add-port=6379/udp --permanent # 重启防火墙 firewall-cmd --reload 运行 redis-cli
redis-cli 127.0.0.1:6379&amp;gt; auth 123456 OK 通过 snap 安装 安装 redis</description>
    </item>
    <item>
      <title>Argo CD安装和部署</title>
      <link>https://blog.chensoul.cc/posts/2024/05/11/argocd/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/11/argocd/</guid>
      <description>安装 ArgoCD 安装：
$ kubectl create namespace argocd $ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml 查看安装是否成功，当argocd命名空间下Pod状态都为Running时表示安装成功。
kubectl get pod -A 执行如下命令，将名为argocd-server的Service类型修改为NodePort。
$ kubectl patch svc argocd-server -n argocd -p &amp;#39;{&amp;#34;spec&amp;#34;: {&amp;#34;type&amp;#34;: &amp;#34;NodePort&amp;#34;}}&amp;#39; service/argocd-server patched 查看修改结果。
$ kubectl -n argocd get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE argocd-applicationset-controller ClusterIP 10.43.184.106 &amp;lt;none&amp;gt; 7000/TCP,8080/TCP 24h argocd-dex-server ClusterIP 10.43.99.202 &amp;lt;none&amp;gt; 5556/TCP,5557/TCP,5558/TCP 24h argocd-metrics ClusterIP 10.43.47.99 &amp;lt;none&amp;gt; 8082/TCP 24h argocd-notifications-controller-metrics ClusterIP 10.43.58.49 &amp;lt;none&amp;gt; 9001/TCP 24h argocd-redis ClusterIP 10.43.70.36 &amp;lt;none&amp;gt; 6379/TCP 24h argocd-repo-server ClusterIP 10.43.40.224 &amp;lt;none&amp;gt; 8081/TCP,8084/TCP 24h argocd-server NodePort 10.43.180.135 &amp;lt;none&amp;gt; 80:31912/TCP,443:32728/TCP 24h argocd-server-metrics ClusterIP 10.43.5.195 &amp;lt;none&amp;gt; 8083/TCP 24h 通过 argocd-server Service访问Argo CD，直接使用节点IP:端口号访问即可。例如本示例中，端口号为32728。
登录用户名为admin，密码可使用如下命令获取。</description>
    </item>
    <item>
      <title>All things about WebSocket</title>
      <link>https://blog.chensoul.cc/posts/2024/05/10/all-things-about-websocket/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/10/all-things-about-websocket/</guid>
      <description>Wikipedia：WebSocket
WebSocket - Web APIs | MDN
PubNub：什么是 WebSocket？
What are WebSockets?
websocket protocol - RFC6455 - tools.ietf.org
WebSocket
Ably：What are WebSockets used for? Pusher：What are WebSockets?
WebSocket vs. HTTP communication protocols
What are WebSockets? | Web Security Academy
Educative：What is WebSocket?
Spring：WebSocket
Writing a WebSocket server in Java - Web APIs
Baeldung：A Guide to the Java API for WebSocket
Baeldung：A Java Client for a WebSockets API
WebSocket Implementation with Spring Boot and STOMP
ApiFox：WebSocket协议入门到精通
JSR 356, Java API for WebSocket
WebSocket 协议解析 [RFC 6455]
WebSocket原理及技术简介
【NO.23】一篇文章彻底搞懂websocket协议的原理与应用（一）
WebSocket 协议详解
WebSocket 协议（RFC 6455 中文版）
用JAVA分别实现WebSocket客户端与服务端
WebSocket Programming with Java
MQTT Websocket Client</description>
    </item>
    <item>
      <title>K8s安装Cert Manager</title>
      <link>https://blog.chensoul.cc/posts/2024/05/10/install-cert-manager/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/10/install-cert-manager/</guid>
      <description>cert-manager 为 Kubernetes 或 OpenShift 集群中的工作负载创建 TLS 证书，并在证书过期之前续订证书。
cert-manager 可以从各种证书颁发机构获取证书，包括： Let&amp;rsquo;s Encrypt、HashiCorp Vault、 Venafi和私有 PKI。
使用 cert-manager 的证书资源，私钥和证书存储在 Kubernetes Secret 中，该 Secret 由应用程序 Pod 挂载或由 Ingress 控制器使用。使用csi-driver、csi-driver-spiffe或istio-csr，私钥是在应用程序启动之前按需生成的；私钥永远不会离开节点，并且不会存储在 Kubernetes Secret 中。
安装 参考官方文档：https://cert-manager.io/docs/installation/
使用kubectl安装 kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.5/cert-manager.yaml 查看：
$ kubectl get pods --namespace cert-manager 使用helm安装 添加 repo：
helm repo add jetstack https://charts.jetstack.io --force-update helm repo update 安装 cert-manager：
helm install cert-manager jetstack/cert-manager \ --namespace cert-manager \ --create-namespace \ --version v1.14.5 \ --set installCRDs=true 更多配置参数，参考：https://artifacthub.io/packages/helm/cert-manager/cert-manager
查看状态
$ kubectl -n cert-manager rollout status deploy/cert-manager deployment &amp;#34;cert-manager&amp;#34; successfully rolled out $ kubectl get pods -n cert-manager NAME READY STATUS RESTARTS AGE pod/cert-manager-5c47f46f57-k78l6 1/1 Running 0 91s pod/cert-manager-cainjector-6659d6844d-tr8rf 1/1 Running 0 91s pod/cert-manager-webhook-547567b88f-8lthd 1/1 Running 0 91s 使用helm3查看：</description>
    </item>
    <item>
      <title>Rancher安装和部署-使用K8s </title>
      <link>https://blog.chensoul.cc/posts/2024/05/10/install-rancher/</link>
      <pubDate>Fri, 10 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/10/install-rancher/</guid>
      <description>前提条件 Kubernetes 集群：可以使用 RKE、RKE2、K3S 等工具安装集群 Ingress Controller：对于 RKE、RKE2 和 K3s，你不需要手动安装 Ingress Controller，因为它是默认安装的。 CLI 工具：安装 kubectl 和 helm 使用 docker 安装 Rancher mkdir -p /data/rancher docker run --name rancher --privileged -d --restart=unless-stopped -p 80:80 -p 443:443 -v /data/rancher:/var/lib/rancher/ rancher/rancher:stable docker logs -f rancher 使用 helm 安装 Rancher 参考：在 Kubernetes 集群上安装/升级 Rancher
添加 Helm Chart 仓库，安装 cert-manager helm repo add rancher-stable https://releases.rancher.com/server-charts/stable helm repo add jetstack https://charts.jetstack.io helm repo update helm install cert-manager jetstack/cert-manager \ --namespace cert-manager \ --create-namespace \ --version v1.14.5 \ --set installCRDs=true kubectl get pods --namespace cert-manager 不同的证书配置需要使用不同的 Rancher 安装命令。 先创建命名空间：
kubectl create namespace cattle-system 默认情况是使用 Rancher 生成 CA，并使用 cert-manager 颁发用于访问 Rancher Server 接口的证书。</description>
    </item>
    <item>
      <title>All things about Drone</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-drone/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-drone/</guid>
      <description>Drone by Harness ™ 是一个现代化的持续集成平台，使忙碌的团队能够使用强大的云原生管道引擎自动化其构建、测试和发布工作流程。
Drone实践 Docker 容器环境下的持续集成最佳实践：构建基于 Drone + GitFlow + K8s 的云原生语义化 CI 工作流 容器环境持续集成优化，Drone CI 提速 500% 在Kubernetes上执行Drone CI/CD 玩转 Drone CI 基于 gogs/gitlab 和 drone 搭建的 CI/CD 平台 基于drone构建CI/CD系统,对接k8s 使用Drone构建静态博客
Hugo + Gogs + Drone 搭建博客 How to build a Hugo static site automatically using Drone CI and Codeberg.org Static Website Generation on Steriods with Docker A HUGO PLUGIN FOR YOUR DRONE CI PIPELINE drone持续集成-发布github pages 视频教学 一天學會 DevOps 自動化測試及部署 </description>
    </item>
    <item>
      <title>All things about Spring Modulith</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-spring-modulith/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-spring-modulith/</guid>
      <description>VMware 推出了一个实验性的项目Spring Modulith，以便于通过模块和事件更好地组织 Spring Boot 3 应用。该项目引入了新的类和注解，但并不会生成代码。它的模块没有使用 Java Platform Module System（JPMS），而是映射到了普通的 Java 包。模块有 API，但是 Spring Modulith 鼓励使用 Spring 应用事件作为“主要的交互方式”。这些事件可以自动持久化到事件日志中。Spring Modulith 还简化了模块和事件的测试。
2022 年 11 月推出的Spring Boot 3会是 Spring Modulith 的基础。所以它的基线是 Spring Framework 6、Java 17 和 Jakarta EE 9。Spring Modulith 是Moduliths（其名字有个“s”后缀）项目的继承者。该项目使用 Spring Boot 2.7，目前已经退役，只接收缺陷修正，直至 2023 年 11 月份。
https://spring.io/blog/2022/10/21/introducing-spring-modulith
https://www.baeldung.com/spring-modulith
https://www.baeldung.com/spring-modulith-event-externalization
https://piotrminkowski.com/2023/10/13/guide-to-modulith-with-spring-boot/
https://springdoc.cn/guide-to-modulith-with-spring-boot/
https://medium.com/andamp/event-sourcing-with-spring-modulith-2b35b0569dbb
https://www.geeksforgeeks.org/what-is-spring-modulith/
https://github.com/xsreality/spring-modulith-with-ddd
https://riteshshergill.medium.com/the-spring-modulith-monolithic-but-manageable-ca1532a1e585
https://www.infoq.com/news/2022/11/spring-modulith-launch/
https://dzone.com/articles/architecture-style-modulith-vs-microservices
https://speakerdeck.com/olivergierke/spring-modulith-a-deep-dive
https://www.jappware.com/proffesional-activity/make-monolithic-apps-great-again-with-spring-modulith-coffeejug/
https://blog.worldline.tech/2024/01/23/modulith.html
https://springdoc.cn/spring-modulith-intro/
https://dimitri.codes/checking-out-spring-modulith/
https://www.lefer.cn/posts/29752/
https://www.jdon.com/63003.html
https://blog.csdn.net/cfy_banq/article/details/132185951
https://www.zhihu.com/question/567053421</description>
    </item>
    <item>
      <title>安装k3s</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/install-k3s/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/09/install-k3s/</guid>
      <description>K3s 是轻量级的 Kubernetes。K3s 易于安装，仅需要 Kubernetes 内存的一半，所有组件都在一个小于 100 MB 的二进制文件中。
k3s 文档：https://docs.rancher.cn/docs/k3s/_index
K3s介绍 什么是 K3s？ K3s 是一个完全兼容的 Kubernetes 发行版，具有以下增强功能：
打包为单个二进制文件。 使用基于 sqlite3 作为默认存储机制的轻量级存储后端。同时支持使用 etcd3、MySQL 和 Postgres。 封装在简单的启动程序中，可以处理很多复杂的 TLS 和选项。 默认情况下是安全的，对轻量级环境有合理的默认值。 添加了简单但强大的 batteries-included 功能，例如： 本地存储提供程序 service load balancer Helm controller Traefik ingress controller 所有 Kubernetes control plane 组件的操作都封装在单个二进制文件和进程中。因此，K3s 支持自动化和管理复杂的集群操作（例如证书分发等）。 最大程度减轻了外部依赖性，K3s 仅需要现代内核和 cgroup 挂载。K3s 打包了所需的依赖，包括： containerd Flannel (CNI) CoreDNS Traefik (Ingress) Klipper-lb (Service LB) 嵌入式网络策略控制器 嵌入式 local-path-provisioner 主机实用程序（iptables、socat 等） 为什么叫 K3s? 我们希望安装的 Kubernetes 只占用一半的内存。Kubernetes 是一个 10 个字母的单词，简写为 K8s。Kubernetes 的一半就是一个 5 个字母的单词，因此简写为 K3s。K3s 没有全称，也没有官方的发音。
适用场景 K3s 适用于以下场景：
边缘计算-Edge 物联网-IoT CI Development ARM 嵌入 K8s 由于运行 K3s 所需的资源相对较少，所以 K3s 也适用于开发和测试场景。在这些场景中，如果开发或测试人员需要对某些功能进行验证，或对某些问题进行重现，那么使用 K3s 不仅能够缩短启动集群的时间，还能够减少集群需要消耗的资源。与此同时，Rancher 中国团队推出了一款针对 K3s 的效率提升工具：AutoK3s。只需要输入一行命令，即可快速创建 K3s 集群并添加指定数量的 master 节点和 worker 节点。如需详细了解 AutoK3s，请参考AutoK3s 功能介绍。</description>
    </item>
    <item>
      <title>通过k3d安装k3s</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3d/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3d/</guid>
      <description>k3d是什么 k3d 是一个轻量级包装器，用于在 docker 中运行k3s（Rancher Lab 的最小 Kubernetes 发行版）。
k3d 使得在 docker 中创建单节点和多节点k3s集群变得非常容易，例如用于 Kubernetes 上的本地开发。
注意： k3d 是一个社区驱动的项目，但它不是官方 Rancher (SUSE) 产品。
k3d安装 通过脚本安装：
wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash macos 上通过homebrew安装：
brew install k3d 查看帮助文档：
$ k3d -h https://k3d.io/ k3d is a wrapper CLI that helps you to easily create k3s clusters inside docker. Nodes of a k3d cluster are docker containers running a k3s image. All Nodes of a k3d cluster are part of the same docker network. Usage: k3d [flags] k3d [command] Available Commands: cluster Manage cluster(s) completion Generate completion scripts for [bash, zsh, fish, powershell | psh] config Work with config file(s) help Help about any command image Handle container images.</description>
    </item>
    <item>
      <title>通过k3sup安装k3s</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3sup/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3sup/</guid>
      <description>k3sup是一个支持在PC、虚拟机、ARM设备上安装k3s的工具，官方网站：https://k3sup.dev/
安装k3sup 在线安装：
curl -sLS https://get.k3sup.dev | sh sudo install k3sup /usr/local/bin/ 离线安装，下载地址：https://github.com/alexellis/k3sup/releases
wget https://github.com/alexellis/k3sup/releases/download/0.13.5/k3sup mv k3sup /usr/local/bin/ chmod +x /usr/local/bin/k3sup 查看版本：
$ k3sup version _ _____ | | _|___ / ___ _ _ _ __ | |/ / |_ \/ __| | | | &amp;#39;_ \ | &amp;lt; ___) \__ \ |_| | |_) | |_|\_\____/|___/\__,_| .__/ |_| bootstrap K3s over SSH in &amp;lt; 60s 🚀 🚀 Speed up GitHub Actions/GitLab CI + reduce costs: https://actuated.dev Version: 0.13.5 Git Commit: d952d6df22b06147806ca1030b8ba3a4bb9e0c0c 创建k3s集群 创建一个本地集群 k3sup install \ --local \ --context localk3s \ --k3s-channel stable \ --k3s-extra-args &amp;#39;--docker&amp;#39; 查看集群状态：
$ k3sup ready --context localk3s --kubeconfig .</description>
    </item>
    <item>
      <title>[译]探索 http2（第 1 部分）：概述</title>
      <link>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-1-overview/</link>
      <pubDate>Wed, 08 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-1-overview/</guid>
      <description>原文链接：https://noobj.medium.com/exploring-http2-part-1-overview-dc3e9b53968f
让我们来谈谈 http2 的内容、原因、时间和方式
完整的代码可以在github上找到。
第 1 部分：概述 第 2 部分：使用 node-http2 核心和 hapijs 进行探索
什么是http2？ **http2*是自 1999 年以来使用的http1.1***之后的最新更新
http2协议注重性能；具体来说，最终用户感知的延迟、网络和服务器资源的使用情况。 （在此处阅读有关规格的信息*）*
为什么是http2？ 换句话说http1.1有什么问题
加载网页是一项资源密集型工作，因为 HTTP/1.1 只允许每个 TCP 连接有一个未完成的请求。网络需要进行更新，以提高效率、安全性和速度。
http2如何解决性能问题？
http2 带来的改进：
**单一连接：**仅使用一个与服务器的连接来加载网站，并且只要网站打开，该连接就保持打开状态。这减少了建立多个 TCP 连接所需的往返次数。（更多信息在这里） **多路复用：**同一连接上同时允许多个请求。以前，在 HTTP/1.1 中，每个传输都必须等待其他传输完成。（更多信息在这里） **服务器推送：**可以将其他资源发送到客户端以供将来使用。（更多信息在这里） **优先级：**请求被分配依赖级别，服务器可以使用它来更快地交付更高优先级的资源。（更多信息在这里） **二进制：**使 HTTP/2 更易于服务器解析、更紧凑且不易出错。将信息从文本转换为二进制不会浪费额外的时间。（更多信息在这里） 标头压缩： HTTP/2 使用HPACK压缩，从而减少开销。在 HTTP/1.1 中，每个请求中的许多标头都使用相同的值发送。（更多信息在这里） 我们什么时候可以开始使用http2？ 现在！
这是时间线，
来源：https://www.polyglotdeveloper.com/
是的，从 1999 年到今天，我们（大多数）都在使用同样好的旧 http1.1； 15年！
如何开始使用http2？ 以下是各种语言的 http2 库实现列表。
根据Can I Use的统计，大约 83% 的在线浏览器已经支持 http2
查看实际情况，http1.1 与 http2（网络节流：快速 3g）
http1.1（左）与http2（右）；让我们在下一节中构建它
在下一部分中，我们将构建一个支持 http2 的简单服务器；具有http1.1向后兼容性；一步一步使用http2-node core 和hapi js。
第 1 部分：概述 第 2 部分：使用 node-http2 核心和 hapijs 进行探索
完整的代码可以在github上找到。</description>
    </item>
    <item>
      <title>[译]探索 http2（第 2 部分）：使用 node-http2 核心和 hapijs</title>
      <link>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-2-overview/</link>
      <pubDate>Wed, 08 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-2-overview/</guid>
      <description>原文链接：https://noobj.medium.com/exploring-http2-part-2-with-node-http2-core-and-hapijs-74e3df14249
来源：https://www.thewebmaster.com/
先决条件：了解 javascript、客户端-服务器架构。
完整的代码可以在github上找到。
第 1 部分：概述（http2 的原因、内容、时间、方式）第 2 部分：使用 node-http2 核心和 hapijs 进行探索
免责声明：本文将使用node@v9+附带的http2模块。这里列出了其他几个 http2 客户端-服务器库实现。
让我们开始创建一个具有单一路由的简单 http1.1 服务器。
mkdir hapijs-http2 &amp;amp;&amp;amp; \ cd hapijs-http2 &amp;amp;&amp;amp; \ npm init -y &amp;amp;&amp;amp; \ npm i hapi@^16.6 -s &amp;amp;&amp;amp; \ touch http1Server.js 将下面的代码复制到此处或从此处http1Server.js克隆整个存储库。
const Hapi = require(&amp;#39;hapi&amp;#39;); const server = new Hapi.Server(); // define server config server.connection({ port: &amp;#39;8000&amp;#39; }); // define route config server.route([{ method: &amp;#39;GET&amp;#39;, path: &amp;#39;/ping&amp;#39;, handler: (request, reply) =&amp;gt; { reply(&amp;#39;pong&amp;#39;); } }]); // start server server.start(err =&amp;gt; { if (err) console.error(err) console.log(`Started ${server.connections.length} connections`) }); 现在，让我们进行健全性检查。
启动服务器，node http1Server.js
⇒ http://127.0.0.1:8000/ping pong 凉爽的！如果我们得到 pong 的 ping，让我们尝试将http2集成到我们的 hapijs 服务器中。</description>
    </item>
    <item>
      <title>[译]比较 Socket.IO 和 HTTP：主要区别和用例</title>
      <link>https://blog.chensoul.cc/posts/2024/05/08/socketio-vs-http/</link>
      <pubDate>Wed, 08 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/08/socketio-vs-http/</guid>
      <description>原文链接：https://ably.com/topic/socketio-vs-http
在规划实时应用程序时，您应该仔细考虑要使用哪些技术。本文对Socket.IO实时库和HTTP协议进行了比较。下面您将了解每种解决方案的功能、每种解决方案的优缺点以及何时使用它们。
什么是Socket.IO？ Socket.IO 是一个创建于 2010 年的库，提供客户端和服务器之间的实时双向通信。它允许管理连接、发送和接收消息等等。这使得 Socket.IO 成为构建消息/聊天应用程序的理想选择。
Socket.IO 需要两个库 - 一个在服务器上，一个在客户端上。 Socket.IO 创建者维护以下“官方”：
Socket.IO是 Node.js 服务器组件。 Socket.IO-client是客户端 JavaScript 库。 一些 Socket.IO 客户端和服务器实现可以用其他语言实现。请阅读Socket.IO 是什么来获取列表。
下图总结了典型的 Socket.IO 设置：
Socket.IO 主要特性 Socket.IO 具有以下主要特性：
**向后兼容性：**在现代浏览器中，Socket.IO 使用WebSocket API提供所需的连接并发送消息。 WebSocket 在服务器和浏览器之间提供全双工、低延迟、事件驱动的连接。它也是有状态的。如果需要旧版浏览器支持，或者 WebSocket 连接无法使用（由于防火墙或公司代理），Socket.IO 可以回退到 HTTP 和长轮询。 重连和缓冲： Socket.IO提供自动重连功能。当客户端断开连接时，数据包会自动缓冲，并在重新连接时发送。 多种数据格式： Socket.IO 支持任何可序列化格式的数据传输，包括Buffer或TypedArray等二进制对象。 **致谢：**使用 Socket.IO，一旦成功接收到消息就可以发送响应消息。 命名空间： Socket.IO 使您能够设置具有不同客户端、房间、事件和应用程序逻辑的不同通道。 **广播到不同的客户端组：**从服务器，您可以向所有连接的客户端或子集发送消息。 Socket.IO 的优缺点 Socket.IO 专业人士 连接效率： Socket.IO 使用 HTTP 长轮询发起连接，一旦建立可用性就升级到 WebSocket（有关更多详细信息，请参阅升级机制）。当发生这种情况时，客户端-服务器连接使用单个 WebSocket，而不必启动多个连接，从而减少延迟并改善用户体验。 **客户端和服务器发起的通信：**由于WebSocket提供了全双工、双向的通信通道，因此服务器可以向客户端发送消息，并且两者可以同时发送消息。 事件驱动的通信： WebSocket是一种事件驱动的协议，这意味着您可以在收到消息后立即监听并响应消息，而不是使用轮询机制来检查更新，这样既浪费又低效。 丰富的功能集： Socket.IO 提供了实现实时应用程序所需的一切。当使用原始 HTTP 甚至原始 WebSocket 时，您必须自己实现其中大部分功能。 有状态： Socket.IO 使用 WebSocket，它是有状态的。该状态一直持续到连接关闭为止。 Socket.IO 缺点 **有限的平台支持：**我们之前提到，Socket.IO 在不同的平台和语言上有多种服务器和客户端实现。值得一提的是，其中一些没有得到积极维护，或者功能集有限，因此在考虑使用它们之前请仔细检查它们。此外，Socket.IO 实现与本机 WebSocket 不兼容，因为 Socket.IO 会向其发送的每个数据包添加额外的元数据。 可扩展性： Socket.IO 非常适合有限数量用户的实时通信应用程序。但是，如果您的用户数量和数据量开始变大，您的服务器可能会过载。当您的服务器达到最大负载时，您将需要将连接拆分到多个服务器上，否则可能会丢失重要信息。这种增加的架构复杂性带来了更多问题。阅读Scaling Socket.IO - 实际注意事项以获取更多信息。 **内存泄漏：**已知 Socket.IO 存在一些与内存泄漏相关的问题。内存泄漏不太可能导致任何直接问题，但如果您的应用程序使用了很长一段时间，它们最终可能会导致用户的设备冻结或崩溃。 什么是 HTTP？ HTTP 是一种请求/响应协议，作为 Web 的主要通信机制，构建在 TCP 网络协议之上。有限版本最初由 Tim Berners-Lee 于 1989 年提出，随后经过快速修改以支持更广泛的浏览器和服务器功能。 HTTP 工作组于 1996 年将这些修改记录为 HTTP/1.</description>
    </item>
    <item>
      <title>[译]2024年最好的WebSocket替代品</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websocket-alternatives/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websocket-alternatives/</guid>
      <description>原文链接：https://ably.com/topic/websocket-alternatives
什么是 WebSocket？ 简而言之，WebSocket 是一种实时 Web 技术，可通过持久连接在客户端和服务器之间实现双向、全双工通信。 WebSocket 连接会根据需要保持活动状态（理论上，它可以永远持续），从而允许服务器和客户端以最小的开销随意发送数据。
了解更多：
什么是 WebSocket？ WebSocket 是如何工作的？ 什么时候应该考虑使用 WebSocket 替代方案？ 对于实时或近实时发送和使用数据至关重要（或至少是理想的）的用例，WebSocket 是一个绝佳的选择。示例包括聊天应用程序、多人协作体验以及广播实时路况更新。
了解有关 WebSocket 用例的更多信息
然而，很少有一种放之四海而皆准的协议：不同的协议比其他协议更好地服务于不同的目的。例如，如果您的应用程序严重依赖 CRUD 操作，并且用户不需要快速对更改做出反应，那么 HTTP 是比 WebSockets 更好的选择。另一个例子 - 如果您想传输音频和视频数据，WebRTC 是比 WebSockets 更好的选择。
我们要提到的最后一个例子：如果您只需要将文本（字符串）数据推送到浏览器客户端，并且您从不期望需要双向通信，那么您可以使用服务器发送事件（SSE）之类的东西。与 WebSocket 相比，SSE 的复杂性和要求较低，并且更易于扩展。
了解 WebSocket 的优点和缺点
WebSocket 协议的五种替代方案 现在，我们将研究 WebSocket 协议的五种替代方案 - 您可以使用这些技术来构建实时应用程序，这些技术有些类似。
服务器发送的事件 服务器发送事件 (SSE)是一种 HTTP 服务器推送技术。这个想法很简单：浏览器客户端可以订阅服务器生成的事件流，并在新事件发生时接收更新。
服务器发送事件的优点
内置对重新连接的支持。 所有现代浏览器都支持。 轻量级协议。 服务器发送事件的缺点
它是单向的；只有服务器可以将数据推送到客户端。 每个浏览器在同一时间只能有六个并发 SSE 连接。 仅支持UTF-8文本数据； SSE 无法处理二进制数据。 对于不需要双向消息传递的场景（例如实时比分更新），SSE 是一个不错的选择。对于需要双向通信的用例，WebSocket 是更好的选择。
查看 SSE 与 WebSocket 的比较
长轮询 长轮询是一种客户端拉取技术，它采用 HTTP 请求/响应轮询并使其更加高效。在长轮询中，服务器选择尽可能长时间地保持客户端连接打开，并在新数据可用或达到超时阈值时发送响应。
长轮询的优点
长轮询是在XMLHttpRequest的基础上实现的，它几乎受到设备的普遍支持，因此通常不需要实现任何后备。 在必须处理异常的情况下，或者可以查询服务器以获取新数据但不支持长轮询（更不用说其他更现代的技术标准）时，基本轮询有时仍然具有有限的用途，并且可以使用XMLHttpRequest，或通过简单的 HTML 脚本标记通过 JSONP。 长轮询的缺点
与 WebSocket 相比，长轮询在服务器上消耗更多资源。 长轮询可能会带来延迟开销，因为它需要在服务器和设备之间进行多次跳跃。 可靠的消息排序可能是一个问题。 长轮询是 WebSocket 的早期先驱。当谈到构建高性能、低延迟的实时应用程序时，WebSocket 几乎在各个方面都是一个优越的选择。这并不是说长轮询已经过时；而是说长轮询已经过时。在某些环境中，例如带有代理服务器的公司网络会阻止 WebSocket 连接。在这种情况下，长轮询作为 WebSocket 的后备机制非常有用。
查看轮询与 WebSocket 相比需要多长时间</description>
    </item>
    <item>
      <title>[译]Apache Kafka、RabbitMQ 与 AWS SNSSQS：哪个消息代理最好？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs/</guid>
      <description>原文链接：https://ably.com/topic/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs
将消息从一个组件获取到另一个组件是微服务架构中最重要的部分之一。每个服务必须能够与任何其他服务异步、可靠且大规模地通信。
这就是消息代理的用武之地。消息代理（例如 Apache Kafka、RabbitMQ 和AWS SNS/SQS）为您提供一个通用接口和一组保证，而不是手动协调可能数千个微服务之间的通信。这简化了集成并更容易推理您的系统。
然而，比较消息代理可能很棘手，因为每个消息代理都采用不同的方法来完成工作。那么，您如何决定哪个消息代理最适合您的用例？
在本文中，您将找到有关业界最受欢迎的三个消息代理如何适用于不同用例的指南。我们将研究诸如它们的扩展方法、它们支持的消息传递模式以及它们如何处理性能和智能消息路由之间的权衡等特征。
比较消息代理：您应该寻找什么？ 消息代理是一个广泛的类别。虽然我们正在考虑的三个选项中的每一个都在更大系统中的组件之间移动数据，但在它们之间做出决定取决于它们如何做到这一点。
因此，我们需要检查每个消息代理的特征，根据它们如何影响其移动数据的能力以及它的工作方式。我们将研究以下六个因素以及它们如何应用于 Apache Kafka、RabbitMQ 和 AWS SNS/SQS：
**消息传递模式：**消息代理组织和分发消息的方式（例如发布/订阅或请求回复）比其他架构和用例更适合某些架构和用例。 **消息路由：**消息代理能否根据消息的内容和其他标准来路由消息？ **可扩展性：**并非每种情况都需要每秒处理数百万条消息。确保消息代理可以扩展到您需要的吞吐量级别，同时牢记这将如何影响设置和操作的复杂性。 **可靠性：**消息代理如何处理故障？它会保留消息还是仅通过系统传递消息？ **安全性：**数据是否加密？消息代理是否提供审核日志？它如何处理身份验证和访问控制？是否经过 HIPAA 和 PCI DSS 等行业标准认证？ **成本和许可：**消息代理是开源的吗？需要哪些云或服务器资源？是否持续收取许可费？您的团队需要花费多少时间来运行它？ 介绍 Apache Kafka、RabbitMQ 以及 AWS SNS 和 SQS 在详细进行比较之前，我们先来谈谈为什么我们关注这三种解决方案。原因之一是它们是您可能遇到的最常见的消息代理解决方案之一。研究表明，全球有近 50,000 家公司使用 RabbitMQ，而超过60,000 家公司正在使用 Apache Kafka。尽管 AWS SQS 的用户群似乎较小，但只有超过 24,000 家公司，但它在更广泛的 Amazon Web Services 生态系统中发挥着重要作用。这种广泛的部署使得您可以更轻松地招募经验丰富的员工、与现有技术堆栈集成，以及当您需要时寻求支持。但还有另一个考虑因素。我们正在研究的每个消息代理都从不同的角度解决该问题。 Apache Kafka 专为吞吐量而设计，而 RabbitMQ 更关注复杂的消息路由。与 RabbitMQ 一样，SNS 和 SQS 这两种 AWS 解决方案更关注路由而不是吞吐量，我们在这里考虑它们是因为 AWS 生态系统的重要性。
阿帕奇·卡夫卡 Apache Kafka 是一个实时流平台，旨在构建可扩展、容错的分布式应用程序。它专门以非常高的吞吐量传输数据，通常用于操作数据，例如日志记录和指标。
拥有如此庞大的安装基础，有一些工具可以将 Apache Kafka 连接到几乎任何其他正在运行的系统。尽管 Apache Kafka 专注于高吞吐量，但它也可以处理传输中的数据，例如触发操作和转换数据。然而，这种灵活性和强大功能是有代价的，因为 Apache Kafka 比某些替代方案更难设置和操作。
RabbitMQ 与 Apache Kafka 专注于流数据不同，RabbitMQ 是一个开源分布式消息代理，支持多种不同的消息传递模式，例如发布/订阅和生产者/消费者。尽管它确实拥有高吞吐量，但它的重点更多地是根据消息内容、一天中的时间、发送者和其他标准智能地路由数据，这使得它非常适合事件驱动的架构。
与 Apache Kafka 一样，RabbitMQ 得到了广泛的支持，具有丰富的集成生态系统。
AWS SNS 和 SQS Amazon Web Services (AWS) 提供了两种适合消息代理旗帜的产品。 AWS Simple Notification Service (SNS) 是一种高吞吐量消息传递服务，它使用发布/订阅模型在微服务或分发应用程序的组件之间传递消息。</description>
    </item>
    <item>
      <title>[译]HTTP 的演变 – HTTP2 深入探讨</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/http2/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/http2/</guid>
      <description>原文链接：https://ably.com/topic/http2
可以毫不夸张地说，超文本传输协议 (HTTP) 造就了我们所熟知的互联网。 HTTP 最初是由万维网的发明者蒂姆·伯纳斯·李 (Tim Berners-Lee) 于 1989 年提出的应用程序协议。第一个记录版本 HTTP/0.9 被称为单行协议。鉴于它催生了万维网，它现在可以被描述为有史以来最伟大的俏皮话。
随着我们对互联网的需求不断增长，HTTP 作为网络协议也必须不断发展才能提供可接受的性能。 HTTP/2 标志着一次重大改革，是自 1997 年 HTTP/1.1 ( RFC 2068 ) 提供以来第一个新的标准化。本文介绍了 HTTP/2 如何设计来克服 HTTP/1.1 的限制、新协议的实现、HTTP/2 的工作原理以及其自身的限制。
通过单个 TCP 连接的 HTTP/2 客户端-服务器。
出身卑微——HTTP 简史 HTTP/0.9 的“单行协议”由请求组成：方法GET后跟文档地址、可选端口地址，并以回车符和换行符结束。由一串 ASCII 字符组成的请求。只能传输 HTML 文件。没有 HTTP 标头、状态代码或错误代码。
进化的第一阶段必须很快到来。
HTTP/1.0 – 突破限制 为了克服 HTTP/0.9 的严重限制，浏览器和服务器独立修改了协议。一些关键的协议更改：
请求允许包含多个由换行符分隔的标头字段。 服务器发送了包含单个状态行的响应。 响应中添加了一个标头字段。响应标头对象由由换行符分隔的标头字段组成。 服务器可以使用 HTML 以外的文件进行响应。 这些修改没有以有序或商定的方式完成，导致 HTTP/0.9 的不同风格，进而导致互操作性问题。为了解决这些问题，HTTP 工作组成立，并于 1996 年发布了 HTTP/1.0（RFC 1945）。它是一个信息性 RFC，仅记录当时的所有用法。因此，HTTP/1.0 不被视为正式规范或互联网标准。
HTTP/1.0 请求/响应的代码示例 来自客户端的使用 GET 方法的请求
GET /contact HTTP/1.0 Host: www.ably.io User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0) Accept: text/*, text/html, text/html;level=1, */*Accept-Language: en-us 客户端通过 POST 方法发出请求
POST /contact HTTP/1.0 Host: www.ably.io User-Agent: Mozilla/4.</description>
    </item>
    <item>
      <title>[译]Java和WebSockets：构建可靠的实时应用程序</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websockets-java/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websockets-java/</guid>
      <description>原文：https://ably.com/topic/websockets-java
在全球范围内，人们对实时传输数据的需求不断增长，WebSocket可能是此类用例中最流行的传输协议。在 WebSocket 出现之前，“实时”网络已经存在，但它很难实现，通常速度较慢，并且是通过破解现有的网络技术来实现的，而这些技术并不是为实时应用程序设计的。 WebSocket 协议为真正的实时网络铺平了道路。
Java是一种流行的编程语言和计算语言。它是 Android 智能手机应用程序的核心编程语言之一，是构建实时系统的可靠选择。 WebSockets 成为 Java 标准版 SDK 的一部分已经有一段时间了。WebSocket 协议最初是在 2013 年作为JSR 356的一部分提出的，目前已作为javax.websocket包的一部分包含在 Java SDK 中。
由于对实时数据的需求正在稳步增长，并且 Java 已成为一种成熟且广泛使用的语言/平台，因此我认为值得考虑为Java 客户端应用程序实现可靠的 WebSocket 解决方案所面临的众多挑战。
现状——简要概述 基本或原始的 WebSocket 实现很少能够满足为未知（但可能非常多）数量的用户提供服务的实时应用程序的需求。大多数时候，您需要考虑扩展 Java 客户端 WebSocket 实现的功能。
为此，您可以使用nv-websocket-client等开源库，其中包含一些附加功能，例如代理支持。这是使用 nv-websocket-client 创建 WebSocket 实例的方法：
// Create a WebSocket. The scheme part can be one of the following: // &amp;#39;ws&amp;#39;, &amp;#39;wss&amp;#39;, &amp;#39;http&amp;#39; and &amp;#39;https&amp;#39; (case-insensitive). The user info // part, if any, is interpreted as expected. If a raw socket failed // to be created, an IOException is thrown. WebSocket ws = new WebSocketFactory().createSocket(&amp;#34;ws://localhost/endpoint&amp;#34;); 创建 WebSocket 实例后，下一步是注册侦听器以接收 WebSocket 事件：
// Register a listener to receive WebSocket events.</description>
    </item>
    <item>
      <title>[译]WebSocket API和协议说明</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/the-websocket-api-and-protocol-explained/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/the-websocket-api-and-protocol-explained/</guid>
      <description>原文地址：https://ably.com/topic/websockets
WebSocket 标志着 Web 开发的转折点。 WebSocket 技术旨在以事件为驱动，并针对低延迟进行了优化，已成为许多寻求构建交互式实时数字体验以提供令人愉悦的用户体验的组织和开发人员的首选。本文探讨了与 WebSocket 相关的关键主题：
WebSocket 协议和 API 解释
WebSockets 是如何工作的？
WebSockets的优缺点是什么？
WebSockets 是否可扩展？
WebSocket 的用途是什么？
WebSockets 的最佳替代品是什么？
如何开始使用 WebSockets 构建实时体验
WebSocket 常见问题解答
WebSocket：协议和 API 解释 WebSocket 是一种实时技术，可通过持久的单套接字连接在客户端和服务器之间实现双向全双工通信。只要需要，WebSocket 连接就会保持活动状态（理论上，它可以永远持续下去），允许服务器和客户端随意发送数据，开销最小。
WebSocket 技术由两个核心构建块组成：
WebSocket 协议。 WebSocket API。 WebSocket的历史是什么？ 第一个实时 Web 应用程序开始出现在 2000 年代，试图提供响应迅速、动态和交互式的最终用户体验。然而，在那个时候，实时网络很难实现，而且比我们现在习惯的要慢;它是通过入侵现有的基于HTTP的技术（AJAX和Comet）来实现的，这些技术不是为实时应用程序设计和优化的。很明显，需要一个更好的替代方案。
在 2008 年，开发人员 Michael Carter 和 Ian Hickson 特别敏锐地感受到了在实现任何类似实时的东西时使用 AJAX 和 Comet 的痛苦和局限性。通过在 IRC 和 W3C 邮件列表上的合作，他们提出了一个计划，为网络上的现代、真正的实时通信引入一个新标准。因此，“WebSocket”这个名字被创造出来。
什么是 WebSocket 协议？ WebSocket 协议支持 Web 客户端和 Web 服务器之间通过基础 TCP 连接进行持续的全双工双向通信。该协议旨在允许客户端和服务器实时通信，从而在 Web 应用程序中实现高效且响应迅速的数据传输。
2011 年 12 月，互联网工程任务组 （IETF） 通过 RFC 6455 对 WebSocket 协议进行了标准化。互联网号码分配机构 （IANA） 与 IETF 协调维护 WebSocket 协议注册管理机构，该注册管理机构定义了协议使用的许多代码和参数标识符。
什么是 WebSocket API？ WebSocket API 包含在 HTML Living Standard 中，是一个编程接口，用于创建 WebSocket 连接并管理 Web 应用程序中客户端和服务器之间的数据交换。它为开发人员提供了一种简单且标准化的方法，可以在其应用程序中使用 WebSocket 协议。</description>
    </item>
    <item>
      <title>[译]WebSocket与HTTP：2024年为您的项目选择哪一个</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websockets-vs-http/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websockets-vs-http/</guid>
      <description>原文链接：https://ably.com/topic/websockets-vs-http
当谈到 WebSocket 与 HTTP 时，决定使用哪一种并不总是那么明确。哪一个更好？您的应用程序应该使用哪一款？
但问题的答案不一定是其中之一 - 开发人员经常根据场景在同一个应用程序中同时使用 WebSocket 和 HTTP。更重要的问题是 - 我如何确定 WebSockets 还是 HTTP 是特定类型通信的正确通信协议？
这是您需要了解的一切。
WebSocket 与 HTTP 概览 在此页面上，我们将探讨这些技术的工作原理、它们在实现实时通信方面的表现如何，并就在哪些场景中使用哪些技术提供具体指导。
如果您正在寻找高级比较，以下是主要差异一目了然：
请继续阅读以详细了解这两种流行协议的比较。
HTTP协议 什么是 HTTP？ 从根本上讲，HTTP 是一种通信协议，使客户端（例如 Web 浏览器）和服务器能够共享信息。
例如，HTML 文档、图像、应用程序数据 (JSON) 等。
很难想出比您现在正在阅读的此页面更好的 HTTP 实际示例。
当您加载此页面时，您的浏览器会发出 HTTP 请求，服务器会使用您当前正在阅读的 HTML 文档来响应该请求。
HTTP 是如何工作的？ HTTP 遵循请求-响应消息传递模式，其中客户端发出请求，Web 服务器发送响应，该响应不仅包括请求的内容，还包括有关请求的相关信息。
在底层，每个请求都会打开一个与服务器的短暂连接，然后关闭。
HTTP 示例
网页浏览。 下载图像、视频或二进制文件，例如桌面应用程序。 使用 JavaScript 中的 fetch 函数向 API 发出异步请求。 由于每个 HTTP 请求都包含处理它所需的所有信息，因此服务器无需跟踪连接和请求。
这种无状态设计是有利的，因为它使得可以部署额外的服务器来处理请求，而不需要在服务器之间同步状态逻辑。
此外，由于每个请求都是独立的，因此通过代理路由消息以执行缓存、加密和压缩等增值功能变得非常简单。
这种无状态方法的缺点是客户端打开一个临时连接并为每个请求发送元数据，从而产生少量开销。
当加载网页或下载文件时，这种开销可以忽略不计。但是，如果您发送负载较小的高频请求，它可能会对应用程序的性能产生显着影响。
通过 HTTP 进行实时更新 这种模式（客户端发出请求，服务器发出响应）非常适合网页、文件或应用程序数据等静态资源。
但是，请考虑这样一种情况：客户不知道新信息何时可用。
例如，假设您正在为 BBC 实施突发新闻功能。
在这种情况下，客户不知道故事的下一次更新何时会发生。
现在，您可以对客户端进行编码，以频繁地发出 HTTP 请求，以防万一发生某些情况，并且对于少数客户端来说，这可能工作得足够好。
但是假设您有成百上千个客户端（在 BBC 的情况下有数十万个）向服务器发送请求，而这些请求在更新之间没有产生任何新内容。
这不仅浪费带宽和服务器资源，而且在最近的请求完成后不久更新就会中断 - 可能需要几秒钟才能发送下一个请求并且用户获得更新。一般来说，这种方法称为HTTP 轮询，它既不高效也不实时！
相反，如果服务器能够在新信息可用时将数据推送到客户端，那就更好了，但这从根本上违背了请求-响应模式的原则。
或者确实如此？
HTTP 流式传输 尽管 HTTP 从根本上遵循请求-响应模式，但有一种解决方法可用于实现实时更新。
服务器不是发出完整的响应，而是发出部分 HTTP 响应并保持底层连接打开。
基于上一节的突发新闻示例，通过 HTTP 流，服务器可以在每次新闻更新中断时将部分响应（如果您愿意，可以是块）附加到响应流 - 连接无限期保持打开状态，使服务器能够推送当新信息可用时，以最短的延迟向客户端提供新信息。</description>
    </item>
    <item>
      <title>[译]WebSocket与REST</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websocket-vs-rest/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websocket-vs-rest/</guid>
      <description>原文链接：https://ably.com/topic/websocket-vs-rest
无论您是将客户端连接到服务器、将微服务相互连接，还是将应用程序的一部分连接到外部服务，在通信方法方面，您几乎都会有多种选择。不过，有两个比较突出：WebSocket 和 REST。
好消息是，尽管为应用程序选择核心技术是一项严肃的责任，但由于 WebSocket 和 REST 不同的架构选择、性能特征和实现考虑因素，在 WebSocket 和 REST 之间进行选择相对简单。这意味着双方都可以解决对方可能遇到的问题。
在本文中，我们将阐明 REST 与 WebSocket，涵盖：
回顾一下 REST 和 WebSocket 是什么 他们的技术权衡，包括 WebSocket 与 REST 性能 何时应该使用 REST 以及何时 WebSocket 是更好的选择 如果您使用任一协议，则需要填补一些空白。 但如果您正在寻找快速摘要，那么您需要了解以下内容：
当您需要轻松扩展的基础架构来进行无状态 CRUD 操作并且您希望坚持使用标准 Web 工具时，REST 是理想的选择。例如，如果您正在构建一个 API 来将更新发布到社交网络 当您需要客户端和服务器之间进行实时、双向、低延迟通信时，WebSocket 是正确的选择。例如，如果您正在构建聊天应用程序。 什么是REST？ 表述性状态传输 (REST) 是一组原则，定义了通过 HTTP 构建 API 的一种方法。这很容易被忽视，但 REST 不是一种协议，这意味着您可以非常灵活地根据您的需求来塑造它。它的流行很大程度上是由于它的简单性以及它重用了已经用于网络的方法和技术。这在很大程度上定义了它表现良好的用例以及您需要寻找替代方案的用例。
让我们快速了解一下 REST 与其他方法的区别。
REST 的主要特征 **无状态：**对 REST API 发出的每个请求都是独立且自包含的。这使得扩展变得更加简单。当流量增加时，您可以在负载均衡器后面添加更多服务器，因为特定客户端不需要每次都连接到同一台服务器。尽管 HTTP 和 REST 是无状态的，但您可以通过使用客户端 cookie 来跟踪会话和登录状态来维护长时间运行的会话。 **CRUD：**每个 REST 请求都使用标准 HTTP 动词（GET、POST、PUT、PATCH 和 DELETE），与创建、读取、更新、删除操作对齐。 有效负载格式： REST 通常使用 JSON 或 XML 等标准化消息格式进行数据交换。但是您可以使用任何您喜欢的数据格式，只要您设置正确的Content-Type标头即可。 **可缓存：**您可以选择允许客户端和中间基础设施缓存响应。这有助于扩展和响应时间。 同步： REST 所依赖的 HTTP 请求-响应周期最适合短暂、简单的事务，其中客户端在继续下一个任务之前等待响应。 什么是 WebSocket？ REST 适用于短暂、无状态的通信，而 WebSocket 则提供持续、低延迟的双向通信通道。这意味着您与 WebSocket 交互的方式是不同的。因此，您无需使用特定端点构建“WebSocket API”，而是打开一个连接，双方可以在需要时交换消息。这使其成为实时应用程序的理想选择，例如聊天、体育或金融数据的实时流媒体，以及 Figma、Miro 和 Google Docs 等交互式实时协作环境。</description>
    </item>
    <item>
      <title>[译]什么是 HTTP？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/http/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/http/</guid>
      <description>原文链接：https://www.pubnub.com/guides/http/
HTTP 概述 HTTP，即超文本传输协议，是互联网通信的基础。它在客户端-服务器模型上运行，其中前端客户端（例如网络浏览器）通过向服务器发送HTTP请求消息来发起请求，例如请求网页（例如搜索引擎）。然后，服务器使用包含所请求资源的 HTTP 响应消息进行响应，如果资源不可用，则使用错误消息进行响应。
HTTP 是一种无状态协议，这意味着每个请求都是独立的，与之前或将来的请求无关。这允许客户端和服务器之间进行有效的通信。
HTTP 于 1991 年首次引入，作为 Tim Berners-Lee 创建的万维网项目的一部分，并由互联网工程任务组 (IETF)进行标准化。 IETF 负责开发和维护 HTTP、TCP/IP、DNS 等协议，以及他们在 RFC 或“征求意见”中记录的许多其他协议。
早期，需要一种标准化协议来促进不同计算机和服务器之间的通信。这导致了各种协议的发展，包括 HTTP。
HTTP 0.9，该协议的第一个版本，是一个简单且有限的系统，仅支持超文本文档的检索。它不支持标头，只允许传输纯文本数据。
1996 年，HTTP 1.0 发布，引入了至今仍在使用的几个重要功能。它增加了对多种媒体类型的支持，允许传输图像、视频和其他文件格式。它还引入了使用标头来实现更高级的功能，例如缓存和身份验证。
1999 年发布的 HTTP 1.1 进一步改进了该协议。它引入了持久连接，允许通过单个 TCP 连接发送多个请求和响应。这极大地提高了客户端和服务器之间通信的效率和速度。
近年来，人们致力于增强和优化HTTP协议。这导致了HTTP/2的开发，并于 2015 年发布。HTTP/2 带来了多项改进，包括多路复用、标头压缩和服务器推送，以减少延迟并提高性能。
最后是 HTTP/3。HTTP/3也称为 HTTP over QUIC（快速 UDP Internet 连接），是最新的 HTTP 协议版本，旨在解决以前版本的一些限制并提高性能。
HTTP/3 构建在 QUIC 传输协议之上，该协议使用用户数据报协议 (UDP)而不是 TCP。与 TCP 相比，UDP 具有多种优势，例如减少延迟和改进拥塞控制。 HTTP/3 使用 UDP，旨在提供更快、更可靠、更安全的连接。
HTTP/3 的关键特性之一是它支持多路复用和流多路复用的能力。这允许通过单个连接同时发送多个请求和响应，从而提高效率并减少延迟。此外，HTTP/3 还包含零 RTT 连接建立、改进的拥塞控制以及通过加密提高安全性等功能。
HTTP 和服务器 服务器对于处理 HTTP 请求和提供相应的响应至关重要。以下是HTTP与服务器关系的几个要点：
请求-响应模型：如前所述，HTTP 遵循请求-响应模型。客户端向服务器发送 HTTP 请求，指定所需的操作，例如检索网页或提交表单数据。服务器处理请求并发回 HTTP 响应，其中包括状态代码、标头和请求的内容（如果适用）。 Web 服务器：Web 服务器是处理 HTTP 请求的软件应用程序或程序。它们侦听特定网络端口（通常为 HTTP 的端口 80）上的传入请求，并将它们路由到适当的资源或应用程序。流行的 Web 服务器软件包括 Apache、Nginx和 Microsoft IIS。 路由和资源处理：在 HTTP 服务器中，路由确定传入请求如何映射到特定资源或端点处理程序。例如，当接收到针对特定 URL 或路径的请求时，服务器使用路由规则来确定哪个代码或资源应处理该请求并生成适当的响应。 处理和生成响应：当 HTTP 请求到达服务器时，它会触发与所请求的资源关联的代码或资源处理程序的执行。这些处理程序可以从数据库检索数据、与外部服务交互或生成动态内容。服务器根据请求处理这些数据，并生成带有必要标头和内容的 HTTP 响应。 状态代码：HTTP 响应包括指示请求结果的状态代码。这些状态代码的范围从信息性 (1xx) 到成功 (2xx)、重定向 (3xx)、客户端错误 (4xx) 和服务器错误 (5xx)。常见状态代码包括 200（正常）、404（未找到）和 500（内部服务器错误）。 无状态：HTTP 是一种无状态协议，这意味着每个请求/响应交互都是独立的，并且不保留有关先前请求的信息。为了维护用户会话或跟踪用户交互，服务器通常使用 cookie 或会话管理技术。 HTTP 是如何工作的？ 当客户端想要从服务器检索网页或新资源时，它会发起 HTTP 请求。该请求由几个部分组成：</description>
    </item>
    <item>
      <title>[译]什么是 OAuth？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/oauth/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/oauth/</guid>
      <description>原文链接：https://www.pubnub.com/guides/oauth/
什么是 OAuth？ OAuth（开放授权）是一种开放标准授权框架，允许第三方应用程序访问用户数据，而无需用户共享其登录凭据。它为用户提供了一种安全且标准化的方式，将其在一个网站上的资源的访问权限授予另一个网站或应用程序，而无需暴露其密码。
简单来说，OAuth 充当最终用户和他们想要授予访问权限的应用程序之间的中间人。用户不会直接向 Web 应用程序提供用户名和密码，而是会被重定向到授权服务器（例如 Google、Facebook 或 Twitter），在那里他们可以安全地验证自己的身份。经过身份验证后，用户可以授予或拒绝对其想要使用的应用程序上的数据的访问权限。
OAuth 是如何工作的？ OAuth 为用户提供了一种安全且标准化的方式来授权应用程序从各种来源（例如社交媒体平台或在线服务）访问其数据。
OAuth工作流程涉及三个主要方：用户、应用程序和服务提供商（也称为OAuth 服务器）。以下是 OAuth 流程的高级概述：
用户启动该过程：用户想要使用需要访问服务提供商上受保护资源的应用程序。用户首先向应用程序请求访问权限。 应用程序请求授权：应用程序将用户重定向到服务提供商的授权端点，以及必要的参数，例如应用程序的客户端 ID 和请求的访问范围。 用户授予授权：服务提供商在授权端点向用户显示登录屏幕。用户输入其凭据，如果有效，则系统会要求授予或拒绝应用程序访问其资源的请求。 服务提供商发出授权代码：如果用户授予授权，服务提供商会生成授权代码并将用户重定向回应用程序指定的重定向 URI。授权码是一个临时令牌，代表用户的同意。 应用程序用授权代码交换访问令牌：现在拥有授权代码的应用程序向服务提供商发送请求，以用代码交换访问令牌。该请求包括代码、应用程序的客户端 ID 和客户端密钥，它们用于向服务提供商验证应用程序的身份。 服务提供商验证授权代码：服务提供商对其进行验证并检查它是否与之前为用户生成的授权代码相匹配。如果代码有效，服务提供商将向应用程序颁发访问令牌。 应用程序使用访问令牌来访问受保护的资源：通过从服务提供商获得的访问令牌，应用程序现在可以代表用户发出请求以访问其受保护的资源。这些请求通常是向服务提供商的 API 端点发出的。 访问令牌过期和刷新：访问令牌的生命周期有限，过期后就会过期。要继续访问用户的资源，应用程序可以使用刷新令牌（如果提供）来获取新的访问令牌，而无需用户的参与。 使用 OAuth 有什么好处？ 这种广泛采用的协议为构建实时聊天和消息应用程序的开发人员提供了多种好处：
增强的安全性： OAuth 消除了应用程序需要存储用户凭据的情况，从而降低了未经授权访问的风险。通过利用 OAuth，开发人员可以对用户进行身份验证和授权，而无需处理用户的敏感信息（例如密码）。这显着降低了数据泄露的可能性并增强了整体应用程序的安全性。
简化的用户体验： OAuth 使用户能够向第三方应用程序授予权限而无需共享其凭据，从而提供无缝且用户友好的体验。这消除了为每个应用程序创建和管理单独帐户的麻烦，从而提高了便利性和用户采用率。
可扩展性和互操作性： OAuth 使开发人员能够构建集成多个平台和服务的应用程序。通过利用 OAuth，开发人员可以轻松地验证和访问来自不同提供商的资源，从而允许他们的聊天和消息应用程序与其他系统无缝交互。这增强了可扩展性，并使开发人员能够利用不同平台的现有用户群。
细粒度的访问控制： OAuth 允许开发人员为其聊天和消息应用程序实施细粒度的访问控制。可以为每个资源授予权限，确保第三方应用程序只能访问所需的资源。这种对访问的精细控制有助于维护数据隐私和控制，降低未经授权的数据泄露的风险。
开发人员友好： OAuth 提供了一个简单、开发人员友好的框架，用于在聊天和消息传递应用程序中实现身份验证和授权。该协议有详细的文档记录，并受到各种库和 SDK 的支持，使开发人员可以轻松地将 OAuth 集成到他们的应用程序中。此外，OAuth 通过内置的令牌过期和撤销机制简化了访问令牌的管理。这简化了开发流程并降低了处理用户身份验证和授权的复杂性。
使用 OAuth 有哪些缺点？ 虽然 OAuth 对于构建实时聊天和消息应用程序的开发人员来说具有众多优势，但也存在一些缺点。这些缺点包括：
**复杂性：**实施 OAuth 可能很复杂，尤其是对于不熟悉该协议的开发人员而言。该过程涉及多个步骤，包括注册应用程序、获取客户端凭据和处理授权流程。与多个身份提供商集成或处理刷新令牌时，复杂性可能会进一步增加。开发人员需要投入时间和精力来正确理解和实施 OAuth。
对第三方提供商的依赖： OAuth 依赖第三方身份提供商来对用户进行身份验证和授权。这种依赖性引入了潜在的单点故障。如果身份提供商遇到中断或更改其 API，则可能会中断聊天和消息传递应用程序的身份验证和授权过程。开发人员需要考虑所选身份提供商的可靠性和寿命。
用户隐私问题： OAuth 提供了一种安全的身份验证和授权机制，但一些用户可能担心与第三方应用程序共享其个人信息。尽管 OAuth 不会公开密码等敏感信息，但用户仍然需要授予访问其数据的权限。某些用户可能会犹豫是否授予这些权限，尤其是对于鲜为人知或不太受信任的应用程序。
**缺乏标准化：**尽管 OAuth 被广泛采用，但不同提供商和平台的实施可能存在差异。缺乏标准化可能会导致与多个系统集成时出现不一致和兼容性问题。开发人员可能需要额外的努力来处理这些变化并确保不同平台和提供商之间的兼容性。
**安全漏洞：**虽然 OAuth 的设计是安全的，但也存在发现和利用漏洞的情况。这些漏洞可能导致未经授权的用户数据访问或冒充攻击。开发人员必须及时了解最新的安全最佳实践，并定期修补 OAuth 实施中的任何漏洞。
OAuth 与 OpenID OAuth 和OpenID是广泛使用的身份验证和授权协议，但用途不同。
OAuth 主要是一种授权协议，允许应用程序访问另一个系统上的用户资源，而无需共享其凭据。它通常用于委托授权场景，即用户向第三方应用程序授予访问其在特定网站或服务上的数据的权限。例如，当您使用 Google 帐户登录第三方应用程序时，OAuth 通常用于授予该应用程序访问您的 Google 云端硬盘或 Gmail 数据的权限。</description>
    </item>
    <item>
      <title>[译]什么是HTTP/3？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/http3/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/http3/</guid>
      <description>原文链接：https://www.pubnub.com/guides/http-3/
什么是 HTTP/3？ HTTP/3（或 HTTP-over-QUIC）是超文本传输协议 ( HTTP ) 的第三个主要版本。它是用于 Web 浏览器和服务器之间通信的应用层协议。 HTTP/3 旨在提高 Web 通信的性能和安全性。
HTTP/3的主要功能之一是它构建在用户数据报协议 (UDP)之上，而不是建立在 HTTP 早期版本中使用的传输控制协议(TCP) 之上。 UDP 是一种无连接协议，可为实时应用程序提供更低的延迟和更好的性能。
HTTP/3 还引入了一种新的传输协议，称为QUIC（快速 UDP 互联网连接）。与 TCP 相比，QUIC 具有多种优势，包括减少延迟、提高可靠性和更好的拥塞控制。它还包括内置加密，增强网页和通信安全性。
HTTP/3 的另一个重要特性是它对多路复用的支持。这意味着可以通过单个连接同时发送和接收多个请求和响应，从而提高数据传输效率。
HTTP/3 还包括其他优化以提高性能，例如标头压缩和流优先级。这些优化有助于减少开销并提高 Web 通信的整体速度。
总体而言，HTTP/3 在性能和安全性方面比其前身 HTTP/2 显着改进了功能。它对于构建实时聊天和消息传递应用程序的开发人员特别有利，因为它提供更低的延迟和更高的可靠性，使其成为需要快速交付实时数据的用例的理想选择。
让我们退一步看看这一切从第一个 HTTP 版本开始。
HTTP 简史 HTTP（超文本传输协议）协议有着长达数十年的丰富历史。它于 20 世纪 90 年代初首次推出，作为万维网上客户端和服务器之间的通信方式。
HTTP 最初是由Tim Berners-Lee和他在CERN（欧洲核研究组织）的团队开发的，旨在促进超文本文档的交换。第一个版本 HTTP/0.9 是一个简单的协议，仅支持用于检索 HTML 文档的 GET 请求。
1996 年，HTTP/1.0 协议由互联网工程任务组(IETF)标准化。该版本引入了几个重要的功能，包括对 POST 请求、响应状态代码和标头的支持。 HTTP/1.0 还允许传输不同的媒体类型，例如图像和视频以及 HTML 文档。
然而，随着网络变得更加复杂和交互，HTTP/1.0 的局限性变得明显。它是围绕请求-响应模型设计的，其中每个请求都需要与服务器的单独连接。这导致了高延迟和网络资源的低效使用。
HTTP/1.1 协议解决了这些问题。
HTTP/1.1 HTTP/1.1 是超文本传输协议 (HTTP) 的第二个主要版本，于 1999 年推出，如今在互联网上广泛使用。
HTTP/1.1 的关键功能之一是支持持久连接，也称为保持活动连接。在以前版本的 HTTP 中，必须为每个请求和响应建立一个新的 TCP 连接，这导致延迟和开销增加。使用 HTTP/1.1，可以通过单个连接发送多个请求和响应，从而减少建立新连接的需要并提高性能。
HTTP/1.1 的另一个重要特性是它对管道的支持。流水线允许发送多个请求而无需等待相应的响应，这有助于减少延迟并提高数据传输效率。
HTTP/1.1还引入了缓存的概念。缓存允许 Web 浏览器存储和重用以前访问的资源，例如图像和样式表，这可以显着缩短页面加载时间并减少带宽使用。
然而，尽管有这些改进，HTTP/1.1 仍然存在一些局限性。同时处理多个请求和响应可能效率低下，因为它需要严格的消息排序。这可能会导致性能问题，特别是对于需要低延迟和高并发的实时应用程序。
此外，HTTP/1.1 不支持标头压缩，这可能会导致开销增加和数据传输速度变慢。
HTTP/2 HTTP/2 是超文本传输协议 (HTTP)的最新主要版本，于 2015 年推出，作为对之前 HTTP/1.</description>
    </item>
    <item>
      <title>[译]什么是HTTP流式传输？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/http-streaming/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/http-streaming/</guid>
      <description>原文链接：https://www.pubnub.com/guides/http-streaming/
什么是 HTTP 流式传输？ HTTP 流，也称为基于 HTTP 的流或 HTTP 实时流，是一种用于通过 Internet 传送实时多媒体内容（例如音频或视频）的技术。该协议允许从服务器到客户端设备的连续数据传输，使用户能够消费媒体内容而无需完整的文件下载。
与传统的文件下载方法不同，在开始播放之前需要下载整个文件，HTTP 流允许立即播放媒体内容。它的工作原理是将媒体文件分成更小的片段或块，然后将其连续传送到客户端设备。
HTTP 流利用超文本传输协议 (HTTP)作为其通信协议。它利用现有的 Web 基础设施并使用 HTTP 服务器的可扩展性、缓存和负载平衡功能。这使其成为向许多用户提供实时内容的高效且灵活的解决方案。
HTTP 流如何工作？ 从较高层面来看，HTTP 流式传输的工作原理是将媒体文件分成小块并通过 HTTP 连接将其传输到客户端。客户端（通常是网络浏览器或媒体播放器）不断请求和接收这些块，从而实现媒体的无缝播放。
HTTP 流式传输有两种主要方法：渐进式下载和自适应流式传输。
1.渐进式下载：
渐进式下载缺乏自适应流媒体提供的适应性。在客户端开始播放之前，会通过渐进式下载来下载整个媒体文件。这意味着，如果在下载过程中出现任何 Wi-Fi 网络中断或带宽波动，用户可能会遇到播放缓冲或延迟的情况。这可能会让用户感到沮丧，并可能导致糟糕的用户体验。
2.[自适应流媒体](https://www.cloudflare.com/learning/video/what-is-adaptive-bitrate-streaming/#:~:text=Adaptive bitrate streaming adjusts video,%2C location%2C or Internet speed.)：
自适应流媒体对于开发人员构建实时聊天和消息传递应用程序（提供视频或音频等媒体文件）来说是一项至关重要的技术。它确保无论用户的网络条件如何，媒体内容都可以流畅、高效地传输。这在当今的数字环境中尤其重要，用户期望高质量、不间断的媒体播放，但有时具有不同的互联网速度。
自适应流式传输通常涉及以下步骤：
内容编码：媒体文件被编码为具有不同比特率和质量级别的多种变体。这些变化存储在服务器上。 清单文件：创建一个清单文件，其中包含有关可用变体及其相应 URL 的信息。 初始请求：客户端向服务器请求清单文件，该文件提供有关媒体文件的可用变体的信息。 变体选择：客户端根据网络条件和设备功能选择所需的变体。然后它从服务器请求相应的媒体块。 块传送：服务器通过 HTTP 连接将分块媒体传送到客户端。客户端不断请求并接收这些块，并在必要时调整播放质量。 比特率适应：在播放期间，客户端监视网络状况并根据可用带宽动态调整所选变体。如果网络变得拥塞，它可能会切换到较低的比特率变体，或者如果网络状况改善，它可能会切换到较高的比特率变体。 无缝播放：通过连续接收和播放媒体块，自适应流媒体提供无缝播放体验，使用户能够在没有中断或缓冲的情况下享受内容。 HTTP 流有什么好处？ HTTP 流式传输为构建实时聊天和消息传递应用程序的开发人员提供了多种好处：
实时数据传送：HTTP流可以实现数据的实时传送，允许用户即时发送和接收消息。这确保用户可以进行实时对话，而不会出现任何明显的延迟。 可扩展性：HTTP 流具有高度可扩展性，能够处理许多并发连接并向多个用户实时传送消息。这对于支持不断增长的用户群和处理大量消息的应用程序至关重要。 减少网络开销：使用 HTTP 流式传输，当有新信息可用时，仅通过网络发送必要的数据，从而减少网络开销。这与轮询等其他方法形成鲜明对比，即使不存在新数据，也会不断发出请求。 高效的资源利用：HTTP 流可以有效地利用服务器资源，因为它消除了频繁的轮询请求。这可以减少服务器负载并提高性能，特别是在具有许多活跃用户的应用程序中。 更好的用户体验：HTTP 流通过提供实时更新和即时消息传递，增强了聊天和消息传递应用程序的用户体验。用户可以进行更具互动性和吸引力的对话，而不会因延迟或错过消息而感到沮丧。 安全性：HTTP 流可以利用 HTTPS 等现有安全措施提供安全的通信通道。这可确保敏感的用户数据和对话免受未经授权的访问和窃听。 使用 HTTP 流有哪些缺点？ 使用 HTTP 流进行实时聊天和消息传递应用程序有几个缺点：
延迟： HTTP 流媒体依赖于客户端和服务器之间的持续连接。这可能会引入延迟，因为服务器需要维持开放连接并以块的形式发送数据。因此，向用户发送实时消息可能会出现延迟，从而影响用户体验。
可扩展性： HTTP 流对于客户端和服务器来说可能是资源密集型的。维护大量打开的连接会给服务器带来压力并限制其可扩展性。此外，客户端需要处理传入的数据流，这也可能对其资源提出要求。
**兼容性：**所有设备或网络可能不支持 HTTP 流。某些防火墙或代理可能会阻止或干扰流连接，从而导致通信问题。这可能会将聊天应用程序的可用性限制为部分用户。
**可靠性：**由于 HTTP 流媒体依赖于长期连接，因此中断或网络故障可能会破坏流媒体过程。如果连接丢失，客户端可能需要重新建立连接，这可能会导致消息丢失或重复。
安全性： HTTP 流本身并不为数据传输提供加密或安全措施。如果没有额外的安全层，通过聊天应用程序交换的敏感信息可能容易遭到窃听或未经授权的访问。
**电池消耗：**连续连接和数据流会快速耗尽移动设备的电池。这可能是实时聊天应用程序的用户所关心的问题，尤其是在长时间使用这些应用程序时。
开发人员在选择实时聊天和消息应用程序技术时需要考虑这些缺点。虽然 HTTP 流提供了一些好处，例如利用现有的安全措施，但开发人员应该权衡这些优点与潜在的缺点，并评估它们是否符合其特定的用例和要求。
HTTP 流式传输有哪些替代方案？ HTTP 流的一些替代方案包括：</description>
    </item>
    <item>
      <title>[译]什么是Socket.IO？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/socket-io/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/socket-io/</guid>
      <description>原文链接：https://www.pubnub.com/guides/socket-io/
什么是Socket.IO？ Socket.IO是一个开源的跨平台库，它提供客户端和服务器之间基于事件的全双工双向通信。它基于 WebSocket 协议构建，提供附加功能，例如自动重新连接以及在无法使用 WebSocket时回退到HTTP 长轮询。
Socket.IO 客户端由客户端和服务器端库组成。虽然最初在服务器上支持NodeJS ，在客户端支持JavaScript，但现在它支持各种服务器和客户端技术，包括Java、Python、Swift和Kotlin，它们都是官方代码库的一部分，由活跃社区贡献。
Socket.io 有何用途？ Socket.IO 允许您实现依赖于消息交换的各种应用程序，例如即时消息传递、多用户协作、实时分析、文件共享和通知。
Socket.io 适合实时应用程序吗？ 是的，Socket.IO 是构建实时 Web 应用程序的不错选择，因为它提供了许多对开发人员有用的开箱即用功能，包括：
房间和命名空间支持允许您将客户端分组到可以接收广播或多播消息的房间中。 自动重连意味着您无需担心客户端上线或离线。 二进制数据支持，使您不仅可以交换聊天消息，还可以交换图像或其他媒体。 Socket.io 是 API 吗？ Socket.IO不是传统意义上的API。它是一个库或框架，抽象了底层传输机制，并提供了一组用于在客户端和服务器之间构建实时双向通信的工具和实用程序。
Socket.IO 包含客户端和服务器组件，每个组件都公开其 API。
Socket.io是TCP还是UDP，有什么区别？ Socket.IO可以使用TCP和UDP作为底层传输协议，但它主要使用TCP。
TCP（传输控制协议）是一种可靠的、面向连接的协议，可确保数据按顺序且无错误地传送。
另一方面，UDP（用户数据报协议）是一种无连接、不可靠的协议，它发送数据时不检查数据是否已成功接收。
UDP 比 TCP 更轻量级，因为只有后者在客户端和服务器之间建立连接，但它只能由能够抵御丢失消息的应用程序使用。
Socket.io 与 Web Sockets 虽然 Socket.IO 明确不是WebSocket实现，但有一些相似之处。两者都是基于事件的，这意味着您可以“侦听”连接、断开连接或 new_message 等事件，并且都允许您发送JSON 对象等结构化数据。
您可以将 Socket.IO 视为底层传输协议之上的抽象层。除了底层通信层之外，该库还实现了其他功能，例如自动重新连接、数据包缓冲和消息确认，以及在 WebSocket 不可用时回退到 HTTP 长轮询，从而增加了鲁棒性。
Socket.io 示例：客户端/服务器 JavaScript 中 Socket.IO 的 Hello World 客户端/服务器实现将编写如下，摘自4.x Socket.IO 文档：
Socket.io 服务器示例：
Socket.io 客户端示例：
Socket.IO 是如何工作的？ 该库支持两种传输方法：HTTP 长轮询和 WebSockets。首先建立 HTTP 长轮询连接，然后在可能的情况下升级为 WebSocket 连接。 WebSocket 不能在任何地方运行，例如，它们被许多公司代理和防火墙阻止，因此首先发起 HTTP 长轮询，因为它更有可能成功。 HTTP 长轮询连接建立后，会在对最终用户完全透明的过程中“升级”为 WebSocket 连接。
Socket.IO的架构是怎样的？ Socket.IO 由两个不同的层组成，分别存在于客户端和服务器上：
底层管道由一个名为Engine.IO的单独库提供 Socket.IO 提供的高级 API 作为开发人员或用户，您通常不会直接与 Engine.IO 交互，但它在幕后运行以建立连接、协商传输机制并检测任何断开连接。将 Engine.IO 与 WebSocket 进行比较时，两者在功能上非常相似，只是 Engine.</description>
    </item>
    <item>
      <title>[译]什么是WebSocket？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websockets/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websockets/</guid>
      <description>原文链接：https://www.pubnub.com/guides/websockets/
什么是 WebSocket？ WebSocket 是一种通过单个TCP连接提供全双工通信通道的通信协议。它支持客户端和服务器之间的实时、事件驱动的连接。
与遵循请求-响应模型的传统 HTTP 软件不同，WebSocket 允许双向（双向）通信。这意味着客户端和服务器可以随时向对方发送数据，而无需持续轮询。
WebSocket 有何用途？ WebSocket 用于客户端和服务器之间的实时、事件驱动的通信。它们对于构建需要即时更新的软件应用程序特别有用，例如实时聊天、消息传递和多人游戏。
在传统的 HTTP 中，客户端向服务器发送请求，服务器用请求的数据进行响应。这种请求-响应模型需要从客户端到服务器进行连续轮询，这可能会导致延迟增加和效率降低。
另一方面，WebSockets 在客户端和服务器之间建立持久连接。这意味着一旦建立连接，客户端和服务器就可以随时向对方发送数据，而无需不断轮询请求。这允许实时通信，可以立即发送和接收更新。
例如，当用户在聊天应用程序中发送消息时，该消息可以立即传递给所有其他用户，而无需刷新页面或发出频繁的 HTTP 请求。这将带来更加无缝和高效的用户体验。
此外，Web Sockets 还允许双向通信，这意味着客户端和服务器都可以相互发送数据。这为更具交互性和吸引力的应用程序提供了可能性，其中服务器可以处理向客户端推送更新或通知，而无需客户端明确请求它们。
Web 套接字的缺点 WebSocket 的缺点包括：
浏览器支持：虽然大多数现代浏览器支持 WebSocket，但一些旧浏览器不支持。这可能会限制应用程序的范围，并且需要针对旧版浏览器的额外后备机制。 代理和防火墙限制：某些代理服务器和防火墙可能会阻止或干扰 WebSocket 连接。这可能会导致连接问题，尤其是在安全的公司或受限的网络环境中。 可扩展性：Web Sockets 在客户端和服务器之间维护持久连接，这在处理许多并发连接时可能会导致服务器资源紧张。必须实施适当的负载平衡和资源管理技术以确保可扩展性。像 Socket.io 这样的开源资源不适合大规模运营或快速增长。 有状态性：与无状态的传统 HTTP 不同，WebSocket 是有状态的。这意味着服务器需要维护每个客户端的连接状态，从而导致内存使用量增加和潜在的可扩展性挑战。 安全注意事项：通过 WebSocket 建立持久连接，需要采取适当的安全措施来防止潜在的漏洞，例如跨站点脚本 (XSS) 和跨站点请求伪造(CSRF)。应实施使用SSL/TLS加密的安全 WebSocket 连接 (wss://)，以确保数据隐私和完整性。 如果通过 Web 套接字的连接丢失，则不包含负载平衡或重新连接机制。 在可能不支持 Web Sockets 的环境中，仍然需要有后备选项，例如HTTP 流或长轮询。 像Presence这样的功能在 WebSocket 连接上不能很好地工作，因为断开连接很难检测到。 WebSockets、HTTP、Web 服务器、轮询 HTTP 连接与 WebSockets 要了解WebSocket API，了解其构建基础 — HTTP（超文本传输协议）及其请求/响应模型也很重要。 HTTP 是一种应用层协议，是所有基于 Web 的通信和数据传输的基础。
使用 HTTP 时，客户端（例如 Web 浏览器）向服务器发送请求，然后服务器发回消息（称为响应）。我们今天所知道的网络是建立在这种基本的客户端-服务器循环之上的，尽管对 HTTP 进行了许多添加和更新以使其更具交互性。当前有一些可行且受支持的 HTTP 版本（HTTP/1.1 和 HTTP/2）以及称为 HTTPS 的安全版本。
基本 HTTP 请求适用于许多用例，例如当有人需要在网页上搜索并接收相关的、非时间敏感的信息时。然而，它并不总是最适合需要实时通信或需要以最小延迟快速更新的数据的 Web 应用程序。
每当客户端发出新的 HTTP 服务器请求时，默认行为是打开新的 HTTP 连接。这是低效的，因为它使用循环非有效负载数据的带宽并增加了数据传输之间的延迟。
此外，HTTP 请求只能从客户端向一个方向流动。传统上没有服务器发起与客户端通信的机制。除非服务器首先请求数据，否则服务器无法向客户端发送数据。这可能会给需要从服务器端实时发出消息的用例带来问题。
短轮询与 WebSockets HTTP 轮询是接收定期数据更新的第一个解决方案。轮询是一种客户端重复向服务器发送请求直到服务器更新的技术。例如，所有现代 Web 浏览器都提供对 XMLHttpRequest 的支持，这是轮询服务器的原始方法之一。</description>
    </item>
    <item>
      <title>[译]什么是长轮询？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/long-polling/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/long-polling/</guid>
      <description>原文链接：https://www.pubnub.com/guides/long-polling/
什么是长轮询？ 长轮询用于实时 Web 应用程序，以实现客户端和 Web 服务器之间近乎即时的通信。它在实时更新至关重要的聊天和消息应用程序中特别有用。
在传统的HTTP通信中，客户端向服务器发送新请求并等待响应。这称为短轮询。然而，在实时场景中，短轮询可能效率不高，因为它需要频繁向服务器请求，导致不必要的网络开销和增加延迟。
另一方面，长轮询通过在新数据可用之前保持请求长时间打开来提高效率。服务器保持请求打开并等待，直到有新信息发送回客户端。一旦服务器有新数据，它就会响应客户端，然后客户端可以处理数据并发起新的长轮询请求。
通过维持客户端和服务器之间的长期连接，长轮询减少了请求数量，最大限度地减少了延迟，并提高了实时通信。这使得它非常适合需要有效技术来构建可扩展和响应式聊天和消息传递应用程序以及其他利用游戏等实时数据的应用程序的用例。
长轮询如何工作？ 长轮询是一种用于实时通信的技术，用于在客户端和服务器之间实现近乎即时的消息传递。它在构建低延迟和实时更新至关重要的聊天和消息传递应用程序时特别有用。
传统上，Web 浏览器使用基于拉取的方法从服务器获取数据。客户端向服务器发送请求，服务器以请求的数据进行响应。这种方法称为短轮询，可能会造成通信延迟，因为客户端必须重复发送请求来检查更新。
另一方面，长轮询是一种基于推送的方法，允许服务器在更新可用时立即向客户端发送更新。它的工作原理如下：
客户端向服务器发起请求，通常通过 HTTP 请求。 服务器不会立即响应，而是将请求保持打开状态，从而保持连接处于活动状态。 如果没有新数据可用，服务器将等待，直到有数据要发回。 一旦服务器有新的数据或者发生预定义的超时，它就会用最新的信息响应客户端。 客户端收到响应后，立即向服务器发送另一个请求以维持连接。 这种发送请求和接收响应的循环持续进行，确保实时更新。 长轮询通过长时间保持请求-响应周期打开来有效地模拟客户端和服务器之间的实时连接。它允许服务器在更新可用时立即将更新推送到客户端，并且无需客户端重复检查更新。
使用什么技术来实现长轮询？ 长轮询是一种实现客户端和服务器之间实时通信的技术。它通常用于即时更新至关重要的聊天和消息传递应用程序。可以使用多种技术来实现长轮询，每种技术都有优点和注意事项。让我们探讨一些用于实现长轮询的常用技术。
HTTP 长轮询：
这是实现长轮询的最基本、最广泛使用的方法。它利用 HTTP 协议建立并维护客户端和服务器之间的长期连接。客户端向服务器发送请求，服务器将请求保持打开状态，直到有新数据可用或达到某个超时。一旦有新数据可用，服务器就会用更新的信息进行响应，客户端立即发送另一个请求以继续循环。这种方法易于实现，不需要特殊的服务器端技术。
网络套接字：
WebSocket 是一种全双工通信协议，可通过单个长期连接在客户端和服务器之间实现实时通信。它提供了比长轮询更高效、低延迟的替代方案。 WebSocket 支持双向数据流，允许客户端和服务器异步发送消息。它消除了频繁的 HTTP 请求并减少了网络开销。 WebSocket 非常适合需要即时更新和实时交互的应用程序。
服务器发送的事件 (SSE)：
SSE 是一种单向通信技术，允许服务器通过单个长期 HTTP 连接将数据推送到客户端。通过SSE，服务器可以向客户端发送多个更新，而不需要客户端不断地发出请求。服务器启动连接并以一系列事件的形式发送数据。客户端接收这些事件并可以根据需要进行处理。
在选择在应用程序中实现长轮询的技术时，需要考虑以下几个因素：
可扩展性：确保所选技术可以处理大量并发连接，并且可以随着用户群的增长而扩展。 WebSocket 和 SSE 通常比基于 HTTP 的长轮询更具可扩展性，因为它们允许更有效地使用服务器资源。 安全性：考虑所选技术的安全影响。 WebSocket 和 SSE 可以使用SSL/TLS等加密协议进行保护，从而确保数据隐私和完整性。基于 HTTP 的长轮询也可以得到保护，但可能需要额外的身份验证和访问控制措施。 浏览器支持：检查所选技术的浏览器兼容性。 WebSocket 和 SSE 比基于 HTTP 的长轮询具有更好的浏览器支持，这可能需要额外的技术或针对旧浏览器的后备选项。 实施复杂性：评估所选技术的实施和维护难易程度。基于 HTTP 的长轮询相对简单，而 WebSocket 和 SSE 可能需要更高级的知识和基础设施。考虑开发团队可用的专业知识水平以及实施和维护所选技术所需的资源。 长轮询与 WebSockets 长轮询和 WebSocket是在客户端（例如 Web 浏览器）和服务器之间实现实时连接的技术。尽管它们的目的相似，但两者存在显着差异。
长轮询是一种技术，客户端向 Web 服务器发出请求，服务器保持连接打开，直到有新数据要发回。如果服务器有新数据可用，则可以立即响应，或者在发送空响应之前等待指定的超时时间。无论哪种情况，客户端一旦收到响应，就会立即向服务器发出另一个请求以建立新连接。此过程不断重复，允许服务器在更新可用时立即将更新推送到客户端。
另一方面，WebSockets 在客户端和服务器之间提供持久的双向通信通道。与长轮询不同的是，长轮询会为每个请求建立一个新连接，而 WebSocket 连接只会建立一次并无限期地保持打开状态。这允许双向实时、低延迟通信。服务器可以随时向客户端推送数据，客户端也可以不等待响应就向服务器发送数据。
长轮询和 Web Sockets 之间的相似之处： 1.实时更新：长轮询和WebSockets都可以实现服务器和客户端之间的实时通信，允许即时更新，无需连续轮询或刷新。
减少服务器负载：这两种技术都通过仅在数据可用时发送数据来最大程度地减少不必要的请求，从而减少服务器负载并提高可扩展性。 广泛的语言和框架支持：许多流行的编程语言和框架都支持长轮询和WebSocket，使不同生态系统的开发人员都可以使用它们。 长轮询和 Web Sockets 之间的区别： 1.延迟：长轮询会引入延迟，因为服务器发送响应和客户端接收响应之间存在延迟。 WebSocket 提供双向、低延迟通信，从而实现更快的实时功能。</description>
    </item>
    <item>
      <title>[译]如何通过 WebSocket 将 Kafka 消息流式传输到面向互联网的客户端</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/websockets-kafka/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/websockets-kafka/</guid>
      <description>原文链接：https://ably.com/topic/websockets-kafka
Apache Kafka 是目前最强大的异步消息传递技术之一。 Kafka 由 Jay Kreps、Jun Rao 和 Neha Narkhede 等团队于 2010 年在 LinkedIn 设计，并于 2011 年初开源。如今，该工具被众多公司（包括科技巨头，例如 Slack、Airbnb 或 Netflix 使用）为其实时数据流管道提供支持。
由于 Kafka 如此受欢迎，我很好奇是否可以使用它通过互联网和 WebSockets 将实时数据直接流式传输给最终用户。毕竟，Kafka 具有一系列特征，似乎使其成为一个值得注意的选择，例如：
高通量 低延迟 高并发 容错能力 持久性（持久性） 用于将 Kafka 消息流式传输到面向互联网的客户端的现有解决方案 我开始研究实时开发社区对这个用例的看法。我很快发现 Kafka 最初设计用于安全网络内进行机器对机器通信。这让我想到，如果您想通过 WebSocket 将数据从 Kafka 流式传输到面向互联网的用户，您可能需要使用某种中间件。
我继续研究，希望找到一些可以充当中间件的开源解决方案。我发现了其中的几个，理论上可以用作 Kafka 和通过互联网连接数据流的客户端之间的中介：
transfers_websockets_service kafka-websocket kafka-proxy-ws 不幸的是，上面列出的所有解决方案都只是概念证明，仅此而已。它们的功能集有限，并且尚未做好生产准备（尤其是大规模生产）。
然后我研究了成熟的科技公司如何解决这个 Kafka 用例；看来他们确实在使用某种中间件。例如，Trello 开发了WebSocket 协议的简化版本，仅支持订阅和取消订阅命令。 Slack 提供了另一个例子。该公司构建了一个名为Flannel的代理，它本质上是部署到边缘存在点的应用程序级缓存服务。
当然，像 Trello 或 Slack 这样的公司有能力投资所需的资源来构建此类解决方案。然而，开发自己的中间件并不总是一个可行的选择——这是一项非常复杂的任务，需要大量的资源和时间。另一种选择（最方便、最常见的一种）是使用已建立的第三方解决方案。
正如我们所看到的，普遍的共识似乎是 Kafka 本身不适合通过互联网进行最后一英里交付；您需要将它与另一个组件结合使用：面向互联网的实时消息传递服务。
在 Ably，我们的许多客户都通过我们面向互联网的 pub/sub 实时消息服务传输 Kafka消息。为了演示它是多么简单，下面是如何从 Kafka 消费数据并将其发布到 Ably 的示例：
const kafka = require(&amp;#39;kafka-node&amp;#39;); const Ably = require(&amp;#39;ably&amp;#39;); const ably = new Ably.Realtime({{ABLY_API_KEY}}); const ablyChannel = ably.channels.get(&amp;#39;kafka-example&amp;#39;); const Consumer = kafka.Consumer; const client = new kafka.</description>
    </item>
    <item>
      <title>ThingsBoard的领域模型</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/thingsboard-domain/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/thingsboard-domain/</guid>
      <description>ThingsBoard是一个开源的物联网平台，用于管理和监控物联网设备和数据。它提供了一个可扩展的架构，可以连接各种设备，并实时收集、处理和分析设备生成的数据。
领域模型 在ThingsBoard中，领域模型是一个关键概念，用于描述物联网系统中的物理实体、属性和行为。以下是ThingsBoard中的主要领域模型组件：
租户（Tenant）：租户是ThingsBoard中的顶级组织单位。它代表了一个独立的实体，可以是一个用户、组织或公司。租户拥有和管理自己的设备、客户、规则和仪表板等资源。租户之间的数据和配置是相互隔离的，每个租户都有自己的独立环境。租户由系统管理员创建和管理。
租户配置（TenantProfile）：用于定义租户级别的配置和属性。
客户（Customer）：客户是租户下的子级实体，代表了物联网系统中的用户或组织。一个租户可以包含多个客户，每个客户都有自己的访问权限和角色。客户可以访问和监控租户下的设备和数据。客户可以有自己的设备、规则和仪表板等资源，但这些资源受到租户级别的限制。客户由租户管理员创建和管理。
用户（User）：保存用户的基本信息
用户的角色（Authority）：SYS_ADMIN、TENANT_ADMIN、CUSTOMER_USER、REFRESH_TOKEN、PRE_VERIFICATION_TOKEN 用户凭证（UserCredentials）：保存用户的密码、激活用户 Token、重置密码 Token、密码使用历史 用户认证设置（UserAuthSettings）：保存用户 2FA 认证设置 用户设置（UserSettings）：保存用户的设置，包括：通用设置、通知、访问过的仪表盘等等 系统设置（AdminSettings）：是用于配置和管理整个系统的全局设置和参数，包括：通用设置、邮件、JWT、连接设置等等。
审计日志（AuditLog）
资产（Asset）：指在系统中表示和管理的物理或虚拟实体。资产可以是设备、传感器、设施、车辆、建筑物、人员或其他实体，其状态、属性和行为可以被监测、控制和管理。
资产配置（AssetProfile）：配置资产使用的默认规则链、队列、移动端仪表盘
设备（Device）：
遥测数据（TsKV）： 最新遥测数据： 属性（AttributeKvEntry）：属性类型分为客户端、服务端、共享 远程调用（Rpc） 设备凭证（DeviceCredentials）： OTA： 设备配置（DeviceProfile）：配置设备使用的默认规则链、队列、移动端仪表盘、边缘网关默认规则链、分配的固件、分配的软件、传输方式、告警规则、设置预配置
告警（Alarm）：包括字段：租户、客户、类型、明细、发起者、告警级别（严重、重要、次要、警告、不确定）、是否应答、是否清除、受理人、开始时间、结束时间、应答时间、清除时间、受理时间、是否传播、是否传播给所有者、是否传播给租户
告警评论（AlarmComment）：
实体告警（EntityAlarm）：
事件（Event）：分为异常事件、组件生命周期事件、规则链调试事件、规则节点事件、统计事件
通知（Notification）:
通知请求（NotificationRequest） 通知模版（NotificationTemplate）： 通知规则（NotificationRule） 通知对象（NotificationTarget） 流程 上报遥测数据 设备配置启用告警规则。温度大于 20 时，产生告警。温度小于 20 时，清除告警。
创建一个设备，设备凭证使用 AccessToken
使用 http api 发送遥测数据
curl -v -X POST http://localhost:8080/api/v1/gs76dj5m47yd3lm1wurd/telemetry --header Content-Type:application/json --data &amp;#34;{temperature:25}&amp;#34; 查看告警
再次发送遥测数据，可以清除告警
源码分析：
使用 http api 发送数据，入口类在 common/transport/http 模块下的 DeviceApiController 类。这个类提供了以下几个接口：
GET /api/v1/{deviceToken}/attributes POST /api/v1/{deviceToken}/attributes GET /api/v1/{deviceToken}/telemetry POST /api/v1/{deviceToken}/telemetry GET /api/v1/{deviceToken}/rpc POST /api/v1/{deviceToken}/rpc POST /api/v1/{deviceToken}/rpc/{requestId} POST /api/v1/{deviceToken}/claim GET /api/v1/{deviceToken}/firmware POST /api/v1/{deviceToken}/firmware GET /api/v1/{deviceToken}/software POST /api/v1/{deviceToken}/software POST /api/v1/provision POST /api/v1/{deviceToken}/telemetry 处理逻辑：
HttpTransportContext TransportService DefaultTransportService TbQueueProducer&amp;lt;TbProtoQueueMsg&amp;lt;ToRuleEngineMsg&amp;gt;&amp;gt; ruleEngineMsgProducer TbRuleEngineQueueConsumerManager TbRuleEngineConsumerContext ActorSystemContext TbActorRef TbActorMailbox AppActor TenantActor RuleChainActor	RuleChainActorMessageProcessor RuleNodeActor RuleNodeActorMessageProcessor TbDeviceProfileNode DeviceState AlarmState DefaultTbContext DefaultTbClusterService TbRuleEngineProducerProvider TbQueueProducer&amp;lt;TbProtoQueueMsg&amp;lt;ToRuleEngineMsg&amp;gt;&amp;gt; toRuleEngine 这里面用到了 Transport 、Queue、Actor ，调用链非常长。</description>
    </item>
    <item>
      <title>All things about ThingsBoard</title>
      <link>https://blog.chensoul.cc/posts/2024/04/29/all-things-about-thingsboard/</link>
      <pubDate>Mon, 29 Apr 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/04/29/all-things-about-thingsboard/</guid>
      <description>thingsboard 是一款乌克兰团队基于java语言研发的开源物联网框架，开源的是ce版，企业版需要购买授权且无源码。
官方网站：
Thingsboard 官网：https://thingsboard.io/
Thingsboard社区免费版本：https://demo.thingsboard.io/
Thingsboard 企业付费版本：https://thingsboard.cloud/
Thingsboard 源码：https://github.com/thingsboard/thingsboard
TBMQ 源码：https://github.com/thingsboard/tbmq
中文网：http://www.ithingsboard.com/
ThingsBoard 中文社区：https://www.thingsboard.club/
博客：
What is ThingsBoard? An Overview of ThingsBoard in 2024
How to access MQTT data with ThingsBoard | EMQ
分享｜五分钟学会使用 ThingsBoard 规则链
分享｜五分钟了解 ThingsBoard 物联网平台多种部署场景
分享｜五分钟快速学会 ThingsBoard 打包镜像和 Docker 部署
分享｜五分钟快速学会 ThingsBoard 对接物联网网关
分享｜五分钟快速学会 ThingsBoard DashBoard 基本操作
分享｜五分钟学会 ThingsBoard 本地编译运行和 Linux 部署
分享｜五分钟熟悉 ThingsBoard 前端二次开发。
https://www.cnblogs.com/east196/tag/ThingsBoard/
物联网技术学习指南 https://iot.mushuwei.cn/
物联网开源框架Thingsboard使用总结
https://www.weishadian.com/index.php/tag/thingsboard/page/5/
thingskit博客
ThingsBoard二次开发之源码分析1- 基础知识
源码分析：
ThingsBoard 源码分析 thingsboard源码解析 精尽thingsboard源码解析 https://github.com/blackstar-baba/how-2-use-thingsboard https://chenzhifu.xyz/categories/thingsboard IOT 平台：
http://iot.bctools.cn/ ThingsKit 分布式规则引擎系统，重构于开源IOT项目thingboard </description>
    </item>
    <item>
      <title>TBMQ测试和源码分析</title>
      <link>https://blog.chensoul.cc/posts/2024/04/28/thingsboard-tbmq-test/</link>
      <pubDate>Sun, 28 Apr 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/04/28/thingsboard-tbmq-test/</guid>
      <description>启动 TBMQ 程序，浏览器访问 http://localhost:8083，创建一个 Application，Credentials Type 为 BASIC，客户端 ID、用户名和密码均设置为 tbmq_app
使用 mosquitto 测试订阅消息
mosquitto_sub -d -q 1 -h localhost -p 1883 -t tbmq/demo/+ -i &amp;#39;tbmq_app&amp;#39; -u &amp;#39;tbmq_app&amp;#39; -P &amp;#39;tbmq_app&amp;#39; -c -v Debug 调试 MqttSessionHandler 类的 channelRead(ChannelHandlerContext ctx, Object msg) 方法
第一次连接，消息类型是 CONNECT
消息：
固定头：MqttFixedHeader[messageType=CONNECT, isDup=false, qosLevel=AT_MOST_ONCE, isRetain=false, remainingLength=40]
变量头：MqttConnectVariableHeader[name=MQTT, version=4, hasUserName=true, hasPassword=true, isWillRetain=false, isWillFlag=false, isCleanSession=false, keepAliveTimeSeconds=60]
负载：MqttConnectPayload[clientIdentifier=tbmq_app, willTopic=null, willMessage=null, userName=tbmq_app, password=[116, 98, 109, 113, 95, 97, 112, 112]]
address 为空，故从 ChannelHandlerContext 获取客户端地址，并将地址保持到客户端 Session 上下文 ClientSessionCtx
初始化 Session：获取 clientI、mqtt 版本，调用 ClientMqttActorManager 初始化 session：创建 clientActorRef，发送一个 SessionInitMsg 消息
调用 ClientMqttActorManager connect 方法，发送一个 MqttConnectMsg 消息
第二次连接，消息类型是 SUBSCRIBE
MqttSubscribeMessage[fixedHeader=MqttFixedHeader[messageType=SUBSCRIBE, isDup=false, qosLevel=AT_LEAST_ONCE, isRetain=false, remainingLength=16], variableHeader=MqttMessageIdAndPropertiesVariableHeader[messageId=1, properties=io.</description>
    </item>
    <item>
      <title>ThingsBoard TBMQ本地和通过Docker运行</title>
      <link>https://blog.chensoul.cc/posts/2024/04/17/thingsboard-tbmq-local-docker-run/</link>
      <pubDate>Wed, 17 Apr 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/04/17/thingsboard-tbmq-local-docker-run/</guid>
      <description>docker-compose 运行 参考：https://thingsboard.io/docs/mqtt-broker/install/cluster/docker-compose-setup/
下载源代码
git clone -b release-1.3.0 https://github.com/thingsboard/tbmq.git cd tbmq/docker 创建逻辑卷并执行安装程序
./scripts/docker-create-volumes.sh ./scripts/docker-install-tbmq.sh 运行服务
./scripts/docker-start-services.sh 浏览器访问：http://localhost:8083，用户名/密码：sysadmin@thingsboard.org / sysadmin
查看 HaProxy 日志，发现出现异常：Error: Specified qdisc kind is unknown. 。
目前，尚未找到解决办法，只能不使用 HaProxy 而是直接访问 tbmq1，修改 docker-compose.yml ，暴露容器端口 8083 到本地的 8083：
tbmq1: restart: always container_name: &amp;#34;${TBMQ_1_NAME}&amp;#34; image: &amp;#34;${DOCKER_REPO}/${DOCKER_NAME}:${TBMQ_VERSION}&amp;#34; ports: - &amp;#34;1883&amp;#34; - &amp;#34;8083:8083&amp;#34; #修改这里 - &amp;#34;8084&amp;#34; 然后，通过浏览器访问 浏览器访问：http://localhost:8081
源码编译并运行 安装好 JDK 17+ 和 Maven3.6.3+
下载源代码
git clone -b release-1.3.0 https://github.com/thingsboard/tbmq.git cd tbmq 编译代码
mvn clean install -DskipTests 通过 docker-compose 本地安装 postgres、kafka、redis
参考 docker 目录下的文件新建 docker-compose.postgres.yml 文件：
version: &amp;#39;3.0&amp;#39; services: postgres: restart: always image: postgres:15 ports: - &amp;#34;5432:5432&amp;#34; environment: POSTGRES_DB: thingsboard_mqtt_broker POSTGRES_PASSWORD: postgres volumes: - postgres-data:/var/lib/postgresql/data volumes: postgres-data: 新建 docker-compose.</description>
    </item>
    <item>
      <title>2024-02-20｜RateLimitAspect请求限流、调整spring-cloud-examples项目结构</title>
      <link>https://blog.chensoul.cc/posts/2024/02/20/til/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/02/20/til/</guid>
      <description>今天做了什么：
ChatGPT 编写一个 RateLimitAspect 类，实现基于用户的 get 查询请求的限流功能
@Aspect @Component public class RateLimitAspect { private final RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate; private final Logger logger = LoggerFactory.getLogger(RateLimitAspect.class); private final int maxRequests; // Maximum number of requests private final int timeWindow; // Time window in seconds @Autowired public RateLimitAspect(RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate) { this.redisTemplate = redisTemplate; this.maxRequests = 100; // Default maximum number of requests is 100 this.timeWindow = 60; // Default time window is 60 seconds } @Before(&amp;#34;@annotation(getMapping)&amp;#34;) public void applyRateLimit(JoinPoint joinPoint, GetMapping getMapping) { HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest(); if (request != null &amp;amp;&amp;amp; HttpMethod.GET.matches(request.getMethod())) { String username = request.getUserPrincipal().getName(); // Get the username if (username !</description>
    </item>
    <item>
      <title>2024-02-19｜foodie-cloud集成Sharding Sphere实现读写分离</title>
      <link>https://blog.chensoul.cc/posts/2024/02/19/til/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/02/19/til/</guid>
      <description>今天做了什么：
重构 foodie-cloud 项目 基于 docker 实现数据库配置主从复制，集成 Sharding Sphere 实现读写分离 </description>
    </item>
    <item>
      <title>2024-02-18｜NewRelice应用性能监控、6个Diagrams工具、foodie-food测试</title>
      <link>https://blog.chensoul.cc/posts/2024/02/18/til/</link>
      <pubDate>Sun, 18 Feb 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/02/18/til/</guid>
      <description>今天做了什么：
NewRelice：应用性能监控
https://www.cnblogs.com/caoweixiong/p/14798449.html Top 6 Tools to Turn Code into Beautiful Diagrams ：
Diagrams Go Diagrams Mermaid PlantUML ASCII diagrams，asciiflow &amp;amp; monodraw Markmap foodie-cloud 项目
测试 resilience4j 使用 bash 测试接口：test-em-all.sh 使用 docker 部署项目 </description>
    </item>
    <item>
      <title>2024-02-05｜Spring Cloud Config快速入门</title>
      <link>https://blog.chensoul.cc/posts/2024/02/05/til/</link>
      <pubDate>Mon, 05 Feb 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/02/05/til/</guid>
      <description>今天做了什么：
创建项目 spring-cloud-examples，测试 Spring Cloud Config 使用本地文件和 git 仓库作为配置中心 Spring Cloud Config 是一个基于http协议的远程配置实现方式。通过统一的配置管理服务器进行配置管理，客户端通过http协议主动的拉取服务的的配置信息，完成配置获取。
Spring Cloud Config 支持以下几种存储方式：
Git 仓库 本地文件 Vault JDBC 数据库 本文主要分享 Spring Cloud Config 使用本地文件和Git 仓库存储配置文件、配置文件加解密、集成 Spring Cloud Bus 等内容，源码在 github：spring-cloud-examples。
本地文件 服务端应用 1. 创建项目 首先，创建一个目录
mkdir spring-cloud-examples cd spring-cloud-examples 然后，创建 config 目录，并使用 spring cli 创建一个 maven 项目，项目名称 config-server-file
mkdir config cd config spring init \ --boot-version=3.2.2 \ --type=maven-project \ --java-version=8 \ --name=config-server-file \ --package-name=com.chensoul.springcloud \ --groupId=com.chensoul.springcloud \ --dependencies=cloud-config-server,actuator \ config-server-file ​	项目创建成功之后，将 spring-boot-starter-parent 版本改为 2.7.18，对应的将 spring-cloud.version 改为 2021.0.9。
2. 添加 @EnableConfigServer 注解 @EnableConfigServer @SpringBootApplication public class ConfigServerFileApplication { public static void main(final String[] args) { SpringApplication.run(ConfigServerFileApplication.class, args); } } 3.</description>
    </item>
    <item>
      <title>2024-02-04｜foodie-cloud集成Resilience4j</title>
      <link>https://blog.chensoul.cc/posts/2024/02/04/til/</link>
      <pubDate>Sun, 04 Feb 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/02/04/til/</guid>
      <description>今天做了什么：
重构 foodie-cloud 项目
集成 Resilience4j 修改 README.md 文档 阅读博客 https://blog.csdn.net/weixin_42189048
Enum + Validation 的个人最佳实践 demo 分享 </description>
    </item>
    <item>
      <title>2024-02-02｜foodie-cloud集成Spring Cloud Config和SpringDoc</title>
      <link>https://blog.chensoul.cc/posts/2024/02/02/til/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/02/02/til/</guid>
      <description>今天做了什么：
参考 《Microservices with Spring Boot 3 and Spring Cloud》，重构 foodie-cloud 项目 集成 Spring Cloud Config 使用文件保存配置文件
集成 SpringDoc OpenAPI 基于 Javadoc 生成 API 文档
todo：
集成 Resilience4j
集成 Zipkin
部署到 Kubernetes
集成 EFK
集成 Spring Cloud Bus</description>
    </item>
    <item>
      <title>2024-02-01｜使用 Spring Initializr 创建项目</title>
      <link>https://blog.chensoul.cc/posts/2024/02/01/til/</link>
      <pubDate>Thu, 01 Feb 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/02/01/til/</guid>
      <description>今天做了什么：
重构 foodie-cloud 项目，部署到 docker 容器 使用 Spring Initializr 创建项目 使用 Spring Initializr 创建项目 安装 spring cli
使用 brew 安装的 spring cli 版本是 3.x 版本
brew tap pivotal/tap brew install springboot 使用 sdkman 安装：
sdk install springboot 3.2.2 查看版本：
$ spring version Spring CLI v3.2.2 查看 spring cli 支持的命令
spring help 查看 init 命令说明：
spring help init 参考 spring init 命令：
spring init --list 可以看到支持的依赖
activemq actuator amqp artemis azure-active-directory azure-cosmos-db azure-keyvault azure-storage azure-support batch cache camel cloud-bus cloud-config-client cloud-config-server cloud-contract-stub-runner cloud-contract-verifier cloud-eureka cloud-eureka-server cloud-feign cloud-function cloud-gateway cloud-gateway-reactive cloud-gcp cloud-gcp-pubsub cloud-gcp-storage cloud-loadbalancer cloud-resilience4j cloud-starter cloud-starter-consul-config cloud-starter-consul-discovery cloud-starter-vault-config cloud-starter-zookeeper-config cloud-starter-zookeeper-discovery cloud-stream cloud-task codecentric-spring-boot-admin-client codecentric-spring-boot-admin-server configuration-processor data-cassandra data-cassandra-reactive data-couchbase data-couchbase-reactive data-elasticsearch data-jdbc data-jpa data-ldap data-mongodb data-mongodb-reactive data-neo4j data-r2dbc data-redis data-redis-reactive data-rest data-rest-explorer datadog db2 derby devtools dgs-codegen distributed-tracing docker-compose dynatrace flyway freemarker graphite graphql groovy-templates h2 hateoas hilla hsql influx integration jdbc jersey jooq kafka kafka-streams liquibase lombok mail mariadb modulith mustache mybatis mysql native new-relic oauth2-authorization-server oauth2-client oauth2-resource-server okta oracle picocli postgresql prometheus pulsar pulsar-reactive quartz restdocs rsocket scs-config-client scs-service-registry security sentry session solace spring-shell sqlserver testcontainers thymeleaf timefold-solver unboundid-ldap vaadin validation wavefront web web-services webflux websocket zipkin 支持的构建系统有：</description>
    </item>
    <item>
      <title>2024-01-31｜Redis事务</title>
      <link>https://blog.chensoul.cc/posts/2024/01/31/til/</link>
      <pubDate>Wed, 31 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/31/til/</guid>
      <description>今天做了什么：
下载 《Microservices with Spring Boot 3 and Spring Cloud》，源码在 github
Redis 事务
Redis事务 原理 Redis 是一个内存数据库，它支持事务操作。Redis 事务是一系列的命令操作，这些命令会被一起执行，要么全部成功，要么全部失败。在事务执行期间，其他客户端提交的命令不会被插入到事务中，确保事务的原子性。
Redis 事务使用以下命令进行管理：
MULTI：标记事务的开始。 EXEC：执行事务中的所有命令。 DISCARD：取消事务，放弃之前的所有命令。 WATCH：监视一个或多个键，如果在事务执行之前有其他客户端对这些键进行了修改，则事务会被中止。 UNWATCH：取消对所有键的监视。 在执行事务之前，先使用 MULTI 命令标记事务的开始，然后按顺序执行多个命令。在所有命令都被添加到事务队列之后，使用 EXEC 命令来执行事务中的所有命令。如果执行成功，事务中的所有命令会被一起执行，然后返回结果。如果在执行事务期间发生错误，事务会被中止，所有的修改都会被回滚。
示例 以下是一个使用 Redis 事务的示例：
#开启事务 MULTI SET key1 &amp;#34;value1&amp;#34; SET key2 &amp;#34;value2&amp;#34; GET key1 GET key2 #执行事务 EXEC # 取消事务 discard 上述事务包含了两个 SET 命令和两个 GET 命令。在 EXEC 命令执行之后，将会依次执行这些命令，并返回相应的结果。
需要注意的是，Redis 的事务是乐观锁，并不会在执行期间对键进行加锁。因此，在使用事务时要注意并发操作可能引发的竞态条件。
Redis对于命令执行错误处理，有两种解决方式：
语法错误（编译） 执行错误（运行） 语法错误：执行命令的语法不正确。
#开启事务 multi #命令 set name zhangsan set age seterror sex male #执行事务 exec #获取正确指令数据 get name 此时整个事务队列中，存在一条正确指令，两条语法错误指令， 当执行exec后，会直接返回错误，正确的命令也不会执行。
执行错误：命令在运行过程中出现错误。
#开启事务 multi #命令 set lesson java rpush lesson eureka feign nacos set lesson redis #执行事务 exec #获取数据 get lesson 通过上面事务执行可以看到，语法本身是没有问题的，所以运行之前redis无法发现错误，但是在执行时出现了错误，因此只会错误的命令不执行， 而正确的命令仍然能够正常执行。</description>
    </item>
    <item>
      <title>2024-01-30｜Mybatis plus和Jackson配置</title>
      <link>https://blog.chensoul.cc/posts/2024/01/30/til/</link>
      <pubDate>Tue, 30 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/30/til/</guid>
      <description>今天做了什么：
重构 foodie-cloud 项目 参考 DDD 组织包结构 Mybatis plus 配置主键生成策略和数据审计功能 Jackson 配置日期序列化 重构 foodie-cloud 项目 Mybatis plus 配置主键生成策略 实体类中可以不用添加@TableId，减少实体类对 mybatis-plus-annotation的依赖
public class BaseEntity implements Serializable { private Long id; private LocalDateTime createTime; private LocalDateTime updateTime; } 改为使用配置：
mybatis-plus: global-config: db-config: id-type: ASSIGN_ID Mybatis plus 配置数据审计功能 添加下面的类
@Component @Slf4j public class CustomMetaObjecthandler implements MetaObjectHandler { protected static void fillValIfNullByName( final String fieldName,final Object fieldVal, final MetaObject metaObject,final boolean isCover) { // 1. 没有 set 方法 if (!metaObject.hasSetter(fieldName)) { return; } // 2. 如果用户有手动设置的值 if (metaObject.getValue(fieldName) != null &amp;amp;&amp;amp; !isCover) { return; } // 3. field 类型相同时设置 final Class&amp;lt;?&amp;gt; getterType = metaObject.getGetterType(fieldName); if (ClassUtils.</description>
    </item>
    <item>
      <title>2024-01-29｜C4架构模型</title>
      <link>https://blog.chensoul.cc/posts/2024/01/29/til/</link>
      <pubDate>Mon, 29 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/29/til/</guid>
      <description>今天做了什么：
重构 foodie-cloud 项目
C4 架构模型
C4架构模型 C4 架构模型是一种简洁且易于理解的软件架构描述方法，由 Simon Brown 提出。C4 表示 Context, Containers, Components, and Code，这四个层级帮助我们组织和描述软件系统的不同抽象层次。
以下是 C4 架构模型的四个层级：
Context（上下文）：这是最高级别的层级，用于描述系统的整体环境和目标。在这个层级，我们关注系统与外部实体（如用户、其他系统、硬件设备等）的交互。可以使用上下文图（Context Diagram）来展示系统和相关实体之间的关系。 Containers（容器）：这个层级用于描述系统内部的主要逻辑组件，通常是一个独立的运行时进程或线程。容器可以是 Web 服务器、数据库、消息队列、桌面应用等，它们在系统中承担着不同的角色和责任。通过容器图（Container Diagram），我们可以展示系统中的容器及其之间的关系。 Components（组件）：这个层级用于进一步划分容器，描述容器内部的组织结构和组件之间的关系。组件是系统的构建块，代表了较细粒度的功能单元或模块。可以使用组件图（Component Diagram）来展示组件及其之间的关系。 Code（代码）：这个层级用于描述组件内部的代码结构和实现细节。在这个层级，我们可以使用类图、包图等来展示代码级别的结构和关系。 C4 架构模型通过层级化的方式，帮助我们从高级别到低级别逐步展示和描述软件系统的不同抽象层次，使得架构描述更加清晰和易于理解。它适用于不同规模和复杂度的软件系统，并且可以方便地与其他架构描述方法（如 UML）结合使用。
参考资料：
用于软件架构的C4模型 C4 模型- 可视化架构设计- lex-wu https://c4model.com/ </description>
    </item>
    <item>
      <title>2024-01-26｜foodie-cloud集成Feign</title>
      <link>https://blog.chensoul.cc/posts/2024/01/26/til/</link>
      <pubDate>Fri, 26 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/26/til/</guid>
      <description>今天做了什么：
重构 foodie-cloud 项目
集成 Feign 替换 RestTemplate 认证服务负责用户的维护和登录 整理 Feign、Eureka、Seata、Sentinel 相关文档
eureka分区的深入讲解 Spring Cloud Eureka详解 </description>
    </item>
    <item>
      <title>2024-01-25｜Idea和zsh快捷键</title>
      <link>https://blog.chensoul.cc/posts/2024/01/25/til/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/25/til/</guid>
      <description>今天做了什么：
整理 Idea 快捷键 整理 zsh 中定义的常用的快捷键 Idea 快捷键 使用快捷键 command +1 打开 Project 窗口
输入 control + R 可以运行 Java 代码
上下文 在 for 方法上，输入 option + enter，可以调出上下文，替换 for 表达式
在字符串上面输入 option + enter，可以调出上下文。
在字符串上面或者双击选中，然后双击两次 ⇧ ，打开 Search Everywhere 弹窗，然后输入 case ，选择 Toggle Case 将 AVERAGE 变为小写。
在没有使用的方法参数 redundant 上，输入 option + enter，可以选择 Safe delete &#39;redunant&#39; 删除该参数
在三目运算，输入 option + enter，可以选择 Negate &#39;?:&#39;
搜索 查找最近文件：comand + E
输入 ⇧ + command + A 可以打开 Find Action 窗口。
双击两次 ⇧ 可以打开 Search Everywhere 窗口。输入关键字，可以搜索 java 类。
如果想搜索Java类，则可以输入 command + O，并可以选择在 All Places 搜索。
如果想搜索方法或者变量名称，则可以使用 option + command + O
自动补全 command + ↑ + enter 补全方法体、if、while、for 、switch 后面括号</description>
    </item>
    <item>
      <title>2024-01-24｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2024/01/24/til/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/24/til/</guid>
      <description>今天做了什么：
观看 B 站视频《鸟宝的春天11_security编码实现》
参考视频中示例使用 SecurityFilterChain DSL 语法实现用户名密码登录功能。
扩展 WebAuthenticationDetails ，修改客户端 IP 获取方式，并记录服务端 IP。
public class CustomWebAuthenticationDetails extends WebAuthenticationDetails { private static final long serialVersionUID = 4441359628463408329L; @Getter private final String serverAddress; public CustomWebAuthenticationDetails(final HttpServletRequest request, final String serverAddress) { super(HttpRequestUtils.getClientIp(request), extractSessionId(request)); this.serverAddress = serverAddress; } protected static String extractSessionId(final HttpServletRequest request) { final HttpSession session = request.getSession(false); return (session != null) ? session.getId() : null; } } 获取客户端 IP 使用了 HttpRequestUtils 类，实际上就是从 Request 的 header 中获取 IP。
private static final List&amp;lt;String&amp;gt; CLIENT_IP_HEADER_NAMES = Arrays.asList(&amp;#34;X-Forwarded-For&amp;#34;, &amp;#34;X-Real-IP&amp;#34;, &amp;#34;Proxy-Client-IP&amp;#34;, &amp;#34;WL-Proxy-Client-IP&amp;#34;, &amp;#34;HTTP_CLIENT_IP&amp;#34;, &amp;#34;HTTP_X_FORWARDED_FOR&amp;#34;); public static String getClientIp(HttpServletRequest request, String... otherHeaderNames) { if (request == null) { return null; } if (ArrayUtils.</description>
    </item>
    <item>
      <title>2024-01-23｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2024/01/23/til/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/23/til/</guid>
      <description>今天做了什么：
重构 foodie-cloud 项目，修改模块名称、表名及字段名。
修改 spring-security-oauth2-legacy-examples ，测试资源服务器通过 jwt、jwk、远程三种方式获取用户信息；测试 sso 单点登录（进行中）。</description>
    </item>
    <item>
      <title>2024-01-22｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2024/01/22/til/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/22/til/</guid>
      <description>今天做了什么：
修改瑞吉外卖项目 reggie：
去掉 .mvn 相关文件，去掉 github action 中用到 .mvn 的 workflow 参考 DDD 修改包结构 配置 Redis 持久化
chensoul-parent 发布 v1.0.40 ，升级 maven 插件版本，去掉 sortpom、impsort 插件
vps 禁用防火墙
观看慕课网视频《高级Redis进阶课 解决Redis实际问题+掌握Redis6.x特性》，网盘地址：https://www.aliyundrive.com/s/DqXP972AJnk。注意：其中没有项目资料，如有需要，可以联系我。
重构 《高级Redis进阶课 解决Redis实际问题+掌握Redis6.x特性》 资料中的 food-social-contact-parent 源代码，重命名为 foodie-cloud 并提交到 Github 仓库 foodie-cloud （原来的 foodie-cloud 源码已删除）。</description>
    </item>
    <item>
      <title>2024-01-18｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2024/01/18/til/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/18/til/</guid>
      <description>今天做了什么：
修改瑞吉外卖项目 reggie：
修改数据源配置，使用 HikariCP 数据源 修改接口返回字段和前端文件，code=0 表示成功 添加 mysql、redis 安装文档 添加 openresty lua 脚本实现 redis 缓存 基于 springboot 使用 sharding-jdbc 测试读写分离、分库分表。代码在：https://github.com/chensoul/sharding-examples
测试 RabbitMQ 生产、消费，代码在：https://github.com/chensoul/rabbitmq-examples
观看 B 站视频《【IT老齐455】SpringBoot、Caffine、Redis本地远程二级缓存》，视频中的代码在：second-cache</description>
    </item>
    <item>
      <title>2024-01-17｜MySQL 主从复制、ShardingJDBC实现读写分离、集成Springdoc&#43;Javadoc</title>
      <link>https://blog.chensoul.cc/posts/2024/01/17/til/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/17/til/</guid>
      <description>今天做了什么：
观看《2022年黑马程序员新版java课程》中 MySQL 主从复制和读写分离相关视频，使用 Docker 搭建 MySQL 主从复制环境。 foodie-cloud 项目实现读写分离并集成 Springdoc Docker 搭建 MySQL 主从复制环境 参考文章 ：基于 Docker 的 MySQL 主从复制搭建及原理（真正弄懂）
先创建两个容器：
version: &amp;#39;3.8&amp;#39; services: mysql-master: image: mysql:8 restart: always env_file: - .env ports: - &amp;#34;3307:3306&amp;#34; environment: - TZ=Asia/Shanghai - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} command: --default-authentication-plugin=mysql_native_password --explicit_defaults_for_timestamp=true --lower_case_table_names=1 --tls-version=&amp;#39;&amp;#39; --log-bin=mysql-bin --server-id=1 healthcheck: test: &amp;#34;/usr/bin/mysql --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} -e &amp;#39;SHOW DATABASES;&amp;#39;&amp;#34; interval: 5s timeout: 2s retries: 10 mysql-slave: image: mysql:8 restart: always env_file: - .env ports: - &amp;#34;3308:3306&amp;#34; environment: - TZ=Asia/Shanghai - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} command: --default-authentication-plugin=mysql_native_password --explicit_defaults_for_timestamp=true --lower_case_table_names=1 --tls-version=&amp;#39;&amp;#39; --log-bin=mysql-bin --server-id=2 healthcheck: test: &amp;#34;/usr/bin/mysql --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} -e &amp;#39;SHOW DATABASES;&amp;#39;&amp;#34; interval: 5s timeout: 2s retries: 10 .</description>
    </item>
    <item>
      <title>2024-01-16｜Redis安装</title>
      <link>https://blog.chensoul.cc/posts/2024/01/16/til/</link>
      <pubDate>Tue, 16 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/16/til/</guid>
      <description>今天做了什么：
1、spring-cloud-examples 添加分布式锁、rabbitmq、kafka、分库分表等示例代码
2、foodie-cloud 添加登录部分代码
3、整理 Redis 安装文档
Redis 安装 Centos7 通过 yum 安装 在 CentOS 7 上通过 yum 安装 Redis，可以按照以下步骤进行操作：
更新系统软件包：
sudo yum update 安装 Redis：
sudo yum install redis 可以看到默认安装的 redis 版本是 3.2.12-2.el7
如果需要安装 redis 7，这需要下载 yum 源：
sudo yum install epel-release sudo yum -y install http://rpms.remirepo.net/enterprise/remi-release-7.rpm 然后，在指定源进行安装：
yum --enablerepo=remi install redis 启动 Redis 服务：
sudo systemctl start redis 配置 Redis 开机自启动：
sudo systemctl enable redis 修改配置文件 /etc/redis.conf
修改 bind 和 requirepass
bind 0.0.0.0 requirepass 123456 然后重启 redis：
sudo systemctl restart redis 运行 redis-cli
redis-cli 127.0.0.1:6379&amp;gt; auth 123456 OK Centos7 通过 snap 安装 安装 redis
sudo snap install redis 查看 snap 安装的包：</description>
    </item>
    <item>
      <title>2024-01-15｜Nginx配置结构与指令语法</title>
      <link>https://blog.chensoul.cc/posts/2024/01/15/til/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/15/til/</guid>
      <description>今天做了什么：
1、看 JHipster 源码发现这两个类库
jackson-datatypes-collections 支持 hppc 数据类型。hppc：Java 的高性能原始集合，HPPC 为所有 Java 基元类型提供典型集合的模板生成实现，例如列表、集合和映射。HPPC 背后的主要驱动力是针对最高性能和内存效率的优化。
Handy-URI-Templates A Java URI Template processor implementing RFC6570
2、整理文档《Nginx进程模型》、《Nginx配置结构与指令语法》
Nginx配置结构与指令语法 Nginx的配置文件使用一种块结构和指令语法来定义服务器的行为和属性。以下是Nginx配置文件的基本结构和指令语法：
基本结构和指令语法 配置文件结构： Nginx配置文件由多个块（Block）组成，每个块用花括号 {} 括起来。 主要的配置块是 http 块，用于全局HTTP配置。 在 http 块内部，可以包含多个 server 块，每个 server 块用于配置一个虚拟主机。 在 server 块内部，可以包含多个其他块（如 location 块），用于配置请求的处理规则。 指令语法： 指令是配置文件中的关键字，用于指定服务器的行为和属性。 指令通常由指令名称和参数组成，中间使用空格分隔。 指令以分号 ; 结束。 有些指令可以包含块结构，以定义更复杂的配置规则。 以下是一个示例的Nginx配置文件的结构和指令语法：
# 全局配置块 http { # 全局指令 directive_name parameter; # 服务器块 server { # 服务器指令 directive_name parameter; # 位置块 location / { # 位置指令 directive_name parameter; } } } 在上面的示例中，http 是全局配置块，server 是服务器块，location 是位置块。每个块内部可以包含相应的指令。
注意事项：
指令名称对大小写不敏感，但通常以小写字母表示。 多个指令可以在同一行上用分号 ; 分隔。 注释以 # 开头，并在行的任何位置添加。 可以使用变量和预定义变量来设置指令参数。 nginx.conf 配置 user：设置Nginx工作进程的运行用户和用户组。默认情况下，Nginx以nobody用户运行。 语法：user username [groupname] 例如：user nginx; 或 user nginx nginx; worker_processes：设置Nginx工作进程的数量。可以是一个整数值或auto。通常，建议将其设置为服务器可用CPU核心数量的一倍或两倍，以充分利用服务器的性能。 语法：worker_processes number | auto error_log：用于设置错误日志文件的路径和级别 语法：error_log file [level]; file：指定错误日志文件的路径。 level：可选参数，指定记录的错误级别。 常见的级别包括 emerg、alert、crit、error、warn、notice、info 和 debug。 默认情况下，错误日志的级别为 error。 可以使用 syslog:facility.</description>
    </item>
    <item>
      <title>2024-01-11｜Session和Cookie的区别、单点登录和三方登录的区别</title>
      <link>https://blog.chensoul.cc/posts/2024/01/11/til/</link>
      <pubDate>Thu, 11 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/11/til/</guid>
      <description>今天做了什么：
1、观看 B 站 《SSO单点登录》视频
2、参考 https://github.com/jOOQ/jOOL 和 https://github.com/vavr-io/vavr ，将 CheckedXXX 的类加入公司项目中。
涉及的类有：Async.java、Blocking.java、CheckedBiConsumer.java、CheckedBiFunction.java、CheckedBiPredicate.java、CheckedComparator.java、CheckedConsumer.java、CheckedFunction.java、CheckedPredicate.java、CheckedRunnable.java、CheckedSupplier.java、FunctionUtils.java、OnceConsumer.java、SameExecutorCompletionStage.java、UncheckedException.java，并添加单元测试类。
示例代码：
@FunctionalInterface public interface CheckedConsumer&amp;lt;T&amp;gt; { void accept(T t) throws Throwable; default CheckedConsumer&amp;lt;T&amp;gt; andThen(CheckedConsumer&amp;lt;? super T&amp;gt; after) { Objects.requireNonNull(after, &amp;#34;after is null&amp;#34;); return (T t) -&amp;gt; { accept(t); after.accept(t); }; } static &amp;lt;T&amp;gt; Consumer&amp;lt;T&amp;gt; sneaky(CheckedConsumer&amp;lt;T&amp;gt; consumer) { return unchecked(consumer, RETHROW_ALL); } static &amp;lt;T&amp;gt; Consumer&amp;lt;T&amp;gt; unchecked(CheckedConsumer&amp;lt;T&amp;gt; consumer) { return unchecked(consumer, THROWABLE_TO_RUNTIME_EXCEPTION); } static &amp;lt;T&amp;gt; Consumer&amp;lt;T&amp;gt; unchecked(CheckedConsumer&amp;lt;T&amp;gt; consumer, Consumer&amp;lt;Throwable&amp;gt; handler) { return t -&amp;gt; { try { consumer.accept(t); } catch (Throwable e) { handler.accept(e); throw new IllegalStateException(&amp;#34;Exception handler must throw a RuntimeException&amp;#34;, e); } }; } } 3、重构公司微服务框架
4、明天待办事项：</description>
    </item>
    <item>
      <title>2024-01-10｜ Java审计框架inspektr</title>
      <link>https://blog.chensoul.cc/posts/2024/01/10/til/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/10/til/</guid>
      <description>今天做了什么：
1、Java Lambda 增强 https://github.com/jOOQ/jOOL 和 https://github.com/vavr-io/vavr ，jOOL 在 jdk8 下存在编译错误，计划，整合这两个项目，创建一个新的项目，只引入自己需要的一些类。
2、https://www.pac4j.org/ 一个安全框架
3、https://github.com/apereo/inspektr 一个轻量级的 Java 审计框架。这个是在看 CAS 源码的过程中，发现的。
在 CAS 的源码中，有一些比较不错的代码，引入到自己的项目中，另外，打算仿照这个 inspektr 框架，重写公司微服务项目中的日志记录模块。
4、分享一个安全相关的 wiki 网站：https://wukong-doc.redhtc.com/security
总结：
待办事项：
重写微服务日志记录模块 写一个 Lambda 类库 重构公司微服务框架 继续重构 foodie-cloud 支持单点登录 支持全文检索 集成 Spring Security OAuth2 </description>
    </item>
    <item>
      <title>2024-01-09｜单点登录</title>
      <link>https://blog.chensoul.cc/posts/2024/01/09/til/</link>
      <pubDate>Tue, 09 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/09/til/</guid>
      <description>今天做了什么：
使用 renovate 监控第三方依赖更新 ，renovate 貌似需要付费，放弃。 spring-security-oauth2-samples 示例工程重命名模块和包名，代码见 spring-security-oauth2-boot 实现单点登录并测试 实现单点登录并测试 实现单点登录（Single Sign-On，SSO）可以采用多种思路和技术。下面是几种常见的实现思路：
基于令牌（Token）的SSO：用户在登录时，认证服务器颁发一个令牌给用户，该令牌包含用户的身份信息。用户在访问其他应用时，将令牌发送给应用服务器进行验证，从而实现单点登录。 基于会话（Session）的SSO：用户在登录时，认证服务器创建一个会话，并将会话ID发送给用户的浏览器。用户在访问其他应用时，浏览器将会话ID发送给应用服务器进行验证，从而实现单点登录。 基于身份提供者（Identity Provider，IdP）的SSO：使用一个独立的身份提供者（如OpenID Connect、SAML等），用户在登录时将身份验证委托给身份提供者。身份提供者负责验证用户身份，并向应用程序提供令牌或身份凭证，实现单点登录。 基于代理（Proxy）的SSO：通过在前端部署反向代理服务器或负载均衡器，将用户的登录状态存储在代理服务器中。用户访问其他应用时，代理服务器将用户的身份信息传递给应用服务器，从而实现单点登录。 基于统一认证系统（CAS）的SSO：使用CAS作为中央认证服务器，用户在登录时通过CAS进行认证，并获取一个票据（ticket）。用户访问其他应用时，应用服务器将票据发送给CAS进行验证，从而实现单点登录。 这些思路和技术并非互斥，可以根据具体需求和系统架构的复杂性选择适合的实现方式。此外，还可以使用现有的SSO解决方案和身份管理平台，如Auth0、Okta、Keycloak等，简化SSO的实现过程。
基于 OAuth2 单点登录 在 spring-security-oauth2-legacy-examples 添加单点登录 github 示例。参考了 oauth2-sample-java-webapp
CAS 实现单点登录 CAS（Central Authentication Service）是一套完整的统一身份认证解决方案，完整资料可查阅其 官方网站。CAS包括对应的协议(CAS Protocol)、协议的实现(CAS Server)和与CAS服务交互的软件包(CAS Client)。
CAS Client接入示例：https://github.com/apereo?q=client
CAS 交互时序图：https://apereo.github.io/cas/7.0.x/images/cas_flow_diagram.png
参考 SpringBoot+CAS整合服务端和客户端实现SSO单点登录与登出快速入门上手 这篇文章，代码在 这里。</description>
    </item>
    <item>
      <title>2024-01-08｜VPS 迁移</title>
      <link>https://blog.chensoul.cc/posts/2024/01/08/til/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/08/til/</guid>
      <description>今天做了什么：
VPS 迁移
继续重构 foodie-cloud
参考 https://github.com/mybatis/parent/ 重构 chensoul-parent
修改了 maven 插件 添加了 Github Actions VPS 迁移 迁移步骤：
旧的 VPS 上备份数据库、nginx 配置文件、docker-compose 文件 新的 VPS 上安装 docker、docker-compose、nginx 新的 VPS 上恢复数据库，配置 nginx 修改 DNS 解析 </description>
    </item>
    <item>
      <title>2024-01-05｜Nginx、正向代理和反向代理</title>
      <link>https://blog.chensoul.cc/posts/2024/01/05/til/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/05/til/</guid>
      <description>今天做了什么：
Nginx、正向代理和反向代理 Nginx 介绍 Nginx（发音为&amp;quot;engine-x&amp;quot;）是一个高性能的开源Web服务器和反向代理服务器。它专注于高并发、低内存消耗和高度模块化的架构，因此被广泛用于构建性能出色的网站、应用程序和服务。
以下是一些关于 Nginx 的关键特点：
高性能：Nginx 的设计目标之一是在高并发情况下提供卓越的性能。它使用异步、事件驱动的架构来处理请求，有效地管理系统资源，提供快速响应和高吞吐量。 高度可定制化：Nginx 的模块化架构使其高度可定制。它支持许多第三方模块和插件，可以根据具体需求进行扩展和定制。这使得开发人员可以根据自己的要求添加额外的功能和扩展 Nginx 的能力。 轻量级和低内存消耗：Nginx 是一个轻量级的服务器，具有低内存消耗。这使得它能够在资源受限的环境中高效运行，并处理大量的并发连接。 简单的配置和易于使用：Nginx 的配置文件采用简单的语法，易于理解和修改。它提供了清晰的文档和丰富的示例，使得用户可以快速上手并进行必要的配置。 功能：
反向代理和负载均衡：Nginx 可以作为反向代理服务器，将客户端请求转发到后端服务器。它还支持负载均衡，可以将流量分配到多个后端服务器，提高系统的可靠性和性能。 静态文件服务：Nginx 可以快速、可靠地提供静态文件，减轻后端应用程序的负担。它可以通过高效的文件传输和缓存机制提供静态内容，提高网站的响应速度。 SSL/TLS 加密：Nginx 支持 SSL/TLS 加密，可以安全地传输数据。它提供强大的加密功能和配置选项，以保护网站和应用程序的安全性。 动态内容支持：尽管 Nginx 主要用于处理静态内容，但它也可以与后端应用程序（如 PHP、Python、Node.js 等）集成，以处理动态生成的内容。 HTTP/2 和 HTTP/3 支持：Nginx 支持最新的 HTTP/2 和 HTTP/3 协议，这些协议提供更快的数据传输和更低的延迟，改善用户体验。 高度可扩展：Nginx 的模块化架构使得它可以轻松地扩展和定制。它支持各种第三方模块和插件，可以满足不同场景和需求的要求。 正向代理和反向代理 正向代理 正向代理（Forward Proxy）是一种代理服务器的使用方式，它代表客户端向其他服务器发送请求。当客户端想要访问互联网上的资源时，它首先发送请求到正向代理服务器，然后由代理服务器代表客户端向目标服务器发起请求，获取响应并将其返回给客户端。
正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。
正向代理一般是在客户端设置代理服务器，通过代理服务器转发请求，最终访问到目标服务器。
以下是正向代理的主要特点和用途：
隐藏客户端身份：正向代理可以隐藏客户端的真实IP地址和身份，保护客户端的隐私和安全。目标服务器只能看到正向代理服务器的IP地址和请求，无法直接识别和追踪客户端。 访问控制和过滤：正向代理可以实施访问控制和过滤策略，限制客户端对特定资源的访问。它可以用于实施访问权限、URL过滤、内容过滤等，以便控制和管理客户端对互联网资源的访问。 缓存和加速：正向代理服务器可以缓存经常请求的资源，以提高访问速度并减轻目标服务器的负载。当多个客户端请求相同的资源时，代理服务器可以直接提供缓存的副本，而无需每次都向目标服务器发送请求。 对抗访问限制：在某些情况下，客户端可能无法直接访问某些资源，例如由于地理位置限制或网络防火墙的阻塞。通过使用正向代理，客户端可以通过代理服务器来访问被限制的资源，代理服务器充当中间人来获取资源并传递给客户端。 匿名上网：正向代理可以为用户提供匿名上网的功能，隐藏用户的真实身份和位置信息。这对于保护用户隐私、绕过地域限制和访问受限资源等情况非常有用。 总而言之，正向代理充当客户端和目标服务器之间的中间人，代表客户端发送请求并获取响应。它可以隐藏客户端身份、实施访问控制、提供缓存和加速等功能，为用户提供更安全和更灵活的访问互联网的方式。
反向代理 反向代理（Reverse Proxy）服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源，反向代理服务器负责将请求转发给目标服务器。用户不需要知道目标服务器的地址，也无须在用户端作任何设定，对于用户来说，访问反向代理服务器是完全无感知的。
以下是反向代理的主要特点和用途：
负载均衡：反向代理可以作为负载均衡器，将客户端请求分发给多个后端服务器，以实现负载均衡。它可以根据服务器的负载情况、响应时间等指标动态地决定将请求发送到哪个后端服务器，以确保请求被合理地分散处理。 高可用性和故障恢复：通过反向代理，可以配置多个后端服务器作为冗余的备份。如果某个后端服务器出现故障或不可用，反向代理可以自动将请求转发到其他正常工作的后端服务器，以确保服务的可用性。 SSL 加密和安全性：反向代理可以与客户端之间建立安全的 SSL/TLS 连接，提供加密和身份验证功能。这样可以保护客户端与反向代理之间的通信，增强数据的安全性。 缓存和加速：反向代理可以缓存后端服务器返回的静态资源，如图片、CSS、JavaScript 文件等。当客户端请求这些资源时，反向代理可以直接提供缓存的副本，减轻后端服务器的负载并提高响应速度。 提供统一入口：反向代理可以将多个后端服务器提供的不同服务（如Web应用、API服务等）通过统一的入口点进行访问。这样客户端只需与反向代理通信，并由反向代理根据请求的路径将其转发到适当的后端服务器。 总结起来，反向代理充当了客户端和后端服务器之间的中间人，负责接收客户端的请求并将其转发给后端服务器。它可以实现负载均衡、提供高可用性、增加安全性、缓存和加速等功能，为客户端提供更高效、安全和可靠的访问体验。
总结 正向代理：客户端请求目标服务器，请求会先经过代理服务器，然后再转发请求到目标服务器，获得内容后最后再响应给客户端。 反向代理：用户请求目标服务器，由代理服务器决定访问哪个 IP。 转发代理是位于用户设备和互联网之间的服务器。
正向代理通常用于：
保护客户端 避免浏览限制 阻止访问某些内容 反向代理是一种服务器，它接受客户端的请求，将请求转发到 Web 服务器，并将结果返回给客户端，就好像代理服务器已经处理了请求一样。
反向代理适用于：
保护服务器 负载均衡 缓存静态内容 加密和解密 SSL 通信 </description>
    </item>
    <item>
      <title>2024-01-04｜GitHub Actions</title>
      <link>https://blog.chensoul.cc/posts/2024/01/04/til/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/04/til/</guid>
      <description>今天做了什么：
修改个人联系方式 注销亚马逊账号 利用GitHub Actions自动优雅地为项目构建Releases 利用GitHub Actions自动构建项目的docker镜像并发布到DockerHub 修改个人联系方式 使用 ichensoul 注册了新的 Gmail、163 邮箱，并将各种网站绑定的邮箱修改到新的 gmail 邮箱。自此，gmail、github、推特、微信、163 的账号都保持为一致，都是 ichensoul。
以下是 github 上我的个人联系方式。
健康，爱情和使命，按照这个顺序，其它的都不重要。 &amp;mdash;&amp;mdash; 纳瓦尔
我是 ChenSoul，一个 Java 软件开发工程师，目前工作在武汉。
热爱编程，喜欢跑步。读书、健身、定投、帮朋友、陪家人，做一个长期主义者。
网站 博客：https://blog.chensoul.cc/ 跑步：https://run.chensoul.cc/ Memos：https://memos.chensoul.cc/ 找到我 微信：@ichensoul 邮箱：ichensoul@gmail.com Github：https://github.com/chensoul、https://github.com/ichensoul Twitter：https://twitter.com/ichensoul Telegram频道：https://t.me/chensouls 注销亚马逊账号 缘由是，之前总是收到亚马逊的付款账单（每个月 0.5 美元，有时候1 美元），故元旦放假的时候登陆了亚马逊账号查找付费原因。找了半天没有找到是哪里产生的费用，就一怒之下把在亚马逊注册的域名（chensoul.com，一年 12 美元，一次性付费了 5 年）删除了。
这几天发现本博客无法访问，于是提工单询问是否可以恢复域名。得到的回复是必须支付 66 美元，才能恢复一年。对此，我肯定无法接受。于是，决定注销亚马逊，在其他平台重新注册一个域名。
今天在 CF 上注册了一个新的域名 chensoul.cc，一年 8 美元，一次性付费 5 年。在重新设置 DNS，修改 VPS 上的相关服务的域名为新域名之后，博客恢复正常。
利用GitHub Actions自动优雅地为项目构建Releases 参考 利用GitHub Actions自动优雅地为项目构建Releases 为 github 上的项目 https://github.com/chensoul/chensoul-parent 添加一个机器人字段构建 Release。
使用方法：
1、参考 官方文档，在仓库里面配置一个 GitHub Action ，例如：.github/workflows/release-drafter.yml
# https://github.com/release-drafter/release-drafter name: Release Drafter on: push: branches: - main pull_request: types: [opened, reopened, synchronize] permissions: contents: read jobs: update_release_draft: permissions: contents: write pull-requests: write runs-on: ubuntu-latest steps: - uses: release-drafter/release-drafter@v6 env: GITHUB_TOKEN: ${{ secrets.</description>
    </item>
    <item>
      <title>2024-01-03｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2024/01/03/til/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/03/til/</guid>
      <description>今天做了什么：
idworker-client ，一个开源的 ID 生成器，适合在单机使用 github 上创建了一个使用 spring cloud netflix 相关组件的微服务项目 spring-cloud-examples 重构了狂野架构师课程中的微服务版本的源码 foodie-cloud 重构慕课网 Java架构师-技术专家 课程中的 源码，我做了一些改动：
升级 Spring Boot 和 Spring Cloud 版本 去掉 tk-mybatis 改为使用 mybatis-plus 重构模块和部分代码 重构后的源码地址：https://github.com/chensoul/foodie-cloud
后续计划：
docker 容器编排 k8s 容器编排 集成 Spring Security OAuth2 集成 Spring Cloud alibaba 开发环境和开源项目版本 软件版本：
组件 用途 版本号 Redis 缓存组件 5.0.4 RabbitMQ 消息中间件 3.7.15 Kafka 消息中间件 2.2.0 Lua 限流脚本 5.3.5 MySQL 数据库 5.7 IDEA 开发环境 版本随意 Java 编译运行项目 1.8以上（推荐8u161以后的版本，否则要装JCE插件） Maven 依赖管理 3.0.4以上 Maven 依赖版本：
组件 版本号 Spring Cloud 2021.0.9 Spring Boot 2.7.18 Mybatis Plus 3.5.5 技术选型 Spring Cloud每个业务领域都有多个可供选择的组件，这里也列出了微服务章节中将要用到的组件+中间件的技术选型，这也是当前主流的选型。
内容 技术选型 服务治理 Eureka 负载均衡 Ribbon 服务间调用 Feign 服务容错 Hystrix + Turbine + Dashboard 配置管理 Config + Github 消息总线 Bus + RabbitMQ 服务网关 Gateway 调用链追踪 Sleuth + Zipkin + ELK 消息驱动 Stream + RabbitMQ 流控 Sentinel 基于RPC的服务治理（不集成到电商项目） Dubbo + Admin Portal 默认端口 内容 端口 Eureka 20000 Turbine 20001 Hystrix-Dashboard 20002 Config-Server 20003 Gateway 20004 Zipkin 9411 ELK镜像-ES 9200 ELK镜像-Logstash 5044 ELK镜像-Kibana 5601 redis（单机模式） 6379 rabbitmq（单机模式） 5672 mariadb/mysql（单机模式） 3306 商品微服务 10001 用户微服务 10002 订单微服务 10003 购物车微服务 10004 权限微服务 10006 主搜微服务 同学们自己实现 支付服务 没变，但回调地址要改一下 启动方式 可以在IDEA里启动，也可以使用Maven编译后在命令行窗口启动，命令行启动方式需要在maven编译好项目之后，cd到对应项目下的target目录，然后使用命令&amp;quot;java -jar xxx.</description>
    </item>
    <item>
      <title>2024-01-02｜雪崩问题、Spring Cloud微服务集成 Sentinel</title>
      <link>https://blog.chensoul.cc/posts/2024/01/02/til/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/02/til/</guid>
      <description>今天做了什么：
雪崩问题 Spring Cloud微服务集成 Sentinel 扩展 Sentinel 集成 OpenFeign，实现自动降级 雪崩问题 1、什么是雪崩问题？
雪崩问题（Avalanche Effect）是指在分布式系统中，当一个节点或服务出现故障或不可用时，其影响会扩散到其他节点或服务，导致级联故障的现象。这种现象类似于雪崩，一旦开始，会不断放大和蔓延，最终导致整个系统崩溃。
雪崩问题的主要原因是系统中的节点或服务之间存在过度依赖、高度耦合，以及缺乏容错机制。当一个节点或服务出现故障时，由于其他节点或服务无法及时处理或适应，故障会不断传播，最终导致整个系统的崩溃。
2、如何解决雪崩问题？
超时处理：在请求其他节点或服务时，设置适当的超时时间。如果在规定的时间内未收到响应，可以认为请求失败，并进行相应的处理，如返回默认值或错误信息。超时处理可以防止因等待过长的响应时间导致的请求堆积和资源浪费。 线程隔离：通过将不同的请求在不同的线程中执行，可以避免因某个请求的执行时间过长而影响其他请求的处理。线程隔离可以通过线程池或独立的线程来实现。每个请求都在独立的线程中执行，发生故障或异常时只会影响当前请求，而不会影响整个系统的稳定性。 降级熔断：当系统压力过大或出现故障时，可以通过降级熔断机制暂时关闭或减少对某些功能或服务的请求，以保护核心功能的稳定性。例如，当请求某个服务的失败率超过阈值时，可以自动触发熔断机制，暂时停止对该服务的请求，并返回一个默认值或错误信息。 流量控制：通过实施流量控制策略，限制对系统的并发请求数量。可以使用令牌桶算法或漏桶算法等进行流量控制。这可以避免过多的请求集中在某个节点或服务上，导致其负载过重，进而引发雪崩效应。 负载均衡：使用负载均衡器将请求分发到多个节点或服务上，以均衡系统的负载。负载均衡可以基于不同的算法，如轮询、随机、加权轮询等。通过负载均衡，可以避免单一节点或服务承受过大的压力，从而减少故障和雪崩的风险。 这些方法可以单独或组合使用，具体的选择和实施取决于系统的需求和架构。此外，还需要定期进行系统性能评估和压力测试，以便及时发现和解决潜在的雪崩问题，并不断优化系统的可靠性和稳定性。
Spring Cloud 微服务集成 Sentinel 添加 maven 依赖：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-sentinel&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 添加配置文件：
spring.cloud.sentinel.transport.dashboard=localhost:8080 配置文件打开 Sentinel 对 Feign 的支持：feign.sentinel.enabled=true
加入 spring-cloud-starter-openfeign 依赖使 Sentinel starter 中的自动化配置类生效：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-openfeign&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 配置 RestTemplate 支持 sentinel：
@Bean @SentinelRestTemplate( blockHandler = &amp;#34;handleBlock&amp;#34;, fallback = &amp;#34;handleFallback&amp;#34;, fallbackClass = SentinelFallbackBlockHandler.class, blockHandlerClass = SentinelFallbackBlockHandler.class) public RestTemplate restTemplate() { return new RestTemplate(); } SentinelFallbackBlockHandler 类：
public class SentinelFallbackBlockHandler { public static ClientHttpResponse handleBlock(HttpRequest request, byte[] body, ClientHttpRequestExecution execution, BlockException exception) { return new SentinelClientHttpResponse(); } public static ClientHttpResponse handleFallback(HttpRequest request, byte[] body, ClientHttpRequestExecution execution, BlockException ex) { return new SentinelClientHttpResponse(); } } 扩展 Sentinel 集成 OpenFeign，实现自动降级 1、扩展 BlockExceptionHandler，实现 JSON 输出</description>
    </item>
    <item>
      <title>2023-12-28｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2023/12/28/til/</link>
      <pubDate>Thu, 28 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/28/til/</guid>
      <description>今天做了什么：
重构微服务项目中使用 spring-security-oauth2 搭建 OAuth2 认证服务和资源服务的代码，减少其他模块对此的耦合度。计划将 spring-security-oauth2 迁移到 spring-security-oauth2-authorization-server 上，即使用 OAuth2.1 授权和认证。Spring Authorization Server 相关文档，可以参考 https://blog.51cto.com/u_15268610/category2。
看 xuxiaowei-cloud master 分支源代码，整理 /login 登陆逻辑，参数：username、password、tenantId、clientId
登陆成功
记录登陆日志 转向 /login/success 获取客户端信息，将授权地址、校验 token 地址返回给前端 前端重定向到授权页面 授权同意，则重定向到客户端表中配置的重定向地址 /oauth2/code/{id}，并通过 code 去获取 token，最后再重定向到用户指定的回调地址 重新梳理用户中心领域模型。
领域模型：
客户端，对应 OAuth 中的客户端的概念。
应用
租户
用户
角色
资源
区域
门店
领域模型之间的关系说明：
客户端和应用多对的的关系，应用和租户是多对多的关系，租户和资源是多对多的关系，应用和资源一对多的关系。为了简化操作，可以创建一个中间表保存客户端、应用、租户、资源之间的关系。 资源、用户、角色是 RBAC 模型。角色和应用是多对一的关系，租户和角色是一对多的关系，即角色是隶属于应用和租户。不太应用的不同租户下的角色不一样。 租户和区域是一对多的关系，区域和门店是一对多的关系，门店和应用是多对多的关系。 用户和租户是多对多的关系。 流程：
登陆：使用用户名、密码、客户端 ID、租户 ID（首次登陆时为空，取用户有权限的租户中的第一个） 登陆。通过 客户端 ID、租户 ID 、用户名查询该用户的权限。 登陆之后，再选择租户进入首页。 创建客户端之后，可以绑定应用。 创建租户时，可以通过资源树（客户端+应用+资源）开通资源，可以给租户开通的应用开通门店。 </description>
    </item>
    <item>
      <title>2023-12-27｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2023/12/27/til/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/27/til/</guid>
      <description>今天做了什么：
微服务项目中认证服务器配置授权码模式，并测试通过
扩展 RedisAuthorizationCodeServices ，支持设置过期时间。
注意：OAuth2Authentication 无法从 json 反序列化，故无法使用 JSON 反序列化类，只能使用 JDK 反序列化类。 扩展 BearerTokenExtractor，支持从 request 请求的 header 中读取 access_token
配置 JWK token 使用时
扩展 JwtAccessTokenConverter ，用于解析 jwks 接口返回的 json，相关说明参考 creating-the-jwk-set-endpoint JwkDefinitionSource 类中获取 jwkSetUrls 时，不支持 url 中配置服务名称，即不支持负载均衡。故，重写该类以支持通过 RestTemplate （可以注入一个支持负载均衡的 RestTemplate） 解析 jwkSetUrls 返回的 json 类型的字符串；创建了一个支持负载均衡的 TokenStore。 运行 xuxiaowei-cloud 项目时
提示 Rollup failed to resolve import &amp;quot;@vue/shared&amp;quot;，原因：这个错误是由于无法解析到 @vue/shared 这个包导致的。@vue/shared 是 Vue 内部使用的一个共享工具库。解决方案：将 @vue/shared 添加到项目的依赖中。
npm install --save @vue/shared Controller 的方法上添加注解判断是否有权限，例子：@PreAuthorize(&amp;quot;hasAuthority(&#39;manage_user_authority&#39;) or #oauth2.hasScope(&#39;manage_user_authority&#39;)&amp;quot;)
Principal 中的用户对象，即 UserDetails 对象不添加额外字段，只有 username，如果想获取用户信息，需要通过用户服务去查询。
关于 OAuth2 的参考资料：
Oauth2.0搭建问题记录
OAuth 2.0 实战
关于 Spring Cloud 集成 OAuth2 的参考仓库：
https://gitee.com/youlaitech/youlai-mall
https://gitee.com/dromara/RuoYi-Cloud-Plus
https://gitee.com/dromara/open-capacity-platform/</description>
    </item>
    <item>
      <title>2023-12-22｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2023/12/22/til/</link>
      <pubDate>Fri, 22 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/22/til/</guid>
      <description>今天做了什么：
我使用的 Idea 插件。
springdoc-openapi v1.7.0 示例
Spring Security OAuth Boot 2 Autoconfig 转换成 maven 项目，并添加示例
Idea 1、插件
GenerateSerialVersionUID：自动生成 serialVersionUID
MicroProfile Starter：创建 MicroProfile 微服务应用
Easy Javadoc：快速生成 Javadoc
快捷键 作用域 说明 ctrl \ 类、方法、属性（光标放上面就行，不要双击选中！） 生成当前文档注释 ctrl \ 选中的中文 生成选中的中文的英文命名 ctrl \ 选中的非中文 弹框展示翻译结果 ctrl shift \ 类 生成全部文档注释 .ignore
Maven Helper
MetricsReloaded
MybatisX
PlantUML Diagram Generator
Save Actions Tool
SequenceDiagram
StringManipulation
Translation
WakaTime
2、快捷键
多个窗口之前切换，MacOS 快捷键：Command + ~ springdoc-openapi v1.7.0 将项目中使用的 swagger doc 迁移到 springdoc-openapi v1.7.0，关于 springdoc 的使用，在 github 上创建了一个示例仓库： springdoc-examples
Spring Security OAuth Boot 2 Autoconfig 将 Spring Security OAuth Boot 2 Autoconfig 修改成 maven 项目，并添加 samples 示例。修改后的项目地址：https://github.com/chensoul/spring-security-oauth2-boot</description>
    </item>
    <item>
      <title>2023-12-21｜Spring Security对OAuth2的支持及实现方式</title>
      <link>https://blog.chensoul.cc/posts/2023/12/21/til/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/21/til/</guid>
      <description>Today I Learned. 今天分享内容：Spring Security 对 OAuth2 的支持
Spring Security 提供了对 OAuth 的支持，并且有几个相关的项目可以用于实现 OAuth 功能。以下是一些常见的 Spring Security OAuth 项目及其相关信息：
Spring Security OAuth（https://github.com/spring-attic/spring-security-oauth）：官方提供的 Spring Security OAuth 项目，为 Spring 应用程序提供了 OAuth 1.0 和 OAuth 2.0 的支持。该项目在 Spring Security 5.x 版本后已不再维护，建议使用后续提到的 Spring Authorization Server。 Spring Security 5（https://github.com/spring-attic/spring-security）：Spring Security 5.x 版本开始将 OAuth 2.0 客户端支持集成到核心库中，使得在 Spring Security 中实现 OAuth 2.0 认证变得更加简单。你可以使用 Spring Security 5.x 以及后续版本来实现 OAuth 2.0 客户端功能。 Spring Security OAuth2 Boot（https://github.com/spring-attic/spring-security-oauth2-boot），该项目是 spring-attic 组织维护的，提供了 Spring Boot 2 和旧版 Spring Security OAuth 的自动配置。该项目已经停止了活跃的开发和更新，最新的提交日期是 2022 年 5 月 20 日。 Spring Authorization Server（https://github.com/spring-projects/spring-authorization-server）：官方提供的用于构建 OAuth 2.0 授权服务器的实验性项目。它是 Spring Security 5.3 之后推出的替代方案，旨在提供更简化和灵活的 OAuth 2.0 授权服务器功能。 Authorization Server
目前，Spring Security 不支持实现 OAuth 2.</description>
    </item>
    <item>
      <title>2023-12-20｜Maven配置继承和生命周期、源码运行Nacos 2.3.0控制台</title>
      <link>https://blog.chensoul.cc/posts/2023/12/20/til/</link>
      <pubDate>Wed, 20 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/20/til/</guid>
      <description>Today I Learned. 今天分享内容：Maven配置继承和生命周期、源码运行Nacos 2.3.0控制台
Maven 相关 Maven配置继承 以下是一些常见的POM节点，在子项目中可以继承或覆盖父项目的配置：
groupId（项目组ID）：如果在子项目中未定义groupId，则将继承父项目的groupId。
version（项目版本）：如果在子项目中未定义version，则将继承父项目的version。
properties（属性）：子项目可以继承父项目的属性定义，并在子项目中使用相同的属性。
dependencies（依赖项）：子项目可以继承父项目的依赖项配置，包括依赖的groupId、artifactId和version等信息。
dependencyManagement（依赖管理）：在父项目的dependencyManagement节点中定义的依赖版本可以被子项目继承和使用。
build（构建配置）：子项目可以继承父项目的构建配置，包括插件配置、构建目录、资源目录等。子项目可以覆盖或添加额外的构建配置。
reporting（报告配置）：子项目可以继承父项目的报告配置，包括报告插件的配置信息。
repositories（仓库配置）：子项目可以继承父项目的仓库配置，用于从指定的仓库解析依赖。
scm（版本控制配置）：子项目可以继承父项目的 scm 节点中的配置，包括版本控制系统的 URL、连接器、标签等信息。
issueManagement（问题管理配置）：子项目可以继承父项目的 issueManagement 节点中的配置，包括问题跟踪系统的 URL、连接器等信息。
organization（组织配置）：子项目可以继承父项目的 organization 节点中的配置，包括组织的名称、URL 等信息。
developers（开发者配置）：子项目可以继承父项目的 developers 节点中的配置，包括开发者的姓名、邮箱等信息。
licenses（许可证配置）：子项目可以继承父项目的 licenses 节点中的配置，包括许可证的名称、URL、分发方式等信息。
inceptionYear和url这两个节点在 Maven 的 POM 文件中无法被子项目继承。
inceptionYear：这个节点用于指定项目的初始年份。它通常用于提供项目的创建或开始日期，但它不会被子项目继承。每个子项目需要在自己的 POM 文件中显式定义自己的inceptionYear。 url：这个节点用于指定项目的URL地址，例如项目的主页或版本控制仓库的URL。与inceptionYear类似，url节点也不会被子项目继承。每个子项目需要在自己的 POM 文件中显式定义自己的url。 这些节点通常是项目特定的信息，不具备被继承的属性，因此每个子项目都需要自行定义这些节点，以提供自己独特的项目起始年份和URL地址。
Maven的生命周期 Maven的标准生命周期包括三个主要的生命周期：
Clean生命周期：用于清理项目构建产生的输出，包括删除生成的目录和文件。 clean：清理项目，删除生成的目录和文件。 Default生命周期：用于构建项目的核心生命周期，涵盖了项目的编译、测试、打包、部署等主要阶段。 validate：验证项目是否正确且所有必要信息可用。 compile：编译项目的源代码。 test：运行项目的单元测试。 package：将编译后的代码打包成可分发的格式，例如JAR、WAR。 install：将打包的项目安装到本地仓库，供其他项目使用。 deploy：将最终的包复制到远程仓库，供其他开发人员和项目使用。 Site生命周期：用于生成项目的站点文档。 site：生成项目的站点文档。 site-deploy：将生成的站点文档部署到远程服务器。 完整的生命周期：
validate：验证项目是否正确且所有必要信息可用。 initialize：初始化构建环境，例如设置构建属性和加载父POM。 generate-sources：生成项目的源代码，例如通过处理注解或其他生成代码的工具。 process-sources：处理项目的源代码，例如对源代码进行过滤或转换。 generate-resources：生成项目的资源文件，例如拷贝资源文件到目标目录。 process-resources：处理项目的资源文件，例如过滤资源文件的占位符。 compile：编译项目的源代码，将源代码编译为字节码文件（.class文件）。 process-classes：对编译后的类文件进行额外的处理，例如生成额外的资源文件。 generate-test-sources：生成项目的测试源代码，例如通过处理注解或其他生成代码的工具。 process-test-sources：处理项目的测试源代码，例如对测试源代码进行过滤或转换。 generate-test-resources：生成项目的测试资源文件，例如拷贝测试资源文件到目标目录。 process-test-resources：处理项目的测试资源文件，例如过滤测试资源文件的占位符。 test-compile：编译项目的测试源代码，将测试源代码编译为字节码文件。 process-test-classes：对编译后的测试类文件进行额外的处理。 test：运行项目的单元测试。 prepare-package：准备打包阶段的相关工作，例如生成额外的文件或资源。 package：将项目打包成可分发的格式，例如JAR、WAR等。 pre-integration-test：在集成测试之前执行的一些准备工作。 integration-test：运行项目的集成测试。 post-integration-test：在集成测试之后执行的一些清理工作。 verify：验证项目的完整性，例如对生成的报告进行检查。 install：将项目的构件安装到本地仓库，供本地其他项目使用。 deploy：将项目的构件复制到远程仓库，供其他开发人员和项目使用。 maven-compiler-plugin 问题 github action 的机器人将 maven-compiler-plugin 版本升级到 3.12.0 ，运行 test 时出现异常：
basedir /Users/chensoul/workspace/IdeaProjects/cocktail/cocktail-cloud/cocktail/cocktail-oauth2/target/generated-test-sources/test-annotations does not exist 将版本降到 3.</description>
    </item>
    <item>
      <title>2023-12-19｜Spring Security OAuth2配置JWT、Github Actions配置代码扫描</title>
      <link>https://blog.chensoul.cc/posts/2023/12/19/til/</link>
      <pubDate>Tue, 19 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/19/til/</guid>
      <description>Today I Learned. 今天分享内容：Spring Security OAuth2 配置JWT、Github Actions配置代码扫描，另外，修改了 spring-security-oauth2-legacy 仓库，支持授权认证中心的多种配置方式（jdbc、内存、redis、jwt）、资源中心的多种配置方式（jwt、jdbc、redis、remote、jwk-set-uri）。
Spring Security OAuth2 配置JWT 使用 Spring Security 实现OAuth2 配置 JWT 非对称加密时， JwtAccessTokenConverter 设置生成私钥签名和公钥验证器（可省略）。
@Bean public JwtAccessTokenConverter jwtAccessTokenConverter() { JwtAccessTokenConverter converter = new JwtAccessTokenConverter(); // 设置私钥签名 converter.setSigner(new RsaSigner((RSAPrivateKey) new RSA(&amp;#34;privateKey&amp;#34;, null).getPrivateKey())); // 设置公钥验证器，可省略 converter.setVerifier(new RsaVerifier((RSAPublicKey) new RSA(null, &amp;#34;publicKey&amp;#34;).getPublicKey())); return jwtAccessTokenConverter; } 注意：这里使用了 Hutool 的 RSA 从字符串生成 PrivateKey 和 PublicKey
去掉对 Hutool 的依赖，则可以使用自己实现的 RSAUtil 类：
public class RSAUtil { public static final String ALGORITHM_KEY = &amp;#34;RSA&amp;#34;; @SneakyThrows public static PrivateKey getPrivateKeyFromString(String privateKeyStr) { byte[] privateKeyBytes = Base64.getDecoder().decode(privateKeyStr.replaceAll(&amp;#34;\n&amp;#34;, &amp;#34;&amp;#34;)); PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privateKeyBytes); KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM_KEY); return keyFactory.generatePrivate(keySpec); } @SneakyThrows public static PublicKey getPublicKeyFromString(String publicKeyStr) { byte[] publicKeyBytes = Base64.</description>
    </item>
    <item>
      <title>2023-12-18｜使用Spring Security实现OAuth2授权和认证</title>
      <link>https://blog.chensoul.cc/posts/2023/12/18/til/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/18/til/</guid>
      <description>Today I Learned. 今天分享内容：使用Spring Security实现OAuth2授权和认证。
最近在开发 Spring Cloud 微服务时，需要对 OAuth2 的异常处理进行定制，从网上搜到一个 github 仓库：oauth2。这篇仓库的代码实现了 OAuth2 的四种授权模式、I18N 国际化、异常处理、JWT Token，我 fork 了一份代码，做了一些改动，去掉了 webflux、eureka 相关代码。
代码仓库地址：https://github.com/chensoul/spring-security-oauth2-legacy，相关依赖的版本：
spring-boot: 2.7.18 org.springframework.security.oauth:spring-security-oauth2-autoconfigure: 2.6.8 org.springframework.security.oauth:spring-security-oauth2: 2.5.2.RELEASE org.springframework.security:spring-security-jwt 1.1.1.RELEASE 特性 统一异常处理 参考spring security的 ExceptionTranslationFilter 类
异常处理类 AccessDeniedHandler AuthenticationEntryPoint jwt key生成 生成 JKS 文件 keytool -genkeypair -alias myalias -storetype PKCS12 -keyalg RSA -keypass mypass -keystore mykeystore.jks -storepass mypass -validity 3650 导出公钥 # 保存为 public.cer 文件： keytool -exportcert -alias myalias -storepass mypass -keystore mykeystore.jks -file public.cer # 保存为 public.key 文件 keytool -list -rfc --keystore mykeystore.jks -storepass mypass | openssl x509 -inform pem -pubkey &amp;gt; public.key 导出私钥，将其保存为 private.key 文件： keytool -importkeystore -srckeystore mykeystore.</description>
    </item>
    <item>
      <title>2023-12-15｜JNDI InitialContext源码分析、ClassLoader加载机制</title>
      <link>https://blog.chensoul.cc/posts/2023/12/15/til/</link>
      <pubDate>Fri, 15 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/15/til/</guid>
      <description>Today I Learned. 今天分享内容：JNDI InitialContext源码分析、ClassLoader加载机制。
JNDI InitialContext 源码分析 JNDI包结构 javax.naming
Context InitialContext Name CompositeName CompoundName NameImpl NameParser NamingEnumeration Referenceable RefAddr BinaryRefAddr StringRefAddr NameClassPair Binding Reference LinkRef javax.naming.directory
Attribute
BasicAttribute Attributes
BasicAttributes DirContext
InitialDirContext ModificationItem
SearchControls
SearchResult
javax.naming.spi
NamingManager DirectoryManager ObjectFactory DirObjectFactory ObjectFactoryBuilder StateFactory DirStateFactory InitialContextFactory InitialContextFactoryBuilder Resolver ContinuationContext ContinuationDirContext ResolveResult InitialContext 构造方法 InitialContext的初始化有几种方式：
通过构造方法 通过 InitialContextFactory#getInitialContext 通过协议转换创建 InitialContext.getURLOrDefaultInitCtx(String name) 一个 JNDI 示例：
public class DNSClient { public static void main(String[] args) { Hashtable&amp;lt;String, String&amp;gt; env = new Hashtable&amp;lt;&amp;gt;(); env.put(Context.INITIAL_CONTEXT_FACTORY, &amp;#34;com.sun.jndi.dns.DnsContextFactory&amp;#34;); env.put(Context.PROVIDER_URL, &amp;#34;dns://114.114.114.114&amp;#34;); try { DirContext ctx = new InitialDirContext(env); Attributes res = ctx.getAttributes(&amp;#34;example.com&amp;#34;, new String[]{&amp;#34;A&amp;#34;}); System.out.println(res); } catch (NamingException e) { e.</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Twitter</title>
      <link>https://blog.chensoul.cc/posts/2023/12/14/designing-twitter/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/14/designing-twitter/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing Twitter》设计 Twitter。
Let’s design a Twitter-like social networking service. Users of the service will be able to post tweets, follow other people, and favorite tweets. Difficulty Level: Medium
让我们设计一个类似 Twitter 的社交网络服务。该服务的用户将能够发布推文、关注其他人以及喜欢的推文。难度级别：中等
1. What is Twitter? 1.什么是推特？
Twitter is an online social networking service where users post and read short 140-character messages called “tweets.” Registered users can post and read tweets, but those who are not registered can only read them. Users access Twitter through their website interface, SMS, or mobile app.
Twitter 是一种在线社交网络服务，用户可以在其中发布和阅读称为“推文”的 140 个字符的简短消息。注册用户可以发布和阅读推文，但未注册的用户只能阅读推文。用户通过网站界面、短信或移动应用程序访问 Twitter。
2. Requirements and Goals of the System 系统的要求和目标 We will be designing a simpler version of Twitter with the following requirements:</description>
    </item>
    <item>
      <title>2023-12-14｜购买新的VPS服务器、最近在做什么</title>
      <link>https://blog.chensoul.cc/posts/2023/12/14/til/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/14/til/</guid>
      <description>Today I Learned. 今天分享内容：购买新的 VPS 服务器、最近在做什么。
购买新的 VPS 服务器 今天看到搬瓦工上的 VPS 还有一个月到期，该 VPS 配置是 40 GB SSD、2 GB RAM、2 TB Bandwidth、3x Intel Xeon CPU、1 Gigabit Network，一年费用是 99 美元。
在中文博客圈微信群里面看到 CloudCone 最近在做 CloudCone 2023 年圣诞节活动。
CloudCone 成立于 2017 年，美国注册公司 (怀俄明州 2017-000753144)。主营美国洛杉矶 MultaCom 机房的云服务器 / VPS、独立服务器、电子邮件托管等业务。VPS 基于 KVM 虚拟，采用自行研发的控制面板。其所在的 MultaCom 机房采用动态路由网络，会根据不同网络状态调整线路，很多地区的电信网络会走 CN2 线路，因此延迟和稳定性在非高峰时段都较为优秀。同时该主机商提供了按秒计费、随删随用、定期备份服务。支持支付宝、Paypal、信用卡等方式付款。
CloudCone 2023 年圣诞节 VPS 优惠促销活动。美国西海岸洛杉矶 MultaCom 机房，千兆带宽，1 个 IPv4 地址，3 个 IPv6 地址，基于 KVM 虚拟，SSD Cached RAID 10 存储。
活动地址：https://hello.cloudcone.com/2023-christmas-vps-sale
CPU 内存 硬盘（SSD） 流量 带宽 价格 购买地址 1 核 0.5G 30G 3T 1Gbps $9.5/年 点击购买 2 核 1G 45G 3T 1Gbps $15/年 点击购买 2 核 1G 50G 3T 1Gbps $16.</description>
    </item>
    <item>
      <title>All things about MicroProfile</title>
      <link>https://blog.chensoul.cc/posts/2023/12/14/all-things-about-microprofile/</link>
      <pubDate>Thu, 14 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/14/all-things-about-microprofile/</guid>
      <description>最近在一些开源项目中看到了 MicroProfile ，于是在网上查阅了相关资料加深对 MicroProfile 的理解，并做了笔记形成此文。
MicroProfile MicroProfile是一个开放的企业级Java微服务框架，旨在简化和标准化基于微服务架构的应用程序开发。它是由Eclipse Foundation主导的一个开源项目，致力于提供轻量级、可移植和可互操作的Java微服务规范和实现。
MicroProfile的目标是为Java开发人员提供一个规范集合，使他们能够更轻松地构建和部署云原生应用程序。它结合了Java EE、Jakarta EE和其他相关规范，为开发人员提供了一组核心功能和扩展，以支持构建可伸缩、弹性和高性能的微服务应用程序。
MicroProfile提供了一系列的规范，包括：
MicroProfile Config MicroProfile JWT RBAC MicroProfile Health MicroProfile Fault Tolerance MicroProfile Metrics MicroProfile OpenAPI MicroProfile OpenTracing MicroProfile REST Client MicroProfile Context Propagation MicroProfile Reactive Streams Operators MicroProfile Reactive Messaging MicroProfile GraphQL MicroProfile Long Running Actions MicroProfile Telemetry MicroProfile 实现：
Payara Micro：是一个用于容器化Jakarta EE应用部署的轻量级中间件平台，不需要安装、配置或重写代码，可以快速部署 WildFly by Redhat：是一个轻量级、模块化的微服务框架，集中、简单、以用户为中心，实现了Jakarta EE和Eclipse MicroProfile的最新企业Java标准。 Quarkus by RedHat：为GraalVM和OpenJDK HotSpot构建的Kubernetes Native Java堆栈，由最佳的Java库和标准精心打造。 Apache TomEE：这是Apache Tomcat Java企业版，它结合了几个Java企业项目，包括Apache OpenEJB、Apache OpenJPA、Apache OpenWebBeans、Apache MyFaces和其他许多项目。 Hammock：这是一个基于CDI的bootstrapping Java企业微服务框架，由于其灵活性和简单性，用于构建应用程序 Openliberty：是一个开源的轻量级Java EE微服务框架，用于构建快速高效的云原生Java微服务应用，只运行所需的服务，同时考虑最新的Eclipse MicroProfile标准 Helidon by Oracle：这是一个Java库的集合，用于编写在快速的Helidon Reactive WebServer上运行的Java微服务，这是一个由Netty驱动的Web核心，同时支持MicroProfile及其标准规范。 KumuluzEE：是一个轻量级框架，用于使用标准的Java/JavaEE/JakartaEE/EE4J技术和API开发微服务，可选择扩展，如使用Node.js、Go和其他语言，并将现有应用程序迁移到云原生架构和微服务，以便更容易地进行云原生微服务开发。 Launcher by Fujitsu：它由富士通公司开发，是一个支持某些MicroProfile规范的Java EE微服务框架，可以将应用捆绑到über-jar/fat文件（JAR文件，包含其所有需要的依赖项） ThornTail (过时的)：是一个Java企业级微服务框架，它只将需要的和指定的包捆绑到一个JAR文件中，并有足够的运行时间来运行它们 MicroProfile发展历史 Infoq 上有一段介绍：
2016 年年中，作为对 Oracle 在发布 Java EE 8 方面停滞不前的直接回应，社区发起了两个新的倡议，也就是MicroProfile和 Java EE Guardians（现在被称为Jakarta EE Ambassadors）。Java 社区认为，随着用于构建微服务应用的 web 服务技术的出现，企业级 Java 已经落后于时代了。</description>
    </item>
    <item>
      <title>2023-12-13｜发布到Maven中央仓库的第一个项目</title>
      <link>https://blog.chensoul.cc/posts/2023/12/13/til/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/13/til/</guid>
      <description>Today I Learned. 今天分享内容：发布到 Maven 中央仓库的第一个项目。
最近在 Github 上创建了一个 Pom 类型的 Maven 项目 chensoul-parent，该项目主页 https://chensoul.github.io/chensoul-parent/ ，这是我的第一个发布对 Maven 中央仓库的项目。
其主要用途是管理常用的 Maven Plugin 插件。在编写该项目的过程中，参考了一些开源项目，他们分别是：
https://github.com/eclipse/microprofile Eclipse 的一套开源微服务框架实现 https://github.com/microbean/microbean-function microBean™ 的 Java 扩展 https://github.com/naturalett/maven-hello-world 一个 Maven 发布 Jar 的 hello world 的示例项目 https://github.com/eclipse-store/store Eclipse 开源的一个高性能 Java 原生持久存储。微秒响应时间。超高吞吐量。最小延迟。创建超快速内存数据库应用程序和微服务。 该项目打包之后是一个 pom 文件，任何 Maven 项目都可以继承这个项目，这样可以免去自己管理 Mave Plugin 插件的麻烦。这里面的 Mave Plugin 插件包括：
编译 打包 发布 测试，并生成测试报告 质量检测，包括代码风格检查、漏洞检测 生成网站并发布到 github pages 发布先是使用的 Maven Release Plugin 和 Nexus Staging Maven Plugin 插件，后来觉得 Maven Release Plugin 插件做的事情太多了，不如手动执行命令，于是去掉了 Maven Release Plugin 插件。
关于 Nexus Staging Maven Plugin 插件的使用了，起初我使用了这个仓库发布 Maven 构建的脚本 。这个脚本比较复杂，于是找到了 https://github.com/naturalett/maven-hello-world 这个仓库，其对应的博客 《Publishing Artifacts to Maven Central using GitHub Actions: A Step-by-Step Guide》，对于如何部署构建到 Maven 中央仓库、如何使用 Github Action 说的比较清楚。如果你对于如何使用这个插件，可以阅读该文章，本文不作赘述。</description>
    </item>
    <item>
      <title>2023-12-12｜RMI、Java漏洞安全、Semgrep漏洞检测</title>
      <link>https://blog.chensoul.cc/posts/2023/12/12/til/</link>
      <pubDate>Tue, 12 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/12/til/</guid>
      <description>Today I Learned. 今天我学了：RMI、Java漏洞安全、Semgrep漏洞检测。
RMI 介绍 RMI（Remote Method Invocation）是Java语言提供的一种远程调用机制，用于在分布式系统中实现对象之间的远程通信。
通过Java RMI，开发人员可以像调用本地方法一样调用远程对象的方法。RMI隐藏了底层网络通信的复杂性，使得远程方法调用过程对于开发人员来说更加简单和透明。
发展历史 RMI（Remote Method Invocation）是Java语言提供的一种远程调用机制，它的发展历史可以追溯到上个世纪90年代。
以下是RMI的主要发展历程：
初期版本（Java 1.1）：RMI最早出现在Java 1.1版本中，它提供了基本的远程调用功能，允许开发人员在分布式系统中使用Java对象进行远程方法调用。这个版本的RMI还比较简单，功能相对有限。 RMI-IIOP（Java 1.2）：随着Java 1.2版本的发布，Sun Microsystems（现在的Oracle）引入了RMI-IIOP（RMI over IIOP）的概念，将RMI与CORBA（Common Object Request Broker Architecture）进行了整合。RMI-IIOP使用IIOP（Internet Inter-ORB Protocol）作为底层的通信协议，使得Java对象能够与其他编程语言的对象进行交互。 JDK 1.3和1.4的改进：在JDK 1.3和1.4版本中，RMI得到了进一步改进和增强。其中包括对Java序列化机制的改进，提供了更好的兼容性和性能。此外，还引入了Java Activation Framework（JAF），用于处理传输的数据类型。 Java 5的增强：Java 5引入了一些重要的增强功能，如注解（Annotations）和泛型（Generics）。这些功能使得RMI的使用更加便捷和灵活。 Java 8和后续版本：在Java 8及其后续版本中，RMI并没有进行大规模的改动。然而，随着Java平台的不断发展和改进，RMI仍然是Java分布式系统中常用的远程调用机制之一。 架构 RMI架构包括以下几个核心组件：
远程接口（Remote Interface）：远程接口定义了远程对象的方法列表，客户端可以通过该接口调用远程对象的方法。远程接口必须继承java.rmi.Remote接口，并声明可以被远程调用的方法。 远程对象（Remote Object）：远程对象是实现了远程接口的Java对象。这些对象的方法可以通过RMI进行远程调用。远程对象必须继承java.rmi.server.UnicastRemoteObject类，并实现对应的远程接口。 远程注册表（Remote Registry）：远程注册表是一个中央注册表，用于存储远程对象的引用。客户端可以查询远程注册表以获取远程对象的引用，并通过引用调用远程对象的方法。远程注册表使用RMI注册表服务（rmiregistry）来实现。 Stub（存根）和Skeleton（骨架）：Stub和Skeleton是RMI的关键组件，用于在客户端和服务器之间进行通信。Stub是客户端的代理，它负责将客户端的方法调用转发到远程对象。Skeleton是服务器端的代理，它负责接收客户端的方法调用并将其转发给实际的远程对象。 RMI协议（RMI Protocol）：RMI协议定义了客户端和服务器之间的通信协议，包括请求、响应、参数传递和序列化等细节。RMI协议使用Java序列化来对对象进行编码和解码，以实现对象在网络上的传输。 RMI架构的基本工作流程如下：
服务器端将远程对象注册到远程注册表中。 客户端从远程注册表中获取远程对象的引用。 客户端通过引用调用远程对象的方法。 客户端的方法调用被转发到服务器端的远程对象。 服务器端的远程对象执行相应的方法，并将结果返回给客户端。 客户端接收到方法的返回值。 在JDK 1.2版本（1998）之后，骨架skeleton不再被需要, 由Java的UnicastServerRef#dispatch替代；在JDK 5 （大家常说的1.5）之后，不再需要手动利用rmic命令生成静态Stub，而是会由Java自动地动态生成。这个动态生成也是我们后面JNDI注入的关键。
RMI漏洞 RMI（Remote Method Invocation）在过去的一段时间中曾发现一些安全漏洞，这些漏洞可能会导致安全风险。以下是一些常见的RMI漏洞：
反序列化漏洞：RMI使用Java序列化机制来在网络上传输对象。然而，如果不正确地处理反序列化过程，攻击者可能通过构造恶意序列化数据来执行远程代码。这种漏洞被广泛称为&amp;quot;Java反序列化漏洞&amp;quot;或&amp;quot;Java反序列化攻击&amp;quot;，并且不仅仅影响RMI，还可能影响其他使用Java序列化的技术。 未授权访问漏洞：RMI服务默认情况下可能没有进行适当的身份验证和授权检查。这可能导致攻击者能够未经授权地访问远程对象和调用方法，从而造成安全风险。 注册表绕过漏洞：RMI使用注册表（Registry）来存储远程对象的引用。攻击者可能通过绕过注册表或篡改注册表中的引用，来执行恶意操作或替换原始对象。 未加密的通信漏洞：如果RMI的通信过程没有适当地加密和保护，攻击者可能能够窃听、篡改或重放网络通信，从而获取敏感信息或执行中间人攻击。 为了缓解这些漏洞的风险，建议采取以下安全措施：
及时更新和升级使用的Java运行时环境，以获取最新的安全修复程序。JDK 8u121引入了对RMI漏洞的修复。 在反序列化过程中谨慎处理输入数据，避免接受未受信任的序列化数据。 实施适当的身份验证和授权机制，确保只有经过授权的用户可以访问和调用远程对象。 使用安全协议（如SSL/TLS）对RMI通信进行加密和保护。 配置和限制RMI的网络访问，仅允许受信任的主机和端口进行通信。 对RMI注册表进行安全配置，限制对注册表的访问权限。 RMI用到的技术 Java序列化（Serialization）：RMI使用Java序列化来实现对象在网络上的传输。Java序列化机制允许将Java对象转换为字节流表示，以便在网络上进行传输。RMI使用Java序列化将方法调用和参数编码为字节流，并在客户端和服务器之间进行传输。 Java网络通信（Network Communication）：RMI使用Java的网络通信机制来在客户端和服务器之间进行远程调用的传输。RMI支持多种底层传输协议，如JRMP（Java Remote Method Protocol）和IIOP（Internet Inter-ORB Protocol）。这些协议负责将编码的方法调用和参数传输到远程对象，并将结果返回给客户端。 代理。Stub和Skeleton是RMI中的代理组件。Stub是客户端的代理，Skeleton是服务器端的代理。Stub负责将客户端的方法调用转发到远程对象，而Skeleton接收客户端的方法调用并将其转发给实际的远程对象。Stub和Skeleton处理了网络通信、参数编组和解组等细节，使得远程调用过程对开发人员透明。 Java漏洞 文章 关于Java中RMI的个人拙见
Java JNDI其它注入点分析
Java JNDI注入源码分析
Java RMI反序列化&amp;amp;JNDI注入</description>
    </item>
    <item>
      <title>如何设计一个分布式ID生成器保证ID按时间有序？</title>
      <link>https://blog.chensoul.cc/posts/2023/12/05/distributed-id-generator/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/05/distributed-id-generator/</guid>
      <description>很多业务有生成唯一 ID 并作为数据库主键的需求。数据库会在这个字段上建立聚集索引（参考 MySQL InnoDB），即该字段会影响各条数据再物理存储上的顺序。
ID还要尽可能短，节省内存，让数据库索引效率更高。基本上64位整数能够满足绝大多数的场景，但是如果能做到比64位更短那就更好了。需要根据具体业务进行分析，预估出ID的最大值，这个最大值通常比64位整数的上限小很多，于是我们可以用更少的bit表示这个ID。
查询的时候，往往有分页或者排序的需求，所以需要给每条数据添加一个时间字段，并在其上建立普通索引(Secondary Index)。但是普通索引的访问效率比聚集索引慢，如果能够让ID按照时间粗略有序，则可以省去这个时间字段。为什么不是按照时间精确有序呢？因为按照时间精确有序是做不到的，除非用一个单机算法，在分布式场景下做到精确有序性能一般很差。
这就引出了 ID 生成的三大核心需求：
全局唯一 按照时间粗略有序 尽可能短 下面介绍一些常用的生成 ID 的方法。
UUID UUID 是一类算法的统称，具体有不同的实现。UUID 的优点是每台机器可以独立产生 ID，理论上保证不会重复，所以天然是分布式的；缺点是生成的 ID 太长，不仅占用内存，而且索引查询效率低。
MongoDB 的 ObjectId 使用的就是 UUID 算法。生成的 ObjectId 占 12 个字节，由以下几个部分组成，
4 个字节表示的 Unix timestamp 3 个字节表示的机器的 ID 2 个字节表示的进程 ID 3 个字节表示的计数器 使用数据库 可以使用数据库中的自增主键来生成ID。将ID生成的过程交给数据库管理，每个节点向数据库插入记录时，数据库会自动分配一个唯一的ID。通过使用数据库的自动递增功能，可以保证ID的唯一性和粗略有序性。
在分布式环境下，可以使用多台数据库协同工作生成 ID。假设用 8 台MySQL服务器协同工作，第一台 MySQL 初始值是 1，每次自增 8，第二台 MySQL 初始值是 2，每次自增 8，依次类推。在数据库前面添加一个负载均衡，每来一个请求，由负载均衡随机地将请求发给 8 台 MySQL 中的任意一个，然后返回一个ID。
Flickr就是这么做的，仅仅使用了两台 MySQL 服务器。可见这个方法虽然简单无脑，但是性能足够好。不过要注意，在 MySQL 中，不需要把所有 ID 都存下来，每台机器只需要存一个 MAX_ID 就可以了。这需要用到 MySQL 的一个 REPLACE INTO 特性。
Flickr 的实现方式如下。
Tickets64 表结构如下：
CREATE TABLE `Tickets64` ( `id` bigint(20) unsigned NOT NULL auto_increment, `stub` char(1) NOT NULL default &amp;#39;&amp;#39;, PRIMARY KEY (`id`), UNIQUE KEY `stub` (`stub`) ) ENGINE=InnoDB SELECT * from Tickets64 返回一行，如下所示：</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Dropbox</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-dropbox/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-dropbox/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing Dropbox》设计 Dropbox。
Let’s design a file hosting service like Dropbox or Google Drive. Cloud file storage enables users to store their data on remote servers. Usually, these servers are maintained by cloud storage providers and made available to users over a network (typically through the Internet). Users pay for their cloud data storage on a monthly basis. Similar Services: OneDrive, Google Drive Difficulty Level: Medium
让我们设计一个文件托管服务，例如 Dropbox 或 Google Drive。云文件存储使用户能够将数据存储在远程服务器上。通常，这些服务器由云存储提供商维护，并通过网络（通常通过互联网）提供给用户。用户按月支付云数据存储费用。类似服务：OneDrive、Google Drive 难度级别：中
1. Why Cloud Storage? 为什么选择云存储？ Cloud file storage services have become very popular recently as they simplify the storage and exchange of digital resources among multiple devices.</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Facebook Messenger</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-facebook-messenger/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-facebook-messenger/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing Facebook Messenger》设计 Facebook Messenger。
Let’s design an instant messaging service like Facebook Messenger where users can send text messages to each other through web and mobile interfaces. 让我们设计一个像 Facebook Messenger 这样的即时消息服务，用户可以通过网络和移动界面互相发送短信。
1. What is Facebook Messenger? 1.什么是 Facebook Messenger？
Facebook Messenger is a software application which provides text-based instant messaging services to its users. Messenger users can chat with their Facebook friends both from cell-phones and Facebook’s website.
Facebook Messenger 是一款为其用户提供基于文本的即时消息服务的软件应用程序。 Messenger 用户可以通过手机和 Facebook 网站与 Facebook 好友聊天。
2. Requirements and Goals of the System 系统的要求和目标 Our Messenger should meet the following requirements:
我们的 Messenger 应满足以下要求：
Functional Requirements:</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Instagram</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-instagram/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-instagram/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing Instagram》设计 Instagram。
Let’s design a photo-sharing service like Instagram, where users can upload photos to share them with other users. Similar Services: Flickr, Picasa Difficulty Level: Medium
让我们设计一个像 Instagram 这样的照片共享服务，用户可以上传照片与其他用户共享。类似服务：Flickr、Picasa 难度级别：中
1. What is Instagram? 1.Instagram是什么？
Instagram is a social networking service which enables its users to upload and share their photos and videos with other users. Instagram users can choose to share information either publicly or privately. Anything shared publicly can be seen by any other user, whereas privately shared content can only be accessed by a specified set of people. Instagram also enables its users to share through many other social networking platforms, such as Facebook, Twitter, Flickr, and Tumblr.</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计Pastebin</title>
      <link>https://blog.chensoul.cc/posts/2023/11/24/designing-pastebin/</link>
      <pubDate>Fri, 24 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/24/designing-pastebin/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing Pastebin》设计 Pastebin。
Let’s design a Pastebin like web service, where users can store plain text. Users of the service will enter a piece of text and get a randomly generated URL to access it. Similar Services: pastebin.com, pasted.co, chopapp.com Difficulty Level: Easy
让我们设计一个类似 Pastebin 的 Web 服务，用户可以在其中存储纯文本。该服务的用户将输入一段文本并获得一个随机生成的 URL 来访问它。类似服务：pastebin.com、pasted.co、hopapp.com 难度级别：简单
1. What is Pastebin? 1.Pastebin是什么？
Pastebin like services enable users to store plain text or images over the network (typically the Internet) and generate unique URLs to access the uploaded data. Such services are also used to share data over the network quickly, as users would just need to pass the URL to let other users see it.</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》域名系统</title>
      <link>https://blog.chensoul.cc/posts/2023/11/17/dns/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/17/dns/</guid>
      <description>这是一篇双语翻译的文章，原文出自《Grokking the System Design Interview》教程的 Domain Name System 这篇章节。
Introduction to Domain Name System (DNS) 域名系统 (DNS) 简介
The origins of DNS DNS 的起源
Let’s consider the example of a mobile phone where a unique number is associated with each user. To make calls to friends, we can initially try to memorize some of the phone numbers. However, as the number of contacts grows, we’ll have to use a phone book to keep track of all our contacts. This way, whenever we need to make a call, we’ll refer to the phone book and dial the number we need.
让我们考虑一个移动电话的示例，其中每个用户都有一个唯一的号码。为了给朋友打电话，我们首先可以尝试记住一些电话号码。然而，随着联系人数量的增加，我们将不得不使用电话簿来跟踪所有联系人。这样，每当我们需要打电话时，我们都会查阅电话簿并拨打我们需要的号码。</description>
    </item>
    <item>
      <title>如何设计一个短网址服务</title>
      <link>https://blog.chensoul.cc/posts/2023/11/17/designing-a-url-shortening-service/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/17/designing-a-url-shortening-service/</guid>
      <description>如何生成一个短网址服务，参考 Design a URL Shortening Service / TinyURL 和 Designing a URL Shortening service like TinyURL 两篇文章，整理如下笔记。
其中主要包括以下内容：
设计一个系统有哪些步骤 需求 预估 设计 高层次设计 API 设计 细节设计 评估 设计一个短网址服务的细节 设计步骤 Requirements 需求
功能性需求 短 URL 生成：我们的服务应该能够为给定 URL 生成唯一的较短别名。 重定向：给定一个短链接，我们的系统应该能够将用户重定向到原始 URL。 自定义短链接：用户应该能够使用我们的系统为其 URL 生成自定义短链接。 删除：在赋予权限的情况下，用户应该能够删除我们系统生成的短链接。 更新：如果有适当的权限，用户应该能够更新与短链接关联的长 URL。 过期时间：短链接必须有一个默认的过期时间，但用户应该可以根据自己的需求设置过期时间。 分功能性需求：可用性、可靠性、扩展性、可维护性、容错性 可用性：我们的系统应该具有高可用性，因为即使是第二次停机的一小部分也会导致 URL 重定向失败。由于我们系统的域位于 URL 中，因此我们没有停机时间的优势，并且我们的设计必须灌输容错条件。 可扩展性：我们的系统应该能够随着需求的增加而水平扩展。 可读性：我们的系统生成的短链接应该易于阅读、区分和输入。 延迟：系统应以低延迟执行，以便为用户提供流畅的体验。 不可预测性：从安全角度来看，我们的系统生成的短链接应该是高度不可预测的。这确保了下一个短 URL 不会连续生成，从而消除了有人猜测我们的系统已经生成或将生成的所有短 URL 的可能性。 Estimation 估计
流量 读写比：1:100 每月请求数：2 亿 单条记录占用空间：500B 记录保存多长时间：5 年 每日活跃用户 (DAU) ：1 亿 存储 5 年记录数：2 亿 x 5 x 12 =120 亿 总存储：120 亿 x 500B= 120 亿 x 0.5KB=6TB 带宽 每秒写请求：2 亿 / 30 /24 /60 /60 = 77次/s 写入带宽：77 x 500B =38KB/s 读带宽：38 x 100 =3.</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》系统设计主模板</title>
      <link>https://blog.chensoul.cc/posts/2023/11/16/system-design-master-template/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/16/system-design-master-template/</guid>
      <description>这是一篇双语翻译的文章，原文出自《Grokking the System Design Interview》教程的 System Design Master Template 这篇章节。
System design interviews are unstructured by design. In these interviews, you are asked to take on an open-ended design problem that doesn’t have a standard solution.
系统设计面试在设计上是非结构化的。在这些面试中，您被要求解决一个没有标准解决方案的开放式设计问题。
The two biggest challenges of answering a system design interview question are:
回答系统设计面试问题的两个最大挑战是：
To know where to start.
知道从哪里开始。
To know if you have talked about all the important parts of the system.
了解您是否已经讨论过系统的所有重要部分。
To simplify this process, the course offers a comprehensive system design template that can effectively guide you in addressing any system design interview question.
为了简化这个过程，本课程提供了一个全面的系统设计模板，可以有效地指导您解决任何系统设计面试问题。
Have a look at the following image to understand the major components that could be part of any system design and how these components interact with each other.</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》系统设计访谈：分步指南</title>
      <link>https://blog.chensoul.cc/posts/2023/11/16/sdi-a-step-by-step-guide/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/16/sdi-a-step-by-step-guide/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《System Design Interviews: A step by step guide》系统设计访谈：分步指南。
A lot of software engineers struggle with system design interviews (SDIs) primarily because of three reasons:
许多软件工程师在系统设计面试（SDI）中遇到困难，主要是因为以下三个原因：
The unstructured nature of SDIs, where they are asked to work on an open-ended design problem that doesn’t have a standard answer.
SDI 的非结构化性质，要求他们解决没有标准答案的开放式设计问题。
Their lack of experience in developing large scale systems.
他们缺乏开发大型系统的经验。
They did not prepare for SDIs.
他们没有为 SDI 做好准备。
Like coding interviews, candidates who haven’t put a conscious effort to prepare for SDIs, mostly perform poorly especially at top companies like Google, Facebook, Amazon, Microsoft, etc. In these companies, candidates who don’t perform above average, have a limited chance to get an offer.</description>
    </item>
    <item>
      <title>[译]《Grokking the System Design Interview》设计类似 TinyURL 的 URL 缩短服务</title>
      <link>https://blog.chensoul.cc/posts/2023/11/16/designing-a-url-shortening-service/</link>
      <pubDate>Thu, 16 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/16/designing-a-url-shortening-service/</guid>
      <description>这是一篇双语翻译的文章，原文出自 grok_system_design_interview.pdf 的一篇文章《Designing a URL Shortening service like TinyURL》设计类似 TinyURL 的 URL 缩短服务。
Let’s design a URL shortening service like TinyURL. This service will provide short aliases redirecting to long URLs. Similar services: bit.ly, goo.gl, qlink.me, etc.
让我们设计一个像 TinyURL 这样的 URL 缩短服务。该服务将提供重定向到长 URL 的短别名。类似服务：bit.ly、goo.gl、qlink.me等。
Difficulty Level: Easy
难度级别：简单
1.Why do we need URL shortening? 1.为什么需要URL缩短？
URL shortening is used to create shorter aliases for long URLs. We call these shortened aliases “short links.” Users are redirected to the original URL when they hit these short links. Short links save a lot of space when displayed, printed, messaged, or tweeted. Additionally, users are less likely to mistype shorter URLs.</description>
    </item>
    <item>
      <title>分布式基础知识</title>
      <link>https://blog.chensoul.cc/posts/2023/11/14/distributed-system-basic/</link>
      <pubDate>Tue, 14 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/14/distributed-system-basic/</guid>
      <description>什么是分布式系统？ 分布式系统是指由多个独立的计算机节点（或服务器）通过网络相互连接和协作，共同完成某个任务或提供某个服务的系统。在分布式系统中，各个节点可以同时进行计算、存储和通信，并通过消息传递等方式进行协调和同步。
分布式系统的设计目标是提高系统的性能、可靠性和可扩展性，同时减少单点故障和提高系统的容错性。通过将任务和数据分布到多个节点上，分布式系统可以实现更高的并行性和处理能力。此外，分布式系统还可以提供更好的负载均衡，以应对不断增长的工作负载。
分布式系统的主要特征 分布式系统具有以下主要特征：
分布性：分布式系统中的计算机节点分布在不同的物理或逻辑位置上，可以是同一局域网内的多台机器，也可以是分布在全球不同地区的服务器。 并行性：分布式系统中的节点可以同时进行计算和处理任务，从而实现并行处理和提高系统的性能。并行性可以通过将任务划分为子任务，并在不同节点上并行执行来实现。 通信：分布式系统通过网络进行节点之间的通信和数据传输，以实现协作和信息交换。节点之间的通信可以通过消息传递、远程过程调用（RPC）或分布式共享内存等方式实现。 缺乏全局时钟：由于节点之间的通信延迟和不可靠性，分布式系统往往无法依赖全局时钟来进行同步。因此，分布式系统需要采用一些分布式算法来实现一致性和协调，如分布式锁、一致性协议等。 容错性：分布式系统需要具备容错机制，以应对节点故障、网络故障或其他异常情况。容错性的实现通常包括备份和冗余，例如使用冗余节点、数据复制和副本机制，以确保系统的可用性和数据的完整性。 可扩展性：分布式系统应具备良好的可扩展性，即能够方便地扩展节点数量和处理能力，以适应不断增长的工作负载。可扩展性的实现可能包括水平扩展、垂直扩展、负载均衡等技术手段。 不确定性：由于节点之间的通信延迟和不可靠性，分布式系统中的操作可能存在不确定性。例如，消息传递可能会有延迟，网络可能会发生分区，导致节点之间的信息不一致。因此，分布式系统需要考虑和处理这种不确定性情况。 这些特征使得分布式系统能够实现高性能、高可用性和可扩展性，但也带来了挑战，如一致性问题、并发控制、故障处理等。因此，在设计和开发分布式系统时，需要考虑这些特征，并选择合适的技术和算法来解决相关问题。
分布式系统面临的问题 分布式系统面临的问题包括以下几个方面：
一致性问题：在分布式系统中，数据的复制和同步是一个挑战。节点之间的数据复制可能存在延迟和不一致性，需要采用合适的复制策略和同步机制，如主从复制、多主复制、一致性哈希等。 并发控制：在分布式系统中，多个节点同时对共享资源进行读写操作可能导致并发冲突和数据不一致。并发控制机制，如分布式锁、版本控制、乐观并发控制等，用于确保对共享资源的访问是安全和有序的。 故障处理和容错性：分布式系统中的节点可能会发生故障，如节点崩溃、网络分区等，这可能导致数据丢失或系统不可用。为了保证系统的可用性和数据的完整性，需要采用故障检测和恢复机制，如心跳检测、故障转移、数据备份等。 分布式系统的可扩展性：随着用户和数据量的增长，分布式系统需要能够方便地扩展节点数量和处理能力。设计和实现具有良好可扩展性的分布式系统需要考虑负载均衡、数据分片、分布式缓存等技术手段。 监控和管理：在分布式系统中，由于节点数量众多，监控和管理变得更加复杂。需要建立有效的监控系统来收集和分析系统的运行状态和性能指标，并采用自动化的管理工具来管理节点、配置和部署系统。 衡量分布式系统的指标 衡量分布式系统性能和质量的指标可以包括以下几个方面：
可用性：指系统处于正常运行状态的时间比例。如果用户无法访问系统，则称系统不可用。通常以百分比（如99.9%）表示。较高的可用性意味着系统更可靠，用户能够更稳定地访问和使用系统。
从技术角度来看，可用性主要与容错性有关。因为故障发生的概率随着组件数量的增加而增加，系统应该能够进行补偿，以确保随着组件数量的增加，系统的可靠性不会降低。
容错性是指系统在发生故障时仍能以明确定义的方式继续运行的能力。
**可扩展性：衡量分布式系统在面对不断增长的工作负载时，能够方便地扩展节点数量和处理能力的能力。**可扩展性可以包括水平扩展（增加节点数量）和垂直扩展（增加节点的处理能力）。
**一致性：表示分布式系统中的数据副本在不同节点之间保持一致的程度。**较高的一致性意味着系统中的数据在不同节点上的访问结果是相同的，而较低的一致性可能导致数据不一致的情况。
**可靠性：表示分布式系统在面对节点故障、网络故障或其他异常情况时能够继续正常运行的能力。**可靠性通常与容错性相关，包括故障检测、故障转移、数据备份等机制。
性能：是指计算机系统在使用的时间和资源相对于所完成的有用工作量来衡量的特征。
吞吐量：表示分布式系统在单位时间内能够处理的请求或事务数量。吞吐量越高，系统的处理能力越强，能够更高效地处理用户请求和数据处理任务。 响应时间：表示分布式系统对于用户请求的响应速度。较低的响应时间意味着系统能够更快地响应用户请求，提供更好的用户体验。 并发性能：衡量系统在处理并发请求时的能力。较好的并发性能意味着系统能够同时处理多个请求，并保持较低的响应时间和高吞吐量。 总结 任何计算机系统都需要完成两个基本任务：
存储 计算 随着任务规模变大：
1、使用单台计算机，硬件升级，成本过高 2、使用多台计算机，使用中档、大众化的硬件，成本降低 使用多台计算机存在如下特征：
分布性。计算机节点分布在不同的位置。 并行性。计算机节点可以同时进行计算和处理任务。 可扩展性：可以添加节点，提高处理能力。 不确定性。由于节点之间通信有延迟或者存在故障，会导致消息传递有延迟、节点信息存在不一致 使用多台计算机面临的问题：
节点的数量。
数量变多，增加系统故障概率，可能导致数据丢失或系统不可用。 数量变多，并行读写数据，会导致并发冲突和数据不一致。 节点之间的距离。
每个节点的时钟不同步，会导致网络延迟 节点之间数据需要复制和同步，会导致数据不一致性。 节点之间距离变远，会降低某些操作的性能。 所以，分布式系统要提供以下能力：
可用性。 可扩展性。可以增加节点数量和提高节点处理能力。 一致性。提高数据一致性。 可靠性。系统故障时，仍然能正常运行。 性能。 </description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》1.高层分布式系统</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-01/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-01/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。
这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。
在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。
《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。
原文链接：Distributed systems: for fun and profit
1. 高层分布式系统 分布式编程是利用多台计算机解决在单台计算机上可以解决的相同问题的一种技术。
任何计算机系统都需要完成两个基本任务：
存储 计算 分布式编程是一种艺术，通过利用多台计算机解决在单台计算机上可以解决的相同问题，通常是因为该问题已经超出了单台计算机的处理能力。
实际上，并没有强制要求我们使用分布式系统。如果拥有无限的资金和无限的研发时间，我们就不需要分布式系统。所有的计算和存储可以在一个魔盒上完成，这是一台单一的、极其快速和可靠的系统，你可以支付给别人来为你设计。
然而，很少有人拥有无限的资源。因此，他们必须在现实世界的成本效益曲线上找到合适的位置。在小规模情况下，升级硬件是一种可行的策略。然而，随着问题规模的增加，你会达到一个阶段，在这个阶段，要么不存在可以让你在单个节点上解决问题的硬件升级，要么成本过高。在这一点上，我欢迎你进入分布式系统的世界。
当前的现实是，只要通过容错软件将维护成本控制在较低水平，中档、大众化硬件提供了最佳的性价比。
计算主要受益于高端硬件，尤其是在能够通过内部内存访问取代缓慢的网络访问时。在需要节点间大量通信的任务中，高端硬件的性能优势有限。
正如 Barroso、Clidaras 和 Hölzle 的上图所示，假设所有节点都采用统一的内存访问模式，高端硬件和商用硬件之间的性能差距会随着集群规模的扩大而缩小。
理想情况下，添加一台新的机器将线性增加系统的性能和容量。但是，现实情况并非如此，因为由于存在独立的计算机，会产生一些开销。数据需要在计算机之间进行复制，计算任务需要进行协调等等。 这就是为什么值得研究分布式算法的原因——它们提供了针对特定问题的高效解决方案，以及关于可能性、正确实现的最低成本以及不可能性的指导。
这段文字的重点是在一个平凡但商业相关的环境中，即数据中心的分布式编程和系统。例如，我不会讨论由于具有异乎寻常的网络配置或在共享内存设置中出现的专门问题。此外，重点是探索系统设计空间，而不是优化任何特定设计——后者是一个更专门的文本主题。
我们想要实现的目标：可扩展性和其他好的东西 从我看来，一切都始于处理规模的需求。
在小规模下，大多数事情都是微不足道的，而同样的问题一旦超过一定的大小、容量或其他物理限制，就会变得更加困难。举起一块巧克力很容易，但举起一座山就很困难。数一下房间里有多少人很容易，但数一下国家里有多少人就很难。
所以一切都始于规模——可扩展性。非正式地说，在一个可扩展的系统中，当我们从小规模向大规模过渡时，事情不应该逐渐变得更糟。以下是另一种定义：
可扩展性是指系统、网络或进程处理不断增长的工作负载的能力，或者说它能够被扩大以适应这种增长的能力。
什么是在增长呢？嗯，你可以用几乎任何方式来衡量增长（人数、用电量等）。但有三个特别有趣的方面值得关注：
规模可扩展性：增加更多节点应该使系统线性加快；增加数据集的大小不应增加延迟。 地理可扩展性：应该可以利用多个数据中心来缩短响应用户查询所需的时间，同时以某种合理的方式处理跨数据中心的延迟。 管理可扩展性：添加更多节点不应增加系统的管理成本（例如管理员与机器的比率）。 当然，在真实的系统中，增长同时发生在多个不同的轴上；每个指标仅反映增长的某些方面。
可扩展的系统是一种随着规模的增加而持续满足用户需求的系统。有两个特别相关的方面——性能和可用性——可以通过多种方式来衡量。
性能（和延迟） 性能是指计算机系统在使用的时间和资源相对于所完成的有用工作量来衡量的特征。
根据具体情况，这可能涉及实现以下一项或多项：
对于给定的工作，响应时间短/延迟低 高吞吐量（处理工作率） 计算资源利用率低 针对任何这些结果进行优化都需要权衡。例如，系统可以通过处理更大批量的工作来实现更高的吞吐量，从而减少操作开销。由于批处理，权衡将是个别工作的响应时间更长。
我发现低延迟（实现较短的响应时间）是性能中最有趣的方面，因为它与物理（而不是财务）限制密切相关。使用财务资源来解决延迟问题比性能的其他方面更难。
对于延迟有很多非常具体的定义，但我真的很喜欢这个词的词源所唤起的想法：
延迟是指潜伏状态，延迟的或在某事物开始和发生之间的一段时间。
“潜在的”是什么意思？
潜在的是指某物存在或出现，但被隐藏、隐蔽或处于不活动状态。它描述了一种存在却不容易察觉或可见的状态，但它仍以隐藏或潜在的形式存在。
这个定义非常酷，因为它强调了延迟是指某件事发生到它产生影响或变得可见之间的时间。
例如，假设您感染了一种空气传播的病毒，该病毒会将人变成僵尸。潜伏期是指从你被感染到变成僵尸之间的时间。这就是潜伏期：已经发生的事情被隐藏起来的时间。
让我们假设我们的分布式系统只执行一项高级任务：给定一个查询，它会获取系统中的所有数据并计算一个结果。换句话说，将分布式系统视为一个数据存储，能够对其当前内容运行单个确定性计算（函数）：
result = query(all data in the system) 那么，对延迟来说重要的不是旧数据的数量，而是新数据在系统中“生效”的速度。例如，延迟可以根据写入对读者可见所需的时间来衡量。
基于这个定义的另一个关键点是，如果什么都没有发生，就没有“潜伏期”。数据不改变的系统不会（或不应该）存在延迟问题。
在分布式系统中，存在一个无法克服的最小延迟：光速限制了信息传输的速度，而硬件组件每个操作都会产生一定的最小延迟成本（例如内存、硬盘以及 CPU）。
最小延迟对查询的影响程度取决于这些查询的性质以及信息需要传输的物理距离。
可用性（和容错） 可扩展系统的第二个方面是可用性。
可用性是指系统处于正常运行状态的时间比例。如果用户无法访问系统，则称系统不可用。
分布式系统使我们能够实现在单一系统上很难实现的理想特性。例如，单个机器无法容忍任何故障，因为它要么发生故障，要么正常运行。
分布式系统可以采用一堆不可靠的组件，并在它们之上构建一个可靠的系统。
没有冗余的系统只能达到其底层组件的可用性。而具备冗余的系统可以容忍部分故障，从而提高可用性。 值得注意的是，“冗余”可以在不同层面上有不同的含义，比如组件、服务器、数据中心等。
从公式上讲，可用性为： Availability = uptime / (uptime + downtime) 。
从技术角度来看，可用性主要与容错性有关。因为故障发生的概率随着组件数量的增加而增加，系统应该能够进行补偿，以确保随着组件数量的增加，系统的可靠性不会降低。
例如：
可用性 ％ 90%（“一个九”） 一个多月了 99%（“两个九”） 少于 4 天 99.9%（“三个九”） 不到 9 小时 99.</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》2.抽象层次的上下</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-02/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-02/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。
这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。
在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。
《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。
原文链接：Distributed systems: for fun and profit
2. 抽象层次的上下 在本章中，我们将在抽象层次之间穿梭，探讨一些不可能性结果（CAP 和 FLP），然后出于性能考虑回归到更低层次。
如果你有进行过编程，抽象层次的概念可能对你来说很熟悉。你总是在某个抽象层次上进行工作，通过某个 API 与较低层次的接口进行交互，并可能为用户提供一些更高层次的 API 或用户界面。计算机网络的七层 OSI 模型就是一个很好的例子。
分布式编程很大程度上涉及处理分布的后果（显而易见！）。也就是说，我们面临着现实中存在许多节点的现实和我们希望系统“像一个单一系统一样工作”的愿望之间存在着紧张关系。这意味着需要找到一个良好的抽象，平衡可能性、可理解性和性能。
当我们说 X 比 Y 更抽象时，我们是指 X 没有引入任何与 Y 根本不同的新内容。事实上，X 可能会去除 Y 的某些方面或以更易于处理的方式呈现它们。其次，X 在某种意义上比 Y 更容易理解，假设 X 从 Y 中去除的内容对于当前问题并不重要。
如尼采所写：
每个概念都是通过我们将不相等的事物等同起来形成的。没有一片叶子完全等同于另一片叶子，概念“叶子”是通过对这些个体差异进行任意抽象而形成的，通过遗忘区别；现在它产生了一个想法，即在自然界中可能存在除了叶子之外的东西，这些东西将是“叶子”的一种原始形式 - 所有叶子都已经被编织、标记、复制、着色、卷曲和绘制，但是由于技术不熟练，没有一份副本能够成为原始形式的正确、可靠和忠实的图像。
抽象本质上是虚构的。每种情况都是独特的，每个节点也是如此。但是抽象使得世界变得可管理：简化的问题陈述 - 不受现实约束 - 更易于分析，并且只要我们没有忽略任何重要的东西，解决方案就是广泛适用的。
事实上，如果我们保留下来的东西是重要的，那么我们可以得出的结果就会具有广泛的适用性。这就是为什么不可能性结果如此重要：它们采用了问题的最简单可能的表述，并证明在一些约束或假设条件下无法解决该问题。
所有的抽象都会忽略一些与现实独特的东西，以便将它们等同起来。关键是要摆脱一切非必要的东西。你如何知道什么是必要的？嗯，你可能事先不知道。
每次我们在系统规范中排除系统的某个方面时，我们都存在引入错误和/或性能问题的风险。这就是为什么有时我们需要朝着相反的方向前进，并有选择性地引入一些真实硬件和现实世界问题的方面。重新引入一些特定的硬件特性（例如物理顺序性）或其他物理特性可能足以获得足够好的性能的系统。
系统模型 在分布式系统中，分布是一个关键特性。具体而言，分布式系统中的程序具有以下特点：
在独立节点上并发运行&amp;hellip; 通过可能引入非确定性和消息丢失的网络连接&amp;hellip; 没有共享内存或共享时钟。 这有许多含义：
每个节点并发执行程序。 知识是局部的：节点仅能快速访问本地状态，对于全局状态的任何信息都可能过时。 节点可以独立发生故障并进行恢复。 消息可能会延迟或丢失（与节点故障无关；很难区分网络故障和节点故障）。 而且节点之间的时钟不同步（本地时间戳与全局实际时间顺序不对应，很难观察到）。 系统模型列举了与特定系统设计相关的许多假设。
系统模型是关于实现分布式系统的环境和设施的一组假设。
系统模型在其对环境和设施的假设方面存在差异。这些假设包括：
节点的能力和故障方式 通信链路的操作方式以及可能的故障方式 整个系统的属性，例如有关时间和顺序的假设 健壮的系统模型是对假设最弱的模型：针对这种系统编写的任何算法都对不同的环境非常容忍，因为它有非常少且非常弱的假设。
另一方面，我们可以通过进行强假设来创建一个易于推理的系统模型。例如，假设节点不会发生故障意味着我们的算法不需要处理节点故障。然而，这样的系统模型是不现实的，因此在实践中很难应用。
让我们更详细地看一下节点、链路、时间和顺序的属性。
我们系统模型中的节点 节点作为计算和存储的主机。它们具有以下特点：
能够执行程序。 能够将数据存储到易失性内存（在故障时可能丢失）和稳定状态（在故障后可以读取）。 时钟（可以被假设为准确或不准确）。 节点执行确定性算法：局部计算、计算后的本地状态和发送的消息是根据接收到的消息和接收消息时的本地状态唯一确定的。
有许多可能的故障模型描述了节点可能发生的故障方式。在实践中，大多数系统假设使用崩溃恢复故障模型：也就是说，节点只能通过崩溃来发生故障，并且可以在稍后某个时间点（可能）进行恢复。
另一种选择是假设节点可以以任意方式发生故障。这被称为拜占庭容错。拜占庭故障在实际的商业系统中很少处理，因为对任意故障具有弹性的算法运行成本更高，实现更复杂。在这里我不会讨论拜占庭容错。
我们系统模型中的通信链路 通信链接将各个节点彼此连接，并允许消息在任意方向上发送。许多讨论分布式算法的书籍假设每对节点之间都有独立的链接，这些链接为消息提供了先进先出（FIFO）的顺序，只能传递已发送的消息，并且已发送的消息可能会丢失。
某些算法假设网络是可靠的：消息永远不会丢失，也不会无限期地延迟。这在某些实际情况下可能是合理的假设，但一般来说，更倾向于将网络视为不可靠的，可能会发生消息丢失和延迟的情况。
当网络发生故障而节点本身仍可运行时，就会发生网络分区。在这种情况下，消息可能会丢失或延迟，直到网络分区被修复。分区的节点可能对某些客户端是可访问的，因此必须与崩溃的节点进行不同处理。下图说明了节点故障和网络分区的区别：
通常很少对通信链接做进一步的假设。我们可以假设链接只能单向工作，或者可以为不同的链接引入不同的通信成本（例如由于物理距离引起的延迟）。然而，在商业环境中，除了长距离链接（广域网延迟）之外，这些很少是关注的问题，因此我在这里不会讨论它们；成本和拓扑的更详细模型可以在复杂性的代价下实现更好的优化。
时间/顺序假设 物理分布的一个结果是每个节点以独特的方式体验世界。这是无法避免的，因为信息只能以光速传播。如果节点之间的距离不同，那么从一个节点发送到其他节点的任何消息都会在其他节点以不同的时间到达，并有可能以不同的顺序到达。
时间假设是捕捉我们在多大程度上考虑这个现实的便捷方式。主要的两种选择是：
同步系统模型。进程以同步方式执行；消息传输延迟有已知的上界；每个进程具有准确的时钟。 异步系统模型。没有时间假设 - 例如进程以独立的速率执行；消息传输延迟没有上界；没有可靠的时钟存在。 同步系统模型对时间和顺序施加了许多限制。它基本上假设节点有相同的体验：发送的消息总是在特定的最大传输延迟内接收，并且进程以同步方式执行。这很方便，因为它允许您作为系统设计者对时间和顺序做出假设，而异步系统模型则不允许。
异步性是一种非假设：它只是假设您不能依赖于时间（或“时间传感器”）。</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》3.时间及顺序</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-03/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-03/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。
这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。
在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。
《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。
原文链接：Distributed systems: for fun and profit
3. 时间及顺序 什么是顺序，为什么它很重要？
你说的“什么是顺序”是什么意思？
我的意思是，为什么我们对顺序如此着迷？为什么我们关心 A 是否发生在 B 之前？为什么我们不关心其他属性，比如“颜色”？
好吧，我的疯狂朋友，让我们回到分布式系统的定义来回答这个问题。
你可能还记得，我将分布式编程描述为使用多台计算机解决单台计算机可以解决的同一个问题的艺术。
事实上，这正是对顺序如此着迷的核心所在。任何只能一次执行一项任务的系统都会创建操作的总体顺序。就像人们通过一扇门一样，每个操作都有明确定义的前任和后继。这基本上是我们努力保留的编程模型。
传统的模型是：一个程序，一个进程，一个在一个 CPU 上运行的内存空间。操作系统抽象了可能存在多个 CPU 和多个程序的事实，以及计算机内存实际上是多个程序共享的。我并不是说线程编程和事件驱动编程不存在；只是它们是“一个/一个/一个”模型之上的特殊抽象。程序被编写成按照一定顺序执行：从上往下执行。
顺序作为一种属性受到了如此多的关注，是因为定义“正确性”的最简单方法是说“它的工作方式与单台计算机上的工作方式相同”。而通常这意味着 a）我们运行相同的操作，b）我们按照相同的顺序运行它们 - 即使有多台计算机。
保持顺序（如单个系统定义的顺序）的分布式系统的优点在于它们是通用的。你不需要关心操作是什么，因为它们将与在单台计算机上完全相同的方式执行。这很棒，因为你知道无论操作是什么，你都可以使用相同的系统。
实际上，分布式程序在多个节点上运行，具有多个 CPU 和多个操作流。你仍然可以分配一个总体顺序，但这需要准确的时钟或某种形式的通信。你可以使用完全准确的时钟为每个操作标记时间戳，然后利用它来确定总体顺序。或者你可以使用某种通信系统，使得可以分配类似总体顺序的连续编号。
全序和偏序 在分布式系统中，自然状态是偏序。网络和独立节点都不对相对顺序做出任何保证，但在每个节点上，你可以观察到一个局部顺序。
总序是一种二元关系，它为某个集合中的每个元素定义了一个顺序。
当两个不同的元素可比较时，其中一个大于另一个。在偏序集中，某些元素对不可比较，因此偏序并不指定每个项目的确切顺序。
总序和偏序都是传递性和反对称性的。对于集合 X 中的所有 a、b 和 c，以下陈述在总序和偏序中都成立：
If a ≤ b and b ≤ a then a = b (antisymmetry); If a ≤ b and b ≤ c then a ≤ c (transitivity); 然而，总序是完全的：
a ≤ b or b ≤ a (totality) for all a, b in X 而偏序是自反的：
a ≤ a (reflexivity) for all a in X 注意，全序性蕴含自反性；因此，偏序是总序的一种较弱的变体。在偏序中的某些元素上，全序性不成立 - 换句话说，其中一些元素不可比较。</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》4.复制</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-04/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-04/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。
这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。
在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。
《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。
原文链接：Distributed systems: for fun and profit
4. 复制 复制问题是分布式系统中的众多问题之一。与诸如领导者选举、故障检测、互斥、共识和全局快照等其他问题相比，我选择关注复制问题，因为这通常是人们最感兴趣的部分。并行数据库在复制特性方面的差异化就是一个例子。此外，复制为许多子问题提供了一个上下文，例如领导者选举、故障检测、共识和原子广播。
复制是一个组通信问题。什么样的安排和通信模式能够满足我们所期望的性能和可用性特性？在面对网络分区和同时节点故障的情况下，我们如何确保容错性、耐久性和非发散性？
同样，有许多方法可以解决复制问题。我在这里采用的方法只是看一下具有复制功能的系统可能具有的高级模式。从可视化的角度来看，有助于将讨论集中在整体模式上，而不是具体涉及的消息传递。我在这里的目标是探索设计空间，而不是解释每个算法的具体细节。
让我们首先定义一下复制是什么样子。我们假设我们有一些初始数据库，并且客户端发出请求来改变数据库的状态。
这种安排和通信模式可以分为几个阶段：
（请求）客户端向服务器发送请求 （同步）进行复制的同步部分 （响应）将响应返回给客户端 （异步）进行复制的异步部分 根据这些阶段，我们可以创建不同的通信模式。我们选择的模式将对性能和可用性产生影响，具体取决于所选择的算法。
同步复制 第一个模式是同步复制（也称为主动复制、急切复制、推送复制或悲观复制）。让我们画出它的示意图：
在这里，我们可以看到三个明显的阶段：首先，客户端发送请求。接下来，我们所称的同步复制的部分发生。这个术语指的是客户端被阻塞 - 等待系统的回复。
在同步阶段期间，第一个服务器会联系其他两个服务器，并等待收到所有其他服务器的回复。最后，它向客户端发送一个响应，告知其结果（例如成功或失败）。
这一切似乎很简单。在不讨论同步阶段算法的细节的情况下，我们能从这个特定的通信模式安排中得出什么结论呢？首先，注意这是一种 N-对-N 的写入方式：在返回响应之前，它必须被系统中的每个服务器看到并确认。
从性能的角度来看，这意味着系统的速度将取决于其中最慢的服务器。该系统还对网络延迟的变化非常敏感，因为它要求在继续之前每个服务器都必须回复。
考虑到 N-对-N 的方式，系统无法容忍任何服务器的丢失。当一个服务器丢失时，系统无法再写入所有节点，因此无法继续进行。在这种设计中，它可能能够对数据提供只读访问，但在节点故障后不允许进行修改。
这种安排可以提供非常强大的耐久性保证：当返回响应时，客户端可以确信所有 N 个服务器都已接收、存储和确认了请求。为了丢失一个已接受的更新，所有 N 个副本都需要丢失，这是一个非常好的保证。
异步复制 让我们将其与第二种模式进行对比 - 异步复制（也称为被动复制、拉式复制或惰性复制）。正如您可能已经猜到的，这与同步复制相反：
在这种情况下，主节点（也称为领导者或协调者）立即向客户端返回响应。它最多只会在本地存储更新，但不会同步执行任何重要工作，客户端也不需要等待更多的服务器之间的通信轮次。
在稍后的阶段，复制任务的异步部分发生。在这里，主节点使用某种通信模式联系其他服务器，并更新它们的数据副本。具体的实现取决于所使用的算法。
在不涉及算法细节的情况下，我们对这种具体的安排能得出什么结论呢？嗯，这是一种写 1-对-N 的方式：立即返回响应，更新传播在稍后发生。
从性能的角度来看，这意味着系统很快：客户端不需要额外花费时间等待系统内部完成工作。系统对网络延迟更具容忍性，因为内部延迟的波动不会导致客户端需要额外等待。
这种安排只能提供弱的或概率性的耐久性保证。如果没有出现问题，数据最终会复制到所有 N 台机器上。然而，如果在此之前包含数据的唯一服务器丢失，数据将永久丢失。
考虑到 1-对-N 的方式，只要至少有一个节点正常运行，系统就可以保持可用性（理论上至少如此，但实际上负载可能会太高）。这种纯粹的惰性方式不提供耐久性或一致性保证；你可以向系统写入数据，但如果发生任何故障，不能保证能够读取你所写入的内容。
最后值得注意的是，被动复制无法确保系统中的所有节点始终包含相同的状态。如果在多个位置接受写入操作，并且不要求这些节点同步一致，那么就会存在发散的风险：不同位置的读取可能返回不同的结果（特别是在节点故障和恢复后），并且无法强制执行全局约束（需要与所有人通信）。
我没有详细讨论读取（而不是写入）时的通信模式，因为读取模式实际上是根据写入模式来确定的：在读取过程中，你希望与尽可能少的节点进行联系。我们将在仲裁机制的背景下进一步讨论这个问题。
我们只讨论了两种基本的安排，并没有涉及具体的算法。然而，我们已经能够了解可能的通信模式以及它们的性能、耐久性保证和可用性特性的一些信息。
主要复制方法概述 在讨论了同步和异步复制这两种基本复制方法之后，让我们来看一下主要的复制算法。
有很多不同的方式来对复制技术进行分类。在同步与异步之后，我想引入的第二个区别是：
防止发散的复制方法（单副本系统）和 存在发散风险的复制方法（多主系统） 第一组方法具有“行为像单一系统”的特性。特别是在部分故障发生时，系统确保只有一个副本处于活动状态。此外，系统确保副本始终保持一致。这被称为共识问题。
当多个进程（或计算机）就某个值达成共识时，它们实现了共识。更具体地说：
一致性：每个正确的进程必须就同一个值达成一致。 完整性：每个正确的进程最多决定一个值，并且如果它决定了某个值，则该值必须由某个进程提出。 终止性：所有进程最终都会达成决策。 有效性：如果所有正确的进程提议相同的值 V，则所有正确的进程都决定 V。 互斥、领导者选举、组播和原子广播都是共识问题的更一般实例。维护单一副本一致性的复制系统需要以某种方式解决共识问题。 维护单一副本一致性的复制算法包括：
1n 消息（异步主/备份） 2n 消息（同步主/备份） 4n 消息（两阶段提交，多 Paxos） 6n 消息（三阶段提交，带有重复领导者选举的 Paxos） 这些算法在容错性方面有所不同（例如，它们可以容忍的故障类型）。我根据算法执行期间交换的消息数量进行了简单的分类，因为我认为尝试回答“通过增加消息交换我们得到了什么？”这个问题很有趣。
下面的图表，改编自 Google 的 Ryan Barret，描述了不同选项的一些方面：
上述图表中的一致性、延迟、吞吐量、数据丢失和故障转移特性实际上可以追溯到两种不同的复制方法：同步复制（例如，在响应之前等待）和异步复制。当您等待时，性能会变差，但可以获得更强的保证。在讨论分区（和延迟）容忍性时，2PC 和仲裁系统之间的吞吐量差异将变得明显。
在该图表中，强制弱（/最终）一致性的算法被归类为一类（&amp;ldquo;gossip&amp;rdquo;）。然而，我将更详细地讨论弱一致性的复制方法 - gossip 和（部分）仲裁系统。&amp;ldquo;事务&amp;quot;行实际上更多地涉及全局谓词评估，而在具有弱一致性的系统中不支持（尽管可以支持本地谓词评估）。</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》5.复制：弱一致性模型协议</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-05/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-05/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。
这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。
在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。
《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。
原文链接：Distributed systems: for fun and profit
5. 复制：弱一致性模型协议 现在，我们已经研究了一些可以在越来越现实的故障情况下实施单副本一致性的协议，让我们转向当我们放弃单副本一致性的要求时所打开的选择世界。
总的来说，很难找到一个单一的维度来定义或描述允许副本发散的协议。大多数这样的协议都具有高可用性，关键问题更多地在于最终用户是否发现这些保证、抽象和 API 对他们的目的有用，尽管在节点和/或网络故障发生时副本可能发散。
为什么弱一致性系统没有更受欢迎呢？
正如我在介绍中所述，我认为分布式编程很大程度上涉及处理分布的两个结果所带来的影响：
信息以光速传播； 独立的事物独立地发生故障。 由于信息传输速度受限，节点以不同且独特的方式体验世界。在单个节点上进行计算很容易，因为一切都按照可预测的全局总序发生。在分布式系统上进行计算很困难，因为没有全局总序。
长期以来（例如几十年的研究时间），我们通过引入全局总序来解决这个问题。我已经讨论了许多实现强一致性的方法，通过在没有自然总序的情况下以容错方式创建顺序的方法。
当然，问题在于强制执行顺序是昂贵的。这在大规模的互联网系统中特别突出，因为系统需要保持可用性。强一致性的系统不像分布式系统那样运行，而是像单个系统，这对于分区期间的可用性是不利的。
此外，对于每个操作，通常需要联系大多数节点，而且通常不止一次（正如您在关于 2PC 的讨论中所看到的）。这在需要在地理上分布以为全球用户提供足够性能的系统中尤其困难。
因此，默认情况下像单个系统一样运行可能并不理想。
也许我们希望拥有一种可以编写不使用昂贵协调的代码，但仍返回一个“可用”值的系统。我们将允许不同的副本彼此发散-既为了保持效率，也为了容忍分区-然后尝试以某种方式处理这种发散。
最终一致性表达了这个想法：节点在一段时间内可以相互发散，但最终它们将达成一致的值。
在提供最终一致性的系统集合中，有两种类型的系统设计：
带有概率保证的最终一致性。这种类型的系统可以在以后的某个时间点检测到冲突的写操作，但不能保证结果与某个正确的顺序执行等效。换句话说，冲突的更新有时会导致将较新的值覆盖为较旧的值，并且在正常操作（或分区）期间可能会出现一些异常情况。
近年来，最有影响力的提供单副本一致性的系统设计是亚马逊的 Dynamo，我将以它作为提供带有概率保证的最终一致性系统示例进行讨论。
带有强保证的最终一致性。这种类型的系统保证最终结果会收敛到一个共同的值，该值等同于某个正确的顺序执行。换句话说，这样的系统不会产生任何异常结果；在没有任何协调的情况下，您可以构建相同服务的副本，并且这些副本可以以任何模式进行通信并以任何顺序接收更新，只要它们都看到相同的信息，它们最终会就最终结果达成一致。
CRDT（收敛复制数据类型）是一种数据类型，它保证在网络延迟、分区和消息重排序的情况下收敛到相同的值。它们可以被证明是收敛的，但可以实现为 CRDT 的数据类型是有限的。
CALM（一致性作为逻辑单调性）猜想是相同原则的另一种表达方式：它将逻辑单调性与收敛等同起来。如果我们可以得出某个东西在逻辑上是单调的，那么在没有协调的情况下运行它也是安全的。收敛分析-特别是在 Bloom 编程语言中的应用-可用于指导程序员在何时何地使用强一致性系统的协调技术以及在何时可以安全地执行无需协调的操作。
协调不同的操作指令 不强制执行单副本一致性的系统是什么样子呢？让我们通过几个例子来更具体地了解。
也许最明显的非强制执行单副本一致性系统的特征是它们允许副本彼此发散。这意味着没有严格定义的通信模式：副本可以相互分离，但仍然保持可用并接受写操作。
让我们想象一个由三个副本组成的系统，每个副本彼此分离。例如，这些副本可能位于不同的数据中心，并因某种原因无法通信。在分离期间，每个副本仍然可用，可以接受一些客户端的读写操作：
[Clients] - &amp;gt; [A] --- Partition --- [Clients] - &amp;gt; [B] --- Partition --- [Clients] - &amp;gt; [C] 一段时间后，分区会修复并且副本服务器会交换信息。他们从不同的客户那里收到了不同的更新，并且彼此存在分歧，因此需要进行某种协调。我们希望所有的副本都收敛到相同的结果。
[A] \ --&amp;gt; [merge] [B] / | | [C] ----[merge]---&amp;gt; result 考虑具有弱一致性保证的系统的另一种方法是想象一组客户端按某种顺序向两个副本发送消息。由于没有强制执行单一总顺序的协调协议，因此消息可以在两个副本上以不同的顺序传递：
[Clients] --&amp;gt; [A] 1, 2, 3 [Clients] --&amp;gt; [B] 2, 3, 1 从本质上讲，这就是我们需要协调协议的原因。例如，假设我们尝试连接一个字符串，消息 1、2 和 3 中的操作为：
1: { operation: concat(&amp;#39;Hello &amp;#39;) } 2: { operation: concat(&amp;#39;World&amp;#39;) } 3: { operation: concat(&amp;#39;!</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》6.进一步阅读和附录</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-06/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-06/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者Mikito Takada撰写，介绍了构建分布式系统的基本概念、原则和挑战。
这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。
在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。
《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。
原文链接：Distributed systems: for fun and profit
6. 进一步阅读和附录 如果您已经做到了这一点，谢谢您。
如果您喜欢这本书，请在 Github（或 Twitter）上关注我。我很高兴看到我产生了某种积极的影响。 “创造的价值比你获取的价值更多”等等。
非常感谢：logpath、alexras、globalcitizen、graue、frankshearar、roryokane、jpfuentes2、eeror、cmeiklejohn、stevenproctor eos2102 和 steveloughran 的帮助！当然，任何错误和遗漏都是我的错！
值得注意的是，我关于最终一致性的章节相当以伯克利为中心；我想改变这一点。我还跳过了一个重要的时间用例：一致的快照。我还应该扩展几个主题：即，对安全性和活性属性的明确讨论以及对一致性哈希的更详细讨论。不过，我要去《Strange Loop 2013》了，所以无论如何。
如果这本书有第六章，它可能是关于如何利用和处理大量数据的。似乎最常见的“大数据”计算类型是通过单个简单程序传递大型数据集的计算。我不确定后续章节会是什么（也许是高性能计算，因为当前的重点是可行性），但我可能会在几年后知道。
有关分布式系统的书籍 Distributed Algorithms (Lynch) 这可能是最常推荐的分布式算法书籍。我也推荐它，但有一个警告。它非常全面，但是是为研究生读者编写的，因此在了解从业者最感兴趣的内容之前，您将花费大量时间阅读同步系统和共享内存算法。
Introduction to Reliable and Secure Distributed Programming (Cachin, Guerraoui &amp;amp; Rodrigues) 对于一个修炼者来说，这是一件有趣的事。它很短并且充满了实际的算法实现。
Replication: Theory and Practice 如果您对复制感兴趣，这本书非常棒。关于复制的章节主要基于对本书有趣部分以及最近阅读的内容的综合。
Distributed Systems: An Algorithmic Approach (Ghosh) Introduction to Distributed Algorithms (Tel) Transactional Information Systems: Theory, Algorithms, and the Practice of Concurrency Control and Recovery (Weikum &amp;amp; Vossen) 本书介绍的是传统的交易信息系统，例如：本地 RDBMS。最后有两章介绍分布式事务，但本书的重点是事务处理。
Transaction Processing: Concepts and Techniques by Gray and Reuter 经典之作。我发现 Weikum &amp;amp; Vossen 更更新。
开创性论文 每年，Edsger W. Dijkstra 分布式计算奖都会颁发给有关分布式计算原理的杰出论文。查看完整列表的链接，其中包括经典内容，例如：
&amp;ldquo;Time, Clocks and Ordering of Events in a Distributed System&amp;rdquo; - Leslie Lamport &amp;ldquo;Impossibility of Distributed Consensus With One Faulty Process&amp;rdquo; - Fisher, Lynch, Patterson &amp;ldquo;Unreliable failure detectors and reliable distributed systems&amp;rdquo; - Chandra and Toueg Microsoft 学术搜索有一个分布式和并行计算领域的顶级出版物列表，按引用次数排序 - 这可能是一个有趣的列表，可以浏览更多经典著作。</description>
    </item>
    <item>
      <title>[译]给年轻的工程师们的关于分布式系统的一些笔记</title>
      <link>https://blog.chensoul.cc/posts/2023/11/10/notes-on-distributed-systems-for-young-bloods/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/10/notes-on-distributed-systems-for-young-bloods/</guid>
      <description>我一直在思考分布式系统工程师在工作中学到的教训。我们大部分的教导都来自于在生产环境中犯过的错误留下的伤痕。这些伤痕固然是有用的提醒，但让更多的工程师能够完整地保留手指会更好。
新的系统工程师在自我学习中会遇到分布式计算的谬论和CAP定理。但这些都是抽象的概念，缺乏针对经验不足的工程师直接可行的建议。让人惊讶的是，新工程师在开始工作时所了解到的背景信息是如此之少。
下面是我作为一名分布式系统工程师学到的一些经验教训，值得告诉新工程师。其中一些经验是微妙的，一些是令人惊讶的，但没有一条是有争议的。这个列表是为了引导新的分布式系统工程师思考他们所从事领域的问题，虽然不是全面的，但是是一个很好的开始。
这个列表最糟糕的特点是它主要关注技术问题，很少讨论工程师可能遇到的社交问题。由于分布式系统需要更多的机器和资本，它们的工程师往往需要与更多的团队和更大的组织合作。社交问题通常是任何软件开发者工作中最困难的部分，也许对于分布式系统的开发来说尤其如此。
我们的背景、教育和经验使我们倾向于采用技术解决方案，即使社交解决方案可能更高效、更令人满意。让我们试着纠正这一点。与计算机相比，人们并不那么挑剔，即使他们的接口没有那么标准化。
好了，我们开始吧。
分布式系统是不同的，因为它们经常失败。 当被问及是什么将分布式系统与软件工程的其他领域区分开来时，这位新工程师经常引用延迟，认为这是使分布式计算变得困难的原因。
但他们错了。分布式系统工程的区别在于失败的概率，更糟糕的是，部分失败的概率。如果格式良好的互斥锁解锁失败并出现错误，我们可以假设该过程不稳定并使其崩溃。但是，分布式互斥锁解锁的失败必须内置到锁定协议中。
没有从事过分布式计算的系统工程师会想出一些想法，比如“好吧，它只是将写入发送到两台机器”或“它会不断重试写入，直到它成功”。这些工程师还没有完全接受（尽管他们通常在理智上认识到）网络系统比只存在于一台机器上的系统更容易失败，而且故障往往是部分的而不是全部的。
其中一个写入可能会成功，而另一个写入失败，那么现在我们如何获得一致的数据视图呢？这些部分故障更难推理。
交换机故障、垃圾回收暂停导致领导者“消失”、套接字写操作似乎成功但实际上在另一台机器上失败、一台机器上的慢速磁盘驱动引起整个集群中的通信协议变慢等等。从本地内存读取比通过几个交换机读取更稳定。。
为失败而设计！
编写健壮的分布式系统比编写健壮的单机系统成本更高。 与单机解决方案相比，创建强大的分布式解决方案需要更多的资金，因为只有许多计算机才会发生故障。虚拟机和云技术使分布式系统工程更便宜，但不像能够在您已经拥有的计算机上进行设计、实施和测试那样便宜。并且存在难以在单台机器上复制的故障条件。
无论是因为它们只发生在比共享机器上可以容纳的数据集大小大得多的数据集上，还是在数据中心的网络条件下，分布式系统往往需要实际的（而不是模拟的）分发来清除它们的错误。当然，模拟非常有用。
健壮的开源分布式系统远不如健壮的单机系统常见。长时间运行多台机器的成本是开源社区的负担。业余爱好者和业余爱好者是开源软件的引擎，他们没有可用的财务资源来探索或解决分布式系统将遇到的许多问题。业余爱好者在空闲时间使用他们已经拥有的机器编写开源代码以取乐。
要找到愿意启动、维护和支付一堆机器的开源开发人员要困难得多。
为公司实体工作的工程师已经填补了部分空缺。但是，其组织的优先级可能与组织的优先级不一致。
虽然开源社区中的一些人已经意识到了这个问题，但它还没有得到解决。这很难。
协调非常困难。 尽可能避免协调机器。这通常被描述为“水平可伸缩性”。水平可扩展性的真正诀窍是独立性——能够将数据传送到机器上，从而将这些机器之间的通信和共识保持在最低限度。每当两台机器必须就某件事达成一致时，服务就会变得更难实现。
信息的传播速度是有上限的，网络通信比你想象的要脆弱，你对什么是共识的想法可能是错误的。在这里，了解 Two Generals 和 拜占庭将军 的问题很有用。（哦，Paxos真的很难实现；这不是脾气暴躁的老工程师认为他们比你更了解。）
如果你能把你的问题放在内存中，那可能是微不足道的。 对于分布式系统工程师来说，一台机器的本地问题很容易解决。当数据距离几个开关而不是几个指针取消引用时，弄清楚如何快速处理数据会更难。在分布式系统中，自计算机科学开始以来就记录的陈旧效率技巧不再适用。
对于在单台机器上运行的算法，有大量的文献和实现，因为大部分计算都是在单一的、不协调的机器上完成的。对于分布式系统来说，存在的数量要少得多。
“很慢”是你调试过的最难的问题。 “速度慢”可能意味着执行用户请求所涉及的一个或多个系统速度较慢。这可能意味着跨多台计算机的转换管道的一个或多个部分速度较慢。“它很慢”很难，部分原因是问题陈述没有提供很多关于缺陷位置的线索。部分故障，即那些没有出现在你通常查找的图表上的故障，潜伏在一个黑暗的角落里。
而且，在退化变得非常明显之前，您将无法获得那么多的资源（时间、金钱和工具）来解决它。Dapper 和 Zipkin 的出现是有原因的。
**在整个系统中实现反压机制。**反压是服务系统向请求系统发出故障信号，并由请求系统处理这些故障以防止自身和服务系统过载。设计反压意味着在负载过重和系统故障时限制资源使用。这是创建健壮的分布式系统的基本构建块之一。
实现反压通常涉及以下两种方式之一：要么将新消息丢弃，要么在资源受限或发生故障时将错误返回给用户（并在两种情况下增加指标）。对于与其他系统的连接和请求，超时和指数退避也是至关重要的。
如果没有反压机制，可能会发生级联故障或意外消息丢失。当一个系统无法处理另一个系统的故障时，它倾向于将故障传播给依赖它的另一个系统。
寻找实现部分可用性的方法。 部分可用性是指即使系统的某些部分发生故障，仍能返回一些结果。
搜索是一个理想的案例来探讨这个问题。搜索系统在结果质量和用户等待时间之间进行权衡。一个典型的搜索系统会设置一个时间限制，如果在搜索所有文档之前超过了时间限制，它会返回已经收集到的结果。这使得搜索在面对间歇性减速和错误时更容易扩展，因为这些故障被视为无法搜索所有文档的情况。系统允许返回部分结果给用户，并增加了其弹性。
再以Web应用程序中的私密消息功能为例。无论你做什么，私密消息的存储机器都可能同时宕机，用户会注意到这一点。那么在这个系统中，我们希望出现什么样的部分故障呢？
这需要一些思考。一般来说，人们对于无法使用私密消息功能（或许是其他一些用户也无法使用）会更容忍，而对于所有用户中有一些消息丢失则更为不满意。如果服务过载或其中一台机器故障，只让一小部分用户无法使用比让更大比例的用户丢失数据更可取。除此之外，我们可能不希望一个无关的功能（比如公共图片上传）受到影响，只因为私密消息功能出现问题。我们愿意付出多少努力来保持这些故障域的独立？
能够在部分可用性中识别这些权衡是很有帮助的。
指标是完成工作的唯一途径。 公开指标（如延迟百分比、特定操作的计数器增加、变化速率等）是弥合您对系统在生产环境中所做的假设与实际情况之间差距的唯一途径。了解系统在第20天的行为与第15天的行为有何不同，是成功工程和失败巫术之间的区别。当然，指标是了解问题和行为的必要手段，但并不足以知道接下来该做什么。
稍微提一下日志记录。日志文件是很有用的，但它们往往会欺骗人。例如，很常见的情况是几个错误类别的日志记录占据了日志文件的很大比例，但实际上在请求中的比例非常低。因为在大多数情况下记录成功是多余的（并且在大多数情况下会耗尽磁盘空间），而且工程师经常错误地猜测哪些错误类别是有用的，所以日志文件中充斥着各种奇怪的信息。最好以一种假设有人会阅读日志但没有看过代码的方式进行日志记录。
我见过很多次由于另一位工程师（或者我自己）过于强调日志中的一些奇怪现象而导致故障延长，而没有先将其与指标进行对比。我还见过另一位工程师（或者我自己）从少数几行日志中推断出整套失败行为的情况。但请注意：a) 我们之所以记住这些成功案例，是因为它们非常罕见；b) 除非指标或实验证实了故事，否则你并不是福尔摩斯（Sherlock）。
使用百分位数而不是平均值。 在绝大多数分布式系统中，百分位数（50th、99th、99.9th、99.99th）比平均值更准确、更有信息量。使用平均值假设正在评估的指标遵循正态分布曲线，但在实践中，这只适用于少数工程师关心的指标。 &amp;ldquo;平均延迟&amp;rdquo; 是一个常见的报告指标，但我从未见过一个延迟遵循正态分布曲线的分布式系统。如果指标不遵循正态分布曲线，平均值就没有意义，会导致错误的决策和理解。通过使用百分位数来避免这个陷阱。默认使用百分位数，你将更好地了解用户真正看待你的系统的方式。
学会估算你的容量。 因此，你将会知道一天有多少秒。知道你需要多少台机器来执行一个任务是一个持久系统和一个在工作开始3个月后需要被替换的系统之间的区别。或者更糟糕的是，在你完成将其投入生产之前就需要被替换。
以推文为例。在一台普通的机器上，你可以将多少个推文ID存放在内存中? 嗯，到2012年底，一台典型的机器有24 GB的内存，你需要4-5 GB的开销来运行操作系统，另外还需要至少几个GB来处理请求，而一个推文ID占用8个字节。这是你可能会进行的粗略计算。Jeff Dean的《每个人都应该知道的数字》幻灯片是一个很好的期望设定工具。
特性标志（Feature flags）是基础设施推出的方式。 特性标志是产品工程师在系统中推出新功能的常用方式。特性标志通常与前端A/B测试相关联，用于向部分用户展示新的设计或功能。但它们也是替换基础设施的强大方式。
很多项目因为选择了“大切换”或一系列“大切换”，然后由于发现了太晚的错误而被迫回滚，从而导致失败。通过使用特性标志，你将增强对项目的信心并减轻失败的成本。
假设你要从单一数据库迁移到一个隐藏了新存储解决方案细节的服务。使用特性标志，你可以逐步将写操作转移到新服务，与对旧数据库的写操作并行进行，以确保其写路径的正确性和速度足够快。在写路径达到100%并将数据回填到服务的数据存储完成后，你可以使用单独的特性标志开始从该服务读取，而不在用户响应中使用该数据，以检查性能问题。另一个特性标志可以用于比较从旧系统和新系统读取的数据。最后一个标志可以用于逐步增加从新系统进行“真实”读取操作。
通过将部署拆分为多个步骤，并通过特性标志提供快速和部分反应，你可以更容易地在扩展过程中发现错误和性能问题，而不是在“一次性发布”时发现。如果出现问题，你只需立即将特性标志设置降低到较低（可能是零）的设置。通过调整速率，你可以在不同的流量量级下进行调试和实验，知道任何问题都不会造成灾难。使用特性标志，你还可以选择其他迁移策略，例如基于每个用户的方式将请求转移到新系统，以提供对新系统的更好洞察。当你的新服务仍在原型阶段时，你可以将特性标志设置为较低，以减少新系统的资源消耗。
现在，特性标志对于经典训练的开发人员或新工程师来说可能听起来像是一堆条件语句的可怕混乱。而使用特性标志意味着接受多个基础设施和数据版本是一种常态，而不是罕见情况。这是一个深刻的教训。在单机系统中有效的方法在面对分布式问题时有时会失败。
特性标志最好被理解为一种权衡，以在代码和一个系统中交换局部复杂性，以获得全局的简单性和弹性。
**明智地选择ID空间。 **你为系统选择的ID空间将塑造你的系统。
要获取数据所需的ID数量越多，就越有选择将数据进行分区的选项。要获取数据所需的ID数量越少，消费你的系统输出就越容易。
以Twitter API的第一个版本为例。所有获取、创建和删除推文的操作都是基于每个推文的单个数字ID进行的。推文ID是一个简单的64位数字，不与任何其他数据相关联。随着推文数量的增加，人们意识到，如果将同一用户的所有推文存储在同一台机器上，可以有效地构建用户的推文时间线和其他用户订阅的时间线。
但公共API要求每个推文只能通过推文ID进行访问。要按用户对推文进行分区，需要构建一个查找服务，它知道哪个用户拥有哪个推文ID。如果必要，这是可行的，但成本不可忽视。
另一种选择是在任何推文查找时要求用户ID，并且最初只是使用推文ID进行存储，直到用户分区存储上线。另一种选择是在推文ID本身中包含用户ID，这样做的代价是推文ID不再具有k-sortable和数字的特性。
要注意在ID中明确和隐含地编码了哪种类型的信息。客户端可能利用ID的结构来去匿名化私人数据，以意想不到的方式爬取你的系统（自增ID通常是一个痛点），或进行其他一系列攻击。
利用数据局部性。 将数据的处理和缓存与其持久存储保持靠近，处理效率更高，同时保持缓存一致性和快速性更容易。与指针解引用和fread（3）相比，网络故障和延迟更多。
当然，数据局部性意味着在空间上靠近，但也意味着在时间上靠近。如果多个用户几乎同时进行相同的昂贵请求，也许可以将它们的请求合并为一个请求。如果在相近的时间内发出了多个相同类型的数据请求，可以将它们合并为一个更大的请求。这样做通常可以降低通信开销并更容易进行故障管理。
**将缓存数据写回持久存储是不好的。 **这种情况在比想象中更多的系统中发生。尤其是那些最初由缺乏分布式系统经验的人设计的系统。你将继承许多具有此缺陷的系统。如果实施者谈到“俄罗斯套娃缓存”，你很有可能遇到非常明显的错误。这个条目本可以从列表中省略，但我对此特别痛恨。这种缺陷的常见表现是用户信息（例如屏幕名称、电子邮件和哈希密码）神秘地恢复到先前的值。
计算机的能力超乎你的想象。 现在的现场存在很多关于机器能力的错误信息，这些信息来自于没有太多经验的从业者。
在2012年底，轻型Web服务器拥有6个或更多处理器，24GB内存和比你能使用的更多磁盘空间。在现代语言运行时环境中，一个相对复杂的CRUD应用程序在单个机器上可以在几百毫秒内轻松处理数千个请求每秒。这还只是下限。在大多数情况下，每台机器每秒处理数百个请求并不值得夸耀。
获得更高的性能并不难，尤其是如果你愿意对应用程序进行性能分析，并根据测量结果引入效率。
**利用CAP定理对系统进行批判。 **CAP定理不能用作构建系统的基础。它不是一个可以作为第一原则并从中推导出一个可行系统的定理。它的适用范围过于广泛，可能的解决方案空间也过于宽泛。
然而，CAP定理非常适合用于对分布式系统设计进行批判，并理解需要做出的权衡。通过对系统设计进行迭代，考虑CAP对其子系统施加的约束，最终可以得到更好的设计。作业中，将CAP定理的约束应用于俄罗斯套娃缓存的实际实现。
最后需要注意的是：在一致性（C）、可用性（A）和分区容忍性（P）中，不能选择CA。
**提取服务。 **这里的&amp;quot;服务&amp;quot;指的是&amp;quot;一个包含高级逻辑的分布式系统，通常具有请求-响应式的API&amp;quot;。要留意那些如果存在于一个单独的服务中而不是你的系统中，将更容易进行的代码更改。
提取出一个服务提供了封装的好处，通常与创建库相提并论。然而，提取出一个服务改进了创建库的方式，因为它允许更快、更容易地部署变更，而不像升级客户系统中的库那样麻烦。（当然，如果提取出的服务难以部署，那么客户系统将变得更容易部署。）这种便利是由于较小、提取出的服务中的代码和操作依赖较少，并且其创建的严格边界使得很难&amp;quot;走捷径&amp;quot;，而库则允许这种走捷径。这些走捷径通常会使迁移内部或客户系统到新版本变得更加困难。
当存在多个客户系统时，使用服务的协调成本也比使用共享库要低得多。即使不需要进行API更改，升级库也需要协调每个客户系统的部署。如果部署次序颠倒，可能会导致数据损坏（而且很难预测这种情况），这使得升级库变得更加困难。如果客户系统由不同的维护者负责，升级库的社交协调成本也比部署服务更高。让其他人意识到并愿意升级是非常困难的，因为他们的优先事项可能与你的不一致。
典型的服务使用案例是隐藏一个将要进行变更的存储层。提取出的服务具有更方便且表面积更小的API，与其前端的存储层相比。通过提取服务，客户系统无需了解迁移到新的存储系统或格式的复杂性，只需要评估新服务中肯定会发现的与新存储布局相关的错误。
在执行此操作时，需要考虑许多操作和社交问题。在这里无法对它们进行充分阐述。需要撰写另一篇文章对此进行详细说明。
我对我的审稿人Bill de hÓra、Coda Hale、JD Maturen、Micaela McDonald和Ted Nyman表示衷心感谢。你们的见解和关心是无价的。</description>
    </item>
    <item>
      <title>[译]《分布式系统：为了乐趣和利益》介绍</title>
      <link>https://blog.chensoul.cc/posts/2023/11/09/distributed-systems-intro/</link>
      <pubDate>Thu, 09 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/09/distributed-systems-intro/</guid>
      <description>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者Mikito Takada撰写，介绍了构建分布式系统的基本概念、原则和挑战。
这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。
在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。
《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。
原文链接：Distributed systems: for fun and profit
介绍 我想要一本能够汇集许多最新分布式系统（例如 Amazon 的 Dynamo、Google 的 BigTable 和 MapReduce、Apache 的 Hadoop 等系统）背后的思想的文本。
在本文中，我试图提供更易于理解的分布式系统介绍。对我来说，这意味着两件事：介绍您需要的关键概念，以便您可以愉快地阅读更严肃的文本，并提供足够详细的叙述，以便您了解正在发生的事情的要点，而不会陷入困境关于细节。现在是 2013 年，您已经有了互联网，您可以有选择地阅读更多您认为最感兴趣的主题。
在我看来，分布式编程的大部分内容都是关于处理分布式的两个后果的影响：
信息以光速传播 独立的事物会独立失败 换句话说，分布式编程的核心是处理距离（废话！）并且拥有不止一件事（废话！）。这些约束定义了可能的系统设计空间，我希望读完本文后您将更好地了解距离、时间和一致性模型如何相互作用。
本文重点介绍理解数据中心商业系统所需的分布式编程和系统概念。试图涵盖一切将是疯狂的。您将学习许多关键协议和算法（例如，涵盖该学科中许多被引用次数最多的论文），包括一些尚未进入大学教科书的最终一致性的令人兴奋的新方法 - 例如 CRDT和 CALM 定理。
我希望你喜欢它！如果您想表达感谢，请在 Github（或 Twitter）上关注我。如果发现错误，请在 Github 上提交拉取请求。
1. 基础知识 第一章通过介绍一些重要的术语和概念，从高层次上介绍了分布式系统。它涵盖了高级别目标，例如可扩展性、可用性、性能、延迟和容错；这些是如何难以实现的，以及抽象和模型以及分区和复制如何发挥作用。
2. 抽象层次的上下 第二章更深入地探讨抽象和不可能性的结果。它以尼采的名言开始，然后介绍系统模型以及典型系统模型中所做的许多假设。然后讨论了 CAP 定理并总结了 FLP 不可能性结果。然后转向 CAP 定理的含义，其中之一是人们应该探索其他一致性模型。然后讨论了许多一致性模型。
3. 时间及顺序 理解分布式系统的一个重要部分是理解时间和顺序。如果我们无法理解和建模时间，我们的系统就会失败。第三章讨论时间和顺序、时钟以及时间、顺序和时钟的各种用途（例如矢量时钟和故障检测器）。
4. 复制：防止发散 第四章介绍了复制问题以及执行该问题的两种基本方法。事实证明，大多数相关特征都可以通过这个简单的表征来讨论。然后，从最低容错（2PC）到Paxos讨论了维持单副本一致性的复制方法。
5. 复制：接受分歧 第五章讨论了具有弱一致性保证的复制。它引入了一个基本的协调场景，其中分区副本尝试达成一致。然后，它讨论了 Amazon 的 Dynamo 作为具有弱一致性保证的系统设计的示例。最后，讨论了无序编程的两个观点：CRDT 和 CALM 定理。
Appendix 附录 附录包含进一步阅读的建议。</description>
    </item>
    <item>
      <title>JHipster安装和介绍</title>
      <link>https://blog.chensoul.cc/posts/2023/11/02/jhipster-intro/</link>
      <pubDate>Thu, 02 Nov 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/11/02/jhipster-intro/</guid>
      <description>JHipster 是一个开发平台，可以快速生成，开发和部署现代 Web 应用程序+微服务架构。
JHipster 或者称 Java Hipster，是一个应用代码产生器，能够创建 Spring Boot/Spring Cloud + React/VueJs/AngularJS 的应用。使用 JHipster，首先你要配置好 Java 、Git 以及 Maven 或者 Gradle 的环境，然后通过 NodeJs 管理工具安装 JHipster 。
介绍 JHipster 官网： https://www.jhipster.tech/ ，截止本文发布时，最新版本为 8.0.0 。
JHipster 客户端使用到的技术栈有：
服务端使用的技术栈有：
支持以下部署方式：
JHipster 提供了一个 CLI 工具 generator-jhipster 和在线网站 https://start.jhipster.tech/ ，来创建应用。generator-jhipster 支持本地安装和 docker 安装两种方式。另外，还有一个轻量级的定制工具 jhipseter-lite 可以更细力度的定制。
JHipster Pro 是一个 JHipster 国内落地方案，符合国情的代码生成器解决方案，支持 MyBatis、SMS、OSS。当前最新版本对应 JHipster 官方版本：v7.1.0，网站最近一次跟新是在 2021 年 8 月份。
安装 generator-jhipster 前提条件安装 Java 和 NodeJs，然后通过 npm 或者 yarn 安装 generator-jhipster。以下是通过 npm 安装：
npm install -g generator-jhipster 查看版本：
$ npx jhipster --version 8.0.0-rc.1 另外，可以在 docker 里面安装：
docker image pull jhipster/jhipster docker container run --name jhipster -v ~/jhipster:/home/jhipster/app -v ~/.</description>
    </item>
    <item>
      <title>Java设计模式：Circuit Breaker</title>
      <link>https://blog.chensoul.cc/posts/2023/10/26/java-design-patterns-circuit-breaker/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/26/java-design-patterns-circuit-breaker/</guid>
      <description>本文主要介绍 Circuit Breaker 断路器模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 断路器模式（Circuit Breaker Pattern）是一种在分布式系统中处理故障和提高系统可靠性的设计模式。它的主要目标是防止故障的传递，并在故障发生时提供优雅的故障处理机制。
在一个分布式系统中，不可避免地会出现许多外部依赖，如数据库、网络服务等。这些外部依赖可能会发生故障、延迟或不可用的情况。如果没有适当的措施，这些故障可能会导致整个系统的性能下降，甚至系统崩溃。
断路器模式通过在应用程序和外部依赖之间引入一个断路器接口来解决这个问题。断路器接口充当一个中间层，监视对外部依赖的调用。当外部依赖发生故障时，断路器可以迅速地中断对外部依赖的调用，避免资源的浪费和故障的传递。
除了断路器接口之外，断路器模式还涉及以下几个重要的知识点：
故障阈值（Failure Threshold）：断路器模式通过设置故障阈值来判断服务的健康状态。当服务的失败次数达到或超过故障阈值时，断路器会打开，阻止对服务的进一步调用。 回退响应（Fallback Response）：当断路器打开时，可以为调用方提供回退响应。回退响应是一个预定义的响应，用于代替无法正常调用的服务的响应。回退响应可以是事先定义好的静态响应，或者是通过调用备用服务来获取的响应。 断路器状态（Circuit Breaker State）：断路器可以处于不同的状态，如关闭（Closed）、打开（Open）和半开（Half-Open）。初始状态通常是关闭状态，表示服务正常可用。当服务的失败次数达到故障阈值时，断路器会打开，阻止对服务的进一步调用。在一定时间后，断路器会进入半开状态，允许发起一次测试调用。如果测试调用成功，断路器将重新关闭；如果测试调用仍然失败，断路器将重新打开。 断路器的自动恢复（Automatic Recovery）：断路器模式通常具有自动恢复功能。在断路器打开的状态下，一段时间过去后，断路器会尝试重新关闭，以允许对服务的正常调用。自动恢复可以防止长时间的服务中断，提供给服务一个机会来恢复正常运行。 健康检查（Health Check）：断路器模式可以通过定期的健康检查来监控服务的状态。健康检查可以是定期发送心跳请求或执行一些特定的健康检查操作。通过健康检查，可以及时发现服务的故障或不可用状态，并相应地打开断路器。 示例 首先，您需要创建一个监控服务类，它将使用断路器来包装远程服务的调用。以下是一个示例监控服务类的代码：
public class MonitoringService { private final CircuitBreaker delayedService; private final CircuitBreaker quickService; public MonitoringService(CircuitBreaker delayedService, CircuitBreaker quickService) { this.delayedService = delayedService; this.quickService = quickService; } public String localResourceResponse() { return &amp;#34;Local Service is working&amp;#34;; } public String delayedServiceResponse() { try { return this.delayedService.attemptRequest(); } catch (RemoteServiceException e) { return e.getMessage(); } } public String quickServiceResponse() { try { return this.quickService.attemptRequest(); } catch (RemoteServiceException e) { return e.getMessage(); } } } 在上述代码中，MonitoringService 类接受两个断路器对象作为参数，分别用于包装延迟服务和快速服务的远程调用。它还包含一个用于获取本地资源的方法。</description>
    </item>
    <item>
      <title>Java设计模式：Chain</title>
      <link>https://blog.chensoul.cc/posts/2023/10/16/java-design-patterns-chain/</link>
      <pubDate>Mon, 16 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/16/java-design-patterns-chain/</guid>
      <description>本文主要介绍 Chain 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
目的 通过给多个对象一个处理请求的机会，避免请求的发送者和它的接收者耦合。串联接收对象并在链条中传递请求直到一个对象处理它。
介绍 责任链模式（Chain of Responsibility Pattern）是一种行为型设计模式，它允许多个对象按照顺序处理请求，直到其中一个对象能够处理该请求为止。该模式将请求发送者和接收者解耦，使多个对象都有机会处理请求，同时避免请求发送者与接收者之间的直接耦合。
在责任链模式中，通常会构建一个处理请求的链条，链条上的每个对象都有一个指向下一个对象的引用。当请求到达链条的起点时，它会依次经过链条上的每个对象，直到找到能够处理请求的对象为止。每个对象都可以决定是否处理请求，或者将请求传递给下一个对象。
以下是责任链模式的几个关键角色：
抽象处理器（Handler）：定义处理请求的接口，并包含一个指向下一个处理器的引用。通常会提供一个处理请求的方法。 具体处理器（ConcreteHandler）：实现抽象处理器的接口，具体处理请求的逻辑。如果自己无法处理请求，则将请求传递给下一个处理器。 客户端（Client）：创建责任链，并将请求发送给链条的起点。 下面是一个示例，说明如何使用责任链模式处理请求：
// 抽象处理器 public abstract class Handler { protected Handler nextHandler; public void setNextHandler(Handler nextHandler) { this.nextHandler = nextHandler; } public abstract void handleRequest(Request request); } // 具体处理器 public class ConcreteHandler1 extends Handler { @Override public void handleRequest(Request request) { if (满足处理条件) { // 处理请求的逻辑 } else if (nextHandler != null) { // 将请求传递给下一个处理器 nextHandler.handleRequest(request); } } } // 具体处理器2和具体处理器3的定义与具体处理器1类似 // 客户端 public class Client { public static void main(String[] args) { Handler handler1 = new ConcreteHandler1(); Handler handler2 = new ConcreteHandler2(); Handler handler3 = new ConcreteHandler3(); // 构建责任链 handler1.</description>
    </item>
    <item>
      <title>[译]Spring Boot3和Spring6中的新特性</title>
      <link>https://blog.chensoul.cc/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</link>
      <pubDate>Fri, 13 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</guid>
      <description>Spring Boot 3.0 于 2022 年 11 月正式发布，包含一些新功能和改进。这是继大约 4.5 年前发布 Spring Boot 2.0 后 Spring Boot 的第一个主要版本。它也是第一个支持 Spring Framework 6.0 的 Spring Boot GA 版本。作为开发人员，我们需要了解这些更新，才能顺利使用 Spring Boot。毫无疑问，新版本中最大的转变之一是放弃了对旧版本 Java 的支持。
在本文中，我们将讨论“Spring Boot 3 和 Spring 6 中的新功能”。
Spring 3.0 版本有哪些主要亮点？ Spring 3.0 版本的亮点包括：
Java 17 基线 支持 Jakarta EE 10 和 EE 9 基线 支持使用 GraalVM 生成本机映像，取代实验性 Spring Native 项目 通过测微计和测微计追踪提高了可观测性 谁可以真正使用 Spring Boot 3？ 如前所述，Spring Boot 3.0 最大的转变是忽略了对旧版本 Java 的支持。是的，我们至少需要 Java 17 才能使用 Spring Boot 3.0。因此，在使用 Spring Boot 3.0 之前必须具备 JDK 17 环境。
Spring Boot 3 和 Spring 6 有哪些新功能？ 这里需要注意的重要一点是 Spring Boot 3.0 构建于 Spring Framework 6 之上并需要 Spring Framework 6。因此，如果您的 pom.</description>
    </item>
    <item>
      <title>Java设计模式：Callback</title>
      <link>https://blog.chensoul.cc/posts/2023/10/13/java-design-patterns-callback/</link>
      <pubDate>Fri, 13 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/13/java-design-patterns-callback/</guid>
      <description>本文主要介绍 Callback 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 回调（Callback）是一种设计模式，在这种模式中，一个可执行的代码被作为参数传递给其他代码，接收方的代码可以在适当的时候调用它。
在真实世界的例子中，当我们需要在任务完成时被通知时，我们可以将一个回调方法传递给调用者，并等待它调用以通知我们。简单地说，回调是一个传递给调用者的方法，在定义的时刻被调用。
维基百科说
在计算机编程中，回调又被称为“稍后调用”函数，可以是任何可执行的代码用来作为参数传递给其他代码；其它代码被期望在给定时间内调用回调方法。
代码 回调是一个只有一个方法的简单接口。
public interface Callback { void call(); } 下面我们定义一个任务它将在任务执行完成后执行回调。
public abstract class Task { final void executeWith(Callback callback) { execute(); Optional.ofNullable(callback).ifPresent(Callback::call); } public abstract void execute(); } public final class SimpleTask extends Task { private static final Logger LOGGER = getLogger(SimpleTask.class); @Override public void execute() { LOGGER.info(&amp;#34;Perform some important activity and after call the callback method.&amp;#34;); } } 最后这里是我们如何执行一个任务然后接收一个回调当它完成时。
var task = new SimpleTask(); task.executeWith(() -&amp;gt; LOGGER.info(&amp;#34;I&amp;#39;m done now.&amp;#34;)); 类图 适用场景 回调模式适用于以下场景：
异步操作：当需要在异步操作完成后执行某些操作时，可以使用回调模式。例如，在网络请求中，可以传递一个回调函数，在请求完成后调用该函数处理响应数据。 事件处理：当需要对事件进行响应和处理时，可以使用回调模式。例如，在图形界面开发中，可以注册某个控件的回调函数，以便在用户触发事件时执行相应的操作。 插件扩展：当需要为应用程序提供扩展性，允许第三方插件在特定事件发生时进行自定义操作时，可以使用回调模式。例如，游戏引擎中的事件系统允许开发者注册回调函数以响应游戏中的特定事件。 回调链：当需要按特定顺序执行多个回调函数，并将前一个回调函数的结果传递给下一个回调函数时，可以使用回调模式。这种情况下，回调函数形成了一个回调链。 模板方法模式：回调模式常与模板方法模式结合使用。模板方法模式定义了一个算法的骨架，而具体的步骤由子类实现。可以使用回调模式将子类中的具体步骤作为回调函数传递给模板方法。 总的来说，回调模式适用于需要在特定事件发生后执行某些操作的情况，以及需要实现解耦和灵活性的场景。它提供了一种在代码间通信的方式，使得代码可以更加模块化和可复用。
Java 例子 CyclicBarrier 构造函数可以接受回调，该回调将在每次障碍被触发时触发。 FAQ 回调模式如何实现解耦和灵活性？ 回调模式通过将一个可执行的代码块（回调函数）作为参数传递给其他代码，实现了解耦和灵活性。
解耦性：回调模式可以将调用方与被调用方解耦，使它们之间的关系更加松散。调用方只需要知道回调函数的接口，而不需要了解具体的实现细节。被调用方在特定的时机调用回调函数，而不需要知道调用方的具体实现。这种解耦性使得系统中的不同部分可以独立地进行修改和扩展，而不会对彼此产生过多的依赖。
灵活性：回调模式提供了一种灵活的扩展机制。通过传递不同的回调函数，可以改变程序的行为或逻辑，而不需要修改原有的代码。这种灵活性使得系统可以适应不同的需求和变化，而不需要进行大规模的修改或重构。同时，回调模式也允许在运行时动态地修改回调函数，从而实现更高级的动态行为。</description>
    </item>
    <item>
      <title>[译]DevOps 和测试人员的 Git 面试问题</title>
      <link>https://blog.chensoul.cc/posts/2023/10/12/git-interview-questions/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/12/git-interview-questions/</guid>
      <description>欢迎来到 Git 面试准备指南，我们将在这里向初学者和经验丰富的专业人士讨论最常见的 Git 面试问题。无论您是准备参加 DevOps 或测试面试，还是希望提高 Git 技能，此资源都可以通过深入研究一些与 Git 基本概念和实践相关的最常见面试问题来帮助您。
我们将涵盖所有重要主题，例如分支、存储库管理、处理合并冲突和协作工作流程。通过探索这些问题，您将更深入地了解 Git 的版本控制系统，并更好地应对开发项目中的现实挑战。
1.什么是版本控制系统？ 版本控制系统 (VCS) 是一种帮助跟踪和管理文件和代码随时间变化的软件。它允许多人协作处理一个项目，跟踪修订，并在需要时轻松恢复到以前的版本。
版本控制系统主要分为三种类型：
本地版本控制系统 (LVCS)：在 LVCS 中，版本控制数据库存储在本地计算机上。更改和修订在位于用户计算机上的本地存储库中进行跟踪。但此类系统缺乏协作功能，不利于团队开发。 集中版本控制系统 (CVCS)：在 CVCS 中，版本控制数据库存储在中央服务器上。用户可以从服务器检出文件、进行更改并将其提交回服务器。这允许多个用户在同一项目上进行协作，并提供对存储库的集中控制。然而，CVCS 的一个缺点是，如果中央服务器出现故障，协作者将无法执行某些操作，直到服务器恢复为止。 分布式版本控制系统 (DVCS)：在 DVCS 中，每个用户都有一个包含整个版本历史记录的本地存储库。这意味着每个用户都拥有项目存储库的完整副本，包括所有分支和修订。用户可以在本地存储库上独立工作，并与其他存储库同步更改。 DVCS 为分布式和分散式工作流程提供更好的支持，允许用户离线工作并更有效地协作。 2. Git 中的 Origin 是什么？ 在 Git 中，“origin”是指我们从中克隆的远程存储库。当我们从远程服务器克隆存储库时，Git 会自动创建一个名为“origin”的远程引用，该引用指向原始远程存储库。
默认情况下，当我们克隆存储库时，Git 会设置“来源”并将其与我们克隆的原始存储库关联起来。我们可以通过运行命令“git remote -v”来验证这一点。此命令显示与本地存储库关联的远程存储库列表及其 URL。
git remote -v origin https://github.com/lokeshgupta1981/Spring-Boot3-Demos.git (fetch) origin https://github.com/lokeshgupta1981/Spring-Boot3-Demos.git (push) 请注意，“origin”只是一个未硬编码的别名，可以使用以下命令提示符进行更改：
git remote rename origin newName 3.我们如何在 Git 中配置全局用户名和电子邮件？ 设置全局一致的用户名和电子邮件地址非常重要，因为 Git 使用此信息将提交与正确的作者关联起来。它有助于识别每个提交的人员，并允许在项目内进行适当的协作和归属。
要在 Git 中配置全局用户名和电子邮件，我们可以使用以下命令：
git config --global user.name &amp;#34;MyName&amp;#34; git config --global user.email &amp;#34;myname@gmail.com&amp;#34; 这些命令将全局设置用户名和电子邮件，这意味着它们将用于您计算机上的所有 Git 存储库，除非在存储库级别覆盖。
您可以通过运行以下命令来验证更改。这些命令将分别显示配置的用户名和电子邮件。
git config --global user.name # Prints &amp;#39;lokeshgupta1981&amp;#39; git config --global user.email # Prints &amp;#39;howtodoinjava@gmail.com&amp;#39; 4.</description>
    </item>
    <item>
      <title>[译]Spring Security 面试问题</title>
      <link>https://blog.chensoul.cc/posts/2023/10/12/spring-security-interview-questions/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/12/spring-security-interview-questions/</guid>
      <description>本面试准备指南将讨论一些常见的 Spring Security 面试问题。无论您是准备面试还是只是想增强对 Spring Security 的了解，这些问题都将帮助您理解关键概念并指导您设计常见安全问题的解决方案。
1. Spring Security 的核心特性是什么？ Spring Security 提供的两个最突出的功能是身份验证和授权。这些功能在确保应用程序的安全性方面发挥着至关重要的作用。然而，Spring Security 超越了身份验证和授权，还提供了额外的功能来防止漏洞利用并与其他框架集成。
1.1.验证 身份验证是验证尝试访问应用程序的用户身份的过程。 Spring Security 提供多种身份验证方法（基于表单的身份验证、HTTP 基本身份验证、OAuth2、Siteminder、OpenID Connect、LDAP、JDBC 等），允许应用程序使用各种方法对用户进行身份验证。
它还支持自定义，当默认选项不满足要求时，可以实现自定义的身份验证机制。
1.2.授权 授权是向经过身份验证的用户或实体授予许可或权利的过程。用户或实体成功通过身份验证后，授权将决定他们可以在应用程序中访问哪些操作或资源。 Spring Security 为开发人员提供了多种方法来实现授权并控制用户对应用程序不同部分的访问。以下是一些常见的方法：
基于 Web URL 的授权：可以根据特定的 URL 或 URL 模式实施访问控制，规范哪些用户可以访问某些资源。 方法级授权：如果需要，甚至可以对 Java Bean 中的方法进行访问控制，从而在方法级提供细粒度的授权。 域实例级授权：Spring Security 提供了控制对特定域实例的访问的能力，允许基于某些实体的所有权或关联进行授权。 1.3.防止漏洞利用 Spring Security 提供了多种功能来防范常见的 Web 应用程序安全漏洞。一些显着的功能包括：
跨站请求伪造 (CSRF) 保护：Spring Security 会自动将 CSRF 令牌添加到表单和 AJAX 请求中，从而防止 CSRF 攻击。 跨站脚本 (XSS) 保护：Spring Security 支持输出编码，并提供实用程序通过清理用户输入来防止 XSS 攻击。 点击劫持保护：Spring Security 包括 X-Frame-Options 支持，以防止点击劫持攻击。 1.4.集成 Spring Security 与其他框架和库无缝集成，以增强应用程序的安全性。一些关键的集成是：
Spring MVC：Spring Security 与 Spring MVC 集成，为 Web 应用程序提供无缝的安全功能。它可以安全地处理请求、身份验证、授权并防止常见的 Web 漏洞。 Spring Data：Spring Security 与 Spring Data 集成，以便在查询中引用当前用户。这种集成确保可以根据身份验证和授权规则轻松访问和过滤用户特定的数据。 Jackson：Jackson 的支持可以实现 Spring Security 相关类的高效序列化和反序列化，特别是在使用分布式会话或 Spring Session 等框架时，从而提高效率和可扩展性。 密码学：Spring Security 与各种密码库和算法集成，以提供敏感信息的安全存储和传输。这种集成包括密码散列、加密和安全通信协议等功能，以保护数据的机密性和完整性。 有关 Spring Security 功能的更详细信息，请参阅官方文档。</description>
    </item>
    <item>
      <title>[译]关于 HTTP 您需要了解的一切</title>
      <link>https://blog.chensoul.cc/posts/2023/10/12/http-in-depth/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/12/http-in-depth/</guid>
      <description>HTTP 是每个 Web 开发人员都应该了解的协议，因为它为整个 Web 提供动力。了解 HTTP 当然可以帮助您开发更好的应用程序。
在本文中，我将讨论 HTTP 是什么、它是如何产生的、它今天的状况以及我们是如何走到这一步的
什么是 HTTP？ 首先，什么是 HTTP？ HTTP 是基于 TCP/IP 的应用层通信协议，它标准化了客户端和服务器之间的通信方式。它定义了如何通过互联网请求和传输内容。通过应用层协议，我的意思是它只是一个标准化主机（客户端和服务器）通信方式的抽象层。 HTTP 本身依赖于 TCP/IP 来获取客户端和服务器之间的请求和响应。
默认情况下，使用 TCP 端口 80，但也可以使用其他端口。然而，HTTPS 使用端口 443。
HTTP/0.9 - One Liner (1991) HTTP 的第一个有记录的版本是 1991 年提出的 HTTP/0.9。它是有史以来最简单的协议；有一个名为 GET 的方法。如果客户端必须访问服务器上的某个网页，它会发出如下所示的简单请求
GET /index.html 服务器的响应如下所示
(response body) (connection closed) 也就是说，服务器将收到请求，回复 HTML 作为响应，一旦内容传输完毕，连接就会关闭。有
无标题 GET 是唯一允许的方法 响应必须是 HTML 正如您所看到的，该协议实际上只不过是未来的踏脚石。
HTTP/1.0 - 1996 1996 年，HTTP 的下一个版本（即 HTTP/1.0）得到了发展，比原始版本有了很大的改进。与仅针对 HTML 响应设计的 HTTP/0.9 不同，HTTP/1.0 现在也可以处理其他响应格式，即图像、视频文件、纯文本或任何其他内容类型。它添加了更多方法（即 POST 和 HEAD）、更改了请求/响应格式、将 HTTP 标头添加到请求和响应中、添加了状态代码来标识响应、引入了字符集支持、多部分类型、授权、缓存、内容编码等都包括在内。
以下是示例 HTTP/1.0 请求和响应的样子：
GET / HTTP/1.0 Host: cs.fyi User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) Accept: */* 正如您所看到的，除了请求之外，客户端还发送了它的个人信息、所需的响应类型等。而在 HTTP/0.9 中，客户端永远无法发送此类信息，因为没有标头。
对上述请求的响应示例可能如下所示
HTTP/1.0 200 OK Content-Type: text/plain Content-Length: 137582 Expires: Thu, 05 Dec 1997 16:00:00 GMT Last-Modified: Wed, 5 August 1996 15:55:28 GMT Server: Apache 0.</description>
    </item>
    <item>
      <title>前端学习路线图</title>
      <link>https://blog.chensoul.cc/posts/2023/10/12/frontend-roadmap/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/12/frontend-roadmap/</guid>
      <description>前端学习路线图:
Internet： HTTP DNS HTML Basic Semantic HTML Forms and Validations Accessibility SEO CSS Basic Layout Responsive Design JavaScript Baisc DOM Fetch API / Ajax Package Manager npm pnpm yarn Framework Angular Vue.js React Svelte Solid JS Qwik Writing CSS Tailwind Radix UI Shadcn UI CSS Architecture BEM CSS Preprocessors SASS PostCSS Build Module Bundlers parcel Rollup Webpack esbuild Vite Task Runners npm scripts Linters and Formatters Prettier ESLint Test Vitest Jest Playwirte Cypress Authentication Strategies JWT OAuth SSO Basic Auth Session Auth Web Security Basics CORS HTTPS CSP OWASP Security Risks Web Components HTML Templates Custom Elements Shadow DOM Type Checkers TypeScript Server Side Rendering(SSR) Svelte Svelte Kit Vue.</description>
    </item>
    <item>
      <title>Java设计模式：Caching</title>
      <link>https://blog.chensoul.cc/posts/2023/09/25/java-design-patterns-cahcing/</link>
      <pubDate>Mon, 25 Sep 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/09/25/java-design-patterns-cahcing/</guid>
      <description>本文主要介绍 Caching 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 缓存模式（Caching Pattern）是一种设计模式，旨在通过在资源使用后将其保留在某个快速访问的存储中，并在需要时重新使用资源，以避免昂贵的资源重新获取。
缓存模式的目的是减少重复获取、初始化和释放同一资源所带来的不必要性能开销。通过将资源保留在缓存中，可以避免再次获取资源，从而提高系统的响应速度和性能。
在缓存模式中，当需要访问资源时，首先检查缓存中是否存在该资源的副本。如果缓存中存在资源，则直接从缓存中获取并返回给调用方。如果缓存中不存在资源，则需要从原始数据源或其他途径获取资源，并将其存储在缓存中，以供后续使用。
缓存模式适用于那些需要频繁访问、计算成本较高的资源的情况，例如数据库查询、网络请求、文件读写等。通过使用缓存模式，可以显著提升系统的性能和响应速度，减少对原始数据源的访问次数，从而降低系统的负载。
关于缓存模式的更多信息和实现方式，您可以参考以下资源：
Write-Through, Write-Around, Write-Back: Cache Explained：对缓存模式进行了详细解释和说明，提供了不同的缓存策略和实现方式。 Read-Through, Write-Through, Write-Behind, and Refresh-Ahead Caching：介绍了不同类型的缓存操作和策略，包括读取、写入、刷新等。 Cache-Aside Pattern：介绍了缓存模式中的一种常见实现方式，即&amp;quot;Cache-Aside&amp;quot;模式，包括其工作原理和使用方法。 实现策略 缓存模式有多种常见的实现策略，以下是其中一些常见的实现策略：
写入穿透（Write-Through）：当从数据源获取数据时，将数据同时写入缓存。这样，在下一次需要相同数据时，可以从缓存中获取，避免再次访问数据源。写入穿透策略确保缓存中始终保持最新的数据。 写入回写（Write-Back）：在数据发生变化时，首先将数据写入缓存，然后再定期将缓存中的数据批量写回到数据源。写入回写策略可以减少对数据源的频繁写入操作，提高性能。 写入旁路（Write-Around）：将写操作直接发送到数据源，而不是通过缓存。这样可以避免将不经常访问的数据写入缓存，从而节省缓存空间。只有当数据被读取时，才会将其放入缓存。 刷新预取（Refresh-Ahead）：在缓存中存储数据的同时，预先获取和更新与当前数据相关的其他数据。这样，当需要访问相关数据时，可以直接从缓存中获取，减少等待时间。 最近最少使用（Least Recently Used, LRU）：根据数据的访问频率和时间进行缓存淘汰。当缓存空间不足时，优先淘汰最近最少被访问的数据，以保留最常用的数据。 固定时间过期（Time-To-Live, TTL）：为缓存中的每个数据项设置一个固定的过期时间。一旦数据项超过过期时间，将被视为过期并从缓存中移除。 异步刷新（Asynchronous Refresh）：在数据过期或无效时，通过异步方式从数据源获取新数据并更新缓存。这样可以避免阻塞调用方，提高系统的响应速度。 缓存框架 当涉及到缓存框架或工具时，有几个常见且广泛使用的选项可以考虑。以下是其中一些常见的缓存框架或工具：
Ehcache: Ehcache 是一个流行的开源 Java 缓存框架，提供了各种缓存策略和功能，包括内存缓存、磁盘缓存、分布式缓存等。它易于使用且性能优秀，可以轻松集成到 Java 应用程序中。 Redis: Redis 是一个开源的高性能内存数据结构存储系统，也可以用作缓存。它支持多种数据结构和丰富的缓存功能，如数据过期、持久化、分布式缓存等。Redis 可以作为独立的缓存服务器，也可以与应用程序集成使用。 Memcached: Memcached 是一个简单而高效的分布式内存对象缓存系统。它以键值对的形式存储数据，并提供了分布式缓存的支持。Memcached 适用于高并发环境下的缓存需求，可以减轻后端数据库的压力。 Caffeine: Caffeine 是一个基于 Java 的高性能缓存库，专注于提供快速的缓存访问和高效的内存管理。它支持各种缓存策略和功能，并提供了线程安全和异步加载等特性。 Hazelcast: Hazelcast 是一个开源的分布式数据存储和计算平台，其中包括了分布式缓存的功能。它提供了高可用性和可扩展性，并支持多种缓存策略和分布式缓存模式。 Guava Cache: Guava Cache 是 Google 的 Guava 库中提供的一个本地缓存实现。它提供了简单易用的 API，支持各种缓存策略和功能，如过期时间、最大缓存大小、缓存统计等。 Apache Ignite: Apache Ignite 是一个内存计算平台，提供了分布式缓存和计算能力。它可以作为一个分布式缓存存储数据，并支持 SQL 查询、分布式计算、流处理等功能。 Couchbase: Couchbase 是一个面向企业应用的 NoSQL 数据库和缓存平台。它提供了可扩展的内存缓存功能，并支持数据持久化和分布式缓存集群。 Aerospike: Aerospike 是一个高性能的 NoSQL 数据库和缓存平台，专注于提供低延迟和高吞吐量的数据访问。它支持内存和闪存存储，并具有分布式缓存的功能。 Oracle Coherence: Oracle Coherence 是一个企业级的分布式缓存和数据网格解决方案。它提供了高可用性、可扩展性和事务支持，并支持多种缓存策略和数据复制模式。 </description>
    </item>
    <item>
      <title>Java设计模式：Bytecode</title>
      <link>https://blog.chensoul.cc/posts/2023/09/22/java-design-patterns-bytecode/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/09/22/java-design-patterns-bytecode/</guid>
      <description>本文主要介绍 Bytecode 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 字节码设计模式是一种软件设计模式，它允许以数据驱动的方式定义和执行行为。在字节码设计模式中，行为被表示为一系列虚拟机指令，这些指令被编码为字节码，并在运行时执行。
字节码设计模式的目的是将行为与代码分离，使得行为可以在不修改源代码的情况下进行动态调整和扩展。通过将行为以数据的形式表示，并使用字节码指令进行执行，可以实现更灵活和可配置的行为逻辑。
下面是字节码设计模式的一些关键要点：
指令集：字节码设计模式通过定义一组指令集来表示不同的行为。每个指令都有自己的语义和操作方式，用于执行特定的行为逻辑。 虚拟机：字节码设计模式需要一个虚拟机来执行指令集。虚拟机负责解释和执行字节码指令，并根据指令的要求进行相应的操作。 数据驱动的行为：字节码设计模式的核心思想是将行为表示为数据而不是代码。行为逻辑由字节码指令和相关数据组成，这些数据可以在运行时进行修改和配置，从而改变程序的行为。 动态性和灵活性：由于行为以数据形式存在，并且可以在运行时进行调整，字节码设计模式具有很高的动态性和灵活性。这使得开发人员可以根据需要动态地配置和修改行为，而无需修改源代码。 可重用性和扩展性：字节码设计模式提供了一种可重用和可扩展的方式来定义行为。通过定义不同的指令和指令集，可以构建具有不同行为的模块，并在不同的上下文中重复使用这些模块。 字节码设计模式在游戏开发、模拟器、脚本引擎等领域中具有广泛的应用。它使得开发人员能够以更灵活和动态的方式定义和管理程序的行为，从而提供了更高的可配置性和可扩展性。
举例 一个常见的例子是在游戏开发中使用字节码设计模式来定义角色的行为。假设我们有一个角色类（Character），它具有各种行为，例如攻击、防御、移动等。而这些行为的具体逻辑可能会根据游戏的需求而变化。
使用字节码设计模式，我们可以将角色的行为表示为一系列字节码指令，并通过虚拟机来执行这些指令，以实现角色的行为逻辑。
下面是一个简化的示例：
定义指令集： 我们定义一组指令来表示角色的行为，例如： ATTACK：进行攻击操作 DEFEND：进行防御操作 MOVE：进行移动操作 创建虚拟机： 我们创建一个虚拟机（VirtualMachine）类，它接收字节码作为输入，并执行相应的指令。虚拟机可以解释字节码指令，并根据指令的要求执行相应的行为逻辑。
定义角色行为： 我们创建一个角色（Character）类，它包含一个字节码数组，用于表示角色的行为。例如：
byte[] bytecode = {ATTACK, MOVE, ATTACK, DEFEND}; 执行角色行为： 我们将角色的字节码传递给虚拟机，并执行角色的行为逻辑：
VirtualMachine vm = new VirtualMachine(); vm.execute(bytecode); 虚拟机会解释字节码指令，并根据指令执行相应的行为。例如，当遇到 ATTACK 指令时，虚拟机会执行攻击操作；当遇到 MOVE 指令时，虚拟机会执行移动操作，依此类推。
除了游戏开发之外，字节码设计模式还在其他领域中有一些应用。以下是一些常见的应用领域：
脚本引擎：字节码设计模式可用于实现脚本引擎，其中脚本语言的行为逻辑被表示为字节码指令。这种设计使得脚本的执行可以更高效和灵活，同时还可以提供动态性和扩展性。 模拟器：在模拟器开发中，字节码设计模式可以用于定义和执行模拟器的指令集。模拟器可以通过解释和执行字节码指令来模拟不同的操作和行为，从而实现对特定系统或环境的模拟。 动态编程语言：一些动态编程语言（如 Python、Ruby 等）使用字节码设计模式来实现动态性和灵活性。这些语言将代码编译为字节码，并使用虚拟机来执行字节码指令，从而提供动态类型、动态绑定和运行时修改代码等特性。 JIT 编译器：即时编译器（Just-in-Time Compiler）可以使用字节码设计模式来实现代码的即时编译和优化。在运行时，即时编译器将字节码转换为本地机器码，并对代码进行优化，以提高执行效率。 领域特定语言（DSL）：字节码设计模式可以用于开发领域特定语言，其中 DSL 的行为逻辑被表示为字节码指令。这种设计使得 DSL 的执行更高效，并提供了更大的灵活性和可配置性。 需要注意的是，字节码设计模式的应用不仅限于以上领域，它可以在需要动态性、灵活性和可配置性的任何领域中发挥作用。由于字节码设计模式提供了一种将行为表示为数据的方式，使得行为可以在运行时进行调整和修改，因此在许多软件开发和系统设计的场景中都具有潜在的应用价值。
适用场景 字节码设计模式适用于以下场景：
动态行为需求：当系统需要在运行时动态地定义、配置或修改行为时，字节码设计模式可以提供一种灵活的方式。它允许将行为表示为字节码指令，以便在需要时进行调整和修改，而无需修改源代码。 可配置性和可扩展性要求：如果系统需要具有高度可配置和可扩展的行为逻辑，字节码设计模式可以提供一种解决方案。通过将行为表示为字节码指令和相关数据，开发人员可以轻松地定义和管理不同的行为模块，并在不同的上下文中重复使用这些模块。 脚本引擎和动态语言实现：字节码设计模式可以用于实现脚本引擎或支持动态语言的运行时环境。它可以将脚本行为表示为字节码指令，从而提供动态性、灵活性和执行效率。 模拟和仿真系统：在模拟和仿真系统中，字节码设计模式可以用于定义和执行模拟器的行为。通过使用字节码指令来表示各种操作和行为，可以实现对特定系统或环境的准确模拟。 编译器和优化器开发：字节码设计模式可用于开发编译器、优化器和即时编译器。它提供了一种将源代码转换为字节码指令，并在运行时进行优化和执行的方式，以提高程序的性能和效率。 总的来说，字节码设计模式在需要动态性、灵活性、可配置性和可扩展性的场景中都有应用价值。它可以用于开发各种类型的系统，包括游戏引擎、脚本引擎、模拟器、编译器、优化器等。</description>
    </item>
    <item>
      <title>React入门：初始化应用的两种方法</title>
      <link>https://blog.chensoul.cc/posts/2023/09/22/react-create-project/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/09/22/react-create-project/</guid>
      <description>在 React 中，您可以使用多种方法来初始化一个应用程序。以下是几种常见的方法：
使用 Create React App（CRA）。Create React App 是一个官方提供的脚手架工具，用于快速创建 React 应用程序的基本结构和配置。 使用 Vite。Vite 是一个快速、简单且现代化的前端构建工具。 create-react-app create-react-app 是一个用于快速创建 React 应用程序的命令行工具。它提供了一个简单的方式来设置和配置一个全新的 React 项目，包括构建、开发服务器和其他常见的配置。
要使用 create-react-app 创建一个新的 React 项目，您可以按照以下步骤进行操作：
安装 Node.js
创建 React 应用：一旦你安装了 Node.js，你可以使用 create-react-app 工具快速创建一个新的 React 应用。
在命令行中运行以下命令来全局安装 create-react-app：
npm install -g create-react-app 创建新的 React 应用：使用以下命令创建一个新的 React 应用： create-react-app my-app 提示：
npx 是在运行命令时临时安装和执行包的工具。这意味着您无需全局安装 create-react-app，而是在运行 npx create-react-app 命令时自动下载和使用最新版本的 create-react-app。
npx create-react-app my-app 这将在当前目录下创建一个名为 &amp;quot;my-app&amp;quot; 的新文件夹，并在此文件夹里做了如下工作：
为你的应用程序安装了一些 npm 包； 写入 react 应用启动所需要的脚本文件； 创建一系列结构化的子文件夹和文件； 如果你的电脑上安装了 git 的话，顺便帮你把 git 仓库也建好。 如果你的电脑上安装了 yarn 的话，create-react-app 会默认使用 yarn 而非 npm。如果你同时安装了 yarn 和 npm，但你希望使用 npm 的话，在 create-react-app 的时候需要输入 --use-npm ：
create-react-app my-app --use-npm 进入应用目录：进入新创建的应用程序目录。在命令行中运行以下命令： cd my-app 启动开发服务器：运行以下命令来启动 React 开发服务器： npm start 先前由 create-react-app 创建的脚本会启动一个地服务 localhost:3000，并打开你的默认浏览器来访问这个服务。成功启动浏览器的话，你的浏览器上会显示如下画面：</description>
    </item>
    <item>
      <title>[译]SPRING BOOT JWT - 如何使用 SPRING SECURITY 和 JSON WEB 令牌保护您的 REST API</title>
      <link>https://blog.chensoul.cc/posts/2023/09/19/spring-security-jwt/</link>
      <pubDate>Tue, 19 Sep 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/09/19/spring-security-jwt/</guid>
      <description>如果您快速搜索如何使用 JSON Web Tokens 在 Spring Boot 中保护 REST API，您会发现很多相同的结果。这些结果包含一种方法，该方法涉及编写自定义过滤器链并引入第三方库来编码和解码 JWT。
在看完这些令人费解且令人困惑的教程后，我说必须有一种更简单的方法来做到这一点。我做了任何直接接触 Spring Security 团队的人都会做的事情，我向他们寻求帮助。他们告诉我，Spring Security 确实使用 oAuth2 资源服务器内置了对 JWT 的支持。
在本教程中，您将学习如何使用 JSON Web Tokens (JWT) 和 Spring Security 来保护您的 API。我并不是说这种方法无论如何都很容易，但对我来说，它比其他选择更有意义。
Github 存储库
应用架构 在我们开始编写一些代码之前，我想确保我们对于我们正在构建的内容都达成共识。在下面的示例中，您有一个客户端应用程序，它可以是一个简单的命令行应用程序、一个用 Angular 或 Vue 等编写的完整前端应用程序，或者系统中的其他一些服务。
该客户端应用程序将调用使用 Spring Boot 编写的服务器应用程序，该应用程序通过 REST API 公开数据。在下面的示例中，它是一个整体，但如果您有分布式架构，则同样适用。当前有 3 个 REST 控制器公开资源产品、订单和客户。
您要做的是保护所有资源，以便当客户端调用 REST API 时，客户端将收到 401（未经授权），这意味着客户端请求尚未完成，因为它缺少所请求资源的有效身份验证凭据。
JSON 网络令牌 (JWT) JSON Web 令牌是一种开放方法，用于在两方之间安全地表示声明。 JWT 是一组声明（JSON 属性-值对），它们共同构成一个 JSON 对象。它由三部分组成：
Header: 由两个属性组成：{ &amp;ldquo;alg&amp;rdquo;: &amp;ldquo;HS256&amp;rdquo;, &amp;ldquo;typ&amp;rdquo;: &amp;ldquo;JWT&amp;rdquo; }。 alg 是用于加密 JWT 的算法。 Payload: 这是存储要发送的数据的地方；该数据存储为 JSON 属性-值对。 Signature: 这是通过加密创建的，使用标头中指定的算法：（i）base64Url 编码的标头，（ii）base64Url 编码的有效负载，以及（iii）秘密（或私钥）： HMACSHA256(base64UrlEncode(header) + &amp;#34;.&amp;#34; + base64UrlEncode(payload), secret|privateKey) 最终的 JWT 由三部分组成。每个都是 base64Url 编码的，并且与下一个之间用点分隔。有关更多详细信息，请参阅 openid.net 和 jwt.io 网站。</description>
    </item>
    <item>
      <title>[译]Spring Security 与 JWT for REST API</title>
      <link>https://blog.chensoul.cc/posts/2023/09/19/spring-security-tutorial/</link>
      <pubDate>Tue, 19 Sep 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/09/19/spring-security-tutorial/</guid>
      <description>免责声明：Spring Security 5+ 已发布 OAuth JWT 支持。建议使用最新版本的 OAuth 来支持 JWT，而不是使用自定义安全性或过滤器。
Spring 被认为是 Java 生态系统中值得信赖的框架，并且被广泛使用。将 Spring 称为框架不再有效，因为它更多的是涵盖各种框架的总括术语。其中一个框架是 Spring Security，它是一个功能强大且可定制的身份验证和授权框架。它被认为是保护基于 Spring 的应用程序的事实标准，因此，如果您希望实现 Spring JWT 令牌解决方案，那么将其基于 Spring Security 是有意义的。
尽管它很受欢迎，但我必须承认，当涉及到单页应用程序时，Spring 的配置并不简单和直接。我怀疑原因是它更多地是作为一个面向应用程序的 MVC 框架开始的，其中网页渲染发生在服务器端，并且通信是基于会话的。
如果后端基于 Java 和 Spring，那么使用 Spring Security 和 JWT 进行身份验证/授权并将其配置为无状态通信是有意义的。虽然有很多文章解释了这是如何完成的，但对我来说，第一次设置它仍然令人沮丧，我必须阅读并总结来自多个来源的信息。这就是我决定编写这个 Spring Security 教程的原因，我将在其中尝试总结并涵盖您在配置过程中可能遇到的所有必需的微妙细节和缺陷。
术语定义 在深入探讨技术细节之前，我想明确定义 Spring Security 上下文中使用的术语，以确保我们都使用相同的语言。 这些是我们需要解决的术语：
Authentication 验证是指根据提供的凭据验证用户身份的过程。一个常见的示例是在登录网站时输入用户名和密码。您可以将其视为对“您是谁？”这个问题的答案。 Authorization 授权是指假设用户已成功通过身份验证，则确定用户是否具有执行特定操作或读取特定数据的适当权限的过程。您可以将其视为“用户可以执行/阅读此操作吗？”问题的答案。 Principle 原则是指当前经过身份验证的用户。 Granted authority 授予权限是指经过认证的用户的权限。 Role 角色是指经过身份验证的用户的一组权限。 创建基本的 Spring 应用程序 在开始配置 Spring Security 框架之前，让我们创建一个基本的 Spring Web 应用程序。为此，我们可以使用 Spring Initializr 并生成一个模板项目。对于一个简单的 Web 应用程序，只需要 Spring Web 框架依赖就足够了：
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; 创建项目后，我们可以向其中添加一个简单的 REST 控制器，如下所示：
@RestController @RequestMapping(&amp;#34;hello&amp;#34;) public class HelloRestController { @GetMapping(&amp;#34;user&amp;#34;) public String helloUser() { return &amp;#34;Hello User&amp;#34;; } @GetMapping(&amp;#34;admin&amp;#34;) public String helloAdmin() { return &amp;#34;Hello Admin&amp;#34;; } } 之后，如果我们构建并运行该项目，我们可以在 Web 浏览器中访问以下 URL：</description>
    </item>
    <item>
      <title>Java设计模式：Builder</title>
      <link>https://blog.chensoul.cc/posts/2023/09/05/java-design-patterns-builder/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/09/05/java-design-patterns-builder/</guid>
      <description>本文主要介绍 Builder 构造器模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 构造器模式（Builder Pattern）是一种创建型设计模式，用于将复杂对象的构建过程与其表示分离，从而可以使用相同的构建过程创建不同的表示。
在构造器模式中，通常有两个主要角色：产品（Product）和建造者（Builder）。产品是最终构建的对象，而建造者负责构建产品。
以下是构造器模式的类图示例：
+-------------------+ +----------------------+ | Director | | Builder | +-------------------+ +----------------------+ | construct() | | buildPartA() | | | | buildPartB() | +-------------------+ | getResult() | +----------+-----------+ | v +----------+-----------+ | Product | +----------------------+ | partA | | partB | +----------------------+ 在上述类图中，Director（指导者）负责定义构建产品的顺序和方式，而Builder（建造者）负责实际构建产品的具体步骤。Product（产品）是最终构建的对象。
以下是一个简单的示例，演示如何使用构造器模式创建一个角色生成器的例子：
// 产品类 public class Character { private String profession; private String name; private String hairColor; private String weapon; // 构造器私有化，只能通过建造者创建对象 private Character() {} // Getters public String getProfession() { return profession; } public String getName() { return name; } public String getHairColor() { return hairColor; } public String getWeapon() { return weapon; } // 建造者类 public static class CharacterBuilder { private Character character; public CharacterBuilder() { character = new Character(); } public CharacterBuilder withProfession(String profession) { character.</description>
    </item>
    <item>
      <title>Java设计模式：Business Delegate</title>
      <link>https://blog.chensoul.cc/posts/2023/09/05/java-design-patterns-business-delegate/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/09/05/java-design-patterns-business-delegate/</guid>
      <description>本文主要介绍 Business Delegate 业务委托模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 业务委托模式（Business Delegate Pattern）在表示层和业务层之间引入了一个抽象层，旨在实现这两个层之间的松散耦合，并封装了有关如何定位、连接和交互业务对象的逻辑。
在该模式中，业务委托（Business Delegate）充当一个中间人角色，负责将表示层的调用委托给业务对象。它隐藏了具体业务对象的实现细节，包括底层服务的查找和可访问性，以提供简化的接口供表示层使用。
业务委托模式用于解耦表示层和业务层。它基本上用于减少表示层代码中业务层代码的通信或远程查找功能。在业务层，我们有以下实体。
Client - 表示层代码可以是 JSP、Servlet 或 UI java 代码。 Business Delegate -业务委托 - 客户端实体提供对业务服务方法的访问的单个入口点类。 LookUp Service - 查找服务对象负责获取相关业务实现并提供对业务委托对象的业务对象访问。 Business Service - 业务服务接口。具体类实现该业务服务以提供实际的业务实现逻辑。 以下是一个示例的程序代码，演示了业务委托模式的实现：
public interface VideoStreamingService { void doProcessing(); } @Slf4j public class NetflixService implements VideoStreamingService { @Override public void doProcessing() { LOGGER.info(&amp;#34;NetflixService is now processing&amp;#34;); } } @Slf4j public class YouTubeService implements VideoStreamingService { @Override public void doProcessing() { LOGGER.info(&amp;#34;YouTubeService is now processing&amp;#34;); } } @Setter public class BusinessLookup { private NetflixService netflixService; private YouTubeService youTubeService; public VideoStreamingService getBusinessService(String movie) { if (movie.toLowerCase(Locale.ROOT).contains(&amp;#34;die hard&amp;#34;)) { return netflixService; } else { return youTubeService; } } } @Setter public class BusinessDelegate { private BusinessLookup lookupService; public void playbackMovie(String movie) { VideoStreamingService videoStreamingService = lookupService.</description>
    </item>
    <item>
      <title>Java设计模式：Bridge</title>
      <link>https://blog.chensoul.cc/posts/2023/08/28/java-design-patterns-bridge/</link>
      <pubDate>Mon, 28 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/28/java-design-patterns-bridge/</guid>
      <description>本文主要介绍 Bridge 桥接模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 桥接模式（Bridge Pattern）是一种结构型设计模式，用于将抽象与其实现分离，使它们可以独立地变化。桥接模式通过创建两个独立的层次结构，一个是抽象部分，一个是实现部分，来实现这种分离。
在桥接模式中，抽象部分包含抽象类或接口，定义了高层逻辑和功能。实现部分包含具体实现类，负责实现抽象部分定义的接口或方法。通过桥接模式，可以在两个层次结构中独立地扩展和变化类，而不会相互影响。同时，抽象部分和实现部分之间的耦合度降低，使系统更加灵活和可维护。
举例 考虑一下你拥有一种具有不同附魔的武器，并且应该允许将具有不同附魔的不同武器混合使用。 你会怎么做？ 为每个附魔创建每种武器的多个副本，还是只是创建单独的附魔并根据需要为武器设置它？ 桥接模式使您可以进行第二次操作。
翻译一下上面的武器示例。下面我们有武器的类层级：
public interface Weapon { void wield(); void swing(); void unwield(); Enchantment getEnchantment(); } public class Sword implements Weapon { private final Enchantment enchantment; public Sword(Enchantment enchantment) { this.enchantment = enchantment; } @Override public void wield() { LOGGER.info(&amp;#34;The sword is wielded.&amp;#34;); enchantment.onActivate(); } @Override public void swing() { LOGGER.info(&amp;#34;The sword is swinged.&amp;#34;); enchantment.apply(); } @Override public void unwield() { LOGGER.info(&amp;#34;The sword is unwielded.&amp;#34;); enchantment.onDeactivate(); } @Override public Enchantment getEnchantment() { return enchantment; } } public class Hammer implements Weapon { private final Enchantment enchantment; public Hammer(Enchantment enchantment) { this.</description>
    </item>
    <item>
      <title>[译]REST API 的自定义错误消息处理</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/global-error-handler-in-a-spring-rest-api/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/25/global-error-handler-in-a-spring-rest-api/</guid>
      <description>1. 概述 在本教程中，我们将讨论如何为 Spring REST API 实现全局错误处理程序。
我们将使用每个异常的语义为客户端构建有意义的错误消息，其明确的目标是为客户端提供所有信息以轻松诊断问题。
2. 自定义错误消息 让我们首先实现一个用于通过线路发送错误的简单结构 — ApiError：
public class ApiError { private HttpStatus status; private String message; private List&amp;lt;String&amp;gt; errors; public ApiError(HttpStatus status, String message, List&amp;lt;String&amp;gt; errors) { super(); this.status = status; this.message = message; this.errors = errors; } public ApiError(HttpStatus status, String message, String error) { super(); this.status = status; this.message = message; errors = Arrays.asList(error); } } 这里的信息应该很简单：
status – HTTP 状态代码 message – 与异常相关的错误消息 error – 构建的错误消息列表 当然，对于 Spring 中的实际异常处理逻辑，我们将使用 @ControllerAdvice 注解：
@ControllerAdvice public class CustomRestExceptionHandler extends ResponseEntityExceptionHandler { ... } 3. 处理错误请求异常 3.1.处理异常 现在让我们看看如何处理最常见的客户端错误 - 基本上是客户端向 API 发送无效请求的情况：
BindException – 发生致命绑定错误时抛出此异常。 MethodArgumentNotValidException – 当使用 @Valid 注解的参数验证失败时抛出此异常： @Override protected ResponseEntity&amp;lt;Object&amp;gt; handleMethodArgumentNotValid( MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) { List&amp;lt;String&amp;gt; errors = new ArrayList&amp;lt;String&amp;gt;(); for (FieldError error : ex.</description>
    </item>
    <item>
      <title>[译]Spring Events</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/spring-events/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/25/spring-events/</guid>
      <description>1. 概述 在本教程中，我们将讨论如何在 Spring 中使用事件。
事件是框架中最容易被忽视的功能之一，但也是最有用的功能之一。与 Spring 中的许多其他功能一样，事件发布是 ApplicationContext 提供的功能之一。
有一些简单的准则需要遵循：
如果我们使用 Spring Framework 4.2 之前的版本，事件类应该扩展 ApplicationEvent。从 4.2 版本开始，事件类不再需要扩展 ApplicationEvent 类。 发布者应该注入一个 ApplicationEventPublisher 对象。 监听器应该实现 ApplicationListener 接口。 2. 自定义事件 Spring 允许我们创建和发布默认情况下同步的自定义事件。这有一些优点，例如侦听器能够参与发布者的事务上下文。
2.1.一个简单的应用程序事件 让我们创建一个简单的事件类——只是一个存储事件数据的占位符。
在本例中，事件类保存一条字符串消息：
public class CustomSpringEvent extends ApplicationEvent { private String message; public CustomSpringEvent(Object source, String message) { super(source); this.message = message; } public String getMessage() { return message; } } 2.2.发布者 现在让我们创建该事件的发布者。发布者构造事件对象并将其发布给正在侦听的任何人。
要发布事件，发布者只需注入 ApplicationEventPublisher 并使用 publishEvent() API：
@Component public class CustomSpringEventPublisher { @Autowired private ApplicationEventPublisher applicationEventPublisher; public void publishCustomEvent(final String message) { System.out.println(&amp;#34;Publishing custom event. &amp;#34;); CustomSpringEvent customSpringEvent = new CustomSpringEvent(this, message); applicationEventPublisher.publishEvent(customSpringEvent); } } 或者，发布者类可以实现 ApplicationEventPublisherAware 接口，这也将在应用程序启动时注入事件发布者。通常，使用 @Autowire 注入发布者会更简单。</description>
    </item>
    <item>
      <title>[译]使用@Async进行Spring Security上下文传播</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/spring-security-async-principal-propagation/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/25/spring-security-async-principal-propagation/</guid>
      <description>1. 简介 在本教程中，我们将重点关注使用 @Async 传播 Spring Security 主体 默认情况下，Spring Security 身份验证绑定到 ThreadLocal - 因此，当执行流在带有 @Async 的新线程中运行时，它不会是经过身份验证的上下文。
这并不理想——让我们解决它。
2.Maven 依赖 为了在 Spring Security 中使用异步集成，我们需要在 pom.xml 的依赖项中包含以下部分：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-security-config&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.7.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 可以在此处找到最新版本的 Spring Security 依赖项。
3.使用@Async 进行 Spring Security 传播 我们先写一个简单的例子：
@RequestMapping(method = RequestMethod.GET, value = &amp;#34;/async&amp;#34;) @ResponseBody public Object standardProcessing() throws Exception { log.info(&amp;#34;Outside the @Async logic - before the async call: &amp;#34; + SecurityContextHolder.getContext().getAuthentication().getPrincipal()); asyncService.asyncCall(); log.info(&amp;#34;Inside the @Async logic - after the async call: &amp;#34; + SecurityContextHolder.getContext().getAuthentication().getPrincipal()); return SecurityContextHolder.getContext().getAuthentication().getPrincipal(); } 我们想要检查 Spring SecurityContext 是否传播到新线程。首先，我们在异步调用之前记录上下文，接下来我们运行异步方法，最后再次记录上下文。 asyncCall() 方法具有以下实现：
@Async @Override public void asyncCall() { log.info(&amp;#34;Inside the @Async logic: &amp;#34; + SecurityContextHolder.getContext().getAuthentication().getPrincipal()); } 正如我们所看到的，只有一行代码将输出异步方法的新线程内的上下文。</description>
    </item>
    <item>
      <title>[译]使用Spring进行REST的错误处理</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/exception-handling-for-rest-with-spring/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/25/exception-handling-for-rest-with-spring/</guid>
      <description>1. 概述 本教程将说明如何使用 Spring 为 REST API 实现异常处理。我们还将获得一些历史概述，并了解不同版本引入了哪些新选项。
在 Spring 3.2 之前，Spring MVC 应用程序中处理异常的两种主要方法是 HandlerExceptionResolver 或 @ExceptionHandler 注解。两者都有一些明显的缺点。
从 3.2 开始，我们使用了 @ControllerAdvice 注释来解决前两个解决方案的局限性，并促进整个应用程序的统一异常处理。
现在 Spring 5 引入了 ResponseStatusException 类，一种在 REST API 中进行基本错误处理的快速方法。
所有这些都有一个共同点：它们很好地处理了关注点分离。应用程序可以正常抛出异常来指示某种失败，然后将单独处理。
最后，我们将了解 Spring Boot 带来的功能以及如何配置它以满足我们的需求。
2.方案一：控制器级@ExceptionHandler 第一个解决方案在 @Controller 级别工作。我们将定义一个处理异常的方法并使用@ExceptionHandler 进行注释：
public class FooController{ //... @ExceptionHandler({ CustomException1.class, CustomException2.class }) public void handleException() { // } } 这种方法有一个主要缺点：· 注解的方法仅对特定的控制器有效，而不是对整个应用程序全局有效。当然，将其添加到每个控制器使其不太适合通用异常处理机制。
我们可以通过让所有控制器扩展基本控制器类来解决此限制。
然而，对于无论出于何种原因这是不可能的应用程序来说，此解决方案可能是一个问题。例如，控制器可能已经从另一个基类扩展，该基类可能位于另一个 jar 中或不可直接修改，或者本身可能不可直接修改。
接下来，我们将研究另一种解决异常处理问题的方法 - 一种全局的方法，不包括对现有工件（例如控制器）的任何更改。
3.解决方案 2：HandlerExceptionResolver 第二种解决方案是定义一个 HandlerExceptionResolver。这将解决应用程序抛出的任何异常。它还允许我们在 REST API 中实现统一的异常处理机制。
在选择自定义解析器之前，让我们先回顾一下现有的实现。
3.1.异常处理器异常解析器 该解析器是在 Spring 3.1 中引入的，并且在 DispatcherServlet 中默认启用。这实际上是前面介绍的 @ExceptionHandler 机制如何工作的核心组件。
3.2.默认处理程序异常解析器 这个解析器是在 Spring 3.0 中引入的，并且在 DispatcherServlet 中默认启用。
它用于将标准 Spring 异常解析为其相应的 HTTP 状态代码，即客户端错误 4xx 和服务器错误 5xx 状态代码。以下是它处理的 Spring 异常的完整列表以及它们如何映射到状态代码。</description>
    </item>
    <item>
      <title>[译]如何在Spring中执行@Async</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/spring-async/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/25/spring-async/</guid>
      <description>1. 概述 在本教程中，我们将探讨 Spring 中的异步执行支持和 @Async 注解。
简单地说，用 @Async 注解 bean 的方法将使其在单独的线程中执行。换句话说，调用者不会等待被调用方法的完成。
Spring 的一个有趣的方面是，框架中的事件支持还 支持异步处理（如果需要）。
2.启用异步支持 让我们首先通过 Java 注解启用异步处理。
我们将通过将 @EnableAsync 添加到配置类来完成此操作：
@Configuration @EnableAsync public class SpringAsyncConfig { ... } 启用注解就足够了。但也有一些简单的配置选项：
annotation 默认情况下，@EnableAsync 检测 Spring 的 @Async 注解和 EJB 3.1 javax.ejb.Asynchronous。我们也可以使用此选项来检测其他用户定义的注解类型。 mode 指示应使用的建议类型 - 基于 JDK 代理或 AspectJ 编织。 proxyTargetClass 指示应使用的代理类型 — CGLIB 或 JDK。仅当模式设置为 AdviceMode.PROXY 时，此属性才有效。 order 设置应用 AsyncAnnotationBeanPostProcessor 的顺序。默认情况下，它最后运行，以便它可以考虑所有现有代理。 我们还可以使用任务命名空间通过 XML 配置启用异步处理：
&amp;lt;task:executor id=&amp;#34;myexecutor&amp;#34; pool-size=&amp;#34;5&amp;#34; /&amp;gt; &amp;lt;task:annotation-driven executor=&amp;#34;myexecutor&amp;#34;/&amp;gt; 3.@Async 注解 首先，让我们回顾一下规则。 @Async 有两个限制：
它必须仅应用于公共方法。 自调用（从同一个类中调用异步方法）将不起作用。 原因很简单：该方法需要公开，以便可以被代理。并且自调用不起作用，因为它绕过代理并直接调用底层方法。
3.1.返回类型为 void 的方法 这是配置具有 void 返回类型的方法以异步运行的简单方法：
@Async public void asyncMethodWithVoidReturnType() { System.out.println(&amp;#34;Execute method asynchronously. &amp;#34; + Thread.currentThread().getName()); } 3.2.具有返回类型的方法 我们还可以通过将实际返回包装在 Future 中来将 @Async 应用于具有返回类型的方法：</description>
    </item>
    <item>
      <title>Java设计模式：Balking</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/java-design-patterns-balking/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/25/java-design-patterns-balking/</guid>
      <description>本文主要介绍 Balking 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 止步模式（Balking）是一种在对象处于特定状态时才执行操作的设计模式。它用于防止对象在不完整或不合适的状态下执行某些代码，从而确保代码的正确性和一致性。
该模式的核心思想是，在执行操作之前，检查对象的状态，并只在特定的状态下才执行操作。如果对象不处于预期状态，操作将被忽略或推迟执行，从而避免了不必要的操作或不一致的状态转换。
以下是止步模式的要点和示例：
对象状态检查：在执行操作之前，对象会检查自身的状态。这可以通过使用条件语句或状态标志来实现。 特定状态执行：只有当对象处于特定状态时，操作才会被执行。如果对象不满足执行条件，操作将被忽略或推迟执行。 线程安全考虑：由于止步模式通常涉及多线程环境，需要确保对共享资源的访问是线程安全的。可以使用同步机制（如 synchronized 关键字）来保护共享资源。 解释 真实世界例子
洗衣机中有一个开始按钮，用于启动衣物洗涤。当洗衣机处于非活动状态时，按钮将按预期工作，但是如果已经在洗涤，则按钮将不起任何作用。
通俗地说
使用止步模式，仅当对象处于特定状态时才执行特定代码。
维基百科说
禁止模式是一种软件设计模式，仅当对象处于特定状态时才对对象执行操作。例如，一个对象读取 zip 压缩文件并在压缩文件没打开的时候调用 get 方法，对象将在请求的时候”止步“。
程序示例
在此示例中， WashingMachine是一个具有两个状态的对象，可以处于两种状态：ENABLED 和WASHING。 如果机器已启用，则使用线程安全方法将状态更改为 WASHING。 另一方面，如果已经进行了清洗并且任何其他线程执行 wash（），则它将不执行该操作，而是不执行任何操作而返回。
这里是 WashingMachine 类相关的部分。
@Slf4j public class WashingMachine { private final DelayProvider delayProvider; private WashingMachineState washingMachineState; public WashingMachine(DelayProvider delayProvider) { this.delayProvider = delayProvider; this.washingMachineState = WashingMachineState.ENABLED; } public WashingMachineState getWashingMachineState() { return washingMachineState; } public void wash() { synchronized (this) { var machineState = getWashingMachineState(); LOGGER.info(&amp;#34;{}: Actual machine state: {}&amp;#34;, Thread.currentThread().getName(), machineState); if (this.washingMachineState == WashingMachineState.WASHING) { LOGGER.error(&amp;#34;Cannot wash if the machine has been already washing!&amp;#34;); return; } this.</description>
    </item>
    <item>
      <title>如何成为一名合格的架构师</title>
      <link>https://blog.chensoul.cc/posts/2023/08/21/architecture/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/21/architecture/</guid>
      <description>如何成为一名合格的架构师 成为一名合格的架构师需要不断学习和积累经验。以下是一些步骤和建议，可以帮助你成为一名合格的架构师：
学习基础知识：建立坚实的计算机科学和软件工程基础，包括数据结构、算法、操作系统、数据库等。深入学习编程语言和开发技术，了解不同技术栈的优缺点。
实践项目开发：通过参与实际的软件开发项目，积累项目管理和开发经验。亲身经历软件开发的各个阶段，从需求分析到设计、开发、测试和部署，深入了解软件开发的流程和挑战。
学习系统设计和架构：深入学习系统设计和架构的相关知识，包括架构模式、设计原则。阅读相关的书籍、文章和技术博客，参与架构设计讨论和社区活动。
以下是关于架构模式、设计原则和一些常见架构的简要介绍：
架构模式： 分层架构（Layered Architecture）：将系统划分为多个层次，每个层次有不同的职责和功能，实现松耦合和可维护性。 客户端-服务器模式（Client-Server）：将系统分为客户端和服务器，客户端发送请求并接收响应，服务器处理请求并提供服务。 发布-订阅模式（Publish-Subscribe）：基于事件的模式，发布者发布事件，订阅者订阅感兴趣的事件，实现解耦和扩展性。 微服务架构（Microservices Architecture）：将系统拆分为一组小型、自治的服务，每个服务专注于一个特定的业务功能，通过轻量通信协议进行交互。 事件驱动架构（Event-Driven Architecture）：系统的组成部分通过事件进行通信和协调，事件的发生触发相应的处理和反应。 设计原则： 单一职责原则（Single Responsibility Principle）：一个模块或类应该有且只有一个单一的责任。 开闭原则（Open-Closed Principle）：软件实体应该对扩展开放，对修改封闭。 里氏替换原则（Liskov Substitution Principle）：子类应该能够替换掉父类，并且不会破坏程序的正确性。 接口隔离原则（Interface Segregation Principle）：不应该强迫客户端依赖于它们不需要的接口。 依赖倒置原则（Dependency Inversion Principle）：应该依赖于抽象而不是具体实现。 实践架构设计：在实际项目中担任架构师的角色，负责系统的整体设计和架构决策。通过实践中的挑战和经验，不断提升自己的架构设计能力。
学习领域知识：根据自己的兴趣和发展方向，深入学习特定领域的知识。例如，如果你在金融领域工作，了解金融系统的特点和要求，掌握相关的技术和解决方案。
不断学习和跟进技术趋势：保持对新技术和趋势的敏感性，持续学习和跟进行业的最新发展。参加技术研讨会、培训课程和行业会议，阅读技术书籍和博客，与同行进行交流和讨论。
培养沟通和领导能力：作为架构师，与团队成员、业务部门和其他利益相关者进行有效的沟通和合作非常重要。培养良好的沟通和领导能力，能够清晰地表达设计思想和技术方案，并协调各方利益。
寻求 mentor 或参与指导项目：寻找经验丰富的架构师作为 mentor，从他们那里获得指导和建议。参与指导性项目，与其他架构师合作，共同解决复杂问题，学习他们的设计思路和方法。
持续改进和反思：持续改进自己的技术能力和专业素养。定期回顾和反思自己的设计决策和经验，寻找改进的空间，并从失败和挑战中吸取教训。
最重要的是，成为一名合格的架构师是一个渐进的过程，需要不断学习、实践和积累经验。通过不断提升自己的技术水平、设计能力和沟通能力，你将逐步成为一名优秀的架构师。
架构师必备的技能和知识 作为架构师，以下是一些必备的技能和知识：
系统设计和架构：具备全面的系统设计和架构能力，能够设计可靠、可扩展、高性能和安全的系统架构。了解常用的架构模式和设计原则，如分层架构、微服务架构、事件驱动架构等。 编程和开发经验：具备扎实的编程能力和开发经验，熟悉多种编程语言和技术栈。能够理解和评估不同技术选型的优缺点，并在需要时能够进行原型开发和演示。 分布式系统：了解分布式系统的概念、原理和常见挑战，熟悉分布式计算、分布式存储和分布式通信等相关技术。能够设计和优化分布式系统的架构，解决分布式系统中的一致性、容错和性能问题。 性能优化和调优：具备性能优化和调优的经验，能够分析和解决系统性能瓶颈。熟悉性能测试工具和性能监控工具，能够设计和实施性能测试计划，并提出相应的优化建议。 安全设计和防御：具备系统安全设计和防御的能力，了解常见的安全威胁和攻击方式，能够设计和实施安全策略和措施，确保系统的安全性和数据的保密性。 数据库和存储系统：熟悉各种数据库和存储系统的原理和使用，包括关系型数据库、NoSQL 数据库、缓存系统等。能够进行数据库设计和优化，保证数据的一致性和可靠性。 云计算和容器技术：了解云计算和容器技术的概念和基本原理，包括虚拟化、容器化、自动化部署等。能够设计和部署基于云计算和容器技术的系统架构，如使用 Docker、Kubernetes 等。 消息队列和事件驱动：熟悉消息队列和事件驱动架构，了解消息中间件的选择和使用。能够设计和实现基于消息队列和事件驱动的系统，实现松耦合和可扩展性。 高可用和容错设计：能够设计和实现高可用和容错的系统架构，包括故障恢复、负载均衡、容灾和备份策略等。了解分布式一致性和容错算法，如 Paxos、Raft 等。 沟通和领导能力：作为架构师，需要具备良好的沟通和领导能力。能够与团队成员、业务部门和其他利益相关者进行有效的沟通和合作，推动项目的顺利进行。 这些技能和知识将帮助架构师在设计和构建复杂系统时做出明智的决策，并确保系统的可靠性、可扩展性和性能。此外，架构师还应不断学习和保持对新技术和趋势的敏感性，以保持在技术领域的竞争力。
架构师学习路线图 作为架构师，以下是一个可能的学习路线图，可以帮助你系统地学习和发展架构师的技能：
基础知识： 学习软件开发基础知识，包括编程语言、数据结构和算法等。 理解软件开发流程和常用开发方法，如敏捷开发和 DevOps。 学习面向对象设计和设计模式。 架构设计基础： 学习软件架构的基本概念、原则和模式。 研究和理解常见的架构模式，如分层架构、客户端-服务器模式和发布-订阅模式等。 掌握设计原则，如单一职责原则、开闭原则和依赖倒置原则等。 深入学习架构模式和技术： 学习微服务架构的原理、设计和实施。 研究事件驱动架构和消息队列的使用。 探索大数据架构和分布式系统设计。 了解容器化和容器编排技术，如 Docker 和 Kubernetes。 实践和项目经验： 参与实际项目，从中学习架构设计和实施的经验。 尝试设计和开发自己的小型项目，实践架构设计和解决实际问题。 参与开源项目或贡献，与其他架构师交流和分享经验。 持续学习和发展： 关注行业趋势和新兴技术，如人工智能、物联网和区块链等。 参加架构师培训和认证课程，如 TOGAF、AWS Certified Solutions Architect 等。 参与架构师社区和论坛，与其他专业人士交流和学习。 请注意，这只是一个示例学习路线图，你可以根据自己的兴趣、目标和实际情况进行调整和扩展。重要的是保持持续学习和不断实践，通过实际项目和经验来提升自己的架构师技能。
架构师学习资源 以下是一些关于系统设计和架构的经典书籍：
《软件架构实践》（Software Architecture in Practice） - Len Bass、Paul Clements、Rick Kazman 《大规模分布式存储系统》（Designing Data-Intensive Applications） - Martin Kleppmann 《企业集成模式》（Enterprise Integration Patterns） - Gregor Hohpe、Bobby Woolf 《架构之美》（Beautiful Architecture） - Diomidis Spinellis、Georgios Gousios 《架构设计原则》（The Art of Software Architecture: Design Methods and Techniques） - Stephen T.</description>
    </item>
    <item>
      <title>用户故事如何应用到个人管理</title>
      <link>https://blog.chensoul.cc/posts/2023/08/21/user-stories-in-self-manager/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/21/user-stories-in-self-manager/</guid>
      <description>用户故事（User Stories）是敏捷软件开发中的一种需求表达方式，用于描述用户的需求、期望和价值。尽管用户故事主要应用于软件开发团队，但其原则和方法也可以应用到个人管理中，以帮助个人更好地管理自己的任务和目标。
在个人管理中，可以将用户故事的思维方式应用如下：
角色定义：将自己作为一个角色，例如“个人”或“自己的名字”。明确自己的身份和角色，以便更好地理解自己的需求和期望。 需求描述：将自己的需求和期望转化为用户故事的形式。例如：“作为一个个人，我希望每天早晨锻炼，以保持健康和增加活力。” 价值定义：确定每个用户故事的价值和意义。例如，锻炼身体可以增强健康、提高精力和改善心情，从而提升整体生活质量。 优先级排序：对用户故事进行优先级排序，以确定哪些是最重要的和紧急的。这有助于集中精力和资源，实现最有价值的目标。 制定计划：根据用户故事的优先级，制定个人管理计划。将每个用户故事转化为具体的任务、行动和时间安排，以实现期望的结果。 迭代和反馈：将个人管理过程视为一个迭代循环，不断评估和调整。根据实际执行情况和反馈，对计划进行调整和改进。 以下是一个制定个人管理计划的示例：
用户故事：作为一个个人，我希望提高工作效率和时间管理，以更好地完成任务和增加工作成果。
计划：
用户故事：作为一个个人，我希望设定明确的目标和优先级，以便更好地管理我的任务。 任务 1：制定长期目标和短期目标，并将其记录在个人笔记本或任务管理工具中。 任务 2：为每个目标设定优先级，以确定最重要的任务和活动。 用户故事：作为一个个人，我希望改善时间管理，以充分利用我的时间。 任务 1：分析我的日常时间分配，并识别时间浪费的区域。 任务 2：制定时间表或日程安排，将任务和活动合理分配到特定时间段。 任务 3：学习和采用时间管理技巧，如番茄工作法（Pomodoro Technique）或时间块（Time Blocking）。 用户故事：作为一个个人，我希望提高专注力和减少干扰，以更好地完成任务。 任务 1：创建一个有利于专注的工作环境，如清理工作区域、关闭手机通知或使用专注应用程序。 任务 2：学习并使用注意力管理技巧，如集中注意力训练（Focused Attention Training）或冥想。 用户故事：作为一个个人，我希望保持健康和提高精力，以更好地应对工作和任务。 任务 1：制定健康的生活习惯，如定期锻炼、健康饮食和充足的睡眠。 任务 2：安排休息和放松的时间，以避免过度劳累和疲劳。 用户故事：作为一个个人，我希望定期评估和调整我的个人管理计划，以适应变化和改进效果。 任务 1：每周或每月回顾我的个人管理计划，并记录我取得的成果和遇到的挑战。 任务 2：根据反馈和经验，调整计划中的任务和策略，以改进效果和适应新的需求。 这只是一个示例个人管理计划，你可以根据自己的需求和目标进行定制和调整。记得将计划中的任务具体化、可衡量，并逐步实施，以确保计划的可行性和有效性。
逐步实施个人管理计划是确保计划可行性和有效性的重要步骤。以下是一些方法来逐步实施你的个人管理计划：
制定优先级：根据计划中的任务和目标，确定它们的优先级顺序。将重要且紧急的任务放在首位，逐步处理其他任务。 制定计划：为每个任务制定具体的计划和行动步骤。将任务分解为更小的可管理的子任务，并为每个子任务设定截止日期或时间范围。 设定目标：为每个任务设定明确的目标和可衡量的指标。这样可以更好地跟踪和评估你的进展。 时间管理：合理安排时间以实施计划。使用时间管理技巧，如时间块，将任务和活动分配到特定的时间段，并设定时间限制以保持专注和高效。 建立习惯：将计划中的任务和行动转化为习惯。重复执行任务并坚持一段时间，以形成良好的习惯。 监控和评估：定期监控和评估你的进展。检查完成的任务，评估是否达到预期的目标和指标。根据反馈和经验，进行调整和改进。 适应变化：灵活应对变化和调整。如果遇到新的需求或情况，根据实际情况重新安排任务和优先级。 持续改进：根据实施的经验和反馈，不断改进个人管理计划。尝试新的方法和策略，寻找提高效率和成果的机会。 逐步实施个人管理计划需要耐心和坚持，一步一个脚印地完成每个任务，并逐渐扩大和提高目标的范围。记得给自己一定的弹性和容错空间，以适应意外情况和挑战。最重要的是保持积极的态度和动力，不断努力实现个人目标和提升自我管理能力。</description>
    </item>
    <item>
      <title>软件开发流程和常用开发方法</title>
      <link>https://blog.chensoul.cc/posts/2023/08/21/the-software-development-process/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/21/the-software-development-process/</guid>
      <description>软件开发流程和常用开发方法，如敏捷开发和 DevOps，对于架构师来说非常重要。下面我将简要介绍这些概念：
软件开发流程：
软件开发流程是指在开发软件时，按照一定的步骤和阶段进行工作的过程。常见的软件开发流程包括瀑布模型、迭代模型和增量模型等。这些流程以不同的方式组织和管理开发过程，包括需求分析、设计、编码、测试和部署等阶段。
敏捷开发：
敏捷开发是一种迭代和增量的软件开发方法，强调团队协作、快速响应变化和持续交付。敏捷开发强调通过迭代周期（如 Scrum 中的 Sprint）来开发软件，每个迭代都会产生可部署的软件功能。常见的敏捷方法包括 Scrum、XP（极限编程）和 Kanban 等。
DevOps：
DevOps 是一种软件开发和运维的方法论，旨在通过自动化和协作来加速软件交付和提高质量。DevOps 强调开发团队和运维团队之间的协作和共享责任，借助自动化工具和流程来实现持续集成、持续交付和持续部署。
开发流程 软件开发流程通常包括以下阶段：
需求收集：收集和记录软件的功能和非功能性需求。 分析与规划：分析需求并规划开发过程，包括资源分配、时间表和交付物。 设计：基于需求创建软件架构、模块和组件的详细设计。 实现：编写代码并集成设计的组件，进行软件开发。 测试：进行各种测试活动，如单元测试、集成测试和系统测试，确保软件按预期功能。 部署：发布软件并在生产环境中向最终用户提供使用。 维护与支持：在部署后提供持续的维护、错误修复和支持。 在整个过程中，遵循版本控制、文档化和协作等最佳实践是非常重要的，以确保软件开发生命周期的顺利和高效进行。
常见的软件开发流程包括瀑布模型、迭代模型和增量模型等：
瀑布模型（Waterfall Model）： 瀑布模型是一种线性顺序的软件开发流程，按照固定的阶段依次执行，每个阶段的输出作为下一个阶段的输入。典型的阶段包括需求分析、系统设计、编码、测试和维护等。瀑布模型适用于需求稳定且较小规模的项目，但缺乏灵活性和适应变化的能力。
下面是瀑布模型的典型阶段：
需求分析阶段：在这个阶段，与用户和利益相关者一起收集和明确软件系统的需求。定义系统的功能和性能要求，并编写详细的需求规格说明书。 系统设计阶段：在需求分析完成后，进行系统设计。这包括定义系统的整体架构、模块划分、数据结构和算法设计等。设计结果通常以文档形式呈现。 编码阶段：在系统设计完成后，开发团队开始实际的编码工作。根据设计文档，开发人员编写代码并实现系统的各个功能模块。 测试阶段：在编码完成后，进行系统测试。测试人员根据需求和设计规范执行功能测试、集成测试和系统测试，以验证系统的正确性和稳定性。 集成和部署阶段：在测试通过后，将各个模块进行集成，并进行系统级的测试和部署准备。确保整个系统能够协同工作，并准备好部署到目标环境中。 运维和维护阶段：一旦系统部署并投入使用，进入运维和维护阶段。在这个阶段，团队负责监控系统的运行状况，处理问题和错误，并进行必要的修复和更新。 瀑布模型的特点是每个阶段的工作是线性、顺序的，下一个阶段的开始依赖于前一个阶段的完成。这种模型适合需求稳定、项目规模较小、技术风险较低的项目。然而，瀑布模型缺乏灵活性和对变化的适应能力，难以应对需求变更和项目延期等问题。
因此，在面对需求变化频繁、项目复杂度高、风险较大的情况下，敏捷开发方法如 Scrum 和 Kanban 等更为适用，它们强调迭代、增量和持续交付，能更好地满足客户需求并快速响应变化。
迭代模型（Iterative Model）： 迭代模型强调通过多个迭代周期来逐步构建和完善软件。每个迭代周期包括需求分析、设计、编码、测试和部署等阶段，每个迭代都会产生可部署的软件版本。迭代模型适用于需求不完全明确或可能变化的项目，能够更好地适应变化和快速反馈。
以下是迭代模型的一般流程：
阶段规划：确定每个迭代周期的目标、范围和计划。这包括确定要开发的功能、分配资源、制定时间表等。 需求分析：在每个迭代的开始阶段，与用户和利益相关者一起收集和分析需求，并明确每个迭代的功能和优先级。 设计和开发：根据需求分析的结果，进行系统设计和开发工作。在每个迭代中，系统的某个部分会被设计、开发和测试。 测试和验证：在每个迭代周期结束时，进行系统的内部测试和验证。确保开发的功能符合需求，并满足预期的质量标准。 评审和反馈：在每个迭代周期结束后，与用户和利益相关者进行评审和反馈。他们提供对当前功能的评价和建议，以指导下一个迭代的开发工作。 迭代调整：根据用户的反馈和评审结果，对下一个迭代的计划进行调整和优化。可能需要重新定义需求、调整功能优先级、增加新的需求等。 重复迭代：通过不断重复上述步骤，每个迭代周期都会逐步增加系统的功能、完善系统的性能，并在每个迭代中交付一个可用的软件增量。 迭代模型的优势在于能够快速响应变化和不断提供增值。它允许在开发过程中灵活调整需求，并通过每个迭代的反馈和评审来改进产品。然而，迭代模型也需要适当的计划和管理，以确保每个迭代都能按时交付，并控制开发过程中的风险。
敏捷方法如 Scrum 和 Kanban 是迭代模型的典型实践，它们更加强调团队的协作、自组织和持续交付，适用于需求变化频繁和项目复杂度较高的环境
增量模型（Incremental Model）： 增量模型将软件按模块或功能进行划分，每个模块或功能被称为一个增量，通过逐步添加增量来逐渐构建完整的软件系统。每个增量都经历需求分析、设计、开发和测试等阶段。增量模型适用于大规模项目和需要分阶段交付的情况，可以提供更早的价值交付和更好的风险管理。
以下是增量模型的一般流程：
阶段划分：将整个软件系统划分为多个增量，每个增量都代表一个可用的软件部分。划分的方式可以基于功能、模块、业务流程等来定义。 需求分析：在每个增量开始时，与用户和利益相关者一起收集和明确关于该增量的需求和功能。确定每个增量的优先级和范围。 设计和开发：根据需求分析的结果，进行系统设计和开发工作。每个增量的设计和开发都是独立进行的，可以采用适合的开发方法和技术。 测试和验证：在每个增量完成开发后，进行系统的测试和验证。确保该增量的功能符合需求，并满足预期的质量标准。 增量交付：经过测试和验证后，将该增量交付给用户或利益相关者。用户可以开始使用该增量，并提供反馈和建议以进一步改进和优化。 增量整合：在完成一个增量的交付后，将该增量与之前交付的增量进行整合。确保不同增量之间的功能和模块可以协同工作，并形成一个完整的软件系统。 通过不断重复上述步骤，每个增量都逐步增加系统的功能和完善系统的性能。增量模型允许在开发过程中快速交付可用的软件部分，并根据用户的反馈和需求变化进行调整。它可以提高软件开发的可见性和用户满意度，降低项目风险。
与迭代模型相比，增量模型更加强调不同增量之间的独立性和可用性。每个增量都是一个可用的软件部分，用户可以在开发过程中逐步使用和评估系统功能。然而，增量模型可能需要更好的规划和管理，以确保增量之间的集成和整合顺利进行，并避免系统架构上的问题。
敏捷开发 敏捷开发（Agile Development）是一种以迭代、增量和协作为核心的软件开发方法。它强调团队合作、快速响应变化和持续交付，以提高客户满意度和项目成功率。以下是敏捷开发的核心原则和常用实践：
核心原则：
个体和互动胜过流程和工具（Individuals and interactions over processes and tools）：强调团队成员之间的沟通、合作和相互支持，重视人与人之间的交流。 可工作的软件胜过详尽的文档（Working software over comprehensive documentation）：注重以可工作的软件作为验证和沟通的手段，而不是过多依赖繁杂的文档。 客户合作胜过合同谈判（Customer collaboration over contract negotiation）：鼓励与客户密切合作，及时获取反馈并根据需求变化进行调整。 响应变化胜过遵循计划（Responding to change over following a plan）：灵活应对需求变化，通过迭代和增量的方式快速适应变化的环境。 常用实践：</description>
    </item>
    <item>
      <title>[译]Spring Boot项目如何实现JWT认证？</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-jwt-authentication-in-spring-boot-project/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-jwt-authentication-in-spring-boot-project/</guid>
      <description>没有人可以否认这样一个事实：安全性是生产就绪应用程序的一项重要功能。尽管我们可以使用内存身份验证、JDBC 身份验证或通过 UserDetailsS​​ervice 来保护一个 Web 应用程序的安全。但是，当一个应用程序在内部使用其他应用程序的服务时，使用 Web 服务概念实现安全性就变得很重要。在这种情况下，我们使用具有特定有效期的令牌来保护我们的应用程序。此外，我们将学习“如何在 Spring Boot 项目中实现 JWT 身份验证？”以整体了解 JWT（JSON Web Token）身份验证背后的概念。
由于 JWT 代表“JSON Web Token”，很明显，该令牌仅以 JSON 形式保存数据。
此外，与上述身份验证技术不同，JWT 属于无状态身份验证。简而言之，它没有数据。通常，这种类型的身份验证用于 Web 服务、服务器的水平扩展，甚至在某种程度上用于 OAuth 技术。为了说明该网络服务，让我们可视化从亚马逊预订订单的过程。在这里，用户与 Amazon 应用程序交互，而 Amazon 应用程序在内部通过 Web 服务调用与支付网关应用程序交互。
现在让我们开始讨论我们的主题“如何在 Spring Boot 项目中实现 JWT 身份验证？”以及相关点。
您对整篇文章有何期望？ 读完本文后，您将能够回答：
什么是安全上下文中的无状态和有状态身份验证？ 无状态认证和有状态认证有什么区别？ 那么什么是 Token，什么是 JWT(JSON Web Token)？
使用 JWT 认证有什么好处？
JWT 内部如何运作？
我们在什么情况下使用 JWT 身份验证？
此外，JWT 身份验证和状态身份验证之间有什么区别？
此外，如何生成 JWT 编码令牌以及如何将其解码回来？
如何在 Spring Boot 项目中逐步实现 JWT 认证？
在 Spring Boot 3.0 中，如何在不使用 WebSecurityConfigurerAdapter 的情况下编写安全配置类？
最后，如何测试启用 JWT 安全的应用程序？
什么是无状态和有状态身份验证？ 通常有两种类型的认证技术。两者都发生在客户端服务器概念中，服务器仅在身份验证后才向客户端提供服务。这里的客户端可以是浏览器，也可以是另一个服务器。
状态认证 在这种类型的身份验证中，客户端和服务器之间涉及会话管理。当客户端向服务器请求服务时，它首先登录到服务器。然后服务器创建一个会话并以键值对的形式存储该信息。这个会话是服务器端的一种内存。我们也称其为 HttpSession，因为 Http 协议管理它。
此外，为了响应客户端请求，服务器以 Cookie 的形式向客户端提供带有响应的会话 id。该 cookie 存储在客户端浏览器中。当同一个客户端第二次发出请求时，请求头中也会带有 cookie。因此，服务器会检查请求标头，如果在 cookie 中发现相同的 SID（会话 ID），则假定该请求来自同一客户端。通过这种方式，会话管理就发生了。
当客户端从服务器注销时，会话会相应地被销毁。结果，服务器相应地从内存中删除会话信息（键值）。同样重要的是，对于每个新客户端，服务器都会创建一个新会话（内存）。
无状态身份验证 当客户端向服务器发送服务请求时，它首先登录到服务器。因此，服务器生成一个令牌（编码格式的数据）并将响应发送到客户端。在发出第二个请求时，客户端将相同的令牌与请求一起发送到服务器。现在，服务器从请求中读取令牌并验证令牌。事实上，从第一个请求开始，服务器就检查客户端的有效登录（凭据）。</description>
    </item>
    <item>
      <title>[译]Spring Boot项目如何实现Security？</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot-project/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot-project/</guid>
      <description>如今，几乎每个客户都要求在实时应用程序中实现强大的安全功能。安全功能对于保持机密性、完整性和可用性的需求是非常有效的。现实世界中有很多类型的安全性，但我们作为开发人员将重点关注应用程序/软件安全性。
此外，在应用程序安全方面，我们的工作基本上是确保两件事。首先，只有有效的用户才能访问该应用程序。其次，如果用户有效，他/她只能访问该应用程序中允许的数据/信息。我认为，没有什么可以解释它们，因为您必须已经了解这两个术语，即身份验证和授权。
您可能已经猜到我们将在当前主题“如何在 Spring Boot 项目中实现安全性？”中讨论什么内容。
在本文中，我们将从基本原理开始学习。接下来，我们将逐步结束它，直到我们有信心在 Spring Boot 应用程序中实现安全功能。因此，让我们开始逐步讨论“如何在 Spring Boot 项目中实现安全性？”。 Spring Boot 教程页面上有一系列有关 Spring Boot Security 的教程。
我们在本文中介绍了两个版本的“如何在 Spring Boot 项目中实现安全性？”的示例：使用 WebSecurityConfigurerAdapter 和不使用 WebSecurityConfigurerAdapter。此外，还涵盖了使用 Spring Boot 3.0 及更高版本的“如何在 Spring Boot 项目中实现安全性？”的示例。
您将从本文中学到什么？ 为什么我们需要在 Spring Boot 应用程序中实现安全性？
Security 在 Spring Boot 应用程序内部如何工作？
javax.servlet.Filter 在 Spring Boot 应用程序中实现安全性方面的作用是什么？
Spring Boot 项目中使用了多少种授权类型？
Spring Boot 项目中有多少种实现安全性的方法？
在 Spring Boot 项目中实现 WebSecurity 的步骤是什么？
另外，如何在 Spring Boot 项目中使用@EnableWebSecurity、@Configuration、@Bean？
如何实现内存中身份验证安全示例
如何实现 JDBC 认证安全示例
如何在 Spring Boot 项目中使用 Thymeleaf ？
如何测试启用安全的功能？
相反，如何禁用应用程序的安全功能？
最后但并非最不重要的一点是，您将学习“如何在 Spring Boot 项目中实现安全性？”使用 WebSecurityConfigurerAdapter 和不使用 WebSecurityConfigurerAdapter。
为什么我们需要应用程序中的安全性？ 现在，随着恶意攻击将重点从操作系统和网络转移到应用程序/软件和移动设备/设备，一天的数据面临最大的风险。此外，从业务/客户的角度来看，应用程序安全在维护信任、建立品牌形象和降低风险方面发挥着重要作用。事实上，没有其中任何一项，都无法想象一家成功的企业。
总之，无论您是为了内部使用、销售目的还是购买目的而创建应用程序，安全性都是每个应用程序最重要的功能。
根据最新的 2020 年 Verizon 数据泄露调查报告，所有数据泄露中有 43% 是针对 Web 应用程序的攻击。这一数字比 2019 年增加了一倍。此外，86% 的违规行为都是出于经济动机。</description>
    </item>
    <item>
      <title>[译]如何在Spring Boot2中使用UserDetailsService实现安全性？</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</guid>
      <description>继续上一篇关于实现 Spring Security 的两种不同方法的文章，在本文中，我们将学习第三种方法“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现 Security？”。经过上一篇文章后，我希望我们都非常熟悉安全性的基础知识，甚至是 Spring Boot 应用程序中的安全性基础知识。这次我们将创建一个用户注册表并将用户及其角色保存到数据库中。
然后，根据用户角色，我们将借助预定义的 UserDetailsS​​ervice 检查身份验证和授权功能。
如果您正在寻找“如何在 Spring Boot 3 及以上版本中使用 UserDetailsS​​ervice 在 Spring Boot 中实现安全性？”，请访问有关使用 Spring Boot 3 的 Spring Security UserDetailsS​​ervice 的单独文章。
为了说明这一点，我们将把一些角色发挥作用，并在整个过程中围绕它们进行发挥，以使其变得清晰。此外，我们将有一些页面并限制它们仅可由某些特定角色访问。同样重要的是，我们必须创建一个小型 MVC Web 应用程序，以使注册过程向用户开放。用户在注册时将输入自己的角色。然后我们可以在其之上实现安全功能。
让我们开始相应的主题“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现安全性？”。
总体而言，您对这篇文章有何期望？ Spring Security 上下文中的 UserDetailsS​​ervice 概念是什么？
实施 UserDetailsService 有什么好处？
如何使用 UserDetailsService 在 Spring Boot 中实现安全性？
UserDetailsService 在 Spring Security 应用程序中如何内部工作并带有流程图？
另外，如何使用注解：@EnableWebSecurity、@Configuration、@Bean、@GetMapping、@Autowired、@Data、@Entity、@Table、@Id、@GenerateValue、@Column、@ElementCollection、@CollectionTable、@JoinColumn ， @服务
如何使用 Spring MVC 和 Thymeleaf 开发用户注册应用程序？
如何测试启用安全的应用程序？
如何在没有 WebSecurityConfigurerAdapter 的情况下使用 UserDetailsService 在 Spring Boot 中实现安全性？
UserDetailsService 是做什么的？使用它有什么好处？ UserDetailsS​​ervice 是 Spring 中 org.springframework.security.core.userdetails 包下的预定义接口。我们的实现类实现了这个接口并重写了它的 loadUserByUsername(String username) 方法。此方法返回 UserDetails，它又是一个接口。预定义的 User 类（org.springframework.security.core.userdetails.User）是 UserDetails 接口的实现。总之，在 loadUserByUsername(String username) 方法中，我们传递用户名，它返回我们预定义的 User 对象（org.</description>
    </item>
    <item>
      <title>[译]如何在Spring Boot3中使用UserDetailsService实现安全性？</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</guid>
      <description>作为有关 Spring Security 的系列文章的继续，在本文中我们将学习“如何在 Spring Boot 3 中使用 UserDetailsService 实现 Spring Boot 中的安全性？”。经过前面的文章，我希望我们都非常熟悉安全性的基础知识，甚至 Spring Boot 应用程序中的安全性基础知识。 Spring Boot 3 发布后，我们将在这里实现“使用 Spring Boot 3 的 Spring Security UserDetailsService”。
在本文中，我们将创建一个用户注册表单并将用户及其角色保存在数据库中。然后，根据用户角色，我们将借助预定义的 UserDetailsS​​ervice 检查身份验证和授权功能。
您对整篇文章有何期望？ Spring Security 上下文中的 UserDetailsS​​ervice 概念是什么？
实施 UserDetailsService 有什么好处？
如何使用 Spring Boot 3 实现 Spring Security UserDetailsService？
如何在基于 Spring 的应用程序中实现基于角色的安全性？
此外，如何以及在哪里使用注释：@EnableWebSecurity，@Configuration，@Bean，@GetMapping，@Autowired，@Data，@Entity，@Table，@Id，@GenerateValue，@Column，@ElementCollection，@CollectionTable， @JoinColumn，@Service
如何使用 Spring MVC 和 Thymeleaf 开发用户注册应用程序？
如何测试启用安全的应用程序？
如何在没有 WebSecurityConfigurerAdapter 的情况下使用 UserDetailsService 在 Spring Boot 中实现安全性？
示例中使用的软件/技术 有时某些版本与其他版本冲突。因此，列出经过测试可以相互协作的组合。下面是经过测试的软件组合，用于使用 Spring Boot 3 开发 Spring Security UserDetailsS​​ervice。它也使实现完美无缺。
Spring Boot 3.0.0
JDK 17 or later
Maven 3.8.1 3）Maven 3.8.1
IDE – STS 4.7.1. RELEASE
IDE – STS 4.7.1。发布
Jars Used 下面是这些示例中 maven 使用 pom.</description>
    </item>
    <item>
      <title>[译]没有WebSecurityConfigurerAdapter的Spring Security.md</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</guid>
      <description>在 Spring Security 模块的上下文中，WebSecurityConfigurerAdapter 是一个抽象类，根据 Spring 官方网站 2022 年 2 月 21 日发布的公告，该类已从 Spring Security 5.7.0-M2 中弃用。它通常用于扩展 configure() 方法由自定义配置子类实现。因此，它鼓励用户转向基于组件的安全配置。为了支持对这种新配置设计的更改，我们将讨论常见用例列表和未来建议的替代方案。因此，我们将讨论没有 WebSecurityConfigurerAdapter 的 Spring Security 用例的实现。
了解这一变化很重要，因为迟早我们将使用最新版本的 Spring Security 来开发安全功能。让我们讨论“没有 WebSecurityConfigurerAdapter 的 Spring Security”主题及其相关概念。
什么是 WebSecurityConfigurerAdapter？ WebSecurityConfigurerAdapter 是 Spring Security 模块提供的一个抽象类。一般来说，我们使用它来重写它的 configure()方法来定义我们的安全配置类。通常，我们在应用程序中实现 Spring Security 时使用两个具有不同参数的 configure() 方法。一种用于声明与身份验证相关的配置，另一种用于声明与授权相关的配置。该代码类似于下面的代码片段。
@Configuration @EnableWebSecurity public class SecurityConfiguration extends WebSecurityConfigurerAdapter { @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { // configure Authentication ...... } @Override protected void configure(HttpSecurity http) throws Exception { // configure Authorization ...... } } 为什么我们需要学习这个改变？ 如果您使用 Spring Boot 2.7.0 和 maven，它将自动下载 Spring Security 5.7.0 或更高版本。在这种情况下，您会发现 WebSecurityConfigurerAdapter 已被弃用。如果您仍然想使用此类而不弃用，您可以在 pom.xml 中将 Spring Boot 版本更改为较低版本（例如 2.6.6 ），如下所示。它将自动下载低于 5.</description>
    </item>
    <item>
      <title>[译]Spring Security - JWT</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-jwt/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-jwt/</guid>
      <description>简介和概述 JSON Web Token 或 JWT（更常见的名称）是一种开放的互联网标准 (RFC 7519)，用于以紧凑的方式在各方之间安全地传输可信信息。令牌包含编码为 JSON 对象的声明，并使用私有密钥或公钥/私钥对进行数字签名。它们是独立且可验证的，因为它们经过数字签名。 JWT 可以进行签名和/或加密。
签名的令牌验证令牌中包含的声明的完整性，而加密的令牌则向其他方隐藏声明。
JWT 也可用于信息交换，尽管它们更常用于授权，因为它们比使用内存中随机令牌的会话管理具有很多优势。其中最重要的是允许将身份验证逻辑委托给第三方服务器，例如 AuthO 等。
JWT 令牌分为 3 部分，即标头、有效负载和签名，格式为
[Header].[Payload].[Signature] Header − JWT 令牌的标头包含应用于 JWT 的加密操作列表。这可以是签名技术、有关内容类型的元数据信息等。标头以 JSON 对象的形式呈现，该对象被编码为 base64URL。有效 JWT 标头的示例是 { &amp;#34;alg&amp;#34;: &amp;#34;HS256&amp;#34;, &amp;#34;typ&amp;#34;: &amp;#34;JWT&amp;#34; } 这里，“alg”为我们提供了有关所用算法类型的信息，“typ”为我们提供了信息的类型。
Payload − JWT 的有效负载部分包含使用令牌传输的实际数据。这部分也称为 JWT 令牌的“声明”部分。索赔可以分为三种类型：注册索赔、公开索赔和私人索赔。 注册的声明是推荐的但不是强制的声明，例如 iss(发行者)、sub(主题)、aud(受众) 等。 公共声明是那些使用 JWT 的人定义的声明。 私人声明或自定义声明是为了在相关方之间共享信息而创建的用户定义的声明。 有效负载对象的示例可以是。
{ &amp;#34;sub&amp;#34;: &amp;#34;12345&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;Johnny Hill&amp;#34;, &amp;#34;admin&amp;#34;: false } 有效负载对象与标头对象一样，也采用 base64Url 编码，并且该字符串构成 JWT 的第二部分。
Signature− JWT 的签名部分用于验证消息在此过程中没有更改。如果令牌是用私钥签名的，它还会验证发送者的身份。它是使用编码的标头、编码的有效负载、秘密和标头中指定的算法创建的。签名的一个例子是。 HMACSHA256(base64UrlEncode(header) + &amp;#34;.&amp;#34; + base64UrlEncode(payload), secret); 如果我们输入标头、有效负载和签名，我们会得到一个令牌，如下所示。
eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6I kpvaG4gRG9lIiwiYWRtaW4iOmZhbHNlfQ.gWDlJdpCTIHVYKkJSfAVNUn0ZkAjMxskDDm-5Fhe WJ7xXgW8k5CllcGk4C9qPrfa1GdqfBrbX_1x1E39JY8BYLobAfAg1fs_Ky8Z7U1oCl6HL63yJq_ wVNBHp49hWzg3-ERxkqiuTv0tIuDOasIdZ5FtBdtIP5LM9Oc1tsuMXQXCGR8GqGf1Hl2qv8MCyn NZJuVdJKO_L3WGBJouaTpK1u2SEleVFGI2HFvrX_jS2ySzDxoO9KjbydK0LNv_zOI7kWv-gAmA j-v0mHdJrLbxD7LcZJEGRScCSyITzo6Z59_jG_97oNLFgBKJbh12nvvPibHpUYWmZuHkoGvuy5RLUA 现在，可以使用承载模式在授权标头中使用此令牌。
Authorization − Bearer 授权 - 持有者
使用 JWT 令牌进行授权是其最常见的应用。令牌通常在服务器中生成并发送到客户端，并存储在会话存储或本地存储中。要访问受保护的资源，客户端将在标头中发送 JWT，如上所述。我们将在下面的部分中看到 Spring Security 中的 JWT 实现。</description>
    </item>
    <item>
      <title>[译]Spring Security - OAuth2</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-oauth2/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-oauth2/</guid>
      <description>OAuth 2.0 基础知识 OAuth 2.0 由 IETF OAuth 工作组开发并于 2012 年 10 月发布。它作为一种开放授权协议，使第三方应用程序能够代表资源所有者对 HTTP 服务进行有限访问。它可以在不泄露用户身份或长期凭证的情况下做到这一点。第三方应用程序本身也可以代表其使用它。
OAuth 的工作原理包括将用户身份验证委托给托管用户帐户的服务，并授权第三方应用程序访问用户的帐户。
让我们考虑一个例子。假设我们要登录网站“clientsite.com”。我们可以通过 Facebook、Github、Google 或 Microsoft 登录。我们选择上面给出的选项中的任何选项，然后我们将被重定向到相应的网站进行登录。如果登录成功，系统会询问我们是否要授予 clientsite.com 访问其请求的特定数据的权限。
我们选择所需的选项，然后使用授权代码或错误代码重定向到 clientsite.com，登录是否成功取决于我们在第三方资源中的操作。这就是 OAuth 2 的基本工作原理。
OAuth 系统涉及五个关键角色。让我们把它们列出来 -
User / Resource Owner − 用户/资源所有者- 最终用户，负责身份验证并同意与客户端共享资源。 User-Agent − 用户代理- 用户使用的浏览器。 Client − 客户端 - 请求访问令牌的应用程序。 Authorization Server − 授权服务器- 用于验证用户/客户端的服务器。它颁发访问令牌并在其整个生命周期内对其进行跟踪。 Resource Server − 资源服务器- 提供对所请求资源的访问的 API。它验证访问令牌并提供授权。 入门 我们将使用 Spring Security 和 OAuth 2.0 开发一个 Spring Boot 应用程序来说明上述内容。我们现在将开发一个带有内存数据库的基本应用程序来存储用户凭据。该应用程序将使我们轻松了解 OAuth 2.0 与 Spring Security 的工作原理。
让我们使用 Spring 初始化程序在 Java 8 中创建一个 Maven 项目。让我们从 start.spring.io 开始。我们生成一个具有以下依赖项的应用程序 -
Spring Web Spring Security Cloud OAuth2 Spring Boot Devtools 通过上面的配置，我们点击 Generate 按钮生成一个项目。该项目将以 zip 文件形式下载。我们将 zip 解压到一个文件夹中。然后我们可以在我们选择的 IDE 中打开该项目。我在这里使用 Spring Tools Suite，因为它针对 Spring 应用程序进行了优化。我们也可以根据需要使用 Eclipse 或 IntelliJ Idea。</description>
    </item>
    <item>
      <title>[译]Spring Security - 使用数据库表单登录</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-with-database/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-with-database/</guid>
      <description>内容 简介和概述 Spring Security 的基本组件 AuthenticationFilter 认证过滤器 AuthenticationManager 认证管理器 AuthenticationProvider 认证提供者 UserDetailsService 用户详情服务 PasswordEncoder 密码编码器 Spring 安全上下文 表单登录 使用数据库登录 登录尝试限制 入门（实用指南） 简介和概述 除了提供各种内置的身份验证和授权选项之外，Spring Security 还允许我们根据需要自定义身份验证过程。从自定义登录页面到我们自己的自定义身份验证提供程序和身份验证过滤器，我们几乎可以自定义身份验证过程的各个方面。
我们可以定义自己的身份验证过程，范围可以从使用用户名和密码的基本身份验证到复杂的身份验证，例如使用令牌和 OTP 的双因素身份验证。此外，我们可以使用各种数据库 - 关系数据库和非关系数据库，使用各种密码编码器，将恶意用户锁定在其帐户之外，等等。
今天，我们将讨论三种此类自定义，即自定义表单登录、数据库提供的身份验证以及限制登录尝试。尽管这些都是非常基本的用例，但它们仍然可以让我们更仔细地了解 Spring Security 的身份验证和授权过程。我们还将建立一个注册页面，用户可以通过该页面在我们的应用程序中进行注册。
首先我们看一下 Spring Security 的架构。它从 servlet 过滤器开始。这些过滤器拦截请求，对其执行操作，然后将请求传递到过滤器链中的下一个过滤器或请求处理程序，或者在不满足某些条件时阻止它们。正是在这个过程中，Spring Security 可以对请求进行身份验证并对请求执行各种身份验证检查。
它还可以通过不允许未经身份验证或恶意请求访问我们受保护的资源来阻止它们通过。因此我们的应用程序和资源受到保护。
Spring Security 架构的组件 正如我们在上图中看到的那样，Spring Security 的基本组件如下所示。我们将在讨论过程中简要讨论它们。我们还将讨论它们在身份验证和授权过程中的角色。
AuthenticationFilter 认证过滤器 这是拦截请求并尝试对其进行身份验证的过滤器。在 Spring Security 中，它将请求转换为身份验证对象并将身份验证委托给 AuthenticationManager。
AuthenticationManager 认证管理器 它是身份验证的主要策略接口。它使用单独的方法 authenticate()来验证请求。 authenticate() 方法执行身份验证，并在身份验证成功时返回 Authentication 对象，或者在身份验证失败时抛出 AuthenticationException。如果该方法无法决定，它将返回 null。这个过程中的认证过程委托给了我们接下来要讨论的 AuthenticationProvider。
AuthenticationProvider 认证提供者 AuthenticationManager 由 ProviderManager 实现，后者将流程委托给一个或多个 AuthenticationProvider 实例。任何实现 AuthenticationProvider 接口的类都必须实现两个方法——authenticate() 和 supports()。首先，我们来谈谈 supports()方法。它用于检查我们的 AuthenticationProvider 实现类是否支持特定的身份验证类型。如果支持则返回 true，否则返回 false。
接下来是 authenticate() 方法。这是身份验证发生的地方。如果支持该认证类型，则启动认证过程。这里这个类可以使用 UserDetailsS​​ervice 实现的 loadUserByUsername() 方法。如果未找到用户，则会抛出 UsernameNotFoundException。
另一方面，如果找到用户，则使用该用户的身份验证详细信息来验证该用户。例如，在基本认证场景中，可以将用户提供的密码与数据库中的密码进行核对。如果发现它们彼此匹配，则说明成功。然后我们可以从此方法返回一个 Authentication 对象，该对象将存储在安全上下文中，我们将在稍后讨论。
UserDetailsService 用户详情服务 它是 Spring Security 的核心接口之一。任何请求的身份验证主要取决于 UserDetailsS​​ervice 接口的实现。它最常用于数据库支持的身份验证中以检索用户数据。通过单独的 loadUserByUsername() 方法的实现来检索数据，我们可以在其中提供逻辑来获取用户的用户详细信息。如果未找到用户，该方法将抛出 UsernameNotFoundException。</description>
    </item>
    <item>
      <title>[译]Spring Security - 表单登录、记住我和注销</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</guid>
      <description>内容 简介和概述 入门（实用指南） 简介和概述 Spring Security 附带了大量内置功能和工具，为我们提供方便。在这个例子中，我们将讨论其中三个有趣且有用的功能 -
表单登录 记住账号 登出 表单登录 基于表单的登录是 Spring Security 提供支持的一种用户名/密码身份验证形式。这是通过 Html 表单提供的。
每当用户请求受保护的资源时，Spring Security 都会检查请求的身份验证。如果请求未经过身份验证/授权，用户将被重定向到登录页面。登录页面必须由应用程序以某种方式呈现。 Spring Security 默认提供该登录表单。
此外，如果需要，任何其他配置都必须明确提供，如下所示 -
protected void configure(HttpSecurity http) throws Exception { http // ... .formLogin( form -&amp;gt; form.loginPage(&amp;#34;/login&amp;#34;) .permitAll() ); } 此代码要求模板文件夹中存在一个 login.html 文件，该文件将在点击 /login 时返回。该 HTML 文件应包含一个登录表单。此外，该请求应该是对 /login 的 post 请求。参数名称应分别为用户名和密码的“username”和“password”。除此之外，表单中还需要包含 CSRF 令牌。
一旦我们完成了代码练习，上面的代码片段就会更加清晰。
记住账号 这种类型的身份验证需要将记住我的 cookie 发送到浏览器。该 cookie 存储用户信息/身份验证主体，并存储在浏览器中。因此，网站可以在下次会话启动时记住用户的身份。 Spring Security 已为此操作准备了必要的实现。
一种使用散列来保护基于 cookie 的令牌的安全性，而另一种使用数据库或其他持久存储机制来存储生成的令牌。
登出 默认 URL /logout 通过以下方式注销用户：
使 HTTP 会话失效 清除配置的所有 RememberMe 身份验证 清除 SecurityContextHolder 重定向到/login?logout WebSecurityConfigurerAdapter 自动将注销功能应用于 Spring Boot 应用程序。
Getting Started (Practical Guide) 像往常一样，我们首先访问 start.spring.io。这里我们选择一个 maven 项目。我们将项目命名为“formlogin”并选择所需的 Java 版本。我在此示例中选择 Java 8。我们还继续添加以下依赖项 -</description>
    </item>
    <item>
      <title>[译]Spring Security 和 Spring Boot 入门</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security/</guid>
      <description>Spring Security 是一个有助于保护企业应用程序安全的框架。通过与 Spring MVC、Spring Webflux 或 Spring Boot 集成，我们可以创建一个强大且高度可定制的身份验证和访问控制框架。在本文中，我们将解释核心概念并仔细研究 Spring Security 提供的默认配置及其工作原理。我们将进一步尝试自定义它们并分析它们对示例 Spring Boot 应用程序的影响。
示例代码 本文附有 GitHub 上的工作代码示例。
创建示例应用程序 让我们从头开始构建一个 Spring Boot 应用程序，看看 spring 如何配置和提供安全性。让我们从 spring starter 创建一个应用程序并添加所需的最少依赖项。
生成项目后，我们将其导入到 IDE 中并将其配置为在端口 8083 上运行。
mvnw clean verify spring-boot:run (for Windows) ./mvnw clean verify spring-boot:run (for Linux) 在应用程序启动时，我们应该看到一个登录页面。
控制台日志打印作为默认安全配置的一部分随机生成的默认密码：
使用默认用户名 user 和默认密码（来自日志），我们应该能够登录该应用程序。我们可以在 application.yml 中覆盖这些默认值：
spring: security: user: name: admin password: passw@rd 现在，我们应该能够使用用户 admin 和密码 passw@rd 登录。
依赖版本 在这里，我们使用了 Spring Boot 2.7.5 版本。基于此版本，Spring Boot 内部将 Spring Security 版本解析为 5.7.4。但是，如果需要，我们可以在 pom.xml 中覆盖这些版本，如下所示：
&amp;lt;properties&amp;gt; &amp;lt;spring-security.version&amp;gt;5.2.5.RELEASE&amp;lt;/spring-security.version&amp;gt; &amp;lt;/properties&amp;gt; 了解安全组件 要了解默认配置的工作原理，我们首先需要了解以下内容：
Servlet Filters 过滤器 Authentication 认证 Authorization 授权 Servlet Filters 让我们仔细看看应用程序启动时的控制台日志。我们看到 DefaultSecurityFilterChain 在请求到达 DispatcherServlet 之前触发一系列过滤器。 DispatcherServlet 是 Web 框架中的关键组件，用于处理传入的 Web 请求并将它们分派到适当的处理程序进行处理。</description>
    </item>
    <item>
      <title>[译]Spring Security：深入了解身份验证和授权</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-authentication-and-authorization/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-authentication-and-authorization/</guid>
      <description>您可以使用本指南来了解 Spring Security 是什么以及其核心功能（如身份验证、授权或常见漏洞保护）如何工作。此外，还有全面的常见问题解答。
（编者注：大约 6500 字，您可能不想尝试在移动设备上阅读本文。将其添加为书签，稍后再回来。）
介绍 迟早每个人都需要为其项目添加安全性，在 Spring 生态系统中，您可以借助 Spring Security 库来实现这一点。
因此，您继续将 Spring Security 添加到您的 Spring Boot（或普通 Spring）项目中，然后突然……​
&amp;hellip;您有自动生成的登录页面。 &amp;hellip;您无法再执行 POST 请求。 &amp;hellip;​ 您的整个应用程序处于锁定状态，并提示您输入用户名和密码。 在经历了随后的精神崩溃之后，您可能会对这一切是如何运作的感兴趣。
什么是 Spring Security 以及它是如何工作的？ 简短的回答： 从本质上讲，Spring Security 实际上只是一堆 servlet 过滤器，可帮助您向 Web 应用程序添加身份验证和授权。 它还与 Spring Web MVC（或 Spring Boot）等框架以及 OAuth2 或 SAML 等标准很好地集成。它会自动生成登录/注销页面并防止 CSRF 等常见漏洞。 现在，这并没有什么帮助，不是吗？ 幸运的是，还有一个很长的答案：本文的其余部分。
网络应用程序安全：101 在成为 Spring Security 大师之前，您需要了解三个重要概念：
Authentication 验证 Authorization 授权 Servlet Filters 过滤器 建议：不要跳过本节，因为它是 Spring Security 所做的一切的基础。另外，我会让它尽可能有趣。
1. 认证 首先，如果您正在运行典型的（Web）应用程序，您需要用户进行身份验证。这意味着您的应用程序需要验证用户是否是他所声称的人，通常通过用户名和密码检查来完成。
用户：“我是美国总统。我的 *username* 是：potus！” 您的网络应用程序：“当然可以，那么您的 *password* 是什么，总统先生？” 用户：“我的密码是：th3don4ld”。 您的网络应用程序：“正确。欢迎，先生！”
2、授权 在更简单的应用程序中，身份验证可能就足够了：用户经过身份验证后，她就可以访问应用程序的每个部分。
但大多数应用程序都有权限（或角色）的概念。想象一下：可以访问您的网上商店面向公众的前端的客户，以及可以访问单独管理区域的管理员。
两种类型的用户都需要登录，但身份验证这一事实并不能说明他们可以在系统中执行哪些操作。因此，您还需要检查经过身份验证的用户的权限，即您需要授权该用户。
用户：“让我玩那个核足球&amp;hellip;&amp;hellip;”。 您的网络应用程序：“等一下，我需要先检查您的 *permissions* ……是的，总统先生，您拥有正确的许可级别。尽情享受吧。” 用户：“那个红色按钮又是什么……​？”
3.Servlet 过滤器 最后但并非最不重要的一点是，让我们看一下 Servlet 过滤器。它们与身份验证和授权有什么关系？ （如果您对 Java Servlet 或 Filter 完全陌生，我建议您阅读旧的但仍然非常有效的 Head First Servlets 书。）</description>
    </item>
    <item>
      <title>[译]为 Spring Boot 应用程序创建优化的 Docker 映像</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-boot-docker/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-boot-docker/</guid>
      <description>容器已成为打包具有所有软件和操作系统依赖项的应用程序，然后将其传送到不同环境的首选方式。
本文着眼于容器化 Spring Boot 应用程序的不同方法：
使用 Docker 文件构建 Docker 镜像， 使用 Cloud-Native Buildpack 从源代码构建 OCI 映像， 通过使用分层工具将 JAR 的各个部分拆分为不同的层，在运行时优化映像。 示例代码 本文附有 GitHub 上的工作代码示例。
容器术语 我们将从整篇文章中使用的容器术语开始：
Container image: 具有特定格式的文件。我们通过运行构建工具将应用程序转换为容器映像。 Container: 容器镜像的运行时实例。 Container engine: t 负责运行 Container 的守护进程。 Container host: 容器引擎运行的主机。 Container registry: 用于发布和分发容器映像的共享位置。 OCI Standard: 开放容器倡议 (OCI) 是在 Linux 基金会下形成的一个轻量级、开放的治理结构。 OCI 镜像规范定义了容器镜像格式和运行时的行业标准，以确保所有容器引擎都可以运行任何构建工具生成的容器镜像。 为了容器化应用程序，我们将应用程序封装在容器映像中，并将该映像发布到共享注册表。容器运行时从注册表中提取该映像，解压该映像，然后在其中运行应用程序。
Spring Boot 2.3 版本提供了用于构建 OCI 映像的插件。
Docker 恰好是最常用的容器实现，并且我们在示例中使用 Docker，因此本文中所有后续对容器的引用都将指 Docker。
以传统方式构建容器镜像 通过向 Docker 文件添加一些指令，可以非常轻松地创建 Spring Boot 应用程序的 Docker 镜像。
我们首先构建一个可执行 JAR，并作为 Docker 文件指令的一部分，在应用必要的自定义后将可执行 JAR 复制到基本 JRE 映像上。
让我们从 Spring Initializr 创建带有 web 、 lombok 和 actuator 依赖项的 Spring Boot 应用程序。我们还添加了一个休息控制器来使用 GET 方法公开 API。
创建 Docker 文件 接下来，我们通过添加 Dockerfile 来容器化该应用程序：</description>
    </item>
    <item>
      <title>[译]深入了解Spring事务管理：@Transactional</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</guid>
      <description>您可以使用本指南来简单实用地了解 Spring 使用 @Transactional 注释进行事务管理的工作原理。
唯一的先决条件？您需要对 ACID 有一个粗略的了解，即什么是数据库事务以及为什么使用它们。此外，这里不讨论分布式事务或反应式事务，但就 Spring 而言，一般原则仍然适用。
介绍 在本指南中，您将了解 Spring 核心事务抽象框架的主要支柱（这是一个令人困惑的术语，不是吗？） - 用大量代码示例进行描述：
@Transactional （声明式事务管理）与编程式事务管理。 物理事务与逻辑事务。 Spring @Transactional 与 JPA/Hibernate 集成。 Spring @Transactional 与 Spring Boot 或 Spring MVC 集成。 回滚、代理、常见陷阱等等。 与 Spring 官方文档相反，本指南不会直接深入探讨 Spring-first 主题，从而让您感到困惑。
相反，您将以非常规的方式学习 Spring 事务管理：从头开始，一步一步。这意味着，从普通的老式 JDBC 事务管理开始。
Why? 为什么？
因为 Spring 所做的一切都是基于这些 JDBC 基础知识。如果您掌握了这些基础知识，稍后您将可以使用 Spring 的 @Transactional 注释节省大量时间。
普通 JDBC 事务管理的工作原理 如果您在不完全了解 JDBC 事务的情况下考虑跳过本节：请不要这样做。
如何启动、提交或回滚 JDBC 事务 第一个重要的收获是：无论您使用 Spring 的 @Transactional 注释、普通 Hibernate、jOOQ 还是任何其他数据库库，都没有关系。
最后，它们都执行相同的操作来打开和关闭（我们称之为“管理”）数据库事务。普通的 JDBC 事务管理代码如下所示：
import java.sql.Connection; Connection connection = dataSource.getConnection(); // (1) try (connection) { connection.setAutoCommit(false); // (2) // execute some SQL statements... connection.commit(); // (3) } catch (SQLException e) { connection.</description>
    </item>
    <item>
      <title>Spring Security和OAuth2发展过程</title>
      <link>https://blog.chensoul.cc/posts/2023/08/15/spring-security-oauth2-history/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/15/spring-security-oauth2-history/</guid>
      <description>Spring Security 的发展过程 Spring Security 是一个功能强大且广泛使用的安全框架，为企业级应用程序提供了全面的安全性。Spring Security 最初是 Acegi Security 项目的一部分，于 2004 年发布，现在已经成为 Spring 生态系统的核心组件。 Spring Security 的发展过程可以分为三个阶段：
第一阶段：Spring Security 起源于一个名为 Acegi Security 的开源项目，初期重点实现了 Spring 应用的身份认证和授权服务功能。2003 年，Acegi Security 作为一个孵化项目被捐献给 Spring 社区。2004 年，正式作为 Spring 框架的核心组件之一 Absorbed 进 Spring。并更名为 Spring Security。Spring Security 1.0 版本 Spring Security 1.0 版本发布于 2004 年。它提供了最基本的安全功能，包括身份验证和授权。身份验证是验证用户是否是他们所声称的人的过程。授权是确定用户是否有权访问特定资源的过程。 Spring Security 1.0 版本使用了以下技术来实现身份验证和授权：
表单身份验证：表单身份验证是通过用户提交表单来验证用户身份的过程。 基于角色的访问控制 (RBAC)：RBAC 是一种授权模型，它将用户分配到角色，然后这些角色被授予对特定资源的访问权限。 第二阶段：Spring Security 2.0 版本 Spring Security 2.0 版本发布于 2006 年。它提供了更多的安全功能，包括加密和会话管理。加密是将数据转换成无法被他人理解的形式的过程。会话管理是跟踪用户会话的状态的过程。 Spring Security 2.0 版本使用了以下技术来实现加密和会话管理：
安全套接字层 (SSL)：SSL 是一种加密协议，它可以保护数据在传输过程中不被窃听。 会话管理：Spring Security 提供了自己的会话管理实现，它可以跟踪用户会话的状态。 第三阶段：Spring Security 3.0 版本 Spring Security 3.0 版本发布于 2008 年。它是一个重大的版本更新，它提供了许多新的安全功能，包括 OAuth、SAML 和 OpenID。 OAuth 是一种授权框架，它允许第三方应用程序访问用户的资源。SAML 是一种单点登录 (SSO) 协议，它允许用户在一个地方登录，然后访问多个网站。OpenID 是一种开放的身份验证协议，它允许用户使用他们选择的身份提供商来验证他们的身份。 Spring Security 3.0 版本使用了以下技术来实现 OAuth、SAML 和 OpenID：</description>
    </item>
    <item>
      <title>数据库如何设计树形结构</title>
      <link>https://blog.chensoul.cc/posts/2023/08/15/tree-structure-in-database/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/15/tree-structure-in-database/</guid>
      <description>在 MySQL 中，设计树形结构的区域表有多种方式。以下是一些常见的方案：
父子关系（Parent-Child Relationship）模型：在这种模型中，每个行记录包含一个指向其父级的引用。可以使用一个额外的列来存储父级 ID，或者使用自连接表来表示关系。这种模型简单直观，易于理解和管理。 路径（Path）模型：在这种模型中，每个行记录都包含一个代表其完整路径的字段。路径可以是以某种分隔符（如斜杠）分隔的字符串，例如：/地区/国家/城市。通过解析和处理路径字段，可以轻松地查询父级、子级和兄弟节点。 嵌套集模型（Nested Set Model）：这是一种基于左右值的模型，通过预先计算每个节点的左右值，可以高效地查询树形结构。每个节点都有一个左值和一个右值，用于表示其在树中的位置。这种模型适用于大型树结构，但需要特殊的操作来维护左右值。 物化路径（Materialized Path）模型：这是路径模型的一种改进版本，它使用额外的列来存储节点的层级关系。除了路径字段外，还可以添加一个表示节点级别的字段。这样可以更高效地进行查询，并且可以轻松地获取节点的父级、子级和兄弟节点。 父子关系（Parent-Child Relationship）模型 父子关系（Parent-Child Relationship）模型是一种在 MySQL 中设计树形结构的方式。在该模型中，每个区域记录包含一个指向其父级区域的引用。通过这种父子关系，可以建立区域之间的层级结构。
以区域为例，我们可以创建一个名为&amp;quot;area&amp;quot;的表来存储区域信息。该表可以包含以下列：
id：区域的唯一标识符（主键） name：区域的名称 parent_id：指向父级区域的引用 通过使用父子关系模型，我们可以创建以下区域的层级结构：
id | name | parent_id --------------------------- 1 | 世界 | NULL 2 | 亚洲 | 1 3 | 欧洲 | 1 4 | 北美洲 | 1 5 | 中国 | 2 6 | 日本 | 2 7 | 德国 | 3 8 | 法国 | 3 9 | 美国 | 4 10 | 加拿大 | 4 11 | 北京市 | 5 12 | 上海市 | 5 13 | 东京都 | 6 14 | 横滨市 | 6 在上述示例中，&amp;ldquo;area&amp;quot;表的每一行代表一个区域，通过&amp;quot;parent_id&amp;quot;列建立父子关系。根区域（世界）的&amp;quot;parent_id&amp;quot;为 NULL，表示没有父级区域。其他区域通过指定父级区域的&amp;quot;id&amp;quot;来建立层级关系。</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记17：减少可变性</title>
      <link>https://blog.chensoul.cc/posts/2023/08/14/minimize-mutability/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/14/minimize-mutability/</guid>
      <description>本文是 《Effective Java 3》第四章《类和接口》的学习笔记：减少可变性。
原文 不可变类是实例不能被修改的类。每个实例中包含的所有信息在对象的生命周期内都是固定的，因此永远不会观察到任何更改。Java 库包含许多不可变的类，包括 String、基本类型的包装类、BigInteger 和 BigDecimal。这么做有很好的理由：不可变类比可变类更容易设计、实现和使用。它们不太容易出错，而且更安全。
要使类不可变，请遵循以下 5 条规则：
1、不要提供修改对象状态的方法（这类方法也被称为修改器）
2、确保类不能被继承。 这可以防止粗心或恶意的通过子类实例对象状态可改变的方式，损害父类的不可变行为。防止子类化通常用 final 修饰父类，但是还有一种替代方法，我们将在后面讨论。
3、所有字段用 final 修饰。 这清楚地表达了意图，并由系统强制执行。同样，如果在没有同步的情况下，引用新创建的实例并从一个线程传递到另一个线程，那么就有必要确保正确的行为，就像内存模型中描述的那样。
4、所有字段设为私有。 这将阻止客户端访问字段引用的可变对象并直接修改这些对象。虽然在技术上允许不可变类拥有包含基本类型或对不可变对象的引用的公共 final 字段，但不建议这样做，因为在以后的版本中无法更改内部表示。
5、确保对任何可变组件的独占访问。 如果你的类有任何引用可变对象的字段，请确保该类的客户端无法获得对这些对象的引用。永远不要向提供对象引用的客户端初始化这样的字段，也不要从访问器返回字段。在构造函数、访问器和 readObject 方法中创建防御性副本。
前面条目中的许多示例类都是不可变的。其中一个类是 PhoneNumber，它的每个属性都有访问器，但没有对应的修改器。下面是一个稍微复杂的例子：
// Immutable complex number class public final class Complex { private final double re; private final double im; public Complex(double re, double im) { this.re = re; this.im = im; } public double realPart() { return re; } public double imaginaryPart() { return im; } public Complex plus(Complex c) { return new Complex(re + c.re, im + c.im); } public Complex minus(Complex c) { return new Complex(re - c.</description>
    </item>
    <item>
      <title>Java设计模式：Async Method Invocation</title>
      <link>https://blog.chensoul.cc/posts/2023/08/14/java-design-patterns-async-method-invocation/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/14/java-design-patterns-async-method-invocation/</guid>
      <description>本文主要介绍 Async Method Invocation 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 Async Method Invocation（异步方法调用）是一种编程模式，用于处理异步操作和并发执行。它允许在执行某个操作时不阻塞主线程，而是将操作委托给另一个线程或处理程序，并在操作完成后获取结果或执行回调。
异步方法调用的主要目的是提高应用程序的性能和响应能力。通过将耗时的操作（如网络请求、文件读写、数据库查询等）置于后台线程或异步任务中，可以使主线程能够继续执行其他任务，而不会被阻塞。
异步方法调用可以在不同的编程语言和框架中以不同的方式实现，包括以下几种常见的形式：
回调函数（Callback）：通过定义回调函数，将异步操作的结果传递给调用方。当异步操作完成时，回调函数会被调用并处理结果。 Future/Promise（Future/Deferred）：通过 Future 或 Promise 对象表示异步操作的结果，调用方可以在需要时获取结果或添加回调函数来处理结果。 异步/await：异步/await 是一种语法糖，用于简化异步代码的编写和理解。它允许以同步的方式编写异步操作，使代码更具可读性。 观察者模式（Observer）：通过定义观察者对象，异步操作的结果可以被观察者订阅。当结果可用时，观察者会被通知并执行相应的操作。 使用异步方法调用可以提高应用程序的并发性能和用户体验。它可以在后台执行耗时的操作，使主线程保持响应，并允许应用程序同时处理多个并发请求。然而，对于并发操作的正确处理和管理资源的安全性仍然需要仔细考虑和实施。
举例 AsyncResult（用于异步评估值的中间容器），AsyncCallback（可以在任务完成时被执行）和AsyncExecutor（用于管理异步任务的执行）。
public interface AsyncResult&amp;lt;T&amp;gt; { boolean isCompleted(); T getValue() throws ExecutionException; void await() throws InterruptedException; } public interface AsyncCallback&amp;lt;T&amp;gt; { void onComplete(T value, Optional&amp;lt;Exception&amp;gt; ex); } public interface AsyncExecutor { &amp;lt;T&amp;gt; AsyncResult&amp;lt;T&amp;gt; startProcess(Callable&amp;lt;T&amp;gt; task); &amp;lt;T&amp;gt; AsyncResult&amp;lt;T&amp;gt; startProcess(Callable&amp;lt;T&amp;gt; task, AsyncCallback&amp;lt;T&amp;gt; callback); &amp;lt;T&amp;gt; T endProcess(AsyncResult&amp;lt;T&amp;gt; asyncResult) throws ExecutionException, InterruptedException; } ThreadAsyncExecutor是AsyncExecutor的实现。 接下来将突出显示其一些关键部分。
public class ThreadAsyncExecutor implements AsyncExecutor { @Override public &amp;lt;T&amp;gt; AsyncResult&amp;lt;T&amp;gt; startProcess(Callable&amp;lt;T&amp;gt; task) { return startProcess(task, null); } @Override public &amp;lt;T&amp;gt; AsyncResult&amp;lt;T&amp;gt; startProcess(Callable&amp;lt;T&amp;gt; task, AsyncCallback&amp;lt;T&amp;gt; callback) { var result = new CompletableResult&amp;lt;&amp;gt;(callback); new Thread( () -&amp;gt; { try { result.</description>
    </item>
    <item>
      <title>Java设计模式：API Gateway </title>
      <link>https://blog.chensoul.cc/posts/2023/08/13/java-design-patterns-api-gateway/</link>
      <pubDate>Sun, 13 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/13/java-design-patterns-api-gateway/</guid>
      <description>本文主要介绍 API Gateway 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
目的 API 网关设计模式旨在将所有对微服务的调用聚合到一起。客户端通过调用 API 网关来实现对多个微服务的访问，而不是直接调用每个微服务。这种模式的目的是解决以下问题：
减少客户端的网络请求：如果客户端直接调用每个微服务，会导致额外的网络请求，增加加载时间。通过使用 API 网关，客户端只需要进行一次调用，而不是多次调用。 解耦客户端和微服务：如果客户端直接与每个微服务进行通信，客户端与微服务之间的耦合度很高。当微服务的实现发生变化或位置发生变化时，需要更新所有客户端。使用 API 网关可以将客户端与具体的微服务解耦，客户端只需要与 API 网关通信。 提供集中化的功能和服务：API 网关可以实现一些通用的功能和服务，例如限流、认证、授权、安全性等。这样可以避免每个微服务都实现这些功能，减少重复代码。 解释 在实际应用中，API 网关通常包括一个转换引擎，用于实时地编排和修改请求和响应。它还可以提供收集分析数据和提供缓存等功能。另外，API 网关还可以支持身份验证、授权、安全性、审计和法规遵从性等功能。
假设你正在开发一个电子商务平台，其中包含多个微服务，如用户服务、产品服务、图片服务、订单服务和支付服务等。每个微服务都有自己的 API 和数据库。
在这种情况下，你可以引入一个 API 网关来处理对这些微服务的访问。API 网关作为一个入口点，接收来自客户端的请求，并将请求转发到适当的微服务。
例如，当一个客户端需要获取某个产品的详细信息时，他们可以发送一个 HTTP 请求到 API 网关的特定端点。API 网关会验证请求并将其转发到产品服务。产品服务将查询数据库获取产品信息，并将响应返回给 API 网关。然后，API 网关将产品信息返回给客户端。
API 网关可以实现以下功能：
认证和授权：API 网关可以验证客户端的身份和权限，确保只有经过授权的用户能够访问特定的微服务。 请求转发和路由：API 网关根据请求的路径和参数将请求转发到适当的微服务。它可以执行负载均衡和路由策略，确保请求被正确地分发到相应的微服务实例。 响应聚合：如果一个请求需要从多个微服务获取数据，API 网关可以将这些请求发送给相应的微服务，并将它们的响应聚合到一个响应中返回给客户端。 缓存和性能优化：API 网关可以缓存常用的请求和响应，以提高性能并减轻后端微服务的负载。 安全性和监控：API 网关可以实施安全策略，例如防止恶意请求和 DDoS 攻击。它还可以监控请求和响应，收集应用程序的指标和日志数据。 程序示例
此实现展示了电子商务站点的 API 网关模式。 ApiGateway分别使用 ImageClientImpl和 PriceClientImpl来调用 Image 和 Price 微服务。 在桌面设备上查看该网站的客户可以看到价格信息和产品图片，因此 ApiGateway会调用这两种微服务并在DesktopProduct模型中汇总数据。 但是，移动用户只能看到价格信息。 他们看不到产品图片。 对于移动用户，ApiGateway仅检索价格信息，并将其用于填充MobileProduct模型。
这个是图像微服务的实现。
public interface ImageClient { String getImagePath(); } public class ImageClientImpl implements ImageClient { @Override public String getImagePath() { var httpClient = HttpClient.newHttpClient(); var httpGet = HttpRequest.newBuilder() .</description>
    </item>
    <item>
      <title>Java设计模式：Arrange/Act/Assert</title>
      <link>https://blog.chensoul.cc/posts/2023/08/13/java-design-patterns-arrange-act-assert/</link>
      <pubDate>Sun, 13 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/13/java-design-patterns-arrange-act-assert/</guid>
      <description>本文主要介绍 Arrange/Act/Assert 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
介绍 Arrange/Act/Assert（安排/执行/断言）又称 Given/When/Then，是一种测试设计模式，用于组织和编写单元测试的结构。它提供了一种清晰的测试布局，使得测试代码易于理解和维护。
该模式的三个阶段如下：
Arrange（安排）：在这个阶段，你准备测试环境和设置测试数据。这包括创建对象、设置输入参数、模拟依赖项等。你的目标是为将要进行的测试创建一个合适的环境。 Act（执行）：在这个阶段，你执行要测试的操作或调用要测试的方法。这是你对被测试代码进行实际调用的地方。 Assert（断言）：在这个阶段，你验证测试的结果是否符合预期。你会检查实际的输出、状态变化或异常情况，并使用断言语句来断言测试的期望结果。 这种测试结构的优势在于它提供了清晰的分离和组织测试代码的方式，并使得测试的目的和预期结果更容易理解。它也有助于减少测试代码中的重复和冗余。
以下是一个使用 Arrange/Act/Assert 模式编写的示例测试方法的伪代码：
public void testCalculateTotalPrice() { // Arrange ShoppingCart cart = new ShoppingCart(); cart.addItem(new Item(&amp;#34;Item 1&amp;#34;, 10.0)); cart.addItem(new Item(&amp;#34;Item 2&amp;#34;, 15.0)); // Act double totalPrice = cart.calculateTotalPrice(); // Assert assertEquals(25.0, totalPrice, 0.01); } 在上述示例中，首先在 Arrange 阶段创建了一个购物车对象，并添加了两个商品。然后，在 Act 阶段调用了calculateTotalPrice()方法来计算总价格。最后，在 Assert 阶段使用断言语句来验证计算的结果是否等于预期的总价格。
适用性 Arrange/Act/Assert（安排/执行/断言）设计模式适用于编写单元测试，特别是针对函数、方法或类的单元测试。它在以下情况下特别有用：
单元测试：Arrange/Act/Assert 模式适用于对单个函数或方法进行测试。它帮助你组织测试代码，使其结构清晰，并确保每个测试只关注一个特定的功能或行为。 易于理解和维护：这种模式提供了一种一致的测试结构，使得测试代码易于理解和维护。通过明确的安排、执行和断言阶段，你可以更清楚地了解测试的目的和预期结果。 测试代码可读性：Arrange/Act/Assert 模式可以使测试代码更具可读性。通过按照统一的结构组织测试代码，使得测试逻辑更加清晰可见，易于他人理解和参与。 提高可维护性：使用这种模式可以减少测试代码中的重复和冗余，使得测试代码更易于维护。在 Arrange 阶段设置测试环境和准备数据，可以减少在每个测试中重复的代码。 测试结果验证：Arrange/Act/Assert 模式明确了测试结果的验证过程。在 Assert 阶段使用断言语句来验证实际结果与预期结果的一致性，帮助你确保被测试代码的正确性。 需要注意的是，Arrange/Act/Assert 模式主要适用于单元测试，而对于集成测试或端到端测试等更大范围的测试，可能需要使用其他测试设计模式或框架来进行组织和管理测试代码。
除了 Arrange/Act/Assert 模式，以下是一些适用于集成测试或端到端测试的设计模式或框架：
Page Object 模式：Page Object 模式是一种用于管理用户界面元素和操作的设计模式。它将页面的元素和操作封装到可重用的对象中，使得测试代码更具可读性和可维护性。Page Object 模式特别适用于 Web 应用程序的端到端测试。 数据构建器模式：数据构建器模式用于生成测试数据，以便在集成测试或端到端测试中使用。它提供了一种灵活的方式来创建测试数据，包括复杂的数据结构和关联关系。 数据准备和清理模式：在集成测试或端到端测试中，通常需要准备测试数据和环境，并在测试完成后进行清理。数据准备和清理模式提供了一种结构化的方法来管理这些操作，确保测试的一致性和可重复性。 Mock 对象模式：Mock 对象模式用于模拟或替代外部依赖项，以便进行集成测试或端到端测试。通过使用 Mock 对象，你可以隔离被测试代码与外部系统的交互，使得测试更加可控和独立。 BDD（行为驱动开发）框架：BDD 框架（如 Cucumber、SpecFlow 等）提供了一种以自然语言编写测试用例和规范的方式。它将测试用例描述为可读性强的场景和步骤，帮助开发人员、测试人员和业务利益相关者之间的沟通和理解。 参考 Arrange, Act, Assert: What is AAA Testing?</description>
    </item>
    <item>
      <title>周报-28｜技术文档范例</title>
      <link>https://blog.chensoul.cc/posts/2023/07/27/weekly_review_28/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/27/weekly_review_28/</guid>
      <description>前言 本篇是对 2023-07-10 到 2023-07-16 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
读书、健身、投资、帮朋友、陪家人。
这是我的第 27 篇周报，由于工作的原因，前两周的周报是一起发布的，所以第 27 篇周报被跳过去了。
技术文档范例 以下是一个使用中文标题的技术文档范例：
一、介绍 1.1 目的 1.2 范围 1.3 受众 1.4 定义、缩略语和术语 二、概述 2.1 系统架构 2.2 主要功能 2.3 系统要求 三、入门指南 3.1 安装 3.2 配置 3.3 第一步操作 四、用户指南 4.1 用户界面 4.2 导航 4.3 功能 五、管理指南 5.1 系统配置 5.2 用户管理 5.3 安全性 六、故障排除 6.1 常见问题 6.2 错误消息 七、附录 7.1 发行说明 7.2 术语表 7.3 参考文献 以下是一个使用数字标题的 Spring Cloud Gateway 教程示例：
1. 介绍 1.1 目的 1.2 范围 1.3 受众 1.4 术语和定义 2. 概述 2.1 什么是 Spring Cloud Gateway 2.2 Spring Cloud Gateway 的优势 3. 快速入门 3.1 环境配置 3.2 创建Spring Cloud Gateway项目 3.3 配置路由规则 3.</description>
    </item>
    <item>
      <title>[译]Spring Boot异常处理完整指南</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-exception-handling/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-exception-handling/</guid>
      <description>处理异常是构建健壮应用程序的重要部分。 Spring Boot 提供了不止一种方法。
本文将探讨这些方法，并提供一些关于何时某种给定方法可能优于另一种方法的指导。
示例代码 本文附有 GitHub 上的工作代码示例。
介绍 Spring Boot 为我们提供了处理异常的工具，而不仅仅是简单的“try-catch”块。为了使用这些工具，我们应用了一些注释，使我们能够将异常处理视为横切关注点：
@ResponseStatus @ExceptionHandler @ControllerAdvice 在深入了解这些注释之前，我们将首先了解 Spring 如何处理 Web 控制器抛出的异常——这是捕获异常的最后一道防线。
我们还将查看 Spring Boot 提供的一些配置来修改默认行为。
我们将确定这样做时面临的挑战，然后我们将尝试使用这些注释来克服这些挑战。
Spring Boot 默认的异常处理机制 假设我们有一个名为 ProductController 的控制器，当未找到具有给定 id 的 Product 时，其 getProduct(...) 方法会抛出 NoSuchElementFoundException 运行时异常：
@RestController @RequestMapping(&amp;#34;/product&amp;#34;) public class ProductController { private final ProductService productService; //constructor omitted for brevity... @GetMapping(&amp;#34;/{id}&amp;#34;) public Response getProduct(@PathVariable String id){ // this method throws a &amp;#34;NoSuchElementFoundException&amp;#34; exception return productService.getProduct(id); } } 如果我们使用无效的 id 调用 /product API，服务将抛出 NoSuchElementFoundException 运行时异常，我们将得到以下响应：
{ &amp;#34;timestamp&amp;#34;: &amp;#34;2020-11-28T13:24:02.239+00:00&amp;#34;, &amp;#34;status&amp;#34;: 500, &amp;#34;error&amp;#34;: &amp;#34;Internal Server Error&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/product/1&amp;#34; } 我们可以看到，除了格式良好的错误响应之外，有效负载没有为我们提供任何有用的信息。甚至 message 字段也是空的，我们可能希望包含“未找到 id 1 的项目”之类的内容。
让我们从修复错误消息问题开始。
Spring Boot 提供了一些属性，我们可以使用它们添加异常消息、异常类，甚至堆栈跟踪作为响应负载的一部分：</description>
    </item>
    <item>
      <title>[译]Spring Boot授权服务器 - 使用 Java 的资源服务器和客户端凭证示例</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-authorization-server/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-authorization-server/</guid>
      <description>概述 在本文中，我们将创建一个授权服务器，为任何客户端生成 access_token。这称为 OAuth2 的 client_credentials 流程。它主要用于服务间通信。
我们将使用 spring boot oauth2 授权服务器依赖项来创建身份验证服务器。我们还将创建一个资源服务器和客户端来对其进行端到端测试。
Spring 授权服务器 我们首先创建授权服务器。
依赖项： 让我们将以下依赖项添加到我们的项目中。
implementation &amp;#39;org.springframework.security:spring-security-oauth2-authorization-server:1.0.0&amp;#39; implementation &amp;#39;org.springframework.boot:spring-boot-starter-security&amp;#39; implementation &amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39; testImplementation &amp;#39;org.springframework.boot:spring-boot-starter-test&amp;#39; testImplementation &amp;#39;org.springframework.security:spring-security-test&amp;#39; 我们正在使用 spring oauth2 依赖项的最新（当时）稳定版本。
Java 实现： 让我们创建一个名为 AuthorizationServerConfig 的配置类，并向该类添加 @Configuration 注解。现在让我们创建以下 bean 来完成配置：
SecurityFilterChain @Bean @Order(Ordered.HIGHEST_PRECEDENCE) public SecurityFilterChain authServerSecurityFilterChain(HttpSecurity http) throws Exception { OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http); return http.build(); } 我们将把 bean 的顺序设置为最高，因为我们想首先执行它。
RegisteredClientRepository @Bean public RegisteredClientRepository registeredClientRepository() { RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString()) .clientId(&amp;#34;oauth-client&amp;#34;) .clientSecret(&amp;#34;{noop}oauth-secret&amp;#34;) .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC) .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS) .scope(OidcScopes.OPENID) .scope(&amp;#34;articles.read&amp;#34;) .build(); return new InMemoryRegisteredClientRepository(registeredClient); } 现在让我们使用内存存储库对内容进行硬编码。我们可以根据我们的需要更新这些。
JwtDecoder @Bean public JwtDecoder jwtDecoder(JWKSource&amp;lt;SecurityContext&amp;gt; jwkSource) { return OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource); } 我们将使用它来解码令牌以进行验证。
JWKSource @Bean public JWKSource&amp;lt;SecurityContext&amp;gt; jwkSource() throws NoSuchAlgorithmException { RSAKey rsaKey = generateRsa(); JWKSet jwkSet = new JWKSet(rsaKey); return (jwkSelector, securityContext) -&amp;gt; jwkSelector.</description>
    </item>
    <item>
      <title>[译]使用 Spring Boot 和 Spring Security 配置 CORS</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-cors/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-cors/</guid>
      <description>跨源资源共享 (CORS) 是一种基于 HTTP 标头的机制，允许服务器显式将某些源列入白名单，并帮助绕过同源策略。
这是必需的，因为浏览器默认应用同源策略以确保安全。通过在 Web 应用程序中实施 CORS，网页可以请求额外的资源并从其他域加载到浏览器中。
本文将重点介绍在基于 Spring 的应用程序中实现 CORS 的各种方式。要详细了解 CORS 的工作原理，请参阅这篇优秀的介绍性文章。
示例代码 本文附有 GitHub 上的工作代码示例。
CORS 特定 HTTP 响应标头概述 CORS 规范定义了服务器返回的一组响应标头，这将是后续部分的重点。
响应头 描述 Access-Control-Allow-Origin 以逗号分隔的白名单来源列表或“*”。 Access-Control-Allow-Methods Web 服务器允许跨源请求的 HTTP 方法的逗号分隔列表。 Access-Control-Allow-Headers Web 服务器允许跨源请求的 HTTP 标头的逗号分隔列表。 Access-Control-Expose-Headers 客户端脚本认为可以安全显示的以逗号分隔的 HTTP 标头列表。 Access-Control-Allow-Credentials 如果浏览器通过传递凭据（以 cookie 或授权标头的形式）向服务器发出请求，则其值设置为 true 。 Access-Control-Max-Age 指示预检请求的结果可以缓存多长时间。 设置示例客户端应用程序 我们将使用一个简单的角度应用程序来调用 REST 端点，我们可以使用浏览器开发人员工具检查这些端点。您可以在 GitHub 上查看源代码。
ng serve --open 我们应该能够成功启动客户端应用程序。
设置示例服务器应用程序 我们将使用一个基于 Spring 的示例应用程序，其中包含客户端应用程序可以调用的 GET 和 POST 请求。请注意，您会发现两个独立的应用程序：一个使用 Spring MVC (REST)，另一个使用 Spring Reactive 堆栈。
为简单起见，两个应用程序之间的 CORS 配置相同，并且定义了相同的端点。两台服务器都从不同的端口 8091 和 8092 启动。
与应用程序捆绑在一起的 Maven Wrapper 将用于启动服务。您可以查看 Spring REST 源代码和 Spring Reactive 源代码。
mvnw clean verify spring-boot:run (for Windows) ./mvnw clean verify spring-boot:run (for Linux) 一旦 Spring 应用程序成功启动，客户端应用程序应该能够成功从服务器加载数据。</description>
    </item>
    <item>
      <title>[译]使用 Spring 的 Null-Safety 注解保护您的代码免受 NullPointerExceptions 的影响</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</guid>
      <description>NullPointerExceptions （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。
我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添加了适当的检查，以保证对象引用不能为空，或者毕竟在对象为空时采取可能的安全措施。
由于 NullPointerException 是一个运行时异常，因此在代码编译过程中很难找出这种情况。 Java 的类型系统没有办法快速消除危险的空对象引用。
幸运的是，Spring 框架提供了一些注释来解决这个问题。在本文中，我们将学习如何使用这些注释通过 Spring Boot 编写空安全代码。
示例代码 本文附有 GitHub 上的工作代码示例。
Spring 中的空安全注解 在 Spring 核心包 org.springframework.lang 下，有 4 个这样的注解：
@NonNull, @NonNull ， @NonNullFields, @NonNullFields ， @Nullable, @NonNullApi. Eclipse 和 IntelliJ IDEA 等流行的 IDE 可以理解这些注释。它们可以在编译期间警告开发人员潜在的问题。
我们将在本教程中使用 IntelliJ IDEA。让我们通过一些代码示例来了解更多信息。
要创建基础项目，我们可以使用 Spring Initializr。 Spring Boot 启动器就是我们所需要的，不需要添加任何额外的依赖项。
IDE 配置 请注意，并非所有开发工具都可以显示这些编译警告。如果您没有看到相关警告，请检查 IDE 中的编译器设置。
IntelliJ 对于 IntelliJ，我们可以在“Build, Execution, Deployment -&amp;gt; Compiler”下激活注释检查：
Eclipse 对于 Eclipse，我们可以在“Java -&amp;gt; Compiler -&amp;gt; Errors/Warnings”下找到设置：
示例代码 让我们使用一个简单的 Employee 类来理解注释：
package io.reflectoring.nullsafety; // imports class Employee { String id; String name; LocalDate joiningDate; String pastEmployment; // standard constructor, getters, setters } @NonNull 大多数情况下， id 字段（在 Employee 类中）将是一个不可为 null 的值。因此，为了避免任何潜在的 NullPointerException 我们可以将此字段标记为 @NonNull ：</description>
    </item>
    <item>
      <title>[译]使用Spring Boot Actuator公开有用的信息端点</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-info-endpoint/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-info-endpoint/</guid>
      <description>在分布式、快节奏的环境中，开发团队通常希望了解他们部署应用程序的时间、部署的应用程序版本、部署的 Git 提交等等。
Spring Boot Actuator 帮助我们监控和管理应用程序。它公开了提供应用程序运行状况、指标和其他相关信息的各种端点。
在本文中，我们将了解如何使用 Spring Boot Actuator 和 Maven/Gradle 构建插件将此类信息添加到我们的项目中。
示例代码 本文附有 GitHub 上的工作代码示例。
启用 Spring Boot 执行器 Spring Boot Actuator 是 Spring Boot 的一个子项目。在本节中，我们将快速了解如何引导示例项目并启用 /info 端点。如果您想了解更多有关 Spring Boot Actuator 的信息，已经有一个很棒的教程了。
让我们使用 Spring Initializr 快速创建一个 Spring Boot 项目。我们将需要以下依赖项：
依赖性 目的 Spring Boot Actuator 公开应用程序管理端点，例如 info 。 Spring Web 启用 Web 应用程序行为。 如果有帮助，这里是 Maven 和 Gradle 中预填充项目的链接。
项目构建后，我们将通过 HTTP 公开内置的 /info 端点。默认情况下， /info Web 端点处于禁用状态。我们可以通过在 application.properties 配置中添加 management.endpoints.web.exposure.include 属性来简单地启用它：
management.endpoints.web.exposure.include=health,info 让我们运行 Spring Boot 应用程序并在浏览器中打开 URL http://localhost:8080/actuator/info 。目前还看不到任何有用的东西，因为我们仍然需要进行一些配置更改。在下一节中，我们将了解如何在此响应中添加信息丰富的构建信息。
保护端点 如果您公开公开端点，请确保适当保护它们。我们不应在不知情的情况下泄露任何敏感信息。
Spring Boot 应用程序信息 Spring 从应用程序上下文中定义的各种 InfoContributor bean 收集有用的应用程序信息。下面是默认 InfoContributor beans 的摘要：
ID Bean Name 用法 build BuildInfoContributor 公开构建信息。 env EnvironmentInfoContributor 公开 Environment 中名称以 info.</description>
    </item>
    <item>
      <title>[译]在 Spring 中实现 OAuth2：使用范围（第 2 部分）</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring-scopes/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring-scopes/</guid>
      <description>我们在上一篇文章中了解了基本的 OAuth2 概念以及如何在 Spring 中实现和执行不同的授权。在这篇文章中，我们将介绍 OAuth2 的另一个重要概念：范围。
OAuth 范围 保护对应用程序的访问通常分两个步骤进行：身份验证和授权。要理解这两个概念，假设您在绝密政府大楼工作。在开始之前，你会得到一张卡片，可以让你进入建筑物。 OAuth 令牌可以看作是允许您访问的卡片。
一旦你进去，你决定去三楼见你的一位同事，在尝试使用你的卡打开三楼的门后，你听到一声嘟嘟声，告诉你你没有被授权。在 OAuth 中，范围是一种定义令牌可以访问哪些资源以及不能访问哪些资源的方法。范围允许访问控制，并且可以被视为相当于传统身份验证中的用户角色。
实现 为了演示范围，我们将使用第 1 部分中的示例。
在资源服务器的控制器中，我们有以下端点：
@RestController(&amp;#34;/&amp;#34;) public class ResourceController { @GetMapping(&amp;#34;/hello&amp;#34;) public String hello(){ return &amp;#34;hello&amp;#34;; } @GetMapping(&amp;#34;/foo&amp;#34;) public String foo(){ return &amp;#34;foo&amp;#34;; } @PostMapping(&amp;#34;/bar&amp;#34;) public String bar(){ return &amp;#34;bar&amp;#34;; } @DeleteMapping(&amp;#34;/test&amp;#34;) public String test(){ return &amp;#34;test&amp;#34;; } } 第一步是使用所需的范围配置授权服务器：
clients.inMemory().withClient(&amp;#34;my-trusted-client&amp;#34;) .authorizedGrantTypes(&amp;#34;password&amp;#34;, &amp;#34;refresh_token&amp;#34;, &amp;#34;implicit&amp;#34;, &amp;#34;client_credentials&amp;#34;, &amp;#34;authorization_code&amp;#34;) .authorities(&amp;#34;CLIENT&amp;#34;) .scopes(&amp;#34;read&amp;#34;, &amp;#34;write&amp;#34;, &amp;#34;trust&amp;#34;) .accessTokenValiditySeconds(60) .redirectUris(&amp;#34;http://localhost:8081/test.html&amp;#34;) .resourceIds(&amp;#34;resource&amp;#34;) .secret(&amp;#34;mysecret&amp;#34;); 要在资源服务器中启用范围检查，我们有两个选项：使用安全配置或使用方法安全性。
使用安全配置： @Override public void configure(HttpSecurity http) throws Exception { http .authorizeRequests() .antMatchers(HttpMethod.GET,&amp;#34;/hello&amp;#34;).access(&amp;#34;#oauth2.hasScope(&amp;#39;read&amp;#39;)&amp;#34;) .antMatchers(HttpMethod.GET,&amp;#34;/foo&amp;#34;).access(&amp;#34;#oauth2.hasScope(&amp;#39;read&amp;#39;)&amp;#34;) .antMatchers(HttpMethod.POST,&amp;#34;/bar&amp;#34;).access(&amp;#34;#oauth2.hasScope(&amp;#39;write&amp;#39;)&amp;#34;) .antMatchers(HttpMethod.DELETE,&amp;#34;/test&amp;#34;).access(&amp;#34;#oauth2.hasScope(&amp;#39;trust&amp;#39;)&amp;#34;) .anyRequest().authenticated(). and().csrf().disable(); } 使用方法安全性： @PreAuthorize(&amp;#34;#oauth2.hasScope(&amp;#39;read&amp;#39;)&amp;#34;) @GetMapping(&amp;#34;/hello&amp;#34;) public String hello(){ return &amp;#34;hello&amp;#34;; } @PreAuthorize(&amp;#34;#oauth2.hasScope(&amp;#39;read&amp;#39;)&amp;#34;) @GetMapping(&amp;#34;/foo&amp;#34;) public String foo(){ return &amp;#34;foo&amp;#34;; } @PreAuthorize(&amp;#34;#oauth2.</description>
    </item>
    <item>
      <title>[译]在 Spring 中实现 OAuth2：第 1 部分</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/</guid>
      <description>OAuth2 是一组规范，主要提供对 Rest API 的安全访问的方法。 OAuth 的主要目的是允许通过使用令牌来执行身份验证和授权，而不必为每个操作提供凭据。由于本文的重点是实现，并且为了不重新发明轮子，可以查看 OAuth RFC 或维基百科以获取更多理论背景。在这篇文章中，我们将深入探讨 Spring 中的 OAuth2 实现以及如何使用不同的授权类型，但在此之前值得提供一些重要概念的简要定义。
访问令牌和刷新令牌 身份验证成功后将提供访问令牌以及刷新令牌。访问令牌有一个有限的有效期（标准为 1 小时），之后需要刷新令牌才能获取新的访问令牌和新的刷新令牌。 Referesh 令牌通常会在使用后过期。
资源服务器和授权服务器 OAuth 引入了授权服务器的概念，授权服务器是发出访问和刷新令牌的实体，并在每个操作中进行咨询以查看令牌是否有效。资源服务器只是由不同客户端应用程序（前端应用程序、移动设备、其他后端服务&amp;hellip;&amp;hellip;）访问的实际 Rest API。资源服务器和授权服务器可以是不同的实体，也可以是同一实体。
授权类型 OAuth 中最常用的授权有：客户端凭据、密码、授权码和隐式授权。每项资助都有特定的流程和用例，但由于本文的重点不是理论，因此我们将重点关注其实施。有关授权及其用途的更多详细信息，请参阅 OAuth RFC。
实现 在实现方面，我们将使用 Spring Boot 来利用其自动配置和引导功能，并更多地关注我们的核心主题。
资源服务器： 我们有一个资源服务器，其中包含我们希望保护的以下端点：
@RestController(&amp;#34;/&amp;#34;) public class ResourceController { @GetMapping(&amp;#34;/hello&amp;#34;) public String hello(){ return &amp;#34;hello&amp;#34;; } @GetMapping(&amp;#34;/foo&amp;#34;) public String foo(){ return &amp;#34;foo&amp;#34;; } @GetMapping(&amp;#34;/bar&amp;#34;) public String bar(){ return &amp;#34;bar&amp;#34;; } @GetMapping(&amp;#34;/test&amp;#34;) public String test(){ return &amp;#34;test&amp;#34;; } } 为此，我们需要配置一个用 @EnableResourceServer 注释的 ResourceServerConfigurerAdapter bean：
@Configuration @EnableResourceServer public class ResourceSecurityConfiguration extends ResourceServerConfigurerAdapter { @Override public void configure(ResourceServerSecurityConfigurer resources) throws Exception { resources.resourceId(&amp;#34;resource&amp;#34;); } @Override public void configure(HttpSecurity http) throws Exception { http .</description>
    </item>
    <item>
      <title>[译]使用Spring Boot2和Spring Security 5以及JDBC令牌存储进行Oauth2集中授权</title>
      <link>https://blog.chensoul.cc/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</link>
      <pubDate>Fri, 14 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</guid>
      <description>在这篇文章中，我们将了解如何使用 Spring Boot 2 和 Spring Security 5 OAuth2 来实现集中授权的授权服务器以及如何通过 GUI 对其进行管理，还将提供资源服务器演示以及 github 下的整个项目。
很多示例涵盖了基于早期版本的 Spring boot 2 和 Spring Security 5 使用内存令牌实现 Oauth2，因此想法是使用 MySql 数据库作为令牌存储。
为了深入探讨这个主题，我们必须：
配置 Spring 安全。 配置数据库。 创建授权服务器。 创建资源服务器。 使用 curl 客户端使用访问令牌获取安全资源。 什么是 Oauth 2？ OAuth 2.0 是行业标准授权协议。 OAuth 2.0 取代了 2006 年创建的原始 OAuth 协议上所做的工作。OAuth 2.0 注重客户端开发人员的简单性，同时为 Web 应用程序、桌面应用程序、移动电话和客厅设备提供特定的授权流程。
该规范及其扩展正在 IETF OAuth 工作组内开发。
Oauth 2 角色 OAuth2 定义了 4 个角色：
资源所有者：通常是您自己。
资源服务器：托管受保护数据的服务器（例如 Google 托管您的个人资料和个人信息）。
客户端：请求访问资源服务器的应用程序（网站、Javascript 应用程序或移动应用程序&amp;hellip;&amp;hellip;）。
授权服务器：向客户端颁发访问令牌的服务器。该令牌将用于客户端请求资源服务器。该服务器可以与资源服务器相同（相同的物理服务器和相同的应用程序），而且经常是这种情况。
下图说明了角色流程：
授权类型 OAuth 2 为不同的用例提供了多种“授权类型”。定义的授权类型型有：
授权码：授权码授予是使用您的 Facebook 或 Google 帐户登录应用程序的功能。 密码：旨在用于基于用户代理的客户端。其次，授权服务器不会像授权代码授予那样返回授权代码来交换访问令牌，而是返回访问令牌。 客户端凭据：客户端可以仅使用其客户端凭据（或其他支持的身份验证方式）请求访问令牌，当客户端请求访问其下的受保护资源控制权，或先前已被其他资源所有者控制的与授权服务器安排。 隐式授权：隐式授权是一种简化的授权代码流，针对使用 JavaScript 等脚本语言在浏览器中实现的客户端进行了优化。在隐式流程中，而不是向客户端发出授权代码，直接向客户端颁发访问令牌。 示范 让我们动手吧
业务层 为简单起见，我们的主要业务应用程序将是使用一个实体的产品 API，我们的访问规则将是：
PRODUCT_CREATE PRODUCT_UPDATE PRODUCT_DISPLAY PRODUCT_ADMIN OAuth2 客户端设置 要设置 Oauth 2 客户端，我们需要创建下表 [有关更多详细信息，请参阅链接]</description>
    </item>
    <item>
      <title>周报-26｜上半年的绩效总结</title>
      <link>https://blog.chensoul.cc/posts/2023/07/11/weekly_review_26/</link>
      <pubDate>Tue, 11 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/11/weekly_review_26/</guid>
      <description>前言 本篇是对 2023-06-26 到 2023-07-09 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
读书、健身、投资、帮朋友、陪家人。
这两周主要是忙于工作，Wekatime 上统计的上周每天平均编程时间达到了 6 hrs 52 mins，基本上每天都是早七晚七的上班节奏。于是，学习的时间都被工作占用了。工作的内容主要是整合多个系统实现 sso 登录，用到的技术有 SpringCloud、Spring Security Oauth2 等等。
另外，本周完成了上半年的绩效总结，回顾了这半年的工作内容。
绩效总结 1、项目方面的成果：
a、完成了智能安防多个项目的迭代开发和上线，包括用户切换租户、报表发送到飞书、华为车牌识别、夜收模块拆分、巡检场景功能优化等。同时，也完成了通知模块重构、大屏报表支持多租户和门店、Dmallai 导航等需求的开发。这些工作的完成，为系统的稳定性和功能扩展提供了有力的支持。
b、共发布了 32 次版本，其中 7 次为功能迭代，25 次为 bug 修复。平均每月完成了 1 次项目迭代和 4 次 bug 修复，做到了及时响应和快速解决问题，提升了用户的使用体验和满意度，提高了系统的稳定性，降低系统的故障率和用户的投诉率，没有出现 P3 级别以上故障。
2、技术方面的成果：
利用空余时间学习新技术和框架，如 Pyhon、Rust、React，每周写周报和学习总结，总计输出 66 篇文章。
不断优化和迭代 Rose 框架，并将 Rose 合并到 Cocktail cloud，方便代码管理和维护。同时，Cocktail cloud 还增加了一些新的功能和特性，如国际化、日志打印、华为云接口封装等。
利用设计模式重构通知模块，提升代码质量，同时系统扩展性和并发也得到很大的提升。
3、个人发展方面的成果：
通过不断学习和实践，提高了自己的沟通能力和时间管理的能力。每天早上 7 点到公司学习，提高了个人工作效率和执行力。
4、团队合作方面的成果：
加强了和同事之间的沟通和协作，及时讨论项目需求和进度，保障项目按时上线。
读书 健身 我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2 个省份 2 个城市。更多跑步数据在我的 跑步 主页。
理财 这周总计支出 1483 元，明细如下：
7 月 2 日：1276 元，其中 1000 元加油
7 月 1 日：32 元
6 月 30 日：35 元
6 月 29 日：15 元
6 月 28 日：41 元</description>
    </item>
    <item>
      <title>Python学习7：输入和输出</title>
      <link>https://blog.chensoul.cc/posts/2023/07/08/python-input-and-output/</link>
      <pubDate>Sat, 08 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/08/python-input-and-output/</guid>
      <description>在 Python 中，可以使用 input() 函数从标准输入读取用户输入的数据，并使用 print() 函数将数据输出到标准输出。下面是一些常用的输入输出方法：
1、使用 input() 函数读取用户输入
input() 函数会从标准输入读取用户输入的数据，并返回一个字符串类型的值。例如：
name = input(&amp;#34;What&amp;#39;s your name? &amp;#34;) print(&amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34;) 在上面的例子中，使用 input() 函数读取用户输入的姓名，并使用 print() 函数输出问候语。
2、使用 print() 函数输出字符串
print() 函数可以将字符串输出到标准输出。可以使用加号（+）将多个字符串连接起来，并使用逗号（,）将多个参数输出到同一行。例如：
print(&amp;#34;Hello, World!&amp;#34;) print(&amp;#34;The answer is&amp;#34;, 42) 在上面的例子中，使用 print() 函数输出了两个字符串，第二个字符串包含了一个数字。
3、使用格式化字符串输出数据
可以使用格式化字符串将变量的值插入到字符串中。可以使用花括号（{}）表示变量的位置，并使用 format() 方法将变量的值插入到花括号中。例如：
name = &amp;#34;Alice&amp;#34; age = 25 print(&amp;#34;My name is {} and I&amp;#39;m {} years old.&amp;#34;.format(name, age)) 在上面的例子中，使用 format() 方法将变量 name 和 age 的值插入到字符串中。
4、使用 f-字符串输出数据
在 Python 3.6 及以后的版本中，可以使用 f-字符串来格式化字符串。f-字符串是一种特殊的字符串，以字母 f 或 F 开头，并以花括号表示变量的位置。在花括号中可以直接使用变量名，也可以使用表达式计算变量的值。例如：
name = &amp;#34;Bob&amp;#34; age = 32 print(f&amp;#34;My name is {name.upper()} and I&amp;#39;m {age * 2} years old.&amp;#34;) 在上面的例子中，使用 f-字符串将变量 name 的值转换为大写字母，并将变量 age 的值乘以 2。</description>
    </item>
    <item>
      <title>Java设计模式：Ambassador</title>
      <link>https://blog.chensoul.cc/posts/2023/07/06/java-design-patterns-ambassador/</link>
      <pubDate>Thu, 06 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/06/java-design-patterns-ambassador/</guid>
      <description>本文主要介绍 Ambassador 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。
对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。
此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。
中文网站：https://java-design-patterns.com/zh/
Github 上源码仓库（非官方）：https://github.com/iluwatar/java-design-patterns
目的 在客户端上提供帮助程序服务实例，并从共享资源上转移常用功能。
Ambassador 设计模式的主要目的是将客户端应用程序与远程服务器之间的通信细节隔离开来，从而使客户端应用程序可以专注于自己的业务逻辑，而不必关注网络通信细节和错误处理。
在传统的客户端应用程序中，通常需要处理大量的网络通信细节和错误处理，这会使代码变得复杂且难以维护。而使用 Ambassador 设计模式可以将这些细节和处理逻辑集中在一个单独的类中，从而使客户端应用程序的代码更加简洁、易于维护和扩展。
此外，使用 Ambassador 设计模式还可以提高客户端应用程序与远程服务器之间的通信安全性和可靠性。例如，Ambassador 类可以负责统一处理所有的网络通信，从而可以更轻松地实现安全性和可靠性控制。
解释 假设有一个旧版的远程服务，该服务提供了许多客户端访问的功能，但由于用户的大量请求，导致连接问题变得普遍。此外，新的请求频率规则需要同时实现延迟检测和客户端日志功能。为了解决这些问题，可以使用 Ambassador 设计模式。
微软文档 做了如下阐述
可以将大使服务视为与客户端位于同一位置的进程外代理。 此模式对于以语言不可知的方式减轻常见的客户端连接任务（例如监视，日志记录，路由，安全性（如 TLS）和弹性模式）的工作很有用。 它通常与旧版应用程序或其他难以修改的应用程序一起使用，以扩展其网络功能。 它还可以使专业团队实现这些功能。
在该模式中，可以创建一个 Ambassador 类来充当客户端应用程序和远程服务之间的代理。Ambassador 类负责处理所有的网络通信细节和错误处理，并实现新的请求频率规则，包括延迟检测和客户端日志功能。
具体来说，Ambassador 类可以实现以下功能：
延迟检测：在请求到达远程服务之前，Ambassador 类可以检测请求的时间戳，并计算出请求的延迟时间。如果请求的延迟时间超过了预设的阈值，Ambassador 类可以将请求拒绝。 客户端日志功能：Ambassador 类可以记录请求的时间戳、请求的内容和响应的内容，并将这些信息保存到客户端的日志文件中。这样可以帮助客户端应用程序进行调试和故障排除。 连接问题处理：Ambassador 类可以监控远程服务的连接状态，并在连接出现问题时进行自动重试。同时，Ambassador 类还可以实现一些优化策略，例如使用连接池等，以提高连接的可靠性和性能。 程序示例
有了上面的介绍我们将在这个例子中模仿功能。我们有一个用远程服务实现的接口，同时也是大使服务。
interface RemoteServiceInterface { long doRemoteFunction(int value) throws Exception; } 表示为单例的远程服务。
public class RemoteService implements RemoteServiceInterface { private static final Logger LOGGER = LoggerFactory.getLogger(RemoteService.class); private static RemoteService service = null; static synchronized RemoteService getRemoteService() { if (service == null) { service = new RemoteService(); } return service; } private RemoteService() {} @Override public long doRemoteFunction(int value) { long waitTime = (long) Math.</description>
    </item>
    <item>
      <title>Python学习6：模块和包</title>
      <link>https://blog.chensoul.cc/posts/2023/07/06/python-module-package/</link>
      <pubDate>Thu, 06 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/06/python-module-package/</guid>
      <description>在 Python 中，模块（module）是指一个包含 Python 代码的文件，而包（package）则是指一个包含多个模块的文件夹。模块和包可以用来组织和管理 Python 代码，使得代码更加易于维护和扩展。
以下是一些有关 Python 模块和包的基本知识：
1、导入模块
使用 import 语句可以导入一个模块（或包）中的代码。例如，要导入名为 &amp;ldquo;math&amp;rdquo; 的模块，可以使用以下语句：
import math 这会将 math 模块中的所有函数和变量导入到当前 Python 脚本中，您就可以在脚本中使用 math 模块中的函数和变量了。
2、导入特定函数或变量
有时候您只需要使用模块中的某个函数或变量，而不需要导入整个模块。在这种情况下，可以使用 from&amp;hellip;import 语句，例如：
from math import sqrt 这会将 math 模块中的 sqrt 函数导入到当前 Python 脚本中，您就可以直接使用 sqrt 函数了。
3、导入多个函数或变量
如果您需要导入多个函数或变量，可以使用逗号分隔它们，例如：
from math import sqrt, floor 这会将 math 模块中的 sqrt 函数和 floor 函数导入到当前 Python 脚本中，您就可以直接使用这两个函数了。
4、导入所有函数和变量
有时候，您可能需要导入模块中的所有函数和变量。在这种情况下，可以使用以下语句：
from math import * 这会将 math 模块中的所有函数和变量导入到当前 Python 脚本中。但是，这种导入方式可能会导致命名冲突和代码可读性降低，因此最好只在一些小型程序中使用。
5、创建包
要创建一个包，您需要创建一个包含 init.py 文件的文件夹，并在该文件夹中添加其他 Python 模块。init.py 文件可以是一个空文件，或者包含一些初始化代码。
例如，如果您想创建一个名为 &amp;ldquo;my_package&amp;rdquo; 的包，可以按照以下方式组织代码：
my_package/ __init__.py module1.py module2.py 这个包包含了 init.py 文件和两个模块（module1.py 和 module2.py）。您可以使用 import 语句来导入这个包中的模块，例如：
import my_package.module1 这会将 my_package 包中的 module1.py 文件导入到当前 Python 脚本中，您就可以使用其中定义的函数和变量了。
6、导入自定义模块</description>
    </item>
    <item>
      <title>周报-25｜端午安康</title>
      <link>https://blog.chensoul.cc/posts/2023/06/28/weekly_review_25/</link>
      <pubDate>Wed, 28 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/28/weekly_review_25/</guid>
      <description>前言 本篇是对 2023-06-19 到 2023-06-25 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
读书、健身、投资、帮朋友、陪家人。
这周因为端午节，只上三天班，放三天假。祝愿所有父母端午安康！
读书 本周阅读时长 15 分钟，主要是阅读《Java 高并发核心编程：多线程、锁、JVM、JUC、高并发设计模式》。
健身 我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2 个省份 2 个城市。更多跑步数据在我的 跑步 主页。
本周尚未跑步。最近上班没有带饭，每天中午吃饭都超标了，每天也没有测量体重，严重怀疑体重又涨了几斤。这个月也快结束了，下个月继续减肥。
理财 这周总计支出 1027 元，明细如下：
6 月 25 日：30 元
6 月 24 日：133 元
6 月 23 日：462 元
6 月 22 日：69 元
6 月 21 日：147 元
6 月 20 日：159 元
6 月 19 日：27 元
陪家人 农历 5 月 4 日，六舅走了。端午节的三天假期，主要是回去奔丧，送六舅最后一程。
算了下日子，老爸来阳逻快一个月了，老婆放下手上的工作回来照顾老爸也有两周时间了。看得出来，老婆有效疲惫了。老爸现在可以走，但是走的不够利索。希望老爸恢复得再快些，让老婆回去上班。如有可能，下周末把老爸送回老家，让老爸自己在家照顾自己。农村的空气好些，不会憋得慌。但还是担心天气太热，老爸照顾不好自己。在照顾老爸的事情，除了能够依靠老婆，其他谁都靠不上。但是，老婆也有工作要处理，我的工作又不能辞掉。这大抵算是八零后的压力吧，父亲在买房买车结婚上没有帮上忙，反而还会因为自己不好好照顾自己而给子女增加负担。总是跟老爸说这该做那不该做，老爸就像个孩子似的，一点都不听话。
周六，在黄石开牙医院的表哥的女儿考上墨尔本的研究生在老家办酒。也许是上了年纪的缘故，也许是老爸喜欢凑热闹，老爸想去喝酒。于是，成全了老爸的心愿。老爸年纪大了，尽可能的满足老爸的一些想法和心愿，尽可能的带老爸体验&amp;quot;新鲜&amp;quot;的事物，比如，看电影，旅游。于是，周四带老爸去看了电影《消失的她》。还有什么事情可以做呢？这样一想，老爸年纪越来越大了，腿脚越来越不利索，能够做的事情越来越少了。趁光阴还在，多陪陪父母，常回家看看。
工作 最近在学习的内容清单：
Effective Java（第 3 版） Java Design Patterns (中文) Real Python 本周完成五篇博客：
[译]微服务设计模式 Java 设计模式：Aggregator Microservices Python 学习 5：函数 [译]Python 模块和包-简介 [译]用 Bottle 开发 本周分享 大部分有意思的内容会分享在 『ChenSoul Share』Telegram 频道或者我的 Memos 中。我写了一个 Python 脚本从 Memos 读取最近一周带有 #memos 标签的记录，分享到这里。</description>
    </item>
    <item>
      <title>[译]微服务设计模式</title>
      <link>https://blog.chensoul.cc/posts/2023/06/26/microservice-design-patterns/</link>
      <pubDate>Mon, 26 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/26/microservice-design-patterns/</guid>
      <description>基于微服务的应用程序的主要特征在 微服务、单体和 NoOps 中定义。它们是功能分解或领域驱动设计、定义良好的接口、明确发布的接口、单一责任原则和潜在的多语言。每项服务都是完全自主和全栈的。
因此，更改服务实现不会影响其他服务，因为它们使用定义良好的接口进行通信。这种应用程序有几个优点，但它不是 免费的午餐，需要在 NoOps 方面付出大量努力。
但是假设您了解构建此类应用程序所需的工作或至少其中的一部分，并且愿意跳槽。你做什么工作？您构建此类应用程序的方法是什么？
是否有任何关于这些微服务如何相互协作的设计模式？
应用程序和团队的功能分解是构建成功的微服务架构的关键。
这允许您实现松耦合（REST 接口）和高内聚（多个服务可以相互组合以定义更高级别的服务或应用程序）。
应用程序的动词（例如 Checkout）或名词（Product）是实现现有应用程序分解的有效方法之一。
例如，产品、目录和结帐可以是三个独立的微服务，然后相互协作以提供完整的购物车体验。
功能分解提供了敏捷性、灵活性、可扩展性和其他能力，但业务目标仍然是创建应用程序。因此，一旦识别出不同的微服务，您如何组合它们以提供应用程序的功能？
本博客将讨论一些关于如何将微服务组合在一起的推荐模式。
聚合微服务设计模式 第一个，也可能是最常见的，是聚合器微服务设计模式。
在其最简单的形式中，聚合器将是一个简单的网页，它调用多个服务来实现应用程序所需的功能。由于每个服务（服务 A、服务 B 和服务 C）都使用轻量级 REST 机制公开，因此网页可以检索数据并相应地处理/显示数据。如果需要某种处理，比如将业务逻辑应用于从各个服务接收的数据，那么您可能有一个 CDI bean 可以转换数据，以便网页可以显示它。
聚合器的另一个选择是不需要显示，它只是一个更高级别的复合微服务，可以被其他服务使用。
在这种情况下，聚合器只需从每个单独的微服务收集数据，对其应用业务逻辑，然后将其进一步发布为 REST 端点。然后可以由需要它的其他服务使用。
这种设计模式遵循 DRY 原则。
如果有多个服务需要访问服务 A、B 和 C，那么建议将该逻辑抽象为一个复合微服务，并将该逻辑聚合到一个服务中。在此级别进行抽象的一个优点是各个服务，即服务 A、B 和 C，并且可以独立发展，业务需求仍然由组合微服务提供。
请注意，每个单独的微服务都有自己的（可选）缓存和数据库。如果聚合器是一个复合微服务，那么它也可能有自己的缓存和数据库层。
聚合器也可以在 X 轴和 Z 轴上独立缩放。因此，如果它是一个网页，那么您可以启动额外的 Web 服务器，或者如果它是一个使用 Java EE 的复合微服务，那么您可以启动额外的 WildFly 实例来满足不断增长的需求。
代理微服务设计模式 代理微服务设计模式是聚合器的一种变体。在这种情况下，客户端不需要进行聚合，但可以根据业务需要调用不同的微服务。
就像 Aggregator 一样，Proxy 也可以在 X 轴和 Z 轴上独立扩展。您可能喜欢这样做，因为每个单独的服务都不需要向消费者公开，而是应该通过一个界面。
代理可能是一个哑代理，在这种情况下，它只是将请求委托给其中一项服务。或者，它可能是一个智能代理，在将响应提供给客户端之前应用一些数据转换。一个很好的例子就是可以将不同设备的表示层封装在智能代理中。
链式微服务设计模式 链式微服务设计模式对请求产生单一的综合响应。在这种情况下，来自客户端的请求由服务 A 接收，然后服务 A 与服务 B 通信，而服务 B 又可能与服务 C 通信。
所有服务都可能使用同步 HTTP 请求/响应消息传递。
要记住的关键部分是客户端被阻塞，直到完成请求/响应链，即服务&amp;lt;-&amp;gt;服务 B 和服务 B&amp;lt;-&amp;gt;服务 C，完成。从服务 B 到服务 C 的请求可能看起来与从服务 A 到服务 B 的请求完全不同。
同样，服务 B 对服务 A 的响应可能看起来与服务 C 对服务 B 的响应完全不同。无论如何，这就是不同服务增加其业务价值的全部要点。</description>
    </item>
    <item>
      <title>Java设计模式：Aggregator Microservices</title>
      <link>https://blog.chensoul.cc/posts/2023/06/26/java-design-patterns-aggregator-microservices/</link>
      <pubDate>Mon, 26 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/26/java-design-patterns-aggregator-microservices/</guid>
      <description>本文主要介绍 Aggregator Microservices 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。
对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。
此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。
中文网站：https://java-design-patterns.com/zh/
Github 上源码仓库（非官方）：https://github.com/iluwatar/java-design-patterns
意图 用户对聚合器服务进行一次调用，然后聚合器将调用每个相关的微服务。
Aggregator Microservices 是一种微服务架构模式，用于解决大型分布式系统中的数据聚合问题。该模式通常用于有多个数据源的场景，例如电子商务网站中的产品列表页面，其中需要从多个服务中获取产品信息并组合在一起显示。
Aggregator Microservices 模式包括一个聚合器服务和多个后端服务。聚合器服务负责从多个后端服务中收集数据，并将数据组合成一个聚合的响应。后端服务则负责提供特定的数据源，例如产品信息、库存信息、价格信息等。
解释 真实世界例子
我们的网络市场需要有关产品及其当前库存的信息。 它调用聚合服务，聚合服务依次调用产品信息微服务和产品库存微服务，返回组合信息。
通俗地说
聚合器微服务从各种微服务中收集数据，并返回一个聚合数据以进行处理。
Stack Overflow 上说
聚合器微服务调用多个服务以实现应用程序所需的功能。
程序示例
让我们从数据模型开始。 这是我们的产品。
public class Product { private String title; private int productInventories; // getters and setters -&amp;gt; ... } 接下来，我们将介绍我们的聚合器微服务。 它包含用于调用相应微服务的客户端ProductInformationClient和 ProductInventoryClient。
@RestController public class Aggregator { @Resource private ProductInformationClient informationClient; @Resource private ProductInventoryClient inventoryClient; @RequestMapping(path = &amp;#34;/product&amp;#34;, method = RequestMethod.GET) public Product getProduct() { var product = new Product(); var productTitle = informationClient.</description>
    </item>
    <item>
      <title>[译]Python模块和包-简介</title>
      <link>https://blog.chensoul.cc/posts/2023/06/25/python-modules-packages/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/25/python-modules-packages/</guid>
      <description>本文探讨了 Python 模块和 Python 包，这两种机制有助于模块化编程。
模块化编程是指将大型、笨重的编程任务分解为单独的、更小的、更易于管理的子任务或模块的过程。然后可以像构建块一样将各个模块拼凑在一起以创建更大的应用程序。
在大型应用程序中模块化代码有几个优点：
简单性：模块通常不会专注于手头的整个问题，而是专注于问题的一个相对较小的部分。如果您正在处理单个模块，那么您将有一个较小的问题域来解决问题。这使得开发更容易并且更不容易出错。
可维护性：模块通常设计为在不同问题域之间强制执行逻辑边界。如果模块是以最小化相互依赖的方式编写的，那么对单个模块的修改对程序的其他部分产生影响的可能性就会降低。（您甚至可以在不了解该模块之外的应用程序的情况下对该模块进行更改。）这使得由许多程序员组成的团队在大型应用程序上协同工作变得更加可行。
可重用性：在单个模块中定义的功能可以很容易地被应用程序的其他部分重用（通过适当定义的接口）。这消除了重复代码的需要。
作用域：模块通常定义一个单独的名称空间，这有助于避免程序不同区域中标识符之间的冲突。 （Python 之禅的信条之一是命名空间是一个非常棒的想法——让我们做更多这样的事情吧！）
函数、模块和包都是 Python 中促进代码模块化的构造。
Python 模块：概述 在 Python 中实际上有三种不同的方式来定义模块：
模块可以用 Python 本身编写。
模块可以用 C 语言编写并在运行时动态加载，例如 re （正则表达式）模块。
内置模块本质上包含在解释器中，例如 itertools 模块。
在所有三种情况下，模块的内容都以相同的方式访问：使用 import 语句。
在这里，重点将主要放在用 Python 编写的模块上。用 Python 编写的模块的妙处在于它们的构建非常简单。
您需要做的就是创建一个包含合法 Python 代码的文件，然后为该文件指定一个带有 .py 扩展名的名称。就是这样！不需要特殊的语法或巫术。
例如，假设您创建了一个名为 mod.py 的文件，其中包含以下内容：
mod.py
s = &amp;#34;If Comrade Napoleon says it, it must be right.&amp;#34; a = [100, 200, 300] def foo(arg): print(f&amp;#39;arg = {arg}&amp;#39;) class Foo: pass mod.py 中定义了几个对象：
s （字符串） a （列表） foo() （函数） Foo （类） 假设 mod.py 位于适当的位置（您很快就会了解更多信息），可以通过导入模块来访问这些对象，如下所示：
&amp;gt;&amp;gt;&amp;gt; import mod &amp;gt;&amp;gt;&amp;gt; print(mod.s) If Comrade Napoleon says it, it must be right.</description>
    </item>
    <item>
      <title>[译]用 Bottle 开发</title>
      <link>https://blog.chensoul.cc/posts/2023/06/25/developing-with-bottle/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/25/developing-with-bottle/</guid>
      <description>我喜欢 bottle。它是一个简单、快速且功能强大的 Python 微框架，非常适合小型 Web 应用程序和快速原型设计。对于那些刚刚开始 Web 开发的人来说，它也是一个出色的学习工具。
让我们看一个简单的例子。
注意：本教程假设您正在运行基于 Unix 的环境 - 例如 Mac OS X、Linux 版本或通过虚拟机支持的 Linux 版本。
06/13/2015 更新：更新了代码示例和解释。
启动 首先，让我们创建一个工作目录：
$ mkdir bottle &amp;amp;&amp;amp; cd bottle 接下来，您需要安装 pip、virtualenv 和 git。
virtualenv 是一个 Python 工具，可以轻松管理特定项目所需的 Python 包；它可以防止一个项目中的包与其他项目中的包发生冲突。同时，pip 是一个包管理器，用于管理 Python 包的安装。
如需在 Unix 环境中安装 pip（及其依赖项）的帮助，请按照 此 Gist 中的说明进行操作。如果您使用的是 Windows 环境，请观看此视频以获取帮助。
安装 pip 后，运行以下命令来安装 virtualenv：
$ pip install virtualenv==12.0.7 现在我们可以轻松设置本地环境：
$ virtualenv venv $ source venv/bin/activate 安装 bottle：
$ pip install bottle==0.12.8 $ pip freeze &amp;gt; requirements.txt 最后，让我们使用 Git 将我们的应用程序置于版本控制之下。有关 Git 的更多信息，请 查看本文，其中还包括安装说明。
编写你的应用程序 我们准备好编写我们的瓶子应用程序了。打开 Sublime Text 3 或您选择的文本编辑器。创建您的应用程序文件 app.py，它将保存我们第一个应用程序的全部内容：
import os from bottle import route, run, template index_html = &amp;#39;&amp;#39;&amp;#39;My first web app!</description>
    </item>
    <item>
      <title>Python学习5：函数</title>
      <link>https://blog.chensoul.cc/posts/2023/06/25/python-function/</link>
      <pubDate>Sun, 25 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/25/python-function/</guid>
      <description>函数的定义 在 Python 中，函数是一段可重复使用的代码块，它接受一些输入（也称为参数）并产生一些输出。函数可以通过 def 关键字来定义，语法如下：
def function_name(parameters): &amp;#34;&amp;#34;&amp;#34;This is a function&amp;#34;&amp;#34;&amp;#34; # function body return value 其中，function_name 是函数的名称，parameters 是函数的参数列表，function body 是函数的主体部分，包括需要执行的代码和可能的返回语句，return value 是函数的返回值（如果有的话）。
下列代码创建一个可以输出限定数值内的斐波那契数列函数：
def fib(n): # write Fibonacci series up to n &amp;#34;&amp;#34;&amp;#34;Print a Fibonacci series up to n.&amp;#34;&amp;#34;&amp;#34; a, b = 0, 1 while a &amp;lt; n: print(a, end=&amp;#39; &amp;#39;) a, b = b, a+b print() fib(2000) # 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 159 定义 函数使用关键字 def，后跟函数名与括号内的形参列表。函数语句从下一行开始，并且必须缩进。
函数内的第一条语句是字符串时，该字符串就是文档字符串，也称为 docstring。利用文档字符串可以自动生成在线文档或打印版文档，还可以让开发者在浏览代码时直接查阅文档；Python 开发者最好养成在代码中加入文档字符串的好习惯。
函数在 执行 时使用函数局部变量符号表，所有函数变量赋值都存在局部符号表中；引用变量时，首先，在局部符号表里查找变量，然后，是外层函数局部符号表，再是全局符号表，最后是内置名称符号表。因此，尽管可以引用全局变量和外层函数的变量，但最好不要在函数内直接赋值（除非是 global 语句定义的全局变量，或 nonlocal 语句定义的外层函数变量）。
在调用函数时会将实际参数（实参）引入到被调用函数的局部符号表中；因此，实参是使用 按值调用 来传递的（其中的 值 始终是对象的 引用 而不是对象的值）。 1 当一个函数调用另外一个函数时，会为该调用创建一个新的局部符号表。</description>
    </item>
    <item>
      <title>[译]为恐龙解释现代CSS</title>
      <link>https://blog.chensoul.cc/posts/2023/06/21/modern-css-explained-for-dinosaurs/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/21/modern-css-explained-for-dinosaurs/</guid>
      <description>奇怪的是，CSS 被认为是作为 Web 开发人员最容易学习和最难学习的语言之一。开始使用它当然很容易 - 您可以定义样式属性和值以应用于特定元素，然后&amp;hellip;&amp;hellip;这几乎就是您开始所需的一切！但是，对于大型项目，以有意义的方式组织 CSS 会变得纠结和复杂。更改任何一行 CSS 以设置一个页面上元素的样式通常会导致其他页面上的元素发生意外更改。
为了处理 CSS 固有的复杂性，已经建立了各种不同的最佳实践。问题在于，对于哪些最佳实践实际上是最好的，没有任何强烈的共识，其中许多似乎完全相互矛盾。如果你是第一次尝试学习 CSS，至少可以说这可能会让人迷失方向。
本文的目的是提供一个历史背景，说明 CSS 方法和工具如何在 2018 年发展到今天的样子。通过了解这段历史，将更容易理解每种方法以及如何使用它们来为您带来好处。让我们开始吧！
更新：我制作了本文的新视频课程版本，该版本更深入地介绍了材料，请在此处查看： https://firstclass.actualize.co/p/modern-css-explained-for-dinosaurs
使用 CSS 进行基本样式设置 让我们从一个基本网站开始，仅使用一个简单的 index.html 文件链接到一个单独的 index.css 文件：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Modern CSS&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;index.css&amp;#34; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;header&amp;gt;This is the header.&amp;lt;/header&amp;gt; &amp;lt;main&amp;gt; &amp;lt;h1&amp;gt;This is the main content.&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;h4&amp;gt;This is the navigation section.&amp;lt;/h4&amp;gt; &amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;aside&amp;gt; &amp;lt;h4&amp;gt;This is an aside section.&amp;lt;/h4&amp;gt; &amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt; &amp;lt;/aside&amp;gt; &amp;lt;footer&amp;gt;This is the footer.&amp;lt;/footer&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 现在我们在 HTML 中没有使用任何类或 ID，只是 语义标签。没有任何 CSS，网站看起来像这样（使用占位符文本）：
功能齐全，但不是很漂亮。我们可以添加 CSS 来改进 index.css 中的基本排版：
/* BASIC TYPOGRAPHY */ /* from https://github.com/oxalorg/sakura */ html { font-size: 62.</description>
    </item>
    <item>
      <title>周报-24｜如果没有疼痛</title>
      <link>https://blog.chensoul.cc/posts/2023/06/21/weekly_review_24/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/21/weekly_review_24/</guid>
      <description>前言 本篇是对 2023-06-12 到 2023-06-18 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
读书、健身、投资、帮朋友、陪家人。
读书 本周尚未读书。
健身 我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2 个省份 2 个城市。更多跑步数据在我的 跑步 主页。
本周尚未跑步。
理财 这周总计支出 1264 元，明细如下：
6 月 18 日：338 元
6 月 17 日：508 元
6 月 16 日：262 元
6 月 15 日：27 元
6 月 14 日：41 元
6 月 13 日：40 元
6 月 12 日：48 元
陪家人 本周因为老爸出院后需要人照料，所以我每天早晚往返于家（阳逻）和公司（光谷）之间。每天早上五点多就醒了，然后煮粥、招呼老爸吃饭喝药，六点半出门开车走三环去上班。这周请婶娘白天帮忙照顾老爸，主要是中午和晚上老爸要吃饭和喝药。我早上出门晚、晚上下班回来再照顾老爸。老爸胃溃疡，需要修养一个多月，另外最近痛风发作，身体多处关节疼痛。因为吃西药和打针都会伤胃，所以只能吃中药。中药见效慢，需要时间。而婶娘身上也有病，不能长期照顾，如果老爸这周痛风不能恢复，那下周只能老婆放下手上工作回来照顾老爸。老婆工作也是非常忙碌，也不能照顾太久，估计也就一个星期。如果过了一个星期，老爸还是不能恢复、不能生活自理，真不知道该怎么办了！很久之前就想到老爸可能会成为我的负担，影响我的工作，没有想到会来的这么快。有时候想抱怨，但抱怨有什么用？面对眼前的这一切，只能迎难面对。造成眼前这样的现状，我自己有一部分责任。都只怪我平时没有关心老爸，没有叮嘱老爸不要喝酒，在老爸身边陪伴的时间太少了。
周六去给岳父岳母送端午节，周日回去看望癌症转移到全身的六舅。六舅是乳腺癌，在经历了去年新冠疫情之后，癌细胞转移到肺部。年后没有引起足够的重视，直到痛的不行的时候才去医院做手术，错过了最佳治疗时机。上一次见到六舅还是四月份的时候，我开车带老婆一起回去看望老爸。那时候六舅还在菜园里面朝黄土背朝天，六舅给了我一些莴笋、包菜，老婆给六舅 3 百块钱，六舅硬是不要，拉扯了半天。走之前，六舅还叫何舅塞了 20 多个鸡蛋给我们。这次，再见六舅，六舅躺在床上全身疼痛，只能吃些流食，意识模糊，知道谁来看望她，却不能说话。每次开车上下班的时候，想起六舅这样子，心里就很难受，眼泪直打转。面对生老病死，成年人的崩溃只在一瞬间。昨日还在你面前混蹦乱跳的人，明天可能就不在了。为了不留遗憾，要善待身边的每一位亲人，常回家看看。感谢老婆总是提醒我要回家看望老爸，正是因为这个，每次回家看望老爸的时候，我都会去看下六舅。
如果没有疼痛，老爸和六舅就不会痛苦了，身边的人也就不会心痛。
工作 最近在学习的内容清单：
Effective Java（第 3 版） Java Design Patterns (中文) Real Python 本周完成四篇博客：
[译]为恐龙解释现代 CSS
[译]为恐龙解释现代 HTML
[译]为恐龙解释现代 JavaScript
《Effective Java 3》笔记 15：尽量减少类和成员的可访问性
本周分享 大部分有意思的内容会分享在 『ChenSoul Share』Telegram 频道或者我的 Memos 中。我写了一个 Python 脚本从 Memos 读取最近一周带有 #memos 标签的记录，分享到这里。</description>
    </item>
    <item>
      <title>[译]为恐龙解释现代HTML</title>
      <link>https://blog.chensoul.cc/posts/2023/06/20/modern-html-explained-for-dinosaurs/</link>
      <pubDate>Tue, 20 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/20/modern-html-explained-for-dinosaurs/</guid>
      <description>在三种主要的前端技术（ HTML，CSS 和 JavaScript ）中，HTML 仍然是最一致的。如果您唯一关心的是创建内容，那么 1990 年代的 HTML 文档看起来与 2018 年创建的文档非常相似：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;My test page&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello there!&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 你有带有标签和内容的元素，带有属性的标签——除了第一行的简化文档类型外，没有太大变化！然而，多年来，Web 开发已经发生了巨大的转变，从创建静态网站（专注于内容）到创建动态 Web 应用程序（专注于交互）——这是 Web 最初设计的目的。创建仍然语义和可访问的自定义用户界面，使用属性和工具提高性能，组织代码以进行重用和可维护性 - 现在有一组全新的问题在起作用。
本文的目的是提供一个历史背景，说明 HTML 如何在 2018 年演变成今天的语言。我们将从结构良好且易于访问的 HTML 的基础知识开始，就像古代的恐龙一样。然后，我们将介绍不同的技术来提高性能、响应能力和可维护性。CSS 和 JavaScript 将不可避免地进入这个对话；出于本文的目的，将从它们如何影响 HTML 本身编写的角度来介绍它们。通过了解这段历史，您将能够充分利用该语言经常被忽视的新旧功能。让我们开始吧！
使用语义元素编写内容 让我们向前面的 HTML 示例添加更多内容。现在，我们将创建一个基本网站，其中包含一个带有链接和搜索输入的导航部分，一个用于显示一般网站信息的大型展示部分（通常称为英雄部分或 巨型屏幕 ），文章的三列部分和一个版权信息的页脚部分。
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;My test page&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;navbar&amp;#34;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;Info&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;About&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;form&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;Search&amp;#34; /&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34;&amp;gt;Search&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;main&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;hero&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;Hello there!&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;General info about the page goes here&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;Learn more&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;grid&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;column&amp;#34;&amp;gt; &amp;lt;h2&amp;gt;First Heading&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;Article content goes here&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;View details&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;column&amp;#34;&amp;gt; &amp;lt;h2&amp;gt;Second Heading&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;Article content goes here&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;View details&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;column&amp;#34;&amp;gt; &amp;lt;h2&amp;gt;Third Heading&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;Article content goes here&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;View details&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;footer&amp;#34;&amp;gt; &amp;lt;p&amp;gt;Copyright info goes here&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 在这里，我们使用带有 &amp;lt;div&amp;gt; 、 &amp;lt;h1&amp;gt; 、 &amp;lt;h2&amp;gt; 、 &amp;lt;p&amp;gt; 等标签的基本元素来标记内容。这里的 HTML 是有效的，但它不是完全语义的——也就是说，标签不能尽可能地传达内容的含义。</description>
    </item>
    <item>
      <title>[译]为恐龙解释现代JavaScript</title>
      <link>https://blog.chensoul.cc/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/</guid>
      <description>图片来自Ryan North的Dinosaur Comics。 如果你从一开始就没有去过那里，那么学习现代 JavaScript 是很困难的。生态系统的发展和变化如此之快，以至于很难理解不同工具试图解决的问题。我从 1998 年开始编程，但直到 2014 年才开始认真学习 JavaScript。当时我记得遇到 Browserify 并盯着它的标语：
Browserify 通过捆绑所有依赖项，让你在浏览器中导入（&amp;lsquo;模块&amp;rsquo;）。
我几乎听不懂这句话中的任何单词，并且努力理解这对我作为开发人员有什么帮助。
本文的目的是提供一个历史背景，说明 JavaScript 工具如何在 2017 年发展到今天的样子。我们将从头开始，像恐龙一样构建一个示例网站 - 没有工具，只有普通的 HTML 和 JavaScript。然后，我们将逐步介绍不同的工具，以查看它们一次解决一个问题。有了这个历史背景，你将能够更好地学习和适应未来不断变化的 JavaScript 环境。让我们开始吧！
更新：我制作了本文的视频课程版本，为了更清晰，我逐步浏览了每个部分，请在此处查看： https://firstclass.actualize.co/p/modern-javascript-explained-for-dinosaurs
以&amp;quot;老派&amp;quot;的方式使用 JavaScript &amp;lt;!-- index.html --&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;JavaScript Example&amp;lt;/title&amp;gt; ** &amp;lt;script src=&amp;#34;index.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; ** &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello from HTML!&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 第 &amp;lt;script src=&amp;quot;index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 行引用同一目录中名为 index.js 的单独 JavaScript 文件：
// index.js console.log(&amp;#34;Hello from JavaScript!&amp;#34;); 这就是制作网站所需的全部内容！现在，假设您想添加一个其他人编写的库，例如 moment.js（一个可以帮助以人类可读的方式格式化日期的库）。例如，您可以在 JavaScript 中使用 moment 函数，如下所示：
moment().startOf(&amp;#34;day&amp;#34;).fromNow(); // 20 hours ago 但这只是假设您在网站上包含 moment.js！在 moment.js 主页 上您会看到以下说明：
嗯，右侧的&amp;quot;安装&amp;quot;部分有很多内容。但是现在让我们忽略它 - 我们可以通过在同一目录中下载 moment.min.js 文件并将其包含在我们的 index.html 文件中来为我们的网站添加 moment.js。
&amp;lt;!-- index.html --&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Example&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;index.</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记15：尽量减少类和成员的可访问性</title>
      <link>https://blog.chensoul.cc/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/</guid>
      <description>本文是 《Effective Java 3》第四章《类和接口》的学习笔记：尽量减少类和成员的可访问性。
类和接口是 Java 编程语言的核心。它们是抽象的基本单位。该语言提供了许多强大的元素，你可以使用它们来设计类和接口。
介绍 《Effective Java, Third Edition》这本书中的第四章主要讲述了如何尽量减少类和成员的可访问性，以提高代码的封装性、安全性和可维护性。
尽量减少类和成员的可访问性是面向对象编程中的一个基本原则，也被称为 &amp;ldquo;最小化可访问性原则&amp;rdquo;。这个原则的核心思想是，将类和成员的访问级别限制在最小范围内，从而提高代码的安全性、可维护性和可复用性。
在 Java 中，类和成员的访问级别有四种：public、protected、default 和 private。其中，public 级别是最高的，可以被任何类访问；private 级别是最低的，只能被同一个类内部的成员访问。在应用最小化可访问性原则时，应该尽可能地将类和成员的访问级别设置为最低的级别，即 private 或 default 级别。
尽量减少类和成员的可访问性是一种良好的编程实践，可以提高代码的安全性和可维护性。以下是一些建议：
将类和成员的可见性设置为最小化的级别，即只有必要的代码可以访问它们。这将减少不必要的依赖关系，并使代码更加模块化和可重用。
使用访问修饰符以限制类和成员的可见性。例如，如果一个成员只能在类内部使用，可以考虑将其转换为私有静态嵌套类。如果一个成员需要在类的子类中使用，可以使用 protected 修饰符。
下面是一个示例，演示如何将包级私有顶级类转换为私有静态嵌套类：
// 包级私有顶级类 class MyTopLevelClass { // ... } public class MyClass { private static class MyPrivateNestedClass { // 使用 MyTopLevelClass 的代码 } // 使用 MyPrivateNestedClass 的代码 } 在上面的示例中，MyTopLevelClass 被转换为了 MyPrivateNestedClass，它被声明为 MyClass 的私有静态嵌套类。这样，MyTopLevelClass 就只能被 MyPrivateNestedClass 使用，而 MyPrivateNestedClass 只能被 MyClass 使用，达到了安全和清晰的目标。
避免使用公共成员或公共方法。公共成员和方法可以被任何代码访问，这可能会导致安全问题和不必要的代码耦合。相反，应该使用封装的方式来隐藏类的实现细节，并在需要时提供公共接口。
在需要使用公共接口时，使用接口或抽象类来定义公共契约。这样可以使代码更加灵活，并使实现细节能够独立于公共契约进行修改。
使用 final 关键字来限制类和成员的可变性。这可以提高代码的安全性和可维护性，并避免在不必要的情况下修改代码。
扩展 设计公共接口需要考虑接口的简洁性、易用性和一致性，同时避免暴露过多的底层实现细节。下面是一个简单的示例，展示了如何设计一个公共接口。
/** * This interface provides a simple way to perform arithmetic operations. * @author chensoul * @since 1.0.0 */ public interface Arithmetic { /** * Adds two integers and returns the result.</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记16：在公共类中，使用访问器方法，而不是公共字段</title>
      <link>https://blog.chensoul.cc/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/15/minimize-the-accessibility-of-classes-and-members/</guid>
      <description>本文是 《Effective Java 3》第四章《类和接口》的学习笔记：在公共类中，使用访问器方法，而不是公共字段。
介绍 与其直接将类的内部字段公开为公共字段，推荐使用访问器方法（也称为 getter 和 setter）来访问和修改对象的状态。这样可以使类对其内部表示保持控制，并为类的客户端提供一种抽象程度。
通过使用访问器方法，您可以实现以下目标：
封装内部表示（Encapsulate Internal Representation）： Getter 方法：Getter 方法用于获取私有字段的值。通过使用 getter 方法，可以将字段的访问限制在类的内部，从而隐藏了字段的具体实现细节。客户端只能通过调用 getter 方法来获取字段的值，而无法直接访问字段本身。 Setter 方法：Setter 方法用于设置私有字段的值。使用 setter 方法，可以对字段进行验证、约束和逻辑处理。这样，类可以对字段的修改进行控制，并确保只有经过验证的值才能被设置。 控制访问和修改（Control Access and Modification）： Getter 方法：通过 getter 方法，可以对字段的访问进行控制。例如，可以在 getter 方法中添加权限检查，只允许特定的用户或角色获取字段的值。还可以在 getter 方法中进行计算或转换，以便返回不同于字段本身的值。 Setter 方法：Setter 方法允许对字段的修改进行控制。在 setter 方法中，可以进行输入验证、范围检查和其他逻辑处理。这样可以确保只有符合规定的值才能被设置到字段中，从而保持类的状态的一致性和完整性。 促进演化和兼容性：如果使用公共字段，并且以后需要更改表示方式或添加附加逻辑，则很难保持向后兼容性。然而，通过使用访问器方法，可以修改内部表示或添加新行为，而不会影响类的客户端。 反例 Java 库中的几个类违反了公共类不应该直接公开字段的建议。突出的例子包括 java.awt 包中的 Point 和 Dimension。
在 Java 的早期版本中，一些类设计并没有遵循现代的面向对象设计原则和最佳实践。这些类中的字段被直接声明为公共（public），而没有提供相应的访问器方法。
例如，java.awt 包中的 Point 类和 Dimension 类提供了公共的 x、y 和 width、height 字段来表示点的坐标和矩形的宽度和高度。这意味着客户端代码可以直接访问和修改这些字段，绕过了封装和控制的机制。
这种设计方式存在一些问题：
缺乏封装：直接公开字段破坏了封装的原则，使得类的内部表示暴露给外部，导致了不可预测的行为和潜在的错误。 限制扩展性：如果需要在这些类中添加验证逻辑、计算属性或实现其他行为，会面临困难，因为不能在字段被直接访问的情况下进行控制和修改。 除了 java.awt 包中的 Point 和 Dimension 类之外，还有其他一些 Java 库中的类违反了&amp;quot;公共类不应该直接公开字段&amp;quot;的建议。以下是一些例子：
java.util 包中的 Date 类：在早期版本的 Java 中，Date 类的字段（如年、月、日、小时等）是公共的，可以直接访问和修改。这种设计导致了 Date 类的可变性和线程安全性问题。随后，Java 引入了新的日期和时间 API（java.time 包），其中封装了更好的设计原则，遵循了使用访问器方法的建议。 java.util 包中的 Vector 类：Vector 类是一个动态数组，它在早期版本中使用了公共字段来表示元素数量（elementCount）和容量（capacity）。这种设计违反了封装性和控制访问的原则。随着 Java 集合框架的发展，推荐使用 ArrayList 等更现代的集合类，它们使用私有字段并提供了相应的访问器方法。 扩展 如何确保字段的可见性限定为包级私有？ 在一些特定的情况下，对于包级私有或私有嵌套类，有时候需要公开字段，无论这个类是可变的还是不可变的。以下是这种情况的一些例子：</description>
    </item>
    <item>
      <title>Python学习4：流程控制</title>
      <link>https://blog.chensoul.cc/posts/2023/06/14/python-flow-control/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/14/python-flow-control/</guid>
      <description>在 Python 中，流程控制语句包括条件语句（if-elif-else）、循环语句（for 和 while）、跳转语句（break、continue 和 return）和异常处理语句。
条件语句 条件语句用于在不同的条件下执行不同的代码块。Python 中的条件语句是 if-elif-else 结构。
# 条件语句示例 x = 10 if x &amp;lt; 0: print(&amp;#34;x is negative&amp;#34;) elif x == 0: print(&amp;#34;x is zero&amp;#34;) else: print(&amp;#34;x is positive&amp;#34;) 循环语句 循环语句用于重复执行一段代码，直到满足某个条件或达到某个条件次数为止。Python 中的循环语句包括 for 和 while 两种结构。
# for 循环示例 my_list = [1, 2, 3, 4, 5] for item in my_list: print(item) # while 循环示例 x = 10 while x &amp;gt; 0: print(x) x -= 1 遍历集合时修改集合的内容，会很容易生成错误的结果。因此不能直接进行循环，而是应遍历该集合的副本或创建新的集合：
# Create a sample collection users = {&amp;#39;Hans&amp;#39;: &amp;#39;active&amp;#39;, &amp;#39;Éléonore&amp;#39;: &amp;#39;inactive&amp;#39;, &amp;#39;景太郎&amp;#39;: &amp;#39;active&amp;#39;} # Strategy: Iterate over a copy for user, status in users.copy().items(): if status == &amp;#39;inactive&amp;#39;: del users[user] # Strategy: Create a new collection active_users = {} for user, status in users.</description>
    </item>
    <item>
      <title>周报-23｜读书、健身、定投、帮朋友、陪家人</title>
      <link>https://blog.chensoul.cc/posts/2023/06/14/weekly_review_23/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/14/weekly_review_23/</guid>
      <description>前言 本篇是对 2023-06-05 到 2023-06-11 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
读书、健身、投资、帮朋友、陪家人。
以后周报的主题，会包括这几个部分：读书、健身、投资、帮朋友、陪家人，再加上工作和本周分享两块内容。
读书 本周阅读统计，总计阅读 31 分钟：
本周阅读摘抄：
人是周围 6 个人的平均值，如果你身边没有特别出色的年轻人与你为伍，你就找先贤们的书籍，他们把一生的所有思考、智慧、经历和情感，都倾注在那些书里头了。 如果有一天跟你共鸣的，全都是古往今来、古今中外那些最智慧、最深刻、最敏锐、最丰富、最博学的大脑，你大概率不会太差，你的精神世界也大概率会非常丰富。 “we are all in the gutter ，but some of us are looking at stars。” 这句话来自一个爱尔兰的诗人，叫做奥斯卡·王尔德：“我们都身处在阴沟里，但总有人仰望星空。” “ Three passions, simple but overwhelmingly strong, have governed my life: the longing for love, the search for knowledge, and unbearable pity for the suffering of mankind. ” 这是来自于罗素的一个演讲，叫做《我为什么而活着》，意思是：对知识的渴望，对爱情的追求，对人类苦难难以遏制的同情心，这三种简单而强烈的激情，苦苦支配我的一生 健身 我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2 个省份 2 个城市。更多跑步数据在我的 跑步 主页。
这周因为父亲住院需要照顾他，所以跑步暂停。
理财 这周总计支出 5006 元，明细如下：
6 月 11 日：4057 元，父亲出院支付 3475 元
6 月 10 日：108 元
6 月 9 日：86 元
6 月 8 日：367 元
6 月 7 日：179 元</description>
    </item>
    <item>
      <title>Python学习3：运算符和表达式</title>
      <link>https://blog.chensoul.cc/posts/2023/06/11/python-operator-and-expression/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/11/python-operator-and-expression/</guid>
      <description>在 Python 中，运算符是用于执行各种操作的符号或关键字；表达式是由操作符、变量、常量和函数调用等组成的，它们可以被计算求值并返回一个结果。
以下是一些常用的运算符和表达式：
算术运算符 Python 中的算术运算符用于执行基本的算术运算，包括加、减、乘、除、取模和幂运算。以下是一些常用的算术运算符：
+：加法运算 -：减法运算 *：乘法运算 /：除法运算 %：取模运算，返回两个数相除的余数 **：幂运算，返回一个数的指定次幂 例如：
x + y # 加法 x - y # 减法 x * y # 乘法 x / y # 除法 x % y # 取模 在这个例子中，我们使用算术运算符执行基本的算术运算，例如将变量x和y相加、相减、相乘、相除和取模。
比较运算符 Python 中的比较运算符用于比较两个值的大小关系，返回一个布尔值。以下是一些常用的比较运算符：
==：等于运算符，如果两个值相等，则返回True，否则返回False !=：不等于运算符，如果两个值不相等，则返回True，否则返回False &amp;gt;：大于运算符，如果左边的值大于右边的值，则返回True，否则返回False &amp;lt;：小于运算符，如果左边的值小于右边的值，则返回True，否则返回False &amp;gt;=：大于等于运算符，如果左边的值大于等于右边的值，则返回True，否则返回False &amp;lt;=：小于等于运算符，如果左边的值小于等于右边的值，则返回True，否则返回False 例如：
x == y # 等于 x != y # 不等于 x &amp;gt; y # 大于 x &amp;lt; y # 小于 x &amp;gt;= y # 大于等于 x &amp;lt;= y # 小于等于 在这个例子中，我们使用比较运算符比较变量x和y的大小关系，例如判断x是否等于y、是否大于y等。
逻辑运算符 Python 中的逻辑运算符用于执行逻辑操作，包括与、或和非运算。以下是一些常用的逻辑运算符：
and：逻辑与运算符，如果两个操作数都为True，则返回True，否则返回False or：逻辑或运算符，如果两个操作数中至少有一个为True，则返回True，否则返回False not：逻辑非运算符，如果操作数为True，则返回False，否则返回True 例如：
x and y # 与 x or y # 或 not x # 非 在这个例子中，我们使用逻辑运算符执行逻辑运算，例如判断变量x和y是否都为True、判断变量x和y是否至少一个为True等。</description>
    </item>
    <item>
      <title>Java设计模式：Adapter</title>
      <link>https://blog.chensoul.cc/posts/2023/06/10/java-design-patterns-adapter/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/10/java-design-patterns-adapter/</guid>
      <description>本文主要介绍 Adapter 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。
对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。
此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。
中文网站：https://java-design-patterns.com/zh/
Github 上源码仓库（非官方）：https://github.com/iluwatar/java-design-patterns
目的 将一个接口转换成另一个客户所期望的接口。适配器让那些本来因为接口不兼容的类可以合作无间。
适配器模式(Adapter Pattern)是一种结构型设计模式，它允许将一个类的接口转换成客户端所期望的另一种接口。适配器模式通常用于连接两个不兼容的接口或类，以便它们可以协同工作。
解释 现实世界例子
考虑有这么一种情况，在你的存储卡中有一些照片，你想将其传到你的电脑中。为了传送数据，你需要某种能够兼容你电脑接口的适配器以便你的储存卡能连上你的电脑。在这种情况下，读卡器就是一个适配器。 另一个例子就是注明的电源适配器；三脚插头不能插在两脚插座上，需要一个电源适配器来使其能够插在两脚插座上。 还有一个例子就是翻译官，他翻译一个人对另一个人说的话。
用直白的话来说
适配器模式让你可以把不兼容的对象包在适配器中，以让其兼容其他类。
维基百科中说
在软件工程中，适配器模式是一种可以让现有类的接口把其作为其他接口来使用的设计模式。它经常用来使现有的类和其他类能够工作并且不用修改其他类的源代码。
适配器模式由三个主要角色组成：
目标接口(Target Interface)：客户端所期望的接口。适配器模式会创建一个实现目标接口的新类，以便客户端可以通过该接口调用它。
适配器(Adapter)：该类实现了目标接口，并将客户端的请求转换为对适配者的调用。适配器通常会聚合一个适配者对象，以便将请求委托给它。
适配者(Adapteree)：适配器模式的实际工作内容。适配者是客户端所期望的接口之外的类，它实现了客户端需要的功能，但其接口与客户端所期望的接口不兼容。
编程样例(对象适配器)
假如有一个船长他只会划船，但不会航行。
首先我们有接口RowingBoat和FishingBoat
public interface RowingBoat { void row(); } @Slf4j public class FishingBoat { public void sail() { LOGGER.info(&amp;#34;The fishing boat is sailing&amp;#34;); } } 船长希望有一个RowingBoat接口的实现，这样就可以移动
public class Captain { private final RowingBoat rowingBoat; // default constructor and setter for rowingBoat public Captain(RowingBoat rowingBoat) { this.rowingBoat = rowingBoat; } public void row() { rowingBoat.</description>
    </item>
    <item>
      <title>Python学习2：数据类型</title>
      <link>https://blog.chensoul.cc/posts/2023/06/10/python-data-type/</link>
      <pubDate>Sat, 10 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/10/python-data-type/</guid>
      <description>Python 中的数据类型包括：
数字类型：包括整型、浮点型、复数型和布尔类型：只有两个取值，True 和 False，用于表示逻辑值。 字符串类型：由一系列字符组成，可以是单引号、双引号或三引号括起来的文本。 列表类型：由一系列有序的元素组成，可以包含任何类型的数据。 元组类型：与列表类似，但是元素不能被修改。 集合类型：由一组唯一的元素组成，支持集合的基本操作，如并集、交集和差集等。 字典类型：由一组键值对组成，其中键是唯一的，用于查找和存储值。 None 类型：表示空值或缺失值。 数字 在 Python 中，数字类型包括整数（int）、浮点数（float）、复数（complex）和布尔值（bool）。
整数（int）是不带小数的数字，可以使用十进制、二进制、八进制或十六进制表示。在 Python 3 中，整数的长度不再受限于机器的位数，可以表示任意大的整数。 例如：
a = 123 # 十进制整数 b = 0b1010 # 二进制整数，等于十进制的 10 c = 0o12 # 八进制整数，等于十进制的 10 d = 0x0A # 十六进制整数，等于十进制的 10 浮点数（float）是带小数的数字，可以使用科学计数法表示。在 Python 中，浮点数采用 IEEE 754 标准表示，具有双精度（64 位）和单精度（32 位）两种形式。例如：
a = 3.14e-2 # 科学计数法表示的浮点数，等于 0.0314 b = 1.23 # 普通的浮点数 复数（complex）是具有实部和虚部的数字，可以使用 a+bj 或 complex(a, b) 的形式表示，其中 j 表示虚数单位。例如：
a = 1+2j # 复数 b = complex(3, 4) # 复数，等于 3+4j 布尔值（bool）只有两个取值，True 和 False，用于表示真和假。在 Python 中，布尔值可以和数值进行运算，True 转换为 1，False 转换为 0。例如：
a = True b = False c = 1 + True # c 的值为 2 d = 3 * False # d 的值为 0 数字的操作和运算：</description>
    </item>
    <item>
      <title>周报-22｜微信读书笔记助手</title>
      <link>https://blog.chensoul.cc/posts/2023/06/09/weekly_review_22/</link>
      <pubDate>Fri, 09 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/09/weekly_review_22/</guid>
      <description>前言 本篇是对 2023-05-29 到 2023-06-04 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
读书、健身、定投、帮朋友、陪家人，本周周报增加一块内容：读书，记录每周读书的时间。
微信读书笔记助手 最近注销了微信阅读账号，清空了历史数据。本着宁缺毋滥的原则，书架重新添加了几本书。计划是重新使用微信阅读养成读书的习惯。
在 chrome 浏览器添加了一个插件 微信读书笔记助手 ，可以将读书笔记一键导出为 markdown 格式。
导出的内容标注是一个标注一个段落，段落之间有一个换行。段落后面可以添加自己的思考（比如，用红色标注颜色）。
读书 本周阅读统计（图片来自微信阅读 app 分享）：
理财 这周总计支出 2528 元，明细如下：
6 月 4 日：138 元 6 月 3 日：1650 元，医院看病 1600 6 月 2 日：61 元 6 月 1 日：0 元 5 月 31 日：108 元 5 月 30 日：625 元，公司停车场费用 600 5 月 29 日：41 元 健身 我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2 个省份 2 个城市。更多跑步数据在我的 跑步 主页。
本周跑步 42.66 公里，最长跑步距离为 9.2 公里。
明细数据如下：
在朋友圈发了一个 5 月跑步 500 公里动态，一个高中同学建议我不要过度跑步，最好是跑步一天休息一天，以免伤了膝盖。受他影响，受他影响，6 月 1 日没有跑步，6 月 3 日和 4 日，带老爸去医院做检查，所以没有跑步。照此看来，6 月连续跑步 30 天、累计 200 公里的目标铁定是完成不了，所以及时调整目标和计划，还是以长期主义的思路保持跑步的习惯，不求数量。
工作 最近在学习的内容清单：
Effective Java（第 3 版） Java Design Patterns (中文) Real Python 本周完成四篇博客：</description>
    </item>
    <item>
      <title>Java设计模式：Visitor</title>
      <link>https://blog.chensoul.cc/posts/2023/06/02/java-design-patterns-visitor/</link>
      <pubDate>Fri, 02 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/02/java-design-patterns-visitor/</guid>
      <description>本文主要介绍 Visitor 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。
对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。
此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。
中文网站：https://java-design-patterns.com/zh/
Github 上源码仓库（非官方）：https://github.com/iluwatar/java-design-patterns
目的 表示要在对象结构的元素上执行的操作。访问者可让你定义新操作，而无需更改其所操作元素的类。
访问者模式的主要目的是在不改变对象结构的前提下，对对象结构中的元素进行新的操作。它通过将操作从对象结构中分离出来，使得可以独立地添加、修改或删除对元素的操作，而不需要修改元素类或对象结构。
访问者模式的另一个目的是将对象结构与操作解耦。在访问者模式中，元素和操作分别由不同的类来实现，并且元素只暴露出接受访问者对象的接口，而不是暴露出具体的实现细节。这样可以避免在元素类中添加过多的行为，从而提高代码的可扩展性和可维护性。
最后，访问者模式还可以用于实现对复杂对象结构的遍历。通过访问者对象的递归调用，可以遍历整个对象结构，并对每个元素执行相应的操作。这种遍历方式可以方便地实现对复杂对象结构的分析和处理。
解释 真实世界例子
考虑有一个带有军队单位的树形结构。指挥官下有两名中士，每名中士下有三名士兵。基于这个层级结构实现访问者模式，我们可以轻松创建与指挥官，中士，士兵或所有人员互动的新对象
通俗的说
访问者模式定义可以在数据结构的节点上执行的操作。
维基百科说
在面向对象的程序设计和软件工程中，访问者设计模式是一种将算法与操作对象的结构分离的方法。这种分离的实际结果是能够在不修改结构的情况下向现有对象结构添加新操作。
访问者模式是一种行为型设计模式，它允许在不改变对象结构的情况下定义新的操作。该模式的核心思想是将操作从对象结构中分离出来，并在独立的访问者对象中进行实现。
访问者模式由以下几个关键元素组成：
抽象访问者（Visitor）：定义可以访问不同类型元素的方法，该方法的参数类型为具体元素类型。 具体访问者（ConcreteVisitor）：实现抽象访问者中定义的方法，以实现对元素的不同操作。 抽象元素（Element）：定义接受访问者对象的方法。 具体元素（ConcreteElement）：实现抽象元素中定义的方法，以便可以接受访问者对象的访问。 对象结构（Object Structure）：包含一组具体元素，可以被访问者对象遍历。 程序示例
使用上面的军队单元的例子，我们首先由单位和单位访问器类型。
public abstract class Unit { private final Unit[] children; public Unit(Unit... children) { this.children = children; } public void accept(UnitVisitor visitor) { Arrays.stream(children).forEach(child -&amp;gt; child.accept(visitor)); } } public interface UnitVisitor { void visitSoldier(Soldier soldier); void visitSergeant(Sergeant sergeant); void visitCommander(Commander commander); } 然后我们有具体的单元。
public class Commander extends Unit { public Commander(Unit.</description>
    </item>
    <item>
      <title>[译]什么是 Python Wheels，你为什么要关心它？</title>
      <link>https://blog.chensoul.cc/posts/2023/06/01/python-wheels/</link>
      <pubDate>Thu, 01 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/01/python-wheels/</guid>
      <description>Python .whl 文件或 wheels 是 Python 中很少被讨论的部分，但它们对 Python 包的安装过程大有裨益。如果您使用 pip 安装了 Python 包，那么 Wheels 很可能使安装更快、更高效。
Wheels 是 Python 生态系统的一个组件，有助于使包安装正常工作。它们允许更快的安装和更稳定的包分发过程。在本教程中，您将深入了解 Wheels 是什么，它们有什么好处，以及它们如何获得牵引力并使 Python 使用起来更加愉快。
在本教程中，您将学习：
什么是 Wheels 以及它们与源代码分发的比较 如何使用 Wheels 来控制包安装过程 如何为您自己的 Python 包创建和分发 Wheels 您将从用户和开发人员的角度看到使用流行的开源 Python 包的示例。
免费赠品：单击此处获取 Python 备忘单并学习 Python 3 的基础知识，例如使用数据类型、字典、列表和 Python 函数。
安装 接下来，激活虚拟环境并确保安装了最新版本的 pip 、 wheel 和 setuptools ：
$ python -m venv env &amp;amp;&amp;amp; source ./env/bin/activate $ python -m pip install -U pip wheel setuptools Successfully installed pip 20.1 setuptools-46.1.3 wheel-0.34.2 这就是您尝试安装和构建 Wheels 所需的全部内容！
Python 打包变得更好：Python Wheels 简介 在学习如何将项目打包到 wheel 之前，从用户的角度了解使用 wheel 的样子会很有帮助。这听起来可能有点落后，但了解 Wheels 如何工作的一个好方法是从安装一个不是 Wheels 的东西开始。
您可以像往常一样，通过将 Python 包安装到您的环境中来开始这个实验。在这种情况下，安装 uWSGI 版本 2.0.x：
$ python -m pip install &amp;#39;uwsgi==2.</description>
    </item>
    <item>
      <title>[译]使用 Python 的 pip 管理项目的依赖关系</title>
      <link>https://blog.chensoul.cc/posts/2023/06/01/what-is-pip/</link>
      <pubDate>Thu, 01 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/01/what-is-pip/</guid>
      <description>Python 的标准包管理器是 pip 。它允许您安装和管理不属于 Python 标准库的包。如果您正在寻找 pip 的介绍，那么您来对地方了！
在本教程中，您将学习如何：
在您的工作环境中设置 pip 修复与使用 pip 相关的常见错误 使用 pip 安装和卸载包 使用需求文件管理项目的依赖关系 pip 可以做很多事情，但是 Python 社区非常活跃，已经创建了一些 pip 的巧妙替代品。您将在本教程的后面部分了解这些内容。
从 pip 开始 那么，pip 具体是做什么的呢？ pip 是 Python 的包管理器。这意味着它是一个允许您安装和管理未作为标准库的一部分分发的库和依赖项的工具。 pip 这个名字是由 Ian Bicking 在 2008 年引入的：
我已经将 pyinstall 重命名为新名称：pip。pip 是 pip install package 首字母缩写。 （ 来源）
包管理非常重要，Python 的安装程序从 3.4 版和 2.7.9 版开始分别为 Python 3 和 Python 2 包含了 pip 。许多 Python 项目都使用 pip ，这使它成为每个 Pythonista 的必备工具。
如果您来自另一种编程语言，您可能会熟悉包管理器的概念。 JavaScript 使用 npm 进行包管理，Ruby 使用 gem，.NET 平台使用 NuGet。在 Python 中， pip 已成为标准包管理器。
在您的系统上查找 pip Python 3 安装程序为您提供了在系统上安装 Python 时安装 pip 的选项。事实上， pip 与 Python 一起安装的选项默认是勾选的，所以 pip 应该在安装完 Python 之后就可以使用了。</description>
    </item>
    <item>
      <title>Java设计模式：Acyclic Visitor</title>
      <link>https://blog.chensoul.cc/posts/2023/06/01/java-design-patterns-acyclic-visitor/</link>
      <pubDate>Thu, 01 Jun 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/01/java-design-patterns-acyclic-visitor/</guid>
      <description>本文主要介绍 Acyclic Visitor 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。
对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。
此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。
中文网站：https://java-design-patterns.com/zh/
Github 上源码仓库（非官方）：https://github.com/iluwatar/java-design-patterns
目的 允许将新功能添加到现有的类层次结构中，而不会影响这些层次结构，也不会有四人帮访客模式中那样循环依赖的问题。
在 Acyclic Visitor 模式中，我们通过引入一个可选操作接口来实现这一点。当数据结构类需要访问访问者类的某些操作时，它可以通过调用 visit 方法来访问可选操作接口中定义的操作，而不需要直接依赖于访问者类中的成员变量。
解释 真实世界例子
我们有一个调制解调器类的层次结构。 需要使用基于过滤条件的外部算法（是 Unix 或 DOS 兼容的调制解调器）来访问此层次结构中的调制解调器。
程序示例
这是调制解调器的层次结构。
public interface Modem { void accept(ModemVisitor modemVisitor); } public class Hayes implements Modem { @Override public void accept(ModemVisitor modemVisitor) { if (modemVisitor instanceof HayesVisitor) { ((HayesVisitor) modemVisitor).visit(this); } else { System.out.println(&amp;#34;Only HayesVisitor is allowed to visit Hayes modem&amp;#34;); } } } public class Zoom implements Modem { @Override public void accept(ModemVisitor modemVisitor) { if (modemVisitor instanceof ZoomVisitor) { ((ZoomVisitor) modemVisitor).</description>
    </item>
    <item>
      <title>周报-21｜Python之禅、产品经理被优化、端午节送节</title>
      <link>https://blog.chensoul.cc/posts/2023/05/31/weekly_review_21/</link>
      <pubDate>Wed, 31 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/31/weekly_review_21/</guid>
      <description>前言 公司价值观 本篇是对 2023-05-22 到 2023-05-28 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
周一，休产假的产品经理回来上班，得知她被优化之后，内心有些不舍和伤感。中午，组长请大家一起吃了饭。晚上，产品经理交割完办公用户之后，就没来上班了。自此，过完年后，公司至少有三位女同事修完产假之后就离职了，有的是主动，更多的应该是被动。虽然有 N+1 赔偿，但是，这个社会对女性还是不够公平。
还有 3 个月就要到端午节，老婆买了粽叶包粽子，我也动手包了一部分。虽然包的不好看，但心里还是很满足的。自己包的粽子送节，显然更有意义。结婚之后的第一个端午节，周末开车去给长辈送了端午节。看着长辈们的头发日渐斑白，不禁感叹岁月无情。趁着年轻的时候，要对身边的亲人好一些。不要等到来不及了才知道后悔。
这周在 docker 里部署了 Plausible ，使用过程中发现 Plausible 架构过于复杂，使用了 postgres 和 clickhouse 数据库，docker-compose 启动了 4 个容器，所以最后还是放弃了使用 Plausible。umami 的 postgres 数据库只包括几张表，操作起来比较容易，比如：时不时地，我会把来自 localhost 的访问记录删除掉，这样统计数据更加真实准确。
Python 之禅 这是最近的一个 PyTricks：在 python REPL 里面输入 import this 会输出 The Zen of Python, by Tim Peters：
英文：
The Zen of Python, by Tim Peters
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren&amp;rsquo;t special enough to break the rules.</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记12：当覆盖 equals 方法时，总要覆盖 hashCode 方法</title>
      <link>https://blog.chensoul.cc/posts/2023/05/26/always-override-tostring/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/26/always-override-tostring/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：始终覆盖 toString 方法。
介绍 虽然 Object 提供 toString 方法的实现，但它返回的字符串通常不是类的用户希望看到的。它由后跟「at」符号（@）的类名和 hash 代码的无符号十六进制表示（例如 PhoneNumber@163b91）组成。toString 的通用约定是这么描述的，返回的字符串应该是「简洁但信息丰富的表示，易于阅读」。虽然有人认为 PhoneNumber@163b91 简洁易懂，但与 707-867-5309 相比，它的信息量并不大。toString 约定接着描述，「建议所有子类覆盖此方法。」好建议，确实！
虽然它不如遵守 equals 和 hashCode 约定那么重要，但是 提供一个好的 toString 实现（能）使类更易于使用，使用该类的系统（也）更易于调试。 当对象被传递给 println、printf、字符串连接操作符或断言或由调试器打印时，将自动调用 toString 方法。即使你从来没有调用 toString 对象，其他人也可能（使用）。例如，有对象引用的组件可以在日志错误消息中包含对象的字符串表示。如果你未能覆盖 toString，则该消息可能完全无用。
如果你已经为 PhoneNumber 提供了一个好的 toString 方法，那么生成一个有用的诊断消息就像这样简单：
System.out.println(&amp;#34;Failed to connect to &amp;#34; + phoneNumber); 无论你是否覆盖 toString，程序员都会以这种方式生成诊断消息，但是除非你（覆盖 toString），否则这些消息不会有用。提供好的 toString 方法的好处不仅仅是将类的实例扩展到包含对这些实例的引用的对象，特别是集合。在打印 map 时，你更愿意看到哪个，{Jenny=PhoneNumber@163b91} 还是 {Jenny=707-867-5309}？
当实际使用时，toString 方法应该返回对象中包含的所有有趣信息， 如电话号码示例所示。如果对象很大，或者包含不利于字符串表示的状态，那么这种方法是不切实际的。在这种情况下，toString 应该返回一个摘要，例如曼哈顿住宅电话目录（1487536 号清单）或 Thread[main,5,main]。理想情况下，字符串应该是不言自明的。（线程示例未能通过此测试。）如果没有在字符串表示中包含所有对象的有趣信息，那么一个特别恼人的惩罚就是测试失败报告，如下所示：
Assertion failure: expected {abc, 123}, but was {abc, 123}. 在实现 toString 方法时，你必须做的一个重要决定是是否在文档中指定返回值的格式。建议你针对值类（如电话号码或矩阵）这样做。指定格式的优点是，它可以作为对象的标准的、明确的、人类可读的表示。这种表示可以用于输入和输出，也可以用于持久的人类可读数据对象，比如 CSV 文件。如果指定了格式，提供一个匹配的静态工厂或构造函数通常是一个好主意，这样程序员就可以轻松地在对象及其字符串表示之间来回转换。Java 库中的许多值类都采用这种方法，包括 BigInteger、BigDecimal 和大多数包装类。
指定 toString 返回值的格式的缺点是，一旦指定了它，就会终生使用它，假设你的类被广泛使用。程序员将编写代码来解析表示、生成表示并将其嵌入持久数据中。如果你在将来的版本中更改了表示形式，你将破坏它们的代码和数据，它们将发出大量的消息。通过选择不指定格式，你可以保留在后续版本中添加信息或改进格式的灵活性。
无论你是否决定指定格式，你都应该清楚地记录你的意图。 如果指定了格式，则应该精确地指定格式。例如，这里有一个 toString 方法用于 PhoneNumber 类：
/** * Returns the string representation of this phone number. * The string consists of twelve characters whose format is * &amp;#34;XXX-YYY-ZZZZ&amp;#34;, where XXX is the area code, YYY is the * prefix, and ZZZZ is the line number.</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记13：明智地覆盖 clone 方法</title>
      <link>https://blog.chensoul.cc/posts/2023/05/26/override-clone-judiciously/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/26/override-clone-judiciously/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：明智地覆盖 clone 方法。
介绍 Cloneable 接口的目的是作为 mixin 接口，用于让类来宣称它们允许克隆。不幸的是，它没有达到这个目的。它的主要缺点是缺少 clone 方法，并且 Object 类的 clone 方法是受保护的。如果不求助于反射，就不能仅仅因为对象实现了 Cloneable 接口就能调用 clone 方法。即使反射调用也可能失败，因为不能保证对象具有可访问的 clone 方法。尽管存在多种缺陷，但该机制的使用范围相当广泛，因此理解它是值得的。本条目将告诉你如何实现行为良好的 clone 方法，讨论什么时候应该这样做，并提供替代方案。
既然 Cloneable 接口不包含任何方法，用它来做什么呢？它决定了 Object 类受保护的 clone 实现的行为：如果一个类实现了 Cloneable 接口，Object 类的 clone 方法则返回该类实例的逐字段拷贝；否则它会抛出 CloneNotSupportedException。这是接口非常不典型的一种使用方式，不应该效仿。通常，类实现接口可以表明类能够为其客户端做些什么。在本例中，它修改了超类上受保护的方法的行为。
虽然规范没有说明，但是在实践中，实现 Cloneable 接口的类应该提供一个功能正常的公共 clone 方法。为了实现这一点，类及其所有超类必须遵守复杂的、不可强制执行的、文档很少的协议。产生的机制是脆弱的、危险的和非语言的：即它创建对象而不调用构造函数。
clone 方法的一般约定很薄弱。下面的内容是从 Object 规范复制过来的：
创建并返回此对象的副本。&amp;ldquo;副本&amp;rdquo; 的确切含义可能取决于对象的类。通常的意图是，对于任何对象 x，表达式
x.clone() != x 将为 true，并且表达式
x.clone().getClass() == x.getClass() 将为 true，但这并不是绝对要求。一般来说，对于任何对象 x 和 y，如果它们的 equals 方法返回 true，则表达式
x.clone().equals(x) 也应返回 true。
clone 方法创建并返回对象的副本。「副本」的确切含义可能取决于对象的类别。通常，对于任何对象 x，表达式 x.clone() != x、x.clone().getClass() == x.getClass() 以及 x.clone().equals(x) 的值都将为 true，但都不是绝对的。
按照惯例，此方法返回的对象应通过调用 super.clone() 来获取。如果一个类及其所有父类（除了 Object）都遵循这个惯例，那么就会有以下情况：
x.clone().getClass() == x.getClass(). 按照约定，clone 方法返回的对象应该通过调用 super.clone() 来获得。如果一个类和它的所有超类（Object 类除外）都遵守这个约定，在这种情况下，表达式 x.clone().getClass() == x.getClass() 则为 true。
按照约定，返回的对象应该独立于被克隆的对象。为了实现这种独立性，可能需要在 super.clone() 返回前，修改对象的一个或多个字段。</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记14：考虑实现 Comparable 接口</title>
      <link>https://blog.chensoul.cc/posts/2023/05/26/consider-implementing-comparable/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/26/consider-implementing-comparable/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：考虑实现 Comparable 接口。
介绍 与本章讨论的其他方法不同，compareTo 方法不是在 Object 中声明的。相反，它是 Comparable 接口中的唯一方法。它在性质上类似于 Object 的 equals 方法，除了简单的相等比较之外，它还允许顺序比较，而且它是通用的。一个类实现 Comparable，表明实例具有自然顺序。对实现 Comparable 的对象数组进行排序非常简单：
Arrays.sort(a); 类似地，搜索、计算极值和维护 Comparable 对象的自动排序集合也很容易。例如，下面的程序依赖于 String 实现 Comparable 这一事实，将命令行参数列表按字母顺序打印出来，并消除重复：
public class WordList { public static void main(String[] args) { Set&amp;lt;String&amp;gt; s = new TreeSet&amp;lt;&amp;gt;(); Collections.addAll(s, args); System.out.println(s); } } 通过让类实现 Comparable，就可与依赖于此接口的所有通用算法和集合实现进行互操作。你只需付出一点点努力就能获得强大的功能。实际上，Java 库中的所有值类以及所有枚举类型都实现了 Comparable。如果编写的值类具有明显的自然顺序，如字母顺序、数字顺序或时间顺序，则应实现 Comparable 接口：
public interface Comparable&amp;lt;T&amp;gt; { int compareTo(T t); } compareTo 方法的一般约定类似于 equals 方法：
将一个对象与指定的对象进行顺序比较。当该对象小于、等于或大于指定对象时，对应返回一个负整数、零或正整数。如果指定对象的类型阻止它与该对象进行比较，则抛出 ClassCastException。
在下面的描述中，sgn(expression) 表示数学中的符号函数，它被定义为：根据传入表达式的值是负数、零或正数，对应返回 -1、0 或 1。
实现者必须确保所有 x 和 y 满足 sgn(x.compareTo(y)) == -sgn(y.compareTo(x))（这意味着 x.compareTo(y) 当且仅当 y.compareTo(x) 抛出异常时才抛出异常）。 实现者还必须确保关系是可传递的：(x.compareTo(y) &amp;gt; 0 &amp;amp;&amp;amp; y.compareTo(z) &amp;gt; 0) 意味着 x.compareTo(z) &amp;gt; 0。 最后，实现者必须确保 x.compareTo(y) == 0 时，所有的 z 满足 sgn(x.</description>
    </item>
    <item>
      <title>Java设计模式：Active Object</title>
      <link>https://blog.chensoul.cc/posts/2023/05/26/java-design-patterns-active-object/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/26/java-design-patterns-active-object/</guid>
      <description>本文主要介绍 Active Object 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。
对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。
此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。
中文网站：https://java-design-patterns.com/zh/
Github 上源码仓库（非官方）：https://github.com/iluwatar/java-design-patterns
目的 活动对象（Active Object）是一种设计模式，其主要目的是将并发和异步处理的问题从客户端代码中分离出来，从而提高系统的性能、可靠性和可维护性。活动对象模式是一种能够帮助开发人员处理多线程、异步和并发问题的设计模式。
在传统的并发编程模型中，客户端代码需要直接管理线程和锁等细节，这样会导致代码复杂度和维护成本的增加，同时也容易出现各种问题，如死锁、竞态条件等。活动对象模式通过引入活动对象来解决这些问题，活动对象将客户端代码发送的消息添加到内部的消息队列中，并使用单独的线程异步处理这些消息。这种模式可以提高系统的性能和可扩展性，同时使得客户端代码更加简单和易于维护。
活动对象模式的目的包括：
将并发和异步处理的问题从客户端代码中分离出来，从而使得客户端代码更加简单和易于维护。客户端代码只需要发送消息即可，不需要关心异步处理的细节，活动对象将并发和异步处理的问题封装起来，提供简单的接口供客户端使用。 提高系统的性能和可扩展性。活动对象使用单独的线程池异步处理消息，可以更好地利用系统资源，提高系统的性能和可扩展性。 提高系统的可靠性和健壮性。活动对象将消息添加到内部的消息队列中，避免了竞态条件和死锁等问题，从而提高了系统的可靠性和健壮性。 将多线程和异步处理的细节封装起来，使得客户端代码更加抽象和通用。客户端代码可以使用相同的接口来访问不同的服务，从而提高代码的复用性和可维护性。 解释 活动对象模式的核心思想是将并发和异步处理的问题从客户端代码中分离出来。具体来说，活动对象模式包含以下几个关键组件：
活动对象（Active Object）：活动对象是一个封装了某种服务的对象，它将客户端代码发送的消息添加到内部的消息队列中，并使用单独的线程异步处理这些消息。活动对象通常包含一个消息队列和一个线程池，用于异步处理消息。 方法调用请求（Method Invocation Request）：客户端代码向活动对象发送方法调用请求，包括方法名和参数列表等信息。活动对象将方法调用请求封装为一个消息对象，并添加到内部的消息队列中。 消息队列（Message Queue）：消息队列是活动对象内部用于存储方法调用请求的队列。活动对象将客户端代码发送的消息添加到消息队列中，并使用单独的线程异步处理这些消息。 线程池（Thread Pool）：线程池是活动对象用于异步处理消息的线程池。活动对象从消息队列中取出消息，并使用线程池中的线程异步处理这些消息。 程序示例
public abstract class ActiveCreature{ private final Logger logger = LoggerFactory.getLogger(ActiveCreature.class.getName()); private BlockingQueue&amp;lt;Runnable&amp;gt; requests; private String name; private Thread thread; public ActiveCreature(String name) { this.name = name; this.requests = new LinkedBlockingQueue&amp;lt;Runnable&amp;gt;(); thread = new Thread(new Runnable() { @Override public void run() { while (true) { try { requests.</description>
    </item>
    <item>
      <title>周报-20｜自动生成每日早报、周末团建</title>
      <link>https://blog.chensoul.cc/posts/2023/05/25/weekly_review_20/</link>
      <pubDate>Thu, 25 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/25/weekly_review_20/</guid>
      <description>前言 乐农湖畔生态园 本篇是对 2023-05-15 到 2023-05-21 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
不知不觉，这已经是第 20 篇周报了。这周依旧是健身、理财、学习和写博客。
自动生成每日早报 最近在朋友圈看到这样一个早报，就在想能否通过代码自动抓取新闻并生成这样一个早报图片？
于是，在网上找到一篇文章：前后端均基于 vercel 的每日早报项目
参考源代码，做了一些修改，代码见：fetch_news.py。修改后的逻辑是将抓取的新闻发送到 memos，例如：https://memos.chensoul.cc/m/349 。可以在 github action 设置每天早上 7 点自动发送到 memos，然后再通过 n8n 同步到 『ChenSoul Share』Telegram 频道。
在 memos 中导出的图片如下：
如果能够通过 python 自动生成图片，那就更好了。记录一下，待以后实现。
团建 公司团建选择在周六，而且还是 520 这一天，真是会挑日子。很多人请假，最后只有 13 人参加团建，其中有 8 人是我们开发组的 🤣。挑两张照片发到这里～
理财 这周总计支出 1861 元，明细如下：
5 月 15 日：1027 元，武功山旅游，加油 327 5 月 16 日：42 元 5 月 17 日：12 元 5 月 18 日：16 元 5 月 19 日：25 元 5 月 20 日：562 元，看望六舅 5 月 21 日：177 元 健身 本周跑步 36 公里，最长跑步距离为 10 公里。明细数据如下：
我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2 个省份 2 个城市。更多跑步数据在跑步主页。
工作 博客 本周完成五篇博客：</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记11：当覆盖 equals 方法时，总要覆盖 hashCode 方法</title>
      <link>https://blog.chensoul.cc/posts/2023/05/23/always-override-hashcode-when-you-override-equals/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/23/always-override-hashcode-when-you-override-equals/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：当覆盖 equals 方法时，总要覆盖 hashCode 方法。
介绍 在覆盖了 equals 方法的类中，必须覆盖 hashCode 方法。 如果你没有这样做，该类将违反 hashCode 方法的一般约定，这将阻止该类在 HashMap 和 HashSet 等集合中正常运行。以下是根据 Object 规范修改的约定：
应用程序执行期间对对象重复调用 hashCode 方法时，它必须一致地返回相同的值，前提是不对 equals 方法中用于比较的信息进行修改。这个值不需要在应用程序的不同执行之间保持一致。 如果根据 equals(Object) 方法判断出两个对象是相等的，那么在两个对象上调用 hashCode 方法必须产生相同的整数结果。 如果根据 equals(Object) 方法判断出两个对象不相等，则不需要在每个对象上调用 hashCode 方法时必须产生不同的结果。但是，程序员应该知道，为不相等的对象生成不同的结果可能会提高散列表的性能。
当你无法覆盖 hashCode 方法时，将违反第二个关键条款：相等的对象必须具有相等的散列码。 根据类的 equals 方法，两个不同的实例在逻辑上可能是相等的，但是对于对象的 hashCode 方法来说，它们只是两个没有共同之处的对象。因此，Object 的 hashCode 方法返回两个看似随机的数字，而不是约定要求的两个相等的数字。例如：
Map&amp;lt;PhoneNumber, String&amp;gt; m = new HashMap&amp;lt;&amp;gt;(); m.put(new PhoneNumber(707, 867, 5309), &amp;#34;Jenny&amp;#34;); 此时，你可能期望 m.get(new PhoneNumber(707, 867,5309)) 返回「Jenny」，但是它返回 null。注意，这里涉及到两个 PhoneNumber 实例：一个用于插入到 HashMap 中，另一个相等的实例（被试图）用于检索。由于 PhoneNumber 类未能覆盖 hashCode 方法，导致两个相等的实例具有不相等的散列码，这违反了 hashCode 方法约定。因此，get 方法查找电话号码的散列桶可能会与 put 方法存储电话号码的散列桶不同。即使这两个实例碰巧分配在同一个散列桶上，get 方法几乎肯定会返回 null，因为 HashMap 有一个优化，它缓存每个条目相关联的散列码，如果散列码不匹配，就不会检查对象是否相等。
解决这个问题就像为 PhoneNumber 编写一个正确的 hashCode 方法一样简单。那么 hashCode 方法应该是什么样的呢？写一个反面例子很容易。例如，以下方法是合法的，但是不应该被使用：
// The worst possible legal hashCode implementation - never use! @Override public int hashCode() { return 42; } 它是合法的，因为它确保了相等的对象具有相同的散列码。同时它也很糟糕，因为它使每个对象都有相同的散列码。因此，每个对象都分配到同一个桶中，散列表退化为链表。这样，原本应该在线性阶 O(n) 运行的程序将在平方阶 O(n^2) 运行。对于大型散列表，这是工作和不工作的区别。</description>
    </item>
    <item>
      <title>Python学习1：注释、变量和常量</title>
      <link>https://blog.chensoul.cc/posts/2023/05/23/python-comment-and-variable/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/23/python-comment-and-variable/</guid>
      <description>Python 注释、变量和常量是编写 Python 代码时非常重要的概念，下面分别介绍它们的基本用法和语法。
Hello World 创建一个 00_helloworld.py 文件，打印 hello world：
print(&amp;#34;Hello，World!&amp;#34;) 执行该文件，会输出结果：
$ python 00_helloworld.py Hello，World! 一般在 python 文件的开头第一行，我们都会看到下面的代码行：
# python2 #!/usr/bin/env python # 或者 #!/usr/bin/python # python3 #!/usr/bin/env python3 # 或者 #!/usr/bin/python3 这行代码用来指定本脚本用什么解释器来执行。
#!/usr/bin/python 是告诉操作系统执行这个脚本的时候，调用 /usr/bin 下的 python 解释器。
#!/usr/bin/env python 这种用法是为了防止操作系统用户没有将 python 装在默认的 /usr/bin 路径里。当系统看到这一行的时候，首先会到 env 设置里查找 python 的安装路径，再调用对应路径下的解释器程序完成操作。为了增强代码的可移植性，推荐这种写法。
在 00_helloworld.py 添加这行代码：
#!/usr/bin/env python print(&amp;#34;Hello，World!&amp;#34;) 然后，修改该文件为可执行属性：
chmod +x 00_helloworld.py 就可以这样执行：
. 00_helloworld.py 编码格式 Python3 默认的编码格式是 UTF-8（Unicode Transformation Format - 8 bit）。这是一种通用的字符编码，支持几乎所有的字符集，包括 ASCII、Latin、中文、日文、韩文等。
在 Python 3.x 中，所有的字符串都是以 Unicode 编码存储的。当你在 Python 中创建一个字符串时，你可以使用任何 Unicode 字符，而不必担心编码问题。
当你打开一个文本文件时，Python 会自动尝试使用 UTF-8 编码来解析文件内容。如果文件使用其他编码格式，你需要使用相应的编码格式来打开文件，或者在读取文件内容后将其解码为 Unicode。
在 Python 中，你可以使用编码声明（coding declaration）来指定文件的编码格式。编码声明是一个特殊的注释，出现在 Python 文件的第一行或第二行（如果文件的第一行是 shebang，则编码声明必须出现在第二行），格式如下：
# -*- coding: encoding -*- # 或者 # coding=utf-8 其中，encoding 是文件的编码格式，可以是 UTF-8、ISO-8859-1 或其他编码格式的名称。编码声明告诉 Python 解释器应该使用指定的编码格式来解析该文件中的文本内容。如果没有编码声明，Python3 默认使用 UTF-8 编码来解析文件内容。</description>
    </item>
    <item>
      <title>[译]Build Robust Continuous Integration With Docker and Friends</title>
      <link>https://blog.chensoul.cc/posts/2023/05/22/docker-continuous-integration/</link>
      <pubDate>Mon, 22 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/22/docker-continuous-integration/</guid>
      <description>持续集成 (CI) 已成为软件开发的关键，它允许团队频繁合并代码更改并及早发现错误。
Docker 容器通过提供一致的环境帮助促进持续集成过程，您可以在其中测试和发送每次提交的代码。
在本教程中，您将学习如何使用 Docker 为 Flask Web 应用程序创建强大的持续集成管道。
您将完成在本地开发和测试应用程序、将其容器化、使用 Docker Compose 编排容器以及使用 GitHub Actions 定义 CI 管道的步骤。
在本教程结束时，您将能够为您的 Web 应用程序创建一个完全自动化的 CI 管道。
在本教程中，您将：
在 Docker 容器中本地运行 Redis 服务器 用 Docker 编排 Flask 编写的 Python Web 应用程序 构建 Docker 镜像并将它们推送到 Docker Hub 仓库 使用 Docker Compose 编排多容器应用程序 在任何地方复制类似生产的基础设施 使用 GitHub Actions 定义持续集成工作流 理想情况下，您应该具有使用 Python 进行 Web 开发、测试自动化、将 Redis 与 Python 结合使用以及使用 Git 和 GitHub 进行源代码版本控制的经验。以前接触过 Docker 会更好，但不是必需的。您还应该拥有一个 Git 客户端和一个 GitHub 帐户，以便跟随并复制本教程的步骤。
注意：本教程大致基于名为 Docker in Action - Fitter, Happier, More Productive 的旧教程，该教程由 Michael Herman 编写，他于 2015 年 2 月 8 日在 PyTennessee 展示了他的 CI 工作流程。如果你有兴趣，您可以查看展示的相应幻灯片在会议上。
不幸的是，原始教程中描述的许多工具不再受支持或免费提供。在此更新的教程中，您将使用最新的工具和技术，例如 GitHub Actions。</description>
    </item>
    <item>
      <title>Java设计模式：Abstract Document</title>
      <link>https://blog.chensoul.cc/posts/2023/05/22/java-design-patterns-abstract-document/</link>
      <pubDate>Mon, 22 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/22/java-design-patterns-abstract-document/</guid>
      <description>本文主要介绍 Abstract Document 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。
对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。
此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。
中文网站：https://java-design-patterns.com/zh/
Github 上源码仓库（非官方）：https://github.com/iluwatar/java-design-patterns
目的 使用动态属性，并在保持类型安全的同时实现非类型化语言的灵活性。
抽象文档模式中的属性对象可以动态添加和删除属性，并且属性类型是在运行时确定的，这使得抽象文档模式具有一定的灵活性和可扩展性。
在抽象文档模式中，属性对象通常使用 Map 或者 List 等数据结构来实现。动态属性的添加和删除可以通过 Map 的 put 和 remove 方法实现，而属性的类型可以通过泛型来确定。
解释 抽象文档模式使您能够处理其他非静态属性。 此模式使用特征的概念来实现类型安全，并将不同类的属性分离为一组接口。
真实世界例子
考虑由多个部分组成的汽车。 但是，我们不知道特定汽车是否真的拥有所有零件，或者仅仅是零件中的一部分。 我们的汽车是动态而且非常灵活的。
通俗的说
抽象文档模式允许在对象不知道的情况下将属性附加到对象。
维基百科说
面向对象的结构设计模式，用于组织松散类型的键值存储中的对象并使用类型化的视图公开数据。 该模式的目的是在强类型语言中实现组件之间的高度灵活性，在这种语言中，可以在不丢失类型安全支持的情况下，将新属性动态地添加到对象树中。 该模式利用特征将类的不同属性分成不同的接口。
程序示例
让我们首先定义基类Document和AbstractDocument。 它们基本上使对象拥有属性映射和任意数量的子对象。
以下代码在 java 8 中编译正常。
Document 接口：
public interface Document { Void put(String key, Object value); Object get(String key); &amp;lt;T&amp;gt; Stream&amp;lt;T&amp;gt; children(String key, Function&amp;lt;Map&amp;lt;String, Object&amp;gt;, T&amp;gt; constructor); } 以下接口不使用 Java 8 的 Stream API：
public interface Document { Object get(String key); void put(String key, Object value); List&amp;lt;Document&amp;gt; children(String key); } AbstractDocument 抽象类：</description>
    </item>
    <item>
      <title>Java设计模式：Abstract Factory</title>
      <link>https://blog.chensoul.cc/posts/2023/05/22/java-design-patterns-abstract-factory/</link>
      <pubDate>Mon, 22 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/22/java-design-patterns-abstract-factory/</guid>
      <description>本文主要介绍 Abstract Factory 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。
Java Design Patterns 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。
Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。
对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。
此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。
中文网站：https://java-design-patterns.com/zh/
Github 上源码仓库（非官方）：https://github.com/iluwatar/java-design-patterns
目的 抽象工厂（Abstract Factory）是一种创建型设计模式，它提供了一种方式来创建一系列相关或依赖对象的家族，而无需指定它们具体的类。
抽象工厂模式使用一个抽象工厂接口来定义一组相关的工厂方法，每个工厂方法都能够创建一组相关的产品。具体的工厂实现了这个接口，并能够创建具体的产品。客户端代码只需要使用抽象工厂接口来创建产品，而不需要关心具体的产品实现。
解释 真实世界例子
要创建一个王国，我们需要具有共同主题的对象。精灵王国需要精灵国王、精灵城堡和精灵军队，而兽人王国需要兽人国王、兽人城堡和兽人军队。王国中的对象之间存在依赖关系。
通俗的说
工厂的工厂； 一个将单个但相关/从属的工厂分组在一起而没有指定其具体类别的工厂。
维基百科上说
抽象工厂模式提供了一种封装一组具有共同主题的单个工厂而无需指定其具体类的方法
程序示例
翻译上面的王国示例。 首先，我们为王国中的对象提供了一些接口和实现。
public interface Castle { String getDescription(); } public interface King { String getDescription(); } public interface Army { String getDescription(); } // Elven implementations -&amp;gt; public class ElfCastle implements Castle { static final String DESCRIPTION = &amp;#34;This is the Elven castle!&amp;#34;; @Override public String getDescription() { return DESCRIPTION; } } public class ElfKing implements King { static final String DESCRIPTION = &amp;#34;This is the Elven king!</description>
    </item>
    <item>
      <title>JSR 166规范</title>
      <link>https://blog.chensoul.cc/posts/2023/05/18/jsr-166/</link>
      <pubDate>Thu, 18 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/18/jsr-166/</guid>
      <description>JSR 介绍 JSR，全称 Java Specification Requests， 即 Java 规范提案， 主要是用于向 JCP(Java Community Process) 提出新增标准化技术规范的正式请求。每次 JAVA 版本更新都会有对应的 JSR 更新，比如在 Java 8 版本中，其新特性 Lambda 表达式对应的是 JSR 335，新的日期和时间 API 对应的是 JSR 310。
JSR 166 是 Doug Lea 提出的一个关于 Java 并发编程的规范提案。JDK1.5 之前，我们控制程序并发访问同步代码只能使用 synchronized，那个时候 synchronized 的性能还没优化好，性能并不好，控制线程也只能使用 Object 的 wait 和 notify 方法。这个时候 Doug Lea 给 JCP 提交了 JSR-166 的提案，在提交 JSR-166 之前，Doug Lea 已经使用了类似 J.U.C 包功能的代码已经三年多了，这些代码就是 J.U.C 的原型。
J.U.C，即 java.util.concurrent 的缩写，该包参考自 EDU.oswego.cs.dl.util.concurrent，是 JSR 166 标准规范的一个实现。
Doug Lea 主页：Doug Lea&amp;rsquo;s Home Page JSR-166：Concurrency JSR-166 Interest Site JSR 166 Slider：JSR-166: Concurrency Utilities java.util.concurrent JavaDoc: JDK 1.5 、 JDK 7 、 JDK 8 、 JDK 9 JSR-166 包括多个规范，每个规范都引入了一些新的接口和类，以下是详细描述：
JSR-166（Java SE 5）：定义了 Java 并发包的核心接口和类，包括 Executors 框架、Queues、Timing、Synchronizers、Concurrent Collections、Memory Consistency Properties、Atomic、Locks 等。这些接口和类提供了一种方便、高效、可扩展的方式来处理异步任务和并发编程。 JSR-166x（Java SE 7）：定义了 Java 并发包中的一些新特性，包括 Phaser、TransferQueue、Exchanger、LinkedTransferQueue 等接口和类。其中 Phaser 支持分阶段执行任务，TransferQueue 和 LinkedTransferQueue 实现了高效的生产者-消费者模式，Exchanger 支持两个线程之间交换数据。 JSR-166y（Java SE 8）：定义了 Java 并发包中的一些新特性，包括 StampedLock、CompletableFuture、LongAdder 等接口和类。其中 StampedLock 是一种乐观锁，支持读写分离，CompletableFuture 支持异步任务执行和结果处理，LongAdder 是一种高效的计数器。 JSR-166z（Java SE 9）：定义了 Java 并发包中的一些新特性，包括 VarHandle、Fences 等接口和类。其中 VarHandle 提供了一种更加灵活的原子操作方式，Fences 提供了一些方法用于控制内存屏障。 JUC java.</description>
    </item>
    <item>
      <title>周报-19｜武功山看日出、Python初学建议</title>
      <link>https://blog.chensoul.cc/posts/2023/05/18/weekly_review_19/</link>
      <pubDate>Thu, 18 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/18/weekly_review_19/</guid>
      <description>前言 本篇是对 2023-05-08 到 2023-05-14 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
本周继续学习 python，发现一个质量非常高的 python 学习网站 Real Python，该网站有学习 python 的一些教程，是收费的，部分章节是可以免费观看的。
另外，周五晚上老婆临时起意想去武功山看日出，于是立即规划行程并购买火车票。因为一年半之前，我去过一次，所以规划起来还是很轻松的。上一次去是国庆节碰到下雨，没有看到日出。幸运的是，这次是晴天，不仅看到了日落还看到了日出。这一次没有选择住帐篷，而是住在了云中雾客栈，没想到这个客栈离金顶需要 40 分钟左右的路程，而且有段路程是坑坑洼洼。
去武功山之前，先去了长沙，再次游了橘子洲头，并第一次在长沙跑步打卡。本想在萍乡也跑步打卡，奈何没有得逞。
这次去了长沙和武功山，下次基本上是再也不会去爬武功山了。长沙还会去，因为从武功山回来路上，就和老婆规划着什么时候去张家界。
武功山看日出 理财 这周总计支出 1784 元，明细如下：
5 月 8 日：12 元 5 月 9 日：18 元 5 月 10 日：200 元 5 月 11 日：12 元 5 月 12 日：445 元 5 月 13 日：662 元 5 月 14 日：435 元 因为周末出去旅游，所以本周支出有所增多。
健身 本周跑步 56 公里，最长跑步距离为 13 公里。
明细数据如下：
周末出去旅游，路过长沙，在长沙跑了两天，累计跑了 6 公里。这样，我的跑步数据 从 2 年里我跑过 1 个省份 1 个城市 变成了 2 年里我跑过 2 个省份 2 个城市。
工作 Java 博客 本周完成两篇博客
《Effective Java 3》笔记 10：覆盖 equals 方法时应遵守的约定 JSR 166 规范 Python Python 初学建议 1、新手如何学习 python？</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记10：覆盖equals方法时应遵守的约定</title>
      <link>https://blog.chensoul.cc/posts/2023/05/17/obey-the-general-contract-when-overriding-equals/</link>
      <pubDate>Wed, 17 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/17/obey-the-general-contract-when-overriding-equals/</guid>
      <description>本文是 《Effective Java 3》第三章《对象的通用方法》的学习笔记：覆盖 equals 方法时应遵守的约定。
介绍 覆盖 equals 方法似乎很简单，但是有很多覆盖的方式会导致出错，而且后果可能非常严重。避免问题的最简单方法是不覆盖 equals 方法，在这种情况下，类的每个实例都只等于它自己。如果符合下列任何条件，就是正确的做法：
类的每个实例本质上都是唯一的。 对于像 Thread 这样表示活动实体类而不是值类来说也是如此。Object 提供的 equals 实现对于这些类具有完全正确的行为。
该类不需要提供「逻辑相等」测试。 例如，java.util.regex.Pattern 可以覆盖 equals 来检查两个 Pattern 实例是否表示完全相同的正则表达式，但设计人员认为客户端不需要或不需要这个功能。在这种情况下，从 Object 继承的 equals 实现是理想的。
超类已经覆盖了 equals，超类行为适合于这个类。 例如，大多数 Set 的实现从 AbstractSet 继承其对等实现，List 从 AbstractList 继承实现，Map 从 AbstractMap 继承实现。
类是私有的或包私有的，并且你确信它的 equals 方法永远不会被调用。 如果你非常厌恶风险，你可以覆盖 equals 方法，以确保它不会意外调用：
@Override public boolean equals(Object o) { throw new AssertionError(); // Method is never called } 什么时候覆盖 equals 方法是合适的？当一个类有一个逻辑相等的概念，而这个概念不同于仅判断对象的同一性（相同对象的引用），并且超类还没有覆盖 equals。对于值类通常是这样。值类只是表示值的类，例如 Integer 或 String。使用 equals 方法比较引用和值对象的程序员希望发现它们在逻辑上是否等价，而不是它们是否引用相同的对象。覆盖 equals 方法不仅是为了满足程序员的期望，它还使实例能够作为 Map 的键或 Set 元素时，具有可预测的、理想的行为。
有一个表示状态的内部类。没有覆盖 equals 方法时，equals 的结果与 s1==s2 相同，为 false，即两者并不是相同对象的引用。
public static void main(String[] args) { class Status { public String status; } Status s1 = new Status(); Status s2 = new Status(); System.</description>
    </item>
    <item>
      <title>Git Flow分支模型和使用</title>
      <link>https://blog.chensoul.cc/posts/2023/05/11/git-flow-model-and-usage/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/11/git-flow-model-and-usage/</guid>
      <description>介绍 Git Flow 是由 Vincent Driessen 在 2010 年提出的一种 Git 工作流。在这之前，Git 没有一个明确的标准工作流，导致团队在使用 Git 时往往会遇到一些问题，如分支管理、版本控制等。为了解决这些问题，Vincent Driessen 提出了 Git Flow 分支模型，成为了 Git 在实际应用中的一种标准工作流。
随着时间的推移，Git Flow 也在不断发展和完善。在 2011 年，Atlassian 发布了 SourceTree，这是一款图形化的 Git 客户端，支持 Git Flow 分支模型。在 2013 年，Git Flow 的一些开发者发布了 Git Flow AVH Edition，这是 Git Flow 的一个增强版本，提供了更多的功能和选项。此外，Git Flow 还得到了其他开源工具和平台的支持，如 GitHub、GitLab 等。
Git Flow 分支模型 Git Flow 分支模型定义了一种标准的 Git 分支模型，它将代码分为两个长期分支（master 和 develop）和三个短期分支（feature、release 和 hotfix），使得团队可以更好地管理代码的版本和发布。
以下是 Git Flow 分支模型的详细介绍：
master 分支 master 分支是代码库的主分支，它包含了所有已发布的代码和版本。所有代码都应该在该分支上进行测试和验证，以确保代码的质量和稳定性。master分支只能通过合并release或hotfix分支来更新。 develop 分支 develop 分支是代码库的开发分支，它包含了所有开发中的代码和功能。所有新的代码都应该在该分支上进行开发和测试，以确保代码的可靠性和稳定性。develop分支只能通过合并feature分支来更新。 feature 分支 feature 分支是为开发新的功能或修复 bug 而创建的临时分支。每个feature分支都是从develop分支分离出来的，开发完成后会合并回develop分支。feature 分支的命名应该清晰明确，以反映该分支所涉及的功能或问题。 release 分支 release 分支是为发布新版本而创建的临时分支。每个release分支都是从develop分支分离出来的，发布完成后会合并回develop分支和master分支。在 release 分支上可以进行一些小的修复和调整，以确保发布的代码的质量和稳定性。 hotfix 分支 hotfix 分支是为快速修复生产环境中的问题而创建的临时分支。每个 hotfix 分支都是从 master 分支分离出来的，修复完成后会合并回 develop 分支和 master 分支。hotfix分支的优先级比其他分支更高，因为它们需要尽快修复生产环境中的问题。 根据上面的理论，我们来实际操作一遍。首先，是 develop 分支创建一个 feature 分支。</description>
    </item>
    <item>
      <title>周报-18｜导出豆瓣数据、Effective Java 3第二章总结</title>
      <link>https://blog.chensoul.cc/posts/2023/05/10/weekly_review_18/</link>
      <pubDate>Wed, 10 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/10/weekly_review_18/</guid>
      <description>前言 本篇是对 2023-05-01 到 2023-05-07 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
继上周实现导出苹果接口数据之后，这周又实现了自动导出豆瓣数据。此外，还萌生了导出每天阅读的数据的想法。奈何现在阅读 app 都需要收费，只能暂且搁置这个想法。
最近在学习 Python，于是将学习中做的笔记发布到了博客，这周发布了两篇文章，希望通过输出来倒逼输入，以此来快速掌握 python 编程并能开发一些项目。另外，计划在学完之后，继续学习 Rust 和 Go，甚至开始学习前端开发。
最近又一次更换了博客主题，主要出发点是想找一个简洁的主题，减少不必要的信息干扰，也不想花时间在修改主题上面。减少了菜单链接。
导出豆瓣数据 最近阅读了一篇文章 很认真的在考虑不再使用豆瓣这件事 ，于是使用 lizheming/doumark-action 导出豆瓣数据。
在我的 github 主页 https://github.com/chensoul/chensoul 创建一个 workflow douban.yml ，每隔一个小时同步一次豆瓣数据（读书、电影、音乐）到 csv 文件。拿到这些文件之后，就可以通过 html + css 渲染出来，类似这个页面 书影音。等豆瓣数据增多之后，再考虑实现这个。
除此之外，之前还实现了通过 n8n 实时同步豆瓣数据到 memos 和 telegram：
通过 python 脚本 获取最近 10 条记录，显示到 我的 github 主页。
理财 这周总计支出 816 元，明细如下：
5 月 1 日：55 元 5 月 2 日：79 元 5 月 3 日：370 元，其中 270 元加油 5 月 4 日：136 元，其中捐款 50 元 5 月 5 日：12 元 5 月 6 日：100 元，手机话费充值 5 月 7 日：64 元 最近一直想统计一下工作和生活中的固定支出费用，于是今天花了点时间做了统计。没想到每年工作和生活中固定支出费用竟然达到了 1529+6180=7709 元。其中大块头是手机话费和停车位费用，手机话费是因为办理一个电信套餐送宽带和一部手机；停车位费用是因为今年买了车。</description>
    </item>
    <item>
      <title>Python包和环境管理</title>
      <link>https://blog.chensoul.cc/posts/2023/05/09/python-package-and-env-management/</link>
      <pubDate>Tue, 09 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/09/python-package-and-env-management/</guid>
      <description>发展历史 Python 包管理工具是 Python 生态系统中的一个重要组成部分，它们为 Python 开发者提供了方便、快捷的包管理方式。以下是 Python 包管理工具的发展历史概述：
1991 年：Python 语言首次发布，Python 包管理工具还未出现。 1998 年：Python Distutils 工具发布，它是 Python 的第一个包管理工具，可以用于打包、安装和分发 Python 包。 2004 年：easy_install 工具发布，它是一种用于安装、升级和卸载 Python 包的工具，可以自动解析依赖关系并安装所需的其他包。 2007 年：pip 工具发布，它是 easy_install 的一个替代品，提供了更好的依赖项解析、升级和卸载功能，以及更好的用户体验。 2012 年：Python 软件基金会宣布，pip 将成为 Python 包管理生态系统中的标准工具，取代 easy_install。 2013 年：Wheel 格式发布，它是一种用于打包和分发 Python 包的格式，可以包含 C 扩展模块，并且支持多平台安装。 2018 年：PEP 517 和 518 发布，它们提供了一种新的 Python 包构建和分发标准，可以使包构建和分发变得更加简单和可靠。 2018 年：flit 工具发布，它是一种简单的 Python 包构建和分发工具，可以通过 pyproject.toml 文件来配置包的元数据和依赖项。 2019 年：poetry 工具发布，它是一种专注于依赖管理和项目构建的 Python 包管理工具，可以自动解析依赖关系、构建项目、生成 lock 文件等。 2020 年：PEP 621 发布，它是一种新的 Python 包元数据标准，可以用于定义 Python 包的元数据信息，如名称、版本、作者、许可证等。 2020 年：PEP 636 发布，它是一种新的 CPython 扩展模块元数据标准，可以用于定义 CPython 扩展模块的元数据信息，如名称、版本、作者、许可证等。 2021 年：flit 3 发布，它增加了对 PEP 621 和 PEP 636 的支持，可以使用 pyproject.toml 文件来定义 Python 包和 CPython 扩展模块的元数据信息。 PyPA 是 Python Packaging Authority 的缩写，即 Python 包管理权威组织。PyPA 的目标是为 Python 社区提供一个标准的、易于使用的包管理工具和相关工具的生态系统，并提供相关的文档和规范。</description>
    </item>
    <item>
      <title>Python安装、构建、发布、下载和运行</title>
      <link>https://blog.chensoul.cc/posts/2023/05/09/python-install-build-publish-run/</link>
      <pubDate>Tue, 09 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/09/python-install-build-publish-run/</guid>
      <description>最近开始学习 python，这篇文章记录如何安装 python、搭建 python 开发环境，以及如何构建、发布 python 包。我使用的是 macos 系统，所以本篇文章中的一些命令是基于 macos ，特此说明。
1、安装 MacOS 上通过 brew 安装 Python3：
brew install python3 查看 python3 安装路径：
$ which python3 /opt/homebrew/bin/python3 $ type python3 python3 is /opt/homebrew/bin/python3 查看版本：
python --version 设置环境变量，我使用的是 zsh，所以需要修改 ~/.zshrc，添加下面代码：
export PYTHON_HOME=/opt/homebrew/opt/python@3.11 export PATH=$PYTHON_HOME/bin:$PATH alias python=python3 alias pip=pip3 使配置生效：
source ~/.zshrc 2、创建项目 创建一个目录 chensoul_hello：
mkdir chensoul_hello cd chensoul_hello 创建一个 main.py ，打印 helloworld：
print(&amp;#34;hello world&amp;#34;) 试试运行 main.py：
python main.py 3、创建虚拟环境 使用 python venv 模块创建虚拟环境 .venv：
python -m venv .venv 使用 . 开头的目录或者文件为隐藏文件。如果使用 git 管理项目，则需要将 .venv 添加到 .gitignore。
激活虚拟环境：
source .venv/bin/activate 4、使用 setuptools 管理项目 setuptools 是 Python 的一个包管理工具，它可以帮助开发人员更方便地打包和发布 Python 代码。setuptools 提供了一些命令行工具，例如 easy_install 和 setup.</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记8：避免使用终结器和清除器</title>
      <link>https://blog.chensoul.cc/posts/2023/05/08/avoid-finalizers-and-cleaners/</link>
      <pubDate>Mon, 08 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/08/avoid-finalizers-and-cleaners/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：避免使用终结器和清除器。
介绍 终结器是不可预测的、常常是危险的，通常也是不必要的。 它们的使用可能导致不稳定的行为、低效率和可移植性问题。终结器有一些有效的用途，我们稍后会介绍，但通常情况下应该避免使用它们。从 Java 9 开始，终结器已经被弃用，但它们仍然被 Java 库使用。Java 9 中终结器的替代品是清除器。 清除器的危险比终结器小，但仍然不可预测、缓慢，而且通常是不必要的。
终结器是通过在对象上实现 finalize() 方法来实现的，而清除器是通过使用 Cleaner 类来实现的。它们的工作方式有所不同：
终结器是由垃圾回收器自动执行的，无法预测何时执行，也无法保证一定会执行。当垃圾回收器决定将对象回收时，它会调用对象的 finalize() 方法，以便对象在被销毁之前执行一些清理操作。
清除器是由 Java 9 虚拟机通过引用队列和 Cleaner 对象执行的，可以在对象被回收之前或之后执行。在对象被垃圾回收之前，Java 虚拟机会将该对象的引用添加到一个引用队列中，然后在某些时刻，Java 虚拟机会创建一个 Cleaner 对象，并将该引用队列与 Cleaner 对象关联起来。当该对象被垃圾回收时，它的引用将被添加到与 Cleaner 对象关联的引用队列中，Cleaner 对象会在某些时刻自动执行，以便对象在被销毁之前或之后执行一些清理操作。
在 Java 9 中，引入了 java.lang.ref.Cleaner 类，作为终结器的替代品，用于执行对象清理操作。相比终结器，Cleaner 具有以下优点：
显式管理：Cleaner 使用明确的代码路径来管理清理操作，而不是使用隐式的终结器机制。 可控性：Cleaner 允许开发人员控制何时执行清理操作，而不是完全依赖于垃圾回收器的行为。 安全性：Cleaner 执行清理操作时，会确保类加载器已准备好，因此可以安全地执行本地清理操作。 Cleaner 通过注册一个任务来执行清理操作。该任务可以是 Runnable 或者继承自 PhantomReference 类的子类对象。当对象被垃圾回收器回收时，Cleaner 将自动执行注册的任务。
终结器和清除器的使用场景非常有限，因为它们的执行时间不可预测，可能会导致一些问题，例如性能问题、不稳定的行为、低效率和可移植性问题。
终结器和清除器的主要问题是：
它们无法可靠地及时执行，甚至可能根本不会执行。当对象变得不可访问，终结器或清除器对它进行操作的时间是不确定的。这意味着永远不应该在终结器或清除器中执行任何对时间要求很严格的操作。例如，依赖终结器或清除器关闭文件就是一个严重错误，因为打开的文件描述符是有限的资源。如果由于系统在运行终结器或清除器的延迟导致许多文件处于打开状态，程序可能会运行失败，因为它不能再打开其他文件。
终结器的另一个问题是，在终结期间抛出的未捕获异常被忽略，该对象的终结终止。未捕获的异常可能会使其他对象处于损坏状态。如果另一个线程试图使用这样一个损坏的对象，可能会导致任意的不确定性行为。正常情况下，未捕获的异常将终止线程并打印堆栈跟踪，但如果在终结器中出现，则不会打印警告。清除器没有这个问题，因为使用清除器的库可以控制它的线程。
它们可能会导致性能问题。终结器由垃圾回收器执行，这可能会导致垃圾回收过程中的延迟。另一方面，清除器使用单独的线程执行，这可能会导致额外的开销和同步问题。
《Effective Java》第三版建议使用显式终止方法，例如 close()，释放系统资源。当应用程序完成对资源的使用时，可以显式调用这些方法，而不依赖于垃圾回收器来执行它们。
如果必须使用终结器或清除器， 《Effective Java》第三版建议使用防御性编程实现它们，即使用 try-finally 块确保执行关键的清理操作，并避免引用其他可能已被垃圾回收的对象或资源。
扩展 System.gc() System.gc() 方法是 Java 中的一种垃圾回收机制，它可以在请求垃圾回收器运行时强制进行一次垃圾回收。
System.gc() 方法不是强制垃圾回收的方法，因为 Java 虚拟机可以忽略它。Java 编程语言规范要求 System.gc() 方法只是一个建议，不能保证它一定会导致垃圾回收器运行。因此，它不应该被频繁地调用，因为这可能会导致性能问题。
System.gc() 方法的使用场景非常有限。通常情况下，应该让垃圾回收器自行管理内存，而不是使用 System.gc() 方法来强制进行垃圾回收。如果需要确保某些对象在垃圾回收之前被释放，可以使用弱引用或软引用来管理这些对象，或使用显式终止方法来释放系统资源。
需要注意的是，System.gc() 方法可能会耗费较长时间，因为它可能会强制回收所有未使用的对象。因此，在实际使用中，应该谨慎使用 System.gc() 方法，并仅在必要时使用它。
System.runFinalization() System.runFinalization() 方法是在 Java 1.2 版本中引入的。在 Java 1.2 中，引入了垃圾回收器的改进，包括使用引用类型、终结器和垃圾回收器性能的提升。System.</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记9：使用 try-with-resources 优于 try-finally</title>
      <link>https://blog.chensoul.cc/posts/2023/05/08/prefer-try-with-resources-to-try-finally/</link>
      <pubDate>Mon, 08 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/08/prefer-try-with-resources-to-try-finally/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：使用 try-with-resources 优于 try-finally。
介绍 Java 库包含许多必须通过调用 close 方法手动关闭的资源。常见的有 InputStream、OutputStream 和 java.sql.Connection。关闭资源常常会被客户端忽略，这会导致可怕的性能后果。虽然这些资源中的许多都使用终结器作为安全网，但终结器并不能很好地工作。
从历史上看，try-finally 语句是确保正确关闭资源的最佳方法，即使在出现异常或返回时也是如此：
// try-finally - No longer the best way to close resources! static String firstLineOfFile(String path) throws IOException { BufferedReader br = new BufferedReader(new FileReader(path)); try { return br.readLine(); } finally { br.close(); } } 这可能看起来不坏，但添加第二个资源时，情况会变得更糟：
// try-finally is ugly when used with more than one resource! static void copy(String src, String dst) throws IOException { InputStream in = new FileInputStream(src); try { OutputStream out = new FileOutputStream(dst); try { byte[] buf = new byte[BUFFER_SIZE]; int n; while ((n = in.read(buf)) &amp;gt;= 0) out.write(buf, 0, n); } finally { out.</description>
    </item>
    <item>
      <title>周报-17｜导出苹果健康数据、自动化收集个人数据、FlexyPool动态连接池</title>
      <link>https://blog.chensoul.cc/posts/2023/05/06/weekly_review_17/</link>
      <pubDate>Sat, 06 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/06/weekly_review_17/</guid>
      <description>前言 本篇是对 2023-04-24 到 2023-04-30 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
本周二早上跑步右小腿抽筋，跑步暂停了两天，所以有两天走路没有到一万步。在小腿恢复之后，继续跑步，查看 strava 上的统计，这周总共跑了 27 公里，比上周 41 公里少了 14 公里。
这周空闲时间就在想，能不能每天自动收集个人的一些数据，比如，目前我能想到的数据包括跑步、走路、体重、编码、早起等等。
目前是使用 strava app 记录跑步数据，通过 running_page 可以实时收集我的每天 跑步数据。
走路、体重数据可以从苹果健康数据获取：
编码数据可以从 wakatime 获取：
早起的数据，我目前是通过 ios workflow 自动化来实现的。当早起闹钟响起时，往 memos 写入一条记录。
如果可以获取到苹果屏幕使用时间数据，则可以从苹果手机获取每日第一次拿起手机的时间作为早起时间（待研究）。
导出苹果健康数据 如何导出苹果健康数据？可以参考这篇文章 想要分析或备份 iPhone 「健康」应用数据？教你 3 种方法将其导出 。这篇文章提到的 Health Export 工具和 python 脚本我都试过，QS Access 在手机上没有找到。
1. Health Export 在线解析 Health Export 是国外一名独立开发者写的在线解析工具，它专门用于将健康应用导出的 XML 文件转换为 CSV 文件。
Health Export 提供了一个 web 网站 可以解析传苹果手机导出的健康数据。
如何从 IPhone 手机导出苹果健康数据呢？您可以通过以下步骤导出这些数据：
打开“健康”应用程序。 点击屏幕右上角的“个人资料”图标。 滚动到页面底部，找到“导出健康数据”选项，并点击它。 在弹出窗口中选择要导出的数据类型，例如步数、心率等。 点击“下一步”按钮。 在下一个页面中，您可以选择要导出的时间范围。您可以选择“全部数据”或指定日期范围。 点击“请求导出”按钮。 您将被要求输入一个密码以保护您的数据。输入密码后，点击“下一步”按钮。 在弹出窗口中，您可以选择将数据发送到您的电子邮件地址或其他应用程序。 点击“导出”按钮。 完成这些步骤后，您的健康数据将被导出为一个可下载的 zip 文件。您可以将其保存到您的设备上或发送到其他应用程序或云存储服务。
将导出的文件 export.xml 上传到 web 网站 ，稍等片刻可以导出结果。导出的健康数据是一个指标一个 csv 文件，如果想合并数据，需要做进一步处理。
另外，Health Export 也提供了 IOS APP，功能好用，支持选择指定指标数据按日期聚合导出为一个 csv，还有定时导出的功能，遗憾的是需要收费。
2、使用 python 脚本 这里使用了 @Radcliffe 提供的开源代码。目前，Github 可以在国内自由访问，所以直接通过此链接下载名称为 applehealthdata.</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记4：用私有构造函数使类不可实例化</title>
      <link>https://blog.chensoul.cc/posts/2023/05/05/enforce-noninstantiability-with-a-private-constructor/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/05/enforce-noninstantiability-with-a-private-constructor/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：用私有构造函数使类不可实例化。
介绍 使用私有构造函数强制实现不可实例化的主要原因是防止类被意外地实例化，以使代码更加健壮和可靠。在某些情况下，我们只需要使用类中的静态方法和静态字段，而不需要创建该类的实例。如果类中没有显式地定义私有构造函数，Java 编译器将会自动为该类生成一个默认的公共构造函数，这意味着该类可以在其他类中被实例化。如果这不是我们想要的，为了防止其他人意外地实例化我们的类，我们可以将构造函数设置为私有。
此外，使用私有构造函数强制实现不可实例化还有以下优点：
明确表明该类不可被实例化，提高了代码的可读性和可维护性。 防止类被子类化，从而避免了继承所带来的副作用和不必要的复杂性。 提高了代码的安全性，防止其他类在不合适的情况下实例化该类。 这是一个实现了私有构造函数强制实现不可实例化的类的示例：
public class UtilityClass { // 禁止默认构造函数防止实例化 private UtilityClass() { throw new AssertionError(); } // 其他静态方法和字段 // ... } 这个类中的私有构造函数会在被调用时抛出AssertionError。这样做可以确保构造函数永远不会从类内部或外部调用。
通过将构造函数设置为私有，这个类就不能从外部被实例化。这个习惯用法也防止了类被子类化。如果一个类的构造函数是私有的，那么它不能被子类调用，因为子类必须调用父类的构造函数来完成初始化。因此，如果一个类的构造函数是私有的，它就不能被子类化，因为子类不能调用父类的构造函数来完成初始化。
以下是一个示例，展示了如何使用私有构造函数防止类被子类化：
public final class FinalClass { private FinalClass() { // private constructor } public static void doSomething() { // do something } } 在这个示例中，FinalClass被声明为final，因此不能被子类化。此外，它的构造函数是私有的，因此不能从子类中被调用。由于该类不能被子类化，因此它的行为不会受到子类的影响，从而避免了继承所带来的副作用和不必要的复杂性。
在某些情况下，将类设置为不能被实例化，但可以被子类化是有用的。这通常是因为我们希望子类化的类能够继承父类的行为和属性，同时又不希望外部能够实例化该类。以下是一个例子：
public abstract class Animal { private String name; protected Animal(String name) { this.name = name; } public String getName() { return name; } public abstract void makeSound(); } public class Dog extends Animal { public Dog(String name) { super(name); } @Override public void makeSound() { System.</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记7：排除过时的对象引用</title>
      <link>https://blog.chensoul.cc/posts/2023/05/05/eliminate-obsolete-object-references/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/05/eliminate-obsolete-object-references/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：排除过时的对象引用。
介绍 &amp;ldquo;Eliminate obsolete object references&amp;rdquo; 是一条 Java 编程最佳实践的原则，指的是在代码中及时清理不再使用的对象引用，以避免内存泄漏和性能问题。当一个对象不再需要时，应该尽快将其引用设置为 null，这样 JVM 可以及时回收它所占用的内存。
考虑以下简单的堆栈实现：
import java.util.Arrays; import java.util.EmptyStackException; // Can you spot the &amp;#34;memory leak&amp;#34;? public class Stack { private Object[] elements; private int size = 0; private static final int DEFAULT_INITIAL_CAPACITY = 16; public Stack() { elements = new Object[DEFAULT_INITIAL_CAPACITY]; } public void push(Object e) { ensureCapacity(); elements[size++] = e; } public Object pop() { if (size == 0) throw new EmptyStackException(); return elements[--size]; } /** * Ensure space for at least one more element, roughly * doubling the capacity each time the array needs to grow. */ private void ensureCapacity() { if (elements.</description>
    </item>
    <item>
      <title>周报-16｜《灌篮高手》电影、《春山如笑》话剧</title>
      <link>https://blog.chensoul.cc/posts/2023/04/25/weekly_review_16/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/04/25/weekly_review_16/</guid>
      <description>前言 本篇是对 2023-04-17 到 2023-04-23 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这周的工作，手上累积了三个迭代版本，因为临近五一及其他原因，短期内无法发布上线。开发过程中，想着这些版本都会一个个上线，所以三个版本之间合并了代码，存在了依赖关系。以后，还是需要小版本迭代、上一个版本发布之后再从 main 分支合并代码。
这周先后看了《灌篮高手》电影、《春山如笑》话剧，体验了两种艺术表现形式，都让人失望。
利用空余时间，将 n8n 进行了调整，只将我在豆瓣、github、spotify、blog、strava 上的活动同步到 telegram，而直接不同步到 memos，单独创建一个 workflow 将 telegram 同步到 memos。这样 telegram 是一个对外分享的频道，而 memos 可以分享一些个人的心情或者说说。另外，为了减少对大家的干扰，不再将 rss 订阅内容同步到我的 telegram 频道。
灌篮高手 4 月 20 日，灌篮高手国内上映，抽时间下班和老婆去看了这场电影。看完之后发了一个朋友圈：
两个小时的电影，一场篮球比赛，尽是回忆，留下的是半亩良田半亩差评
这就是我对这个电影的评价。因为情怀而去看了这部电影，却被情怀出卖了，这年头情怀不值钱了么？整部电影以宫城良田为视角，不停的回忆，四十分钟的比赛节奏不停的中断。很多片段都是动画里的内容，没有多少新内容。流川枫的刻画太少、樱木花道还是那样勇猛、晴子就没出现几次。。。
看话剧 周六去中南剧场看了一个话剧《春山如笑》，这是第一次看话剧，第一次接触话剧这个艺术表现形式。相比较于电影，我还是更喜欢看电影。
理财 这周总计支出 292.5 元，明细如下：
4 月 21 日：59 元，和同事一起吃饭 4 月 22 日：232 元，周末买菜做饭，买水果 4 月 24 日：1.5 元，跑步小腿抽筋，骑共享单车回公司 四月累计支出共 2417 元，其中餐饮和购物占了一半。
健身 每天走一万步，这周完成了目标。以后每天跑步的话，这个目标就很容易达成了，甚至这个目标会换成每天跑步。
从 strava 的训练日志，可以看到本周运动记录如下：
从 strava 的训练日历，可以看到截至 24 日，本月运动了 20 天，23 次，一共跑步了 100 公里。
工作 Effective Java 3 笔记 请参考《《Effective Java 3》笔记：避免创建不必要的对象》。
上面这个图是使用 Shots 制作的，它是免费的，可以制作好看的图片，强烈推荐使用。
本周分享 虽然大部分有意思的内容会分享在 『ChenSoul Share』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。
一些文章 使用 Python 实现 RSS 转 Newsletter 5 种微服务注册中心该如何选型？ 5 Years of Indie Hacking 一个技术精致的网站：接口设计和图片加载 抛弃又贵又难用的录屏软件，3 分钟入门 FFmpeg 开始学习和使用 Rust 一些工具 EnhanceAI 使用一行代码为网站的输入框增加上 AI 能力。</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记6：避免创建不必要的对象</title>
      <link>https://blog.chensoul.cc/posts/2023/04/24/avoid-creating-unnecessary-objects/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/04/24/avoid-creating-unnecessary-objects/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记：避免创建不必要的对象。
介绍 创建对象时，经常会复用对象。如果对象是不可变的，那么它总是可以被复用的。
下面一个例子：
String s = new String(&amp;#34;bikini&amp;#34;); // DON&amp;#39;T DO THIS! 该语句每次执行时都会创建一个新的 String 实例，而这些对象创建都不是必需的。String 构造函数的参数 (&amp;quot;bikini&amp;quot;) 本身就是一个 String 实例，在功能上与构造函数创建的所有对象相同。如果这种用法发生在循环或频繁调用的方法中，创建大量 String 实例是不必要的。
改进后的版本如下：
String s = &amp;#34;bikini&amp;#34;; 这个版本使用单个 String 实例，而不是每次执行时都创建一个新的实例。此外，可以保证在同一虚拟机中运行的其他代码都可以复用该对象，只要恰好包含相同的字符串字面量。
通常可以通过使用静态工厂方法来避免创建不必要的对象，而不是在提供这两种方法的不可变类上使用构造函数。例如，工厂方法 Boolean.valueOf(String) 比构造函数 Boolean(String) 更可取，后者在 Java 9 中被弃用了。构造函数每次调用时都必须创建一个新对象，而工厂方法从来不需要这样做，在实际应用中也不会这样做。除了复用不可变对象之外，如果知道可变对象不会被修改，也可以复用它们。
有些对象的创建的代价相比而言要昂贵得多。如果你需要重复地使用这样一个「昂贵的对象」，那么最好将其缓存以供复用。
下面是使用正则表达式最简单的方法：
// Performance can be greatly improved! static boolean isRomanNumeral(String s) { return s.matches(&amp;#34;^(?=.)M*(C[MD]|D?C{0,3})&amp;#34; + &amp;#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&amp;#34;); } 这个实现的问题是它依赖于 String.matches 方法。虽然 String.matches 是检查字符串是否与正则表达式匹配的最简单方法，但它不适合在性能关键的情况下重复使用。 问题在于，它在内部为正则表达式创建了一个 Pattern 实例，并且只使用一次，之后就进行垃圾收集了。创建一个 Pattern 实例是很昂贵的，因为它需要将正则表达式编译成有限的状态机。
为了提高性能，将正则表达式显式编译为 Pattern 实例（它是不可变的），作为类初始化的一部分，缓存它，并在每次调用 isRomanNumeral 方法时复用同一个实例：
// Reusing expensive object for improved performance public class RomanNumerals { private static final Pattern ROMAN = Pattern.compile(&amp;#34;^(?=.)M*(C[MD]|D?C{0,3})&amp;#34; + &amp;#34;(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$&amp;#34;); static boolean isRomanNumeral(String s) { return ROMAN.</description>
    </item>
    <item>
      <title>周报-15｜Umami升级到2.0、汉街蜡像馆、使用Strava跑步</title>
      <link>https://blog.chensoul.cc/posts/2023/04/18/weekly_review_15/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/04/18/weekly_review_15/</guid>
      <description>前言 题图：楚河汉街蜡像馆
本篇是对 2023-04-10 到 2023-04-16 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这周的工作不算忙碌，继续学习《Effective Java 3》这本书，并花了一些时间学习 Rust、Python 的基础语法。
这个月已经过了一半，减肥也进行了两周，体重从 72 公斤减到了现在的 68.4 公斤。在之前每天走路 1 万步的基础上，打算开始每天跑步，比记录跑步数据。
这周总计支出 916 元，明细如下：
4 月 12 日：329 元，开通 ETC 预存 300 元 4 月 15 日：116 元，周末买菜做饭 4 月 16 日：471 元，老婆过生，吃饭和看电影 四月累计支出共 2025 元，其中餐饮和购物占了一半。
健身 这周每天走路步数如下，其中有一天因为加班而没有完成一万步的目标。
受 @Conge 博客影响，开始记录每天的跑步数据。首先是注册了 strava 账号，然后参考 running_page 部署了一个我的跑步主页 run.chensoul.cc。
因为我之前是使用悦跑圈 APP 记录跑步，所以又参考这篇文章导出 gpx 数据，然后同步到 Strava。最后，可以把悦跑圈 APP 卸载了。
上周跑步数据如下，总计 28.64 公里，比上周的 19.05 公里多了 9.6 公里。
上面搞定了之后，就可以使用 Strava 来跑步了。为了增加社交乐趣性，我在 n8n 里面创建了一个 workflow，将 Strava 活动发送到我的『ChenSoul Share』Telegram 频道，效果如下。
Umami 升级到 2.0 1、首先备份数据库
2、升级数据库
git clone https://github.com/umami-software/migrate-v1-v2.git cd migrate-v1-v2 yarn install yarn build 创建 .env 文件：
#修改为你的数据库地址 DATABASE_URL=postgresql://umami:xxxxx@postgres.chensoul.cc:5432/umami 运行：</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记5：依赖注入优于硬编码资源</title>
      <link>https://blog.chensoul.cc/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。
介绍 依赖注入是软件工程中使用的一种设计模式，用于将组件和依赖项相互解耦。而不是在组件内部创建和管理依赖项，我们从外部传递它们。这种方法可以帮助创建更模块化和灵活的代码。
相比之下，硬编码资源涉及在组件内部直接创建和管理依赖项。这种方法可能会使代码不太灵活，难以维护。
举例 许多类依赖于一个或多个底层资源。例如，拼写检查程序依赖于字典。常见做法是，将这种类实现为静态实用工具类：
// Inappropriate use of static utility - inflexible &amp;amp; untestable! public class SpellChecker { private static final Lexicon dictionary = ...; private SpellChecker() {} // Noninstantiable public static boolean isValid(String word) { ... } public static List&amp;lt;String&amp;gt; suggestions(String typo) { ... } } 类似地，我们也经常看到它们的单例实现：
// Inappropriate use of singleton - inflexible &amp;amp; untestable! public class SpellChecker { public static INSTANCE = new SpellChecker(...); private final Lexicon dictionary = ...; private SpellChecker(...) {} public boolean isValid(String word) { ... } public List&amp;lt;String&amp;gt; suggestions(String typo) { ... } } 这两种方法都不令人满意，因为它们假设只使用一个字典。在实际应用中，每种语言都有自己的字典，特殊的字典用于特殊的词汇表。另外，最好使用一个特殊的字典进行测试。
你可以尝试让 SpellChecker 支持多个字典：首先取消 dictionary 字段的 final 修饰，并在现有的拼写检查器中添加更改 dictionary 的方法。但是在并发环境中这种做法是笨拙的、容易出错的和不可行的。静态实用工具类和单例不适用于由底层资源参数化的类。</description>
    </item>
    <item>
      <title>周报-14｜如何学习一门编程语言</title>
      <link>https://blog.chensoul.cc/posts/2023/04/13/weekly_review_14/</link>
      <pubDate>Thu, 13 Apr 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/04/13/weekly_review_14/</guid>
      <description>前言 本篇是对 2023-04-03 到 2023-04-09 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这周还是和以前一样每天运动，并开始施行断食。因为是刚开始断食，有时候忍不住饥饿感而吃了一些东西。
本周工作主要是发布了一个版本，其余时间用来学习 Rust 和 Python，初学这两种语言，他们语法上有很多相似之处。如何学习一门编程语言？整理了一些步骤。尝试了一下用多种语言编写猜数游戏，这些语言包括 Rust、Ptyhon、Go、NodeJs、JavaScript、Kotlin、Bash，除了 Java。这是一个很有意思的事情，如果能够把这些语言都熟练掌握，那就更好了。
关于健身 完成了每天一万步的计划，并且共跑步 5 次，一共 18.6 公里，平均配速 7 分钟 4 9 秒，每天跳绳 500+。
关于记账 本周继续使用微信记账本记录每天支出。累计消费 835 元，明细如下：
4 月 3 日，周一：支出 59 元，餐饮
4 月 4 日，周二：支出 0 元，
4 月 5 日，周三：支出 228 元，超市购物
4 月 6 日，周四：支出 15 元，停车费
4 月 7 日，周五：支出 12 元
4 月 8 日，周六：支出 415 元，加油+餐饮
4 月 8 日，周日：支出 106 元，餐饮
如何学习一门编程语言 学习一门编程语言的基础语法对于初学者来说非常重要，以下是一些详细的步骤：
了解编程语言的基础概念：在学习编程语言之前，了解编程的基础概念是非常重要的。例如，变量、数据类型、条件语句、循环、函数等等。 寻找学习资源：学习编程语言的基础语法可以通过各种学习资源来实现，如书籍、教程、在线视频和交互式学习平台等。选择适合自己的学习资源是非常重要的。 学习变量和数据类型：在学习编程语言之前，学习变量和数据类型是必须的。了解如何定义变量、赋值和使用不同的数据类型，例如字符串、整数、浮点数、布尔值等等。 学习条件语句：条件语句是编程语言中的重要概念之一。例如，学习如何使用 if 语句和 else 语句，使程序在特定条件下执行不同的代码块。 学习循环：循环是编程语言中的另一个重要概念。例如，学习如何使用 while 循环和 for 循环，使程序在特定条件下重复执行代码块。 学习函数：函数是编程语言中的重要概念之一。学习如何定义和使用函数，以将代码结构化并重用。 练习编写代码：练习编写代码是学习编程语言基础语法的重要方式。编写小程序或项目，例如打印&amp;quot;Hello World&amp;quot;、计算器或猜数字游戏等。 学习调试和错误处理：学习如何调试代码和处理常见错误，例如语法错误、逻辑错误和运行时错误等。 总结一下，学习一门编程语言的步骤：
安装
Hello World
注释 格式化输出 变量和常量
数据类型
基本类型 运算 类型转换 复杂类型 表达式和语句</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记3：使用私有构造函数或枚举类型创建单例</title>
      <link>https://blog.chensoul.cc/posts/2023/04/11/enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type/</link>
      <pubDate>Tue, 11 Apr 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/04/11/enforce-the-singleton-property-with-a-private-constructor-or-an-enum-type/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。
介绍 单例是一个只实例化一次的类。单例通常表示无状态对象，比如函数或系统组件，它们在本质上是唯一的。将一个类设计为单例会使它的客户端测试时变得困难， 除非它实现了作为其类型的接口，否则无法用模拟实现来代替单例。
实现 实现单例有两种常见的方法。两者都基于保持构造函数私有和导出公共静态成员以提供对唯一实例的访问。
在第一种方法中，成员是一个 final 字段：
// Singleton with public final field public class Elvis { public static final Elvis INSTANCE = new Elvis(); private Elvis() { ... } public void leaveTheBuilding() { ... } } 私有构造函数只调用一次，用于初始化 public static final 修饰的 Elvis 类型字段 INSTANCE。不使用 public 或 protected 的构造函数保证了「独一无二」的空间：一旦初始化了 Elvis 类，就只会存在一个 Elvis 实例，不多也不少。客户端所做的任何事情都不能改变这一点，但有一点需要注意：拥有特殊权限的客户端可以借助 AccessibleObject.setAccessible 方法利用反射调用私有构造函数。
Constructor&amp;lt;?&amp;gt;[] constructors = Elvis.class.getDeclaredConstructors(); AccessibleObject.setAccessible(constructors, true); Arrays.stream(constructors).forEach(name -&amp;gt; { if (name.toString().contains(&amp;#34;Elvis&amp;#34;)) { Elvis instance = (Elvis) name.newInstance(); instance.leaveTheBuilding(); } }); 如果需要防范这种攻击，请修改构造函数，使其在请求创建第二个实例时抛出异常。
在实现单例的第二种方法中，公共成员是一种静态工厂方法：
// Singleton with static factory public class Elvis { private static final Elvis INSTANCE = new Elvis(); private Elvis() { .</description>
    </item>
    <item>
      <title>周报-13｜健身、记账、更新SSL证书、代码提交百度站点收录</title>
      <link>https://blog.chensoul.cc/posts/2023/04/04/weekly_review_13/</link>
      <pubDate>Tue, 04 Apr 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/04/04/weekly_review_13/</guid>
      <description>前言 本篇是对 2023-03-27 到 2023-04-02 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
本周是三月的最后一周，想到这，就想对随便对三月份做个总结。总结的方面，大概包括工作、生活、学习、健身、财务、娱乐几个方面。万事开头难，不知道能者多少，但是，相信不管写多少，都是有意义的。
先来说说最近一周做了什么。查看一下 gitlab 上标签提交记录，这周发布了一个版本，其余时间是进行测试，为下周发布做准备。在工作之余，开始学习《Effective Java 3》，并用 chatgpt 作为辅助工作，加深对技术的理解。另外，有了想学习 React、Rust、Go、Pyhon 的想法。想学的东西有点多，只能一步步来。争取每天利用下班之后的一个小时进行碎片化的学习，并且做好相关笔记，如有可能发布在这个博客上面。加油！
这周完成了每天一万步的计划，其中周末走了 3 万多步，并且还开始了跑步。
关于健身 完成了每天一万步的计划，并且共跑步 8 次，一共 26 公里，最高平均配速 7 分钟，还跳绳一次（550 下）。
跑步的目的不是快，而是乐此不疲。每天跑步 5 公里，每次消耗 300 卡路里的热量，大概需要 10 周才能瘦 10 斤。
光靠走路和跑步，想在 4 月完成瘦 10 斤的目标，应该是不可能的，打算辅助间歇性断食，看下效果。
跑步是一种有氧运动，可以促进身体代谢，消耗体内的脂肪和热量，达到减肥的效果。但是减肥的效果受到很多因素的影响，如个人的体重、身高、年龄、性别、饮食习惯、跑步强度、频率和时长等。
通常来说，减肥的基本原理是消耗更多的热量，从而达到体重减轻的效果。每天跑步 5 公里的运动量相对较小，一般在一个小时左右可以完成。如果每天坚持跑步，同时注意饮食控制，增加其他有氧运动和合理的休息，可能会在几个月内看到一定的减肥效果。
根据一般的减肥经验，每消耗 3500 卡路里的热量就可以减少一斤体重。假设每次跑步消耗 300 卡路里的热量，那么每天跑步 5 公里约消耗 300 ~ 400 卡路里的热量。如果每天坚持跑步，并且保持每天消耗 300 ~ 400 卡路里的热量，那么大约需要 10 周时间才能减少 10 斤体重。
关于记账 上周开始，在寻找一个记账的 APP，想开始记录每天的收入与支出。当然，更多的应该是支出了。现在，大环境不行，公司裁员不停，必须要开源节流，手上储备足够的现金。
找来找去，发现微信里没有有个『微信记账本』小程序就可以在微信里自动记账，也支持手动记账。于是，这周试了一下这个小程序，并有意的控制自己每天的输出。因为每天都有带饭，这样中饭就不用花钱了；早餐呢，是泡之前买的黑芝麻糊喝，省去了早餐费用。结果是，这周的支出只有 4.5 元。一次是早上买了一本豆浆，一次是早上跑步怕迟到就骑了一次动感单车。
正好三月结束了，查看了一下三月的支出报表。总的来说，三月支出的有点多，超乎了我的想象。如果每个月都是支出这么多，那以后的零花钱就不够用了。还是要勒紧裤腰带过日子啊。
更新 SSL 证书 安装 acme.sh
curl https://get.acme.sh | sh -s email=chensoul.eth@gmail.com 我的域名托管在 cloudflare，故需要获取 cloudflare API key，在 API 令牌 页面，点击查看 Global API Key。
保存 CF_Key 和 CF_Email：
export CF_Key=&amp;#34;cloudflare 中查看你的 key&amp;#34; export CF_Email=&amp;#34;chensoul.</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记1：静态工厂方法代替构造函数</title>
      <link>https://blog.chensoul.cc/posts/2023/04/03/static-factory-methods-instead-of-constructors/</link>
      <pubDate>Mon, 03 Apr 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/04/03/static-factory-methods-instead-of-constructors/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。
介绍 静态工厂方法是指在类中定义一个静态方法，用于创建该类的实例。示例：
public static Boolean valueOf(boolean b) { return b ? Boolean.TRUE : Boolean.FALSE; } 与构造函数不同的是，静态工厂方法可以有自己的名称，并且可以根据参数的不同返回不同的对象实例。
优点 这本书中提到了一些静态工厂方法的优点，包括：
静态工厂方法可以有意义的名称：与构造函数不同，静态工厂方法可以有自己的名称，这使得代码更具有可读性和可维护性。
例如，BigInteger 类提供了一个返回素数的静态工厂方法 BigInteger.probablePrime 。
静态工厂方法可以隐藏实现细节：静态工厂方法可以隐藏对象的创建和初始化过程，使客户端代码更加简洁和易于维护。
这是服务提供者框架的基础。
服务提供者框架中有三个基本组件：服务接口，代表要实现的服务；提供者注册 API，提供者使用它来注册实现，以及服务访问 API，客户端使用它来获取服务的实例。服务访问 API 允许客户端指定选择实现的标准。在没有这些条件的情况下，API 返回一个默认实现的实例，或者允许客户端循环使用所有可用的实现。服务访问 API 是灵活的静态工厂，它构成了服务提供者框架的基础。
服务提供者框架的第四个可选组件是服务提供者接口，它描述了产生服务接口实例的工厂对象。在没有服务提供者接口的情况下，必须以反射的方式实例化实现。
在 JDBC 中，Connection 扮演服务接口的角色。DriverManager.registerDriver 是提供者注册的 API，DriverManager.getConnection 是服务访问 API，Driver 是服务提供者接口。
服务提供者框架模式有许多变体。例如，服务访问 API 可以向客户端返回比提供者提供的更丰富的服务接口，这是桥接模式。依赖注入框架可以看作是强大的服务提供者。由于是 Java 6，该平台包括一个通用服务提供者框架 Java.util.ServiceLoader，所以你不需要，通常也不应该自己写。JDBC 不使用 ServiceLoader，因为前者比后者要早。
静态工厂方法可以返回缓存的对象：静态工厂方法可以返回缓存的对象，这避免了创建新对象的开销，提高了性能。
这种技术类似于享元模式。如果经常请求相同的对象，特别是在创建对象的代价很高时，它可以极大地提高性能。
举例 1：使用 ConcurrentHashMap
public class ThreadSafeCache { private static final Map&amp;lt;String, ThreadSafeCache&amp;gt; instances = new ConcurrentHashMap&amp;lt;&amp;gt;(); private ThreadSafeCache() {} public static ThreadSafeCache getInstance(String key) { return instances.computeIfAbsent(key, k -&amp;gt; new ThreadSafeCache()); } } 在上面的示例中，computeIfAbsent 方法用于计算缓存对象。如果 key 在 instances 中不存在，则使用 lambda 表达式 k -&amp;gt; new ThreadSafeCache() 创建一个新的 ThreadSafeCache 对象，并将该对象与 key 关联。如果 key 已经存在，则直接返回与之关联的 ThreadSafeCache 对象。</description>
    </item>
    <item>
      <title>《Effective Java 3》笔记2：使用构造器代替构造方法</title>
      <link>https://blog.chensoul.cc/posts/2023/04/03/builder-instead-of-constructors/</link>
      <pubDate>Mon, 03 Apr 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/04/03/builder-instead-of-constructors/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。
介绍 当一个类需要多个构造函数参数时，可以考虑使用构建器模式来创建对象。构建器模式是一种创建对象的设计模式，它可以通过链式调用方法的方式来设置对象的构造参数，并最终返回一个构造完整的对象。
优点 使用构建器模式的原因有以下几点：
避免构造函数参数过多的问题：当一个类需要多个构造函数参数时，构造函数的参数列表可能会变得很长，这会导致代码难以理解和维护。使用构建器模式可以将构造函数参数拆分成多个方法，从而使代码更加清晰易懂。 提高代码的可读性和可维护性：使用构建器模式可以使代码更加易懂和易维护，因为可以通过方法名来清晰地表达每个参数的含义。 提供更多的灵活性和可定制性：构建器模式可以提供更多的灵活性和可定制性，因为可以在构造对象时进行更多的逻辑处理和判断。例如，可以在构建器中添加验证逻辑，以确保参数的有效性。 支持多线程环境：构建器模式可以支持多线程环境，因为每个构建器都是独立的，不会受到其他线程的影响。 以下是一个例子：
public class NutritionFacts { private final int servingSize; private final int servings; private final int calories; private final int fat; private final int sodium; private final int carbohydrate; private NutritionFacts(Builder builder) { this.servingSize = builder.servingSize; this.servings = builder.servings; this.calories = builder.calories; this.fat = builder.fat; this.sodium = builder.sodium; this.carbohydrate = builder.carbohydrate; } //省略 get set public static class Builder { // Required parameters private final int servingSize; private final int servings; // Optional parameters - initialized to default values private int calories = 0; private int fat = 0; private int sodium = 0; private int carbohydrate = 0; public Builder(int servingSize, int servings) { this.</description>
    </item>
    <item>
      <title>周报-12｜车辆被堵、开车总结、Effective Java3笔记</title>
      <link>https://blog.chensoul.cc/posts/2023/03/28/weekly_review_12/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/03/28/weekly_review_12/</guid>
      <description>前言 本篇是对 2023-03-20 到 2023-03-26 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
上周去同济医院检查鼾症，检查结果是轻度症状，医生建议多运动减肥。这周每天走路 1 万步的目标已达成。
工作上发布了一个版本，另外两个迭代正在进行中，预计这周再发布一个版本。从飞书通讯录看到又有三个非技术类同事被裁，这周周会，部门领导说最近又有一个做商务的同事被优化了。
上周有一天早上，车子停在小区里面，被两个车子挡住了前后道路，联系不上车主，只好坐地铁上班。话说，自从开车上班之后，使用手机的频率明显降低了很多。
上周末阳光正好，于是回家去给已故的亲人扫墓。周六回老家，周日回老婆家。逝者已逝，活着的人要善待自己，好好吃饭，好好睡觉，好好工作，好好运动。
工作 Effective Java 3 笔记 请参考 《Effective Java 3》笔记：静态工厂方法代替构造函数。
Machine-Learning-With-Go B 站视频：「课程」使用 Go 做机器学习
源代码：Machine-Learning-With-Go
生活 车辆被堵 早上准备开车上班，发现车子前后道路都被车辆占道了。前面车辆占道，昨天晚上下班回来就发现了，也确认了这个车辆没有留挪车电话。当时就隐隐担忧今天早上会被挡住前后道路。没有想到，真的被挡了。后面的车辆留了挪车电话。六点半开始，我就给后面车的车主打电话发短信，对方一直没接电话，估计手机调静音还在睡觉吧。没有想到的是，截止到现在时间八点，他还没有给我回电话，这哥们睡得那是真香啊。
在道路被占用之后，我做了什么？除了给留了号码的那个车主打电话之外，我还想到交管 12123 APP 上面有一个一键挪车功能。于是，试了一下这个功能。原以为这个功能可以电话通知到对方挪车。实际情况却只是提交了一个工单而已，真是一个鸡肋的功能。用户使用这个功能，是希望及时联系到车主过来挪车，而不是提交一个工单之后，傻傻的等待。另外，这个功能也不能叫一键挪车，因为点击了这个功能之后，还要输入车牌号、上传照片。更好的体验应该是只用上传占用道路的车辆照片，由系统识别出车牌号，然后后台找到车主的手机号，生成一个临时号码并调用手机的拨号功能。
在道路被占用之后，我的心态是怎样的？刚开始想生气愤怒，后来想了想，事已至此，没有必要生气，生气只能影响自己一天的心情和好运。并尝试把这种对自己不利的一面转化为对自己有利的一面。原想六点半开车上班，道路被占之后，就可以体验一下七点多甚至八点多开车上班需要多长时间以及是否堵车。
如果是我把道路占用了，我该怎么做呢？首先，是车上留一个手机号码；其次，是第二天早上保证手机不关机并且没有静音。
如何避免再次出现这样的情况呢？一是通过电话或者便条的形式提醒车主要在车上留一个挪车电话并保证电话畅通，二是反馈给物业让物业来提醒小区里的车主不要随意占用车道。
开车总结 学到了新知识：
学会了如何调节前灯的高度。数字越大，灯光照射的越近。 开车需要改进的地方：
1、今天在菜场点火的时候，错把油门当刹车 2、准备加速超过左边货车的时候，货车打了右前灯，下意识地把方向盘向右打了一点 3、遇到红绿灯变黄灯时，刹车太急。想冲过去，但犹豫了。这样做太危险，不能存在侥幸心理。下次遇到这种情况，宁可提前刹车，等红灯过了，再向前行驶。 好物分享 虽然大部分有意思的内容会分享在 『ChenSoul Share』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。
一些文章 做了 6 年程序员，我学到的 10 条经验
JetBrains 常用插件
v2ray + warp-go 非全局使用 Cloudflare WARP 解锁 New Bing 等服务
如何创建属于自己的私人资料库与私人搜索引擎 _
如何高效地协作开发：一些 Google 的实践
Java 高性能缓存库 Caffeine
一些工具 优设导航官网：设计导航 2013 年上线至今，是优设网旗下最专业好用的设计师导航网站！设计导航为设计师提供 UI 设计、设计教程、素材下载、高清图库、配色方案、App 设计、网页设计等设计网站导航指引。设计导航每周更新，设计风向标就看优设网！
Zeabur 属于国人的免费托管平台
Neovim 使用体验
Github Copilot 免费平替 - Codeium
Chat with documents
Codeium：一款免费的类 Github Copilot 的 AI 代码辅助产品，可以便捷的和 AI 进行结对编程。初步使用下来和主流的 IDE 的集成很好，感兴趣的朋友可以先到浏览器里在线尝试一番。</description>
    </item>
    <item>
      <title>周报-11｜从语雀迁移到Obsidian</title>
      <link>https://blog.chensoul.cc/posts/2023/03/20/weekly_review_11/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/03/20/weekly_review_11/</guid>
      <description>前言 图片：涨渡湖湿地水上森林公园
本篇是对 2023-03-13 到 2023-03-19 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这周的工作主要是重构、优化系统，工作节奏比之前轻缓了很多。这周也开始了开车上下班，除去周五去医院做检查，一共开了 4 天车。从汉口到光谷，一共 29 公里，如果早上 6:30 出发，就只需要 50 分钟；如果 6:45 出发，竟然需要两个小时，真是无语了。无奈之下，只能每天早点出门早点到公司，然后，打完卡之后，在公司楼下走路。
这周开始心里默默定了一个 flag，就是每天走路 10000 步。看了一下微信运动，基本上达成了，除了周五晚上因为加班，而少走了 64 步。
从语雀迁移到 Obsidian 上周提到开始使用格志 APP 来写日志，使用了一段时间之后，发现了一些缺点：
部分功能收费 导出的 markdown 不支持图片显示 不支持本地存储 于是，放弃了使用格志 APP，继而在使用了一段时间 Obsidian 之后，改为使用 Obsidian 来写日志和周报。
为了不给自己太大压力，日报每天复盘内容包括以下几方面：
今日待办
学习
工作
生活
健身
导出语雀文档为 markdown 参考 yuque/yuque-exporter 文档，下载 yuque-exporter 之后进行导出操作，发现以下问题：
该项目需要使用的 nodejs 版本为 18.0.4 nodejs 使用正确的版本还是导出失败 于是，改为使用源码编译和运行导出。
1、先下载代码：
git clone https://github.com/yuque/yuque-exporter.git 2、修改 main.ts 中需要导出的语雀知识库地址为自己的仓库地址：
// Determining if an ESM module is main then run the code if (import.meta.url.startsWith(&amp;#34;file:&amp;#34;)) { const modulePath = fileURLToPath(import.meta.url); if (process.argv[1] === modulePath) { const urlPaths = [&amp;#34;chensoul/rose&amp;#34;, &amp;#34;chensoul/growup&amp;#34;, &amp;#34;chensoul/tech&amp;#34;]; await start({ urlPaths }); } } 3、参考 文档 申请语雀 TOKEN。</description>
    </item>
    <item>
      <title>周报-10｜通过Cloudflare Tunnel访问服务、Vercel部署Cusdis和Umami</title>
      <link>https://blog.chensoul.cc/posts/2023/03/13/weekly_review_10/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/03/13/weekly_review_10/</guid>
      <description>前言 本篇是对 2023-03-06 到 2023-03-12 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这周发现 VPS 上 某些使用 docker 部署的服务（cusdis、umami、uptime、n8n、rsshub、memos）国内用户无法访问了，于是就折腾了一下使用 Cloudflare Tunnel 来代理这些服务。配置成功之后，又发现本地如果开启 VPN，Cloudflare Tunnel 代理的域名还是无法访问，于是放弃了使用 Cloudflare Tunnel，改为将这些国内无法访问的服务部署到免费的 VPS 服务器上，比如：Railway、Vercel。
这周工作忙完之后，就开始着手通知系统的重构改造服务，想着 chatgpt 这么火，于是就试试让它来写代码。在不断地修改需求的情况下，chatgpt 写出来的代码稍加调整逐渐可以使用了。
周六从汉口开车去白沙洲湖北财税职业学院，全程 20 公里，回来的时候不小心把路边的面包车擦碰了一下。于是一脸懵的经历了一次保险定损维修。
周六开始使用 格志 APP 写日志，选择它来记录日志的原因是它支持批量导出 mardkown、pdf、图片等。唯一有个小遗憾的是，这个应用没有图床，导出的 markdown 文件里面图片的链接不是 http 协议。
周日去新荣龙湖天耀天街售房部看了一下房子。107 平三室两厅两卫，单价 2 万 5 带精装修，公积金贷款 90 万，商业贷款 30 年，每个月房贷 6000。目前来说，买不起这里的房子，但是，作为一个买房目标还是可以的，加油！
开车总结 最近刷视频，总结的一些开车经验如下：
提前预判，前面车子刹车，不管是正前方，还是左右前方，这时候也要刹车
前面有大货车，不要从右边超车
会车时，看路宽
不要连续变道，变道时既要看后视镜，又要看窗边
红灯路口右转时，要看地面或者路边是否有禁止右转标识
通过 Cloudflare Tunnel 访问服务 以下内容参考 初探 Cloudflare 零信任 - 通过 Cloudflare Tunnel 访问服务。
1、创建 Cloudflare Tunnel 登录 Cloudflare Zero Trust 控制台，选择左侧导航栏的 Access 菜单，进入 Tunnels 配置，点击 Create a tunnel 创建一个 Tunnel，输入 Tunnel 隧道名称
选择服务器的操作系统和平台架构：
可以看到安装命令：
复制左边命令粘贴到 SSH 会话里安装 Cloudflared（注意保护 Refresh Token 不要泄漏）
brew install cloudflare/cloudflare/cloudflared &amp;amp;&amp;amp; sudo cloudflared service install eyJhIjoiMmUxOTgwYTBlZjQzZjU3YjkyMGVhMjhjZGY5ZDM4ZDEiLCJ0IjoiYzU1ZTU3MmUtMTEyMS00OWJkLTgzMTgtNjc3NDIyYWMwMjU0IiwicyI6Ik1qZGtZakkyTldFdE5XVTRNUzAwTXpWaExXRXlNRFl0T0RobE5EbGpObVZpWmpJMSJ9 2、删除 Cloudflare DNS 的 A 记录解析 我的域名托管在 Cloudflare 上，所以需要将原来的域名解析记录删除，主要涉及以下两个需要被国内用户访问的域名（其余域名是我个人使用，所以只需要我开启 VPN 访问即可。）：</description>
    </item>
    <item>
      <title>周报-9｜开车总结、博客该写什么、Web3批量空投</title>
      <link>https://blog.chensoul.cc/posts/2023/03/07/weekly_review_9/</link>
      <pubDate>Tue, 07 Mar 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/03/07/weekly_review_9/</guid>
      <description>前言 本篇是对 2023-02-27 到 2023-03-05 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这周的主要工作是版本测试和项目上线，在大家的共同努力下，最后是成功上线。
由于公司最近在裁员，留下来的都开始卷起来，每天晚上 8 点之后下班，这样平均一天的工作时间才有 11 小时。据说，旁边组的同事平均每天都是 12 个小时工作时间。裁了三位同事之后，我们软件组还有 8 人，算法组有 7 人，产品组有 6 人，终端组有 4 人。距集团公司六月上市还有两个月，裁员估计还会继续，同志们还需努力加班，争取被裁的不是自己。
这周还是没有开车，每天坐地铁上下班，刷刷 rss 看看 b 站视频，了解一些行业最新动态，同时也看看同样在写博客的那些独立开发者每周都在做什么，也学习一些新技术或者新技能。
这周接触了 web3 空投，花了几个小时使用自动加手动的方式刷了 120 多个账号。自动的方式，就是用 nodejs 代码在 bsc 网络批量创建账号并保存为 csv 文件；其次，通过 onekey web 上的批量转账功能，给每个账户转了 0.00125bnb。手动操作的部分就是，一个个的将账号私钥导入狐狸钱包，然后，用 lifeform cartoon 连接钱包账户，mint 成功之后，分享链接，再继续连接狐狸的下一个账号，重复上面操作。
因为太耗时间，所以只刷了 120 个账号。趁工作不忙的时候，用 chatgpt 搜索一下如何将上面的操作全部自动化。
周末两天，继续练车，从汉口到阳逻，再到新洲，最后去新洲的将军山爬山、去道观河看风景。算下来，最近这三个周末六天时间，我一共开了 800 多公里了。目前，暂时没有收到违规通知，但还是存在很多不足的地方。
开车总结 这周开车，发现存在以下问题：
1、停车还是会忘记熄火拔钥匙。 2、红绿灯口，停在大货车后面，并靠得近，前方视线受阻。经过红绿灯时，感觉像是闯了红灯。 3、超车时候，没有加速。 4、在山路行驶，入弯和出弯都会减速。 5、判断车距的经验不足。表现在行驶过程中、侧方停车、倒车入库。 针对以上问题，晚上刷了一些视频，做了一些笔记，希望能够帮助自己改正上面这些问题。
1、目光看远。入弯提前收油，脚备刹车。如果弯道过急，就带点刹车，如果车速你可以控制，直接收油过弯；出弯加油，眼睛看出弯口。身体跟随方向盘靠。这样，车速不降，可以控制车速。如果以 80 码速度过弯，且这个车还在车道内，这个车的速度你就控制住了。但凡有点越线，说明车速过快，你就要降低速度。
2、靠右行驶。会车时，主动靠右。转弯时，发现对面有来车，鸣笛示意。
3、路口远道的原则，跟小车不跟大车。如果跟着大车，留一个车位空间，让大车先走，确认绿灯再走。
4、红绿灯路口，提前减速，提醒后面车减速，不要急刹车，防止后面车追尾。特别是在绿灯闪的时候，不要没有减速，突然停车。否则后面车会以为你要加速冲过去，他也加速，这样，他就会追尾你。
博客该写什么 看到一篇博客 What to blog about，里面聊到了博客该写什么。一时兴起，想翻译成中文。于是，分别使用了 chrome 沉浸式翻译插件和 chatgpt 来翻译这篇文章，得到结果如下：
1、使用 chrome 沉浸式翻译插件 翻译这篇文章：
总结来说，博客可以写两部分内容：
今天学到的东西 正在做的项目 2、使用 chatgpt 翻译这篇文章：
请 chatgpt 翻译这篇文章 https://simonwillison.net/2022/Nov/6/what-to-blog-about/ 为中文，得到的结果如下：
标题：该写什么博客？
随着我写了一篇新的博客文章，我想分享一下我最近学到的关于写博客的一些事情。
一旦你开始写博客，你就必须保持一定的频率和持续的内容更新。这不仅是为了吸引和保持读者，也是为了让自己不断成长和发展。对于我来说，博客是我最有价值的自我表达形式之一，因为它迫使我去思考和组织我的想法，而这些想法可能会被淹没在日常生活的喧嚣中。
但是，选择博客内容可以很困难，特别是当你有多个感兴趣的话题和项目。以下是一些我最近学到的有关选择博客主题的技巧：
每周至少写一篇文章 尽管这可能听起来像一个艰巨的任务，但保持每周至少写一篇文章的频率可以帮助你保持写作的习惯和进展。这也有助于避免长时间的空白期，这可能会使你失去写作的动力和读者的兴趣。</description>
    </item>
    <item>
      <title>周报-8｜内存泄漏、公司裁员、练车</title>
      <link>https://blog.chensoul.cc/posts/2023/02/27/weekly_review_8/</link>
      <pubDate>Mon, 27 Feb 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/02/27/weekly_review_8/</guid>
      <description>前言 本篇是对 2023-02-20 到 2023-02-26 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这篇周报又是在地铁上完成编写的。回顾这一周的工作，还是项目测试、修复 bug 和准备上线发布。平静的工作节奏因为突如其来的裁员消息而变得内卷起来，大家下班的时间都纷纷往后移到了 20 点左右。周末的时候，还是练车，从汉口开车到新洲。刚开始有点不敢，后来还是鼓起勇气，平安的到达。
工作 内存泄漏 这周线上环境，出现了告警，提示 jvm 出现了 full gc。于是赶紧 dump 内存进行分析查找原因。顺便整理了内存相关的知识。
什么是内存泄漏？
这个问题直接问 chatgpt：
内存泄漏（Memory Leak）是指在程序中动态分配的内存由于某些原因程序未能释放或无法释放，导致系统内存的实际可用空间不断减少的现象。内存泄漏的发生会导致程序占用的内存越来越多，最终导致程序崩溃或系统变慢。
在 Java 中，程序员通常使用 new 运算符在堆上分配内存，这些内存不再使用时必须释放，否则就会出现内存泄漏。下面是一些常见的 Java 内存泄漏的情况：
对象持有过多的引用 当一个对象持有其他对象的引用时，这些对象就不能被垃圾收集器回收，导致内存泄漏。比如，一个静态集合（如 Map、List）持有了大量对象的引用，但是这些对象已经不再需要了，却因为集合中仍然持有这些对象的引用，导致这些对象无法被回收，造成内存泄漏。
长时间持有对象锁 在 Java 中，如果一个线程获取了一个对象的锁，但是在释放锁之前发生了异常，那么这个锁就不会被释放，从而导致内存泄漏。这种情况特别容易发生在 synchronized 块中。
不正确的缓存使用 如果程序员不正确地使用缓存，就会导致内存泄漏。比如，如果使用一个静态 Map 来缓存对象，但是不从 Map 中删除对象，那么这些对象就会一直存在于内存中，造成内存泄漏。
大量创建临时对象 如果程序频繁地创建临时对象，而这些对象又没有被及时清除，就会导致内存泄漏。比如，在循环中创建大量的字符串对象，但是没有及时清除，就会导致内存泄漏。
为了避免内存泄漏，Java 程序员可以使用一些技术来优化程序，比如使用缓存池、避免使用不必要的静态变量、使用 finalize()方法释放资源等等。
如何排查内存泄漏？
内存分析工具：内存分析工具可以帮助您找到哪些对象占用了大量的内存。一些常用的内存分析工具包括：Eclipse MAT、VisualVM 和 YourKit。这些工具可以帮助您分析内存快照、查找内存泄漏并确定导致内存泄漏的代码位置。
堆转储文件：堆转储文件是一个包含了 JVM 堆中所有对象的快照。您可以使用以下命令生成一个堆转储文件：jmap -dump:format=b,file=heap.bin ，其中是您的 Java 应用程序的进程 ID。然后，您可以使用内存分析工具来分析该文件。
代码审查：在编写代码时，您可以使用一些技巧来避免内存泄漏。例如，您应该确保正确地关闭流和数据库连接，避免在循环中创建对象，以及使用软引用或弱引用来存储缓存数据等。通过仔细审查代码并识别可能导致内存泄漏的部分，可以避免这些问题在运行时发生。
监视工具：JVM 提供了一些监视工具，例如 jstat 和 jconsole，可以用于监视 JVM 的内存使用情况。通过监视这些指标，您可以识别是否存在内存泄漏的迹象。
代码注入：在您的应用程序中，您可以注入一些代码，例如使用 JMX、AOP 等，以便您可以实时监视内存使用情况，并记录任何内存泄漏迹象。
参考文章
一次完整的 JVM 堆外内存泄漏故障排查记录
深入探索 Java 8 Lambda 表达式
java lambda 表达式内存泄露_浅谈 Java 内存泄露
裁员 去年公司就在裁员，陆陆续续裁了几次，每次都是裁两三个，动作都不大，但是很高效。因为部门人数就在五十左右，所以谁没来上班，都能很快察觉。
公司要在六月份上市，上市之前要使财报好看，就要开源节流、降本增效。节约成本的一个方式就是裁员，据说这次裁员动作比以前都大都迅速，今天提出裁员人数，明天就要给出名单，月底就要走人。
现在还只是二月份，离六月还有三个月。谁也不知道，后面还会有什么更大的裁员动作。说不定哪天就空出一个工位，说不定哪天领导就换了人，说不定哪天部门就被拆散了。
互联网公司最大的变化就是变化。之前在阿里工作，公司的价值观里有一条就是拥抱变化。
拥抱变化的最好方式就是积极面对，主动加班，提高工作效率，增加工作产出。
生活 练车 这是买车之后的第二周，还是没有开车去上班。一是因为开车不过熟练，胆子小，不敢开得太快；二是公司楼下的停车位还没有办好。</description>
    </item>
    <item>
      <title>周报-7｜练车、博客优化、注册ChatGPT账号</title>
      <link>https://blog.chensoul.cc/posts/2023/02/21/weekly_review_7/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/02/21/weekly_review_7/</guid>
      <description>前言 本篇是对 2023-02-13 到 2023-02-19 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
练车 这周末开始练车，周六是第一次开自己的车，简单试驾了一样；周日则开了一百多公里，具体行程是从阳逻到新洲，从新洲单汉口，从汉口到光谷，从光谷回汉口。
这途中走了江北快速公路、二环、二七长江大桥、东湖隧道，从白天开到晚上夜行，经历过堵车，路上看到车祸后的事故现场。
一天下来，总共开车有五个多小时，感觉开车好累。作为新手，开车的过程中要全神贯注，铭记开车最重要的是慢这一原则，速度不敢过快。
回顾这一天的练车过程，发现自己存在以下问题：
对汽车不熟悉，不清楚车内每个按钮有什么作用。
不敢开的太快，油门踩到六十公里之后，就下意识地松油门。整个行驶过程中，平均车速大概在二十多公里每小时。
对交规不熟悉，第一次用高德地图，不知道什么时候改该变道、什么时候该走中间道路。要变道时候，不够果敢，打了灯光之后，没有快速变道，甚至还降速，等后面车子，而后面车子也在等我。
对车距不敏感。行驶过程中，和左右车辆相隔距离多近，没有一个直观的感受。观察后视镜，后面车距多远，有时候也判断不准，导致自己变道犹豫不决，险些擦碰。
变道、转弯，有时候忘记打灯。转弯时候，方向盘动得太早，没有等车过斑马线再打方向盘。左转弯时候，没有转大弯，导致车子有一次擦到了左边的石墩子，幸好不是很严重。
倒车和侧方停车不够熟练。
对上班路线不熟悉，不知道怎么进入公司楼下停车场。
基于以上表现，接下来一周还是坐地铁上班。目前来说还是更喜欢坐地铁上班，可以看视频听音频，可以查看 RSS 订阅文章，可以写周报，可以闭目养神。
老婆给我买的实习期贴牌到了，后面司机看到这么可爱的牌子，估计以为是个妹子在开车吧，应该会喇叭下留情了吧 😄。
接下来的周末，还要继续练车，和车子培养感情，从内到外熟悉车子，熟悉上班路线和交通规则，提高行驶速度。加油 💪🏻！
博客优化 这周重新对博客进行了优化，主要包括以下几个方面：
1、优化页面加载速度 每次打开博客首页，感觉页面加载有点慢，故想加快博客打开速度，第一个想到的是减少博客加载资源的次数，也就是去掉一些飞必须的 css 和 javascript 引用；其次，是对 css 进行压缩。
去掉对 font-awesome css 的引用。这个对博客来说可有可无，所以直接去掉。 去掉对 jquery、bootstrap js 的引用。同样也不是必须的，自定义的 javascript 直接使用原生的操作就行。 移除未使用的 css。想参考这篇文章 CleanCSS - 移除未使用的 CSS 代码，对 css 进行瘦身，无奈文章中的服务器出现故障，无法访问服务。故，暂时搁浅。 2、修改网站字体 参考这篇文章 字体漫谈-网站字体最佳实践 引入 open-sans 字体：
&amp;lt;link rel=&amp;#34;preload&amp;#34; as=&amp;#34;font&amp;#34; type=&amp;#34;font/woff2&amp;#34; href=&amp;#34;/css/font/open-sans.css&amp;#34; /&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;/css/font/open-sans.css&amp;#34; media=&amp;#34;print&amp;#34; onload=&amp;#34;this.media=&amp;#39;all&amp;#39;&amp;#34; /&amp;gt; 并修改网站 font-family 如下：
body { font-family: Open Sans, system-ui, -apple-system, Arial, sans-serif; word-break: break-word; } 3、修改关于页面内容 参考这篇文章 GitHub Profile README Generator，对 GitHub 首页 进行改造。
4、dns 解析迁移到 cloudflare 将 dns 解析从 AWS 迁移到 cloudflare，并开启 CDN 缓存。</description>
    </item>
    <item>
      <title>周报-6｜买车和选号、粉色理论</title>
      <link>https://blog.chensoul.cc/posts/2023/02/13/weekly_review_6/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/02/13/weekly_review_6/</guid>
      <description>前言 本篇是对 2023-02-06 到 2023-02-12 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这篇周报又是在坐地铁的时候完成编写的，一边坐地铁，一边回顾上一周发生的事情，一边复盘和总结。坐地铁大概有一个半小时，从家到公司的一段通勤路程。现在还没有买车，所以都是坐地铁上下班。
说到车，周六去二手市场买了一辆 17 年出产的上汽宝来，今天周一去过了户并且选了一个幸运的车牌号，尾号是 8688，寓意着要发发发！
上个月报名的内观训练营，这周也结业了，训练营运营人员还给我发了一个结业证书。
这是写周报的第六周，观察了一下博客访问量，从开始统计起到这周不到一个月的时间，访问量突破了 1000。
工作 这周的工作主要内容是在项目里实现用户可以切换租户和租户数据拆分。
第一个功能的需求是一个账号（有姓名、手机号、密码等属性）可以访问多个租户，在每个租户里有自己的数据权限和角色。第二个功能，主要是使用 SQL 进行数据加工。
总体上来说，这周工作处于充实忙碌的情况。而且，上下班的通勤时间，也在 B 站上看视频。这周主要看的是小马哥的 Java 训练营的公开视频。小马哥的 B 站视频，是我最近刷的比较多的一个视频，另外一个是 coder1v5 的视频，他们分享的视频都是关于 Java 的，里面有非常多的干货，而且还提供了源代码。如果你也是一名 Java 开发工程师，推荐你也关注他们。
生活 买车和选号 去年 11 月 16 日，拿到了驾照，直到现在才买了一辆车。过年前，因为疫情加上工作忙，一直没有抽出时间去了解车子行情。可能是对于车子的需求感没有那么强的原因，才导致考驾照、买车不积极。结婚之前，住在公司旁边，走路五分钟上下班，根本就用不上车。结婚之后，从光谷搬到汉口，每天上下班在路上通勤时间都有三个小时了。每天早上七点就要起来做饭（带饭到公司，中午微波炉热着吃，每天可以省下一餐伙食费），然后去赶地铁。疫情放开之前，地铁上人不多，每次都有位置坐。疫情放开之后，地铁里都是人，不是每次都有位置坐，经常要站着。站着的时候，有时候就内观冥想，想想最近有没有做得不对的地方，想想工作下一步该怎么计划；有时候就看 B 站关于 Java 的视频。也算是充分利用了这段通勤时间。
为了上下班通勤更方便，才计划买车的，也不知道开车能够缩短多少通勤时间，也希望这节约下来的时间，可以用在读书和健身上。另外一方面，买车了之后，回家看望父母会更方便。这就是买车的原因。
考虑到刚拿驾照、以后还要买房，这次就只买了一个二手车。原计划只买个三万左右的车，最后还是超出了预算。
去二手市场买车的时候，是在周六，周末过不了户，所以这周一又过来办理过户和选车牌号。过户的过程还是很快的，全部交给二手市场的人代办。至于，选车牌号，之前了解了一下，车牌号尽量选尾号都是数字的，这样好记；不要带数字 4，不吉利；选号有时间限制，超过了时间未选，会默认选第一个。点击 “选号开始” 按钮之前，心里还有点紧张。当看到第一屏的号码时候，很快地扫描了一遍，发现了一个尾号为 8688 的号码。于是，就跟一同过来买车的姐夫说，这个号码怎么样。姐夫激动地说这个号码好，就选这个。真的没有想到今天运气这么好，选到了这么好的一个号码。激动得想跟朋友圈里的好友分享。之前买车的时候，付完预付款，就有分享买车的喜悦的冲动。这时候，老婆在旁边跟我说，要低调，不要和身边的亲戚说。所以，就一直没有告诉亲人和身边的朋友。没想到，这次选了一个幸运的车牌号，还是没忍住发了一个部分好友不可见的朋友圈。
这说明自己定力还是不够，分享欲太强，不够谦虚和低调。满招损，谦受益。只是买了一个车和选到一个幸运的车牌号而已，不能高兴太早，后面还要花时间练车上路、开车还要慢和稳，不能出交通事故，铭记 “新手上路，多多指教”。
学英语，最重要的是练习。开车，最重要的是慢。
学习 内观冥想 一月份报名内观冥想训练营的初衷是想学习内观冥想的方法，后来因为每天早上要赶地铁以及觉得课程内容和自己期望的有些差距，就没有坚持听课和打卡。
虽然，没有听完所有课程，但是从开始几节课程，初步体会和感受了一下什么是内观冥想，也认识了一些内观冥想的朋友。也没有想到，最后还收到了一个结业证书。
Python 最近有个机器学习的项目，用到了 Python，所以需要学习 Python 并掌握相关的业务知识。这一个机会，同时也是一个挑战。
娱乐 -《粉色理论》。这部泰国双女主的同性电视剧，豆瓣上评分 9.2，在这周完结了。
分享 HashedWheelTimer：是来自于 Netty 的工具类，在 netty-common 包中。它用于实现延时任务。
Killbill common queue：一个基于 DB 实现的分布式的队列，它上层还包装了 EventBus 事件总线机制。
以上。</description>
    </item>
    <item>
      <title>周报-5｜项目事故、牙疼、Damus</title>
      <link>https://blog.chensoul.cc/posts/2023/02/07/weekly_review_5/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/02/07/weekly_review_5/</guid>
      <description>前言 本篇是对 2023-01-30 到 2023-02-05 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这周是过年后的第一个工作周，被国家安排了连上七天班，算是体会了一次 “过年七天乐，上班七天累” 的过山车。七天的工作主要是测试并发布项目，每天忙的焦头乱额，生怕项目出了问题。有句话说，怕什么来什么。没想到周六还是报出了一个故障，还在睡觉中的我被一个电话吵醒，接着忙着找问题和解决方法，一天的时间就都花在这上面。万幸的是事故影响不大，发布了一个小版本进行修复。事故原因，还是值得警惕。
工作总结 项目事故 这周主要是自定义拦截器和 ErrorCoder 来记录 feign 请求的调用次数，包括调用成功的和失败的。另外，如果调用失败，设置了重试两次。这里重试的前提是 http 请求出现 4xx 或者 5xx 状态码错误，如果是状态码为 200 但返回了自定义业务异常，是不会触发重试机制的。这一点没有注意到，而发布前，我想当然的把一个接口的手动重试代码删掉了，导致调用该接口出现业务异常之后没有进行重试，影响了业务方的使用。
出现该问题的原因，一是没想出重试的前提条件，没有写代码注释；二是没有写单元测试；三是没有交叉代码审核。此外，还有一点，越是项目发布关键时期，越要注意休息，保持大脑足够清晰和敏捷。
AOP 日志记录 参考 【每天进步一点点（二）-哔哩哔哩】 在项目里添加代码对 controller 方法请求参数、返回结果、执行时间的记录。视频中讲的很清楚，这里就不贴代码了。
该方法，可以对 controller 的所有方法（不管是 get 还是 post 或其他方法），都记录日志。如果想排除 get 方法（一个项目里查询比修改请求大很多），需要添加代码进行过滤。
另外，打印请求参数时，实际是记录的请求参数的 toString 方法，如果请求参数里有些对象没有定义 toString 方法，则记录的是对象的引用地址。再者，如果对象里有些敏感字段不想输出到日志里，则需要重写 toString 方法。一个可选的方法是，改为打印请求参数的 json 序列化值，这样做又会带来序列化开销。
如果 controller 层代码被代理了多次，则请求参数和返回结果会打印多次。
生活 牙疼 一个月黑风高的晚上，加班回来的程序员偷偷喝了三杯牛奶，结果第二天牙齿开始疼了，特别是吃到冷热酸甜的东西，都会短暂的巨疼。去牙科诊所看了，医生说要做根管治疗，费用 800，可以报销 420，做完以后，牙套价格另算，有一千到几千的价格不等。刚不久还刷到视频说，有两个省要规范治疗牙齿费用。
忍着疼痛上了一周班，结果不仅牙痛，吃饭没胃口，还影响了上班，真是得不偿失。
周六晚上，在牙齿疼痛的地方，插了一点老爸给我的药水。睡觉时，先是畏冷，再就是牙疼的地方发炎，肚子发烧，烧到了不知道多少度，反正我是没有拿温度计去测量。烧的我大脑都是糊的，一晚上没睡好，中途还醒了几次。好在第二天，就好了一些，吃东西也没那么疼了。看来，专家顺发烧是体内细菌在和病毒做斗争，应该是对的啰。
经历了这一晚上，感觉像是体验了一次阳的过程。之前新冠阳了，我是轻症状，没有发烧。这次牙疼发烧，算是把之前新冠没有吃过的苦找补回来，人生也算是多了一种体验。
娱乐 -《狂飙》。最近很火，也刚好完结了。我没有去看，没有时间去追，就看了前面几集。
-《粉红理论》。老婆在追的一部泰剧，她是在微博看些别人剪辑的几分钟的片段。叫我也去微博看看，我说我不用微博，我翻墙去找网站观看。老婆眼睛一亮，说那不是可以看到无删减版本，那个兴奋劲哟！很快，我找到了网站，发现已经上线了 11 集，而且每集都有 60 多分钟长（老婆看的都是阉割版～ 😯）。
学习 最近 Damus 很火，我也去注册了一个账号，为此还重新下载了狐狸 🦊 钱包。随即，干脆也注册了 Mastodon 账号和 Crossbell 账号。
我的 Damus 账号 npub1dav96pmjv58n60eqz7ctmhvsd7t2yljvzevf6uckmchz6zamx2wq0k7dm5
我的 Mastodon 账号 @chensoul@mas.to
我的 crossbell 账号 chensoul@crossbell
好物分享 Mac 删除原生英文 ABC 以上。</description>
    </item>
    <item>
      <title>周报-4｜过年、向上管理、工作周总结</title>
      <link>https://blog.chensoul.cc/posts/2023/01/30/weekly_review_4/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/01/30/weekly_review_4/</guid>
      <description>前言 本篇是对 2023-01-23 到 2023-01-29 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
过年 这周处于过年吃喝拜年模式，除了腊月二十九和正月初一，其他时间都是和老婆在路上。因为是结婚第一个新年，需要带着老婆去各个亲戚家拜年。因为是第一次在新房过年，就把老爸从农村接过来一起过年。因为年前没有来得及买车，去哪里都不方便，都要需要滴滴打车。为此，打车花了不少钱，当然，给红包也给了不少钱。趁初一不用拜年的缝隙时间，带老婆和老爸去看了两场电影《无名》和《交换人生》。老爸很少去看电影院看电影，听到要去看电影，像个小孩似的，饭还吃完，就跑去电梯门口等电梯。这两场电影，看的我瞌睡来了，倒是初二晚上看《满江红》睡意全无。
总结下来，这个年过的不轻松，身体忙碌，心里幸福 🥰。
向上管理 年前，部门领导找我谈 2022 年绩效结果时候，提到我可以 “向上管理” 他。最近从 杜屹东 的博客 这一年我在阿里学到的 也看到了他在阿里工作一年后悟到对向上管理的理解。
及时和老板表达想法 让老板知道你在忙什么 主动帮老板做一些脏活累活 前两条是老板知道你的想法，后面一条是帮老板解决问题。此外，还可以帮老板规避风险。
本周工作 这是年后的第一周，主要是处理年前没有完成的项目迭代。
Feign 集成 Micometer OpenFeign 官方提供了 feign-micrometer 来支持 feign 集成 micrometer。
GitHub github = Feign.builder() .addCapability(new MicrometerCapability()) .target(GitHub.class, &amp;#34;https://api.github.com&amp;#34;); 其本质是对 feign 拦截器、client、encoder、decoder 进行封装，测试过程中在没有获取到指标。故，改为使用 z 自定义拦截器和 ErrorCoder 来记录请求次数和失败次数。
@Bean public GitHub gihhub(MetricsInterceptor metricsInterceptor){ GitHub github = Feign.builder() .requestInterceptor(metricsInterceptor) .errorDecoder(new MetricsErrorDecoder()) .target(GitHub.class, &amp;#34;https://api.github.com&amp;#34;); } MetricsInterceptor 代码如下：
public class MetricsInterceptor implements RequestInterceptor, MeterBinder { private static MeterRegistry meterRegistry; public static final String FEIGN_REQUEST = &amp;#34;feign.requests&amp;#34;; public static final String FEIGN_REQUEST_ERROR = &amp;#34;feign.requests.error&amp;#34;; public MetricsInterceptor() { } public void apply(RequestTemplate template) { Micrometers.</description>
    </item>
    <item>
      <title>周报-3｜博客定制、VPS部署服务</title>
      <link>https://blog.chensoul.cc/posts/2023/01/25/weekly_review_3/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/01/25/weekly_review_3/</guid>
      <description>前言 本篇是对 2023-01-16 到 2023-01-22 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这是过年前的最后一周，上了三天班，请了两天假回去准备年货、去亲戚家吃年饭。趁放假之前，继续对博客做了一些定制，也在我的 VPS 上通过 Docker 部署了一些服务。
定制博客 基于 pseudoyu 的博客和主题定制博客，发现并修复了 bug，还做了一些改进，并在他的 github 提交 issue 和 merge request。
接着在他博客主页留言，几个来回下来，收获不少。一是解决了我提出的问题，二是给我分享了一个搬瓦工的 the plan 优惠码。这时候去看了下我原来的 vps 刚好还有一天要到期，就立即花了 92 美元（原价是 99 美元）购买了一台 2G 内存托管在香港的服务器。
缘分就是这么奇妙，如果我不主动和这个博主联系，就不会知道搬瓦工还有这个优惠，就不会帮助我解决了博客定制过程中遇到的疑惑。
当你想要什的时候，先给出去，你就会收获更。有舍才有得。
博客个人介绍 我的博客源文件托管在 gihub，在这个仓库可以看到我的一些个人介绍。
vps 上服务部署 购买了新的 VPS 之后，就将原来的 VPS 导出镜像，然后导入到新的 VPS，最后再安装了以下服务：
flowerss-bot：一个支持应用内阅读的 Telegram RSS Bot。 n8n：一款开源的自动工作流服务，类似 IFTTT、Zapier，可以互联互通包括 GitHub、Dropbox、Google、NextCLoud、RSS、Slack、Telegram 在内的几十款在线服务。 memos：一个开源且免费的自托管知识库 cusdis：一个界面清爽、注重隐私的轻量级 (~5kb gzip) 评论系统，可以很方便地与 React、Vue 或其他博客系统结合，并且还提供了一个后台来管理所有的评论 umami：一个简单易用、自托管的开源网站访问流量统计分析工具 pgsql uptime-kuma：一个开源免费的监控工具 rsshub：一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源 通过 Docker 部署这些服务非常简单，主要是需要注意的一点是：将这些服务部署到同一个网路，这样各个服务之间可以互相通信。比如：很多服务都需要依赖数据库 postgresql，可以使用 docker-compose 来编排服务。安装部署过程参考：我的 VPS 服务部署记录
以上。</description>
    </item>
    <item>
      <title>我的VPS服务部署记录</title>
      <link>https://blog.chensoul.cc/posts/2023/01/25/notes-about-deploy-services-in-vps/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/01/25/notes-about-deploy-services-in-vps/</guid>
      <description>我的 VPS 使用的是 centos 服务器，所以以下操作都是基于 centos 系统。
服务器设置 更新 yum 源：
yum update 安装常用软件：
yum install wget curl git vim -y 设置时区为
[可选] 设置系统 Swap 交换分区
因为 vps 服务器的运行内存很小，所以这里先设置下 Swap
# 1GB RAM with 2GB Swap sudo fallocate -l 2G /swapfile &amp;amp;&amp;amp; \ sudo dd if=/dev/zero of=/swapfile bs=1024 count=2097152 &amp;amp;&amp;amp; \ sudo chmod 600 /swapfile &amp;amp;&amp;amp; \ sudo mkswap /swapfile &amp;amp;&amp;amp; \ sudo swapon /swapfile &amp;amp;&amp;amp; \ echo &amp;#34;/swapfile swap swap defaults 0 0&amp;#34; | sudo tee -a /etc/fstab &amp;amp;&amp;amp; \ sudo swapon --show &amp;amp;&amp;amp; \ sudo free -h 安装 Nginx 参考 CentOS 7 下 yum 安装和配置 Nginx ，使用 yum 安装：</description>
    </item>
    <item>
      <title>周报-2｜博客重构</title>
      <link>https://blog.chensoul.cc/posts/2023/01/15/weekly_review_2/</link>
      <pubDate>Sun, 15 Jan 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/01/15/weekly_review_2/</guid>
      <description>前言 本篇是对 2023-01-09 到 2023-01-15 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这是年前倒数第二个工作周，工作上主要是完成项目一个版本的测试和发布。这个博客主要是分享一些技术相关笔记和个人的生活记录与思考，所以不会涉及具体的工作内容。
周三晚上是部门年会，领导提出了 2023 年收入 6.2 亿的目标，比 2022 年收入增长 140%。从公司领导层这乐观的年度规划，看得出来公司的发展属于上升趋势，同时意味着 2023 年又是忙碌和压力巨大的一年。
工作闲暇之余，看到了一些独立开发者的博客，并受他们博客文章的影响，立即决定重新捣鼓博客。于是，在一腔热情之下，花了三天时间重构了博客，也对博客以后的方向做了一些规划。
周末是过小年，小年伊始，年味渐浓。周六晚上，堂哥家吃年饭。周日中午，自己家吃年饭。这是新婚后第一次两边的家人一起吃年饭。虽然很早就确定了年饭时间大家都有时间的周末、预定了可以坐下 20 多人的大桌，但还是遗憾人没有到齐。
博客重构 博客主题 以前的博客主要是纯粹分享技术，很少有自己的思考，基本上就是代码比汉字要多不少。博客没有博主的思考，无法让读者认识、了解博主，并和博主产生深入的链接。这样的博客没有灵魂，就仅仅是一个纯分享的 wiki。
这次重新开始写博客之后，规划的博客主题是分享技术、记录生活、启发思考。技术上的文章，要有深度；生活的点滴，要有复盘；思考的内容，要有共鸣。
博客规划 以前博客文章的分类有 java、database、devops、web，在删了一些文章之后，将博客的分类调整为想法（Ideas）、笔记（Notes）两类，后面再根据实际情况添加或者调整分类。
健康，爱情和使命，按照这个顺序，其它的都不重要
文章链接 以前的博客链接格式是 posts/:slug，现在调整为 posts/:year/:month/:day/:slug。因为现在博客只有几篇文章，所以暂时不打算做原有链接路径到新路径的重定向工作。
博客部署 目前有三种方案部署方案：
github pages。国内访问速度受影响。 cloudflare pages。可以使用 cdn 加速。 Self hosted。需要购买云主机和手动运维。 目前，是倾向于使用第二种方案。源码保存到 github 上，github actions 编译和部署静态文件到 cf-pages 分支，通过 cloudflare pages 链接 github 仓库、自动化部署静态文件并设置自定义域名 blog.chensoul.cc。
发布流程 本地编写 markdown 文件，图片保存到公有云，通过 git 提交到 github 仓库，使用 github actions 通过 n8n 自动发布到多平台，比如：公众号，语雀等。
待办事项 本周对博客重构，计划完成以下功能：
在不修改原主题的前提下，通过 git log 记录对主题的改动 添加 Cusdis 评论系统 添加 Umami 统计分析 添加 Kuma 服务监控 添加搜索、回到顶部功能 使用 阿里云对象存储 作为图床 github actions 集成 n8n 域名 dns 解析迁移到 cloudflare 以下是使用 kuma 监控我的 VPS 上的服务。</description>
    </item>
    <item>
      <title>周报-1｜开始写周报、冥想</title>
      <link>https://blog.chensoul.cc/posts/2023/01/08/weekly_review_1/</link>
      <pubDate>Sun, 08 Jan 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/01/08/weekly_review_1/</guid>
      <description>前言 本篇是对 2023-01-02 到 2023-01-08 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这是 2023 年的第一周，元旦放了三天假之后，就用投入了工作之中。元旦已过，过年就没多远了，很多公司也开始准备年会了。因为疫情，这个年注定不好过。现在疫情放开，不知道有多少公司能够熬过这个年，进入百废待兴的节奏。
最近把 rss 阅读器又用起来，每天阅读订阅的未读文章，关注到好几个独立开发者。他们每周都在坚持写博客、分享技术文章。从他们的分享里面，可以看到他们有在做自己的 side projects，也有在开源项目提交代码。看着他们的 github 主页每天都有提交代码，再看看我的 github 主页很久没有提交过代码，顿感惭愧。目前，公司使用的是自建的 gitlab 仓库托管代码，很多代码不方便公开分享，自己夜很少花时间写一些小项目公开分享到 github。干脆就清理一些 github 长期没有维护的仓库，取关了一些好友，更新了 github 主页，最后看了一下粉丝还有 574 人，相对而言也是少的可怜 🥺。
开始写周报 前段时间，开始尝试在 语雀 上每天写日记，写了几天之后，没有坚持下来。
总结了一下，没有坚持下来的原因主要是在于每天没有积累足够的分享内容，也就是输入不够；另外，输出之后的反馈不够，这和观众流量有关。作为一个程序员，更喜欢自动化工作的快感和满足感。哟还是更倾向于将博客以 markdown 文件保存到本地或者 git 仓库，然后通过自动化脚本编译部署到多平台。在关注了一些独立开发者的博客之后，更是坚定了这种想法。于是有了这篇写周报的文章，以周为单位记录每一周的所看所思所感。
关于写博客的流程，电脑上使用 typora 编辑器有着很好的用户体验。如果也能在手机上用 markdown 写文章并提交到 github 上就更完美了。刚开始我使用的是 mweb 这个 app，最近在 ios 上又发现了 metion 这个 app 就可以支持和 git 同步。
这篇文章就是通过 metion 编写和提交的。图片是本地上传的，图片名称应该是一串随机数，待文章发布之后，需要将图片重命名为有意义的名称，这样方便在图床里查阅和管理。
关于图片的宽度设置，特别是竖形图，建议将宽度设置为一半。设置方法是：在 md 文件里使用 img 标签引入图片，这样就可以添加一个 sytle=&amp;quot;width: 50%&amp;quot; 来设置宽度。例如，上面图片就是这样设置的。
&amp;lt;img src=&amp;#34;http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/ios-app-metion.png&amp;#34; alt=&amp;#34;ios-app-metion&amp;#34; style=&amp;#34;width: 50%&amp;#34; /&amp;gt; 内观冥想 这个月参加了一个内观冥想 21 天训练营，每天早上 7 点到 8 点是上课时间，正好也是我上班时间。在听了几天课程并打卡之后，就放弃了。
21 天课程内容，每天的主题分别是：
目标 计划 结果 比较 抱怨 后悔 他应该知道自己错了 不可能 目标 今日内观冥想主题是目标
静静地放空自己，回想自己关注目标的记忆。好像自己曾经设立过很多目标，又好像什么都没有。目标是什么，好像描述不出来，又琢磨不透。
曾经立下的那些目标算是目标吗？他们可以实现吗？他们实现了吗？为什么没有实现呢？无志之人常立志，有志之人立常志。远的不说，先看看 2022 年实现了哪些目标。读书，是彻底放下了；健身，元旦前减到 130 斤的目标在 “阳康后不要剧烈运动” 的说辞下耽误了；定投，也是终止了；买车，车是消耗品；结婚，实现了。</description>
    </item>
    <item>
      <title>博客中如何使用图床服务</title>
      <link>https://blog.chensoul.cc/posts/2022/08/19/using-images-in-blog/</link>
      <pubDate>Fri, 19 Aug 2022 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2022/08/19/using-images-in-blog/</guid>
      <description>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。
喜欢 Typora 的理由：
所见即所得的编辑，Markdown 的语法都支持快捷键操作，非常方便
可以自定义主题的 CSS，包括文章内容就可以粘贴到公众号里
上传图片，支持图床服务。可以将图片上传到指定的图床，前提是需要先安装一个客户端，这里我使用的是 PicGo。然后，PicGo 支持常见的一些图床服务。
支持导出
Typora 图片复制到本地 接下来，聊聊 Typora 的图片上传设置：
当你插入图片时，你可以分情况对图片进行设置。比如：
1、对本地位置的图片，可以设置一个上传规则：复制到指定路径或者是当前路径下的一个文件夹、上传图片。
如果是编写一个文档，我们就设置把图片保存到本地的 assets 文件夹内，这样方便管理。 如果是编写博客，图片一般是集中管理的，我们可以设置复制到一个指定路径 2、类似的，对网络位置的图片也可以使用上面的规则。
注意，如果将图片保存到本地目录，在文章中引用图片是使用的相对或者绝对路径。如果只是在本地查看，是可以预览图片的。但是，如果将博客上传到服务器，则因为路径问题可能会出现无法预览图片的情况。
所以，这种情况我们需要做一些修改。通常我会设置图片复制到博客的静态页面目录下面，比如，我现在使用的是 Hugo 构建静态博客，会将图片保存到 static/img 目录下，并且，还需要修改图片的 markdown 引用路径为 /images/image-20220819124422239.png ，以表示绝对路径查找图片，在博客服务器上就是相对根域名目录去 img 路径下查找图片。待 hugo 编译完成上传静态文件到服务器之后，可以通过 https://blog.chensoul.cc/images/ 加上图片名称的方式访问到图片。
但是，显然，这时候在 Typora 是无法预览图片的，因为在本地查找不到这个绝对路径地址。这时候可以在 Typora 里面设置一个绝对路径，操作方法是，在 显示 -&amp;gt; 图片 -&amp;gt; 图像 -&amp;gt; 设置图片根目录 里进行设置。
设置完成之后，在当前文件的 md 文件的顶部元数据代码里会多一行代码：
title: &amp;#34;博客中如何使用图床服务&amp;#34; date: 2022-08-19 slug: using-images-in-blog categories: [日志] tags: [hugo] draft: true typora-root-url: ../../static 这样博客里所有的图片都会保存的博客服务器，如果博客访问量增大，则图片加载时间会变慢。为了解决这个问题，需要将图片进行压缩，并给博客设置 CDN 加速。
Typora 图片上传到网络 将图片保存到本地，待博客静态页面部署到服务器上之后，可以实现正常预览情况。但是，如果我们想把 md 文件打包上传到一些云笔记，比如：语雀，你会发现上传之后会出现图片无法预览的情况。
这时候，我们需要将图片上传到网络。首先，我们需要安装 PicGo，然后设置图床服务，这里我使用的是 github 作为图床来保存图片，并使用 jsDelivr 的 CDN 服务进行加速访问。
如何利用 Github 搭建自己的免费图床？可以参考这篇 文章。这里，记录一下我的操作步骤。
1、使用博客的托管仓库 的 static/img 目录来保存图片，这样方便图片的管理（比如：压缩、重命名，删除无用图片），如果图床服务不可用了，所有博客图片还有一个备份，只需要修改博客内图片的引用地址。前提是需要将仓库设置为 public。
2、在 github 设置里面创建一个 Token。以此打开 Settings -&amp;gt; Developer settings -&amp;gt; Personal access tokens，最后点击 generate new token</description>
    </item>
    <item>
      <title>Mac开发环境配置</title>
      <link>https://blog.chensoul.cc/posts/2021/09/09/mac-development-environment-setup/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2021/09/09/mac-development-environment-setup/</guid>
      <description>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是 Mac 开发环境，所以，这篇文章主要是基于 Mac 操作系统，记录开发环境搭建过程。
系统设置 dotfile 配置 下载 dotfile 文件：
git clone git@github.com:chensoul/snippets.git 拷贝到用户目录：
cd dotfiles sh bootstrap.sh macos 系统设置：
. .macos 安装软件 安装 brew、nvs sh install.sh 安装 MySQL 安装 MySQL：
# 搜索可以安装的版本 ➜ brew search mysql # 安装对应的版本 ➜ brew install mysql@5.7 # 写入环境变量 echo &amp;#39;export PATH=&amp;#34;/opt/homebrew/opt/mysql@5.7/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc # 为了让编译器找到 mysql@5.7 还需要写入 echo &amp;#39;export LDFLAGS=&amp;#34;-L/opt/homebrew/opt/mysql@5.7/lib&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;export CPPFLAGS=&amp;#34;-I/opt/homebrew/opt/mysql@5.7/include&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc # 为了让 pkg-config 找到 mysql@5.7 还需要写入 echo &amp;#39;PKG_CONFIG_PATH=&amp;#34;/opt/homebrew/opt/mysql@5.7/lib/pkgconfig&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc MySQL 服务相关：
# 查看 MySQL 服务状态 ➜ brew services info mysql@5.7 ➜ mysql.server status # 启动 MySQL 服务 ➜ brew services start mysql@5.7 ➜ mysql.server start # 重启 MySQL 服务 ➜ brew services restart mysql@5.</description>
    </item>
    <item>
      <title>从零开始搭建个人博客</title>
      <link>https://blog.chensoul.cc/posts/2021/09/09/build-personal-blog-from-zero/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2021/09/09/build-personal-blog-from-zero/</guid>
      <description>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。
域名 搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科上的解释：
域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。
由于IP 地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP 地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP 地址数串。
简单来说，IP 地址可以标识一台计算机，但是不容易记忆，所以，设计出了域名。而域名就是标识因特网上的一台计算机，由网域名称系统 DNS 来完成域名和 IP 之间的映射。
如何注册域名？有很多网站提供域名注册服务，比如国内的：
阿里云 腾讯云 华为云 国外的：
GoDaddy Namecheap Amazon 注册域名的建议：
1、建议在正规、出名的网站注册域名，防止网站跑路。我曾经在一个小网站注册了一个域名，使用了几年之后，续期的时候，联系不上对方，导致无法使用该域名，甚至该域名被别人抢注册了。 2、在国内网站注册域名，都需要备案。如果不想备案，请在国外网站注册域名。我的域名 chensoul.cc 就是在亚马逊上注册的。一是不想备案，二是对比了上面几个网站，发现亚马逊上的 com 域名价格相对便宜，所以一次性购买了 5 年。 3、建议优先注册 com 域名，域名尽可能的简短并且方便记忆。 我曾经注册过的域名：
javachen.com、javachen.space、javachen.xyz huaiu.com 服务器 注册了域名之后，需要一台服务器运行程序。服务器可以是一台物理机，比如你可以使用自己的电脑作为服务器；也可以是一台虚拟的云服务器，比如在云服务提供商购买一台独立的服务器；也可以使用第三方提供的服务器空间，比如 Github 上可以部署静态程序。不管哪种方式，服务器都需要有一个公网 IP，这样才能在因特网上访问你服务器上部署的程序。有了服务器之后，就可以给服务器公网 IP 设置域名解析。
我的服务器是在搬瓦工购买的，一年 49.99 美元。
程序 安装 Hugo 在 Mac 下安装 Hugo：
brew install hugo 新建站点 hugo new site chensoul.github.io -y yaml 上述命令会生成一个名为 chensoul.github.io 的文件夹，下面对文件夹结构做个说明：
$ tree chensoul.github.io chensoul.github.io ├── archetypes │ └── default.md ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes 6 directories, 2 files 新建的站点，还没有加入 Git 版本管理，进入到这个目录下，执行一下如下命令，完成 Git Repo 的初始化：</description>
    </item>
  </channel>
</rss>
