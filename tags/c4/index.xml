<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C4 on ChenSoul</title>
    <link>https://blog.chensoul.cc/tags/c4/</link>
    <description>Recent content in C4 on ChenSoul</description>
    <generator>Hugo -- 0.136.5</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 29 Jan 2024 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/tags/c4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024-01-29｜C4架构模型</title>
      <link>https://blog.chensoul.cc/posts/2024/01/29/til/</link>
      <pubDate>Mon, 29 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/29/til/</guid>
      <description>&lt;p&gt;今天做了什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;重构 &lt;a href=&#34;https://github.com/chensoul/foodie-cloud&#34; target=&#34;_blank&#34;&gt;foodie-cloud&lt;/a&gt; 项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C4 架构模型&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;c4架构模型&#34;&gt;C4架构模型&lt;/h2&gt;
&lt;p&gt;C4 架构模型是一种简洁且易于理解的软件架构描述方法，由 Simon Brown 提出。C4 表示 Context, Containers, Components, and Code，这四个层级帮助我们组织和描述软件系统的不同抽象层次。&lt;/p&gt;
&lt;p&gt;以下是 C4 架构模型的四个层级：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Context（上下文）：这是最高级别的层级，用于描述系统的整体环境和目标。在这个层级，我们关注系统与外部实体（如用户、其他系统、硬件设备等）的交互。可以使用上下文图（Context Diagram）来展示系统和相关实体之间的关系。&lt;/li&gt;
&lt;li&gt;Containers（容器）：这个层级用于描述系统内部的主要逻辑组件，通常是一个独立的运行时进程或线程。容器可以是 Web 服务器、数据库、消息队列、桌面应用等，它们在系统中承担着不同的角色和责任。通过容器图（Container Diagram），我们可以展示系统中的容器及其之间的关系。&lt;/li&gt;
&lt;li&gt;Components（组件）：这个层级用于进一步划分容器，描述容器内部的组织结构和组件之间的关系。组件是系统的构建块，代表了较细粒度的功能单元或模块。可以使用组件图（Component Diagram）来展示组件及其之间的关系。&lt;/li&gt;
&lt;li&gt;Code（代码）：这个层级用于描述组件内部的代码结构和实现细节。在这个层级，我们可以使用类图、包图等来展示代码级别的结构和关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C4 架构模型通过层级化的方式，帮助我们从高级别到低级别逐步展示和描述软件系统的不同抽象层次，使得架构描述更加清晰和易于理解。它适用于不同规模和复杂度的软件系统，并且可以方便地与其他架构描述方法（如 UML）结合使用。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
