<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Git on ChenSoul</title>
    <link>https://blog.chensoul.cc/tags/git/</link>
    <description>Recent content in Git on ChenSoul</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 15 Jul 2024 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git介绍</title>
      <link>https://blog.chensoul.cc/posts/2024/07/15/git/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/15/git/</guid>
      <description>&lt;h2 id=&#34;gitgithubgitlab-的区别&#34;&gt;Git、Github、Gitlab 的区别&lt;/h2&gt;
&lt;p&gt;Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;/p&gt;
&lt;p&gt;是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
&lt;p&gt;Github是在线的基于Git的代码托管服务。 GitHub是2008年由Ruby on Rails编写而成。GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，只有付费账户可以创建私有的代码仓库。 Gitlab解决了这个问题, 可以在上面创建免费的私人repo。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git使用</title>
      <link>https://blog.chensoul.cc/posts/2024/07/15/git/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/15/git/</guid>
      <description>&lt;h2 id=&#34;部署git-服务&#34;&gt;部署Git 服务&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;创建git仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;git-server上的操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@localhost ~]# yum install git git-core gitweb -y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@localhost ~]# useradd git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@localhost ~]# passwd git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@localhost ~]# mkdir /git-root/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@localhost ~]# cd /git-root/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@localhost git-root]# git init --bare shell.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Initialized empty Git repository in /git-root/shell.git/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[root@localhost git-root]# chown -R git:git shell.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意：
git init 和 git init &amp;ndash;bare 的区别:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&amp;ndash;bare选项时，不再生成 .git 目录，而是只生成 .git 目录下面的版本历史记录文件，这些版本历史记录文件也不再存放在 .git 目录下面，而是直接存放在版本库的根目录下面。&lt;/li&gt;
&lt;li&gt;用&amp;quot;git init&amp;quot;初始化的版本库用户也可以在该目录下执行所有 git 方面的操作。但别的用户在将更新 push 上来的时候容易出现冲突。
使用”git init &amp;ndash;bare”方法创建一个所谓的裸仓库，之所以叫裸仓库是因为这个仓库只保存git历史提交的版本信息，而不允许用户在上面进行各种git操作，如果你硬要操作的话，只会得到下面的错误（”This operation must be run in a work tree”）这个就是最好把远端仓库初始化成bare仓库的原因&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;git仓库测试&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>2024-01-25｜Idea和zsh快捷键</title>
      <link>https://blog.chensoul.cc/posts/2024/01/25/til/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/25/til/</guid>
      <description>&lt;p&gt;今天做了什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整理 Idea 快捷键&lt;/li&gt;
&lt;li&gt;整理 zsh 中定义的常用的快捷键&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;idea-快捷键&#34;&gt;Idea 快捷键&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用快捷键 command +1 打开 Project 窗口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入 control + R 可以运行 Java 代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;上下文&#34;&gt;上下文&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 for 方法上，输入 option + enter，可以调出上下文，替换 for 表达式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在字符串上面输入 option + enter，可以调出上下文。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]DevOps 和测试人员的 Git 面试问题</title>
      <link>https://blog.chensoul.cc/posts/2023/10/12/git-interview-questions/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/12/git-interview-questions/</guid>
      <description>&lt;p&gt;欢迎来到 Git 面试准备指南，我们将在这里向初学者和经验丰富的专业人士讨论最常见的 Git 面试问题。无论您是准备参加 DevOps 或测试面试，还是希望提高 Git 技能，此资源都可以通过深入研究一些与 Git 基本概念和实践相关的最常见面试问题来帮助您。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Flow分支模型和使用</title>
      <link>https://blog.chensoul.cc/posts/2023/05/11/git-flow-model-and-usage/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/05/11/git-flow-model-and-usage/</guid>
      <description>&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34; target=&#34;_blank&#34;&gt;Git Flow&lt;/a&gt; 是由 Vincent Driessen 在 2010 年提出的一种 Git 工作流。在这之前，Git 没有一个明确的标准工作流，导致团队在使用 Git 时往往会遇到一些问题，如分支管理、版本控制等。为了解决这些问题，Vincent Driessen 提出了 Git Flow 分支模型，成为了 Git 在实际应用中的一种标准工作流。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
