<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gitlab on ChenSoul</title>
    <link>https://blog.chensoul.cc/tags/gitlab/</link>
    <description>Recent content in Gitlab on ChenSoul</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 19 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/tags/gitlab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitLab Runner安装和部署</title>
      <link>https://blog.chensoul.cc/posts/2024/07/19/gitlab-runner-install/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/19/gitlab-runner-install/</guid>
      <description>介绍 GitLab Runner 是一个用于在 GitLab CI/CD（持续集成/持续交付）流水线中运行作业（Jobs）的开源工具。它充当了 GitLab CI/CD 系统中的代理，负责接收作业请求、执行作业脚本并报告结果。
下面是 GitLab Runner 的一些关键特点和功能：
多平台支持：GitLab Runner 可在多种操作系统上运行，包括 Linux、macOS 和 Windows，使其适用于各种开发环境和需求。 作业执行器：Runner 接收来自 GitLab CI/CD 的作业请求，并在指定的环境中执行作业。它可以运行各种类型的作业，如构建、测试、部署等。 并发执行：GitLab Runner 可以同时运行多个作业，以提高整体流水线的处理能力和效率。 弹性扩展：你可以配置多个 GitLab Runner 实例，以满足不同项目和流水线的需求。每个 Runner 实例都可以在不同的环境中运行，比如在不同的物理或虚拟机器上，或者在云服务提供商的容器中。 配置灵活性：Runner 的配置相对灵活，你可以根据项目、分支或标签等条件来指定不同的执行规则。这使得你可以针对不同的场景和需求进行定制化配置。 日志和报告：Runner 会生成详细的日志和报告，用于记录作业的执行过程和结果。这些信息对于故障排除、问题追踪和流水线性能分析非常有帮助。 安全和身份验证：GitLab Runner 可与 GitLab CI/CD 系统集成，并通过访问令牌或其他身份验证机制来确保安全的通信和访问权限控制。 安装 GitLab Runner 的版本需要和 GitLab 保持一致。
查看当前 Gitlab 版本：
root@gitlab:/# gitlab-rake gitlab:env:info System information System:	Current User:	git Using RVM:	no Ruby Version:	3.1.5p253 Gem Version:	3.5.11 Bundler Version:2.5.11 Rake Version:	13.0.6 Redis Version:	7.0.15 Sidekiq Version:7.1.6 Go Version:	unknown GitLab information Version:	17.1.1 Revision:	a1c9a43d543 Directory:	/opt/gitlab/embedded/service/gitlab-rails DB Adapter:	PostgreSQL DB Version:	14.11 URL:	https://gitlab.wesine.com.cn HTTP Clone URL:	https://gitlab.</description>
    </item>
    <item>
      <title>Gitlab安装和部署-使用yum源</title>
      <link>https://blog.chensoul.cc/posts/2024/07/15/install-gitlab-using-yum/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/07/15/install-gitlab-using-yum/</guid>
      <description>Gitlab Server 部署 1、环境配置 关闭防火墙、SELinux
开启邮件服务
$ systemctl start postfix $ systemctl enable postfix 2、手动安装 1、安装 gitlab 依赖包 centos7:
$ yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python gitlab-ce 10.x.x以后的版本需要依赖policycoreutils-python
centos8:
$ yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python-utils 2、添加官方源 $ curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash 因为官方源太慢，可以使用国内清华yum源，配置如下
$ vim /etc/yum.repos.d/gitlab-ce.repo [gitlab-ce] name=Gitlab CE Repository baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/ gpgcheck=0 enabled=1 3、安装 Gitlab 自动安装最新版
$ yum -y install gitlab-ce 4、配置 Gitlab 1、查看Gitlab版本 $ head -1 /opt/gitlab/version-manifest.txt gitlab-ce 10.1.1 2、Gitlab 配置登录链接 #设置登录链接 $ vim /etc/gitlab/gitlab.rb *** ## GitLab URL ##! URL on which GitLab will be reachable. ##! For more details on configuring external_url see: ##!</description>
    </item>
    <item>
      <title>Gitlab安装和部署-使用Docker</title>
      <link>https://blog.chensoul.cc/posts/2024/06/26/install-gitlab/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/26/install-gitlab/</guid>
      <description>安装 Gitlab 安装 gitlab-ce 版本，当前最新版本为 17.2.0
配置 external_url 参考 https://docs.gitlab.com/ee/install/docker.html#install-gitlab-using-docker-compose
services: gitlab: image: gitlab/gitlab-ce container_name: gitlab restart: always hostname: &amp;#39;gitlab.example.com&amp;#39; environment: GITLAB_OMNIBUS_CONFIG: | external_url &amp;#39;https://gitlab.example.com&amp;#39; ports: - &amp;#39;80:80&amp;#39; - &amp;#39;443:443&amp;#39; - &amp;#39;22:22&amp;#39; volumes: - &amp;#39;/srv/gitlab/config:/etc/gitlab&amp;#39; - &amp;#39;/srv/gitlab/logs:/var/log/gitlab&amp;#39; - &amp;#39;/srv/gitlab/data:/var/opt/gitlab&amp;#39; shm_size: &amp;#39;256m&amp;#39; 停止本地的 sshd 和 nginx 服务，避免 22 、80、443端口备占用：
systemctl stop nginx systemctl stop sshd 启动 gitlab：
export GITLAB_HOME=/srv/gitlab &amp;amp;&amp;amp; docker compose up -d 查看日志：
docker logs -f gitlab 本地配置 /etc/host 文件：
127.0.0.1 gitlab.example.com 打开浏览器访问：https://gitlab.example.com/ ，用户名 root，密码通过下面命令查看：
cat /srv/gitlab/config/initial_root_password 修改默认端口 参考 https://github.com/hutchgrant/gitlab-docker-local/，
services: gitlab: image: gitlab/gitlab-ce container_name: gitlab restart: always hostname: &amp;#39;gitlab.example.com&amp;#39; environment: GITLAB_OMNIBUS_CONFIG: | external_url &amp;#39;https://gitlab.example.com:3143&amp;#39; gitlab_rails[&amp;#39;gitlab_shell_ssh_port&amp;#39;] = 3122 ports: - &amp;#39;3143:443&amp;#39; - &amp;#39;3122:22&amp;#39; volumes: - &amp;#39;/srv/gitlab/config:/etc/gitlab&amp;#39; - &amp;#39;/srv/gitlab/logs:/var/log/gitlab&amp;#39; - &amp;#39;/srv/gitlab/data:/var/opt/gitlab&amp;#39; shm_size: &amp;#39;256m&amp;#39; 配置时区 进入容器，修改配置 /etc/gitlab/gitlab.</description>
    </item>
  </channel>
</rss>
