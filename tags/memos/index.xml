<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>memos on ChenSoul</title>
    <link>https://blog.chensoul.com/tags/memos/</link>
    <description>Recent content in memos on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 09 Jun 2023 09:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.com/tags/memos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>周报-22｜微信读书笔记助手</title>
      <link>https://blog.chensoul.com/posts/2023/06/09/weekly_review_22/</link>
      <pubDate>Fri, 09 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/09/weekly_review_22/</guid>
      <description>前言 本篇是对 2023-05-29 到 2023-06-04 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 读书、健身、定投、帮朋友、陪家人，本周周报增加一</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-05-29</code> 到 <code>2023-06-04</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>读书、健身、定投、帮朋友、陪家人，本周周报增加一块内容：读书，记录每周读书的时间。</p>
<h2 id="微信读书笔记助手">微信读书笔记助手</h2>
<p>最近注销了微信阅读账号，清空了历史数据。本着宁缺毋滥的原则，书架重新添加了几本书。计划是重新使用微信阅读养成读书的习惯。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-03.png" alt="weekly-review-22-03"  />
</p>
<p>在chrome浏览器添加了一个插件 <a href="https://chrome.google.com/webstore/detail/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%8A%A9%E6%89%8B/cmlenojlebcodibpdhmklglnbaghpdcg">微信读书笔记助手</a> ，可以将读书笔记一键导出为 markdown 格式。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-02.png" alt="weekly-review-22-02" style="width:50%;" />
<p>导出的内容标注是一个标注一个段落，段落之间有一个换行。段落后面可以添加自己的思考（比如，用红色标注颜色）。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-07.png" alt="weekly-review-22-07"  />
</p>
<h2 id="读书">读书</h2>
<p>本周阅读统计（图片来自微信阅读 app 分享）：</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-01.png" alt="weekly-review-22-01" style="width:50%;" />
<h2 id="理财">理财</h2>
<p>这周总计支出 2528 元，明细如下：</p>
<ul>
<li>6月4日：138元</li>
<li>6月3日：1650元，医院看病1600</li>
<li>6月2日：61元</li>
<li>6月1日：0元</li>
<li>5月31日：108元</li>
<li>5月30日：625元，公司停车场费用600</li>
<li>5月29日：41元</li>
</ul>
<h2 id="健身">健身</h2>
<blockquote>
<p>我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2个省份 2个城市。更多跑步数据在我的 <a href="https://run.chensoul.com/">跑步</a> 主页。</p>
</blockquote>
<p>本周跑步 42.66 公里，最长跑步距离为 9.2 公里。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-04.png" alt="weekly-review-22-04"  />
</p>
<p>明细数据如下：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-05.png" alt="weekly-review-22-05"  />
</p>
<p>在朋友圈发了一个5月跑步500公里动态，一个高中同学建议我不要过度跑步，最好是跑步一天休息一天，以免伤了膝盖。受他影响，受他影响，6月1日没有跑步，6月3日和4日，带老爸去医院做检查，所以没有跑步。照此看来，6月连续跑步30天、累计200公里的目标铁定是完成不了，所以及时调整目标和计划，还是以长期主义的思路保持跑步的习惯，不求数量。</p>
<h2 id="工作">工作</h2>
<p>最近在学习的内容清单：</p>
<ul>
<li><a href="https://github.com/clxering/Effective-Java-3rd-edition-Chinese-English-bilingual/tree/dev">Effective Java（第 3 版）</a></li>
<li><a href="https://java-design-patterns.com/zh/">Java Design Patterns (中文)</a></li>
<li><a href="https://realpython.com/">Real Python</a></li>
</ul>
<p>本周完成四篇博客：</p>
<ul>
<li>
<p><a href="/posts/2023/06/02/java-design-patterns-visitor/">Java设计模式：Visitor</a></p>
</li>
<li>
<p><a href="/posts/2023/06/01/java-design-patterns-acyclic-visitor/">Java设计模式：Acyclic Visitor</a></p>
</li>
<li>
<p><a href="/posts/2023/06/01/what-is-pip/">[译]使用 Python 的 pip 管理项目的依赖关系</a></p>
</li>
<li>
<p><a href="/posts/2023/06/01/python-wheels/">[译]什么是 Python Wheels，你为什么要关心它？</a></p>
</li>
</ul>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-22-06.png" alt="weekly-review-22-06"  />
</p>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中。我写了一个 python 脚本从 memos读取最近一周的 memos 记录。</p>
<ul>
<li>📌<code>2023-05-31</code> 看到一个很适合新手入门「数据结构与算法」的开源书《Hello 算法》，通过动画图解结构化地讲解数据结构和算法知识，内容清晰易懂、学习曲线挺平滑，代码上支持 Java,C++, Python, Go, JS, TS, CSharp, Swift 一键运行看效果，比市面上卖的普通书好不少。 🤖 <a href="https://hello-algo.com">https://hello-algo.com</a> <code>#memos</code> <code>#skill</code></li>
<li>📌<code>2023-05-31</code> 今日重磅开源库推荐 - Plane  <a href="https://github.com/makeplane/plane">https://github.com/makeplane/plane</a>  Jira 的开源版平替，有很多人都讨厌 Jira，觉得它复杂难用。  Plane 完全开源，而且界面要简洁舒服易用很多。 部署方便快捷, 支持 Docker 部署。 还很贴心的支持从 Github 以及 Jira 直接导入。  想尝试新的项目管理工具的朋友可以尝试一下。<code>#memos</code> <code>#tool</code></li>
<li>📌<code>2023-05-31</code> 「Next.js 应用开发实践」 <a href="https://nextjs-in-action-cn.taonan.lu/">https://nextjs-in-action-cn.taonan.lu/</a>   <code>#memos</code> <code>#web</code></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-20｜自动生成每日早报、周末团建</title>
      <link>https://blog.chensoul.com/posts/2023/05/25/weekly_review_20/</link>
      <pubDate>Thu, 25 May 2023 17:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/25/weekly_review_20/</guid>
      <description>前言 乐农湖畔生态园 本篇是对 2023-05-15 到 2023-05-21 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 不知不觉，这已经是第20篇周报了。</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-00.jpeg" alt="weekly-review-20-00"  />
</p>
<center><i>乐农湖畔生态园</i></center>
<br/>
<p>本篇是对 <code>2023-05-15</code> 到 <code>2023-05-21</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>不知不觉，这已经是第20篇周报了。这周依旧是健身、理财、学习和写博客。</p>
<h2 id="自动生成每日早报">自动生成每日早报</h2>
<p>最近在朋友圈看到这样一个早报，就在想能否通过代码自动抓取新闻并生成这样一个早报图片？</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-04.jpeg" alt="weekly-review-20-04" style="width:50%;" />
<p>于是，在网上找到一篇文章：<a href="https://icodeq.com/2022/5fe2010403bb/">前后端均基于 vercel 的每日早报项目</a></p>
<p>参考源代码，做了一些修改，代码见：<a href="https://github.com/chensoul/chensoul/blob/main/fetch_news.py">fetch_news.py</a>。修改后的逻辑是将抓取的新闻发送到 memos，例如：<a href="https://memos.chensoul.com/m/349">https://memos.chensoul.com/m/349</a> 。可以在 github action 设置每天早上7点自动发送到 memos，然后再通过 n8n 同步到 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-01.png" alt="weekly-review-20-01" style="width: 50%;" />
<p>在memos中导出的图片如下：</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-05.png" alt="weekly-review-20-05" style="width:50%;" />
<p>如果能够通过 python 自动生成图片，那就更好了。记录一下，待以后实现。</p>
<h2 id="团建">团建</h2>
<p>公司团建选择在周六，而且还是520这一天，真是会挑日子。很多人请假，最后只有13人参加团建，其中有8人是我们开发组的🤣。挑两张照片发到这里～</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-03.jpeg" alt="weekly-review-20-03"  />
</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-02.jpeg" alt="weekly-review-20-02"  />
</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 1861 元，明细如下：</p>
<ul>
<li>5月15日：1027元，武功山旅游，加油327</li>
<li>5月16日：42元</li>
<li>5月17日：12元</li>
<li>5月18日：16元</li>
<li>5月19日：25元</li>
<li>5月20日：562元，看望六舅</li>
<li>5月21日：177元</li>
</ul>
<h2 id="健身">健身</h2>
<p>本周跑步 36 公里，最长跑步距离为 10 公里。明细数据如下：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-08.png" alt="weekly-review-20-08"  />
</p>
<p>我跑过了一些地方，希望随着时间推移，地图点亮的地方越来越多。2 年里我跑过 2个省份 2个城市。更多跑步数据在<a href="https://run.chensoul.com/">跑步</a>主页。</p>
<h2 id="工作">工作</h2>
<h4 id="博客">博客</h4>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-20-07.png" alt="weekly-review-20-07"  />
</p>
<p>本周完成五篇博客：</p>
<ul>
<li>
<p><a href="/posts/2023/05/22/java-design-patterns-abstract-document/">Java设计模式：Abstract Document</a></p>
</li>
<li>
<p><a href="/posts/2023/05/22/java-design-patterns-abstract-factory/">Java设计模式：Abstract Factory</a></p>
</li>
<li>
<p><a href="/posts/2023/05/23/always-override-hashcode-when-you-override-equals/">《Effective Java 3》笔记11：当覆盖 equals 方法时，总要覆盖 hashCode 方法</a></p>
</li>
<li>
<p><a href="/posts/2023/05/22/docker-continuous-integration/">[译]Build Robust Continuous Integration With Docker and Friends</a></p>
</li>
<li>
<p><a href="/posts/2023/05/23/python-comment-and-variable/">Python学习1：注释、变量和常量</a></p>
</li>
</ul>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中。我写了一个 python 脚本从 memos读取最近一周的 memos 记录。</p>
<ul>
<li><strong>2023-05-19</strong> 陈皓（左耳朵耗子）前年做过一次直播访谈，谈到了技术、行业、创业的各个方面。本文是访谈内容的文字整理，以此纪念他。  <a href="https://mp.weixin.qq.com/s/bOnW8gDJ-dXp4KbAjhDw9A">https://mp.weixin.qq.com/s/bOnW8gDJ-dXp4KbAjhDw9A</a>  <code>#memos</code> <code>#skill</code> <code>#tool</code></li>
<li><strong>2023-05-17</strong> 用 Material for MkDocs 来生成专业的技术文档 <a href="https://vra.github.io/2023/05/17/mkdocs-material-tutorial/">https://vra.github.io/2023/05/17/mkdocs-material-tutorial/</a>  <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-17</strong> 基于  Popsy 创建自己的个人主页 <a href="https://popsy.co/">https://popsy.co/</a> <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-17</strong> Hellonext是一种反馈管理平台，它可以帮助组织、企业和开发团队更好地管理用户反馈和需求。它提供了一个用户友好的界面，使用户可以轻松地提交反馈和建议，而管理人员可以使用该平台来跟踪和组织这些反馈，并确定哪些反馈应该优先考虑实现。Hellonext还提供了数据分析和报告功能，帮助管理人员了解用户反馈的趋势和优先级，以便更好地满足用户需求。 <a href="https://hellonext.co/">https://hellonext.co/</a> <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-17</strong> Dify 是一个简单且能力丰富的自然语言编程工具。你可以用它搭建商用级应用，个人助理。如果你想自己开发应用，Dify 也能为你省下接入 OpenAI 的后端工作，但使用我们逐步提供高的可视化运营能力，你可以持续的改进和训练你的 GPT 模型。 <a href="https://docs.dify.ai/v/zh-hans/getting-started/intro-to-dify">https://docs.dify.ai/v/zh-hans/getting-started/intro-to-dify</a> <code>#tool</code> <code>#memos</code></li>
<li><strong>2023-05-17</strong> 用200行python代码实现dns服务器的教程 <a href="https://implement-dns.wizardzines.com/">https://implement-dns.wizardzines.com/</a>  <code>#memos</code> <code>#tool</code></li>
<li><strong>2023-05-17</strong> postman 推出了postbot，使用人工智能帮助您调试和理解 API、更快地编写测试  <a href="https://blog.postman.com/introducing-postbot-postmans-new-ai-assistant/">https://blog.postman.com/introducing-postbot-postmans-new-ai-assistant/</a>  <code>#tool</code> <code>#memos</code></li>
<li><strong>2023-05-17</strong> <a href="https://imgg.gg/">https://imgg.gg/</a> 是一个可以将任意 sms 内容转换成为图片的工具，不用担心在 APP 上截图会泄漏隐私。生成的图片的样式很像 <a href="https://poet.so/">https://poet.so/</a> ，不过Poet.so 只能生成推特、linkedin、shopify 的分享图。 <code>#tool</code> <code>#memos</code></li>
<li><strong>2023-05-17</strong> 都知道 ffmpeg 是媒体文件处理的瑞士军刀，但命令行的操作对大部分人来说确实会面临迷茫和繁琐。FFmpeg.guide 就是一个图形化生成 ffmpeg 命令的工具。  网站地址：<a href="https://ffmpeg.guide/">https://ffmpeg.guide/</a> <code>#tool</code> <code>#memos</code></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-17｜导出苹果健康数据、自动化收集个人数据、FlexyPool动态连接池</title>
      <link>https://blog.chensoul.com/posts/2023/05/06/weekly_review_17/</link>
      <pubDate>Sat, 06 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/06/weekly_review_17/</guid>
      <description>前言 本篇是对 2023-04-24 到 2023-04-30 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 本周二早上跑步右小腿抽筋，跑步暂停了两天，所以有</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-04-24</code> 到 <code>2023-04-30</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>本周二早上跑步右小腿抽筋，跑步暂停了两天，所以有两天走路没有到一万步。在小腿恢复之后，继续跑步，查看 strava 上的统计，这周总共跑了27公里，比上周41公里少了14公里。</p>
<p>这周空闲时间就在想，能不能每天自动收集个人的一些数据，比如，目前我能想到的数据包括跑步、走路、体重、编码、早起等等。</p>
<p>目前是使用 strava app 记录跑步数据，通过 <a href="https://github.com/chensoul/running_page">running_page</a> 可以实时收集我的每天 <a href="https://github.com/chensoul/running_page/blob/master/assets/running.csv">跑步数据</a>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-01.png" alt="weekly-review-17-01"  />
</p>
<p>走路、体重数据可以从苹果健康数据获取：</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-06.png" alt="weekly-review-17-06" style="width:50%;" />
<p>编码数据可以从 wakatime 获取：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-02.png" alt="weekly-review-17-02"  />
</p>
<p>早起的数据，我目前是通过 ios workflow 自动化来实现的。当早起闹钟响起时，往 memos 写入一条记录。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-08.png" alt="weekly-review-17-08"  />
</p>
<p>如果可以获取到苹果屏幕使用时间数据，则可以从苹果手机获取每日第一次拿起手机的时间作为早起时间（待研究）。</p>
<h2 id="导出苹果健康数据">导出苹果健康数据</h2>
<p>如何导出苹果健康数据？可以参考这篇文章 <a href="https://sspai.com/post/42135">想要分析或备份 iPhone 「健康」应用数据？教你 3 种方法将其导出</a> 。这篇文章提到的 Health Export  工具和 python 脚本我都试过，QS Access 在手机上没有找到。</p>
<h3 id="1-health-export-在线解析">1. Health Export 在线解析</h3>
<p><a href="https://sspai.com/link?target=http%3A%2F%2Fericwolter.com%2Fprojects%2Fhealth-export.html">Health Export</a> 是国外一名独立开发者写的在线解析工具，它专门用于将健康应用导出的 XML 文件转换为 CSV 文件。</p>
<p>Health Export 提供了一个 <a href="https://www.ericwolter.com/projects/apple-health-export/">web 网站</a> 可以解析传苹果手机导出的健康数据。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-03.png" alt="weekly-review-17-03"  />
</p>
<p>如何从 IPhone 手机导出苹果健康数据呢？您可以通过以下步骤导出这些数据：</p>
<ol>
<li>打开“健康”应用程序。</li>
<li>点击屏幕右上角的“个人资料”图标。</li>
<li>滚动到页面底部，找到“导出健康数据”选项，并点击它。</li>
<li>在弹出窗口中选择要导出的数据类型，例如步数、心率等。</li>
<li>点击“下一步”按钮。</li>
<li>在下一个页面中，您可以选择要导出的时间范围。您可以选择“全部数据”或指定日期范围。</li>
<li>点击“请求导出”按钮。</li>
<li>您将被要求输入一个密码以保护您的数据。输入密码后，点击“下一步”按钮。</li>
<li>在弹出窗口中，您可以选择将数据发送到您的电子邮件地址或其他应用程序。</li>
<li>点击“导出”按钮。</li>
</ol>
<p>完成这些步骤后，您的健康数据将被导出为一个可下载的 zip 文件。您可以将其保存到您的设备上或发送到其他应用程序或云存储服务。</p>
<p>将导出的文件 export.xml 上传到  <a href="https://www.ericwolter.com/projects/apple-health-export/">web 网站</a> ，稍等片刻可以导出结果。导出的健康数据是一个指标一个 csv 文件，如果想合并数据，需要做进一步处理。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-04.png" alt="weekly-review-17-04"  />
</p>
<p>另外，Health Export 也提供了IOS APP，功能好用，支持选择指定指标数据按日期聚合导出为一个 csv，还有定时导出的功能，遗憾的是需要收费。</p>
<h3 id="2使用-python-脚本">2、使用 python 脚本</h3>
<p>这里使用了 <a href="https://sspai.com/link?target=https%3A%2F%2Fgithub.com%2Ftdda%2Fapplehealthdata">@Radcliffe</a> 提供的开源代码。目前，Github 可以在国内自由访问，所以直接通过<a href="https://sspai.com/link?target=https%3A%2F%2Fgithub.com%2Ftdda%2Fapplehealthdata%2Fraw%2Fmaster%2Fapplehealthdata.py">此链接</a>下载名称为 <code>applehealthdata.py</code> 的脚本文件。</p>
<p>然后，将之前下载好的 <code>导出.xml</code> 与该脚本文件放置在<strong>同一目录</strong>下方。为了防止报错，这里需要将 <code>导出.xml</code> 更名为 <code>export.xml</code>。</p>
<p>接下来，在该文件夹下打开终端（macOS &amp; Linux）或者命令行工具（Windows），使用 Python 2 执行该脚本：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python applehealthdata.py export.xml
</span></span></code></pre></div><p>稍等片刻，XML 文件就会被解析为数个 CSV 文件了。</p>
<p>这里，我对 applehealthdata.py 这个文件做了一点修改，只导出指定的指标的指定列的数据，修改后的脚本在 <a href="https://github.com/chensoul/chensoul/blob/main/applehealthdata.py">applehealthdata.py</a>。目前，我只关注以下6个指标：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">RECORDS</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;BodyFatPercentage&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;BodyMass&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;BodyMassIndex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;DistanceWalkingRunning&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;LeanBodyMass&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;StepCount&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></div><p>这 6 个指标中文含义分别是：</p>
<ul>
<li>BodyFatPercentage：脂肪率</li>
<li>BodyMass：体重</li>
<li>BodyMassIndex：BMI 指数</li>
<li>LeanBodyMass：净体重</li>
<li>DistanceWalkingRunning：走路跑步距离</li>
<li>StepCount：走路步数</li>
</ul>
<p>导出的列只需要 type、startDate、value 这 3 个：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">RECORD_FIELDS</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">((</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;sourceName&#39;, &#39;s&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;sourceVersion&#39;, &#39;s&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;device&#39;, &#39;s&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;unit&#39;, &#39;s&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;creationDate&#39;, &#39;d&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s1">&#39;startDate&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># (&#39;endDate&#39;, &#39;d&#39;),</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">))</span>
</span></span></code></pre></div><p>这样导出了这 6 个 csv 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">BodyMass.csv               
</span></span><span class="line"><span class="cl">DistanceWalkingRunning.csv 
</span></span><span class="line"><span class="cl">StepCount.csv
</span></span><span class="line"><span class="cl">BodyFatPercentage.csv      
</span></span><span class="line"><span class="cl">BodyMassIndex.csv          
</span></span><span class="line"><span class="cl">LeanBodyMass.csv
</span></span></code></pre></div><p>接下来，把这6个文件导入数据库，并进行合并处理。数据库我选择的是 postgres，以上 6 个文件对于 6 个建表语句：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">SEQUENCE</span><span class="w"> </span><span class="k">IF</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="w"> </span><span class="n">health_id_seq</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;BodyFatPercentage&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;BodyMass&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;BodyMassIndex&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;DistanceWalkingRunning&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;LeanBodyMass&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;StepCount&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;id&#34;</span><span class="w"> </span><span class="n">int4</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;health_id_seq&#39;</span><span class="p">::</span><span class="n">regclass</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;type&#34;</span><span class="w"> </span><span class="nb">varchar</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;start_date&#34;</span><span class="w"> </span><span class="k">timestamp</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;id&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>我想把这6个文件按照日期合并到一个表中，于是创建 health 表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="s2">&#34;public&#34;</span><span class="p">.</span><span class="s2">&#34;health&#34;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;day&#34;</span><span class="w"> </span><span class="nb">text</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;fat_pct&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;bmi&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;lean_weight&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;step_count&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;step_distance&#34;</span><span class="w"> </span><span class="nb">numeric</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="s2">&#34;weight&#34;</span><span class="w"> </span><span class="n">float8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;day&#34;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>接下来，通过 sql 合并数据插入到 health 表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">insert</span><span class="w"> </span><span class="k">into</span><span class="w"> </span><span class="n">health</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="k">day</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">fat_pct</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">bmi</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">lean_weight</span><span class="p">,</span><span class="n">f</span><span class="p">.</span><span class="n">step_count</span><span class="p">,</span><span class="k">g</span><span class="p">.</span><span class="n">step_distance</span><span class="p">,</span><span class="n">t</span><span class="p">.</span><span class="n">weight</span><span class="w"> </span><span class="k">from</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="k">select</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">day</span><span class="p">,</span><span class="k">sum</span><span class="p">(</span><span class="s2">&#34;value&#34;</span><span class="p">)</span><span class="w"> </span><span class="n">step_count</span><span class="w">  </span><span class="k">from</span><span class="w"> </span><span class="s2">&#34;StepCount&#34;</span><span class="w"> </span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="n">f</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">select</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">day</span><span class="p">,</span><span class="n">round</span><span class="p">(</span><span class="k">cast</span><span class="p">(</span><span class="k">sum</span><span class="p">(</span><span class="s2">&#34;value&#34;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nb">numeric</span><span class="p">)</span><span class="w"> </span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">step_distance</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="s2">&#34;DistanceWalkingRunning&#34;</span><span class="w"> </span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">g</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="k">day</span><span class="o">=</span><span class="k">g</span><span class="p">.</span><span class="k">day</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">select</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="k">day</span><span class="p">,</span><span class="n">a</span><span class="p">.</span><span class="n">weight</span><span class="p">,</span><span class="n">e</span><span class="p">.</span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="s2">&#34;lean_weight&#34;</span><span class="p">,</span><span class="k">cast</span><span class="p">(</span><span class="k">c</span><span class="p">.</span><span class="s2">&#34;value&#34;</span><span class="o">*</span><span class="mi">100</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nb">numeric</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s2">&#34;fat_pct&#34;</span><span class="p">,</span><span class="n">d</span><span class="p">.</span><span class="s2">&#34;value&#34;</span><span class="w"> </span><span class="s2">&#34;bmi&#34;</span><span class="w"> </span><span class="k">from</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="k">select</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="n">start_date</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">day</span><span class="p">,</span><span class="k">min</span><span class="p">(</span><span class="n">start_date</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">min_start_date</span><span class="p">,</span><span class="k">min</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">weight</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="s2">&#34;BodyMass&#34;</span><span class="w"> </span><span class="k">group</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="k">day</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">)</span><span class="w"> </span><span class="n">a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="s2">&#34;BodyFatPercentage&#34;</span><span class="w"> </span><span class="k">c</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">min_start_date</span><span class="o">=</span><span class="k">c</span><span class="p">.</span><span class="n">start_date</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="s2">&#34;BodyMassIndex&#34;</span><span class="w"> </span><span class="n">d</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">min_start_date</span><span class="o">=</span><span class="n">d</span><span class="p">.</span><span class="n">start_date</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="s2">&#34;LeanBodyMass&#34;</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="n">min_start_date</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">start_date</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="k">day</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">t</span><span class="p">.</span><span class="k">day</span><span class="o">=</span><span class="n">f</span><span class="p">.</span><span class="k">day</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">order</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="n">f</span><span class="p">.</span><span class="k">day</span><span class="w"> </span><span class="k">asc</span><span class="w">
</span></span></span></code></pre></div><p>最后的数据如下：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-05.png" alt="weekly-review-17-05"  />
</p>
<p>完整的 csv 文件保存在 <a href="https://github.com/chensoul/chensoul/blob/main/data/health.csv">health.csv</a> 。有些记录中体重相关的数据为空，这是因为体重相关数据是通过其他和电子秤关联的 app 写进去的。<code>要想每天都有体重相关的数据，则需要每天使用电子称测量体重。</code></p>
<p>得到这份数据之后，就可以进行统计了，比如统计体重的变化、每天走路的步数等等。</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 732 元，明细如下：</p>
<ul>
<li>4月25日：117元，100元加油</li>
<li>4月26日：59元，买药</li>
<li>4月28日：419元，加油360元</li>
<li>4月29日：21元</li>
<li>4月30日：116元</li>
</ul>
<p>4 月累计支出共 3048 元，比 3 月支出 3520 元少了 472 元。主要支出来自这几个：</p>
<ul>
<li>交通：1177元，其中300元是缴纳 ETC 押金</li>
<li>餐饮：827元</li>
<li>购物：751元</li>
<li>娱乐：216元，看电影</li>
</ul>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-07.png" alt="weekly-review-17-07" style="width:50%;" />
<h2 id="健身">健身</h2>
<p>四月跑步记录如下，总计跑了16小时、125公里。更详细数据，可以参考我的 <a href="https://run.chensoul.com/">跑步主页</a>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-09.png" alt="weekly-review-17-09"  />
</p>
<h2 id="工作">工作</h2>
<h3 id="effective-java-3-笔记">Effective Java 3 笔记</h3>
<p>请参考 <a href="/posts/2023/05/05/enforce-noninstantiability-with-a-private-constructor/">《Effective Java 3》笔记4：用私有构造函数使类不可实例化</a> 和 《Effective Java 3》笔记7：<a href="/posts/2023/05/05/eliminate-obsolete-object-references/">排除过时的对象引用</a>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-17-10.png" alt="weekly-review-17-10"  />
</p>
<h3 id="flexypool">FlexyPool</h3>
<p>FlexyPool 是一个用于监控数据库连接池的开源工具。它支持监控和报告连接池的使用情况、性能和瓶颈，以及自动调整连接池的大小和行为。FlexyPool 支持多种流行的 Java 数据库连接池，例如 HikariCP、Tomcat JDBC Pool、C3P0、BoneCP 等等。</p>
<p>FlexyPool 主要提供以下功能：</p>
<ol>
<li>监控连接池的使用情况，包括连接数、请求数、等待时间、执行时间等等。</li>
<li>报告连接池的性能和瓶颈，例如最慢的查询、最频繁的错误、最短的连接时间等等。</li>
<li>自动调整连接池的大小和行为，以提高性能和减少资源消耗。</li>
<li>集成到常见的监控工具中，例如 Prometheus、Grafana、InfluxDB 等等。</li>
</ol>
<p>FlexyPool 的使用相对简单，只需要将其添加到应用程序的依赖中，然后配置连接池和 FlexyPool 的参数即可。例如，如果你正在使用 HikariCP 连接池，可以按照以下步骤配置 FlexyPool：</p>
<p>1、添加 FlexyPool 的依赖到应用程序的 pom.xml 文件中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.vladmihalcea.flexypool<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>flexy-pool-core<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>2.0.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>2、在应用程序的配置文件中，配置连接池和 FlexyPool 的参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1"># HikariCP 数据库连接池配置</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.dataSourceClassName</span><span class="o">=</span><span class="s">com.mysql.jdbc.jdbc2.optional.MysqlDataSource</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.dataSource.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/mydb</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.dataSource.user</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.dataSource.password</span><span class="o">=</span><span class="s">secret</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.minimumIdle</span><span class="o">=</span><span class="s">10</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.maximumPoolSize</span><span class="o">=</span><span class="s">20</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.idleTimeout</span><span class="o">=</span><span class="s">30000</span>
</span></span><span class="line"><span class="cl"><span class="na">hikari.poolName</span><span class="o">=</span><span class="s">hikariPool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># FlexyPool 配置</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metricsFactory</span><span class="o">=</span><span class="s">histogram</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metric.log.enabled</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metric.log.level</span><span class="o">=</span><span class="s">info</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metric.log.interval</span><span class="o">=</span><span class="s">10</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metric.prometheus.enabled</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">flexyPool.metric.prometheus.port</span><span class="o">=</span><span class="s">9090</span>
</span></span></code></pre></div><p>在这个配置中，我们首先配置了 HikariCP 连接池的参数，然后配置了 FlexyPool 的参数。这些参数包括度量工厂、日志和度量记录的级别、度量记录的间隔、是否启用 Prometheus 集成等等。</p>
<p>3、在应用程序启动时，将 FlexyPool 的代理对象添加到连接池中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// 获取连接池对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">FlexyPoolDataSource</span> <span class="n">flexyPoolDataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FlexyPoolDataSource</span><span class="o">&lt;&gt;(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span></code></pre></div><p>在这个代码中，我们首先获取 HikariCP 连接池对象，然后将其包装成 FlexyPool 的代理对象。这样，所有的数据库操作都将通过 FlexyPool 进行代理和监控。</p>
<p>Baeldung 网站上有一篇介绍 Spring Boot 中如何使用 FlexyPool 连接池监控工具的教程，名为 <a href="https://www.baeldung.com/spring-flexypool-guide">A Guide to FlexyPool in Spring Boot</a>。</p>
<p>这篇文章首先介绍了 FlexyPool 工具的作用，以及如何将其集成到 Spring Boot 应用程序中。FlexyPool 可以监控和报告连接池的使用情况、性能和瓶颈，以及自动调整连接池的大小和行为，以提高性能和减少资源消耗。</p>
<p>然后，文章介绍了如何在 Spring Boot 应用程序中使用 FlexyPool。具体步骤包括：</p>
<ol>
<li>添加 FlexyPool 的依赖到应用程序的 pom.xml 文件中。</li>
<li>配置连接池和 FlexyPool 的参数，例如 HikariCP 连接池的参数、FlexyPool 的度量工厂、日志和度量记录的级别、度量记录的间隔、是否启用 Prometheus 集成等等。</li>
<li>创建 FlexyPoolDataSource 对象，作为连接池的代理对象。该对象将自动创建和管理连接池，并使用 FlexyPool 工具进行监控和调整。</li>
<li>在应用程序中使用连接池，例如获取连接、执行 SQL 语句、关闭连接等等。</li>
</ol>
<p>最后，文章总结了一些连接池监控和优化的最佳实践，例如：</p>
<ol>
<li>使用 FlexyPool 工具监控连接池的使用情况和性能瓶颈，以及调整连接池的大小和行为，以提高性能和减少资源消耗。</li>
<li>配置连接池和 FlexyPool 的参数，以适应应用程序的负载和性能要求。</li>
<li>避免连接池泄漏和死锁等问题，例如及时关闭连接、设置合理的超时时间等等。</li>
</ol>
<h2 id="本周分享">本周分享</h2>
<p>大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中。我写了一个 python 脚本从 memos读取最近一周的 memos 记录。</p>
<ul>
<li><strong>2023-04-28 09:01:43</strong> 4个文生图AI工具 <a href="https://xugaoxiang.com/2023/04/27/4-text-to-image-ai-tools/">查看链接</a>  <code>#memos</code></li>
<li><strong>2023-04-27 13:29:50</strong> 这是 Jony Ive 的 LoveFrom 团队出品的一本关于乔布斯的书，书中几乎全部引用乔布斯自己的话，没有解读，更加「原汁原味」，同时也收录了一些珍贵的照片。 <a href="https://stevejobsarchive.com/book">查看链接</a>  <a href="https://limboy.me/books/make-something-wonderful/">查看链接</a>  <code>#memos</code></li>
<li><strong>2023-04-27 09:52:58</strong> Alpine, Tailwind, Deno, SQLite 我的本地服务四件套 <a href="https://limboy.me/posts/local-services-tools/">查看链接</a>  Update: 用 Remix 替代了 Alpine 和 Deno，确实方便。  <code>#web</code> <code>#memos</code></li>
<li><strong>2023-04-27 08:32:37</strong> FlexyPool 是一个用于监控数据库连接池的开源工具。它支持监控和报告连接池的使用情况、性能和瓶颈，以及自动调整连接池的大小和行为。FlexyPool 支持多种流行的 Java 数据库连接池，例如 HikariCP、Tomcat JDBC Pool、C3P0、BoneCP 等等。  FlexyPool 主要提供以下功能：  监控连接池的使用情况，包括连接数、请求数、等待时间、执行时间等等。  报告连接池的性能和瓶颈，例如最慢的查询、最频繁的错误、最短的连接时间等等。  自动调整连接池的大小和行为，以提高性能和减少资源消耗。  集成到常见的监控工具中，例如 Prometheus、Grafana、InfluxDB 等等。  <a href="https://www.baeldung.com/spring-flexypool-guide">查看链接</a>  <code>#java</code> <code>#memos</code></li>
<li><strong>2023-04-27 07:24:03</strong> 人一生中最重要的两天就是出生那天和发现人生目标的那天。   &mdash;&mdash;马克吐温  <code>#摘录</code></li>
<li><strong>2023-04-25 20:07:58</strong> 受 <a href="https://github.com/yihong0618/2023/blob/main/get_up.py">查看链接</a> 启发，在 iPhone上，创建了一个自动化捷径。当早起闹铃响起时，往memos发送一条早起记录，内容如下：  早起时间：2023年4月25日 20:02  今日语录： 有些事情本身我们无法控制，只好控制自己。  起床啦，喝杯咖啡，去跑步，每天进步一点点。  <code>#memos</code></li>
<li><strong>2023-04-25 08:57:03</strong> 【怎样种时间的种子？】  时间不够用，如何种时间的种子？ 1.走电梯时耐心等候自动关门，让更多的人进来，节约了他们的时间。（这还是一颗空间、房子的种子） 2.帮父母完成她的心愿或者事务性工作。 3.教会家里的小孩子如何节约父母的时间，这个就非常高级了。 4.路上随手捡走垃圾、不乱扔垃圾，让清洁工人有更多的时间。 5.帮助老师或者有更多能量的平台做事情。 6.经常性的做义工。 7.打电话长话短说，简洁明了节约对方的时间。 8.微信尽可能用打字，让对方快速简单地知道事情。 9.开会提前到，至少准时到，千万不能迟到，会议迟到，那种下的都是巨大的种子。 10.开车让人，腾出时间给别人。 11.开心收拾家务，让家人更加容易找到东西。 12.主动收拾公共办公区域，让同事快速有效工作。 13.不闲聊八卦浪费别人时间（这颗闲聊八卦的坏种子，还会让你在工作中没有人听从你的好意见，缺乏领导力） 14.参加任何会议提前准备，积极回应。 15.与别人分享时间的管理工具，分享获得富裕时间的好种子，这可也是法布施的好种子。 16.提醒、帮助或者关注拖延症的朋友。 17.不爽约父母安排的聚餐吃饭，不回家吃饭提前说。（恩田的大种子） 18.鼓励别人的梦想，真诚由心地赞美别人。  <code>#金刚智慧</code></li>
<li><strong>2023-04-24 19:21:02</strong> 有一个想法，可以写一段脚本从 telegram 或者 memos 读取上周的分享记录，然后，转换为 markdown 格式发布在周报中。这样，周报就可以变成半自动化了。 于是，写了一个 python 脚本实现了从 memos 读取记录。😁  <code>#skill</code></li>
<li><strong>2023-04-24 17:26:52</strong> 晚唐李商隐的《锦瑟》  锦瑟无端五十弦，一弦一柱思华年。 庄生晓梦迷蝴蝶，望帝春心托杜鹃。 沧海月明珠有泪，蓝田日暖玉生烟。 此情可待成追忆，只是当时已惘然。  <code>#诗词</code></li>
<li><strong>2023-04-24 14:07:04</strong> 使用一行代码为网站的输入框增加上 AI 能力。 <a href="https://www.enhanceai.dev/">查看链接</a>  <code>#skill</code></li>
<li><strong>2023-04-24 14:04:23</strong> 平常是糊里糊涂的，现在变得出人意外的小心谨慎，这正是由于报复的欲望，而这种欲望多么能够锻炼人！  —— 大仲马   <code>#摘录</code></li>
<li><strong>2023-04-24 14:03:59</strong> 使人疲乏的不是远方的深谷，而是鞋子里的一粒沙子。  —— 伏尔泰 <code>#摘录</code></li>
<li><strong>2023-04-24 11:00:30</strong> 📝 《Effective Java 3》笔记：避免创建不必要的对象 <code>#blog</code>   <a href="https://blog.chensoul.com/posts/2023/04/24/avoid-creating-unnecessary-objects/">查看链接</a></li>
<li><strong>2023-04-24 08:20:31</strong> 使用 Python 实现 RSS 转 Newsletter.   <a href="https://www.skyue.com/23042217.html">查看链接</a>  <code>#python</code></li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-16｜《灌篮高手》电影、《春山如笑》话剧</title>
      <link>https://blog.chensoul.com/posts/2023/04/25/weekly_review_16/</link>
      <pubDate>Tue, 25 Apr 2023 08:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/25/weekly_review_16/</guid>
      <description>前言 本篇是对 2023-04-17 到 2023-04-23 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这周的工作，手上累积了三个迭代版本，因为临近五一</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-01.png" alt="weekly-review-16-01"  />
</p>
<p>本篇是对 <code>2023-04-17</code> 到 <code>2023-04-23</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周的工作，手上累积了三个迭代版本，因为临近五一及其他原因，短期内无法发布上线。开发过程中，想着这些版本都会一个个上线，所以三个版本之间合并了代码，存在了依赖关系。以后，还是需要小版本迭代、上一个版本发布之后再从 main 分支合并代码。</p>
<p>这周先后看了《灌篮高手》电影、《春山如笑》话剧，体验了两种艺术表现形式，都让人失望。</p>
<p>利用空余时间，将 n8n 进行了调整，只将我在豆瓣、github、spotify、blog、strava上的活动同步到telegram，而直接不同步到 memos，单独创建一个 workflow 将 telegram 同步到 memos。这样 telegram 是一个对外分享的频道，而 memos 可以分享一些个人的心情或者说说。另外，为了减少对大家的干扰，不再将 rss 订阅内容同步到我的 <a href="https://t.me/chensoul_share">telegram 频道</a>。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-16.png" alt="weekly-review-16-16"  />
</p>
<h2 id="灌篮高手">灌篮高手</h2>
<p>4月20日，灌篮高手国内上映，抽时间下班和老婆去看了这场电影。看完之后发了一个朋友圈：</p>
<blockquote>
<p>两个小时的电影，一场篮球比赛，尽是回忆，留下的是半亩良田半亩差评</p>
</blockquote>
<p>这就是我对这个电影的评价。因为情怀而去看了这部电影，却被情怀出卖了，这年头情怀不值钱了么？整部电影以宫城良田为视角，不停的回忆，四十分钟的比赛节奏不停的中断。很多片段都是动画里的内容，没有多少新内容。流川枫的刻画太少、樱木花道还是那样勇猛、晴子就没出现几次。。。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-11.jpeg" alt="weekly-review-16-11"  />
</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-12.jpeg" alt="weekly-review-16-12"  />
</p>
<h2 id="看话剧">看话剧</h2>
<p>周六去中南剧场看了一个话剧《春山如笑》，这是第一次看话剧，第一次接触话剧这个艺术表现形式。相比较于电影，我还是更喜欢看电影。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-13.jpeg" alt="weekly-review-16-13"  />
</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-14.jpeg" alt="weekly-review-16-14"  />
</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-15.jpeg" alt="weekly-review-16-15"  />
</p>
<h2 id="理财">理财</h2>
<p>这周总计支出 292.5 元，明细如下：</p>
<ul>
<li>4月21日：59元，和同事一起吃饭</li>
<li>4月22日：232元，周末买菜做饭，买水果</li>
<li>4月24日：1.5元，跑步小腿抽筋，骑共享单车回公司</li>
</ul>
<p>四月累计支出共 2417 元，其中餐饮和购物占了一半。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-09.jpeg" alt="weekly-review-16-09" style="width:50%;" />
<h2 id="健身">健身</h2>
<p>每天走一万步，这周完成了目标。以后每天跑步的话，这个目标就很容易达成了，甚至这个目标会换成每天跑步。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-10.jpeg" alt="weekly-review-16-10" style="width:50%;" />
<p>从 strava 的训练日志，可以看到本周运动记录如下：</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-07.png" alt="weekly-review-16-07"  />
</p>
<p>从 strava 的训练日历，可以看到截至24日，本月运动了20天，23次，一共跑步了100公里。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-08.png" alt="weekly-review-16-08"  />
</p>
<h2 id="工作">工作</h2>
<h3 id="effective-java-3-笔记">Effective Java 3 笔记</h3>
<p>请参考《<a href="https://blog.chensoul.com/posts/2023/04/24/avoid-creating-unnecessary-objects/">《Effective Java 3》笔记：避免创建不必要的对象</a>》。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-02.png" alt="weekly-review-16-02"  />
</p>
<p>上面这个图是使用 <a href="https://shots.so/">Shots</a>  制作的，它是免费的，可以制作好看的图片，强烈推荐使用。</p>
<h2 id="本周分享">本周分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li><a href="https://www.skyue.com/23042217.html">使用 Python 实现 RSS 转 Newsletter</a></li>
<li><a href="https://www.bilibili.com/read/cv23249529">5种微服务注册中心该如何选型？</a></li>
<li><a href="https://allisonseboldt.com/5-years-of-indie-hacking/">5 Years of Indie Hacking</a></li>
<li><a href="https://feizhaojun.com/?p=3832">一个技术精致的网站：接口设计和图片加载</a></li>
<li><a href="https://newzone.top/posts/2022-11-03-ffmpeg_screen_recording.html">抛弃又贵又难用的录屏软件，3 分钟入门 FFmpeg</a></li>
<li><a href="http://weishu.me/2021/09/26/start-to-use-Rust/">开始学习和使用 Rust</a></li>
</ul>
<h3 id="一些工具">一些工具</h3>
<ul>
<li>
<p><a href="https://www.enhanceai.dev/">EnhanceAI</a> 使用一行代码为网站的输入框增加上 AI 能力。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-03.png" alt="weekly-review-16-03"  />
</p>
</li>
<li>
<p><a href="https://avatarmaker.com/">Avatar Maker</a> 一款在线 2D 动漫头像生成器，效果比较偏美漫风格。针对于半身头像的一些特征，提供了丰富的选项。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-04.png" alt="weekly-review-16-04"  />
</p>
</li>
<li>
<p><a href="https://markflow.app/">Markflow</a> 网页元素快速拷贝的工具，支持复制粘贴到 Figma，React，Html 里。这个网页中可以试用，Inspector 的效果还是很不错的。就是 Free Plan 每个月只能拷贝 5 个 elements 有点过于没诚意。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-05.png" alt="weekly-review-16-05"  />
</p>
</li>
<li>
<p><a href="https://shots.so/">Shots</a> 一款在线 Mockup 工具，能非常快速的做出套壳的效果图，内置的模版很多，样式调整的颗粒度也很细。适合独立开发快速出图。</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-16-06.png" alt="weekly-review-16-06"  />
</p>
</li>
</ul>
<h3 id="本周嘀咕">本周嘀咕</h3>
<p>其实，大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道或者我的 <a href="https://memos.chensoul.com/">memos</a> 中，如果有一个脚本可以读取 Telegram 或者 memos 接口获取上周的分享记录，则可以自动化生成分享内容了。于是，花了一点时间写了一个 python 脚本 <a href="https://github.com/chensoul/chensoul.github.io/blob/main/fetch_memos.py">fetch_memos.py</a> 来读取 memos 接口。</p>
<p>获取到的内容如下：</p>
<ul>
<li><strong>2023-04-21 08:31:23</strong> 📺 看过灌篮高手 <code>#douban</code> <code>#watched</code>   <a href="http://movie.douban.com/subject/35315950/">查看链接</a></li>
<li><strong>2023-04-18 20:33:47</strong> 📺 看过龙马精神 <code>#douban</code> <code>#watched</code>  <a href="http://movie.douban.com/subject/35595615/">查看链接</a></li>
<li><strong>2023-04-18 20:33:47</strong> 📖 最近在读Rust权威指南 <code>#douban</code> <code>#reading</code>  <a href="https://book.douban.com/subject/35081743/">查看链接</a></li>
<li><strong>2023-04-18 20:33:47</strong> 📖 最近在读Python编程 <code>#douban</code> <code>#reading</code>  <a href="https://book.douban.com/subject/35196328/">查看链接</a></li>
<li><strong>2023-04-18 20:33:47</strong> 📖 最近在读Python工匠 <code>#douban</code> <code>#reading</code>  <a href="https://book.douban.com/subject/35723705/">查看链接</a></li>
<li><strong>2023-04-18 18:40:50</strong> 📝 周报-15｜Umami升级到2.0、汉街蜡像馆、使用Strava跑步 <code>#blog</code>   <a href="https://blog.chensoul.com/posts/2023/04/18/weekly_review_15/">查看链接</a></li>
<li><strong>2023-04-17 17:48:43</strong> 🌟 chensoul starred chensoul/chensoul.github.io <code>#github</code> <code>#star</code>  <a href="https://github.com/chensoul/chensoul.github.io">查看链接</a></li>
<li><strong>2023-04-17 17:10:45</strong> 📝 《Effective Java 3》笔记：使用私有构造函数或枚举类型创建单例 <code>#blog</code>   <a href="https://blog.chensoul.com/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/">查看链接</a></li>
</ul>
<p>后续的想法：对上面内容进行分类，比如，将带有豆瓣、Github、Strava、Spotfy、Blog标签的内容，归纳为我最近的活动；将带有 tool、skill 等标签其他内容归纳为我的分享（技术相关）；将其他内容归纳为我发表的说说。</p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-7｜练车、博客优化、注册ChatGPT账号</title>
      <link>https://blog.chensoul.com/posts/2023/02/21/weekly_review_7/</link>
      <pubDate>Tue, 21 Feb 2023 00:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/02/21/weekly_review_7/</guid>
      <description>前言 本篇是对 2023-02-13 到 2023-02-19 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 练车 这周末开始练车，周六是第一次开自己的车，简单</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>本篇是对 <code>2023-02-13</code> 到 <code>2023-02-19</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<h2 id="练车">练车</h2>
<p>这周末开始练车，周六是第一次开自己的车，简单试驾了一样；周日则开了一百多公里，具体行程是从阳逻到新洲，从新洲单汉口，从汉口到光谷，从光谷回汉口。</p>
<p>这途中走了江北快速公路、二环、二七长江大桥、东湖隧道，从白天开到晚上夜行，经历过堵车，路上看到车祸后的事故现场。</p>
<p>一天下来，总共开车有五个多小时，感觉开车好累。作为新手，开车的过程中要全神贯注，铭记开车最重要的是慢这一原则，速度不敢过快。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-07-06.webp" alt="weekly-review-06"  />
</p>
<p>回顾这一天的练车过程，发现自己存在以下问题：</p>
<ul>
<li>
<p>对汽车不熟悉，不清楚车内每个按钮有什么作用。</p>
</li>
<li>
<p>不敢开的太快，油门踩到六十公里之后，就下意识地松油门。整个行驶过程中，平均车速大概在二十多公里每小时。</p>
</li>
<li>
<p>对交规不熟悉，第一次用高德地图，不知道什么时候改该变道、什么时候该走中间道路。要变道时候，不够果敢，打了灯光之后，没有快速变道，甚至还降速，等后面车子，而后面车子也在等我。</p>
</li>
<li>
<p>对车距不敏感。行驶过程中，和左右车辆相隔距离多近，没有一个直观的感受。观察后视镜，后面车距多远，有时候也判断不准，导致自己变道犹豫不决，险些擦碰。</p>
</li>
<li>
<p>变道、转弯，有时候忘记打灯。转弯时候，方向盘动得太早，没有等车过斑马线再打方向盘。左转弯时候，没有转大弯，导致车子有一次擦到了左边的石墩子，幸好不是很严重。</p>
</li>
<li>
<p>倒车和侧方停车不够熟练。</p>
</li>
<li>
<p>对上班路线不熟悉，不知道怎么进入公司楼下停车场。</p>
</li>
</ul>
<p>基于以上表现，接下来一周还是坐地铁上班。目前来说还是更喜欢坐地铁上班，可以看视频听音频，可以查看 RSS   订阅文章，可以写周报，可以闭目养神。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-07-07.png" alt="weekly-review-07"  />
</p>
<p>老婆给我买的实习期贴牌到了，后面司机看到这么可爱的牌子，估计以为是个妹子在开车吧，应该会喇叭下留情了吧😄。</p>
<p>接下来的周末，还要继续练车，和车子培养感情，从内到外熟悉车子，熟悉上班路线和交通规则，提高行驶速度。加油💪🏻！</p>
<h2 id="博客优化">博客优化</h2>
<p>这周重新对博客进行了优化，主要包括以下几个方面：</p>
<h3 id="1优化页面加载速度">1、优化页面加载速度</h3>
<p>每次打开博客首页，感觉页面加载有点慢，故想加快博客打开速度，第一个想到的是减少博客加载资源的次数，也就是去掉一些飞必须的 css 和 javascript 引用；其次，是对 css 进行压缩。</p>
<ul>
<li>去掉对 font-awesome css 的引用。这个对博客来说可有可无，所以直接去掉。</li>
<li>去掉对 jquery、bootstrap js 的引用。同样也不是必须的，自定义的 javascript 直接使用原生的操作就行。</li>
<li>移除未使用的 css。想参考这篇文章 <a href="https://dujun.io/cleancss-remove-unused-css.html">CleanCSS - 移除未使用的 CSS 代码</a>，对 css 进行瘦身，无奈文章中的服务器出现故障，无法访问服务。故，暂时搁浅。</li>
</ul>
<h3 id="2修改网站字体">2、修改网站字体</h3>
<p>参考这篇文章 <a href="https://www.albertaz.com/blog/web-font-best-practice">字体漫谈-网站字体最佳实践</a> 引入 open-sans 字体：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;preload&#34;</span> <span class="na">as</span><span class="o">=</span><span class="s">&#34;font&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;font/woff2&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/css/font/open-sans.css&#34;</span> <span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span>  <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/css&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/css/font/open-sans.css&#34;</span>  <span class="na">media</span><span class="o">=</span><span class="s">&#34;print&#34;</span> <span class="na">onload</span><span class="o">=</span><span class="s">&#34;this.media=&#39;all&#39;&#34;</span> <span class="p">/&gt;</span>
</span></span></code></pre></div><p>并修改网站 font-family 如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">body</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">font-family</span><span class="p">:</span> <span class="n">Open</span> <span class="n">Sans</span><span class="p">,</span><span class="n">system-ui</span><span class="p">,</span><span class="o">-</span><span class="n">apple-system</span><span class="p">,</span><span class="n">Arial</span><span class="p">,</span><span class="kc">sans-serif</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">word-break</span><span class="p">:</span> <span class="kc">break-word</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="3修改关于页面内容">3、修改关于页面内容</h3>
<p>参考这篇文章 <a href="https://rahuldkjain.github.io/gh-profile-readme-generator/">GitHub Profile README Generator</a>，对 GitHub <a href="https://github.com/chensoul/chensoul">首页</a> 进行改造，并通过 GitHub Action 同步到博客的 <a href="https://blog.chensoul.com/about/">关于</a> 页面。</p>
<h3 id="4dns-解析迁移到-cloudflare">4、dns 解析迁移到 cloudflare</h3>
<p>将 dns 解析从 AWS 迁移到 cloudflare，并开启 CDN 缓存。</p>
<h3 id="5博客测速">5、博客测速</h3>
<p>以上优化完成之后，在 <a href="https://pagespeed.web.dev/">PageSpeed Insights</a> 网站上对博客首页加载速度进行了测速。移动端测试结果为 93 分，如下图：</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-07-01.png" alt="weekly-review-07-01"  />
</p>
<p>影响评分的原因在于：</p>
<ul>
<li>First Contentful Paint (3G)</li>
<li>加载的 <a href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">bootstrap.min.css</a> 文件过大，包括了一些未使用的 CSS</li>
</ul>
<p>桌面端测试结果评分为 99 分：</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-07-02.png" alt="weekly-review-07-02"  />
</p>
<p>另外，试了一下使用 chatgpt 来给出网站优化建议，回答如下：</p>
<h2 id="n8n-调整">n8n 调整</h2>
<p>新增了 3 个 workflow：</p>
<ul>
<li>
<p>定时获取 <a href="https://www.bitstamp.net/api/v2/ticker/btcusd">BTC 价格</a>，并发送到 <a href="https://t.me/chensoul_share">我的电报群组</a></p>
</li>
<li>
<p>定时获取 spotify 喜欢列表，并发送到电报和 memos</p>
</li>
<li>
<p>每天早上 7 点，发送天气预报给微信</p>
</li>
</ul>
<p>修改了以下 workflow：</p>
<ul>
<li>将豆瓣最近动态同步到电报群组以及 <a href="https://memos.chensoul.com/">memos</a></li>
<li>将 GitHub 最近动态同步到电报群组以及  <a href="https://memos.chensoul.com/">memos</a></li>
<li>将 <a href="https://blog.chensoul.com/index.xml">博客 RSS</a> 同步到电报群组以及  <a href="https://memos.chensoul.com/">memos</a></li>
</ul>
<p>此外，在苹果手机上添加了两个捷径：</p>
<ul>
<li><a href="https://sharecuts.cn/shortcut/12640">捷径一</a>：调用 memos API 创建 memos</li>
<li><a href="https://www.icloud.com/shortcuts/d990253f43e148469af5e85c296961cf">捷径二</a>：对网站通过 RSSBud 获取 RSS 订阅地址并发送到电报的 flowerrss 机器人进行订阅</li>
</ul>
<h2 id="chatgpt-注册账号">ChatGPT 注册账号</h2>
<p>参考 <a href="https://sms-activate.org/cn/info/ChatGPT">注册ChatGPT详细指南</a> 注册账号，我在 sms-activate 网站是购买的巴西的手机号来接验证码。</p>
<p>解决地区受限问题：在浏览器地址栏里输入 <code>javascript:</code>，然后粘贴下面代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nb">window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="nx">i</span><span class="p">=&gt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">&#39;@@auth0spajs&#39;</span><span class="p">)))</span>
</span></span></code></pre></div><blockquote>
<p>如果还是无效，则清理浏览器 cookie 和 session，再刷新页面。</p>
</blockquote>
<p>账号创建成功之后，创建了几个 chat：</p>
<ul>
<li>『文案小助手』：在今后的会话里，你都将扮演我的文案纠错润色助理，并综合给出优化后的版本。</li>
<li>『专业后端开发老师』：在今后的对话里，你是一个专业的后端语言开发者老师，会回答我所有关于后端开发相关的问题，尤其是 Java、Pyhon、Go 语言，同时也包括 Shell 脚本、Makefile、Docker、K8S 等运维部署相关的疑问，每次都会给出代码示例，不需要我再额外提醒。</li>
<li>『专业前端开发老师』：在今后的对话里，你是一个专业的前端开发者老师，会回答我所有关于前端语言开发相关的问题，尤其是 TypeScript、React、Vuejs、CSS、Html 和 Nextjs，每次都会给出代码示例，不需要我再额外提醒。</li>
<li>『个人搜索引擎』：在今后的会话里，请你扮演我的专业搜索引擎，为我搜索查阅相关问题的答案和信息，每个问题尽量给出链接和出处，不需要我额外再说明。</li>
</ul>
<p>点击 <a href="https://platform.openai.com/account/api-keys">链接</a>，可以创建应用。给飞书用户准备的 ChatGPT 机器人，参看 <a href="https://github.com/bestony/ChatGPT-Feishu">ChatGPT-Feishu</a>。</p>
<h1 id="-好物分享">💻 好物分享</h1>
<h3 id="一些文章">一些文章</h3>
<ul>
<li>
<p>技术类：</p>
<ul>
<li>
<p><a href="https://writings.stephenwolfram.com/2019/02/seeking-the-productive-life-some-details-of-my-personal-infrastructure/">我的个人 IT 基础设施（英文）</a></p>
</li>
<li>
<p><a href="https://arun.is/blog/desk-setup/">打造我的家庭办公环境（英文）</a></p>
</li>
<li>
<p><a href="https://www.ruanyifeng.com/blog/2022/01/weekly-issue-191.html">科技爱好者周刊（第 191 期）：一个程序员的财务独立之路</a></p>
</li>
<li>
<p><a href="https://www.zlovezl.cn/articles/programming-is-still-hard-after-14-years/">入行 14 年，我还是觉得编程很难</a></p>
</li>
<li>
<p><a href="https://www.piglei.com/articles/how-to-design-config-file-for-software/">设计服务端软件配置的 4 条建议</a></p>
</li>
</ul>
</li>
<li>
<p>非技术类：</p>
<ul>
<li>
<p><a href="https://tingtalk.me/health/">除了健康，都是小事</a></p>
</li>
<li>
<p><a href="https://tingtalk.me/driving-test/">驾考指南</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="一些工具">一些工具</h3>
<h4 id="1亲戚关系计算器httpspasser-bycomrelationshipvue">1、<a href="https://passer-by.com/relationship/vue/#/">亲戚关系计算器</a></h4>
<h4 id="2imageoptimhttpsimageoptimcommac">2、<a href="https://imageoptim.com/mac">ImageOptim</a></h4>
<p>开源图片压缩软件：一款 Mac 小工具，可以方便的进行图片压缩，支持多格式、批量处理。值得注意的是，它压缩之后的图片会覆盖之前的图片。使用了这个工具之后，我就把  TinyPNG4Mac 卸载了。</p>
<h4 id="3沉浸式双语网页翻译扩展--immersive-translatehttpsimmersive-translateowenyoungcom">3、<a href="https://immersive-translate.owenyoung.com/">沉浸式双语网页翻译扩展 – immersive-translate</a></h4>
<p>强烈推荐这个网页翻译插件，和其他插件翻译整个页面相比，这个插件的优势是可以同时显示双语，中英文对照非常棒，是一个 <a href="https://github.com/immersive-translate/immersive-translate">开源</a> 的项目，完全免费使用。也支持 PDF，配合任何 <a href="https://epub-reader.online/">epub 在线阅读网站</a>对照翻译阅读书也非常方便。也支持了Deepl，腾讯翻译等等的翻译服务。开发者 <a href="https://twitter.com/OwenYoungZh">@OwenYoungZh</a></p>
<h4 id="4input-source-prohttpsinputsourceprozh-cn">4、<a href="https://inputsource.pro/zh-CN">Input Source Pro</a></h4>
<p>Input Source Pro 可以根据应用或是网站自动切换输入法，并且在切换窗口的时候还会贴心的提示当前的输入法是什么，比如设置 VSCode、iTerm、Xcode 默认为英文输入法，而笔记软件和企业微信默认为中文输入法，切换软件时再也不需要按 shift 键了！</p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>我的VPS服务部署记录</title>
      <link>https://blog.chensoul.com/posts/2023/01/25/notes-about-deploy-services-in-vps/</link>
      <pubDate>Wed, 25 Jan 2023 10:38:34 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/01/25/notes-about-deploy-services-in-vps/</guid>
      <description>服务器设置 [可选] 设置系统 Swap 交换分区 因为 vps 服务器的运行内存很小，所以这里先设置下 Swap # 1GB RAM with 2GB Swap sudo fallocate -l 2G /swapfile &amp;amp;&amp;amp; \ sudo dd if=/dev/zero of=/swapfile bs=1024 count=2097152 &amp;amp;&amp;amp; \ sudo chmod 600 /swapfile &amp;amp;&amp;amp; \ sudo mkswap</description>
      <content:encoded><![CDATA[<h2 id="服务器设置">服务器设置</h2>
<p><strong>[可选] 设置系统 Swap 交换分区</strong></p>
<p>因为 vps 服务器的运行内存很小，所以这里先设置下 Swap</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 1GB RAM with 2GB Swap</span>
</span></span><span class="line"><span class="cl">sudo fallocate -l 2G /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/swapfile <span class="nv">bs</span><span class="o">=</span><span class="m">1024</span> <span class="nv">count</span><span class="o">=</span><span class="m">2097152</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo chmod <span class="m">600</span> /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo mkswap /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo swapon /swapfile <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="nb">echo</span> <span class="s2">&#34;/swapfile swap swap defaults 0 0&#34;</span> <span class="p">|</span> sudo tee -a /etc/fstab <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo swapon --show <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>sudo free -h
</span></span></code></pre></div><h2 id="安装并生成证书">安装并生成证书</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl https://get.acme.sh <span class="p">|</span> sh -s <span class="nv">email</span><span class="o">=</span>czj.june@gmail.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.acme.sh/acme.sh --issue --server letsencrypt --dns dns_aws -d chensoul.com -d <span class="s1">&#39;*.chensoul.com&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.acme.sh/acme.sh --installcert -d chensoul.com -d *.chensoul.com  --cert-file /usr/local/nginx/ssl/chensoul.com.cer --key-file /usr/local/nginx/ssl/chensoul.com.key --fullchain-file /usr/local/nginx/ssl/fullchain.cer --ca-file /usr/local/nginx/ssl/ca.cer   --reloadcmd <span class="s2">&#34;sudo nginx -s reload&#34;</span>
</span></span></code></pre></div><h2 id="docker-安装和配置">Docker 安装和配置</h2>
<h3 id="docker-安装">Docker 安装</h3>
<p>具体过程可以参考网上文章。</p>
<h3 id="自定义网络">自定义网络</h3>
<p>参考 <a href="https://nginxproxymanager.com/advanced-config/#best-practice-use-a-docker-network">Best Practice: Use a Docker network </a>
，创建一个自定义的网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker network create custom
</span></span></code></pre></div><p>查看 docker 网络：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>root@vps ~<span class="o">]</span><span class="c1"># docker network ls</span>
</span></span><span class="line"><span class="cl">NETWORK ID     NAME            DRIVER    SCOPE
</span></span><span class="line"><span class="cl">68f4aeaa57bd   bridge          bridge    <span class="nb">local</span>
</span></span><span class="line"><span class="cl">6a96b9d8617e   custom          bridge    <span class="nb">local</span>
</span></span><span class="line"><span class="cl">4a8679e35f4d   host            host      <span class="nb">local</span>
</span></span><span class="line"><span class="cl">ba21bef23b04   none            null      <span class="nb">local</span>
</span></span></code></pre></div><blockquote>
<p>注意：bridge、host、none 是内部预先创建的网络。</p>
</blockquote>
<p>然后，在其他服务的 docker-compose.yml 文件添加：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">default</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">custom</span><span class="w">
</span></span></span></code></pre></div><p>例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pgsql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:13</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5433</span><span class="p">:</span><span class="m">5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_USER=chenzj</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_PASSWORD=chenzj@vps2021</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/postgres:/var/lib/postgresql/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">default</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">custom</span><span class="w">
</span></span></span></code></pre></div><h2 id="服务部署">服务部署</h2>
<h3 id="postgresql">Postgresql</h3>
<p>1、参考 <a href="/posts/2022/08/19/postgresql-install-deploy/">PostgreSql安装和部署</a> ，通过 docker-compose 安装，创建
postgresql.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pgsql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">postgres:13-alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">pgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5432</span><span class="p">:</span><span class="m">5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_USER=postgres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">POSTGRES_PASSWORD=admin@pg!</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/postgres:/var/lib/postgresql/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>2、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f postgresql.yaml up -d
</span></span></code></pre></div><h3 id="rsshub">Rsshub</h3>
<p>直接通过 Docker 安装运行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d --name rsshub -p 1200:1200 diygod/rsshub
</span></span></code></pre></div><p>配置 nginx ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">rsshub.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">rsshub.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:1200</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="uptime-kuma">Uptime Kuma</h3>
<p>参考 <a href="https://uptime.kuma.pet/">kuma</a>，使用 docker compose 部署，创建 uptime.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uptime-kuma</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">louislam/uptime-kuma:1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">uptime-kuma</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">~/.uptime-kuma:/app/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">3001</span><span class="p">:</span><span class="m">3001</span><span class="w">  </span><span class="c"># &lt;Host Port&gt;:&lt;Container Port&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span></code></pre></div><p>启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f uptime.yaml up -d
</span></span></code></pre></div><p>配置 nginx ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">uptime.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">uptime.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3001</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kn">proxy_set_header</span>   <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_http_version</span> <span class="mi">1</span><span class="s">.1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Upgrade</span> <span class="nv">$http_upgrade</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span>   <span class="s">Connection</span> <span class="s">&#34;upgrade&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f uptime.yaml down 
</span></span><span class="line"><span class="cl">docker pull louislam/uptime-kuma:1
</span></span><span class="line"><span class="cl">docker-compose -f uptime.yaml up -d
</span></span></code></pre></div><h3 id="umami">Umami</h3>
<p>参考 <a href="https://github.com/umami-software/umami/blob/master/docker-compose.yml">umami docker-compose.yml</a> ，使用 docker 镜像
umami:postgresql-latest 来安装 umami。</p>
<p>1、在 pqsql 容器创建 umami 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE USER umami WITH PASSWORD &#39;umami@pg&#39;;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE DATABASE umami owner=umami;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;GRANT ALL privileges ON DATABASE umami TO umami;&#34;</span>
</span></span></code></pre></div><p>然后，初始化数 umami 数据。先进入容器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker exec -it pgsql bash
</span></span></code></pre></div><p>进入 umami 数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">psql -U umami -d umami
</span></span><span class="line"><span class="cl"><span class="nv">umami</span><span class="o">=</span>&gt;
</span></span></code></pre></div><p>执行 <a href="https://github.com/umami-software/umami/blob/master/sql/schema.postgresql.sql"><strong>schema.postgresql.sql</strong></a> 文件内容。</p>
<p>2、通过 docker-compose 安装，创建 umami.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">umami</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">ghcr.io/umami-software/umami:postgresql-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">umami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3000:3000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">DATABASE_URL</span><span class="p">:</span><span class="w"> </span><span class="l">postgresql://umami:umami@pg@pgsql:5432/umami</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">DATABASE_TYPE</span><span class="p">:</span><span class="w"> </span><span class="l">postgresql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">HASH_SALT</span><span class="p">:</span><span class="w"> </span><span class="l">vps@2023</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>启动：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f umami.yaml up -d
</span></span></code></pre></div><p>3、设置自定义域名</p>
<p>umami.chensoul.com</p>
<p>4、配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">umami.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">umami.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>5、添加网站</p>
<p>访问 <a href="https://umami.chensoul.com/">https://umami.chensoul.com/</a>，默认用户名和密码为 admin/umami。登陆之后，修改密码，并添加网站。</p>
<p>6、升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f umami.yaml down 
</span></span><span class="line"><span class="cl">docker pull ghcr.io/umami-software/umami:postgresql-latest
</span></span><span class="line"><span class="cl">docker-compose -f umami.yaml up -d
</span></span></code></pre></div><h3 id="cusdis">Cusdis</h3>
<blockquote>
<p>VPS IP 可能被墙，所以可以使用三方云服务部署，具体参考<a href="https://www.pseudoyu.com/zh/2022/05/24/free_and_lightweight_blog_comment_system_using_cusdis_and_railway/">轻量级开源免费博客评论系统解决方案 （Cusdis + Railway）</a></p>
</blockquote>
<p>1、在 pqsql 容器创建 cusdis 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE USER cusdis WITH PASSWORD &#39;cusdis@pg&#39;;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE DATABASE cusdis owner=cusdis;&#34;</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;GRANT ALL privileges ON DATABASE cusdis TO cusdis;&#34;</span>
</span></span></code></pre></div><p>2、通过 docker-compose 安装，创建 cusdis.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cusdis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">djyde/cusdis:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3010:3000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">USERNAME=admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PASSWORD=cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">JWT_SECRET=vps@2023</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">NEXTAUTH_URL=https://cusdis.chensoul.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">HOST=https://cusdis.chensoul.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_TYPE=pgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_URL=postgresql://cusdis:cusdis@pg@pgsql:5432/cusdis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>以下配置为 EMAIL 配置可选，下面是使用 <a href="https://cusdis.com/doc#/features/notification?id=gmail">Gmail</a>
进行配置，需要首先开启两阶段验证并创建一个应用密码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">SMTP_HOST</span><span class="o">=</span><span class="s">smtp.gmail.com</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_PORT</span><span class="o">=</span><span class="s">465</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_SECURE</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_USER</span><span class="o">=</span><span class="s">your gmail email</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_PASSWORD</span><span class="o">=</span><span class="s">&lt;app password&gt;</span>
</span></span><span class="line"><span class="cl"><span class="na">SMTP_SENDER</span><span class="o">=</span><span class="s">your gmail email</span>
</span></span></code></pre></div><p>3、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f cusdis.yaml up -d
</span></span></code></pre></div><p>4、配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">cusdis.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">cusdis.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:3010</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kn">proxy_pass_header</span> <span class="s">Authorization</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="kn">proxy_pass_header</span> <span class="s">WWW-Authenticate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kn">if</span> <span class="s">(</span><span class="nv">$uri</span> <span class="p">=</span> <span class="s">&#39;/js/iframe.umd.js&#39;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        	<span class="kn">add_header</span> <span class="s">&#39;Access-Control-Allow-Origin&#39;</span> <span class="s">&#39;*&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        	<span class="c1">#add_header &#39;Access-Control-Allow-Origin&#39; &#39;http://localhost:1313&#39;;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>5、部署一个 Telegram 机器人，参考 <a href="https://cusdis.chensoul.com/doc#/advanced/webhook?id=official-telegram-bot">Official Telegram bot</a>。</p>
<p>6、升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f cusdis.yaml down 
</span></span><span class="line"><span class="cl">docker pull djyde/cusdis:latest
</span></span><span class="line"><span class="cl">docker-compose -f cusdis.yaml up -d
</span></span></code></pre></div><h3 id="memos">memos</h3>
<p>通过 docker-compose 安装，创建 memos.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">memos</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">neosmemo/memos:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">memos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">~/.memos/:/var/opt/memos</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5230</span><span class="p">:</span><span class="m">5230</span><span class="w">
</span></span></span></code></pre></div><p>启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f memos.yaml up -d
</span></span></code></pre></div><p>配置 nginx</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span> <span class="s">[::]:80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span> <span class="s">memos.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">listen</span>          <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">server_name</span>     <span class="s">memos.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate</span>      <span class="s">/usr/local/nginx/ssl/fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_certificate_key</span>  <span class="s">/usr/local/nginx/ssl/chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_cache</span>    <span class="s">shared:SSL:1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_session_timeout</span>  <span class="mi">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_ciphers</span>  <span class="s">HIGH:!aNULL:!MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">ssl_prefer_server_ciphers</span>  <span class="no">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:5230</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f memos.yaml down 
</span></span><span class="line"><span class="cl">docker pull neosmemo/memos:latest
</span></span><span class="line"><span class="cl">docker-compose -f memos.yaml up -d
</span></span></code></pre></div><h3 id="n8n">n8n</h3>
<p>1、在 pqsql 容器创建 n8n 数据库和用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE USER n8n WITH PASSWORD &#39;n8n@pg&#39;;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;CREATE DATABASE n8n owner=n8n;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it pgsql psql -U postgres -c <span class="s2">&#34;GRANT ALL privileges ON DATABASE n8n TO n8n;&#34;</span> <span class="p">;</span>
</span></span></code></pre></div><p>2、通过 docker 安装：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl">docker run -d  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> --name n8n <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> --network<span class="o">=</span>custom <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -p 5678:5678 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_TYPE</span><span class="o">=</span>postgresdb <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_POSTGRESDB_DATABASE</span><span class="o">=</span>n8n <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_POSTGRESDB_HOST</span><span class="o">=</span>pgsql <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_POSTGRESDB_PORT</span><span class="o">=</span><span class="m">5432</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_POSTGRESDB_USER</span><span class="o">=</span>n8n <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">DB_POSTGRESDB_PASSWORD</span><span class="o">=</span>n8n@pg <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">GENERIC_TIMEZONE</span><span class="o">=</span><span class="s2">&#34;Asia/Shanghai&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -e <span class="nv">WEBHOOK_URL</span><span class="o">=</span>https://n8n.chensoul.com/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> -v ~/.n8n:/home/node/.n8n <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> docker.n8n.io/n8nio/n8n <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> n8n start<span class="err">
</span></span></span></code></pre></div><p>通过 docker-compose 安装，创建 n8n.yaml：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.8&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">n8n</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">n8nio/n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_TYPE=postgresdb</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_HOST=pgsql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_PORT=5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_DATABASE=n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_USER=n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_POSTGRESDB_PASSWORD=n8n@pg</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=&#34;Asia/Shanghai&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">GENERIC_TIMEZONE=&#34;Asia/Shanghai&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">WEBHOOK_URL=https://n8n.chensoul.com/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">5678</span><span class="p">:</span><span class="m">5678</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/data/.n8n:/home/node/.n8n</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">custom</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">custom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><p>3、启动</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose -f n8n.yaml up -d
</span></span></code></pre></div><p>4、设置 nginx 转发</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:5678/</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_set_header</span> <span class="s">Connection</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_http_version</span> <span class="mi">1</span><span class="s">.1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">chunked_transfer_encoding</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_buffering</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">proxy_cache</span> <span class="no">off</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kn">access_log</span> <span class="s">/var/log/nginx/n8n.log</span> <span class="s">combined</span> <span class="s">buffer=128k</span> <span class="s">flush=5s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这里面的转发配置不对的话，会导致直接访问 5678 端口正常，但是访问 nginx 的话，workflow 会一直处于执行。</p>
<p>5、添加 workflow</p>
<p>参考这篇文章 <a href="http://stiles.cc/archives/237/">http://stiles.cc/archives/237/</a> ，目前我配置了以下 workflows，实现了 github、douban、rss、memos 同步到 Telegram。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/my-n8n-workflows.png" alt="my-n8n-workflows"  />
</p>
<p>workflows 参考：</p>
<ul>
<li><a href="https://reorx.com/blog/sharing-my-footprints-automation/">Reorx</a></li>
<li><a href="https://www.pseudoyu.com/zh/2022/09/19/weekly_review_20220919/">Pseudoyu</a></li>
<li><a href="https://raye.xlog.app/gou-jian-ge-xing-hua-de-shu-zi-ri-ji--zi-dong-hua-gong-zuo-liu-shi-xian-xin-xi-ju-he">raye</a></li>
<li><a href="https://zeabur.com/docs/marketplace/n8n">Zeabur</a></li>
</ul>
<p>6、升级</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose -f n8n.yaml down 
</span></span><span class="line"><span class="cl">docker pull n8nio/n8n
</span></span><span class="line"><span class="cl">docker-compose -f n8n.yaml up -d
</span></span></code></pre></div><h3 id="plausible">plausible</h3>
<p>1、下载代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl -L https://github.com/plausible/hosting/archive/master.tar.gz <span class="p">|</span> tar -xz
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> hosting-master
</span></span></code></pre></div><p>2、更新配置文件 plausible-conf.env</p>
<p>生成一个随机字符串：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ openssl rand -base64 <span class="m">64</span> <span class="p">|</span> tr -d <span class="s1">&#39;\n&#39;</span> <span class="p">;</span> <span class="nb">echo</span>
</span></span></code></pre></div><p>修改 plausible-conf.env：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">BASE_URL</span><span class="o">=</span>https://plausible.chensoul.com
</span></span><span class="line"><span class="cl"><span class="nv">SECRET_KEY_BASE</span><span class="o">=</span>ywewRup6H0pT1TK+qIPwdRdOYNixC/GAr5vy2IoTvzNJygD3Z7rPgQI6v1c/tUV/SsJQYxsfZ60yrn6kMiDxAA<span class="o">==</span>
</span></span></code></pre></div><p>3、设置反向代理</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-conf" data-lang="conf"><span class="line"><span class="cl"><span class="nv">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">listen</span> <span class="nv">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">listen</span> <span class="err">[::]:</span><span class="nv">80</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">server_name</span> <span class="nv">plausible.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">return</span> <span class="nv">301</span> <span class="nv">https</span><span class="err">://$</span><span class="kt">host</span><span class="err">$</span><span class="nv">request_uri</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">listen</span>          <span class="nv">443</span> <span class="nv">ssl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">server_name</span>     <span class="nv">plausible.chensoul.com</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">ssl_certificate</span>      <span class="err">/</span><span class="nv">usr</span><span class="err">/</span><span class="nv">local</span><span class="err">/</span><span class="nv">nginx</span><span class="err">/</span><span class="nv">ssl</span><span class="err">/</span><span class="nv">fullchain.cer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">ssl_certificate_key</span>  <span class="err">/</span><span class="nv">usr</span><span class="err">/</span><span class="nv">local</span><span class="err">/</span><span class="nv">nginx</span><span class="err">/</span><span class="nv">ssl</span><span class="err">/</span><span class="nv">chensoul.com.key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">ssl_session_cache</span>    <span class="nv">shared</span><span class="err">:</span><span class="nv">SSL</span><span class="err">:</span><span class="nv">1m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">ssl_session_timeout</span>  <span class="nv">5m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">ssl_ciphers</span>  <span class="nv">HIGH</span><span class="err">:!</span><span class="nv">aNULL</span><span class="err">:!</span><span class="nv">MD5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">ssl_prefer_server_ciphers</span>  <span class="kc">on</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">location</span> <span class="err">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">proxy_pass</span> <span class="nv">http</span><span class="err">://</span><span class="mf">127.0.0.1</span><span class="err">:</span><span class="nv">8000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="nv">proxy_set_header</span>   <span class="nv">X-Real-IP</span> <span class="err">$</span><span class="nv">remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">proxy_set_header</span>   <span class="nv">X-Forwarded-For</span> <span class="err">$</span><span class="nv">proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">proxy_set_header</span>   <span class="nv">Host</span> <span class="err">$</span><span class="kt">host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	    <span class="nv">proxy_http_version</span> <span class="nv">1.1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">proxy_set_header</span>   <span class="nv">Upgrade</span> <span class="err">$</span><span class="nv">http_upgrade</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">proxy_set_header</span>   <span class="nv">Connection</span> <span class="s">&#34;upgrade&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>4、启动服务</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose up -d
</span></span></code></pre></div><p>5、升级</p>
<p>Docker Compose 的更新比较简单：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose down 
</span></span><span class="line"><span class="cl">docker compose pull plausible
</span></span><span class="line"><span class="cl">docker compose up -d
</span></span></code></pre></div><p>6、访问 postgres 数据库</p>
<p>第一次登录时可能会要求验证邮箱地址，如果前面没有配置 SMTP，可以通过下面的命令认证所有当前用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose <span class="nb">exec</span> plausible_db psql -U postgres -d plausible_db -c <span class="s2">&#34;UPDATE users SET email_verified = true;&#34;</span>
</span></span></code></pre></div><p>进入 plausible_db 数据库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose <span class="nb">exec</span> plausible_db psql -U postgres -d plausible_db
</span></span></code></pre></div><p>7、博客添加统计代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">defer</span> <span class="nx">data</span><span class="o">-</span><span class="nx">domain</span><span class="o">=</span><span class="s2">&#34;blog.chensoul.com&#34;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&#34;https://plausible.chensoul.com/js/script.js&#34;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span></span></code></pre></div><p>8、配置 dns</p>
<p>在 dns 服务商添加 A 记录 plausible，稍等一下，访问 <a href="https://plausible.chensoul.com/">https://plausible.chensoul.com/</a></p>
<p>参考文章：</p>
<ul>
<li><a href="https://atpx.com/blog/docker-plausible-web-analytics/">使用 Plausible 自建网站流量统计分析工具</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
