<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mysql on ChenSoul</title>
    <link>https://blog.chensoul.cc/tags/mysql/</link>
    <description>Recent content in Mysql on ChenSoul</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 18 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024-01-18｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2024/01/18/til/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/18/til/</guid>
      <description>今天做了什么：
修改瑞吉外卖项目 reggie：
修改数据源配置，使用 HikariCP 数据源 修改接口返回字段和前端文件，code=0 表示成功 添加 mysql、redis 安装文档 添加 openresty lua 脚本实现 redis 缓存 基于 springboot 使用 sharding-jdbc 测试读写分离、分库分表。代码在：https://github.com/chensoul/sharding-examples
测试 RabbitMQ 生产、消费，代码在：https://github.com/chensoul/rabbitmq-examples
观看 B 站视频《【IT老齐455】SpringBoot、Caffine、Redis本地远程二级缓存》，视频中的代码在：second-cache</description>
    </item>
    <item>
      <title>2024-01-17｜MySQL 主从复制、ShardingJDBC实现读写分离、集成Springdoc&#43;Javadoc</title>
      <link>https://blog.chensoul.cc/posts/2024/01/17/til/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/17/til/</guid>
      <description>今天做了什么：
观看《2022年黑马程序员新版java课程》中 MySQL 主从复制和读写分离相关视频，使用 Docker 搭建 MySQL 主从复制环境。 foodie-cloud 项目实现读写分离并集成 Springdoc Docker 搭建 MySQL 主从复制环境 参考文章 ：基于 Docker 的 MySQL 主从复制搭建及原理（真正弄懂）
先创建两个容器：
version: &amp;#39;3.8&amp;#39; services: mysql-master: image: mysql:8 restart: always env_file: - .env ports: - &amp;#34;3307:3306&amp;#34; environment: - TZ=Asia/Shanghai - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} command: --default-authentication-plugin=mysql_native_password --explicit_defaults_for_timestamp=true --lower_case_table_names=1 --tls-version=&amp;#39;&amp;#39; --log-bin=mysql-bin --server-id=1 healthcheck: test: &amp;#34;/usr/bin/mysql --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} -e &amp;#39;SHOW DATABASES;&amp;#39;&amp;#34; interval: 5s timeout: 2s retries: 10 mysql-slave: image: mysql:8 restart: always env_file: - .env ports: - &amp;#34;3308:3306&amp;#34; environment: - TZ=Asia/Shanghai - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} command: --default-authentication-plugin=mysql_native_password --explicit_defaults_for_timestamp=true --lower_case_table_names=1 --tls-version=&amp;#39;&amp;#39; --log-bin=mysql-bin --server-id=2 healthcheck: test: &amp;#34;/usr/bin/mysql --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} -e &amp;#39;SHOW DATABASES;&amp;#39;&amp;#34; interval: 5s timeout: 2s retries: 10 .</description>
    </item>
  </channel>
</rss>
