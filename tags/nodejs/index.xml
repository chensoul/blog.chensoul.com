<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>nodejs on ChenSoul</title>
    <link>https://blog.chensoul.com/tags/nodejs/</link>
    <description>Recent content in nodejs on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Mar 2023 11:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.com/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>周报-11｜从语雀迁移到Obsidian</title>
      <link>https://blog.chensoul.com/posts/2023/03/20/weekly_review_11/</link>
      <pubDate>Mon, 20 Mar 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/03/20/weekly_review_11/</guid>
      <description>前言 ​ 图片：涨渡湖湿地水上森林公园 本篇是对 2023-03-13 到 2023-03-19 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这周的工作主要是重</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-04.jpeg" alt="weekly-review-11-04"  />
</p>
<p>​														              					图片：<em>涨渡湖湿地水上森林公园</em></p>
<p>本篇是对 <code>2023-03-13</code> 到 <code>2023-03-19</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周的工作主要是重构、优化系统，工作节奏比之前轻缓了很多。这周也开始了开车上下班，除去周五去医院做检查，一共开了 4 天车。从汉口到光谷，一共 29 公里，如果早上 6:30 出发，就只需要 50 分钟；如果 6:45 出发，竟然需要两个小时，真是无语了。无奈之下，只能每天早点出门早点到公司，然后，打完卡之后，在公司楼下走路。</p>
<p>这周开始心里默默定了一个 flag，就是每天走路 10000 步。看了一下微信运动，基本上达成了，除了周五晚上因为加班，而少走了 64 步。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-03.png" alt="weekly-review-11-03" style="width:67%;" />
<h2 id="从语雀迁移到obsidian">从语雀迁移到Obsidian</h2>
<p>上周提到开始使用格志 APP 来写日志，使用了一段时间之后，发现了一些缺点：</p>
<ul>
<li>部分功能收费</li>
<li>导出的 markdown 不支持图片显示</li>
<li>不支持本地存储</li>
</ul>
<p>于是，放弃了使用格志 APP，继而在使用了一段时间 Obsidian 之后，改为使用 Obsidian 来写日志和周报。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-02.png" alt="weekly-review-11-02" style="width:67%;" />
<p>为了不给自己太大压力，日报每天复盘内容包括以下几方面：</p>
<ul>
<li>
<p>今日待办</p>
</li>
<li>
<p>学习</p>
</li>
<li>
<p>工作</p>
</li>
<li>
<p>生活</p>
</li>
<li>
<p>健身</p>
</li>
</ul>
<h3 id="导出语雀文档为-markdown">导出语雀文档为 markdown</h3>
<p>参考 <a href="https://github.com/yuque/yuque-exporter">yuque/yuque-exporter</a> 文档，下载 yuque-exporter  之后进行导出操作，发现以下问题：</p>
<ul>
<li>该项目需要使用的 nodejs 版本为 18.0.4</li>
<li>nodejs 使用正确的版本还是导出失败</li>
</ul>
<p>于是，改为使用源码编译和运行导出。</p>
<p>1、先下载代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/yuque/yuque-exporter.git
</span></span></code></pre></div><p>2、修改 main.ts 中需要导出的语雀知识库地址为自己的仓库地址：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// Determining if an ESM module is main then run the code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s1">&#39;file:&#39;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="kr">module</span><span class="nx">Path</span> <span class="o">=</span> <span class="nx">fileURLToPath</span><span class="p">(</span><span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="kr">module</span><span class="nx">Path</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">urlPaths</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;chensoul/rose&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;chensoul/growup&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s1">&#39;chensoul/tech&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="nx">start</span><span class="p">({</span> <span class="nx">urlPaths</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>3、参考 <a href="https://www.yuque.com/yuque/developer/api#785a3731">文档</a> 申请语雀 TOKEN。</p>
<p>4、下载项目依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">npm i
</span></span></code></pre></div><p>5、运行项目，开始导出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">YUQUE_TOKEN</span><span class="o">=</span>XXXXXX npm start
</span></span></code></pre></div><blockquote>
<p>导出的文件在 storage 目录，接下来可以拷贝到 Obsidian 目录里。</p>
</blockquote>
<p>6、另外，可以对 yuque-exporter 源码做一些修改：</p>
<ul>
<li>导出的 markdown 文件不要有 frontmatter，修改 doc.ts 中 buildDoc 方法：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">async</span> <span class="kd">function</span> <span class="nx">buildDoc</span><span class="p">(</span><span class="nx">doc</span>: <span class="kt">TreeNode</span><span class="p">,</span> <span class="nx">mapping</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">string</span><span class="err">,</span> <span class="na">TreeNode</span><span class="p">&gt;)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">docDetail</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">readJSON</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">metaDir</span><span class="p">,</span> <span class="nx">doc</span><span class="p">.</span><span class="kr">namespace</span><span class="p">,</span> <span class="s1">&#39;docs&#39;</span><span class="p">,</span> <span class="sb">`</span><span class="si">${</span><span class="nx">doc</span><span class="p">.</span><span class="nx">url</span><span class="si">}</span><span class="sb">.json`</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">remark</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;settings&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">bullet</span><span class="o">:</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="nx">listItemIndent</span><span class="o">:</span> <span class="s1">&#39;one&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">use</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span> <span class="nx">replaceHTML</span> <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span> <span class="nx">relativeLink</span><span class="p">,</span> <span class="p">{</span> <span class="nx">doc</span><span class="p">,</span> <span class="nx">mapping</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span> <span class="nx">downloadAsset</span><span class="p">,</span> <span class="p">{</span> <span class="nx">doc</span><span class="p">,</span> <span class="nx">mapping</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">process</span><span class="p">(</span><span class="nx">docDetail</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">//  doc.content = frontmatter(doc) + content.toString();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">doc</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// FIXME: remark will transform `*` to `\*`
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">doc</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">replaceAll</span><span class="p">(</span><span class="s1">&#39;\\*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">doc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li>导出的段落之间增加换行，修改 doc.ts 中 replaceHTML 方法：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">replaceHTML() {</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">tree</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">htmlNodes</span> <span class="o">=</span> <span class="nx">selectAll</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="nx">tree</span><span class="p">)</span> <span class="kr">as</span> <span class="nx">Text</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">node</span> <span class="k">of</span> <span class="nx">htmlNodes</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;&lt;br /&gt;&#39;</span> <span class="o">||</span> <span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;&lt;br/&gt;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">node</span><span class="p">.</span><span class="kr">type</span> <span class="o">=</span> <span class="s1">&#39;text&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;\n\n\n&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>7、删除导出的 markdown 文件当中的锚点标签（例如：<code>&lt;a name=&quot;xx&quot;&gt;&lt;/a&gt;</code>）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> storage
</span></span><span class="line"><span class="cl"><span class="c1"># macos 上执行</span>
</span></span><span class="line"><span class="cl">find . -type f -name <span class="s1">&#39;*.md&#39;</span> -exec sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/&lt;a name=\&#34;[^\&#34;]*\&#34;&gt;&lt;\/a&gt;//g&#39;</span> <span class="o">{}</span> +
</span></span></code></pre></div><img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-01.png" alt="weekly-review-11-01" style="width:67%;" />
<p>在上面的示例代码中，我们使用了 sed 命令来删除 Markdown 文件中所有的类似 <code>&lt;a name=&quot;xx&quot;&gt;&lt;/a&gt;</code> 的锚点标签。其中：</p>
<ul>
<li><code>-i ''</code> 参数表示直接修改源文件，而不是输出到标准输出流。<code>''</code> 表示在 macOS 系统上备份修改前的文件，如果在 Linux 系统上使用该命令，可以省略该参数。</li>
<li><code>s/&lt;a name=\&quot;[^\&quot;]*\&quot;&gt;&lt;\/a&gt;//g</code> 表示用空字符串替换所有符合正则表达式 <code>&lt;a name=\&quot;[^\&quot;]*\&quot;&gt;&lt;\/a&gt;</code> 的字符串。该正则表达式匹配所有以 <code>&lt;a name=</code> 开头，以 <code>&quot;&gt;&lt;/a&gt;</code> 结尾的标签，且中间的文本不包含双引号。</li>
</ul>
<p>8、将导出的 markdown 文件中的本地图片批量上传到图床，操作方法：使用 typora 打开 storage 目录，然后依次点击 格式、图像、上传所有本地图片</p>
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li>
<p><a href="https://moelove.info/2023/03/21/GitHub-Actions-%E6%88%90%E6%9C%AC%E4%BC%98%E5%8C%96%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%9B%A2%E9%98%9F%E6%9B%B4%E5%85%B7%E7%AB%9E%E4%BA%89%E5%8A%9B/">GitHub Actions 成本优化：让你的团队更具竞争力</a></p>
</li>
<li>
<p><a href="https://juemuren4449.com/archives/open-gzip-on-nginx">Nginx 开启 gzip 压缩</a></p>
</li>
<li>
<p><a href="https://www.superheaoz.top/2022/06/57091/">Obsidan日记、记账与自动同步</a></p>
</li>
<li>
<p><a href="https://elmagnifico.tech/2023/03/16/Doprax-V2ray/">Doprax搭建免费V2ray节点</a></p>
</li>
<li>
<p><a href="https://elizen.me/posts/2023/03/hi-icloud/">Hi，土区 iCloud</a></p>
</li>
<li>
<p><a href="https://btsogiwudc.feishu.cn/docx/CgoJdHyWKopl3UxV12GcG3psnjf">国区使用土耳其iCloud服务，手把手保姆级上车教程</a></p>
</li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-9｜开车总结、博客该写什么、Web3批量空投</title>
      <link>https://blog.chensoul.com/posts/2023/03/07/weekly_review_9/</link>
      <pubDate>Tue, 07 Mar 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/03/07/weekly_review_9/</guid>
      <description>前言 本篇是对 2023-02-27 到 2023-03-05 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。 这周的主要工作是版本测试和项目上线，在大家的共同</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-07.png" alt="将军山"  />
</p>
<p>本篇是对 <code>2023-02-27</code> 到 <code>2023-03-05</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周的主要工作是版本测试和项目上线，在大家的共同努力下，最后是成功上线。</p>
<p>由于公司最近在裁员，留下来的都开始卷起来，每天晚上 8 点之后下班，这样平均一天的工作时间才有 11 小时。据说，旁边组的同事平均每天都是 12 个小时工作时间。裁了三位同事之后，我们软件组还有 8 人，算法组有 7 人，产品组有 6 人，终端组有 4 人。距集团公司六月上市还有两个月，裁员估计还会继续，同志们还需努力加班，争取被裁的不是自己。</p>
<p>这周还是没有开车，每天坐地铁上下班，刷刷 rss 看看 b 站视频，了解一些行业最新动态，同时也看看同样在写博客的那些独立开发者每周都在做什么，也学习一些新技术或者新技能。</p>
<p>这周接触了 web3 空投，花了几个小时使用自动加手动的方式刷了 120 多个账号。自动的方式，就是用 nodejs 代码在 bsc 网络批量创建账号并保存为 csv 文件；其次，通过 onekey web 上的批量转账功能，给每个账户转了 0.00125bnb。手动操作的部分就是，一个个的将账号私钥导入狐狸钱包，然后，用 lifeform cartoon 连接钱包账户，mint 成功之后，分享链接，再继续连接狐狸的下一个账号，重复上面操作。</p>
<p>因为太耗时间，所以只刷了 120 个账号。趁工作不忙的时候，用 chatgpt 搜索一下如何将上面的操作全部自动化。</p>
<p>周末两天，继续练车，从汉口到阳逻，再到新洲，最后去新洲的将军山爬山、去道观河看风景。算下来，最近这三个周末六天时间，我一共开了 800 多公里了。目前，暂时没有收到违规通知，但还是存在很多不足的地方。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-08.png" alt="weekly-review-09-08"  />
</p>
<h2 id="开车总结">开车总结</h2>
<p>这周开车，发现存在以下问题：</p>
<ul>
<li>1、停车还是会忘记熄火拔钥匙。</li>
<li>2、红绿灯口，停在大货车后面，并靠得近，前方视线受阻。经过红绿灯时，感觉像是闯了红灯。</li>
<li>3、超车时候，没有加速。</li>
<li>4、在山路行驶，入弯和出弯都会减速。</li>
<li>5、判断车距的经验不足。表现在行驶过程中、侧方停车、倒车入库。</li>
</ul>
<p>针对以上问题，晚上刷了一些视频，做了一些笔记，希望能够帮助自己改正上面这些问题。</p>
<ul>
<li>
<p>1、目光看远。入弯提前收油，脚备刹车。如果弯道过急，就带点刹车，如果车速你可以控制，直接收油过弯；出弯加油，眼睛看出弯口。身体跟随方向盘靠。这样，车速不降，可以控制车速。如果以 80 码速度过弯，且这个车还在车道内，这个车的速度你就控制住了。但凡有点越线，说明车速过快，你就要降低速度。</p>
</li>
<li>
<p>2、靠右行驶。会车时，主动靠右。转弯时，发现对面有来车，鸣笛示意。</p>
</li>
<li>
<p>3、路口远道的原则，跟小车不跟大车。如果跟着大车，留一个车位空间，让大车先走，确认绿灯再走。</p>
</li>
<li>
<p>4、红绿灯路口，提前减速，提醒后面车减速，不要急刹车，防止后面车追尾。特别是在绿灯闪的时候，不要没有减速，突然停车。否则后面车会以为你要加速冲过去，他也加速，这样，他就会追尾你。</p>
</li>
</ul>
<h2 id="博客该写什么">博客该写什么</h2>
<p>看到一篇博客 <a href="https://simonwillison.net/2022/Nov/6/what-to-blog-about/">What to blog about</a>，里面聊到了博客该写什么。一时兴起，想翻译成中文。于是，分别使用了 chrome 沉浸式翻译插件和 chatgpt 来翻译这篇文章，得到结果如下：</p>
<p>1、<strong>使用 <a href="https://chrome.google.com/webstore/detail/immersive-translate/bpoadfkcbjbfhfodiogcnhhhpibjhbnh">chrome 沉浸式翻译插件</a> 翻译这篇文章：</strong></p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-01.png" alt="weekly-review-01"  />
</p>
<p>总结来说，博客可以写两部分内容：</p>
<ul>
<li>今天学到的东西</li>
<li>正在做的项目</li>
</ul>
<p>2、<strong>使用 chatgpt 翻译这篇文章：</strong></p>
<p>请 chatgpt 翻译这篇文章 <a href="https://simonwillison.net/2022/Nov/6/what-to-blog-about/">https://simonwillison.net/2022/Nov/6/what-to-blog-about/</a> 为中文，得到的结果如下：</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-02.png" alt="weekly-review-02"  />
</p>
<p>标题：该写什么博客？</p>
<p>随着我写了一篇新的博客文章，我想分享一下我最近学到的关于写博客的一些事情。</p>
<p>一旦你开始写博客，你就必须保持一定的频率和持续的内容更新。这不仅是为了吸引和保持读者，也是为了让自己不断成长和发展。对于我来说，博客是我最有价值的自我表达形式之一，因为它迫使我去思考和组织我的想法，而这些想法可能会被淹没在日常生活的喧嚣中。</p>
<p>但是，选择博客内容可以很困难，特别是当你有多个感兴趣的话题和项目。以下是一些我最近学到的有关选择博客主题的技巧：</p>
<ul>
<li>每周至少写一篇文章</li>
</ul>
<p>尽管这可能听起来像一个艰巨的任务，但保持每周至少写一篇文章的频率可以帮助你保持写作的习惯和进展。这也有助于避免长时间的空白期，这可能会使你失去写作的动力和读者的兴趣。</p>
<ul>
<li>写下你的目标和想法清单</li>
</ul>
<p>在开始写博客之前，先写下你感兴趣的话题和你想写的内容。这可以帮助你保持焦点并避免浪费时间在想要的内容上。</p>
<ul>
<li>关注你的读者</li>
</ul>
<p>虽然你的博客可能是一个人的项目，但是考虑到你的读者的兴趣和需求是至关重要的。试着想一下你的读者会对哪些话题感兴趣，并尝试写出他们会发现有趣或有用的内容。</p>
<ul>
<li>保持开放和灵活</li>
</ul>
<p>不要把自己局限在一个主题或领域中。保持开放和灵活，尝试不同的话题和领域。这不仅可以让你发现新的兴趣和机会，还可以让你在写作方面更有创意和灵感。</p>
<ul>
<li>尝试不同的博客格式</li>
</ul>
<p>不仅可以通过写作来表达自己，还可以通过不同的博客格式来实现这一点。尝试写一篇教程、一篇演示、一篇评论或一篇问题解答文章。这可以让你更好地探索和展示你的技能和知识。</p>
<p>总之，写博客可以是一种令人满意的表达方式，可以帮助你探索和发现新的想法和机会。关键是要保持频率和灵活性，并尝试不同的博客格式。</p>
<h2 id="web3-批量空投">Web3 批量空投</h2>
<p>最近，参与了 <a href="https://cartoon.lifeform.cc/login">Lifeform Cartoon</a> 的空投，这是我第一次参与 web3。下面是记录一下操作步骤：</p>
<ul>
<li>下载狐狸钱包</li>
<li>批量创建账号</li>
<li>批量从一个账号转币到多个账号</li>
<li>批量导入账号到狐狸钱包</li>
<li>访问 Lifeform Cartoon 的邀请链接地址，比如：https://cartoon.lifeform.cc?referral=0x068b021B7d44e4795c6ec07234D66c144644dC37，然后，连接狐狸钱包里的账号，mint 之后，分享链接再使用新的链接重复上面动作</li>
</ul>
<p>上面的步骤，如果是几百个账号手动执行，则需要花费很长时间。作为一个程序员，有没有办法让程序自动实现呢？</p>
<p>在网上查找了一些资料，同时使用 chatgpt（备注：https://poe.com/chatgpt）找到了使用  nodejs 实现的相关代码。</p>
<h3 id="1批量创建账号">1、批量创建账号</h3>
<p>在BSC网络上使用Node.js编程语言批量创建账户并保存为CSV文件的完整代码，不使用csv-writer库</p>
<p><img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-03.png" alt="weekly-review-03"  />
</p>
<h3 id="2批量转账">2、批量转账</h3>
<p>在BSC网络上使用Node.js编程语言从一个账号批量转 0.0125bnb 到前面创建的多个账号，输出完整的可以运行的代码</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-05.png" alt="weekly-review-05"  />
</p>
<h3 id="3批量导入账号到-metamask-钱包">3、批量导入账号到 metamask 钱包</h3>
<p>通过编程实现在 BSC 网络 批量导入账号到浏览器的 metamask 钱包</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-04.png" alt="weekly-review-04"  />
</p>
<p>下一步，就是测试上面代码，实现全流程代码托管。</p>
<p><img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-06.png" alt="weekly-review-09-06"  />
</p>
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li><a href="https://feeds.feedblitz.com/~/729974291/0/baeldung~Service-Profiles-in-Docker">Service Profiles in Docker | Baeldung</a></li>
<li><a href="https://geekr.dev/posts/chatgpt-ultimate-guide">ChatGPT 终极指南</a></li>
<li><a href="https://reorx.com/makers-daily/004-prompts-and-parameters-transparancy/">谈谈我对 ChatGPT 应用的 prompt 的看法</a></li>
<li><a href="https://anotherdayu.com/2023/4866/">支持 OpenAI ChatGPT API 的优秀软件</a></li>
<li><a href="https://geekr.dev/posts/chatgpt-start">编程新手如何通过ChatGPT一天完成一个MVP产品</a></li>
<li><a href="https://github.com/Zhengqbbb/cz-git">让 OpenAI 生成 git commit message</a></li>
<li><a href="https://insights.thoughtworks.cn/good-code-five-qualities-cupid/">好代码的五个特质 - Thoughtworks洞见</a></li>
<li><a href="https://www.joshwcomeau.com/blog/how-i-built-my-blog/">我如何搭建自己的博客</a>（英文）</li>
<li><a href="https://zedex.cn/8399.html">从Mac开箱开始 设置一个开发环境 - ZedeX</a></li>
<li><a href="https://mp.weixin.qq.com/s/eil_zYS4ISK-4ojezzP-pg">创始人CEO为什么要写作（原创5000字长文尝试说透）</a></li>
<li><a href="https://mp.weixin.qq.com/s/xfphy67PTbtjeggo7LpjSA">从抄书到开源之巅：章亦春的程序人生</a></li>
</ul>
<h3 id="一些工具">一些工具</h3>
<h4 id="1poecomhttpspoecom">1、<a href="https://poe.com/"><strong>poe.com</strong></a></h4>
<p>美国问答网站Quora开发的ChatBot产品，整合不同聊天机器，包括ChatGPT。响应速度非常快，比chat.openai.com的免费账户快非常多。有ios版，手机也能用了。ios版有社区，可以分享聊天记录。</p>
<h4 id="2founderbeatshttpsfounderbeatscom">2、<a href="https://founderbeats.com/"><strong>FounderBeats</strong></a></h4>
<p>Founder Beats是一家面向初创企业和创业者的音乐制作工作室，专门为他们提供高质量的背景音乐和音效。Founder Beats的音乐库包含了各种类型的音乐，如流行、摇滚、电子、嘻哈、民谣等，以及各种音效和配乐，可以满足不同用户的需求。Founder Beats的音乐都是由专业音乐人和制作人制作的，具有高品质和原创性。</p>
<p>除了音乐制作，Founder Beats还提供了其他服务，如音频制作、混音和母带处理等，可以帮助客户制作高质量的音频内容。Founder Beats的团队拥有丰富的音乐制作和音频处理经验，可以为客户提供专业的建议和支持。</p>
<p>Founder Beats的客户包括初创企业、广告代理商、视频制作公司、游戏开发商等，他们可以使用Founder Beats的音乐和音效来增强他们的品牌形象、视频内容、游戏体验等。Founder Beats的定价模式灵活，客户可以根据自己的需求选择适合自己的价格和许可证。</p>
<h4 id="3manticore-searchhttpsgithubcommanticoresoftwaremanticoresearch">3、<a href="https://github.com/manticoresoftware/manticoresearch">Manticore Search</a></h4>
<p>Manticore Search是一款开源的全文搜索引擎，支持高性能的搜索和分析。它是Sphinx Search的后继者，使用了类似的架构和API，并且在功能和性能方面有很多改进。Manticore Search使用C++编写，具有高效的索引和查询引擎，可以处理大量的数据和高并发访问。它支持多种数据源和数据格式，包括MySQL、PostgreSQL、XML、JSON、CSV等。</p>
<p>Manticore Search提供了丰富的查询语言和API，包括SQL、SPHINQL和HTTP API等，可以满足不同用户的需求。它支持全文搜索、模糊搜索、短语搜索、近义词搜索、地理位置搜索等多种搜索方式，并且支持高级过滤、排序、分组、聚合等功能。Manticore Search还具有高可用性和可扩展性，支持主从复制、分片、集群等部署方式，可以满足不同规模和负载的应用场景。</p>
<p>Manticore Search是一款使用广泛的全文搜索引擎，它被广泛应用于电子商务、社交网络、新闻媒体、在线教育等领域，帮助用户快速检索和发现所需信息。Manticore Search在GitHub上开源，拥有活跃的社区和开发者，用户可以通过GitHub社区获得支持和贡献代码。</p>
<h4 id="4unsilencehttpsgithubcomlagmoellertimunsilence">4、<a href="https://github.com/lagmoellertim/unsilence">Unsilence</a></h4>
<p>unsilence是一个基于Python的命令行工具，用于检测和修复音频文件中的静音区域。它可以帮助用户自动检测和删除音频文件中的静音部分，从而提高音频的质量和可听性。unsilence支持多种音频格式，如MP3、WAV、OGG等，可以在不损失音频质量的情况下删除静音。</p>
<p>使用unsilence非常简单，用户只需在命令行中输入unsilence命令和音频文件名，unsilence就会自动检测和修复音频文件中的静音部分。用户也可以通过设置参数来调整unsilence的处理方式，如设置最小静音长度、最小音量阈值等。</p>
<h4 id="5css-bedhttpswwwcssbedcom">5、<a href="https://www.cssbed.com/">CSS Bed</a></h4>
<p>这个网页收集并展示各种无类的极简化 CSS 框架。如果你想选一个简单的 CSS 框架，可以看看它</p>
<h4 id="6lightrunhttpslightruncom">6、<a href="https://lightrun.com/">lightrun</a></h4>
<p>lightrun.com是一款基于云的实时Java和Kotlin应用程序调试和观察工具。它提供了一种无需修改代码即可实时调试Java和Kotlin应用程序的方式，减少了开发人员的调试时间，提高了应用程序的稳定性和可靠性。lightrun.com还提供了实时日志查看和分析，可以帮助开发人员快速定位问题和解决问题，提高了应用程序的可维护性。</p>
<p>lightrun.com可以与常见的Java开发工具集成，如Eclipse、IntelliJ IDEA和VS Code。它还支持多种操作系统和云平台，如Windows、Linux、Docker、AWS和Azure等。开发人员可以使用lightrun.com来调试和监视本地应用程序，也可以在云端快速诊断生产环境中的问题。</p>
<p>lightrun.com采用了安全的云架构，并且使用了端到端加密来保护用户数据的安全性。它还提供了灵活的计费模式，用户可以根据自己的需求选择适合自己的计费方式。</p>
<h4 id="7httpsgithubcomappscr-gpt">7、https://github.com/apps/cr-gpt</h4>
<p>基于 ChatGPT 的 Github Code Review 机器人</p>
<h4 id="8妙记多-mojidoc-httpsmojidoccom">8、<a href="https://mojidoc.com/">妙记多 Mojidoc </a></h4>
<p>新一代生产协同工具</p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
