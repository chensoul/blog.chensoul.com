<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>nodejs on ChenSoul</title>
    <link>https://blog.chensoul.com/tags/nodejs/</link>
    <description>Recent content in nodejs on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 12 Oct 2023 11:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.com/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端学习路线图</title>
      <link>https://blog.chensoul.com/posts/2023/10/12/frontend-roadmap/</link>
      <pubDate>Thu, 12 Oct 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/10/12/frontend-roadmap/</guid>
      <description>前端学习路线图:
Internet： HTTP DNS HTML Basic Semantic HTML Forms and Validations Accessibility SEO CSS Basic Layout Responsive Design JavaScript Baisc DOM Fetch API / Ajax Package Manager npm pnpm yarn Framework Angular Vue.js React Svelte Solid JS Qwik Writing CSS Tailwind Radix UI Shadcn UI CSS Architecture BEM CSS Preprocessors SASS PostCSS Build Module Bundlers parcel Rollup Webpack esbuild Vite Task Runners npm scripts Linters and Formatters Prettier ESLint Test Vitest Jest Playwirte Cypress Authentication Strategies JWT OAuth SSO Basic Auth Session Auth Web Security Basics CORS HTTPS CSP OWASP Security Risks Web Components HTML Templates Custom Elements Shadow DOM Type Checkers TypeScript Server Side Rendering(SSR) Svelte Svelte Kit Vue.</description>
      <content:encoded><![CDATA[<p>前端学习路线图:</p>
<ul>
<li>Internet：
<ul>
<li>HTTP</li>
<li>DNS</li>
</ul>
</li>
<li>HTML
<ul>
<li>Basic</li>
<li>Semantic HTML</li>
<li>Forms and Validations</li>
<li>Accessibility</li>
<li>SEO</li>
</ul>
</li>
<li>CSS
<ul>
<li>Basic</li>
<li>Layout</li>
<li>Responsive Design</li>
</ul>
</li>
<li>JavaScript
<ul>
<li>Baisc</li>
<li>DOM</li>
<li>Fetch API / Ajax</li>
</ul>
</li>
<li>Package Manager
<ul>
<li>npm</li>
<li>pnpm</li>
<li>yarn</li>
</ul>
</li>
<li>Framework
<ul>
<li>Angular</li>
<li>Vue.js</li>
<li>React</li>
<li>Svelte</li>
<li>Solid JS</li>
<li>Qwik</li>
</ul>
</li>
<li>Writing CSS
<ul>
<li>Tailwind</li>
<li>Radix UI</li>
<li>Shadcn UI</li>
</ul>
</li>
<li>CSS Architecture
<ul>
<li>BEM</li>
</ul>
</li>
<li>CSS Preprocessors
<ul>
<li>SASS</li>
<li>PostCSS</li>
</ul>
</li>
<li>Build
<ul>
<li>Module Bundlers
<ul>
<li>parcel</li>
<li>Rollup</li>
<li>Webpack</li>
<li>esbuild</li>
<li>Vite</li>
</ul>
</li>
<li>Task Runners
<ul>
<li>npm scripts</li>
</ul>
</li>
<li>Linters and Formatters
<ul>
<li>Prettier</li>
<li>ESLint</li>
</ul>
</li>
</ul>
</li>
<li>Test
<ul>
<li>Vitest</li>
<li>Jest</li>
<li>Playwirte</li>
<li>Cypress</li>
</ul>
</li>
<li>Authentication Strategies
<ul>
<li>JWT</li>
<li>OAuth</li>
<li>SSO</li>
<li>Basic Auth</li>
<li>Session Auth</li>
</ul>
</li>
<li>Web Security Basics
<ul>
<li>CORS</li>
<li>HTTPS</li>
<li>CSP</li>
<li>OWASP Security Risks</li>
</ul>
</li>
<li>Web Components
<ul>
<li>HTML Templates</li>
<li>Custom Elements</li>
<li>Shadow DOM</li>
</ul>
</li>
<li>Type Checkers
<ul>
<li>TypeScript</li>
</ul>
</li>
<li>Server Side Rendering(SSR)
<ul>
<li>Svelte
<ul>
<li>Svelte Kit</li>
</ul>
</li>
<li>Vue.js
<ul>
<li>Nuxt.js</li>
</ul>
</li>
<li>Angular
<ul>
<li>Universal</li>
</ul>
</li>
<li>React
<ul>
<li>Next.js</li>
<li>Remix</li>
</ul>
</li>
</ul>
</li>
<li>GraphQL
<ul>
<li>Apollo</li>
<li>Relay Modern</li>
</ul>
</li>
<li>Static Site Generators
<ul>
<li>Vuepress</li>
<li>Jekyll</li>
<li>Hugo</li>
<li>Nuxt.js</li>
<li>Astro</li>
<li>Eleventy</li>
<li>Next.js</li>
<li>Remix</li>
</ul>
</li>
<li>Progressive Web App</li>
<li>Mobel Applications
<ul>
<li>React Native</li>
<li>Flutter</li>
<li>Ionic</li>
<li>NativeScript</li>
</ul>
</li>
<li>Desktop Applications</li>
<li>Bonus Content</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>React入门：初始化应用的两种方法</title>
      <link>https://blog.chensoul.com/posts/2023/09/22/react-create-project/</link>
      <pubDate>Fri, 22 Sep 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/09/22/react-create-project/</guid>
      <description>在 React 中，您可以使用多种方法来初始化一个应用程序。以下是几种常见的方法：
使用 Create React App（CRA）。Create React App 是一个官方提供的脚手架工具，用于快速创建 React 应用程序的基本结构和配置。 使用 Vite。Vite 是一个快速、简单且现代化的前端构建工具。 create-react-app create-react-app 是一个用于快速创建 React 应用程序的命令行工具。它提供了一个简单的方式来设置和配置一个全新的 React 项目，包括构建、开发服务器和其他常见的配置。
要使用 create-react-app 创建一个新的 React 项目，您可以按照以下步骤进行操作：
安装 Node.js
创建 React 应用：一旦你安装了 Node.js，你可以使用 create-react-app 工具快速创建一个新的 React 应用。
在命令行中运行以下命令来全局安装 create-react-app：
npm install -g create-react-app 创建新的 React 应用：使用以下命令创建一个新的 React 应用： create-react-app my-app 提示：
npx 是在运行命令时临时安装和执行包的工具。这意味着您无需全局安装 create-react-app，而是在运行 npx create-react-app 命令时自动下载和使用最新版本的 create-react-app。
npx create-react-app my-app 这将在当前目录下创建一个名为 &amp;quot;my-app&amp;quot; 的新文件夹，并在此文件夹里做了如下工作：
为你的应用程序安装了一些 npm 包； 写入 react 应用启动所需要的脚本文件； 创建一系列结构化的子文件夹和文件； 如果你的电脑上安装了 git 的话，顺便帮你把 git 仓库也建好。 如果你的电脑上安装了 yarn 的话，create-react-app 会默认使用 yarn 而非 npm。如果你同时安装了 yarn 和 npm，但你希望使用 npm 的话，在 create-react-app 的时候需要输入 --use-npm ：</description>
      <content:encoded><![CDATA[<p>在 React 中，您可以使用多种方法来初始化一个应用程序。以下是几种常见的方法：</p>
<ol>
<li>使用 Create React App（CRA）。Create React App 是一个官方提供的脚手架工具，用于快速创建 React 应用程序的基本结构和配置。</li>
<li>使用 Vite。Vite 是一个快速、简单且现代化的前端构建工具。</li>
</ol>
<h2 id="create-react-app">create-react-app</h2>
<p><code>create-react-app</code> 是一个用于快速创建 React 应用程序的命令行工具。它提供了一个简单的方式来设置和配置一个全新的 React 项目，包括构建、开发服务器和其他常见的配置。</p>
<p>要使用 <code>create-react-app</code> 创建一个新的 React 项目，您可以按照以下步骤进行操作：</p>
<ol>
<li>
<p>安装 Node.js</p>
</li>
<li>
<p>创建 React 应用：一旦你安装了 Node.js，你可以使用 <code>create-react-app</code> 工具快速创建一个新的 React 应用。</p>
<p>在命令行中运行以下命令来全局安装 <code>create-react-app</code>：</p>
</li>
</ol>
<pre tabindex="0"><code>npm install -g create-react-app
</code></pre><ol start="3">
<li>创建新的 React 应用：使用以下命令创建一个新的 React 应用：</li>
</ol>
<pre tabindex="0"><code>create-react-app my-app
</code></pre><blockquote>
<p>提示：</p>
<p><code>npx</code> 是在运行命令时临时安装和执行包的工具。这意味着您无需全局安装 <code>create-react-app</code>，而是在运行 <code>npx create-react-app</code> 命令时自动下载和使用最新版本的 <code>create-react-app</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">npx create-react-app my-app
</span></span></code></pre></div></blockquote>
<p>这将在当前目录下创建一个名为 <code>&quot;my-app&quot;</code> 的新文件夹，并在此文件夹里做了如下工作：</p>
<ul>
<li>为你的应用程序安装了一些 npm 包；</li>
<li>写入 react 应用启动所需要的脚本文件；</li>
<li>创建一系列结构化的子文件夹和文件；</li>
<li>如果你的电脑上安装了 git 的话，顺便帮你把 git 仓库也建好。</li>
</ul>
<blockquote>
<p>如果你的电脑上安装了 yarn 的话，create-react-app 会默认使用 yarn 而非 npm。如果你同时安装了 yarn 和 npm，但你希望使用 npm 的话，在 create-react-app 的时候需要输入 <code>--use-npm</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">create-react-app my-app --use-npm
</span></span></code></pre></div></blockquote>
<ol start="4">
<li>进入应用目录：进入新创建的应用程序目录。在命令行中运行以下命令：</li>
</ol>
<pre tabindex="0"><code>cd my-app
</code></pre><ol start="5">
<li>启动开发服务器：运行以下命令来启动 React 开发服务器：</li>
</ol>
<pre tabindex="0"><code>npm start
</code></pre><p>先前由 create-react-app 创建的脚本会启动一个地服务 <a href="localhost:3000">localhost:3000</a>，并打开你的默认浏览器来访问这个服务。成功启动浏览器的话，你的浏览器上会显示如下画面：</p>
<p>
  <img loading="lazy" src="https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started/default-create-react-app.png" alt=""  /></p>
<ol start="6">
<li>
<p>应用结构</p>
<p>create-react-app 提供了开发 React 应用所需的工具。它的初始文件结构如下：</p>
<pre tabindex="0"><code>my-app
├── README.md
├── node_modules
├── package.json
├── package-lock.json
├── .gitignore
├── public
│   ├── favicon.ico
│   ├── index.html
│   └── manifest.json
└── src
    ├── App.css
    ├── App.js
    ├── App.test.js
    ├── index.css
    ├── index.js
    ├── logo.svg
    └── reportWebVitals.js
</code></pre><p>各目录和文件说明：</p>
<ul>
<li>
<p>目录 <strong><code>src</code></strong> 是我们花费时间最多的地方，因为它是我们 React 应用源码存放的目录。</p>
</li>
<li>
<p>目录 <strong><code>public</code></strong> 包含了开发应用时浏览器会读取的文件，其中最重要的就是 <code>index.html</code>。React 将目录 <strong><code>src</code></strong> 中的代码嵌入这个文件，从而浏览器才能运行此文件。 <code>index.html</code>中的有些内容关乎 create-react-app 的运作，因此除非你知道自己在做什么样的修改，否则不建议编辑这个文件。当然，你可以修改<code>index.html</code>中的 title 元素的内容来表现此应用程序通俗易懂的名称。</p>
</li>
<li>
<p>目录 <code>public</code> 会在建立并部署此应用的时候更新。</p>
</li>
<li>
<p>文件 <code>package.json</code> 包含了 Node.js/npm 为了建立该应用程序所管理着的文件信息。</p>
</li>
</ul>
</li>
<li>
<p>编辑 React 组件。在 <code>src</code> 目录中，可以找到名为 <code>App.js</code> 的文件。这是 React 应用的主要组件。你可以编辑该文件以添加、修改或删除组件的内容。</p>
<p>create-react-app 添加了一些我们在项目中完全不会用到的文件。</p>
<ul>
<li>我们不打算写每个组件的样式表，所以首先从 <code>App.js</code> 的顶部删除 <code>App.css</code> 的导入。</li>
<li>我们也不打算使用 <code>logo.svg</code> 文件，所以也要删除这个导入。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> src
</span></span><span class="line"><span class="cl"><span class="c1"># Delete a few files</span>
</span></span><span class="line"><span class="cl">rm -- App.test.js App.css logo.svg reportWebVitals.js setupTests.js
</span></span><span class="line"><span class="cl"><span class="c1"># Move back up to the root of the project</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ..
</span></span></code></pre></div><p>修改 src/App.js 如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="s2">&#34;./App.css&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&#34;App&#34;</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="o">&lt;</span><span class="nx">header</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">React</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="o">&lt;</span><span class="err">/header&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</span></span></code></pre></div><p>修改 src/index.js 如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s2">&#34;react&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s2">&#34;react-dom/client&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="s2">&#34;./index.css&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s2">&#34;./App&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;root&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">root</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="o">&lt;</span><span class="err">/React.StrictMode&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></div></li>
<li>
<p>查看应用程序：在你进行编辑并保存代码后，开发服务器将自动重新加载并刷新应用程序。你可以在默认浏览器中查看更新后的应用程序。</p>
</li>
</ol>
<h2 id="vite">vite</h2>
<p>要使用 Vite 创建一个 React 项目，可以按照以下步骤进行操作：</p>
<ol>
<li>确保你已经安装了 Node.js。</li>
<li>安装 Vite：在命令行中运行以下命令来全局安装 Vite：</li>
</ol>
<pre tabindex="0"><code>npm install -g create-vite
</code></pre><ol start="3">
<li>创建新的 React 项目：使用以下命令创建一个新的 React 项目：</li>
</ol>
<pre tabindex="0"><code>create-vite my-app-vite --template react
</code></pre><p><code>--template react</code> 参数告诉 Vite 使用 React 模板来创建项目。</p>
<ol start="4">
<li>进入项目目录：进入新创建的项目目录。在命令行中运行以下命令：</li>
</ol>
<pre tabindex="0"><code>cd my-app-vite
</code></pre><ol start="5">
<li>安装依赖项：在项目目录中，运行以下命令来安装项目的依赖项：</li>
</ol>
<pre tabindex="0"><code>npm install
</code></pre><ol start="6">
<li>启动开发服务器：运行以下命令来启动 Vite 开发服务器：</li>
</ol>
<pre tabindex="0"><code>npm run dev
</code></pre><p>这将启动开发服务器并在默认浏览器中打开项目。你可以在开发服务器运行期间进行代码编辑，并实时查看项目的更改。</p>
<ol start="7">
<li>
<p>编辑 React 组件：在 <code>src</code> 目录中，可以找到名为 <code>App.jsx</code> 的文件。这是 React 项目的主要组件。你可以编辑该文件以添加、修改或删除组件的内容。</p>
</li>
<li>
<p>查看项目：在你进行编辑并保存代码后，开发服务器将自动重新加载并刷新项目。你可以在默认浏览器中查看更新后的项目。</p>
</li>
</ol>
<h2 id="create-react-app-和-vite-区别">create-react-app 和 vite 区别</h2>
<p>Create React App (CRA) 和 Vite 是两种常用的工具，用于创建和开发 React 应用程序，它们在一些方面有所区别。</p>
<ol>
<li>构建方式：
<ul>
<li>Create React App：CRA 是一个用于构建 React 应用程序的脚手架工具。它使用 Webpack 作为构建工具，并配置了一组默认的构建配置，使得开发者无需手动配置即可开始开发 React 应用程序。</li>
<li>Vite：Vite 是一个现代化的构建工具，专为现代 Web 开发而设计。它使用 ES 模块作为开发时的构建方式，利用浏览器原生支持的模块解析功能，实现了快速的冷启动和热模块替换（HMR）。</li>
</ul>
</li>
<li>开发体验：
<ul>
<li>Create React App：CRA 提供了一个简单且一致的开发环境，使得开发者可以专注于编写 React 组件和业务逻辑。它隐藏了大部分的构建配置细节，使得开发者无需关心底层的构建配置。</li>
<li>Vite：Vite 在开发环境中具有出色的开发体验。它通过使用 ES 模块的直接导入，避免了传统的构建步骤，大大减少了冷启动时间，同时提供了快速的热模块替换，使得开发者能够更快地看到代码更改的效果。</li>
</ul>
</li>
<li>构建速度：
<ul>
<li>Create React App：CRA 使用 Webpack 进行构建，通常在项目较大时，构建时间会相对较长。</li>
<li>Vite：Vite 利用了现代浏览器对 ES 模块的原生支持，构建速度非常快，尤其在开发环境中。</li>
</ul>
</li>
<li>配置灵活性：
<ul>
<li>Create React App：CRA 提供了预定义的构建配置，对于大多数应用程序来说，这些配置已经足够。如果你需要更改构建配置，你需要使用 <code>eject</code> 命令将配置暴露出来，并自己进行配置。</li>
<li>Vite：Vite 的配置方式非常灵活，你可以根据需要自定义配置。Vite 使用了一种基于插件的方式来扩展和修改构建配置，使得配置更加直观和可维护。</li>
</ul>
</li>
</ol>
<p>综上所述，Create React App 适合那些希望快速启动 React 项目且不需要过多自定义配置的开发者。而 Vite 则适合对开发体验和构建速度有较高要求的开发者，并提供了更大的配置灵活性。选择使用哪个工具取决于你的具体需求和项目特点。</p>
<h2 id="参考文章">参考文章</h2>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction">React 入门</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]为恐龙解释现代JavaScript</title>
      <link>https://blog.chensoul.com/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/</link>
      <pubDate>Mon, 19 Jun 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/</guid>
      <description>图片来自Ryan North的Dinosaur Comics。 如果你从一开始就没有去过那里，那么学习现代 JavaScript 是很困难的。生态系统的发展和变化如此之快，以至于很难理解不同工具试图解决的问题。我从 1998 年开始编程，但直到 2014 年才开始认真学习 JavaScript。当时我记得遇到 Browserify 并盯着它的标语：
Browserify 通过捆绑所有依赖项，让你在浏览器中导入（&amp;lsquo;模块&amp;rsquo;）。
我几乎听不懂这句话中的任何单词，并且努力理解这对我作为开发人员有什么帮助。
本文的目的是提供一个历史背景，说明 JavaScript 工具如何在 2017 年发展到今天的样子。我们将从头开始，像恐龙一样构建一个示例网站 - 没有工具，只有普通的 HTML 和 JavaScript。然后，我们将逐步介绍不同的工具，以查看它们一次解决一个问题。有了这个历史背景，你将能够更好地学习和适应未来不断变化的 JavaScript 环境。让我们开始吧！
更新：我制作了本文的视频课程版本，为了更清晰，我逐步浏览了每个部分，请在此处查看： https://firstclass.actualize.co/p/modern-javascript-explained-for-dinosaurs
以&amp;quot;老派&amp;quot;的方式使用 JavaScript &amp;lt;!-- index.html --&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;JavaScript Example&amp;lt;/title&amp;gt; ** &amp;lt;script src=&amp;#34;index.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; ** &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello from HTML!&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 第 &amp;lt;script src=&amp;quot;index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 行引用同一目录中名为 index.js 的单独 JavaScript 文件：
// index.js console.log(&amp;#34;Hello from JavaScript!&amp;#34;); 这就是制作网站所需的全部内容！现在，假设您想添加一个其他人编写的库，例如 moment.</description>
      <content:encoded><![CDATA[<p>
  <img loading="lazy" src="https://peterxjang.com/img/1__H8PH__HaV43gZyBJz0mJHxA.png" alt="Images from Dinosaur Comics by Ryan North"  /></p>
<center>图片来自Ryan North的Dinosaur Comics。</center>
<p>如果你从一开始就没有去过那里，那么学习现代 JavaScript 是很困难的。生态系统的发展和变化如此之快，以至于很难理解不同工具试图解决的问题。我从 1998 年开始编程，但直到 2014 年才开始认真学习 JavaScript。当时我记得遇到 <a href="http://browserify.org/">Browserify</a> 并盯着它的标语：</p>
<blockquote>
<p>Browserify 通过捆绑所有依赖项，让你在浏览器中导入（&lsquo;模块&rsquo;）。</p>
</blockquote>
<p>我几乎听不懂这句话中的任何单词，并且努力理解这对我作为开发人员有什么帮助。</p>
<p>本文的目的是提供一个历史背景，说明 JavaScript 工具如何在 2017 年发展到今天的样子。我们将从头开始，像恐龙一样构建一个示例网站 - 没有工具，只有普通的 HTML 和 JavaScript。然后，我们将逐步介绍不同的工具，以查看它们一次解决一个问题。有了这个历史背景，你将能够更好地学习和适应未来不断变化的 JavaScript 环境。让我们开始吧！</p>
<blockquote>
<p>更新：我制作了本文的视频课程版本，为了更清晰，我逐步浏览了每个部分，请在此处查看：
<a href="https://firstclass.actualize.co/p/modern-javascript-explained-for-dinosaurs">https://firstclass.actualize.co/p/modern-javascript-explained-for-dinosaurs</a></p>
</blockquote>
<h3 id="以老派的方式使用-javascript">以&quot;老派&quot;的方式使用 JavaScript</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- index.html --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    **
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;index.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    **
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello from HTML!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>第 <code>&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</code> 行引用同一目录中名为 <code>index.js</code> 的单独 JavaScript 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// index.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello from JavaScript!&#34;</span><span class="p">);</span>
</span></span></code></pre></div><p>这就是制作网站所需的全部内容！现在，假设您想添加一个其他人编写的库，例如 moment.js（一个可以帮助以人类可读的方式格式化日期的库）。例如，您可以在 JavaScript 中使用 <code>moment</code> 函数，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">moment</span><span class="p">().</span><span class="nx">startOf</span><span class="p">(</span><span class="s2">&#34;day&#34;</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">();</span> <span class="c1">// 20 hours ago
</span></span></span></code></pre></div><p>但这只是假设您在网站上包含 moment.js！在 <a href="http://momentjs.com/">moment.js 主页</a> 上您会看到以下说明：</p>
<p>
  <img loading="lazy" src="https://peterxjang.com/img/1__ef7OX37jr____Jc38ZxO97Iw.png" alt="Install instructions for moment.js"  /></p>
<p>嗯，右侧的&quot;安装&quot;部分有很多内容。但是现在让我们忽略它 - 我们可以通过在同一目录中下载 <code>moment.min.js</code> 文件并将其包含在我们的 <code>index.html</code> 文件中来为我们的网站添加 moment.js。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- index.html --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;index.css&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;moment.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;index.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello from HTML!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>请注意， <code>moment.min.js</code> 在 <code>index.js</code> 之前加载，这意味着您可以在 <code>index.js</code> 中使用 <code>moment</code> 函数，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// index.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello from JavaScript!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">().</span><span class="nx">startOf</span><span class="p">(</span><span class="s2">&#34;day&#34;</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">());</span>
</span></span></code></pre></div><p>这就是我们过去使用 JavaScript 库制作网站的方式！好消息是它很容易理解。不好的是，每次更新时查找和下载新版本的库都很烦人。</p>
<h3 id="使用-javascript-包管理器-npm">使用 JavaScript 包管理器 （npm）</h3>
<p>从 2010 年左右开始，出现了几个相互竞争的 JavaScript 包管理器，以帮助自动化从中央存储库下载和升级库的过程。<a href="https://bower.io/">Bower</a> 可以说是 2013 年最受欢迎的，但最终在 2015 年左右被 <a href="https://www.npmjs.com/">npm</a> 超越。（值得注意的是，从 2016 年末开始，<a href="https://yarnpkg.com/en/">yarn</a> 作为 npm 接口的替代品获得了很大的关注，但它仍然在引擎盖下使用 npm 包。</p>
<p>请注意，npm 最初是专门为 node.js 制作的包管理器，这是一个旨在在服务器上运行的 JavaScript 运行时，而不是前端。因此，对于打算在浏览器中运行的库的前端 JavaScript 包管理器来说，这是一个非常奇怪的选择。</p>
<blockquote>
<p>注意：使用包管理器通常涉及使用命令行，过去前端开发从不需要命令行。如果您从未使用过，可以阅读<a href="https://www.learnenough.com/command-line-tutorial">本教程</a>以获取入门的良好概述。无论好坏，知道如何使用命令行是现代 JavaScript 的重要组成部分（它也为其他开发领域打开了大门）。</p>
</blockquote>
<p>让我们看看如何使用 npm 自动安装 moment.js 包，而不是手动下载它。如果您安装了 node.js，则您已经安装了 npm，这意味着您可以将命令行导航到包含 <code>index.html</code> 文件的文件夹并输入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm init
</span></span></code></pre></div><p>这将提示您几个问题（默认值很好，您可以为每个问题点击“Enter”）并生成一个名为 <code>package.json</code> 的新文件。这是 npm 用来保存所有项目信息的配置文件。使用默认值时， <code>package.json</code> 的内容应如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;your-project-name&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;main&#34;</span><span class="p">:</span> <span class="s2">&#34;index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;ISC&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>要安装 moment.js JavaScript 包，我们现在可以通过在命令行中输入以下命令来按照其主页上的 npm 说明进行操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install moment --save
</span></span></code></pre></div><p>此命令执行两件事 — 首先，它从 <a href="https://unpkg.com/moment/">moment.js 包</a> 下载所有代码名为 <code>node_modules</code> 的文件夹中。其次，它会自动修改 <code>package.json</code> 文件以跟踪 moment.js 作为项目依赖项。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;modern-javascript-example&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;main&#34;</span><span class="p">:</span> <span class="s2">&#34;index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;ISC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;moment&#34;</span><span class="p">:</span> <span class="s2">&#34;^2.22.2&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这在以后与他人共享项目时很有用 - 而不是共享 <code>node_modules</code> 文件夹（可能会变得非常大），您只需要共享 <code>package.json</code> 文件，其他开发人员可以使用命令 <code>npm install</code> 自动安装所需的包。</p>
<p>所以现在我们不再需要从网站上手动下载 momentjs，我们可以使用 npm 自动下载和更新它。查看 <code>node_modules</code> 文件夹内部，我们可以看到 <code>moment.min.js</code> 目录中的 <code>node_modules/moment/min</code> 文件。这意味着我们可以链接到 <code>index.html</code> 文件中的 npm 下载版本，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- index.html --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;node_modules/moment/min/moment.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;index.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello from HTML!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>所以好消息是我们现在可以使用 npm 通过命令行下载和更新我们的包。不好的是，现在我们正在挖掘 <code>node_modules</code> 文件夹以查找每个包的位置，并手动将其包含在我们的 HTML 中。这很不方便，所以接下来我们将看看如何自动化该过程。</p>
<p>
  <img loading="lazy" src="https://peterxjang.com/img/1__GeEETvRqyG4o7SZdbU2Guw.png" alt="Dinosaur comic panel 2"  /></p>
<h3 id="使用-javascript-模块捆绑器webpack">使用 JavaScript 模块捆绑器（webpack)　</h3>
<p>大多数编程语言都提供了一种将代码从一个文件导入另一个文件的方法。JavaScript 最初并不是使用此功能设计的，因为 JavaScript 被设计为仅在浏览器中运行，无法访问客户端计算机的文件系统（出于安全原因）。因此，在很长一段时间内，在多个文件中组织 JavaScript 代码需要您使用全局共享的变量加载每个文件。</p>
<p>这实际上是我们在上面所做的 moment.js 示例 — 整个 <code>moment.min.js</code> 文件加载到 HTML 中，HTML 定义了一个全局变量 <code>moment</code> ，然后可用于在 <code>moment.min.js</code> 之后加载的任何文件（无论它是否需要访问它）。</p>
<p>2009 年，一个名为 CommonJS 的项目启动，目标是在浏览器之外为 JavaScript 指定一个生态系统。CommonJS 的很大一部分是它的模块规范，它最终允许 JavaScript 像大多数编程语言一样跨文件导入和导出代码，而无需诉诸全局变量。最著名的 CommonJS 模块实现是 node.js。</p>
<p>
  <img loading="lazy" src="https://peterxjang.com/img/1__xeF1flp1zDLLJ4j7rDQ6__Q.png#medium" alt="Node.js logo"  /></p>
<p>如前所述，node.js 是一个设计用于在服务器上运行的 JavaScript 运行时。下面是前面的示例使用 node.js 模块的样子。与其使用 HTML 脚本标记加载所有 <code>moment.min.js</code> ，不如直接将其加载到 JavaScript 文件中，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// index.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;moment&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello from JavaScript!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">().</span><span class="nx">startOf</span><span class="p">(</span><span class="s2">&#34;day&#34;</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">());</span>
</span></span></code></pre></div><p>同样，这就是模块加载在 node.js 中的工作方式，由于 node.js 是一种可以访问计算机文件系统的服务器端语言，因此效果很好。Node.js 也知道每个 npm 模块路径的位置，所以你不必写 <code>require('./node_modules/moment/min/moment.min.js)</code> ，你可以简单地写 <code>require('moment')</code> — 非常甜蜜。</p>
<p>这对于 node.js 来说都很棒，但是如果您尝试在浏览器中使用上述代码，则会收到一条错误消息，指出未定义浏览器无法访问文件系统，这意味着以这种方式加载模块非常棘手 - 加载文件必须动态完成，同步（这会减慢执行速度）或异步（可能存在计时问题）。</p>
<p>这就是模块捆绑器的用武之地。JavaScript 模块捆绑器是一种工具，它通过构建步骤（可以访问文件系统）来解决问题，以创建与浏览器兼容的最终输出（不需要访问文件系统）。在这种情况下，我们需要一个模块捆绑器来查找所有 <code>require</code> 语句（这是无效的浏览器 JavaScript 语法），并将它们替换为每个所需文件的实际内容。最终结果是一个捆绑的 JavaScript 文件（没有 require 语句）！</p>
<p>最流行的模块捆绑器是 Browserify，它于 2011 年发布，率先在前端使用 node.js 样式的需求语句（这本质上是使 npm 成为首选前端包管理器的原因）。大约在 2015 年，webpack 最终成为使用更广泛的模块捆绑器（受到 React 前端框架的普及的推动，它充分利用了 webpack 的各种功能）。</p>
<p>让我们来看看如何使用 webpack 让上面的 <code>require('moment')</code> 示例在浏览器中工作。首先，我们需要将 webpack 安装到项目中。Webpack 本身是一个 npm 包，所以我们可以从命令行安装它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install webpack webpack-cli --save-dev
</span></span></code></pre></div><p>请注意，我们正在安装两个软件包 — webpack 和 webpack-cli（它使您能够从命令行使用 webpack）。另请注意 <code>--save-dev</code> 参数 — 这会将其保存为开发依赖项，这意味着它是开发环境中需要的包，而不是生产服务器上需要的包。您可以在自动更新的 <code>package.json</code> 文件中看到这反映在：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;modern-javascript-example&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;main&#34;</span><span class="p">:</span> <span class="s2">&#34;index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;ISC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;moment&#34;</span><span class="p">:</span> <span class="s2">&#34;^2.19.1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack&#34;</span><span class="p">:</span> <span class="s2">&#34;^4.17.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack-cli&#34;</span><span class="p">:</span> <span class="s2">&#34;^3.1.0&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>现在我们已经将 webpack 和 webpack-cli 作为包安装在 <code>node_modules</code> 文件夹中。您可以从命令行使用 webpack-cli，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./node_modules/.bin/webpack index.js --mode<span class="o">=</span>development
</span></span></code></pre></div><p>此命令将运行安装在 <code>node_modules</code> 文件夹中的 webpack 工具，从 <code>index.js</code> 文件开始，找到任意 <code>require</code> 语句，并将它们替换为适当的代码以创建单个输出文件（默认为 <code>dist/main.js</code> ）。 <code>--mode=development</code> 参数是为了让开发人员保持 JavaScript 的可读性，而不是参数 <code>--mode=production</code> 的缩小输出。</p>
<p>现在我们有了 webpack 的 <code>dist/main.js</code> 输出，我们将在浏览器中使用它而不是 <code>index.js</code> ，因为它包含无效的 require 语句。这将反映在 <code>index.html</code> 文件中，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="c">&lt;!-- index.html --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>JavaScript Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;dist/main.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello from HTML!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>如果您刷新浏览器，您应该会看到一切都像以前一样工作！</p>
<p>请注意，每次更改 <code>index.js</code> 时，我们都需要运行 webpack 命令。这很乏味，当我们使用 webpack 更高级的功能（例如生成源映射以帮助从转译的代码调试原始代码）时，这将变得更加乏味。Webpack 可以从名为 <code>webpack.config.js</code> 的项目根目录中的配置文件中读取选项，在我们的例子中，它看起来像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// webpack.config.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mode</span><span class="o">:</span> <span class="s2">&#34;development&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">entry</span><span class="o">:</span> <span class="s2">&#34;./index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">filename</span><span class="o">:</span> <span class="s2">&#34;main.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">publicPath</span><span class="o">:</span> <span class="s2">&#34;dist&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>现在每次我们更改 <code>index.js</code> 时，我们都可以使用以下命令运行 webpack：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./node_modules/.bin/webpack
</span></span></code></pre></div><p>我们不再需要指定 <code>index.js</code> 和 <code>--mode=development</code> 选项，因为 webpack 正在从 <code>webpack.config.js</code> 文件中加载这些选项。这更好，但为每个代码更改输入此命令仍然很乏味 - 我们将使此过程更顺畅。</p>
<p>总的来说，这可能看起来不多，但这个工作流程有一些巨大的优势。我们不再通过全局变量加载外部脚本。任何新的 JavaScript 库都将在 JavaScript 中使用 <code>require</code> 语句添加，而不是在 HTML 中添加新的 <code>&lt;script&gt;</code> 标签。拥有单个 JavaScript 捆绑包文件通常对性能更好。现在我们添加了构建步骤，我们可以将其他一些强大的功能添加到我们的开发工作流程中！</p>
<p>
  <img loading="lazy" src="https://peterxjang.com/img/1__ee__ivxNTKgIJTjmEMC4__dg.png" alt="Dinosaur comic panels 3 and 4"  /></p>
<h3 id="为新的语言功能转译代码-babel">为新的语言功能转译代码 （babel）</h3>
<p>转译代码意味着将一种语言的代码转换为另一种类似语言的代码。这是前端开发的一个重要部分——由于浏览器添加新功能的速度很慢，因此使用实验性功能创建了新语言，这些功能可以转换为浏览器兼容语言。</p>
<p>对于 CSS，有 <a href="http://sass-lang.com/">Sass</a>，<a href="http://lesscss.org/">Less </a>和 <a href="http://stylus-lang.com/">Stylus</a>，仅举几例。对于 JavaScript，一段时间内最流行的转译器是 <a href="http://coffeescript.org/">CoffeeScript</a>（2010 年左右发布），而现在大多数人使用 <a href="https://babeljs.io/">babel </a>或 <a href="http://www.typescriptlang.org/">TypeScript</a>。CoffeeScript 是一种专注于通过显著改变语言来改进 JavaScript 的语言——可选的括号、重要的空格等。Babel 不是一门新语言，而是一种转译器，它将尚未适用于所有浏览器（<a href="https://babeljs.io/learn-es2015/">ES2015</a> 及更高版本）的下一代 JavaScript 转译为更兼容的旧 JavaScript （ES5）。Typescript 是一种与下一代 JavaScript 基本相同的语言，但也添加了可选的静态类型。许多人选择使用 babel，因为它最接近原版 JavaScript。</p>
<p>让我们看一个如何在我们现有的 webpack 构建步骤中使用 babel 的示例。首先，我们将从命令行将 babel（这是一个 npm 包）安装到项目中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install @babel/core @babel/preset-env babel-loader --save-dev
</span></span></code></pre></div><p>请注意，我们正在安装 3 个单独的包作为开发依赖项 — <code>@babel/core</code> 是 babel 的主要部分， <code>@babel/preset-env</code> 是定义要转译的新 JavaScript 功能的预设， <code>babel-loader</code> 是使 babel 能够使用 webpack 的包。我们可以通过编辑 <code>webpack.config.js</code> 文件将 webpack 配置为使用 <code>babel-loader</code> ，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// webpack.config.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mode</span><span class="o">:</span> <span class="s2">&#34;development&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">entry</span><span class="o">:</span> <span class="s2">&#34;./index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">output</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">filename</span><span class="o">:</span> <span class="s2">&#34;main.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">publicPath</span><span class="o">:</span> <span class="s2">&#34;dist&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">module</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">rules</span><span class="o">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.js$/</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">exclude</span><span class="o">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">use</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nx">loader</span><span class="o">:</span> <span class="s2">&#34;babel-loader&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">presets</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;@babel/preset-env&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">          <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>这种语法可能会令人困惑（幸运的是，这不是我们经常编辑的东西）。基本上，我们告诉 webpack 查找任何 .js 文件（不包括 <code>node_modules</code> 文件夹中的文件），并使用 <code>babel-loader</code> 和 <code>@babel/preset-env</code> 预设应用 babel 转译。您可以在<a href="http://webpack.github.io/docs/configuration.html">此处</a>阅读有关 webpack 配置语法的更多信息。</p>
<p>现在一切都设置好了，我们可以开始用我们的 JavaScript 编写 ES2015 功能了！下面是 <code>index.js</code> 文件中的 <a href="https://babeljs.io/learn-es2015/#ecmascript-2015-features-template-strings">ES2015 模板字符串</a>示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// index.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&#34;moment&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello from JavaScript!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">().</span><span class="nx">startOf</span><span class="p">(</span><span class="s2">&#34;day&#34;</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Bob&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">time</span> <span class="o">=</span> <span class="s2">&#34;today&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Hello </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">, how are you </span><span class="si">${</span><span class="nx">time</span><span class="si">}</span><span class="sb">?`</span><span class="p">);</span>
</span></span></code></pre></div><p>我们还可以使用 <a href="https://babeljs.io/learn-es2015/#ecmascript-2015-features-modules">ES2015 import 语句 </a>代替 <code>require</code> 来加载模块，这就是您今天在很多代码库中看到的内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// index.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">moment</span> <span class="nx">from</span> <span class="s2">&#34;moment&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello from JavaScript!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">moment</span><span class="p">().</span><span class="nx">startOf</span><span class="p">(</span><span class="s2">&#34;day&#34;</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&#34;Bob&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">time</span> <span class="o">=</span> <span class="s2">&#34;today&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Hello </span><span class="si">${</span><span class="nx">name</span><span class="si">}</span><span class="sb">, how are you </span><span class="si">${</span><span class="nx">time</span><span class="si">}</span><span class="sb">?`</span><span class="p">);</span>
</span></span></code></pre></div><p>在此示例中， <code>import</code> 语法与 <code>require</code> 语法没有太大区别，但 <code>import</code> 对于更高级的情况具有额外的灵活性。由于我们更改了 <code>index.js</code> ，我们需要在命令行中再次运行 webpack：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ./node_modules/.bin/webpack
</span></span></code></pre></div><p>现在您可以在浏览器中刷新 <code>index.html</code> 。在撰写本文时，大多数现代浏览器都支持所有 ES2015 功能，因此很难判断 babel 是否完成了它的工作。您可以在 IE9 等较旧的浏览器中对其进行测试，也可以在 <code>main.js</code> 中搜索以查找转译的代码行：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// main.js
</span></span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Hello &#34;</span> <span class="o">+</span> <span class="nx">name</span> <span class="o">+</span> <span class="s2">&#34;, how are you &#34;</span> <span class="o">+</span> <span class="nx">time</span> <span class="o">+</span> <span class="s2">&#34;?&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span></code></pre></div><p>在这里你可以看到 babel 将 ES2015 模板字符串转换为常规的 JavaScript 字符串连接，以保持浏览器兼容性。虽然这个特殊的例子可能不太令人兴奋，但转译代码的能力是非常强大的。JavaScript 中有一些令人兴奋的语言功能，如 <a href="async/await">async/await</a>，你可以立即开始使用它们来编写更好的代码。虽然音译有时可能看起来乏味和痛苦，但它在过去几年中导致了语言的巨大改进，因为人们今天正在测试明天的功能。</p>
<p>我们几乎完成了，但我们的工作流程中仍有一些未打磨的边缘。如果我们担心性能，我们应该<a href="https://en.wikipedia.org/wiki/Minification_%28programming%29">缩小</a>捆绑文件，这应该很容易，因为我们已经合并了一个构建步骤。每次更改 JavaScript 时，我们还需要重新运行 webpack 命令，这会很快变旧。因此，接下来我们要看的是解决这些问题的一些便捷工具。</p>
<h3 id="使用任务运行程序npm-脚本">使用任务运行程序（npm 脚本）</h3>
<p>现在我们已经投资使用构建步骤来处理 JavaScript 模块，使用任务运行器是有意义的，这是一个自动执行构建过程不同部分的工具。对于前端开发，任务包括缩小代码、优化图像、运行测试等。</p>
<p>2013 年，Grunt 是最受欢迎的前端任务运行者，Gulp 紧随其后。两者都依赖于包装其他命令行工具的插件。如今，最流行的选择似乎是使用 npm 包管理器本身内置的脚本功能，它不使用插件，而是直接与其他命令行工具一起使用。</p>
<p>让我们编写一些 npm 脚本，以便更轻松地使用 webpack。这涉及简单地更改 <code>package.json</code> 文件，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;modern-javascript-example&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;main&#34;</span><span class="p">:</span> <span class="s2">&#34;index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;build&#34;</span><span class="p">:</span> <span class="s2">&#34;webpack --progress --mode=production&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;watch&#34;</span><span class="p">:</span> <span class="s2">&#34;webpack --progress --watch&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;ISC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;moment&#34;</span><span class="p">:</span> <span class="s2">&#34;^2.22.2&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@babel/core&#34;</span><span class="p">:</span> <span class="s2">&#34;^7.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@babel/preset-env&#34;</span><span class="p">:</span> <span class="s2">&#34;^7.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;babel-loader&#34;</span><span class="p">:</span> <span class="s2">&#34;^8.0.2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack&#34;</span><span class="p">:</span> <span class="s2">&#34;^4.17.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack-cli&#34;</span><span class="p">:</span> <span class="s2">&#34;^3.1.0&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>在这里，我们添加了两个新脚本， <code>build</code> 和 <code>watch</code> 。要运行构建脚本，您可以在命令行中输入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm run build
</span></span></code></pre></div><p>这将运行 webpack（使用我们之前所做的 <code>webpack.config.js</code> 中的配置），其中 <code>--progress</code> 选项显示进度百分比， <code>--mode=production</code> 选项最小化生产代码。要运行 <code>watch</code> 脚本，请执行以下操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm run watch
</span></span></code></pre></div><p>它使用 <code>--watch</code> 选项代替，以便在每次任何 JavaScript 文件更改时自动重新运行 webpack，这对于开发非常有用。</p>
<p>请注意， <code>package.json</code> 中的脚本可以在不必指定完整路径 <code>./node_modules/.bin/webpack</code> 的情况下运行 webpack，因为 node.js 知道每个 npm 模块路径的位置。这很甜！我们可以通过安装 webpack-dev-server 来让事情变得更加甜蜜，这是一个单独的工具，它提供了一个简单的 Web 服务器和实时重新加载。要将其安装为开发依赖项，请输入以下命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm install webpack-dev-server --save-dev
</span></span></code></pre></div><p>然后将一个 npm 脚本添加到 <code>package.json</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;modern-javascript-example&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;main&#34;</span><span class="p">:</span> <span class="s2">&#34;index.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scripts&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;test&#34;</span><span class="p">:</span> <span class="s2">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;build&#34;</span><span class="p">:</span> <span class="s2">&#34;webpack --progress -p&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;watch&#34;</span><span class="p">:</span> <span class="s2">&#34;webpack --progress --watch&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;serve&#34;</span><span class="p">:</span> <span class="s2">&#34;webpack-dev-server --open&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;license&#34;</span><span class="p">:</span> <span class="s2">&#34;ISC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;dependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;moment&#34;</span><span class="p">:</span> <span class="s2">&#34;^2.19.1&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;devDependencies&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@babel/core&#34;</span><span class="p">:</span> <span class="s2">&#34;^7.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;@babel/preset-env&#34;</span><span class="p">:</span> <span class="s2">&#34;^7.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;babel-loader&#34;</span><span class="p">:</span> <span class="s2">&#34;^8.0.2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack&#34;</span><span class="p">:</span> <span class="s2">&#34;^3.7.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;webpack-dev-server&#34;</span><span class="p">:</span> <span class="s2">&#34;^3.1.6&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>现在，您可以通过运行以下命令来启动开发服务器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ npm run serve
</span></span></code></pre></div><p>这将在您的浏览器中自动打开地址为 <code>localhost:8080</code> 的 <code>index.html</code> 网站（默认情况下）。每当你在 <code>index.js</code> 中更改 JavaScript 时，webpack-dev-server 都会重建它自己的捆绑 JavaScript 并自动刷新浏览器。这是一个非常有用的时间节省，因为它允许您将注意力集中在代码上，而不必在代码和浏览器之间不断切换上下文以查看新的更改。</p>
<p>这只是表面，webpack 和 webpack-dev-server 还有更多选项（你可以在<a href="https://webpack.js.org/guides/development/">这里</a>阅读）。当然，你也可以制作 npm 脚本来运行其他任务，例如将 Sass 转换为 CSS、压缩图像、运行测试 — 任何具有命令行工具的东西都是公平的游戏。npm 脚本本身也有一些很棒的高级选项和技巧——<a href="https://twitter.com/k88hudson">Kate Hudson</a> 的这个演讲是一个很好的起点：</p>
<p><a href="https://youtu.be/0RYETb9YVrk">https://youtu.be/0RYETb9YVrk</a></p>
<h3 id="结论">结论</h3>
<p>简而言之，这就是现代 JavaScript。我们从纯 HTML 和 JS 转向使用包管理器自动下载第三方包，使用模块捆绑器创建单个脚本文件，使用转译器使用未来的 JavaScript 功能，以及任务运行器来自动化构建过程的不同部分。这里肯定有很多移动的部分，特别是对于初学者。对于刚接触编程的人来说，Web 开发曾经是一个很好的切入点，正是因为它很容易启动和运行;如今，这可能非常令人生畏，特别是因为各种工具往往会迅速变化。</p>
<p>不过，它并不像看起来那么糟糕。事情正在安定下来，特别是随着节点生态系统作为与前端合作的可行方式的采用。使用 npm 作为包管理器，将节点 <code>require</code> 或 <code>import</code> 语句用于模块，使用 npm 脚本来运行任务，这很好且一致。与一两年前相比，这是一个大大简化的工作流程！</p>
<p>对于初学者和有经验的开发人员来说，更好的是，如今的框架通常带有使该过程更容易上手的工具。Ember 有 <a href="https://ember-cli.com/">ember-cli</a> ，这对 Angular 的 <a href="https://cli.angular.io/">angular-cli</a> 、React 的 <a href="https://github.com/facebookincubator/create-react-app"><code>create-react-app</code></a>、Vue 的 <a href="https://github.com/vuejs/vue-cli">vue-cli</a> 等产生了巨大的影响。所有这些工具都将设置一个包含您需要的所有项目——您需要做的就是开始编写代码。然而，这些工具并不神奇，它们只是以一种一致和工作的方式设置了所有内容——你可能经常需要对 webpack、babel 等进行一些额外的配置。因此，了解我们在本文中介绍的每个部分的作用仍然非常关键。</p>
<p>现代 JavaScript 在使用时肯定会令人沮丧，因为它继续快速变化和发展。但是，尽管有时看起来像是重新发明轮子，但 JavaScript 的快速发展有助于推动诸如热重载，实时 linting 和时间旅行调试等创新。作为一名开发人员，这是一个激动人心的时刻，我希望这些信息可以作为路线图，在您的旅程中为您提供帮助！</p>
<p>
  <img loading="lazy" src="https://peterxjang.com/img/1__H6NN__RxZNeVyLYpCirsslg.png" alt="Dinosaur comic panel 5"  /></p>
<p>特别感谢<a href="https://twitter.com/ryanqnorth">@ryanqnorth</a>的<a href="http://www.qwantz.com/">恐龙漫画</a>，自 2003 年以来（恐龙统治网络）以来，它提供了一些最好的荒诞幽默。</p>
<p>原文链接：<a href="https://peterxjang.com/blog/modern-javascript-explained-for-dinosaurs.html">https://peterxjang.com/blog/modern-javascript-explained-for-dinosaurs.html</a></p>
<blockquote>
<p>译者备注：</p>
<p>Github 上有一个关于这篇文章源代码的仓库：<a href="https://github.com/scherler/Modern-JavaScript-Explained-For-Dinosaurs">https://github.com/scherler/Modern-JavaScript-Explained-For-Dinosaurs</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-11｜从语雀迁移到Obsidian</title>
      <link>https://blog.chensoul.com/posts/2023/03/20/weekly_review_11/</link>
      <pubDate>Mon, 20 Mar 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/03/20/weekly_review_11/</guid>
      <description>前言 ​ 图片：涨渡湖湿地水上森林公园
本篇是对 2023-03-13 到 2023-03-19 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这周的工作主要是重构、优化系统，工作节奏比之前轻缓了很多。这周也开始了开车上下班，除去周五去医院做检查，一共开了 4 天车。从汉口到光谷，一共 29 公里，如果早上 6:30 出发，就只需要 50 分钟；如果 6:45 出发，竟然需要两个小时，真是无语了。无奈之下，只能每天早点出门早点到公司，然后，打完卡之后，在公司楼下走路。
这周开始心里默默定了一个 flag，就是每天走路 10000 步。看了一下微信运动，基本上达成了，除了周五晚上因为加班，而少走了 64 步。
从语雀迁移到 Obsidian 上周提到开始使用格志 APP 来写日志，使用了一段时间之后，发现了一些缺点：
部分功能收费 导出的 markdown 不支持图片显示 不支持本地存储 于是，放弃了使用格志 APP，继而在使用了一段时间 Obsidian 之后，改为使用 Obsidian 来写日志和周报。
为了不给自己太大压力，日报每天复盘内容包括以下几方面：
今日待办
学习
工作
生活
健身
导出语雀文档为 markdown 参考 yuque/yuque-exporter 文档，下载 yuque-exporter 之后进行导出操作，发现以下问题：
该项目需要使用的 nodejs 版本为 18.0.4 nodejs 使用正确的版本还是导出失败 于是，改为使用源码编译和运行导出。
1、先下载代码：
git clone https://github.com/yuque/yuque-exporter.git 2、修改 main.ts 中需要导出的语雀知识库地址为自己的仓库地址：
// Determining if an ESM module is main then run the code if (import.</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-04.jpeg" alt="weekly-review-11-04"  /></p>
<p>​ 图片：<em>涨渡湖湿地水上森林公园</em></p>
<p>本篇是对 <code>2023-03-13</code> 到 <code>2023-03-19</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周的工作主要是重构、优化系统，工作节奏比之前轻缓了很多。这周也开始了开车上下班，除去周五去医院做检查，一共开了 4 天车。从汉口到光谷，一共 29 公里，如果早上 6:30 出发，就只需要 50 分钟；如果 6:45 出发，竟然需要两个小时，真是无语了。无奈之下，只能每天早点出门早点到公司，然后，打完卡之后，在公司楼下走路。</p>
<p>这周开始心里默默定了一个 flag，就是每天走路 10000 步。看了一下微信运动，基本上达成了，除了周五晚上因为加班，而少走了 64 步。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-03.png" alt="weekly-review-11-03" style="width:67%;" />
<h2 id="从语雀迁移到-obsidian">从语雀迁移到 Obsidian</h2>
<p>上周提到开始使用格志 APP 来写日志，使用了一段时间之后，发现了一些缺点：</p>
<ul>
<li>部分功能收费</li>
<li>导出的 markdown 不支持图片显示</li>
<li>不支持本地存储</li>
</ul>
<p>于是，放弃了使用格志 APP，继而在使用了一段时间 Obsidian 之后，改为使用 Obsidian 来写日志和周报。</p>
<img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-02.png" alt="weekly-review-11-02" style="width:67%;" />
<p>为了不给自己太大压力，日报每天复盘内容包括以下几方面：</p>
<ul>
<li>
<p>今日待办</p>
</li>
<li>
<p>学习</p>
</li>
<li>
<p>工作</p>
</li>
<li>
<p>生活</p>
</li>
<li>
<p>健身</p>
</li>
</ul>
<h3 id="导出语雀文档为-markdown">导出语雀文档为 markdown</h3>
<p>参考 <a href="https://github.com/yuque/yuque-exporter">yuque/yuque-exporter</a> 文档，下载 yuque-exporter 之后进行导出操作，发现以下问题：</p>
<ul>
<li>该项目需要使用的 nodejs 版本为 18.0.4</li>
<li>nodejs 使用正确的版本还是导出失败</li>
</ul>
<p>于是，改为使用源码编译和运行导出。</p>
<p>1、先下载代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/yuque/yuque-exporter.git
</span></span></code></pre></div><p>2、修改 main.ts 中需要导出的语雀知识库地址为自己的仓库地址：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// Determining if an ESM module is main then run the code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="s2">&#34;file:&#34;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="kr">module</span><span class="nx">Path</span> <span class="o">=</span> <span class="nx">fileURLToPath</span><span class="p">(</span><span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">===</span> <span class="kr">module</span><span class="nx">Path</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">urlPaths</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;chensoul/rose&#34;</span><span class="p">,</span> <span class="s2">&#34;chensoul/growup&#34;</span><span class="p">,</span> <span class="s2">&#34;chensoul/tech&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="nx">start</span><span class="p">({</span> <span class="nx">urlPaths</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>3、参考 <a href="https://www.yuque.com/yuque/developer/api#785a3731">文档</a> 申请语雀 TOKEN。</p>
<p>4、下载项目依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">npm i
</span></span></code></pre></div><p>5、运行项目，开始导出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">YUQUE_TOKEN</span><span class="o">=</span>XXXXXX npm start
</span></span></code></pre></div><blockquote>
<p>导出的文件在 storage 目录，接下来可以拷贝到 Obsidian 目录里。</p>
</blockquote>
<p>6、另外，可以对 yuque-exporter 源码做一些修改：</p>
<ul>
<li>导出的 markdown 文件不要有 frontmatter，修改 doc.ts 中 buildDoc 方法：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">async</span> <span class="kd">function</span> <span class="nx">buildDoc</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">doc</span>: <span class="kt">TreeNode</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">mapping</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">string</span><span class="err">,</span> <span class="na">TreeNode</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">docDetail</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">readJSON</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">metaDir</span><span class="p">,</span> <span class="nx">doc</span><span class="p">.</span><span class="kr">namespace</span><span class="p">,</span> <span class="s2">&#34;docs&#34;</span><span class="p">,</span> <span class="sb">`</span><span class="si">${</span><span class="nx">doc</span><span class="p">.</span><span class="nx">url</span><span class="si">}</span><span class="sb">.json`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">remark</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&#34;settings&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">bullet</span><span class="o">:</span> <span class="s2">&#34;-&#34;</span><span class="p">,</span> <span class="nx">listItemIndent</span><span class="o">:</span> <span class="s2">&#34;one&#34;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">use</span><span class="p">([</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="nx">replaceHTML</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="nx">relativeLink</span><span class="p">,</span> <span class="p">{</span> <span class="nx">doc</span><span class="p">,</span> <span class="nx">mapping</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="nx">downloadAsset</span><span class="p">,</span> <span class="p">{</span> <span class="nx">doc</span><span class="p">,</span> <span class="nx">mapping</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">    <span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">process</span><span class="p">(</span><span class="nx">docDetail</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">//  doc.content = frontmatter(doc) + content.toString();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">doc</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// FIXME: remark will transform `*` to `\*`
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">doc</span><span class="p">.</span><span class="nx">content</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">replaceAll</span><span class="p">(</span><span class="s2">&#34;\\*&#34;</span><span class="p">,</span> <span class="s2">&#34;*&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">doc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li>导出的段落之间增加换行，修改 doc.ts 中 replaceHTML 方法：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">replaceHTML() {</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">(</span><span class="nx">tree</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">htmlNodes</span> <span class="o">=</span> <span class="nx">selectAll</span><span class="p">(</span><span class="s2">&#34;html&#34;</span><span class="p">,</span> <span class="nx">tree</span><span class="p">)</span> <span class="kr">as</span> <span class="nx">Text</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">node</span> <span class="k">of</span> <span class="nx">htmlNodes</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="s2">&#34;&lt;br /&gt;&#34;</span> <span class="o">||</span> <span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="s2">&#34;&lt;br/&gt;&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">node</span><span class="p">.</span><span class="kr">type</span> <span class="o">=</span> <span class="s2">&#34;text&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nx">node</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s2">&#34;\n\n\n&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>7、删除导出的 markdown 文件当中的锚点标签（例如：<code>&lt;a name=&quot;xx&quot;&gt;&lt;/a&gt;</code>）</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> storage
</span></span><span class="line"><span class="cl"><span class="c1"># macos 上执行</span>
</span></span><span class="line"><span class="cl">find . -type f -name <span class="s1">&#39;*.md&#39;</span> -exec sed -i <span class="s1">&#39;&#39;</span> <span class="s1">&#39;s/&lt;a name=\&#34;[^\&#34;]*\&#34;&gt;&lt;\/a&gt;//g&#39;</span> <span class="o">{}</span> +
</span></span></code></pre></div><img src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-11-01.png" alt="weekly-review-11-01" style="width:67%;" />
<p>在上面的示例代码中，我们使用了 sed 命令来删除 Markdown 文件中所有的类似 <code>&lt;a name=&quot;xx&quot;&gt;&lt;/a&gt;</code> 的锚点标签。其中：</p>
<ul>
<li><code>-i ''</code> 参数表示直接修改源文件，而不是输出到标准输出流。<code>''</code> 表示在 macOS 系统上备份修改前的文件，如果在 Linux 系统上使用该命令，可以省略该参数。</li>
<li><code>s/&lt;a name=\&quot;[^\&quot;]*\&quot;&gt;&lt;\/a&gt;//g</code> 表示用空字符串替换所有符合正则表达式 <code>&lt;a name=\&quot;[^\&quot;]*\&quot;&gt;&lt;\/a&gt;</code> 的字符串。该正则表达式匹配所有以 <code>&lt;a name=</code> 开头，以 <code>&quot;&gt;&lt;/a&gt;</code> 结尾的标签，且中间的文本不包含双引号。</li>
</ul>
<p>8、将导出的 markdown 文件中的本地图片批量上传到图床，操作方法：使用 typora 打开 storage 目录，然后依次点击 格式、图像、上传所有本地图片</p>
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li>
<p><a href="https://moelove.info/2023/03/21/GitHub-Actions-%E6%88%90%E6%9C%AC%E4%BC%98%E5%8C%96%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%9B%A2%E9%98%9F%E6%9B%B4%E5%85%B7%E7%AB%9E%E4%BA%89%E5%8A%9B/">GitHub Actions 成本优化：让你的团队更具竞争力</a></p>
</li>
<li>
<p><a href="https://juemuren4449.com/archives/open-gzip-on-nginx">Nginx 开启 gzip 压缩</a></p>
</li>
<li>
<p><a href="https://www.superheaoz.top/2022/06/57091/">Obsidan 日记、记账与自动同步</a></p>
</li>
<li>
<p><a href="https://elmagnifico.tech/2023/03/16/Doprax-V2ray/">Doprax 搭建免费 V2ray 节点</a></p>
</li>
<li>
<p><a href="https://elizen.me/posts/2023/03/hi-icloud/">Hi，土区 iCloud</a></p>
</li>
<li>
<p><a href="https://btsogiwudc.feishu.cn/docx/CgoJdHyWKopl3UxV12GcG3psnjf">国区使用土耳其 iCloud 服务，手把手保姆级上车教程</a></p>
</li>
</ul>
<p>以上。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>周报-9｜开车总结、博客该写什么、Web3批量空投</title>
      <link>https://blog.chensoul.com/posts/2023/03/07/weekly_review_9/</link>
      <pubDate>Tue, 07 Mar 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/03/07/weekly_review_9/</guid>
      <description>前言 本篇是对 2023-02-27 到 2023-03-05 这周生活的记录与思考。首发在我的个人 博客，你可以移步了解更多或者给我留言。
这周的主要工作是版本测试和项目上线，在大家的共同努力下，最后是成功上线。
由于公司最近在裁员，留下来的都开始卷起来，每天晚上 8 点之后下班，这样平均一天的工作时间才有 11 小时。据说，旁边组的同事平均每天都是 12 个小时工作时间。裁了三位同事之后，我们软件组还有 8 人，算法组有 7 人，产品组有 6 人，终端组有 4 人。距集团公司六月上市还有两个月，裁员估计还会继续，同志们还需努力加班，争取被裁的不是自己。
这周还是没有开车，每天坐地铁上下班，刷刷 rss 看看 b 站视频，了解一些行业最新动态，同时也看看同样在写博客的那些独立开发者每周都在做什么，也学习一些新技术或者新技能。
这周接触了 web3 空投，花了几个小时使用自动加手动的方式刷了 120 多个账号。自动的方式，就是用 nodejs 代码在 bsc 网络批量创建账号并保存为 csv 文件；其次，通过 onekey web 上的批量转账功能，给每个账户转了 0.00125bnb。手动操作的部分就是，一个个的将账号私钥导入狐狸钱包，然后，用 lifeform cartoon 连接钱包账户，mint 成功之后，分享链接，再继续连接狐狸的下一个账号，重复上面操作。
因为太耗时间，所以只刷了 120 个账号。趁工作不忙的时候，用 chatgpt 搜索一下如何将上面的操作全部自动化。
周末两天，继续练车，从汉口到阳逻，再到新洲，最后去新洲的将军山爬山、去道观河看风景。算下来，最近这三个周末六天时间，我一共开了 800 多公里了。目前，暂时没有收到违规通知，但还是存在很多不足的地方。
开车总结 这周开车，发现存在以下问题：
1、停车还是会忘记熄火拔钥匙。 2、红绿灯口，停在大货车后面，并靠得近，前方视线受阻。经过红绿灯时，感觉像是闯了红灯。 3、超车时候，没有加速。 4、在山路行驶，入弯和出弯都会减速。 5、判断车距的经验不足。表现在行驶过程中、侧方停车、倒车入库。 针对以上问题，晚上刷了一些视频，做了一些笔记，希望能够帮助自己改正上面这些问题。
1、目光看远。入弯提前收油，脚备刹车。如果弯道过急，就带点刹车，如果车速你可以控制，直接收油过弯；出弯加油，眼睛看出弯口。身体跟随方向盘靠。这样，车速不降，可以控制车速。如果以 80 码速度过弯，且这个车还在车道内，这个车的速度你就控制住了。但凡有点越线，说明车速过快，你就要降低速度。
2、靠右行驶。会车时，主动靠右。转弯时，发现对面有来车，鸣笛示意。
3、路口远道的原则，跟小车不跟大车。如果跟着大车，留一个车位空间，让大车先走，确认绿灯再走。
4、红绿灯路口，提前减速，提醒后面车减速，不要急刹车，防止后面车追尾。特别是在绿灯闪的时候，不要没有减速，突然停车。否则后面车会以为你要加速冲过去，他也加速，这样，他就会追尾你。
博客该写什么 看到一篇博客 What to blog about，里面聊到了博客该写什么。一时兴起，想翻译成中文。于是，分别使用了 chrome 沉浸式翻译插件和 chatgpt 来翻译这篇文章，得到结果如下：</description>
      <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>
  <img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-07.png" alt="将军山"  /></p>
<p>本篇是对 <code>2023-02-27</code> 到 <code>2023-03-05</code> 这周生活的记录与思考。首发在我的个人 <a href="https://blog.chensoul.com/">博客</a>，你可以移步了解更多或者给我留言。</p>
<p>这周的主要工作是版本测试和项目上线，在大家的共同努力下，最后是成功上线。</p>
<p>由于公司最近在裁员，留下来的都开始卷起来，每天晚上 8 点之后下班，这样平均一天的工作时间才有 11 小时。据说，旁边组的同事平均每天都是 12 个小时工作时间。裁了三位同事之后，我们软件组还有 8 人，算法组有 7 人，产品组有 6 人，终端组有 4 人。距集团公司六月上市还有两个月，裁员估计还会继续，同志们还需努力加班，争取被裁的不是自己。</p>
<p>这周还是没有开车，每天坐地铁上下班，刷刷 rss 看看 b 站视频，了解一些行业最新动态，同时也看看同样在写博客的那些独立开发者每周都在做什么，也学习一些新技术或者新技能。</p>
<p>这周接触了 web3 空投，花了几个小时使用自动加手动的方式刷了 120 多个账号。自动的方式，就是用 nodejs 代码在 bsc 网络批量创建账号并保存为 csv 文件；其次，通过 onekey web 上的批量转账功能，给每个账户转了 0.00125bnb。手动操作的部分就是，一个个的将账号私钥导入狐狸钱包，然后，用 lifeform cartoon 连接钱包账户，mint 成功之后，分享链接，再继续连接狐狸的下一个账号，重复上面操作。</p>
<p>因为太耗时间，所以只刷了 120 个账号。趁工作不忙的时候，用 chatgpt 搜索一下如何将上面的操作全部自动化。</p>
<p>周末两天，继续练车，从汉口到阳逻，再到新洲，最后去新洲的将军山爬山、去道观河看风景。算下来，最近这三个周末六天时间，我一共开了 800 多公里了。目前，暂时没有收到违规通知，但还是存在很多不足的地方。</p>
<p>
  <img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-08.png" alt="weekly-review-09-08"  /></p>
<h2 id="开车总结">开车总结</h2>
<p>这周开车，发现存在以下问题：</p>
<ul>
<li>1、停车还是会忘记熄火拔钥匙。</li>
<li>2、红绿灯口，停在大货车后面，并靠得近，前方视线受阻。经过红绿灯时，感觉像是闯了红灯。</li>
<li>3、超车时候，没有加速。</li>
<li>4、在山路行驶，入弯和出弯都会减速。</li>
<li>5、判断车距的经验不足。表现在行驶过程中、侧方停车、倒车入库。</li>
</ul>
<p>针对以上问题，晚上刷了一些视频，做了一些笔记，希望能够帮助自己改正上面这些问题。</p>
<ul>
<li>
<p>1、目光看远。入弯提前收油，脚备刹车。如果弯道过急，就带点刹车，如果车速你可以控制，直接收油过弯；出弯加油，眼睛看出弯口。身体跟随方向盘靠。这样，车速不降，可以控制车速。如果以 80 码速度过弯，且这个车还在车道内，这个车的速度你就控制住了。但凡有点越线，说明车速过快，你就要降低速度。</p>
</li>
<li>
<p>2、靠右行驶。会车时，主动靠右。转弯时，发现对面有来车，鸣笛示意。</p>
</li>
<li>
<p>3、路口远道的原则，跟小车不跟大车。如果跟着大车，留一个车位空间，让大车先走，确认绿灯再走。</p>
</li>
<li>
<p>4、红绿灯路口，提前减速，提醒后面车减速，不要急刹车，防止后面车追尾。特别是在绿灯闪的时候，不要没有减速，突然停车。否则后面车会以为你要加速冲过去，他也加速，这样，他就会追尾你。</p>
</li>
</ul>
<h2 id="博客该写什么">博客该写什么</h2>
<p>看到一篇博客 <a href="https://simonwillison.net/2022/Nov/6/what-to-blog-about/">What to blog about</a>，里面聊到了博客该写什么。一时兴起，想翻译成中文。于是，分别使用了 chrome 沉浸式翻译插件和 chatgpt 来翻译这篇文章，得到结果如下：</p>
<p>1、<strong>使用 <a href="https://chrome.google.com/webstore/detail/immersive-translate/bpoadfkcbjbfhfodiogcnhhhpibjhbnh">chrome 沉浸式翻译插件</a> 翻译这篇文章：</strong></p>
<p>
  <img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-01.png" alt="weekly-review-01"  /></p>
<p>总结来说，博客可以写两部分内容：</p>
<ul>
<li>今天学到的东西</li>
<li>正在做的项目</li>
</ul>
<p>2、<strong>使用 chatgpt 翻译这篇文章：</strong></p>
<p>请 chatgpt 翻译这篇文章 <a href="https://simonwillison.net/2022/Nov/6/what-to-blog-about/">https://simonwillison.net/2022/Nov/6/what-to-blog-about/</a> 为中文，得到的结果如下：</p>
<p>
  <img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-02.png" alt="weekly-review-02"  /></p>
<p>标题：该写什么博客？</p>
<p>随着我写了一篇新的博客文章，我想分享一下我最近学到的关于写博客的一些事情。</p>
<p>一旦你开始写博客，你就必须保持一定的频率和持续的内容更新。这不仅是为了吸引和保持读者，也是为了让自己不断成长和发展。对于我来说，博客是我最有价值的自我表达形式之一，因为它迫使我去思考和组织我的想法，而这些想法可能会被淹没在日常生活的喧嚣中。</p>
<p>但是，选择博客内容可以很困难，特别是当你有多个感兴趣的话题和项目。以下是一些我最近学到的有关选择博客主题的技巧：</p>
<ul>
<li>每周至少写一篇文章</li>
</ul>
<p>尽管这可能听起来像一个艰巨的任务，但保持每周至少写一篇文章的频率可以帮助你保持写作的习惯和进展。这也有助于避免长时间的空白期，这可能会使你失去写作的动力和读者的兴趣。</p>
<ul>
<li>写下你的目标和想法清单</li>
</ul>
<p>在开始写博客之前，先写下你感兴趣的话题和你想写的内容。这可以帮助你保持焦点并避免浪费时间在想要的内容上。</p>
<ul>
<li>关注你的读者</li>
</ul>
<p>虽然你的博客可能是一个人的项目，但是考虑到你的读者的兴趣和需求是至关重要的。试着想一下你的读者会对哪些话题感兴趣，并尝试写出他们会发现有趣或有用的内容。</p>
<ul>
<li>保持开放和灵活</li>
</ul>
<p>不要把自己局限在一个主题或领域中。保持开放和灵活，尝试不同的话题和领域。这不仅可以让你发现新的兴趣和机会，还可以让你在写作方面更有创意和灵感。</p>
<ul>
<li>尝试不同的博客格式</li>
</ul>
<p>不仅可以通过写作来表达自己，还可以通过不同的博客格式来实现这一点。尝试写一篇教程、一篇演示、一篇评论或一篇问题解答文章。这可以让你更好地探索和展示你的技能和知识。</p>
<p>总之，写博客可以是一种令人满意的表达方式，可以帮助你探索和发现新的想法和机会。关键是要保持频率和灵活性，并尝试不同的博客格式。</p>
<h2 id="web3-批量空投">Web3 批量空投</h2>
<p>最近，参与了 <a href="https://cartoon.lifeform.cc/login">Lifeform Cartoon</a> 的空投，这是我第一次参与 web3。下面是记录一下操作步骤：</p>
<ul>
<li>下载狐狸钱包</li>
<li>批量创建账号</li>
<li>批量从一个账号转币到多个账号</li>
<li>批量导入账号到狐狸钱包</li>
<li>访问 Lifeform Cartoon 的邀请链接地址，比如：https://cartoon.lifeform.cc?referral=0x068b021B7d44e4795c6ec07234D66c144644dC37，然后，连接狐狸钱包里的账号，mint 之后，分享链接再使用新的链接重复上面动作</li>
</ul>
<p>上面的步骤，如果是几百个账号手动执行，则需要花费很长时间。作为一个程序员，有没有办法让程序自动实现呢？</p>
<p>在网上查找了一些资料，同时使用 chatgpt（备注：https://poe.com/chatgpt）找到了使用 nodejs 实现的相关代码。</p>
<h3 id="1批量创建账号">1、批量创建账号</h3>
<p>在 BSC 网络上使用 Node.js 编程语言批量创建账户并保存为 CSV 文件的完整代码，不使用 csv-writer 库</p>
<p>
  <img loading="lazy" src="https://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-03.png" alt="weekly-review-03"  /></p>
<h3 id="2批量转账">2、批量转账</h3>
<p>在 BSC 网络上使用 Node.js 编程语言从一个账号批量转 0.0125bnb 到前面创建的多个账号，输出完整的可以运行的代码</p>
<p>
  <img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-05.png" alt="weekly-review-05"  /></p>
<h3 id="3批量导入账号到-metamask-钱包">3、批量导入账号到 metamask 钱包</h3>
<p>通过编程实现在 BSC 网络 批量导入账号到浏览器的 metamask 钱包</p>
<p>
  <img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-04.png" alt="weekly-review-04"  /></p>
<p>下一步，就是测试上面代码，实现全流程代码托管。</p>
<p>
  <img loading="lazy" src="http://chensoul.oss-cn-hangzhou.aliyuncs.com/images/weekly-review-09-06.png" alt="weekly-review-09-06"  /></p>
<h2 id="好物分享">好物分享</h2>
<p>虽然大部分有意思的内容会分享在 『<a href="https://t.me/chensoul_share">ChenSoul Share</a>』Telegram 频道，不过还是挑选一部分在这里列举一下，感觉更像一个 newsletter 了。</p>
<h3 id="一些文章">一些文章</h3>
<ul>
<li><a href="https://feeds.feedblitz.com/~/729974291/0/baeldung~Service-Profiles-in-Docker">Service Profiles in Docker | Baeldung</a></li>
<li><a href="https://geekr.dev/posts/chatgpt-ultimate-guide">ChatGPT 终极指南</a></li>
<li><a href="https://reorx.com/makers-daily/004-prompts-and-parameters-transparancy/">谈谈我对 ChatGPT 应用的 prompt 的看法</a></li>
<li><a href="https://anotherdayu.com/2023/4866/">支持 OpenAI ChatGPT API 的优秀软件</a></li>
<li><a href="https://geekr.dev/posts/chatgpt-start">编程新手如何通过 ChatGPT 一天完成一个 MVP 产品</a></li>
<li><a href="https://github.com/Zhengqbbb/cz-git">让 OpenAI 生成 git commit message</a></li>
<li><a href="https://insights.thoughtworks.cn/good-code-five-qualities-cupid/">好代码的五个特质 - Thoughtworks 洞见</a></li>
<li><a href="https://www.joshwcomeau.com/blog/how-i-built-my-blog/">我如何搭建自己的博客</a>（英文）</li>
<li><a href="https://zedex.cn/8399.html">从 Mac 开箱开始 设置一个开发环境 - ZedeX</a></li>
<li><a href="https://mp.weixin.qq.com/s/eil_zYS4ISK-4ojezzP-pg">创始人 CEO 为什么要写作（原创 5000 字长文尝试说透）</a></li>
<li><a href="https://mp.weixin.qq.com/s/xfphy67PTbtjeggo7LpjSA">从抄书到开源之巅：章亦春的程序人生</a></li>
</ul>
<h3 id="一些工具">一些工具</h3>
<h4 id="1poecomhttpspoecom">1、<a href="https://poe.com/"><strong>poe.com</strong></a></h4>
<p>美国问答网站 Quora 开发的 ChatBot 产品，整合不同聊天机器，包括 ChatGPT。响应速度非常快，比 chat.openai.com 的免费账户快非常多。有 ios 版，手机也能用了。ios 版有社区，可以分享聊天记录。</p>
<h4 id="2founderbeatshttpsfounderbeatscom">2、<a href="https://founderbeats.com/"><strong>FounderBeats</strong></a></h4>
<p>Founder Beats 是一家面向初创企业和创业者的音乐制作工作室，专门为他们提供高质量的背景音乐和音效。Founder Beats 的音乐库包含了各种类型的音乐，如流行、摇滚、电子、嘻哈、民谣等，以及各种音效和配乐，可以满足不同用户的需求。Founder Beats 的音乐都是由专业音乐人和制作人制作的，具有高品质和原创性。</p>
<p>除了音乐制作，Founder Beats 还提供了其他服务，如音频制作、混音和母带处理等，可以帮助客户制作高质量的音频内容。Founder Beats 的团队拥有丰富的音乐制作和音频处理经验，可以为客户提供专业的建议和支持。</p>
<p>Founder Beats 的客户包括初创企业、广告代理商、视频制作公司、游戏开发商等，他们可以使用 Founder Beats 的音乐和音效来增强他们的品牌形象、视频内容、游戏体验等。Founder Beats 的定价模式灵活，客户可以根据自己的需求选择适合自己的价格和许可证。</p>
<h4 id="3manticore-searchhttpsgithubcommanticoresoftwaremanticoresearch">3、<a href="https://github.com/manticoresoftware/manticoresearch">Manticore Search</a></h4>
<p>Manticore Search 是一款开源的全文搜索引擎，支持高性能的搜索和分析。它是 Sphinx Search 的后继者，使用了类似的架构和 API，并且在功能和性能方面有很多改进。Manticore Search 使用 C++编写，具有高效的索引和查询引擎，可以处理大量的数据和高并发访问。它支持多种数据源和数据格式，包括 MySQL、PostgreSQL、XML、JSON、CSV 等。</p>
<p>Manticore Search 提供了丰富的查询语言和 API，包括 SQL、SPHINQL 和 HTTP API 等，可以满足不同用户的需求。它支持全文搜索、模糊搜索、短语搜索、近义词搜索、地理位置搜索等多种搜索方式，并且支持高级过滤、排序、分组、聚合等功能。Manticore Search 还具有高可用性和可扩展性，支持主从复制、分片、集群等部署方式，可以满足不同规模和负载的应用场景。</p>
<p>Manticore Search 是一款使用广泛的全文搜索引擎，它被广泛应用于电子商务、社交网络、新闻媒体、在线教育等领域，帮助用户快速检索和发现所需信息。Manticore Search 在 GitHub 上开源，拥有活跃的社区和开发者，用户可以通过 GitHub 社区获得支持和贡献代码。</p>
<h4 id="4unsilencehttpsgithubcomlagmoellertimunsilence">4、<a href="https://github.com/lagmoellertim/unsilence">Unsilence</a></h4>
<p>unsilence 是一个基于 Python 的命令行工具，用于检测和修复音频文件中的静音区域。它可以帮助用户自动检测和删除音频文件中的静音部分，从而提高音频的质量和可听性。unsilence 支持多种音频格式，如 MP3、WAV、OGG 等，可以在不损失音频质量的情况下删除静音。</p>
<p>使用 unsilence 非常简单，用户只需在命令行中输入 unsilence 命令和音频文件名，unsilence 就会自动检测和修复音频文件中的静音部分。用户也可以通过设置参数来调整 unsilence 的处理方式，如设置最小静音长度、最小音量阈值等。</p>
<h4 id="5css-bedhttpswwwcssbedcom">5、<a href="https://www.cssbed.com/">CSS Bed</a></h4>
<p>这个网页收集并展示各种无类的极简化 CSS 框架。如果你想选一个简单的 CSS 框架，可以看看它</p>
<h4 id="6lightrunhttpslightruncom">6、<a href="https://lightrun.com/">lightrun</a></h4>
<p>lightrun.com 是一款基于云的实时 Java 和 Kotlin 应用程序调试和观察工具。它提供了一种无需修改代码即可实时调试 Java 和 Kotlin 应用程序的方式，减少了开发人员的调试时间，提高了应用程序的稳定性和可靠性。lightrun.com 还提供了实时日志查看和分析，可以帮助开发人员快速定位问题和解决问题，提高了应用程序的可维护性。</p>
<p>lightrun.com 可以与常见的 Java 开发工具集成，如 Eclipse、IntelliJ IDEA 和 VS Code。它还支持多种操作系统和云平台，如 Windows、Linux、Docker、AWS 和 Azure 等。开发人员可以使用 lightrun.com 来调试和监视本地应用程序，也可以在云端快速诊断生产环境中的问题。</p>
<p>lightrun.com 采用了安全的云架构，并且使用了端到端加密来保护用户数据的安全性。它还提供了灵活的计费模式，用户可以根据自己的需求选择适合自己的计费方式。</p>
<h4 id="7httpsgithubcomappscr-gpt">7、https://github.com/apps/cr-gpt</h4>
<p>基于 ChatGPT 的 Github Code Review 机器人</p>
<h4 id="8妙记多-mojidoc-httpsmojidoccom">8、<a href="https://mojidoc.com/">妙记多 Mojidoc </a></h4>
<p>新一代生产协同工具</p>
<p>以上。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
