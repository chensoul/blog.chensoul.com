<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Oauth2 on ChenSoul</title>
    <link>https://blog.chensoul.cc/tags/oauth2/</link>
    <description>Recent content in Oauth2 on ChenSoul</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 06 Jun 2024 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/tags/oauth2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>All things about OAuth</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/all-things-about-oauth/</link>
      <pubDate>Thu, 06 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/06/all-things-about-oauth/</guid>
      <description>&lt;p&gt;OAuth 是一种&lt;strong&gt;开放协议&lt;/strong&gt;，允许通过网络、移动和桌面应用程序以&lt;strong&gt;简单&lt;/strong&gt;、&lt;strong&gt;标准的方式进行&lt;/strong&gt;安全授权。&lt;/p&gt;
&lt;h2 id=&#34;oauth-2-入门&#34;&gt;OAuth 2 入门&lt;/h2&gt;
&lt;p&gt;以下是一些 OAuth 2.0 指南，涵盖了理解和实现客户端和服务器所需的许多主题。&lt;/p&gt;
&lt;h3 id=&#34;oauth-20-简化版httpsaaronpareckicomoauth-2-simplified&#34;&gt;&lt;a href=&#34;https://aaronparecki.com/oauth-2-simplified/&#34; target=&#34;_blank&#34;&gt;OAuth 2.0 简化版&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;由 &lt;a href=&#34;https://aaronparecki.com/&#34; target=&#34;_blank&#34;&gt;Aaron Parecki&lt;/a&gt; 编写的*《OAuth 2.0 Simplified*》是一份专注于编写客户端的 OAuth 2.0 指南，它在入门级别上清晰地概述了规范。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OAuth2和OIDC区别</title>
      <link>https://blog.chensoul.cc/posts/2024/06/06/oauth2-oidc/</link>
      <pubDate>Thu, 06 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/06/oauth2-oidc/</guid>
      <description>&lt;h2 id=&#34;认证和授权&#34;&gt;认证和授权&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;认证 (Authentication)&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认证是验证用户、设备或系统身份的过程。&lt;/li&gt;
&lt;li&gt;常见的认证方式包括用户名/密码、生物特征(如指纹、人脸)、单点登录(SSO)等。&lt;/li&gt;
&lt;li&gt;认证确保只有被授权的实体才能访问系统或资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;授权 (Authorization)&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授权是确定已认证的实体被允许执行哪些操作或访问哪些资源的过程。&lt;/li&gt;
&lt;li&gt;授权通常基于预定义的策略和规则，如角色、权限、访问控制列表(ACL)等。&lt;/li&gt;
&lt;li&gt;授权决定了经过身份验证的实体可以执行的操作和访问的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;认证和授权的关系：&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译][译]OAuth2 with Spring 第5部分：使用PKCE保护您的Spring Boot应用程序以增强安全性</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security/</guid>
      <description>&lt;p&gt;原文地址：https://mainul35.medium.com/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security-d8025cd08769&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]OAuth2 with Spring 第1部分：了解基本概念</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/</guid>
      <description>&lt;p&gt;原文地址：https://mainul35.medium.com/oauth2-with-spring-part-1-knowing-the-basic-concepts-5c4aa17884a&lt;/p&gt;
&lt;p&gt;在本系列&lt;strong&gt;关于 Spring 的 OAuth2&lt;/strong&gt;的文章中，我将尝试介绍和解释与 OAuth2 相关的每一个问题以及如何在 Spring 框架中实现这些问题。请记住，OAuth2 完全是一个概念性的东西，在不同的框架中，它有自己的实现。此外，许多应用程序开发人员开发自己的 OAuth2 实现，而不使用 Spring 框架提供的 OAuth2 框架支持。因此，我将就这个主题撰写一系列文章。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]OAuth2 with Spring 第2部分：授权服务器入门</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;https://mainul35.medium.com/oauth2-with-spring-part-2-getting-started-with-authorization-server-13804910cb2a&#34; target=&#34;_blank&#34;&gt;https://mainul35.medium.com/oauth2-with-spring-part-2-getting-started-with-authorization-server-13804910cb2a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring 团队最近发布了他们的授权服务器。OAuth2 一直是一个热门话题，而构建或理解授权服务器一直是一个谜。在本系列的&lt;a href=&#34;https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/&#34;&gt;第 1 部分&lt;/a&gt;中，我描述了几乎所有您需要了解的有关 OAuth2 的概念性内容。在本系列的这篇文章中，我将尝试演示如何构建具有&lt;strong&gt;client_credential&lt;/strong&gt;授权类型的授权服务器。我将从使用配置属性进行自动配置开始解释它们，并通过编写 Java 代码自定义配置。让我们开始吧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]OAuth2 with Spring 第3部分：使用Spring授权服务器授予authorization_code OIDC客户端</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/</guid>
      <description>&lt;p&gt;原文地址：https://mainul35.medium.com/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring-67769f9dd68a&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]OAuth2 with Spring 第4部分：Spring授权客户端与Google授权服务器的社交登录演示</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google/</guid>
      <description>&lt;p&gt;原文地址：https://mainul35.medium.com/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google-be6097ec18a5&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]OAuth2.0服务器</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-server/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-server/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;作者：&lt;a href=&#34;https://aaronparecki.com/&#34; target=&#34;_blank&#34;&gt;Aaron Parecki&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我第一次接触 OAuth 是在 2010 年，当时我正在构建一个 API，我知道我希望第三方开发人员能够在其基础上构建应用程序。当时，OAuth 看起来令人生畏。OAuth 1 的实现只有少数几个，而 OAuth 2.0 仍是一个草稿。一天晚上，我决定坐下来，拿着精酿啤酒和最新草案的纸质副本，从头到尾阅读它，直到我理解它。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]OAuth2简化版</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth-2-simplified/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth-2-simplified/</guid>
      <description>&lt;p&gt;这篇文章以简化的格式描述了 OAuth 2.0，以帮助开发人员和服务提供商实现该协议。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://oauth.net/2/&#34; target=&#34;_blank&#34;&gt;OAuth 2 规范&lt;/a&gt;读起来可能有点混乱，所以我写了这篇文章来帮助以简化的格式描述术语。核心规范将许多决策留给实现者，通常基于实现的安全权衡。这篇文章没有描述成功实施 OAuth 2 所需的所有可能决策，而是做出适用于大多数实现的决策。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RFC6749 | OAuth2.0授权框架中文版</title>
      <link>https://blog.chensoul.cc/posts/2024/06/05/oauth2/</link>
      <pubDate>Wed, 05 Jun 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;h3 id=&#34;摘要&#34;&gt;摘要&lt;/h3&gt;
&lt;p&gt;OAuth2.0 授权框架允许第三方应用获取对 HTTP 服务的有限的访问权限，既可以以资源所有者名义在资源所有者和 HTTP 服务之间进行允许的交互，也可以允许第三方应用以自己的名义进行访问。本规范取代并淘汰 RFC 5849 中描述的 OAuth 1.0 协议。&lt;/p&gt;
&lt;h3 id=&#34;本备忘录状态&#34;&gt;本备忘录状态&lt;/h3&gt;
&lt;p&gt;这是一个互联网标准化过程文档。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]什么是 OAuth？</title>
      <link>https://blog.chensoul.cc/posts/2024/05/07/oauth/</link>
      <pubDate>Tue, 07 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/07/oauth/</guid>
      <description>&lt;p&gt;原文链接：&lt;a href=&#34;https://www.pubnub.com/guides/oauth/&#34; target=&#34;_blank&#34;&gt;https://www.pubnub.com/guides/oauth/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;什么是-oauth&#34;&gt;什么是 OAuth？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://oauth.net/&#34; target=&#34;_blank&#34;&gt;OAuth（开放授权）&lt;/a&gt;是一种开放标准授权框架，允许第三方应用程序访问用户数据，而无需用户共享其登录凭据。它为用户提供了一种安全且标准化的方式，将其在一个网站上的资源的访问权限授予另一个网站或应用程序，而无需暴露其密码。&lt;/p&gt;
&lt;p&gt;简单来说，OAuth 充当最终用户和他们想要授予访问权限的应用程序之间的中间人。用户不会直接向 Web 应用程序提供用户名和密码，而是会被重定向到授权服务器（例如 Google、Facebook 或 Twitter），在那里他们可以安全地验证自己的身份。经过身份验证后，用户可以授予或拒绝对其想要使用的应用程序上的数据的访问权限。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2024-01-10｜ Java审计框架inspektr</title>
      <link>https://blog.chensoul.cc/posts/2024/01/10/til/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/10/til/</guid>
      <description>&lt;p&gt;今天做了什么：&lt;/p&gt;
&lt;p&gt;1、Java Lambda 增强 &lt;a href=&#34;https://github.com/jOOQ/jOOL&#34; target=&#34;_blank&#34;&gt;https://github.com/jOOQ/jOOL&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/vavr-io/vavr&#34; target=&#34;_blank&#34;&gt;https://github.com/vavr-io/vavr&lt;/a&gt; ，jOOL 在 jdk8 下存在编译错误，计划，整合这两个项目，创建一个新的项目，只引入自己需要的一些类。&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&#34;https://www.pac4j.org/&#34; target=&#34;_blank&#34;&gt;https://www.pac4j.org/&lt;/a&gt; 一个安全框架&lt;/p&gt;
&lt;p&gt;3、&lt;a href=&#34;https://github.com/apereo/inspektr&#34; target=&#34;_blank&#34;&gt;https://github.com/apereo/inspektr&lt;/a&gt; 一个轻量级的 Java 审计框架。这个是在看 CAS 源码的过程中，发现的。&lt;/p&gt;
&lt;p&gt;在 CAS 的源码中，有一些比较不错的代码，引入到自己的项目中，另外，打算仿照这个 inspektr 框架，重写公司微服务项目中的日志记录模块。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2024-01-09｜单点登录</title>
      <link>https://blog.chensoul.cc/posts/2024/01/09/til/</link>
      <pubDate>Tue, 09 Jan 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/09/til/</guid>
      <description>&lt;p&gt;今天做了什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zexo.dev/posts/2020/03/01/keep-your-repo-dependencies-up-to-date-with-renovate/&#34; target=&#34;_blank&#34;&gt;使用 renovate 监控第三方依赖更新&lt;/a&gt; ，renovate 貌似需要付费，放弃。&lt;/li&gt;
&lt;li&gt;spring-security-oauth2-samples 示例工程重命名模块和包名，代码见 &lt;a href=&#34;https://github.com/chensoul/spring-security-oauth2-boot&#34; target=&#34;_blank&#34;&gt;spring-security-oauth2-boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;实现单点登录并测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现单点登录并测试&#34;&gt;实现单点登录并测试&lt;/h2&gt;
&lt;p&gt;实现单点登录（Single Sign-On，SSO）可以采用多种思路和技术。下面是几种常见的实现思路：&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023-12-28｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2023/12/28/til/</link>
      <pubDate>Thu, 28 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/28/til/</guid>
      <description>&lt;p&gt;今天做了什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;重构微服务项目中使用 spring-security-oauth2 搭建 OAuth2 认证服务和资源服务的代码，减少其他模块对此的耦合度。计划将 spring-security-oauth2 迁移到 spring-security-oauth2-authorization-server 上，即使用 OAuth2.1 授权和认证。&lt;strong&gt;Spring Authorization Server&lt;/strong&gt; 相关文档，可以参考 &lt;a href=&#34;https://blog.51cto.com/u_15268610/category2&#34; target=&#34;_blank&#34;&gt;https://blog.51cto.com/u_15268610/category2&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;看 &lt;a href=&#34;https://github.com/xuxiaowei-cloud/xuxiaowei-cloud&#34; target=&#34;_blank&#34;&gt;xuxiaowei-cloud&lt;/a&gt; master 分支源代码，整理 /login 登陆逻辑，参数：username、password、tenantId、clientId&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023-12-27｜今天做了什么</title>
      <link>https://blog.chensoul.cc/posts/2023/12/27/til/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/27/til/</guid>
      <description>&lt;p&gt;今天做了什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;微服务项目中认证服务器配置授权码模式，并测试通过&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;扩展 RedisAuthorizationCodeServices ，支持设置过期时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意：OAuth2Authentication 无法从 json 反序列化，故无法使用 JSON 反序列化类，只能使用  JDK 反序列化类。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扩展 BearerTokenExtractor，支持从 request 请求的 header 中读取 access_token&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023-12-21｜Spring Security对OAuth2的支持及实现方式</title>
      <link>https://blog.chensoul.cc/posts/2023/12/21/til/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/21/til/</guid>
      <description>&lt;p&gt;Today I Learned. 今天分享内容：Spring Security 对 OAuth2 的支持&lt;/p&gt;
&lt;p&gt;Spring Security 提供了对 OAuth 的支持，并且有几个相关的项目可以用于实现 OAuth 功能。以下是一些常见的 Spring Security OAuth 项目及其相关信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spring Security OAuth（&lt;a href=&#34;https://github.com/spring-attic/spring-security-oauth&#34; target=&#34;_blank&#34;&gt;https://github.com/spring-attic/spring-security-oauth&lt;/a&gt;）：官方提供的 Spring Security OAuth 项目，为 Spring 应用程序提供了 OAuth 1.0 和 OAuth 2.0 的支持。该项目在 Spring Security 5.x 版本后已不再维护，建议使用后续提到的 Spring Authorization Server。&lt;/li&gt;
&lt;li&gt;Spring Security 5（&lt;a href=&#34;https://github.com/spring-attic/spring-security&#34; target=&#34;_blank&#34;&gt;https://github.com/spring-attic/spring-security&lt;/a&gt;）：Spring Security 5.x 版本开始将 OAuth 2.0 客户端支持集成到核心库中，使得在 Spring Security 中实现 OAuth 2.0 认证变得更加简单。你可以使用 Spring Security 5.x 以及后续版本来实现 OAuth 2.0 客户端功能。&lt;/li&gt;
&lt;li&gt;Spring Security OAuth2 Boot（&lt;a href=&#34;https://github.com/spring-attic/spring-security-oauth2-boot&#34; target=&#34;_blank&#34;&gt;https://github.com/spring-attic/spring-security-oauth2-boot&lt;/a&gt;），该项目是 &lt;code&gt;spring-attic&lt;/code&gt; 组织维护的，提供了 Spring Boot 2 和旧版 Spring Security OAuth 的自动配置。该项目已经停止了活跃的开发和更新，最新的提交日期是 2022 年 5 月 20 日。&lt;/li&gt;
&lt;li&gt;Spring Authorization Server（https:&lt;a href=&#34;&#34;&gt;&lt;/a&gt;//github.com/spring-projects/spring-authorization-server）：官方提供的用于构建 OAuth 2.0 授权服务器的实验性项目。它是 Spring Security 5.3 之后推出的替代方案，旨在提供更简化和灵活的 OAuth 2.0 授权服务器功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Authorization Server&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023-12-18｜使用Spring Security实现OAuth2授权和认证</title>
      <link>https://blog.chensoul.cc/posts/2023/12/18/til/</link>
      <pubDate>Mon, 18 Dec 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/12/18/til/</guid>
      <description>&lt;p&gt;Today I Learned. 今天分享内容：使用Spring Security实现OAuth2授权和认证。&lt;/p&gt;
&lt;p&gt;最近在开发 Spring Cloud 微服务时，需要对 OAuth2 的异常处理进行定制，从网上搜到一个 github 仓库：&lt;a href=&#34;https://github.com/selfancy/oauth2&#34; target=&#34;_blank&#34;&gt;oauth2&lt;/a&gt;。这篇仓库的代码实现了 OAuth2 的四种授权模式、I18N 国际化、异常处理、JWT Token，我 fork 了一份代码，做了一些改动，去掉了 webflux、eureka 相关代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]如何在Spring Boot3中使用UserDetailsService实现安全性？</title>
      <link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://javatechonline.com/wp-content/uploads/2022/12/UserDetailsServiceSpringBoot3-1.jpg&#34; alt=&#34;Spring Security UserDetailsService Using Spring Boot 3&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;作为有关 Spring Security 的系列文章的继续，在本文中我们将学习“如何在 Spring Boot 3 中使用 UserDetailsService 实现 Spring Boot 中的安全性？”。经过前面的文章，我希望我们都非常熟悉安全性的基础知识，甚至 Spring Boot 应用程序中的安全性基础知识。 Spring Boot 3 发布后，我们将在这里实现“使用 Spring Boot 3 的 Spring Security UserDetailsService”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]Spring Security - OAuth2</title>
      <link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-oauth2/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-oauth2/</guid>
      <description>&lt;h2 id=&#34;oauth-20-基础知识&#34;&gt;OAuth 2.0 基础知识&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.tutorialspoint.com/spring_security/images/oauth_2_fundamentals.jpg&#34; alt=&#34;OAuth 2.0 Fundamentals&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;OAuth 2.0 由 IETF OAuth 工作组开发并于 2012 年 10 月发布。它作为一种开放授权协议，使第三方应用程序能够代表资源所有者对 HTTP 服务进行有限访问。它可以在不泄露用户身份或长期凭证的情况下做到这一点。第三方应用程序本身也可以代表其使用它。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]Spring Boot授权服务器 - 使用 Java 的资源服务器和客户端凭证示例</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-authorization-server/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-authorization-server/</guid>
      <description>&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;在本文中，我们将创建一个授权服务器，为任何客户端生成 access_token。这称为 OAuth2 的 &lt;code&gt;client_credentials&lt;/code&gt; 流程。它主要用于服务间通信。&lt;/p&gt;
&lt;p&gt;我们将使用 spring boot oauth2 授权服务器依赖项来创建身份验证服务器。我们还将创建一个资源服务器和客户端来对其进行端到端测试。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]在 Spring 中实现 OAuth2：使用范围（第 2 部分）</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring-scopes/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring-scopes/</guid>
      <description>&lt;p&gt;我们在&lt;a href=&#34;https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/&#34;&gt;上一篇文章&lt;/a&gt;中了解了基本的 OAuth2 概念以及如何在 Spring 中实现和执行不同的授权。在这篇文章中，我们将介绍 OAuth2 的另一个重要概念：范围。&lt;/p&gt;
&lt;h2 id=&#34;oauth-范围&#34;&gt;OAuth 范围&lt;/h2&gt;
&lt;p&gt;保护对应用程序的访问通常分两个步骤进行：身份验证和授权。要理解这两个概念，假设您在绝密政府大楼工作。在开始之前，你会得到一张卡片，可以让你进入建筑物。 OAuth 令牌可以看作是允许您访问的卡片。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]在 Spring 中实现 OAuth2：第 1 部分</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/</guid>
      <description>&lt;p&gt;OAuth2 是一组规范，主要提供对 Rest API 的安全访问的方法。 OAuth 的主要目的是允许通过使用令牌来执行身份验证和授权，而不必为每个操作提供凭据。由于本文的重点是实现，并且为了不重新发明轮子，可以查看 &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34; target=&#34;_blank&#34;&gt;OAuth RFC&lt;/a&gt; 或&lt;a href=&#34;https://en.wikipedia.org/wiki/OAuth&#34; target=&#34;_blank&#34;&gt;维基百科&lt;/a&gt;以获取更多理论背景。在这篇文章中，我们将深入探讨 Spring 中的 OAuth2 实现以及如何使用不同的授权类型，但在此之前值得提供一些重要概念的简要定义。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]使用Spring Boot2和Spring Security 5以及JDBC令牌存储进行Oauth2集中授权</title>
      <link>https://blog.chensoul.cc/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</link>
      <pubDate>Fri, 14 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</guid>
      <description>&lt;p&gt;在这篇文章中，我们将了解如何使用 Spring Boot 2 和 Spring Security 5 OAuth2 来实现集中授权的授权服务器以及如何通过 GUI 对其进行管理，还将提供资源服务器演示以及 github 下的整个项目。&lt;/p&gt;
&lt;p&gt;很多示例涵盖了基于早期版本的 Spring boot 2 和 Spring Security 5 使用内存令牌实现 Oauth2，因此想法是使用 MySql 数据库作为令牌存储。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
