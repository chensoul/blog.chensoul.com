<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>oauth2 on ChenSoul</title>
    <link>https://blog.chensoul.com/tags/oauth2/</link>
    <description>Recent content in oauth2 on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 19 Sep 2023 14:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.com/tags/oauth2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译]SPRING BOOT JWT - 如何使用 SPRING SECURITY 和 JSON WEB 令牌保护您的 REST API</title>
      <link>https://blog.chensoul.com/posts/2023/09/19/spring-security-jwt/</link>
      <pubDate>Tue, 19 Sep 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/09/19/spring-security-jwt/</guid>
      <description>如果您快速搜索如何使用 JSON Web Tokens 在 Spring Boot 中保护 REST API，您会发现很多相同的结果。这些结果包含一种方法，该方法涉及编写自定义过滤器链并引入第三方库来编码和解码 JWT。
在看完这些令人费解且令人困惑的教程后，我说必须有一种更简单的方法来做到这一点。我做了任何直接接触 Spring Security 团队的人都会做的事情，我向他们寻求帮助。他们告诉我，Spring Security 确实使用 oAuth2 资源服务器内置了对 JWT 的支持。
在本教程中，您将学习如何使用 JSON Web Tokens (JWT) 和 Spring Security 来保护您的 API。我并不是说这种方法无论如何都很容易，但对我来说，它比其他选择更有意义。
Github 存储库
应用架构 在我们开始编写一些代码之前，我想确保我们对于我们正在构建的内容都达成共识。在下面的示例中，您有一个客户端应用程序，它可以是一个简单的命令行应用程序、一个用 Angular 或 Vue 等编写的完整前端应用程序，或者系统中的其他一些服务。
该客户端应用程序将调用使用 Spring Boot 编写的服务器应用程序，该应用程序通过 REST API 公开数据。在下面的示例中，它是一个整体，但如果您有分布式架构，则同样适用。当前有 3 个 REST 控制器公开资源产品、订单和客户。
您要做的是保护所有资源，以便当客户端调用 REST API 时，客户端将收到 401（未经授权），这意味着客户端请求尚未完成，因为它缺少所请求资源的有效身份验证凭据。
JSON 网络令牌 (JWT) JSON Web 令牌是一种开放方法，用于在两方之间安全地表示声明。 JWT 是一组声明（JSON 属性-值对），它们共同构成一个 JSON 对象。它由三部分组成：
Header: 由两个属性组成：{ &amp;ldquo;alg&amp;rdquo;: &amp;ldquo;HS256&amp;rdquo;, &amp;ldquo;typ&amp;rdquo;: &amp;ldquo;JWT&amp;rdquo; }。 alg 是用于加密 JWT 的算法。 Payload: 这是存储要发送的数据的地方；该数据存储为 JSON 属性-值对。 Signature: 这是通过加密创建的，使用标头中指定的算法：（i）base64Url 编码的标头，（ii）base64Url 编码的有效负载，以及（iii）秘密（或私钥）： HMACSHA256(base64UrlEncode(header) + &amp;#34;.</description>
      <content:encoded><![CDATA[<p>如果您快速搜索如何使用 JSON Web Tokens 在 Spring Boot 中保护 REST API，您会发现很多相同的结果。这些结果包含一种方法，该方法涉及编写自定义过滤器链并引入第三方库来编码和解码 JWT。</p>
<p>在看完这些令人费解且令人困惑的教程后，我说必须有一种更简单的方法来做到这一点。我做了任何直接接触 Spring Security 团队的人都会做的事情，我向他们寻求帮助。他们告诉我，Spring Security 确实使用 oAuth2 资源服务器内置了对 JWT 的支持。</p>
<p>在本教程中，您将学习如何使用 JSON Web Tokens (JWT) 和 Spring Security 来保护您的 API。我并不是说这种方法无论如何都很容易，但对我来说，它比其他选择更有意义。</p>
<p><a href="https://github.com/danvega/jwt">Github 存储库</a></p>
<h2 id="应用架构">应用架构</h2>
<p>在我们开始编写一些代码之前，我想确保我们对于我们正在构建的内容都达成共识。在下面的示例中，您有一个客户端应用程序，它可以是一个简单的命令行应用程序、一个用 Angular 或 Vue 等编写的完整前端应用程序，或者系统中的其他一些服务。</p>
<p>该客户端应用程序将调用使用 Spring Boot 编写的服务器应用程序，该应用程序通过 REST API 公开数据。在下面的示例中，它是一个整体，但如果您有分布式架构，则同样适用。当前有 3 个 REST 控制器公开资源产品、订单和客户。</p>
<p>您要做的是保护所有资源，以便当客户端调用 REST API 时，客户端将收到 401（未经授权），这意味着客户端请求尚未完成，因为它缺少所请求资源的有效身份验证凭据。</p>
<p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/app-arch-401.f374804.0962d1509d07acba537f6129298c4fa5.png" alt="Application Architecture: 401 Unauthorized"  /></p>
<h3 id="json-网络令牌-jwt">JSON 网络令牌 (JWT)</h3>
<p>JSON Web 令牌是一种开放方法，用于在两方之间安全地表示声明。 JWT 是一组声明（JSON 属性-值对），它们共同构成一个 JSON 对象。它由三部分组成：</p>
<ul>
<li>Header: 由两个属性组成：{ &ldquo;alg&rdquo;: &ldquo;HS256&rdquo;, &ldquo;typ&rdquo;: &ldquo;JWT&rdquo; }。 alg 是用于加密 JWT 的算法。</li>
<li>Payload: 这是存储要发送的数据的地方；该数据存储为 JSON 属性-值对。</li>
<li>Signature: 这是通过加密创建的，使用标头中指定的算法：（i）base64Url 编码的标头，（ii）base64Url 编码的有效负载，以及（iii）秘密（或私钥）：</li>
</ul>
<pre tabindex="0"><code>HMACSHA256(base64UrlEncode(header) + &#34;.&#34; + base64UrlEncode(payload), secret|privateKey)
</code></pre><p>最终的 JWT 由三部分组成。每个都是 base64Url 编码的，并且与下一个之间用点分隔。有关更多详细信息，请参阅 openid.net 和 jwt.io 网站。</p>
<p>您将引入一个新的身份验证控制器，客户端可以使用其身份验证凭据（用户名 + 密码）向该控制器发出请求，并且当成功通过身份验证时，服务将返回 JWT。</p>
<p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/app-arch-jwt.f374804.0d833a85e47f7d3f2d2662ffc1e13ede.png" alt="Application Architecture: JSON Web Token (JWT)"  /></p>
<p>然后，客户端将存储 JWT，并且每个后续请求将通过 Authorization 标头传递它。当服务器应用程序收到带有 JWT 的请求时，它将验证它是否是有效令牌，如果是，则允许请求继续。</p>
<p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/app-arch-with-jwt-200.f6e5db1.507593f0d844675167707e10fc94cf72.png" alt="Application Architecture: Request with JSON Web Token (JWT)"  /></p>
<h2 id="入门">入门</h2>
<p>首先，您将前往 start.spring.io 并创建一个新项目。填写项目的元数据并添加以下依赖项：</p>
<ul>
<li>Spring Web</li>
<li>oAuth2 Resource Server oAuth2</li>
<li>Spring Configuration Processor</li>
</ul>
<p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/start-spring-io.42db587.ed9464eb8a6d436a6fcb7502aaeaa00c.png" alt="Spring Initiliazr"  /></p>
<p>这将在您的 <code>pom.xml</code> 中生成以下依赖项</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-oauth2-resource-server<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-configuration-processor<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>我知道你在想什么，Spring Security 怎么样？如果您深入研究 <code>spring-boot-starter-oauth2-resource-server</code> ，您会发现它包含 Spring Security Starter，其中包含您需要的一切。</p>
<h2 id="rest-api">REST API</h2>
<p>您需要做的第一件事是创建一个您想要保护的 REST API。出于演示目的并保持简单，使用返回字符串的单个方法在 <code>controller</code> 包中创建 <code>HomeController</code> 。请求映射处理程序方法可以接受一系列参数，其中之一是 <code>java.security.Principal</code> 。这将允许您打印出当前经过身份验证的用户的用户名。</p>
<p>Spring Security 采用默认安全的安全方法。这意味着，如果您启动应用程序并尝试访问 http://localhost:8080，您将被重定向到登录页面。如果您想登录，可以输入用户名 <code>user</code> ，密码将生成并应在控制台输出中列出。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">home</span><span class="o">(</span><span class="n">Principal</span> <span class="n">principal</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello, &#34;</span> <span class="o">+</span> <span class="n">principal</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/please-sign-in.42db587.ffed1af8b1a6885620ffbe7f761b1441.png" alt="Spring Security Login"  /></p>
<h2 id="spring-安全配置">SPRING 安全配置</h2>
<p>默认的安全配置足以让您启动并运行，但您需要提供自己的安全配置来满足应用程序的需求。过去，您可以扩展 <code>WebSecurityConfigurerAdapter</code> ，但这在 Spring Security 5.7.x 中已被弃用。如果您有兴趣了解有关此更改的更多信息，可以查看<a href="https://youtu.be/s4X4SJv2RrU">本教程</a>。</p>
<p>首先，在 <code>config</code> 包中创建一个名为 <code>SecurityConfig</code> 的新类。该类将具有以下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">securityFilterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">csrf</span><span class="o">(</span><span class="n">csrf</span> <span class="o">-&gt;</span> <span class="n">csrf</span><span class="o">.</span><span class="na">disable</span><span class="o">())</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">(</span> <span class="n">auth</span> <span class="o">-&gt;</span> <span class="n">auth</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">sessionManagement</span><span class="o">(</span><span class="n">session</span> <span class="o">-&gt;</span> <span class="n">session</span><span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">))</span> <span class="c1">// (3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">.</span><span class="na">httpBasic</span><span class="o">(</span><span class="n">Customizer</span><span class="o">.</span><span class="na">withDefaults</span><span class="o">())</span> <span class="c1">// (4)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>禁用跨站点请求伪造 (CSRF)</li>
<li>应针对应用程序中的任何请求对用户进行身份验证。</li>
<li>Spring Security 永远不会创建 HttpSession，也永远不会使用它来获取安全上下文。</li>
<li>Spring Security 的 HTTP 基本身份验证支持默认启用。但是，一旦提供任何基于 servlet 的配置，就必须显式提供 HTTP Basic。</li>
</ol>
<p>⚠️ 警告：在启用会话管理的同时，切勿禁用 CSRF 保护！这样做会使您面临跨站点请求伪造攻击。</p>
<p>现在您已经有了自定义安全配置，您需要一个不是 Spring Boot 提供的默认用户的用户。以下配置将使用 <code>NoOpPasswordEncoder</code> 创建内存中用户。这是一个密码编码器，不执行任何操作，对于测试很有用，但不应在生产中使用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">InMemoryUserDetailsManager</span> <span class="nf">users</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">InMemoryUserDetailsManager</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">User</span><span class="o">.</span><span class="na">withUsername</span><span class="o">(</span><span class="s">&#34;dvega&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                    <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="s">&#34;{noop}password&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                    <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                    <span class="o">.</span><span class="na">build</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>配置新用户后，您应该能够重新启动应用程序并访问 http://localhost:8080。您将看到一个对话框，要求输入用户名和密码，如果一切正常，您应该能够使用 <code>dvega</code> + <code>password</code> 登录。</p>
<p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/http-basic-auth.42db587.59885479c41b23db4fa6810d75cfaa42.png" alt="Spring Security HTTP Basic"  /></p>
<h2 id="oauth-20-资源服务器">OAUTH 2.0 资源服务器</h2>
<p>如果您看过我之前的教程，那么您到目前为止所做的一切应该很熟悉，但我知道这不是您来这里的目的。 Spring Security 支持使用两种形式的 OAuth 2.0 不记名令牌保护端点：</p>
<ul>
<li>JWT</li>
<li>Opaque Tokens</li>
</ul>
<p>在应用程序将其权限管理委托给<a href="https://tools.ietf.org/html/rfc6749">授权服务器</a>（例如，Okta 或 <a href="https://spring.io/projects/spring-authorization-server">Spring 授权服务器</a>）的情况下，这非常方便。资源服务器可以咨询该授权服务器来授权请求 ​​。</p>
<p>在本教程中，您将使用自签名 JWT，这将无需引入授权服务器。虽然这适用于本示例，但您的应用程序要求可能有所不同，因此什么时候不再接受使用自签名 JWT？我也向 Spring Security 团队提出了这个问题，并得到了一些非常好的答案。</p>
<blockquote>
<p>当您达到无法接受自签名 JWT 的权衡时。一个例子可能是您想要引入刷新令牌的时刻。</p>
</blockquote>
<blockquote>
<p>我想补充一点，当您拥有多个服务或者您希望能够强化安全性时，不同的授权服务器更有意义（隔离像身份验证这样重要的东西可以提供价值，因为攻击面减少了）</p>
</blockquote>
<p>我们可能会花很多时间讨论授权和资源服务器。为了让本教程围绕这个主题，我将给您留下一些非常好的资源，我建议您在有时间时阅读它们。</p>
<ul>
<li><a href="https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/index.html">OAuth2 Resource Server</a></li>
<li><a href="https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html">OAuth2 Resource Server JWT</a></li>
<li><a href="https://spring.io/projects/spring-authorization-server">Spring Authorization Server</a></li>
</ul>
<h3 id="oauth-2-资源服务器配置">OAUTH 2 资源服务器配置</h3>
<p>现在您已经知道什么是资源服务器以及它的用途，您需要配置一个。您可以通过设置 <code>.oauth2ResourceServer()</code> 在安全配置中执行此操作。这可以是自定义资源服务器配置器，或者您可以使用 Spring 提供的 <code>OAuth2ResourceServerConfigurer</code> 类。</p>
<p><code>OAuth2ResourceServerConfigurer</code> 是 OAuth 2.0 资源服务器支持的 <code>AbstractHttpConfigurer</code> 。默认情况下，这会连接一个 <code>BearerTokenAuthenticationFilter</code> ，它可用于解析对承载令牌的请求并进行身份验证尝试。</p>
<p>该配置类有以下可用选项：</p>
<ul>
<li><code>accessDeniedHandler</code> - 自定义处理拒绝访问错误的方式。</li>
<li><code>authenticationEntryPoint</code> - 自定义如何处理身份验证失败。</li>
<li><code>bearerTokenResolver</code> - 自定义如何从请求中解析承载令牌。</li>
<li><code>jwt</code>(Customizer) - 启用 Jwt 编码的不记名令牌支持。</li>
<li><code>opaqueToken</code>(Customizer) -启用不透明的不记名令牌支持。</li>
</ul>
<p>您将使用 JWT，因此配置选项可以使用方法引用，并且看起来像 <code>OAuth2ResourceServerConfigurer::jwt</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">securityFilterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">http</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">csrf</span><span class="o">(</span><span class="n">csrf</span> <span class="o">-&gt;</span> <span class="n">csrf</span><span class="o">.</span><span class="na">disable</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">(</span> <span class="n">auth</span> <span class="o">-&gt;</span> <span class="n">auth</span>
</span></span><span class="line"><span class="cl">                    <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">oauth2ResourceServer</span><span class="o">(</span><span class="n">OAuth2ResourceServerConfigurer</span><span class="o">::</span><span class="n">jwt</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">sessionManagement</span><span class="o">(</span><span class="n">session</span> <span class="o">-&gt;</span> <span class="n">session</span><span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">httpBasic</span><span class="o">(</span><span class="n">withDefaults</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>当您使用 JWT 定制器时，您需要提供以下其中一项：</p>
<ul>
<li>通过 <code>OAuth2ResourceServerConfigurer.JwtConfigurer.jwkSetUri</code> 提供 Jwk Set Uri</li>
<li>通过 <code>OAuth2ResourceServerConfigurer.JwtConfigurer.decoder</code> 提供 JwtDecoder 实例</li>
<li>公开 JwtDecoder bean。</li>
</ul>
<p>如果您尝试运行该应用程序而不提供上述选项之一，您将收到以下错误：</p>
<pre tabindex="0"><code>Description:

Parameter 0 of method setFilterChains in
org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration
required a bean of type &#39;org.springframework.security.oauth2.jwt.JwtDecoder&#39; that could not be found.

Action:

Consider defining a bean of type &#39;org.springframework.security.oauth2.jwt.JwtDecoder&#39;
in your configuration.
</code></pre><h3 id="签署-json-网络令牌">签署 JSON 网络令牌</h3>
<p>下一步是创建一个新的 <code>JwtDecoder</code> bean，但我认为我们需要讨论一下我们将在这里做什么。正如您之前了解到的，JWT 由 3 个部分组成：标头、有效负载和签名。签名是通过加密标头+有效负载和秘密（或私钥）来创建的。</p>
<p>JWT 可以使用对称密钥（共享密钥）或非对称密钥（私有-公共对的私有密钥）进行加密。</p>
<ul>
<li>对称密钥：相同的密钥用于加密（创建 JWT 时）和解密（MobileTogether Server 使用该密钥来验证 JWT）。对称密钥（也称为共享密钥）作为设置存储在 MobileTogether Server 中。有关使用对称密钥的详细信息，请参阅对称密钥：共享密钥。</li>
<li>非对称密钥：加密（私钥）和解密（公钥）使用不同的密钥。公钥作为设置存储在 MobileTogether 服务器中，以便可以验证 JWT。有关对 JWT 使用非对称加密的信息，请参阅非对称密钥：公钥。</li>
</ul>
<p>每种方法都有优点/缺点，但通常建议您使用非对称密钥，因此这就是您在此处采用的方法。</p>
<h3 id="公钥和私钥">公钥和私钥</h3>
<p>您将创建一个公钥/私钥对。您可以通过代码来完成此操作，但我认为如果您在这里手动执行此操作可能会更有意义。我将在 <code>/src/main/rescurces/certs</code> 下的新文件夹中创建它们。我将使用默认安装在 macOS 上的 OpenSSL，但您应该能够在您使用的任何操作系统上安装它。</p>
<p>通常情况下，您可以运行前两个命令。第三条命令的原因是私钥需要采用 PEM 编码的 PKCS#8 格式。切换到该 certs 目录并分别运行以下每个命令。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># create rsa key pair</span>
</span></span><span class="line"><span class="cl">openssl genrsa -out keypair.pem <span class="m">2048</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># extract public key</span>
</span></span><span class="line"><span class="cl">openssl rsa -in keypair.pem -pubout -out public.pem
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create private key in PKCS#8 format</span>
</span></span><span class="line"><span class="cl">openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in keypair.pem -out private.pem
</span></span></code></pre></div><p>如果一切运行没有错误并且您同时拥有公钥和私钥，则可以删除 <code>keypair.pem</code></p>
<h3 id="jwtdecoder">JWTDECODER</h3>
<p>公钥和私钥就位后，您可以将注意力集中到定义 <code>JwtDecoder</code> bean 上。首先，在 <code>config</code> 包中创建一个名为 <code>RsaKeyProperties</code> 的新记录类，这将用于外部化公钥和私钥。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">&#34;rsa&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">record</span> <span class="nf">RsaKeyProperties</span><span class="o">(</span><span class="n">RSAPublicKey</span> <span class="n">publicKey</span><span class="o">,</span> <span class="n">RSAPrivateKey</span> <span class="n">privateKey</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果您运行构建并打开 <code>application.properties</code> ，您应该获得私钥和公钥配置的 IntelliSense。添加以下配置，以便您的应用程序可以找到您的密钥。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">rsa.private-key<span class="o">=</span>classpath:certs/private.pem
</span></span><span class="line"><span class="cl">rsa.public-key<span class="o">=</span>classpath:certs/public.pem
</span></span></code></pre></div><p>接下来，您需要在主类上启用配置属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="n">RsaKeyProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtDemoApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">JwtDemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>回到 <code>SecurityConfig</code> ，您可以获取自动装配的实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">RsaKeyProperties</span> <span class="n">rsaKeys</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityConfig</span><span class="o">(</span><span class="n">RsaKeyProperties</span> <span class="n">rsaKeys</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">rsaKeys</span> <span class="o">=</span> <span class="n">rsaKeys</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>现在您可以使用公钥创建 <code>JwtDecoder</code> 。这是您通常需要引入第三方库的事情，但您不需要这样做。资源服务器为您带来的依赖项之一是 ``spring-security-oauth2-jose`，它包含一个名为 Nimbus Jose JWT 的库。您可以使用刚刚创建的公钥返回 Nimbus JWT 解码器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="n">JwtDecoder</span> <span class="nf">jwtDecoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">NimbusJwtDecoder</span><span class="o">.</span><span class="na">withPublicKey</span><span class="o">(</span><span class="n">rsaKeys</span><span class="o">.</span><span class="na">publicKey</span><span class="o">()).</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>此时，您应该能够运行该应用程序而不会出现任何错误。</p>
<h2 id="身份验证控制器和令牌服务">身份验证控制器和令牌服务</h2>
<p>您已准备好密钥并定义了解码器，这是一种破译 JWT 的方法。如果您还记得之前的架构图，用户将需要使用用户名和密码登录。如果他们通过身份验证，您将生成一个新的 JSON Web 令牌并将其在响应中发回。</p>
<p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/app-arch-jwt.f374804.0d833a85e47f7d3f2d2662ffc1e13ede.png" alt="Application Architecture: JSON Web Token (JWT)"  /></p>
<p>为此，您首先需要创建一个 <code>JwtEncoder</code> 类型的 bean，并且可以在 <code>SecurityConfig</code> 中执行此操作。编码器将用于将我们之前了解的签名编码为令牌，并使用我们的私钥对其进行签名。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="n">JwtEncoder</span> <span class="nf">jwtEncoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">JWK</span> <span class="n">jwk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RSAKey</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">rsaKeys</span><span class="o">.</span><span class="na">publicKey</span><span class="o">()).</span><span class="na">privateKey</span><span class="o">(</span><span class="n">rsaKeys</span><span class="o">.</span><span class="na">privateKey</span><span class="o">()).</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">JWKSource</span><span class="o">&lt;</span><span class="n">SecurityContext</span><span class="o">&gt;</span> <span class="n">jwks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImmutableJWKSet</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="n">JWKSet</span><span class="o">(</span><span class="n">jwk</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">NimbusJwtEncoder</span><span class="o">(</span><span class="n">jwks</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>您可以直接在身份验证控制器中使用编码器，但我觉得您应该将其提取到服务层。在名为 <code>service</code> 的新包中创建一个名为 <code>TokenService</code> 的新类，该类将使用新的 <code>JwtEncoder</code> 生成令牌。在以下示例中，令牌将在 1 小时后过期，但您可以调整它以满足您的需要。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TokenService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JwtEncoder</span> <span class="n">encoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">TokenService</span><span class="o">(</span><span class="n">JwtEncoder</span> <span class="n">encoder</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">encoder</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">generateToken</span><span class="o">(</span><span class="n">Authentication</span> <span class="n">authentication</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Instant</span> <span class="n">now</span> <span class="o">=</span> <span class="n">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">scope</span> <span class="o">=</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">GrantedAuthority</span><span class="o">::</span><span class="n">getAuthority</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">&#34; &#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">JwtClaimsSet</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">JwtClaimsSet</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">issuer</span><span class="o">(</span><span class="s">&#34;self&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">issuedAt</span><span class="o">(</span><span class="n">now</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">expiresAt</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">plus</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">ChronoUnit</span><span class="o">.</span><span class="na">HOURS</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">subject</span><span class="o">(</span><span class="n">authentication</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">claim</span><span class="o">(</span><span class="s">&#34;scope&#34;</span><span class="o">,</span> <span class="n">scope</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">encoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">JwtEncoderParameters</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">claims</span><span class="o">)).</span><span class="na">getTokenValue</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>接下来在 <code>controller</code> 包中创建一个名为 <code>AuthController</code> 的新控制器。这将包含一个 POST 方法，该方法将使用新的令牌服务为经过身份验证的用户生成令牌。正如您所看到的，有一些用于调试目的的日志记录，以便在开发中您将看到用户请求 JWT 和创建的令牌。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOG</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">AuthController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">TokenService</span> <span class="n">tokenService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">AuthController</span><span class="o">(</span><span class="n">TokenService</span> <span class="n">tokenService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">tokenService</span> <span class="o">=</span> <span class="n">tokenService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/token&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">token</span><span class="o">(</span><span class="n">Authentication</span> <span class="n">authentication</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">LOG</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;Token requested for user: &#39;{}&#39;&#34;</span><span class="o">,</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">tokenService</span><span class="o">.</span><span class="na">generateToken</span><span class="o">(</span><span class="n">authentication</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">LOG</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&#34;Token granted: {}&#34;</span><span class="o">,</span> <span class="n">token</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">token</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果一切都正确完成，您应该能够毫无错误地启动您的应用程序。</p>
<h2 id="spring-安全测试">SPRING 安全测试</h2>
<p>这样，您应该使用 JWT 保护您的根路径。现在您只需要测试一下即可。</p>
<h3 id="手动测试">手动测试</h3>
<p>您可以通过多种方法手动测试这一点，但在本教程中，我将向您展示 2.</p>
<p><strong>Postman</strong></p>
<p>测试这一点的一个简单方法是使用 Postman 等工具。如果您向令牌端点创建新的 POST 请求，您可以从“授权”选项卡中选择“基本身份验证”并输入您的凭据。如果一切正常，您将在响应中返回生成的 JWT。</p>
<p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/postman-basic-auth.42db587.e23a2ab227f6b4c42ea5a7dda30c2096.png" alt="Postman Basic Auth"  /></p>
<p>复制 JWT 并为 http://localhost:8080 创建新的 GET 请求。转到“授权”选项卡并选择“承载令牌”并粘贴生成的令牌。如果您发送请求，您应该取回从 <code>HomeController</code> 中的 home 方法返回的字符串。</p>
<p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/postman-with-jwt-response.42db587.b0c6661e760ad4f110496be102413c38.png" alt="Postman with JWT Response"  /></p>
<p><strong>命令行</strong></p>
<p>我非常喜欢命令行和 <a href="https://httpie.io/">httpie</a> 工具。它简化了在终端中测试 API 的命令的编写。您可以使用以下命令使用您的凭据向令牌端点发送请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http POST :8080/token --auth dvega:password -v
</span></span></code></pre></div><p><code>-v</code> 参数将打印请求和响应</p>
<p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/httpie-auth.42db587.6370b61c99685b116d4b436f5339d2f3.png" alt="Httpie with Authorization"  /></p>
<p>响应将包含生成的 JWT 令牌。如果您在没有授权标头或没有正确令牌的情况下向根路径发出请求，您将收到 401（拒绝）响应。但是，如果您以正确的格式包含 Authorization 标头，您将获得从 <code>HomeController</code> 中的 home 方法返回的字符串。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">http :8080 <span class="s1">&#39;Authorization: Bearer JWT_TOKEN_HERE&#39;</span>
</span></span></code></pre></div><p>
  <img loading="lazy" src="https://www.danvega.dev/assets/static/httpie-success.42db587.ed172ae5e4c8e03c2cc236c582715f45.png" alt="Httpie Response Success"  /></p>
<h3 id="自动化测试">自动化测试</h3>
<p>手动测试很棒，因为您可以看到一切都按预期运行。但是，您将需要一些适当的自动化测试，以便在进行更改时您可以确信没有任何内容破坏现有功能。我不会对此进行过多讨论，但我想为您提供一个简单的示例来说明如何编写此类测试。</p>
<p>当您引入资源服务器时，有一个依赖项没有引入，那就是 <code>spring-security-test</code> 。在编写任何与安全相关的测试之前，您需要将其添加到您的 <code>pom.xml</code> 中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;artifactId&gt;</span>spring-security-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>当您编写仅关注 Web 层配置的切片测试时，服务类将不会添加到应用程序上下文中。为了使一切正常工作，您需要手动导入 <code>SercurityConfig</code> 和 <code>TokenService</code> 类。这些测试应该是不言自明的，但如果您希望我进行这些测试，请联系我并告诉我。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@WebMvcTest</span><span class="o">({</span><span class="n">HomeController</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">AuthController</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Import</span><span class="o">({</span><span class="n">SecurityConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">TokenService</span><span class="o">.</span><span class="na">class</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">HomeControllerTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="n">MockMvc</span> <span class="n">mvc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">rootWhenUnauthenticatedThen401</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">mvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isUnauthorized</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">rootWhenAuthenticatedThenSaysHelloUser</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">MvcResult</span> <span class="n">result</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">mvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">post</span><span class="o">(</span><span class="s">&#34;/token&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">httpBasic</span><span class="o">(</span><span class="s">&#34;dvega&#34;</span><span class="o">,</span> <span class="s">&#34;password&#34;</span><span class="o">)))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andReturn</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getContentAsString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">mvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&#34;Authorization&#34;</span><span class="o">,</span> <span class="s">&#34;Bearer &#34;</span> <span class="o">+</span> <span class="n">token</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">content</span><span class="o">().</span><span class="na">string</span><span class="o">(</span><span class="s">&#34;Hello, dvega&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@WithMockUser</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">rootWithMockUserStatusIsOK</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">mvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)).</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="结论">结论</h2>
<p>当我开始创建本教程时，我的全部目标是让您知道有一种更简单的方法可以使用 JWT 来保护您的 API。我希望现在您知道 Spring Security 使用 oAuth2 资源服务器内置了对 JSON Web 令牌的支持，您可以在下一个项目中使用它。这只是如何在 Spring Boot 应用程序中使用 JWT 的起跑线，绝不是终点线。如果您对具体配置有疑问，请<a href="https://twitter.com/therealdanvega">与我联系</a>。</p>
<p>我感到非常幸运，能够在 VMware 这样的公司工作，并且能够接触到一些非常聪明的人。当您与一群总是愿意分享知识和提供帮助的优秀人士一起工作时，这种访问就意味着更重要。我要特别感谢以下帮助我将这些内容整合在一起的人：</p>
<ul>
<li>Steve Riesenberg</li>
<li>Rob Winch</li>
<li>Josh Cummings</li>
<li>Toshiaki Maki</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Security 与 JWT for REST API</title>
      <link>https://blog.chensoul.com/posts/2023/09/19/spring-security-tutorial/</link>
      <pubDate>Tue, 19 Sep 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/09/19/spring-security-tutorial/</guid>
      <description>免责声明：Spring Security 5+ 已发布 OAuth JWT 支持。建议使用最新版本的 OAuth 来支持 JWT，而不是使用自定义安全性或过滤器。
Spring 被认为是 Java 生态系统中值得信赖的框架，并且被广泛使用。将 Spring 称为框架不再有效，因为它更多的是涵盖各种框架的总括术语。其中一个框架是 Spring Security，它是一个功能强大且可定制的身份验证和授权框架。它被认为是保护基于 Spring 的应用程序的事实标准，因此，如果您希望实现 Spring JWT 令牌解决方案，那么将其基于 Spring Security 是有意义的。
尽管它很受欢迎，但我必须承认，当涉及到单页应用程序时，Spring 的配置并不简单和直接。我怀疑原因是它更多地是作为一个面向应用程序的 MVC 框架开始的，其中网页渲染发生在服务器端，并且通信是基于会话的。
如果后端基于 Java 和 Spring，那么使用 Spring Security 和 JWT 进行身份验证/授权并将其配置为无状态通信是有意义的。虽然有很多文章解释了这是如何完成的，但对我来说，第一次设置它仍然令人沮丧，我必须阅读并总结来自多个来源的信息。这就是我决定编写这个 Spring Security 教程的原因，我将在其中尝试总结并涵盖您在配置过程中可能遇到的所有必需的微妙细节和缺陷。
术语定义 在深入探讨技术细节之前，我想明确定义 Spring Security 上下文中使用的术语，以确保我们都使用相同的语言。 这些是我们需要解决的术语：
Authentication 验证是指根据提供的凭据验证用户身份的过程。一个常见的示例是在登录网站时输入用户名和密码。您可以将其视为对“您是谁？”这个问题的答案。 Authorization 授权是指假设用户已成功通过身份验证，则确定用户是否具有执行特定操作或读取特定数据的适当权限的过程。您可以将其视为“用户可以执行/阅读此操作吗？”问题的答案。 Principle 原则是指当前经过身份验证的用户。 Granted authority 授予权限是指经过认证的用户的权限。 Role 角色是指经过身份验证的用户的一组权限。 创建基本的 Spring 应用程序 在开始配置 Spring Security 框架之前，让我们创建一个基本的 Spring Web 应用程序。为此，我们可以使用 Spring Initializr 并生成一个模板项目。对于一个简单的 Web 应用程序，只需要 Spring Web 框架依赖就足够了：</description>
      <content:encoded><![CDATA[<p><strong>免责声明：Spring Security 5+ 已发布 OAuth JWT 支持。建议使用最新版本的 OAuth 来支持 JWT，而不是使用自定义安全性或过滤器。</strong></p>
<p><a href="https://spring.io/">Spring</a> 被认为是 Java 生态系统中值得信赖的框架，并且被广泛使用。将 Spring 称为框架不再有效，因为它更多的是涵盖各种框架的总括术语。其中一个框架是 <a href="https://spring.io/projects/spring-security">Spring Security</a>，它是一个功能强大且可定制的身份验证和授权框架。它被认为是保护基于 Spring 的应用程序的事实标准，因此，如果您希望实现 Spring JWT 令牌解决方案，那么将其基于 Spring Security 是有意义的。</p>
<p>尽管它很受欢迎，但我必须承认，当涉及到单页应用程序时，Spring 的配置并不简单和直接。我怀疑原因是它更多地是作为一个面向应用程序的 MVC 框架开始的，其中网页渲染发生在服务器端，并且通信是基于会话的。</p>
<p>如果后端基于 Java 和 Spring，那么使用 Spring Security 和 JWT 进行身份验证/授权并将其配置为无状态通信是有意义的。虽然有很多文章解释了这是如何完成的，但对我来说，第一次设置它仍然令人沮丧，我必须阅读并总结来自多个来源的信息。这就是我决定编写这个 Spring Security 教程的原因，我将在其中尝试总结并涵盖您在配置过程中可能遇到的所有必需的微妙细节和缺陷。</p>
<h2 id="术语定义">术语定义</h2>
<p>在深入探讨技术细节之前，我想明确定义 Spring Security 上下文中使用的术语，以确保我们都使用相同的语言。
这些是我们需要解决的术语：</p>
<ul>
<li><strong>Authentication</strong> 验证是指根据提供的凭据验证用户身份的过程。一个常见的示例是在登录网站时输入用户名和密码。您可以将其视为对“您是谁？”这个问题的答案。</li>
<li><strong>Authorization</strong> 授权是指假设用户已成功通过身份验证，则确定用户是否具有执行特定操作或读取特定数据的适当权限的过程。您可以将其视为“用户可以执行/阅读此操作吗？”问题的答案。</li>
<li><strong>Principle</strong> 原则是指当前经过身份验证的用户。</li>
<li><strong>Granted authority</strong> 授予权限是指经过认证的用户的权限。</li>
<li><strong>Role</strong> 角色是指经过身份验证的用户的一组权限。</li>
</ul>
<h2 id="创建基本的-spring-应用程序">创建基本的 Spring 应用程序</h2>
<p>在开始配置 Spring Security 框架之前，让我们创建一个基本的 Spring Web 应用程序。为此，我们可以使用 Spring Initializr 并生成一个模板项目。对于一个简单的 Web 应用程序，只需要 Spring Web 框架依赖就足够了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><p>创建项目后，我们可以向其中添加一个简单的 REST 控制器，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span> <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloRestController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">helloUser</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello User&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">helloAdmin</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;Hello Admin&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>之后，如果我们构建并运行该项目，我们可以在 Web 浏览器中访问以下 URL：</p>
<ul>
<li><code>http://localhost:8080/hello/user</code> 将返回字符串 <code>Hello User</code> 。</li>
<li><code>http://localhost:8080/hello/admin</code> 将返回字符串 <code>Hello Admin</code> 。</li>
</ul>
<p>现在，我们可以将 Spring Security 框架添加到我们的项目中，我们可以通过将以下依赖项添加到 <code>pom.xml</code> 文件中来完成此操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><p>在我们提供相应的配置之前，添加其他 Spring 框架依赖项通常不会立即对应用程序产生影响，但 Spring Security 的不同之处在于它确实会立即产生影响，这通常会让新用户感到困惑。添加后，如果我们重建并运行项目，然后尝试访问上述 URL 之一而不是查看结果，我们将被重定向到 <code>http://localhost:8080/login</code> 。这是默认行为，因为 Spring Security 框架要求对所有 URL 进行开箱即用的身份验证。</p>
<p>为了通过身份验证，我们可以使用默认用户名 <code>user</code> 并在控制台中找到自动生成的密码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Using generated security password: 1fc15145-dfee-4bec-a009-e32ca21c77ce
</span></span></code></pre></div><p>请记住，每次重新运行应用程序时密码都会更改。如果我们想改变这种行为并使密码静态，我们可以将以下配置添加到我们的 <code>application.properties</code> 文件中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">spring.security.user.password</span><span class="o">=</span><span class="s">Test12345_</span>
</span></span></code></pre></div><p>现在，如果我们在登录表单中输入凭据，我们将被重定向回我们的 URL，我们将看到正确的结果。请注意，开箱即用的身份验证过程是基于会话的，如果我们想注销，可以访问以下 URL： <code>http://localhost:8080/logout</code></p>
<p>这种开箱即用的行为对于具有基于会话身份验证的经典 MVC Web 应用程序可能很有用，但对于单页应用程序来说，它通常没有用，因为在大多数用例中，我们有客户端渲染和基于 JWT 的无状态身份验证。在这种情况下，我们将不得不大量定制 Spring Security 框架，我们将在本文的其余部分中进行此操作。</p>
<p>例如，我们将实现一个经典的<a href="https://github.com/Yoh0xFF/java-spring-security-example">书店 Web 应用程序</a>，并创建一个后端，该后端将提供用于创建作者和书籍的 CRUD API 以及用于用户管理和身份验证的 API。</p>
<h2 id="spring-security-架构概述">Spring Security 架构概述</h2>
<p>在开始自定义配置之前，我们首先讨论一下 Spring Security 身份验证在幕后是如何工作的。</p>
<p>下图展示了流程并显示了如何处理身份验证请求：</p>
<p>
  <img loading="lazy" src="https://assets.toptal.io/images?url=https%3A%2F%2Fbs-uploads.toptal.io%2Fblackfish-uploads%2Fuploaded_file%2Ffile%2F412345%2Fimage-1602672495860.085-952930c83f53503d7e84d1371bec3775.png" alt="Spring Security Architecture"  /></p>
<p>现在，让我们将此图分解为多个组件并分别讨论每个组件。</p>
<h3 id="spring-security-过滤器链">Spring Security 过滤器链</h3>
<p>当您将 Spring Security 框架添加到应用程序时，它会自动注册一个过滤器链来拦截所有传入请求。该链由各种过滤器组成，每个过滤器处理一个特定的用例。</p>
<p>例如：</p>
<ul>
<li>根据配置检查请求的 URL 是否可公开访问。</li>
<li>如果是基于会话的身份验证，请检查用户是否已在当前会话中通过身份验证。</li>
<li>检查用户是否有权执行请求的操作，等等。</li>
</ul>
<p>我想提到的一个重要细节是 Spring Security 过滤器以最低顺序注册，并且是第一个被调用的过滤器。对于某些用例，如果您想将自定义过滤器放在它们前面，则需要在它们的顺序中添加填充。这可以通过以下配置来完成：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">spring.security.filter.order</span><span class="o">=</span><span class="s">10</span>
</span></span></code></pre></div><p>一旦我们将此配置添加到 <code>application.properties</code> 文件中，我们将在 Spring Security 过滤器前面留有 10 个自定义过滤器的空间。</p>
<h3 id="认证管理器">认证管理器</h3>
<p>您可以将 <code>AuthenticationManager</code> 视为一个协调器，您可以在其中注册多个提供程序，并且根据请求类型，它将向正确的提供程序发送身份验证请求。</p>
<h3 id="认证提供者">认证提供者</h3>
<p><code>AuthenticationProvider</code> 处理特定类型的身份验证。它的接口只公开两个函数：</p>
<ul>
<li><code>authenticate</code> 对请求执行身份验证。</li>
<li><code>supports</code> 检查此提供程序是否支持指定的身份验证类型。</li>
</ul>
<p>我们在示例项目中使用的接口的一个重要实现是 <code>DaoAuthenticationProvider</code> ，它从 <code>UserDetailsService</code> 检索用户详细信息。</p>
<h3 id="userdetailsservice-用户详情服务">UserDetailsService 用户详情服务</h3>
<p><code>UserDetailsService</code> 在 Spring 文档中被描述为加载用户特定数据的核心接口。</p>
<p>在大多数用例中，身份验证提供程序根据数据库中的凭据提取用户身份信息，然后执行验证。由于这个用例非常常见，Spring 开发人员决定将其提取为一个单独的接口，公开单个函数：</p>
<ul>
<li><code>loadUserByUsername</code> 接受用户名作为参数并返回用户身份对象。</li>
</ul>
<h2 id="使用-jwt-和-spring-security-进行身份验证">使用 JWT 和 Spring Security 进行身份验证</h2>
<p>在讨论了 Spring Security 框架的内部结构之后，让我们将其配置为使用 JWT 令牌进行无状态身份验证。</p>
<p>要自定义 Spring Security 以供 JWT 使用，我们需要在类路径中使用 <code>@EnableWebSecurity</code> 注释来注释的配置类。此外，为了简化定制过程，框架公开了一个 <code>WebSecurityConfigurerAdapter</code> 类。我们将扩展此适配器并覆盖其两个功能，以便：</p>
<ol>
<li>使用正确的提供程序配置身份验证管理器</li>
<li>配置网络安全（公共 URL、私有 URL、授权等）</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// TODO configure authentication manager
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// TODO configure web security
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在我们的示例应用程序中，我们将用户身份存储在 MongoDB 数据库的 <code>users</code> 集合中。这些身份由 <code>User</code> 实体映射，它们的 CRUD 操作由 <code>UserRepo</code> Spring Data 存储库定义。</p>
<p>现在，当我们接受身份验证请求时，我们需要使用提供的凭据从数据库中检索正确的身份，然后进行验证。为此，我们需要实现 <code>UserDetailsService</code> 接口，其定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDetailsService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">UsernameNotFoundException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这里，我们可以看到需要返回实现 <code>UserDetails</code> 接口的对象，并且我们的 <code>User</code> 实体实现了它（有关实现的详细信息，请参阅示例项目的存储库）。考虑到它仅公开单函数原型，我们可以将其视为函数式接口，并以 lambda 表达式的形式提供实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UserRepo</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityConfig</span><span class="o">(</span><span class="n">UserRepo</span> <span class="n">userRepo</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userRepo</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">auth</span><span class="o">.</span><span class="na">userDetailsService</span><span class="o">(</span><span class="n">username</span> <span class="o">-&gt;</span> <span class="n">userRepo</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">findByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="o">()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">UsernameNotFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">format</span><span class="o">(</span><span class="s">&#34;User: %s, not found&#34;</span><span class="o">,</span> <span class="n">username</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这里， <code>auth.userDetailsService</code> 函数调用将使用我们的 <code>UserDetailsService</code> 接口实现来启动 <code>DaoAuthenticationProvider</code> 实例，并将其注册到身份验证管理器中。</p>
<p>除了身份验证提供程序之外，我们还需要使用正确的密码编码架构来配置身份验证管理器，该架构将用于凭据验证。为此，我们需要将 <code>PasswordEncoder</code> 接口的首选实现公开为 bean。</p>
<p>在我们的示例项目中，我们将使用 bcrypt 密码哈希算法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UserRepo</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityConfig</span><span class="o">(</span><span class="n">UserRepo</span> <span class="n">userRepo</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userRepo</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">auth</span><span class="o">.</span><span class="na">userDetailsService</span><span class="o">(</span><span class="n">username</span> <span class="o">-&gt;</span> <span class="n">userRepo</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">findByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="o">()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">UsernameNotFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">format</span><span class="o">(</span><span class="s">&#34;User: %s, not found&#34;</span><span class="o">,</span> <span class="n">username</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>配置身份验证管理器后，我们现在需要配置 Web 安全性。我们正在实现 REST API，需要使用 JWT 令牌进行无状态身份验证；因此，我们需要设置以下选项：</p>
<ul>
<li>启用 CORS 并禁用 CSRF。</li>
<li>将会话管理设置为无状态。</li>
<li>设置未授权请求异常处理程序。</li>
<li>设置端点的权限。</li>
<li>添加 JWT 令牌过滤器。</li>
</ul>
<p>该配置的实现方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UserRepo</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JwtTokenFilter</span> <span class="n">jwtTokenFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityConfig</span><span class="o">(</span><span class="n">UserRepo</span> <span class="n">userRepo</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">JwtTokenFilter</span> <span class="n">jwtTokenFilter</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userRepo</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">jwtTokenFilter</span> <span class="o">=</span> <span class="n">jwtTokenFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Enable CORS and disable CSRF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="na">cors</span><span class="o">().</span><span class="na">and</span><span class="o">().</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Set session management to stateless
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span> <span class="o">=</span> <span class="n">http</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">sessionManagement</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">and</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Set unauthorized requests exception handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span> <span class="o">=</span> <span class="n">http</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">authenticationEntryPoint</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">ex</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                        <span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_UNAUTHORIZED</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                    <span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">and</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Set permissions on endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Our public endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/api/public/**&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">&#34;/api/author/**&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="s">&#34;/api/author/search&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">&#34;/api/book/**&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="s">&#34;/api/book/search&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Our private endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Add JWT token filter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span><span class="o">.</span><span class="na">addFilterBefore</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">jwtTokenFilter</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">UsernamePasswordAuthenticationFilter</span><span class="o">.</span><span class="na">class</span>
</span></span><span class="line"><span class="cl">        <span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Used by Spring Security if CORS is enabled.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CorsFilter</span> <span class="nf">corsFilter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UrlBasedCorsConfigurationSource</span> <span class="n">source</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">            <span class="k">new</span> <span class="n">UrlBasedCorsConfigurationSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">CorsConfiguration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CorsConfiguration</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="na">setAllowCredentials</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="na">addAllowedOrigin</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="na">addAllowedHeader</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">config</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">source</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">,</span> <span class="n">config</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">CorsFilter</span><span class="o">(</span><span class="n">source</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>请注意，我们在 Spring Security 内部 <code>UsernamePasswordAuthenticationFilter</code> 之前添加了 <code>JwtTokenFilter</code> 。我们这样做是因为此时我们需要访问用户身份来执行身份验证/授权，并且其提取发生在基于提供的 JWT 令牌的 JWT 令牌过滤器内。其实现方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenFilter</span> <span class="kd">extends</span> <span class="n">OncePerRequestFilter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JwtTokenUtil</span> <span class="n">jwtTokenUtil</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UserRepo</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">JwtTokenFilter</span><span class="o">(</span><span class="n">JwtTokenUtil</span> <span class="n">jwtTokenUtil</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                          <span class="n">UserRepo</span> <span class="n">userRepo</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">jwtTokenUtil</span> <span class="o">=</span> <span class="n">jwtTokenUtil</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userRepo</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">FilterChain</span> <span class="n">chain</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Get authorization header and validate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">final</span> <span class="n">String</span> <span class="n">header</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="n">HttpHeaders</span><span class="o">.</span><span class="na">AUTHORIZATION</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">(</span><span class="n">header</span><span class="o">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">header</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&#34;Bearer &#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Get jwt token and validate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kd">final</span> <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">header</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&#34; &#34;</span><span class="o">)[</span><span class="mi">1</span><span class="o">].</span><span class="na">trim</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(!</span><span class="n">jwtTokenUtil</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">token</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Get user identity and set it on the spring security context
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">UserDetails</span> <span class="n">userDetails</span> <span class="o">=</span> <span class="n">userRepo</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">findByUsername</span><span class="o">(</span><span class="n">jwtTokenUtil</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(</span><span class="n">token</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">UsernamePasswordAuthenticationToken</span>
</span></span><span class="line"><span class="cl">            <span class="n">authentication</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UsernamePasswordAuthenticationToken</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">userDetails</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">userDetails</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span>
</span></span><span class="line"><span class="cl">                    <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">()</span> <span class="o">:</span> <span class="n">userDetails</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">authentication</span><span class="o">.</span><span class="na">setDetails</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="k">new</span> <span class="n">WebAuthenticationDetailsSource</span><span class="o">().</span><span class="na">buildDetails</span><span class="o">(</span><span class="n">request</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">setAuthentication</span><span class="o">(</span><span class="n">authentication</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在实现我们的登录 API 功能之前，我们还需要执行一步 - 我们需要访问身份验证管理器。默认情况下，它不可公开访问，我们需要在配置类中将其显式公开为 bean。
这可以按如下方式完成：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span> <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">AuthenticationManager</span> <span class="nf">authenticationManagerBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">authenticationManagerBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，我们准备好实现我们的登录 API 函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Api</span><span class="o">(</span><span class="n">tags</span> <span class="o">=</span> <span class="s">&#34;Authentication&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span> <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">&#34;api/public&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthApi</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JwtTokenUtil</span> <span class="n">jwtTokenUtil</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UserViewMapper</span> <span class="n">userViewMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">AuthApi</span><span class="o">(</span><span class="n">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                   <span class="n">JwtTokenUtil</span> <span class="n">jwtTokenUtil</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                   <span class="n">UserViewMapper</span> <span class="n">userViewMapper</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">authenticationManager</span> <span class="o">=</span> <span class="n">authenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">jwtTokenUtil</span> <span class="o">=</span> <span class="n">jwtTokenUtil</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userViewMapper</span> <span class="o">=</span> <span class="n">userViewMapper</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">UserView</span><span class="o">&gt;</span> <span class="nf">login</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nd">@Valid</span> <span class="n">AuthRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Authentication</span> <span class="n">authenticate</span> <span class="o">=</span> <span class="n">authenticationManager</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authenticate</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="k">new</span> <span class="n">UsernamePasswordAuthenticationToken</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                        <span class="n">request</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">request</span><span class="o">.</span><span class="na">getPassword</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                    <span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="n">User</span><span class="o">)</span> <span class="n">authenticate</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">header</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">HttpHeaders</span><span class="o">.</span><span class="na">AUTHORIZATION</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">jwtTokenUtil</span><span class="o">.</span><span class="na">generateAccessToken</span><span class="o">(</span><span class="n">user</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">userViewMapper</span><span class="o">.</span><span class="na">toUserView</span><span class="o">(</span><span class="n">user</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">BadCredentialsException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNAUTHORIZED</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这里，我们使用身份验证管理器验证提供的凭据，如果成功，我们将生成 JWT 令牌并将其作为响应标头与响应正文中的用户身份信息一起返回。</p>
<h2 id="使用-spring-security-进行-jwt-授权">使用 Spring Security 进行 JWT 授权</h2>
<p>在上一节中，我们设置了 Spring JWT 身份验证过程并配置了公共/私有 URL。对于简单的应用程序来说，这可能已经足够了，但对于大多数实际用例，我们始终需要为用户提供基于角色的访问策略。在本章中，我们将解决这个问题并使用 Spring Security 框架建立基于角色的授权模式。</p>
<p>在我们的示例应用程序中，我们定义了以下三个角色：</p>
<ul>
<li><code>USER_ADMIN</code> 允许我们管理应用程序用户。</li>
<li><code>AUTHOR_ADMIN</code> 允许我们管理作者。</li>
<li><code>BOOK_ADMIN</code> 允许我们管理书籍。</li>
</ul>
<p>现在，我们需要将它们应用到相应的 URL：</p>
<ul>
<li><code>api/public</code> 可公开访问。</li>
<li><code>api/admin/user</code> 可以访问具有 <code>USER_ADMIN</code> 角色的用户。</li>
<li><code>api/author</code> 可以访问具有 <code>AUTHOR_ADMIN</code> 角色的用户。</li>
<li><code>api/book</code> 可以访问具有 <code>BOOK_ADMIN</code> 角色的用户。</li>
</ul>
<p>Spring Security 框架为我们提供了两种设置授权模式的选项：</p>
<ul>
<li>基于 URL 的配置</li>
<li>基于注释的配置</li>
</ul>
<p>首先，让我们看看基于 URL 的配置是如何工作的。它可以应用到 Web 安全配置中，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Enable CORS and disable CSRF
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="na">cors</span><span class="o">().</span><span class="na">and</span><span class="o">().</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Set session management to stateless
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span> <span class="o">=</span> <span class="n">http</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">sessionManagement</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">and</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Set unauthorized requests exception handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span> <span class="o">=</span> <span class="n">http</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">authenticationEntryPoint</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                <span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">ex</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                        <span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_UNAUTHORIZED</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                    <span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">and</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Set permissions on endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Our public endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/api/public/**&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">&#34;/api/author/**&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="s">&#34;/api/author/search&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">&#34;/api/book/**&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="s">&#34;/api/book/search&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Our private endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/api/admin/user/**&#34;</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="n">Role</span><span class="o">.</span><span class="na">USER_ADMIN</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/api/author/**&#34;</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="n">Role</span><span class="o">.</span><span class="na">AUTHOR_ADMIN</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/api/book/**&#34;</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="n">Role</span><span class="o">.</span><span class="na">BOOK_ADMIN</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Add JWT token filter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span><span class="o">.</span><span class="na">addFilterBefore</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">jwtTokenFilter</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">UsernamePasswordAuthenticationFilter</span><span class="o">.</span><span class="na">class</span>
</span></span><span class="line"><span class="cl">        <span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>正如您所看到的，这种方法简单明了，但有一个缺点。我们的应用程序中的授权模式可能很复杂，如果我们在一个地方定义所有规则，它将变得非常大、复杂且难以阅读。因此，我通常更喜欢使用基于注释的配置。</p>
<p>Spring Security 框架为 Web 安全定义了以下注释：</p>
<ul>
<li><code>@PreAuthorize</code> 支持 Spring 表达式语言，用于在执行方法之前提供基于表达式的访问控制。</li>
<li><code>@PostAuthorize</code> 支持 Spring 表达式语言，用于在执行方法后提供基于表达式的访问控制（提供访问方法结果的能力）。</li>
<li><code>@PreFilter</code> 支持 Spring 表达式语言，用于在根据我们定义的自定义安全规则执行方法之前过滤集合或数组。</li>
<li><code>@PostFilter</code> 支持 Spring 表达式语言，用于根据我们定义的自定义安全规则过滤执行方法后返回的集合或数组（提供访问方法结果的能力）。</li>
<li><code>@Secured</code> 不支持 Spring 表达式语言，用于指定方法上的角色列表。</li>
<li><code>@RolesAllowed</code> 不支持 Spring 表达式语言，是 JSR 250 中 <code>@Secured</code> 注释的等效注释。</li>
</ul>
<p>这些注释默认情况下处于禁用状态，可以在我们的应用程序中启用，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableGlobalMethodSecurity</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">securedEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">jsr250Enabled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">prePostEnabled</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>securedEnabled = true</code> 启用 <code>@Secured</code> 注释。
<code>jsr250Enabled = true</code> 启用 <code>@RolesAllowed</code> 注释。
<code>prePostEnabled = true</code> 启用 <code>@PreAuthorize</code> 、 <code>@PostAuthorize</code> 、 <code>@PreFilter</code> 、 <code>@PostFilter</code> 注释。</p>
<p>启用它们后，我们可以在 API 端点上强制执行基于角色的访问策略，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Api</span><span class="o">(</span><span class="n">tags</span> <span class="o">=</span> <span class="s">&#34;UserAdmin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span> <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">&#34;api/admin/user&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RolesAllowed</span><span class="o">(</span><span class="n">Role</span><span class="o">.</span><span class="na">USER_ADMIN</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserAdminApi</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Api</span><span class="o">(</span><span class="n">tags</span> <span class="o">=</span> <span class="s">&#34;Author&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span> <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">&#34;api/author&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorApi</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nd">@RolesAllowed</span><span class="o">(</span><span class="n">Role</span><span class="o">.</span><span class="na">AUTHOR_ADMIN</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@PostMapping</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@RolesAllowed</span><span class="o">(</span><span class="n">Role</span><span class="o">.</span><span class="na">AUTHOR_ADMIN</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@PutMapping</span><span class="o">(</span><span class="s">&#34;{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">edit</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@RolesAllowed</span><span class="o">(</span><span class="n">Role</span><span class="o">.</span><span class="na">AUTHOR_ADMIN</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@DeleteMapping</span><span class="o">(</span><span class="s">&#34;{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;{id}/book&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">getBooks</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;search&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">search</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Api</span><span class="o">(</span><span class="n">tags</span> <span class="o">=</span> <span class="s">&#34;Book&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span> <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">&#34;api/book&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookApi</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nd">@RolesAllowed</span><span class="o">(</span><span class="n">Role</span><span class="o">.</span><span class="na">BOOK_ADMIN</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@PostMapping</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">BookView</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@RolesAllowed</span><span class="o">(</span><span class="n">Role</span><span class="o">.</span><span class="na">BOOK_ADMIN</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@PutMapping</span><span class="o">(</span><span class="s">&#34;{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">edit</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@RolesAllowed</span><span class="o">(</span><span class="n">Role</span><span class="o">.</span><span class="na">BOOK_ADMIN</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@DeleteMapping</span><span class="o">(</span><span class="s">&#34;{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;{id}/author&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">getAuthors</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;search&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">search</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>请注意，安全注释可以在类级别和方法级别上提供。</p>
<p>演示的示例很简单，并不代表真实场景，但 Spring Security 提供了一组丰富的注释，如果您选择使用它们，您可以处理复杂的授权模式。</p>
<h3 id="角色名称默认前缀">角色名称默认前缀</h3>
<p>在这个单独的小节中，我想强调一个让很多新用户感到困惑的更微妙的细节。</p>
<p>Spring Security 框架区分两个术语：</p>
<ul>
<li><code>Authority</code> 代表个人权限。</li>
<li><code>Role</code> 代表一组权限。</li>
</ul>
<p>两者都可以用一个名为 <code>GrantedAuthority</code> 的接口来表示，然后使用 Spring Security 注释中的 Spring 表达式语言进行检查，如下所示：</p>
<ul>
<li><code>Authority</code>: @PreAuthorize(“hasAuthority(‘EDIT_BOOK’)”)</li>
<li><code>Role</code>: @PreAuthorize(“hasRole(‘BOOK_ADMIN’)”)</li>
</ul>
<p>为了使这两个术语之间的区别更加明确，Spring Security 框架默认在角色名称中添加 <code>ROLE_</code> 前缀。因此，它不会检查名为 <code>BOOK_ADMIN</code> 的角色，而是检查 <code>ROLE_BOOK_ADMIN</code> 。</p>
<p>就我个人而言，我发现这种行为令人困惑，并且更喜欢在我的应用程序中禁用它。可以在 Spring Security 配置中禁用它，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="n">GrantedAuthorityDefaults</span> <span class="nf">grantedAuthorityDefaults</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">GrantedAuthorityDefaults</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span> <span class="c1">// Remove the ROLE_ prefix
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="测试我们的-spring-security-jwt-解决方案">测试我们的 Spring Security JWT 解决方案</h2>
<p>要在使用 Spring Security 框架时通过单元测试或集成测试来测试端点，我们需要添加 <code>spring-security-test</code> 依赖项以及 <code>spring-boot-starter-test</code> 。我们的 <code>pom.xml</code> 构建文件将如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;exclusions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;exclusion&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.junit.vintage<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>junit-vintage-engine<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/exclusion&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/exclusions&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-security-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>这种依赖关系使我们能够访问一些注释，这些注释可用于向我们的测试函数添加安全上下文。</p>
<p>These annotations are: 这些注释是：</p>
<ul>
<li><code>@WithMockUser</code> 可以添加到测试方法中以模拟使用模拟用户运行。</li>
<li><code>@WithUserDetails</code> 可以添加到测试方法中，以模拟使用从 <code>UserDetailsService</code> 返回的 <code>UserDetails</code> 运行。</li>
<li><code>@WithAnonymousUser</code> 可以添加到测试方法中以模拟匿名用户的运行。当用户想要以特定用户身份运行大部分测试并覆盖一些匿名方法时，这非常有用。</li>
<li><code>@WithSecurityContext</code> 决定使用什么 <code>SecurityContext</code> ，上面描述的所有三个注释都基于它。如果我们有特定的用例，我们可以创建自己的注释，使用 <code>@WithSecurityContext</code> 来创建我们想要的任何 <code>SecurityContext</code> 。它的讨论超出了我们的 Spring Security 教程的范围，请参阅 Spring Security 文档以获取更多详细信息。</li>
</ul>
<p>对特定用户运行测试的最简单方法是使用 <code>@WithMockUser</code> 注释。我们可以用它创建一个模拟用户并运行测试，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Test</span> <span class="nd">@WithMockUser</span><span class="o">(</span><span class="n">username</span><span class="o">=</span><span class="s">&#34;customUsername@example.io&#34;</span><span class="o">,</span> <span class="n">roles</span><span class="o">={</span><span class="s">&#34;USER_ADMIN&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>不过，这种方法有一些缺点。首先，模拟用户不存在，如果运行集成测试，稍后从数据库查询用户信息，测试将失败。其次，mock user 是 <code>org.springframework.security.core.userdetails.User</code> 类的实例，它是 Spring 框架对 <code>UserDetails</code> 接口的内部实现，如果我们有自己的实现，这可能会导致后面的冲突，在测试执行期间。</p>
<p>如果前面的缺点阻碍了我们的应用程序，那么 <code>@WithUserDetails</code> 注释就是正确的选择。当我们有自定义 <code>UserDetails</code> 和 <code>UserDetailsService</code> 实现时使用它。它假设用户存在，因此我们必须在数据库中创建实际行或在运行测试之前提供 <code>UserDetailsService</code> 模拟实例。</p>
<p>我们可以这样使用这个注解：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Test</span> <span class="nd">@WithUserDetails</span><span class="o">(</span><span class="s">&#34;customUsername@example.io&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>这是我们示例项目集成测试中的首选注释，因为我们有上述接口的自定义实现。</p>
<p>使用 <code>@WithAnonymousUser</code> 允许以匿名用户身份运行。当您希望使用特定用户运行大多数测试但以匿名用户身份运行一些测试时，这尤其方便。例如，以下将使用模拟用户运行 test1 和 test2 测试用例，并使用匿名用户运行 test3：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="nd">@AutoConfigureMockMvc</span>
</span></span><span class="line"><span class="cl"><span class="nd">@WithMockUser</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WithUserClassLevelAuthenticationTests</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span> <span class="nd">@WithAnonymousUser</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test3</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Details omitted for brevity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="征服-spring-security-jwt-学习曲线">征服 Spring Security JWT 学习曲线</h2>
<p>最后，我想提一下，Spring Security 框架可能不会赢得任何选美比赛，而且它的学习曲线肯定很陡峭。我遇到过很多情况，由于其初始配置的复杂性，它被一些自行开发的解决方案所取代。但是，一旦开发人员了解其内部结构并设法设置初始配置，它的使用就会变得相对简单。</p>
<p>在本 Spring Security 教程中，我尝试演示配置的所有微妙细节，希望您会发现这些示例很有用。有关完整的代码示例，请参阅我的示例 <a href="https://github.com/Yoh0xFF/java-spring-security-example">Spring Security 项目</a>的 Git 存储库。</p>
<p>原文链接：<a href="https://www.toptal.com/spring/spring-security-tutorial">https://www.toptal.com/spring/spring-security-tutorial</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]没有WebSecurityConfigurerAdapter的Spring Security.md</title>
      <link>https://blog.chensoul.com/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</link>
      <pubDate>Fri, 18 Aug 2023 11:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</guid>
      <description>在 Spring Security 模块的上下文中，WebSecurityConfigurerAdapter 是一个抽象类，根据 Spring 官方网站 2022 年 2 月 21 日发布的公告，该类已从 Spring Security 5.7.0-M2 中弃用。它通常用于扩展 configure() 方法由自定义配置子类实现。因此，它鼓励用户转向基于组件的安全配置。为了支持对这种新配置设计的更改，我们将讨论常见用例列表和未来建议的替代方案。因此，我们将讨论没有 WebSecurityConfigurerAdapter 的 Spring Security 用例的实现。
了解这一变化很重要，因为迟早我们将使用最新版本的 Spring Security 来开发安全功能。让我们讨论“没有 WebSecurityConfigurerAdapter 的 Spring Security”主题及其相关概念。
什么是 WebSecurityConfigurerAdapter？ WebSecurityConfigurerAdapter 是 Spring Security 模块提供的一个抽象类。一般来说，我们使用它来重写它的 configure()方法来定义我们的安全配置类。通常，我们在应用程序中实现 Spring Security 时使用两个具有不同参数的 configure() 方法。一种用于声明与身份验证相关的配置，另一种用于声明与授权相关的配置。该代码类似于下面的代码片段。
@Configuration @EnableWebSecurity public class SecurityConfiguration extends WebSecurityConfigurerAdapter { @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { // configure Authentication ...... } @Override protected void configure(HttpSecurity http) throws Exception { // configure Authorization .</description>
      <content:encoded><![CDATA[<p>
  <img loading="lazy" src="https://javatechonline.com/ezoimgfmt/i0.wp.com/javatechonline.com/wp-content/uploads/2022/07/SpringSecurityWithoutWSCA-1.jpg" alt="Spring Security Without WebSecurityConfigurerAdapter"  />
在 Spring Security 模块的上下文中，WebSecurityConfigurerAdapter 是一个抽象类，根据 <a href="https://spring.io/blog/2022/02/21/spring-security-without-the-websecurityconfigureradapter">Spring 官方网站</a> 2022 年 2 月 21 日发布的公告，该类已从 Spring Security 5.7.0-M2 中弃用。它通常用于扩展 configure() 方法由自定义配置子类实现。因此，它鼓励用户转向基于组件的安全配置。为了支持对这种新配置设计的更改，我们将讨论常见用例列表和未来建议的替代方案。因此，我们将讨论没有 WebSecurityConfigurerAdapter 的 Spring Security 用例的实现。</p>
<p>了解这一变化很重要，因为迟早我们将使用最新版本的 Spring Security 来开发安全功能。让我们讨论“没有 WebSecurityConfigurerAdapter 的 Spring Security”主题及其相关概念。</p>
<h2 id="什么是-websecurityconfigureradapter">什么是 WebSecurityConfigurerAdapter？</h2>
<p>WebSecurityConfigurerAdapter 是 Spring Security 模块提供的一个抽象类。一般来说，我们使用它来重写它的 configure()方法来定义我们的安全配置类。通常，我们在应用程序中实现 Spring Security 时使用两个具有不同参数的 configure() 方法。一种用于声明与身份验证相关的配置，另一种用于声明与授权相关的配置。该代码类似于下面的代码片段。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         <span class="c1">// configure Authentication ......
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// configure Authorization ......
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="为什么我们需要学习这个改变">为什么我们需要学习这个改变？</h2>
<p>如果您使用 Spring Boot 2.7.0 和 maven，它将自动下载 Spring Security 5.7.0 或更高版本。在这种情况下，您会发现 WebSecurityConfigurerAdapter 已被弃用。如果您仍然想使用此类而不弃用，您可以在 pom.xml 中将 Spring Boot 版本更改为较低版本（例如 2.6.6 ），如下所示。它将自动下载低于 5.7.0 的 Spring Security 版本，并且弃用警告将消失。</p>
<p>但是，如果您不使用 Spring Boot，而是使用简单的 Spring Security 模块，您甚至可以降低 Spring Security 的版本。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&lt;version&gt;</span>2.6.6<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div><p>这样，我们就可以在没有 WebSecurityConfigurerAdapter 的情况下实现 Spring Security。</p>
<h2 id="我们需要在哪里实施这一改变">我们需要在哪里实施这一改变？</h2>
<p>以下是一些可能实施此更改的情况。</p>
<ol>
<li>
<p>如果您使用的是 Spring Boot 2.7.0 或更高版本</p>
</li>
<li>
<p>如果您正在使用 Spring Security 5.7.0 或更高版本</p>
</li>
<li>
<p>如果你的项目得到如上所述升级或迁移到更高版本</p>
</li>
<li>
<p>如果您想使用最新版本的 Spring Boot 自定义 Spring Security 配置</p>
</li>
<li>
<p>如果您想删除 WebSecurityConfigurerAdapter Deprecated 的烦人警告</p>
</li>
<li>
<p>如果你想在没有 WebSecurityConfigurerAdapter 的情况下实现 Spring Security。</p>
</li>
</ol>
<h2 id="如何删除已弃用的警告">如何删除已弃用的警告？</h2>
<p>下面就让我们一步一步来学习吧：</p>
<ol>
<li>
<p>如果您使用 STS 作为 IDE 来开发项目，则需要降低 Spring Boot 的版本。如果您使用的是 Spring Boot 2.7.0 或更高版本，请将其设为 2.6.x（例如 2.6.6）。您可以通过更新 pom.xml 来做到这一点。完成后，它将自动下载 Spring Security 模块的兼容版本。</p>
</li>
<li>
<p>检查您的配置类是否扩展了 WebSecurityConfigurerAdapter 类。已弃用的警告应该消失。现在您可以在没有 WebSecurityConfigurerAdapter 的情况下实现 Spring Security。</p>
</li>
</ol>
<h2 id="如何在没有-websecurityconfigureradapter-的情况下使用-spring-security">如何在没有 WebSecurityConfigurerAdapter 的情况下使用 Spring Security？</h2>
<p>如上所述，通常我们会在自定义配置类中继承 WebSecurityConfigurerAdapter 的 configure() 方法。因此，我们需要找到这些方法的替代方案，因为自 Spring Security 5.7.0-M2 发布以来，WebSecurityConfigurerAdapter 已被弃用。</p>
<p>让我们讨论一些例子</p>
<h3 id="示例1使用-websecurityconfigureradapter">示例#1：使用 WebSecurityConfigurerAdapter</h3>
<p>此示例演示了 HttpSecurity 配置。通常，我们编写它来声明授权工件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">     <span class="n">http</span><span class="o">.</span><span class="na">cors</span><span class="o">().</span><span class="na">and</span><span class="o">().</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">and</span><span class="o">().</span><span class="na">sessionManagement</span><span class="o">().</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">and</span><span class="o">().</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;EMPLOYEE&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;MANAGER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">     <span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="示例1没有-websecurityconfigureradapter">示例#1：没有 WebSecurityConfigurerAdapter</h3>
<p>下面的代码演示了在没有 WebSecurityConfigurerAdapter 的情况下实现 Spring Security 的可能解决方案。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">http</span><span class="o">.</span><span class="na">cors</span><span class="o">().</span><span class="na">and</span><span class="o">().</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">and</span><span class="o">().</span><span class="na">sessionManagement</span><span class="o">().</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">and</span><span class="o">().</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;EMPLOYEE&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;MANAGER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这里，我们需要执行以下步骤：</p>
<ul>
<li>步骤#1：删除@override，因为我们不会从任何类中扩展和覆盖它。</li>
<li>步骤＃2：在此方法上应用@Bean 注解</li>
<li>步骤#3：现在将方法返回类型声明为 SecurityFilterChain，而不是 void</li>
<li>步骤#4：根据需要更新方法名称。比如说 filterChain。</li>
<li>步骤#5：方法结束时，主体返回 http.build()。这里 http 是 HttpSecurity 类型的变量。</li>
</ul>
<h3 id="示例2使用-websecurityconfigureradapter">示例#2：使用 WebSecurityConfigurerAdapter</h3>
<p>在下面的示例中，我们使用了这两种方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.EnableWebSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.util.matcher.AntPathRequestMatcher</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// {noop} =&gt; No operation for password encoder (no password encoding needed)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">auth</span><span class="o">.</span><span class="na">inMemoryAuthentication</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">withUser</span><span class="o">(</span><span class="s">&#34;devs&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">password</span> <span class="o">(</span><span class="s">&#34;{noop} devs&#34;</span><span class="o">)</span> <span class="c1">//no password encoding needed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="n">auth</span><span class="o">.</span><span class="na">inMemoryAuthentication</span><span class="o">().</span><span class="na">withUser</span><span class="o">(</span><span class="s">&#34;ns&#34;</span><span class="o">).</span><span class="na">password</span><span class="o">(</span><span class="s">&#34;{noop}ns&#34;</span><span class="o">).</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;EMPLOYEE&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">auth</span><span class="o">.</span><span class="na">inMemoryAuthentication</span><span class="o">().</span><span class="na">withUser</span><span class="o">(</span><span class="s">&#34;vs&#34;</span><span class="o">).</span><span class="na">password</span><span class="o">(</span><span class="s">&#34;{noop}vs&#34;</span><span class="o">).</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;MANAGER&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">//declares which Page(URL) will have What access type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;EMPLOYEE&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;MANAGER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/common&#34;</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="s">&#34;EMPLOYEE&#34;</span><span class="o">,</span><span class="s">&#34;MANAGER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// Any other URLs which are not configured in above antMatchers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// generally declared aunthenticated() in real time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// Login Form Details
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// Logout Form Details
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">logout</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">logoutRequestMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">AntPathRequestMatcher</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">// Exception Details
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">accessDeniedPage</span><span class="o">(</span><span class="s">&#34;/accessDenied&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="示例2没有-websecurityconfigureradapter">示例#2：没有 WebSecurityConfigurerAdapter</h3>
<p>下面的代码演示了在没有 WebSecurityConfigurerAdapter 的情况下实现 Spring Security 的可能解决方案。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.EnableWebSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.GrantedAuthority</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.authority.SimpleGrantedAuthority</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.InMemoryUserDetailsManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.SecurityFilterChain</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.util.matcher.AntPathRequestMatcher</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfigNew</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">InMemoryUserDetailsManager</span> <span class="nf">configAuthentication</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="n">List</span><span class="o">&lt;</span><span class="n">UserDetails</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">       <span class="n">List</span><span class="o">&lt;</span><span class="n">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">adminAuthority</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">       <span class="n">adminAuthority</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleGrantedAuthority</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">       <span class="n">UserDetails</span> <span class="n">admin</span><span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;devs&#34;</span><span class="o">,</span> <span class="s">&#34;{noop}devs&#34;</span><span class="o">,</span> <span class="n">adminAuthority</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">       <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">admin</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="n">List</span><span class="o">&lt;</span><span class="n">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">employeeAuthority</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">       <span class="n">adminAuthority</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleGrantedAuthority</span><span class="o">(</span><span class="s">&#34;EMPLOYEE&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">       <span class="n">UserDetails</span> <span class="n">employee</span><span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;ns&#34;</span><span class="o">,</span> <span class="s">&#34;{noop}ns&#34;</span><span class="o">,</span> <span class="n">employeeAuthority</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">       <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">employee</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="n">List</span><span class="o">&lt;</span><span class="n">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">managerAuthority</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">       <span class="n">adminAuthority</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleGrantedAuthority</span><span class="o">(</span><span class="s">&#34;MANAGER&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">       <span class="n">UserDetails</span> <span class="n">manager</span><span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;vs&#34;</span><span class="o">,</span> <span class="s">&#34;{noop}vs&#34;</span><span class="o">,</span> <span class="n">managerAuthority</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">       <span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">manager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="k">new</span> <span class="n">InMemoryUserDetailsManager</span><span class="o">(</span><span class="n">users</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">//declares which Page(URL) will have What access type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;EMPLOYEE&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;MANAGER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/common&#34;</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="s">&#34;EMPLOYEE&#34;</span><span class="o">,</span><span class="s">&#34;MANAGER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Any other URLs which are not configured in above antMatchers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// generally declared aunthenticated() in real time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>           <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Login Form Details
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>           <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">           <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">           <span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Logout Form Details
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">logout</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">logoutRequestMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">AntPathRequestMatcher</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// Exception Details
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">accessDeniedPage</span><span class="o">(</span><span class="s">&#34;/accessDenied&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>上面的代码片段是使用 Spring Security 的内存中身份验证的示例。</p>
<h3 id="示例3使用-websecurityconfigureradapter">示例#3：使用 WebSecurityConfigurerAdapter</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowire</span>
</span></span><span class="line"><span class="cl">    <span class="n">UserDetailsService</span> <span class="n">userDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">authenticationManagerBuilder</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">authenticationManagerBuilder</span><span class="o">.</span><span class="na">userDetailsService</span><span class="o">(</span><span class="n">userDetailsService</span><span class="o">).</span><span class="na">passwordEncoder</span><span class="o">(</span><span class="n">passwordEncoder</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="示例3没有-websecurityconfigureradapter">示例#3：没有 WebSecurityConfigurerAdapter</h3>
<p>下面的代码演示了在没有 WebSecurityConfigurerAdapter 的情况下实现 Spring Security 的可能解决方案。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="n">AuthenticationManager</span> <span class="nf">authenticationManager</span><span class="o">(</span><span class="n">AuthenticationConfiguration</span> <span class="n">authenticationConfiguration</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">authenticationConfiguration</span><span class="o">.</span><span class="na">getAuthenticationManager</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这里，在旧版本中我们注入 AuthenticationManagerBuilder，设置 userDetailsS​​ervice、passwordEncoder 并构建它。但是 AuthenticationManager 已经在这一步中创建了。它是按照我们想要的方式创建的（使用 userDetailsS​​ervice 和 passwordEncoder）。</p>
<h3 id="示例4使用-websecurityconfigureradapter">示例#4：使用 WebSecurityConfigurerAdapter</h3>
<p>在实现网络安全配置时，WebSecurityCustomizer 是一个回调接口，可用于自定义 WebSecurity。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">WebSecurity</span> <span class="n">web</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">web</span><span class="o">.</span><span class="na">ignoring</span><span class="o">().</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/ignore1&#34;</span><span class="o">,</span> <span class="s">&#34;/ignore2&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="示例4没有-websecurityconfigureradapter">示例#4：没有 WebSecurityConfigurerAdapter</h3>
<p>从 Spring Security 5.7.0-M2 开始，推荐的方法是注册 WebSecurityCustomizer bean。下面的代码演示了在没有 WebSecurityConfigurerAdapter 的情况下实现 Spring Security 的可能解决方案：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">WebSecurityCustomizer</span> <span class="nf">webSecurityCustomizer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">web</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">web</span><span class="o">.</span><span class="na">ignoring</span><span class="o">().</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/ignore1&#34;</span><span class="o">,</span> <span class="s">&#34;/ignore2&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="示例5使用-websecurityconfigureradapter">示例#5：使用 WebSecurityConfigurerAdapter</h3>
<p>下面的代码演示了 Spring Security 上下文中 JDBC 身份验证的变化。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ong</span><span class="o">&gt;</span><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">BCryptPasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="n">auth</span><span class="o">.</span><span class="na">jdbcAuthentication</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">           <span class="o">.</span><span class="na">dataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">)</span> <span class="c1">//creates database connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>           <span class="o">.</span><span class="na">usersByUsernameQuery</span><span class="o">(</span><span class="s">&#34;select user_name,user_pwd,user_enabled from user where user_name=?&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">           <span class="o">.</span><span class="na">authoritiesByUsernameQuery</span><span class="o">(</span><span class="s">&#34;select user_name,user_role from user where user_name=?&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">           <span class="o">.</span><span class="na">passwordEncoder</span><span class="o">(</span><span class="n">passwordEncoder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="示例5没有-websecurityconfigureradapter">示例#5：没有 WebSecurityConfigurerAdapter</h3>
<p>展望未来，如果我们想在没有 WebSecurityConfigurerAdapter 的情况下实现 Spring Security，新代码将如下所示。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">UserDetailsManager</span> <span class="nf">authenticateUsers</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="n">UserDetails</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">withUsername</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="n">PasswordEncoderFactories</span><span class="o">.</span><span class="na">createDelegatingPasswordEncoder</span><span class="o">().</span><span class="na">encode</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">)).</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="n">JdbcUserDetailsManager</span> <span class="n">users</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JdbcUserDetailsManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">users</span><span class="o">.</span><span class="na">setAuthoritiesByUsernameQuery</span><span class="o">(</span><span class="s">&#34;select user_name,user_pwd,user_enabled from user where user_name=?&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">users</span><span class="o">.</span><span class="na">setUsersByUsernameQuery</span><span class="o">(</span><span class="s">&#34;select user_name,user_role from user where user_name=?&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">users</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">users</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>新的实现将如上所示。这可能不是确切的解决方案。</p>
<h2 id="spring-security-600-或更高版本中有哪些弃用更新">Spring Security 6.0.0 或更高版本中有哪些弃用更新？</h2>
<p>如果您使用 Spring Security 6.0.0 或更高版本（以及 Spring Boot 3.0 或更高版本），您还会看到其他 API 弃用。例如，以下是需要进行的一些更改：</p>
<ul>
<li>
<p>authorizeRequests() -&gt;authorizeHttpRequests()</p>
</li>
<li>
<p>antMatchers() -&gt; requestMatchers()</p>
</li>
<li>
<p>regexMatchers() -&gt; RegexRequestMatchers()</p>
</li>
</ul>
<h2 id="faq">FAQ</h2>
<h3 id="在哪里可以找到没有-websecurityconfigureradapter-的-spring-security-的完整示例">在哪里可以找到“没有 WebSecurityConfigurerAdapter 的 Spring Security 的完整示例？”</h3>
<p>以下是查找“没有 WebSecurityConfigurerAdapter 的 Spring Security”完整示例的链接：</p>
<ol>
<li>
<p><a href="https://javatechonline.com/how-to-implement-security-in-spring-boot-project/">How To Implement Security In Spring Boot Project?</a></p>
</li>
<li>
<p><a href="https://javatechonline.com/how-to-implement-security-in-spring-boot-using-userdetailsservice/">How to implement Role Based Spring Security Without WebSecurityConfigurerAdapter in Spring Boot using UserDetailsService?</a></p>
</li>
<li>
<p><a href="https://javatechonline.com/how-to-implement-jwt-authentication-in-spring-boot-project/">How to implement JWT Authentication in Spring Boot Project?</a></p>
</li>
</ol>
<h2 id="结论">结论</h2>
<p>在完成了“没有 WebSecurityConfigurerAdapter 的 Spring Security”的所有理论和示例部分之后，最后，我们应该准备好在实时项目中处理警告“WebSecurityConfigurerAdapter Deprecated”。此外，我们希望您扩展“没有 WebSecurityConfigurerAdapter 的 Spring Security”一文中提供的知识，并在您的项目中相应地实现该概念。如需进一步学习 Spring Security，您可以访问 Spring Security 使用 Spring Boot 系列教程。另外，如果后续有任何更新，我们也会对文章进行相应的更新。此外，请随时在下面的评论部分提供您的意见。</p>
<p>原文链接：<a href="https://javatechonline.com/spring-security-without-websecurityconfigureradapter/">https://javatechonline.com/spring-security-without-websecurityconfigureradapter/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]如何在Spring Boot2中使用UserDetailsService实现安全性？</title>
      <link>https://blog.chensoul.com/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</link>
      <pubDate>Fri, 18 Aug 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</guid>
      <description>继续上一篇关于实现 Spring Security 的两种不同方法的文章，在本文中，我们将学习第三种方法“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现 Security？”。经过上一篇文章后，我希望我们都非常熟悉安全性的基础知识，甚至是 Spring Boot 应用程序中的安全性基础知识。这次我们将创建一个用户注册表并将用户及其角色保存到数据库中。
然后，根据用户角色，我们将借助预定义的 UserDetailsS​​ervice 检查身份验证和授权功能。
如果您正在寻找“如何在 Spring Boot 3 及以上版本中使用 UserDetailsS​​ervice 在 Spring Boot 中实现安全性？”，请访问有关使用 Spring Boot 3 的 Spring Security UserDetailsS​​ervice 的单独文章。
为了说明这一点，我们将把一些角色发挥作用，并在整个过程中围绕它们进行发挥，以使其变得清晰。此外，我们将有一些页面并限制它们仅可由某些特定角色访问。同样重要的是，我们必须创建一个小型 MVC Web 应用程序，以使注册过程向用户开放。用户在注册时将输入自己的角色。然后我们可以在其之上实现安全功能。
让我们开始相应的主题“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现安全性？”。
总体而言，您对这篇文章有何期望？ Spring Security 上下文中的 UserDetailsS​​ervice 概念是什么？
实施 UserDetailsService 有什么好处？
如何使用 UserDetailsService 在 Spring Boot 中实现安全性？
UserDetailsService 在 Spring Security 应用程序中如何内部工作并带有流程图？
另外，如何使用注解：@EnableWebSecurity、@Configuration、@Bean、@GetMapping、@Autowired、@Data、@Entity、@Table、@Id、@GenerateValue、@Column、@ElementCollection、@CollectionTable、@JoinColumn ， @服务
如何使用 Spring MVC 和 Thymeleaf 开发用户注册应用程序？</description>
      <content:encoded><![CDATA[<p>
  <img loading="lazy" src="https://javatechonline.com/ezoimgfmt/i0.wp.com/javatechonline.com/wp-content/uploads/2020/11/UserDetailsService_SpringBoot-4.jpg?w=704&amp;ssl=1&amp;ezimgfmt=ngcb3/notWebP" alt="img"  /></p>
<p>继续上一篇<a href="https://javatechonline.com/how-to-implement-security-in-spring-boot-project/">关于实现 Spring Security 的两种不同方法</a>的文章，在本文中，我们将学习第三种方法“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现 Security？”。经过上一篇文章后，我希望我们都非常熟悉安全性的基础知识，甚至是 Spring Boot 应用程序中的安全性基础知识。这次我们将创建一个用户注册表并将用户及其角色保存到数据库中。</p>
<p>然后，根据用户角色，我们将借助预定义的 UserDetailsS​​ervice 检查身份验证和授权功能。</p>
<p>如果您正在寻找“如何在 Spring Boot 3 及以上版本中使用 UserDetailsS​​ervice 在 Spring Boot 中实现安全性？”，请访问有关<a href="https://javatechonline.com/spring-security-userdetailsservice-using-spring-boot-3/">使用 Spring Boot 3 的 Spring Security UserDetailsS​​ervice</a> 的单独文章。</p>
<p>为了说明这一点，我们将把一些角色发挥作用，并在整个过程中围绕它们进行发挥，以使其变得清晰。此外，我们将有一些页面并限制它们仅可由某些特定角色访问。同样重要的是，我们必须创建一个小型 MVC Web 应用程序，以使注册过程向用户开放。用户在注册时将输入自己的角色。然后我们可以在其之上实现安全功能。</p>
<p>让我们开始相应的主题“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现安全性？”。</p>
<h2 id="总体而言您对这篇文章有何期望">总体而言，您对这篇文章有何期望？</h2>
<ol>
<li>
<p>Spring Security 上下文中的 UserDetailsS​​ervice 概念是什么？</p>
</li>
<li>
<p>实施 UserDetailsService 有什么好处？</p>
</li>
<li>
<p>如何使用 UserDetailsService 在 Spring Boot 中实现安全性？</p>
</li>
<li>
<p>UserDetailsService 在 Spring Security 应用程序中如何内部工作并带有流程图？</p>
</li>
<li>
<p>另外，如何使用注解：@EnableWebSecurity、@Configuration、@Bean、@GetMapping、@Autowired、@Data、@Entity、@Table、@Id、@GenerateValue、@Column、@ElementCollection、@CollectionTable、@JoinColumn ， @服务</p>
</li>
<li>
<p>如何使用 Spring MVC 和 Thymeleaf 开发用户注册应用程序？</p>
</li>
<li>
<p>如何测试启用安全的应用程序？</p>
</li>
<li>
<p>如何在没有 WebSecurityConfigurerAdapter 的情况下使用 UserDetailsService 在 Spring Boot 中实现安全性？</p>
</li>
</ol>
<h2 id="userdetailsservice-是做什么的使用它有什么好处">UserDetailsService 是做什么的？使用它有什么好处？</h2>
<p>UserDetailsS​​ervice 是 Spring 中 org.springframework.security.core.userdetails 包下的预定义接口。我们的实现类实现了这个接口并重写了它的 loadUserByUsername(String username) 方法。此方法返回 UserDetails，它又是一个接口。预定义的 User 类（org.springframework.security.core.userdetails.User）是 UserDetails 接口的实现。总之，在 loadUserByUsername(String username) 方法中，我们传递用户名，它返回我们预定义的 User 对象（org.springframework.security.core.userdetails.User）。</p>
<p>事实上，我们只向 UserDetailsS​​ervice 提供用户名和一些小的配置，并且我们将所有基于角色的安全功能作为框架的一部分实现。因此，我们在实施安全性方面节省了大量精力。</p>
<h2 id="如何在我们的应用程序中实现-userdetailsservice-安全性">如何在我们的应用程序中实现 UserDetailsService 安全性？</h2>
<p>首先，您必须有一个 Spring Boot Web 应用程序，其中您将有一个表单，即一种用户注册表单。作为 Spring MVC 结构的一部分，您将拥有一个 UserService 实现类。假设它是 UserServiceImpl.java。要记住的第二件事是，您必须将 User 对象转换为预定义的 Spring User 对象。此外，请按照以下步骤在您的应用程序中实现 UserDetailsService。</p>
<p>1）你的用户服务类‘UserServiceImpl.java’应该实现接口 UserDetailsService.java（由 Spring 提供）</p>
<p>2）同样重要的是，重写 UserServiceImpl 类中 UserDetailsService 接口的 loadUserByUsername(String username) 方法。</p>
<p>3）作为实施的一部分，<strong>(A)</strong> 借助 UserRepository 中的用户名/电子邮件获取您的用户对象。 <strong>(B)</strong> 将你的 User 对象相应地转换为 Spring 预定义的 User 对象(org.springframework.security.core.userdetails.User)。 <strong>(C)</strong> 返回 Spring 定义的 User 对象，它是 UserDetails（方法的返回类型）的实现。</p>
<p>下面的代码代表了 UserDetailsService 的实现。但是，您将在下面的部分中看到完整的代码。</p>
<p>UserServiceImpl.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">IUserService</span><span class="o">,</span> <span class="n">UserDetailsService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">UserRepository</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UsernameNotFoundException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Optional</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">opt</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">.</span><span class="na">findUserByEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">userdetails</span><span class="o">.</span><span class="na">User</span> <span class="n">springUser</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">opt</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">UsernameNotFoundException</span><span class="o">(</span><span class="s">&#34;User with email: &#34;</span> <span class="o">+</span> <span class="n">email</span> <span class="o">+</span> <span class="s">&#34; not found&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">opt</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">roles</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getRoles</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">			<span class="n">Set</span><span class="o">&lt;</span><span class="n">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">ga</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">role</span> <span class="o">:</span> <span class="n">roles</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ga</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleGrantedAuthority</span><span class="o">(</span><span class="n">role</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="n">springUser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">userdetails</span><span class="o">.</span><span class="na">User</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">				<span class="n">email</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">				<span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span>
</span></span><span class="line"><span class="cl">				<span class="n">ga</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">springUser</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//Other Approach: Using Lambda &amp; Stream API of Java 8
</span></span></span><span class="line"><span class="cl"><span class="c1">//	@Override
</span></span></span><span class="line"><span class="cl"><span class="c1">//	public UserDetails loadUserByUsername(String email)
</span></span></span><span class="line"><span class="cl"><span class="c1">//		throws UsernameNotFoundException {
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">//		Optional&lt;User&gt; opt = userRepo.findUserByEmail(email);
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">//		if (opt.isEmpty())
</span></span></span><span class="line"><span class="cl"><span class="c1">//			throw new UsernameNotFoundException(&#34;User with email: &#34; + email + &#34; not found !&#34;);
</span></span></span><span class="line"><span class="cl"><span class="c1">//		else {
</span></span></span><span class="line"><span class="cl"><span class="c1">//			User user = opt.get();
</span></span></span><span class="line"><span class="cl"><span class="c1">//			return new org.springframework.security.core.userdetails.User(
</span></span></span><span class="line"><span class="cl"><span class="c1">//				user.getEmail(),
</span></span></span><span class="line"><span class="cl"><span class="c1">//				user.getPassword(),
</span></span></span><span class="line"><span class="cl"><span class="c1">//				user.getRoles()
</span></span></span><span class="line"><span class="cl"><span class="c1">//					.stream()
</span></span></span><span class="line"><span class="cl"><span class="c1">//					.map(role -&gt; new SimpleGrantedAuthority(role))
</span></span></span><span class="line"><span class="cl"><span class="c1">//					.collect(Collectors.toSet())
</span></span></span><span class="line"><span class="cl"><span class="c1">//			);
</span></span></span><span class="line"><span class="cl"><span class="c1">//		}
</span></span></span><span class="line"><span class="cl"><span class="c1">//	}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h2 id="userdetailsservice-在-spring-security-应用程序内部如何工作">UserDetailsService 在 Spring Security 应用程序内部如何工作？</h2>
<p>`
  <img loading="lazy" src="https://javatechonline.com/ezoimgfmt/i0.wp.com/javatechonline.com/wp-content/uploads/2020/11/SpringSecurity_UserDetailsService_2-1-1.jpg?resize=640%2C361&amp;is-pending-load=1#038;ssl=1&amp;ezimgfmt=rs:640x361/rscb4/ng:webp/ngcb3" alt="How to implement UserDetailsService"  /></p>
<p>一旦用户输入用户名和密码并单击“登录”按钮，就会调用 WebSecurityConfigurerAdapter，该适配器在内部调用 UserServiceImpl.java（实现类，由程序员提供）。此外，UserServiceImpl.java 中实现的 loadUserByUserName()方法将我们的 User 对象转换为 Spring 提供的 User 对象。此外，我们的 SecurityConfig.java 扩展了 WebSecurityConfigurerAdapter 并通过两种方法提供了身份验证和授权逻辑的实现；分别配置（AuthenticationManagerBuilder）和配置（HttpSecurity），如下面的代码所示。</p>
<p>SecurityConfig.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">UserDetailsService</span> <span class="n">uds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BCryptPasswordEncoder</span> <span class="n">encoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">auth</span><span class="o">.</span><span class="na">userDetailsService</span><span class="o">(</span><span class="n">uds</span><span class="o">).</span><span class="na">passwordEncoder</span><span class="o">(</span><span class="n">encoder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">,</span> <span class="s">&#34;/register&#34;</span><span class="o">,</span> <span class="s">&#34;/saveUser&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Manager&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Employee&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/hr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;HR&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/common&#34;</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="s">&#34;Employeee,Manager,Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">().</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">).</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">logout</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">logoutRequestMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">AntPathRequestMatcher</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">)).</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">accessDeniedPage</span><span class="o">(</span><span class="s">&#34;/accessDenied&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>注意：从 Spring Security 5.7.0-M2 开始，WebSecurityConfigurerAdapter 已被弃用。因此，如果您使用 Spring Security 5.7.0-M2 或更高版本，请更新您的实现，如下面的代码片段所示。此外，为了了解实现自定义配置类的新方法，请访问有关不使用 WebSecurityConfigurerAdapter 的 Spring Security 的单独文章。</p>
<p>SecurityConfig.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.dao.DaoAuthenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.EnableWebSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.SecurityFilterChain</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.util.matcher.AntPathRequestMatcher</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">UserDetailsService</span> <span class="n">uds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BCryptPasswordEncoder</span> <span class="n">encoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">,</span><span class="s">&#34;/register&#34;</span><span class="o">,</span><span class="s">&#34;/saveUser&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Manager&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Employee&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/hr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;HR&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/common&#34;</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="s">&#34;Employeee,Manager,Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">,</span><span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">logout</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">logoutRequestMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">AntPathRequestMatcher</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">accessDeniedPage</span><span class="o">(</span><span class="s">&#34;/accessDenied&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">authenticationProvider</span><span class="o">(</span><span class="n">authenticationProvider</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">AuthenticationProvider</span> <span class="nf">authenticationProvider</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">DaoAuthenticationProvider</span> <span class="n">authenticationProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DaoAuthenticationProvider</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">authenticationProvider</span><span class="o">.</span><span class="na">setUserDetailsService</span><span class="o">(</span><span class="n">uds</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">authenticationProvider</span><span class="o">.</span><span class="na">setPasswordEncoder</span><span class="o">(</span><span class="n">encoder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">authenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="实现-userdetailsservice-的示例">实现 UserDetailsService 的示例</h2>
<p>为了说明 UserDetailsS​​ervice 的实现，我们假设一个小公司的内部门户。在公司中，我们的员工扮演着各种角色，例如管理员、人力资源、经理，当然还有员工。此外，门户还具有基于角色的页面访问权限。甚至某些页面可供所有角色访问，而其他页面则仅限于某些特定角色。</p>
<p>同样重要的是，公司将有一个用户注册页面，即使没有登录，所有用户也必须可以访问该页面。现在让我们创建一个标准用户注册流程，如下所示。</p>
<p>
  <img loading="lazy" src="https://javatechonline.com/ezoimgfmt/i0.wp.com/javatechonline.com/wp-content/uploads/2020/11/UserRegistrationFlow-1.jpg?resize=640%2C339&amp;is-pending-load=1#038;ssl=1&amp;ezimgfmt=rs:640x339/rscb4/ng:webp/ngcb3" alt="User Registration MVC Flow Design"  /></p>
<h3 id="步骤1在-stsspring-tool-suite中创建一个-spring-boot-starter-项目"><strong>步骤#1：在 STS(Spring Tool Suite)中创建一个 Spring Boot Starter 项目</strong></h3>
<p>创建入门项目时，选择“Spring Security”、“Thymeleaf”、“Spring Web”、“Spring Data JPA”、“MySQL Driver”、“Lombok”和“Spring Boot DevTools”作为入门项目依赖项。即使您不知道如何创建 Spring Boot 入门项目，也请访问“如何在 Spring boot 中创建入门项目？”的内部链接。另外，如果您想了解有关 Lombok 的更多信息，请访问 Lombok 上的内部链接。</p>
<h3 id="步骤2更新数据库配置">步骤#2：更新数据库配置</h3>
<p>更新 application.properties 以连接到 MySQL 数据库。请注意，我们还可以省略 driver-class-name，因为 Spring Boot 会自动从数据库 URL 中找到它，如下所示。不过，建议保留。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1">#application.properties</span>
</span></span><span class="line"><span class="cl"><span class="err">---------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1">#-------------------- server properties ---------------</span>
</span></span><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">8080</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#--------------------- DB Connection ------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1">#AutoLoading of driver class since JDBC 4</span>
</span></span><span class="line"><span class="cl"><span class="c1">#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/testBootSecurity</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.password</span><span class="o">=</span><span class="s">devs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#--------------------JPA-ORM Properties-----------------</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.jpa.show-sql</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.jpa.hibernate.ddl-auto</span><span class="o">=</span><span class="s">update</span>
</span></span><span class="line"><span class="cl"><span class="c1">#spring.jpa.database-platform=org.hibernet.dialect.MySQL8Dialect</span>
</span></span></code></pre></div><h3 id="步骤3创建用户实体和存储库类">步骤#3：创建用户实体和存储库类</h3>
<p>现在创建 User.java 和 UserRepositoty.java 如下。同样重要的是，User.java 有一个 List 类型的变量“roles”。它将在数据库中创建一个单独的表，其中相应地包含两列 user_id 和 user_role 。此外，@ElementCollection(fetch= FetchType.EAGER)表示在获取 User 对象的同时，也同时获取角色。另一方面，UserRepository 扩展了“JpaRepository”以利用内置数据库操作。</p>
<p>User.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.CollectionTable</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.ElementCollection</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.FetchType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.JoinColumn</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.Table</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Data</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Entity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;users&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Id</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@GeneratedValue</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_id&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_name&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_passwd&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_email&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@ElementCollection</span><span class="o">(</span><span class="n">fetch</span><span class="o">=</span> <span class="n">FetchType</span><span class="o">.</span><span class="na">EAGER</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@CollectionTable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">			<span class="n">name</span><span class="o">=</span><span class="s">&#34;roles&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">joinColumns</span> <span class="o">=</span> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_id&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_role&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">roles</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>UserRepository.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.repo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">Optional</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUserByEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤4创建-appconfig-类来实例化-bcryptpasswordencoder">步骤#4：创建 AppConfig 类来实例化 BCryptPasswordEncoder</h3>
<p>由于 BCryptPasswordEncoder 是一个预定义的类，因此我们需要在 AppConfig.java 中提供它的实例化代码作为配置类。此外，需要 BCryptPasswordEncoder 在其他类中对我们的密码值进行编码。</p>
<p>AppConfig.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">BCryptPasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤5创建服务接口和服务实现类">步骤#5：创建服务接口和服务实现类</h3>
<p>相应地创建服务接口和服务 Impl 类作为 IUserService.java 和 UserServiceImpl.java，如下所示。事实上，UserServiceImpl.java 中 loadUserByUsername(String email) 方法的实现是整个 UserDetailsS​​ervice 中最重要的部分。</p>
<p>IUserService.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IUserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Integer</span> <span class="nf">saveUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>UserServiceImpl.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.service.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.GrantedAuthority</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.authority.SimpleGrantedAuthority</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UsernameNotFoundException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.repo.UserRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.service.IUserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">IUserService</span><span class="o">,</span> <span class="n">UserDetailsService</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">UserRepository</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BCryptPasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Integer</span> <span class="nf">saveUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">passwd</span><span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">encodedPasswod</span> <span class="o">=</span> <span class="n">passwordEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">passwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">encodedPasswod</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">user</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UsernameNotFoundException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Optional</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">opt</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">.</span><span class="na">findUserByEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">userdetails</span><span class="o">.</span><span class="na">User</span> <span class="n">springUser</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="o">(</span><span class="n">opt</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">UsernameNotFoundException</span><span class="o">(</span><span class="s">&#34;User with email: &#34;</span> <span class="o">+</span><span class="n">email</span> <span class="o">+</span><span class="s">&#34; not found&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">User</span> <span class="n">user</span> <span class="o">=</span><span class="n">opt</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">			<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">roles</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getRoles</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">			<span class="n">Set</span><span class="o">&lt;</span><span class="n">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">ga</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">role</span><span class="o">:</span><span class="n">roles</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ga</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleGrantedAuthority</span><span class="o">(</span><span class="n">role</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="n">springUser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">userdetails</span><span class="o">.</span><span class="na">User</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">							<span class="n">email</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">							<span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span>
</span></span><span class="line"><span class="cl">							<span class="n">ga</span> <span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">springUser</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//Other Approach: Using Lambda &amp; Stream API of Java 8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="cm">/*@Override
</span></span></span><span class="line"><span class="cl"><span class="cm">	public UserDetails loadUserByUsername(String email)
</span></span></span><span class="line"><span class="cl"><span class="cm">			throws UsernameNotFoundException {
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Optional&lt;User&gt; opt = userRepo.findUserByEmail(email);
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		if(opt.isEmpty())
</span></span></span><span class="line"><span class="cl"><span class="cm">				throw new UsernameNotFoundException(&#34;User with email: &#34; +email +&#34; not found !&#34;);
</span></span></span><span class="line"><span class="cl"><span class="cm">		else {
</span></span></span><span class="line"><span class="cl"><span class="cm">			User user = opt.get();
</span></span></span><span class="line"><span class="cl"><span class="cm">			return new org.springframework.security.core.userdetails.User(
</span></span></span><span class="line"><span class="cl"><span class="cm">					user.getEmail(),
</span></span></span><span class="line"><span class="cl"><span class="cm">					user.getPassword(),
</span></span></span><span class="line"><span class="cl"><span class="cm">					user.getRoles()
</span></span></span><span class="line"><span class="cl"><span class="cm">					.stream()
</span></span></span><span class="line"><span class="cl"><span class="cm">					.map(role-&gt; new SimpleGrantedAuthority(role))
</span></span></span><span class="line"><span class="cl"><span class="cm">					.collect(Collectors.toSet())
</span></span></span><span class="line"><span class="cl"><span class="cm">		    );
</span></span></span><span class="line"><span class="cl"><span class="cm">		}*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤6创建一个-usercontroller-类">步骤#6：创建一个 UserController 类</h3>
<p>随后，为用户编写一个控制器类“UserController.java”，它将控制用户注册页面。</p>
<p>UserController.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.controller</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.ui.Model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ModelAttribute</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PostMapping</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.service.IUserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">IUserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Go to Registration Page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/register&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">register</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;registerUser&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Read Form data to save into DB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/saveUser&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">saveUser</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">			<span class="nd">@ModelAttribute</span> <span class="n">User</span> <span class="n">user</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Model</span> <span class="n">model</span>
</span></span><span class="line"><span class="cl">			<span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Integer</span> <span class="n">id</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">saveUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;User &#39;&#34;</span><span class="o">+</span><span class="n">id</span><span class="o">+</span><span class="s">&#34;&#39; saved successfully !&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;registerUser&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤7编写一个控制器类来浏览页面">步骤#7：编写一个控制器类来浏览页面</h3>
<p>除了 UserController，再编写一个控制器类并将其命名为“HomeController.java”。该类将负责浏览不同的页面。</p>
<p>HomeController.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.controller</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getHomePage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;homePage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getWelcomePage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;welcomePage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getAdminPage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;adminPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getEmployeePage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;empPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getManagerPage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;mgrPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/hr&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getHrPage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;hrPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/common&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getCommonPage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;commonPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/accessDenied&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getAccessDeniedPage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;accessDeniedPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤8编写-ui-页面thymeleaf">步骤#8：编写 UI 页面(Thymeleaf)</h3>
<p>以下是 UI 页面的 .html 文件。将这些页面相应地放入“src/main/resources/templates”文件夹中。</p>
<p>registerUser.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>User Registration<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>User Registration<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;saveUser&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">pre</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">Name :    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;name&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Email:    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;email&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Password: <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Role(s): <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;roles&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Admin&#34;</span><span class="p">/&gt;</span>Admin
</span></span><span class="line"><span class="cl">         <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;roles&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Manager&#34;</span><span class="p">/&gt;</span>Manager
</span></span><span class="line"><span class="cl"> 	 <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;roles&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;HR&#34;</span><span class="p">/&gt;</span>HR
</span></span><span class="line"><span class="cl">	 <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;roles&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Employee&#34;</span><span class="p">/&gt;</span>Employee
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;hidden&#34;</span> <span class="na">th:name</span><span class="o">=</span><span class="s">&#34;${_csrf.parameterName}&#34;</span> <span class="na">th:value</span><span class="o">=</span><span class="s">&#34;${_csrf.token}&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Register&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">th:text</span><span class="o">=</span><span class="s">&#34;${msg}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>homePage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>welcome to the Home Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    This page is accessible to ALL.
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>welcomePage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Welcome Page after successful Login<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>adminPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Admin Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    Welcome to Admin page.!!!
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>empPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Employee Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>mgrPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Manager Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>hrPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>HR Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>commonPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>You are not allowed to access this page. Please go to Welcome Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/welcome}&#34;</span><span class="p">&gt;</span>Welcome<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>accessDeniedPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>You are not allowed to access this page. Please go to Welcome Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/welcome}&#34;</span><span class="p">&gt;</span>Welcome<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><h3 id="步骤9编写-securityconfig-类">步骤＃9：编写 SecurityConfig 类</h3>
<p>最后，编写另一个重要的类 SecurityConfig.java ，它将扩展预定义的类 WebSecurityConfigurerAdapter.java 并相应地实现两个 configure() 方法，如下所示。</p>
<p>SecurityConfig.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.EnableWebSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.util.matcher.AntPathRequestMatcher</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">UserDetailsService</span> <span class="n">uds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BCryptPasswordEncoder</span> <span class="n">encoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">auth</span><span class="o">.</span><span class="na">userDetailsService</span><span class="o">(</span><span class="n">uds</span><span class="o">).</span><span class="na">passwordEncoder</span><span class="o">(</span><span class="n">encoder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">,</span><span class="s">&#34;/register&#34;</span><span class="o">,</span><span class="s">&#34;/saveUser&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Manager&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Employee&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/hr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;HR&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/common&#34;</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="s">&#34;Employeee,Manager,Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">,</span><span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">logout</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">logoutRequestMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">AntPathRequestMatcher</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">accessDeniedPage</span><span class="o">(</span><span class="s">&#34;/accessDenied&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤9a编写-securityconfig-类而不使用-websecurityconfigureradapter">步骤＃9A：编写 SecurityConfig 类而不使用 WebSecurityConfigurerAdapter</h3>
<p>如前所述，从 Spring Security 5.7.0-M2 开始，WebSecurityConfigurerAdapter 已被弃用。因此，如果您使用 Spring Security 5.7.0-M2 或更高版本，请更新您的实现，如下面的代码片段所示。</p>
<p>SecurityConfig.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.dao.DaoAuthenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.EnableWebSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.SecurityFilterChain</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.util.matcher.AntPathRequestMatcher</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">UserDetailsService</span> <span class="n">uds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BCryptPasswordEncoder</span> <span class="n">encoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">,</span><span class="s">&#34;/register&#34;</span><span class="o">,</span><span class="s">&#34;/saveUser&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Manager&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Employee&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/hr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;HR&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/common&#34;</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="s">&#34;Employeee,Manager,Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">,</span><span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">logout</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">logoutRequestMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">AntPathRequestMatcher</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">accessDeniedPage</span><span class="o">(</span><span class="s">&#34;/accessDenied&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">authenticationProvider</span><span class="o">(</span><span class="n">authenticationProvider</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">AuthenticationProvider</span> <span class="nf">authenticationProvider</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">DaoAuthenticationProvider</span> <span class="n">authenticationProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DaoAuthenticationProvider</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">authenticationProvider</span><span class="o">.</span><span class="na">setUserDetailsService</span><span class="o">(</span><span class="n">uds</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">authenticationProvider</span><span class="o">.</span><span class="na">setPasswordEncoder</span><span class="o">(</span><span class="n">encoder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">authenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>最后我们完成了编码部分。</p>
<h2 id="如何测试启用安全的应用程序">如何测试启用安全的应用程序？</h2>
<p>虽然“测试”这个词对于开发人员来说看起来很容易，但它同样重要，因为它提供了我们整体实现的结果。在测试应用程序时，您应该将 SecurityConfig 类的 configure(HttpSecurity http) 方法保留在您面前，然后按照以下步骤操作：</p>
<ol>
<li>
<p>启动应用程序：右键单击项目，然后选择“Run As”&raquo;“Spring Boot App”。</p>
</li>
<li>
<p>输入注册页面网址 http://localhost:8080/register，然后检查是否每个人都可以访问，甚至不需要登录应用程序。</p>
</li>
<li>
<p>输入必填字段值并相应地单击“注册”按钮完成注册过程。</p>
</li>
<li>
<p>现在输入您在注册时选择的角色特定的任何 URL。假设您输入 URL http://localhost:8080/admin，那么它应该将您重定向到内置的登录页面。</p>
</li>
<li>
<p>输入凭据（电子邮件 ID 代替用户名）并登录到应用程序。它会将您重定向到默认的成功 URL，即欢迎页面。</p>
</li>
<li>
<p>现在输入网址 http://localhost:8080/admin</p>
</li>
<li>
<p>对其他角色也重复上述步骤。</p>
</li>
</ol>
<p>此外，如上所述，将代码放在您面前并随后测试每个场景。</p>
<h2 id="概括">概括</h2>
<p>在完成“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现安全性？”的所有理论和示例部分之后，最后，我们能够在 Spring Boot 项目中实现 Web 安全性。当然，在本文中我们介绍了实现安全功能的第三种方法。同样，我们将在接下来的文章中讨论更多安全方法，例如 REST 安全性。未来若有任何变化，我们将进行相应更新。</p>
<p>如果您想了解有关 Spring Security 的更多信息，请访问 spring.io 文档。另外，欢迎在评论区提出你的意见。</p>
<p>原文链接：<a href="https://javatechonline.com/how-to-implement-security-in-spring-boot-using-userdetailsservice/">https://javatechonline.com/how-to-implement-security-in-spring-boot-using-userdetailsservice/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]如何在Spring Boot3中使用UserDetailsService实现安全性？</title>
      <link>https://blog.chensoul.com/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</link>
      <pubDate>Fri, 18 Aug 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</guid>
      <description>作为有关 Spring Security 的系列文章的继续，在本文中我们将学习“如何在 Spring Boot 3 中使用 UserDetailsService 实现 Spring Boot 中的安全性？”。经过前面的文章，我希望我们都非常熟悉安全性的基础知识，甚至 Spring Boot 应用程序中的安全性基础知识。 Spring Boot 3 发布后，我们将在这里实现“使用 Spring Boot 3 的 Spring Security UserDetailsService”。
在本文中，我们将创建一个用户注册表单并将用户及其角色保存在数据库中。然后，根据用户角色，我们将借助预定义的 UserDetailsS​​ervice 检查身份验证和授权功能。
您对整篇文章有何期望？ Spring Security 上下文中的 UserDetailsS​​ervice 概念是什么？
实施 UserDetailsService 有什么好处？
如何使用 Spring Boot 3 实现 Spring Security UserDetailsService？
如何在基于 Spring 的应用程序中实现基于角色的安全性？
此外，如何以及在哪里使用注释：@EnableWebSecurity，@Configuration，@Bean，@GetMapping，@Autowired，@Data，@Entity，@Table，@Id，@GenerateValue，@Column，@ElementCollection，@CollectionTable， @JoinColumn，@Service
如何使用 Spring MVC 和 Thymeleaf 开发用户注册应用程序？
如何测试启用安全的应用程序？
如何在没有 WebSecurityConfigurerAdapter 的情况下使用 UserDetailsService 在 Spring Boot 中实现安全性？
示例中使用的软件/技术 有时某些版本与其他版本冲突。因此，列出经过测试可以相互协作的组合。下面是经过测试的软件组合，用于使用 Spring Boot 3 开发 Spring Security UserDetailsS​​ervice。它也使实现完美无缺。</description>
      <content:encoded><![CDATA[<p>
  <img loading="lazy" src="https://javatechonline.com/ezoimgfmt/i0.wp.com/javatechonline.com/wp-content/uploads/2022/12/UserDetailsServiceSpringBoot3-1.jpg" alt="Spring Security UserDetailsService Using Spring Boot 3"  /></p>
<p>作为有关 Spring Security 的系列文章的继续，在本文中我们将学习“如何在 Spring Boot 3 中使用 UserDetailsService 实现 Spring Boot 中的安全性？”。经过前面的文章，我希望我们都非常熟悉安全性的基础知识，甚至 Spring Boot 应用程序中的安全性基础知识。 Spring Boot 3 发布后，我们将在这里实现“使用 Spring Boot 3 的 Spring Security UserDetailsService”。</p>
<p>在本文中，我们将创建一个用户注册表单并将用户及其角色保存在数据库中。然后，根据用户角色，我们将借助预定义的 UserDetailsS​​ervice 检查身份验证和授权功能。</p>
<h2 id="您对整篇文章有何期望">您对整篇文章有何期望？</h2>
<ol>
<li>
<p>Spring Security 上下文中的 UserDetailsS​​ervice 概念是什么？</p>
</li>
<li>
<p>实施 UserDetailsService 有什么好处？</p>
</li>
<li>
<p>如何使用 Spring Boot 3 实现 Spring Security UserDetailsService？</p>
</li>
<li>
<p>如何在基于 Spring 的应用程序中实现基于角色的安全性？</p>
</li>
<li>
<p>此外，如何以及在哪里使用注释：@EnableWebSecurity，@Configuration，@Bean，@GetMapping，@Autowired，@Data，@Entity，@Table，@Id，@GenerateValue，@Column，@ElementCollection，@CollectionTable， @JoinColumn，@Service</p>
</li>
<li>
<p>如何使用 Spring MVC 和 Thymeleaf 开发用户注册应用程序？</p>
</li>
<li>
<p>如何测试启用安全的应用程序？</p>
</li>
<li>
<p>如何在没有 WebSecurityConfigurerAdapter 的情况下使用 UserDetailsService 在 Spring Boot 中实现安全性？</p>
</li>
</ol>
<h2 id="示例中使用的软件技术">示例中使用的软件/技术</h2>
<p>有时某些版本与其他版本冲突。因此，列出经过测试可以相互协作的组合。下面是经过测试的软件组合，用于使用 Spring Boot 3 开发 Spring Security UserDetailsS​​ervice。它也使实现完美无缺。</p>
<ol>
<li>
<p><a href="https://javatechonline.com/new-features-in-spring-boot-3-and-spring-6/">Spring Boot 3.0.0</a></p>
</li>
<li>
<p>JDK 17 or later</p>
</li>
<li>
<p>Maven 3.8.1 3）Maven 3.8.1</p>
</li>
<li>
<p>IDE – STS 4.7.1. RELEASE</p>
</li>
<li>
<p>IDE – STS 4.7.1。发布</p>
</li>
</ol>
<h3 id="jars-used">Jars Used</h3>
<p>下面是这些示例中 maven 使用 pom.xml 自动下载的主要 jar 的列表。如果您在执行中遇到任何问题，它们可能有助于交叉验证。</p>
<ol>
<li>
<p>spring-boot-3.0.0.jar</p>
</li>
<li>
<p>spring-boot-starter-3.0.0.jar</p>
</li>
<li>
<p>spring-boot-starter-security-3.0.0.jar</p>
</li>
<li>
<p>spring-core-6.0.2.jar</p>
</li>
<li>
<p>spring-security-core-6.0.0.jar</p>
</li>
<li>
<p>thymeleaf-spring6-3.1.0.RELEASE.jar</p>
</li>
</ol>
<h2 id="userdetailsservice-是做什么的使用它有什么好处">UserDetailsService 是做什么的？使用它有什么好处？</h2>
<p>UserDetailsS​​ervice 是 Spring 框架在 org.springframework.security.core.userdetails 包下提供的预定义接口。为了使用 UserDetailsS​​ervice，我们的实现类实现了这个接口并重写了它的 loadUserByUsername(String username) 方法。该方法的返回类型是 UserDetails，它又是一个接口。预定义的 User 类（org.springframework.security.core.userdetails.User）是 UserDetails 接口的实现。此外，我们在 loadUserByUsername(String username) 方法中传递用户名，它返回我们预定义的 User 对象（org.springframework.security.core.userdetails.User）。</p>
<p>事实上，我们只向 UserDetailsS​​ervice 提供用户名和一些小配置。因此，我们将所有基于角色的内置安全功能作为框架的一部分实现。因此，当我们使用 UserDetailsS​​ervice 接口时，我们在实现安全性方面节省了很多精力。</p>
<h2 id="如何将-userdetailsservice-安全性合并到我们的应用程序中">如何将 UserDetailsService 安全性合并到我们的应用程序中？</h2>
<p>首先，您必须有一个 Spring Boot Web 应用程序，其中您将有一个表单，即一种用户注册表单。作为 Spring MVC 结构的一部分，您将拥有一个 UserService 实现类。假设它是 UserServiceImpl.java。要记住的第二件事是，您必须将 User 对象转换为预定义的 Spring User 对象。此外，请按照以下步骤在您的应用程序中实现 UserDetailsS​​ervice。</p>
<p><strong>1)</strong> 你的用户服务类‘UserServiceImpl.java’应该实现接口 UserDetailsS​​ervice.java（由 Spring 提供）</p>
<p><strong>2)</strong> 同样重要的是，重写 UserServiceImpl 类中 UserDetailsS​​ervice 接口的 loadUserByUsername(String username) 方法。</p>
<p><strong>3)</strong> 作为实施的一部分，</p>
<p><strong>(A)</strong> 借助 UserRepository 中的用户名/电子邮件获取您的用户对象。
<strong>(B)</strong> 将你的 User 对象相应地转换为 Spring 预定义的 User 对象(org.springframework.security.core.userdetails.User)。
<strong>(C)</strong> 返回 Spring 定义的 User 对象，它是 UserDetails（方法的返回类型）的实现。</p>
<p>下面的代码代表了 UserDetailsS​​ervice 的实现。但是，您将在下面的部分中看到完整的代码。</p>
<p>UserServiceImpl.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.authority.SimpleGrantedAuthority</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UsernameNotFoundException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.repo.UserRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.service.IUserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">IUserService</span><span class="o">,</span> <span class="n">UserDetailsService</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">UserRepository</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BCryptPasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Integer</span> <span class="nf">saveUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">passwd</span><span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">encodedPasswod</span> <span class="o">=</span> <span class="n">passwordEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">passwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">encodedPasswod</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">user</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="kd">throws</span> <span class="n">UsernameNotFoundException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Optional</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">opt</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">.</span><span class="na">findUserByEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="o">(</span><span class="n">opt</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">				<span class="k">throw</span> <span class="k">new</span> <span class="n">UsernameNotFoundException</span><span class="o">(</span><span class="s">&#34;User with email: &#34;</span> <span class="o">+</span><span class="n">email</span> <span class="o">+</span><span class="s">&#34; not found !&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">opt</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">userdetails</span><span class="o">.</span><span class="na">User</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">					<span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span>
</span></span><span class="line"><span class="cl">					<span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span>
</span></span><span class="line"><span class="cl">					<span class="n">user</span><span class="o">.</span><span class="na">getRoles</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">					<span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">					<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">role</span><span class="o">-&gt;</span> <span class="k">new</span> <span class="n">SimpleGrantedAuthority</span><span class="o">(</span><span class="n">role</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">					<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toSet</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">		    <span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//Other Approach: Without Using Lambda &amp; Stream API Of Java 8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="cm">/** @Override
</span></span></span><span class="line"><span class="cl"><span class="cm">	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Optional&lt;User&gt; opt = userRepo.findUserByEmail(email);
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		org.springframework.security.core.userdetails.User springUser=null;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		if(opt.isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="cm">			throw new UsernameNotFoundException(&#34;User with email: &#34; +email +&#34; not found&#34;);
</span></span></span><span class="line"><span class="cl"><span class="cm">		}
</span></span></span><span class="line"><span class="cl"><span class="cm">			User user =opt.get();
</span></span></span><span class="line"><span class="cl"><span class="cm">			List&lt;String&gt; roles = user.getRoles();
</span></span></span><span class="line"><span class="cl"><span class="cm">			Set&lt;GrantedAuthority&gt; ga = new HashSet&lt;&gt;();
</span></span></span><span class="line"><span class="cl"><span class="cm">			for(String role:roles) {
</span></span></span><span class="line"><span class="cl"><span class="cm">				ga.add(new SimpleGrantedAuthority(role));
</span></span></span><span class="line"><span class="cl"><span class="cm">			}
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			springUser = new org.springframework.security.core.userdetails.User(
</span></span></span><span class="line"><span class="cl"><span class="cm">							email,
</span></span></span><span class="line"><span class="cl"><span class="cm">							user.getPassword(),
</span></span></span><span class="line"><span class="cl"><span class="cm">							ga );
</span></span></span><span class="line"><span class="cl"><span class="cm">		return springUser;
</span></span></span><span class="line"><span class="cl"><span class="cm">	} */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="我们如何在基于-spring-的应用程序中实现基于角色的安全性">我们如何在基于 Spring 的应用程序中实现基于角色的安全性？</h2>
<p>通常，在基于 Spring 的应用程序中，我们通过创建一个 java 类并在其上应用 @EnableWebSecurity 和 @Configuration 来实现基于角色的访问。 @EnableWebSecurity 在应用程序中启用 Spring Security 功能，而 @Configuration 表示该类是一个配置类。例如，下面的代码演示了基于角色的安全性的实现。</p>
<p>SecurityConfig.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.dao.DaoAuthenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.EnableWebSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.SecurityFilterChain</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.util.matcher.AntPathRequestMatcher</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">UserDetailsService</span> <span class="n">uds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BCryptPasswordEncoder</span> <span class="n">encoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">,</span><span class="s">&#34;/register&#34;</span><span class="o">,</span><span class="s">&#34;/saveUser&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Manager&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Employee&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/hr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;HR&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/common&#34;</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="s">&#34;Employeee,Manager,Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">,</span><span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">logout</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">logoutRequestMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">AntPathRequestMatcher</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">accessDeniedPage</span><span class="o">(</span><span class="s">&#34;/accessDenied&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">authenticationProvider</span><span class="o">(</span><span class="n">authenticationProvider</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">AuthenticationProvider</span> <span class="nf">authenticationProvider</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">DaoAuthenticationProvider</span> <span class="n">authenticationProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DaoAuthenticationProvider</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">authenticationProvider</span><span class="o">.</span><span class="na">setUserDetailsService</span><span class="o">(</span><span class="n">uds</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">authenticationProvider</span><span class="o">.</span><span class="na">setPasswordEncoder</span><span class="o">(</span><span class="n">encoder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">authenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="使用-spring-boot-3-的-spring-security-userdetailsservice-示例">使用 Spring Boot 3 的 Spring Security UserDetailsService 示例</h2>
<p>为了简化使用 Spring Boot 3 的 Spring Security UserDetailsS​​ervice 的实现，让我们考虑一个用例。</p>
<h3 id="use-case-details-用例详细信息">Use case Details 用例详细信息</h3>
<p>让我们假设一个小型组织的内部门户。在组织中，我们的员工扮演着各种角色，例如管理员、人力资源、经理，当然还有员工。此外，门户还具有基于角色的页面访问权限。此外，某些页面应该可供所有角色访问，例如注册和公共信息页面，而其他页面则应仅限于各自的角色。</p>
<p>不用说，该组织将有一个用户注册页面，即使没有登录，所有用户也必须可以访问该页面。现在让我们创建一个标准用户注册流程，如下所示。</p>
<p>
  <img loading="lazy" src="https://javatechonline.com/ezoimgfmt/i0.wp.com/javatechonline.com/wp-content/uploads/2022/12/UserRegistrationFlow-1.jpg?resize=640%2C339&amp;is-pending-load=1#038;ssl=1&amp;ezimgfmt=rs:640x339/rscb4/ng:webp/ngcb3" alt="Spring Security UserDetailsService Using Spring Boot 3"  /></p>
<h3 id="步骤1在-stsspring-tool-suite中创建一个-spring-boot-starter-项目">步骤#1：在 STS(Spring Tool Suite)中创建一个 Spring Boot Starter 项目</h3>
<p>创建入门项目时，选择“Spring Security”、“Thymeleaf”、“Spring Web”、“Spring Data JPA”、“MySQL Driver”、“Lombok”和“Spring Boot DevTools”作为入门项目依赖项。即使您不知道如何创建 Spring Boot 入门项目，也请访问“如何在 Spring boot 中创建入门项目？”的内部链接。另外，如果您想了解有关 Lombok 的更多信息，请访问 Lombok 上的内部链接。</p>
<h3 id="步骤2更新-applicationproperties-文件中的数据库属性">步骤#2：更新 application.properties 文件中的数据库属性</h3>
<p>更新 application.properties 以连接到 MySQL 数据库。请注意，我们还可以省略 driver-class-name，因为 Spring Boot 会自动从数据库 URL 中找到它，如下所示。不过，建议保留。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="c1">#application.properties</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#-------------------- server properties ---------------</span>
</span></span><span class="line"><span class="cl"><span class="na">server.port</span><span class="o">=</span><span class="s">8080</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#--------------------- DB Connection ------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1">#AutoLoading of driver class since JDBC 4</span>
</span></span><span class="line"><span class="cl"><span class="c1">#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/testBootSecurity</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.username</span><span class="o">=</span><span class="s">root</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.password</span><span class="o">=</span><span class="s">devs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#--------------------JPA-ORM Properties-----------------</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.jpa.show-sql</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">spring.jpa.hibernate.ddl-auto</span><span class="o">=</span><span class="s">update</span>
</span></span><span class="line"><span class="cl"><span class="c1">#spring.jpa.database-platform=org.hibernet.dialect.MySQL8Dialect</span>
</span></span></code></pre></div><h3 id="步骤3创建用户实体和存储库类">步骤#3：创建用户实体和存储库类</h3>
<p>现在创建 User.java 和 UserRepositoty.java 如下。请注意，从 Spring Boot 3.0.0 和 Spring Security 6.0 开始，所有以“javax”开头的导入语句都将替换为“jakarta”，如下面的代码所示。例如：“javax.persistence.Entity;”应替换为“jakarta.persistence.Entity;”。</p>
<p>同样重要的是，User.java 有一个 List 类型的变量“roles”。它将在数据库中创建一个单独的表，其中包含两列 user_id 和 user_role。此外，@ElementCollection(fetch= FetchType.EAGER)表示在获取 User 对象的同时，也同时获取角色。另一方面，UserRepository 扩展了“JpaRepository”以利用内置数据库操作。</p>
<p>User.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jakarta.persistence.CollectionTable</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jakarta.persistence.Column</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jakarta.persistence.ElementCollection</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jakarta.persistence.Entity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jakarta.persistence.FetchType</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jakarta.persistence.GeneratedValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jakarta.persistence.Id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jakarta.persistence.JoinColumn</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">jakarta.persistence.Table</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Data</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Entity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;users&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Id</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@GeneratedValue</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_id&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Integer</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_name&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_passwd&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_email&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@ElementCollection</span><span class="o">(</span><span class="n">fetch</span><span class="o">=</span> <span class="n">FetchType</span><span class="o">.</span><span class="na">EAGER</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@CollectionTable</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">			<span class="n">name</span><span class="o">=</span><span class="s">&#34;roles&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">joinColumns</span> <span class="o">=</span> <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_id&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Column</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;user_role&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">roles</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>UserRepository.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.repo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">Optional</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUserByEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤4创建-appconfig-类来实例化-bcryptpasswordencoder">步骤#4：创建 AppConfig 类来实例化 BCryptPasswordEncoder</h3>
<p>由于 BCryptPasswordEncoder 是一个预定义的类，因此我们需要在 AppConfig.java 中提供它的实例化代码作为配置类。此外，需要 BCryptPasswordEncoder 在其他类中对我们的密码值进行编码。</p>
<p>AppConfig.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">BCryptPasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤5创建服务接口和服务实现类">步骤#5：创建服务接口和服务实现类</h3>
<p>相应地创建服务接口和服务 Impl 类作为 IUserService.java 和 UserServiceImpl.java，如下所示。事实上，UserServiceImpl.java 中 loadUserByUsername(String email) 方法的实现是整个 UserDetailsS​​ervice 中最重要的部分。</p>
<p>IUserService.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IUserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Integer</span> <span class="nf">saveUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>UserServiceImpl.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.service.impl</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.authority.SimpleGrantedAuthority</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UsernameNotFoundException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.repo.UserRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.service.IUserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">IUserService</span><span class="o">,</span> <span class="n">UserDetailsService</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">UserRepository</span> <span class="n">userRepo</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BCryptPasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Integer</span> <span class="nf">saveUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">passwd</span><span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">encodedPasswod</span> <span class="o">=</span> <span class="n">passwordEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">passwd</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">encodedPasswod</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">user</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="kd">throws</span> <span class="n">UsernameNotFoundException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Optional</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">opt</span> <span class="o">=</span> <span class="n">userRepo</span><span class="o">.</span><span class="na">findUserByEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="o">(</span><span class="n">opt</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">				<span class="k">throw</span> <span class="k">new</span> <span class="n">UsernameNotFoundException</span><span class="o">(</span><span class="s">&#34;User with email: &#34;</span> <span class="o">+</span><span class="n">email</span> <span class="o">+</span><span class="s">&#34; not found !&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">opt</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">userdetails</span><span class="o">.</span><span class="na">User</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">					<span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span>
</span></span><span class="line"><span class="cl">					<span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span>
</span></span><span class="line"><span class="cl">					<span class="n">user</span><span class="o">.</span><span class="na">getRoles</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">					<span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">					<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">role</span><span class="o">-&gt;</span> <span class="k">new</span> <span class="n">SimpleGrantedAuthority</span><span class="o">(</span><span class="n">role</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">					<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toSet</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">		    <span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//Other Approach: Without Using Lambda &amp; Stream API Of Java 8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="cm">/** @Override
</span></span></span><span class="line"><span class="cl"><span class="cm">	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Optional&lt;User&gt; opt = userRepo.findUserByEmail(email);
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		org.springframework.security.core.userdetails.User springUser=null;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		if(opt.isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="cm">			throw new UsernameNotFoundException(&#34;User with email: &#34; +email +&#34; not found&#34;);
</span></span></span><span class="line"><span class="cl"><span class="cm">		}
</span></span></span><span class="line"><span class="cl"><span class="cm">			User user =opt.get();
</span></span></span><span class="line"><span class="cl"><span class="cm">			List&lt;String&gt; roles = user.getRoles();
</span></span></span><span class="line"><span class="cl"><span class="cm">			Set&lt;GrantedAuthority&gt; ga = new HashSet&lt;&gt;();
</span></span></span><span class="line"><span class="cl"><span class="cm">			for(String role:roles) {
</span></span></span><span class="line"><span class="cl"><span class="cm">				ga.add(new SimpleGrantedAuthority(role));
</span></span></span><span class="line"><span class="cl"><span class="cm">			}
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			springUser = new org.springframework.security.core.userdetails.User(
</span></span></span><span class="line"><span class="cl"><span class="cm">							email,
</span></span></span><span class="line"><span class="cl"><span class="cm">							user.getPassword(),
</span></span></span><span class="line"><span class="cl"><span class="cm">							ga );
</span></span></span><span class="line"><span class="cl"><span class="cm">		return springUser;
</span></span></span><span class="line"><span class="cl"><span class="cm">	} */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤6创建一个-usercontroller-类">步骤#6：创建一个 UserController 类</h3>
<p>随后，为用户编写一个控制器类“UserController.java”，它将控制用户注册页面。</p>
<p>UserController.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.controller</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.ui.Model</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ModelAttribute</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PostMapping</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.model.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.dev.springboot.security.UserDetailsService.service.IUserService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">IUserService</span> <span class="n">userService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Go to Registration Page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/register&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">register</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;registerUser&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Read Form data to save into DB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/saveUser&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">saveUser</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">			<span class="nd">@ModelAttribute</span> <span class="n">User</span> <span class="n">user</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Model</span> <span class="n">model</span>
</span></span><span class="line"><span class="cl">			<span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Integer</span> <span class="n">id</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">saveUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;User &#39;&#34;</span><span class="o">+</span><span class="n">id</span><span class="o">+</span><span class="s">&#34;&#39; saved successfully !&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;registerUser&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤7编写一个控制器类来浏览页面">步骤#7：编写一个控制器类来浏览页面</h3>
<p>除了 UserController，再编写一个控制器类并将其命名为“HomeController.java”。该类将负责浏览不同的页面。</p>
<p>HomeController.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.controller</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getHomePage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;homePage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getWelcomePage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;welcomePage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getAdminPage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;adminPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getEmployeePage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;empPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getManagerPage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;mgrPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/hr&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getHrPage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;hrPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/common&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getCommonPage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;commonPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/accessDenied&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getAccessDeniedPage</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;accessDeniedPage&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="步骤8编写-ui-页面thymeleaf">步骤#8：编写 UI 页面(Thymeleaf)</h3>
<p>以下是 UI 页面的 .html 文件。将这些页面相应地放入“src/main/resources/templates”文件夹中。</p>
<p>registerUser.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>User Registration<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>User Registration<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;saveUser&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">pre</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">Name :    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;name&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Email:    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;email&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Password: <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Role(s): <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;roles&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Admin&#34;</span><span class="p">/&gt;</span>Admin
</span></span><span class="line"><span class="cl">         <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;roles&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Manager&#34;</span><span class="p">/&gt;</span>Manager
</span></span><span class="line"><span class="cl"> 	 <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;roles&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;HR&#34;</span><span class="p">/&gt;</span>HR
</span></span><span class="line"><span class="cl">	 <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;roles&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Employee&#34;</span><span class="p">/&gt;</span>Employee
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;hidden&#34;</span> <span class="na">th:name</span><span class="o">=</span><span class="s">&#34;${_csrf.parameterName}&#34;</span> <span class="na">th:value</span><span class="o">=</span><span class="s">&#34;${_csrf.token}&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Register&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">pre</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">th:text</span><span class="o">=</span><span class="s">&#34;${msg}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>homePage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>welcome to the Home Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    This page is accessible to ALL.
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>welcomePage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Welcome Page after successful Login<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>adminPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Admin Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    Welcome to Admin page.!!!
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>empPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Employee Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>mgrPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>Manager Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>hrPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>HR Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>commonPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>You are not allowed to access this page. Please go to Welcome Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/welcome}&#34;</span><span class="p">&gt;</span>Welcome<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>accessDeniedPage.html</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;http://www.thymeleaf.org&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">h3</span><span class="p">&gt;</span>You are not allowed to access this page. Please go to Welcome Page<span class="p">&lt;/</span><span class="nt">h3</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/welcome}&#34;</span><span class="p">&gt;</span>Welcome<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">a</span> <span class="na">th:href</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span><span class="p">&gt;</span>LOGOUT<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><h3 id="步骤9编写-securityconfig-类而不使用-websecurityconfigureradapter">步骤＃9：编写 SecurityConfig 类而不使用 WebSecurityConfigurerAdapter</h3>
<p>最后，编写另一个重要的类 SecurityConfig.java。在 Spring Security 5.7.0-M2 之前，此类应该扩展预定义的类 WebSecurityConfigurerAdapter.java 并相应地实现两个 configure() 方法。但从 Spring Security 5.7.0-M2 开始，WebSecurityConfigurerAdapter 已被弃用。此外，从 Spring Boot 3.0.0 和 Spring Security 6.0 开始，WebSecurityConfigurerAdapter 已从 Spring Security API 中完全删除。</p>
<p>因此，所需的实现自 Spring 3.0.0 起就适用，如下面的代码片段所示。</p>
<p>SecurityConfig.java</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.dev.springboot.security.UserDetailsService.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.dao.DaoAuthenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.EnableWebSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.SecurityFilterChain</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.util.matcher.AntPathRequestMatcher</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">UserDetailsService</span> <span class="n">uds</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BCryptPasswordEncoder</span> <span class="n">encoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">http</span><span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span><span class="s">&#34;/home&#34;</span><span class="o">,</span><span class="s">&#34;/register&#34;</span><span class="o">,</span><span class="s">&#34;/saveUser&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span><span class="s">&#34;/mgr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Manager&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span><span class="s">&#34;/emp&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;Employee&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span><span class="s">&#34;/hr&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;HR&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span><span class="s">&#34;/common&#34;</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="s">&#34;Employeee&#34;</span><span class="o">,</span> <span class="s">&#34;Manager&#34;</span><span class="o">,</span> <span class="s">&#34;Admin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="s">&#34;/welcome&#34;</span><span class="o">,</span><span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">logout</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">logoutRequestMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">AntPathRequestMatcher</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">accessDeniedPage</span><span class="o">(</span><span class="s">&#34;/accessDenied&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">		<span class="o">.</span><span class="na">authenticationProvider</span><span class="o">(</span><span class="n">authenticationProvider</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">AuthenticationProvider</span> <span class="nf">authenticationProvider</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">DaoAuthenticationProvider</span> <span class="n">authenticationProvider</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DaoAuthenticationProvider</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">authenticationProvider</span><span class="o">.</span><span class="na">setUserDetailsService</span><span class="o">(</span><span class="n">uds</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">authenticationProvider</span><span class="o">.</span><span class="na">setPasswordEncoder</span><span class="o">(</span><span class="n">encoder</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">authenticationProvider</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>从上面的 SecurityConfig 实现中可以明显看出，旧版本中的一些方法也被删除了。例如：</p>
<ul>
<li>
<p>authorizeRequests() -&gt; authorizeHttpRequests()</p>
</li>
<li>
<p>antMatchers() -&gt; requestMatchers()</p>
</li>
<li>
<p>regexMatchers() -&gt; RegexRequestMatchers()</p>
</li>
</ul>
<p>最后，我们完成了编码部分。</p>
<h2 id="如何测试启用安全性的应用程序">如何测试启用安全性的应用程序？</h2>
<p>虽然“测试”这个词对于开发人员来说看起来很容易，但它同样重要，因为它提供了我们整体实现的结果。在测试应用程序时，您应该将 SecurityConfig 类的 configure(HttpSecurity http) 方法保留在您面前，然后按照以下步骤操作：</p>
<ol>
<li>
<p>启动应用程序：右键单击项目，然后选择“Run As”&raquo;“Spring Boot App”。</p>
</li>
<li>
<p>输入注册页面 URL http://localhost:8080/register，然后检查是否每个人都可以访问，甚至不需要登录应用程序。</p>
</li>
<li>
<p>输入必填字段值并相应地单击“注册”按钮完成注册过程。</p>
</li>
<li>
<p>现在输入您在注册时选择的角色特定的任何 URL。假设您输入 URL http://localhost:8080/admin，那么它应该将您重定向到内置的登录页面。</p>
</li>
<li>
<p>输入凭据并登录到应用程序。它会将您重定向到默认的成功 URL，即欢迎页面。</p>
</li>
<li>
<p>现在再次输入 URL http://localhost:8080/admin，这次您将能够访问管理页面。</p>
</li>
<li>
<p>对其他角色也重复上述步骤。</p>
</li>
</ol>
<p>此外，如上所述，将 SecurityConfig.java 代码保留在您面前，并随后测试每个场景。</p>
<h2 id="如何使用-spring-boot-3-将以前的实现迁移到-spring-security-userdetailsservice">如何使用 Spring Boot 3 将以前的实现迁移到 Spring Security UserDetailsService？</h2>
<p>以下是一些分步指南，您可以按照这些指南从旧版本实现迁移到使用 Spring Boot 3 的 Spring Security UserDetailsS​​ervice。</p>
<ol>
<li>根据推荐 Spring 官方文档，如果使用较低版本实现，请先将实现升级到 Spring Boot 2.7.0。我们可以通过更新 pom.xml 中的 Spring Boot 版本来做到这一点，如下所示。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;version&gt;</span>2.7.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/parent&gt;</span>
</span></span></code></pre></div><p>更新后，保存 pom.xml 并让 Maven 下载新的依赖项。</p>
<ol start="2">
<li>
<p>对于此示例，您将发现 WebSecurityConfigurerAdapter 已被弃用。提供新的实现，而不使用 WebSecurityConfigurerAdapter。您可以使用本文中的 SecurityConfig.java 实现。如果还有其他错误，也请修复它们。</p>
</li>
<li>
<p>下一步，按照 Spring Boot 官方文档的建议在项目中配置 JDK 17 环境。</p>
</li>
<li>
<p>在 pom.xml 中将 Spring Boot 版本更新为“3.0.0”，保存文件并让 maven 下载新的依赖项。</p>
</li>
<li>
<p>修复编译错误，如下图：</p>
</li>
</ol>
<p>(A) I 在 SecurityConfig.java 中：</p>
<ul>
<li>
<p>将 authorizeRequests() 替换为 authorizeHttpRequests()</p>
</li>
<li>
<p>将 antMatchers() 替换为 requestMatchers()</p>
</li>
<li>
<p>将 regexMatchers() 替换为 RegexRequestMatchers()</p>
</li>
</ul>
<p>(B) 在实体类中：</p>
<p>将所有出现的“javax”替换为“jakarta”。例如：“javax.persistence.Entity;”应替换为“jakarta.persistence.Entity;”。</p>
<h3 id="故障排除">故障排除</h3>
<p>将 Spring Boot 版本升级到 3.0.0 时，您可能会遇到以下错误：</p>
<pre tabindex="0"><code>[ERROR] Some problems were encountered while processing the POMs:
[ERROR] &#39;dependencies.dependency.version&#39; for org.thymeleaf.extras:thymeleaf-extras-springsecurity5:jar is missing.
</code></pre><p>为了解决此错误，请更新 Thymeleaf 的版本，如下所示。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;groupId&gt;</span>org.thymeleaf.extras<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;artifactId&gt;</span>thymeleaf-extras-springsecurity5<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;version&gt;</span>3.0.4.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>更新完成后，maven 会自动下载合适的依赖项。</p>
<h2 id="概括">概括</h2>
<p>在完成“使用 Spring Boot 3 的 Spring Security UserDetailsS​​ervice”的所有理论和示例部分之后，最后，我们应该能够在 Spring Boot 项目中实现基于角色的 Web 安全性。当然，在本文中我们介绍了实现安全功能的第三种方法。同样，我们将在接下来的文章中讨论更多安全方法。未来若有任何变化，我们将进行相应更新。</p>
<p>如果您想了解 Spring Boot 3.0 中的新增功能，请访问我们关于“Spring Boot 3 中的新功能”的单独文章。另外，欢迎在评论区提出你的意见。</p>
<p>原文链接：<a href="https://javatechonline.com/spring-security-userdetailsservice-using-spring-boot-3/">https://javatechonline.com/spring-security-userdetailsservice-using-spring-boot-3/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Security 和 Spring Boot 入门</title>
      <link>https://blog.chensoul.com/posts/2023/08/16/spring-security/</link>
      <pubDate>Wed, 16 Aug 2023 14:40:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/16/spring-security/</guid>
      <description>Spring Security 是一个有助于保护企业应用程序安全的框架。通过与 Spring MVC、Spring Webflux 或 Spring Boot 集成，我们可以创建一个强大且高度可定制的身份验证和访问控制框架。在本文中，我们将解释核心概念并仔细研究 Spring Security 提供的默认配置及其工作原理。我们将进一步尝试自定义它们并分析它们对示例 Spring Boot 应用程序的影响。
示例代码 本文附有 GitHub 上的工作代码示例。
创建示例应用程序 让我们从头开始构建一个 Spring Boot 应用程序，看看 spring 如何配置和提供安全性。让我们从 spring starter 创建一个应用程序并添加所需的最少依赖项。
生成项目后，我们将其导入到 IDE 中并将其配置为在端口 8083 上运行。
mvnw clean verify spring-boot:run (for Windows) ./mvnw clean verify spring-boot:run (for Linux) 在应用程序启动时，我们应该看到一个登录页面。
控制台日志打印作为默认安全配置的一部分随机生成的默认密码：
使用默认用户名 user 和默认密码（来自日志），我们应该能够登录该应用程序。我们可以在 application.yml 中覆盖这些默认值：
spring: security: user: name: admin password: passw@rd 现在，我们应该能够使用用户 admin 和密码 passw@rd 登录。
依赖版本 在这里，我们使用了 Spring Boot 2.</description>
      <content:encoded><![CDATA[<p>Spring Security 是一个有助于保护企业应用程序安全的框架。通过与 Spring MVC、Spring Webflux 或 Spring Boot 集成，我们可以创建一个强大且高度可定制的身份验证和访问控制框架。在本文中，我们将解释核心概念并仔细研究 Spring Security 提供的默认配置及其工作原理。我们将进一步尝试自定义它们并分析它们对示例 Spring Boot 应用程序的影响。</p>
<h2 id="示例代码">示例代码</h2>
<p>本文附有 <a href="https://github.com/thombergs/code-examples/tree/master/spring-security/getting-started">GitHub</a> 上的工作代码示例。</p>
<h2 id="创建示例应用程序">创建示例应用程序</h2>
<p>让我们从头开始构建一个 Spring Boot 应用程序，看看 spring 如何配置和提供安全性。让我们从 spring starter 创建一个应用程序并添加所需的最少依赖项。</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/initializr_hu6933403b7320f6f893a41150b2491685_104058_1717x0_resize_q90_box.JPG" alt="settings"  /></p>
<p>生成项目后，我们将其导入到 IDE 中并将其配置为在端口 8083 上运行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvnw clean verify spring-boot:run <span class="o">(</span><span class="k">for</span> Windows<span class="o">)</span>
</span></span><span class="line"><span class="cl">./mvnw clean verify spring-boot:run <span class="o">(</span><span class="k">for</span> Linux<span class="o">)</span>
</span></span></code></pre></div><p>在应用程序启动时，我们应该看到一个登录页面。</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/login_hu6933403b7320f6f893a41150b2491685_53186_1672x0_resize_q90_box.JPG" alt="settings"  /></p>
<p>控制台日志打印作为默认安全配置的一部分随机生成的默认密码：</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/login-logs_hu24781b5fc66e29ce24179fd263c22bdb_320455_1691x0_resize_q90_box.JPG" alt="settings"  /></p>
<p>使用默认用户名 <code>user</code> 和默认密码（来自日志），我们应该能够登录该应用程序。我们可以在 <code>application.yml</code> 中覆盖这些默认值：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">security</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">user</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">passw@rd</span><span class="w">
</span></span></span></code></pre></div><p>现在，我们应该能够使用用户 <code>admin</code> 和密码 <code>passw@rd</code> 登录。</p>
<h4 id="依赖版本">依赖版本</h4>
<p>在这里，我们使用了 Spring Boot 2.7.5 版本。基于此版本，Spring Boot 内部将 Spring Security 版本解析为 5.7.4。但是，如果需要，我们可以在 <code>pom.xml</code> 中覆盖这些版本，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;spring-security.version&gt;</span>5.2.5.RELEASE<span class="nt">&lt;/spring-security.version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/properties&gt;</span>
</span></span></code></pre></div><h2 id="了解安全组件">了解安全组件</h2>
<p>要了解默认配置的工作原理，我们首先需要了解以下内容：</p>
<ul>
<li><strong>Servlet Filters 过滤器</strong></li>
<li><strong>Authentication 认证</strong></li>
<li><strong>Authorization 授权</strong></li>
</ul>
<h3 id="servlet-filters">Servlet Filters</h3>
<p>让我们仔细看看应用程序启动时的控制台日志。我们看到 <code>DefaultSecurityFilterChain</code> 在请求到达 <code>DispatcherServlet</code> 之前触发一系列过滤器。 <code>DispatcherServlet</code> 是 Web 框架中的关键组件，用于处理传入的 Web 请求并将它们分派到适当的处理程序进行处理。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with
</span></span><span class="line"><span class="cl"><span class="o">[</span>org.springframework.security.web.session.DisableEncodeUrlFilter@2fd954f,
</span></span><span class="line"><span class="cl">org.springframework.security.web.context.request.async.
</span></span><span class="line"><span class="cl">  WebAsyncManagerIntegrationFilter@5731d3a,
</span></span><span class="line"><span class="cl">org.springframework.security.web.context.SecurityContextPersistenceFilter@5626d18c,
</span></span><span class="line"><span class="cl">org.springframework.security.web.header.HeaderWriterFilter@52b3bf03,
</span></span><span class="line"><span class="cl">org.springframework.security.web.csrf.CsrfFilter@30c4e352,
</span></span><span class="line"><span class="cl">org.springframework.security.web.authentication.logout.LogoutFilter@37ad042b,
</span></span><span class="line"><span class="cl">org.springframework.security.web.authentication.
</span></span><span class="line"><span class="cl">UsernamePasswordAuthenticationFilter@1e60b459,
</span></span><span class="line"><span class="cl">org.springframework.security.web.authentication.ui.
</span></span><span class="line"><span class="cl">  DefaultLoginPageGeneratingFilter@29b40b3,
</span></span><span class="line"><span class="cl">org.springframework.security.web.authentication.ui.
</span></span><span class="line"><span class="cl">  DefaultLogoutPageGeneratingFilter@6a0f2853,
</span></span><span class="line"><span class="cl">org.springframework.security.web.authentication.www.
</span></span><span class="line"><span class="cl">  BasicAuthenticationFilter@254449bb,
</span></span><span class="line"><span class="cl">org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3dc95b8b,
</span></span><span class="line"><span class="cl">org.springframework.security.web.servletapi.
</span></span><span class="line"><span class="cl">  SecurityContextHolderAwareRequestFilter@2d55e826,
</span></span><span class="line"><span class="cl">org.springframework.security.web.authentication.
</span></span><span class="line"><span class="cl">  AnonymousAuthenticationFilter@1eff3cfb,
</span></span><span class="line"><span class="cl">org.springframework.security.web.session.SessionManagementFilter@462abec3,
</span></span><span class="line"><span class="cl">org.springframework.security.web.access.ExceptionTranslationFilter@6f8aba08,
</span></span><span class="line"><span class="cl">org.springframework.security.web.access.intercept.
</span></span><span class="line"><span class="cl">  FilterSecurityInterceptor@7ce85af2<span class="o">]</span>
</span></span></code></pre></div><p>要了解 <code>FilterChain</code> 的工作原理，让我们看一下 <a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-securityfilterchain">Spring Security 文档</a>中的流程图</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/filterChain_hu6933403b7320f6f893a41150b2491685_82682_1079x0_resize_q90_box.JPG" alt="settings"  /></p>
<p>现在，让我们看看参与过滤器链的核心组件：</p>
<ol>
<li><a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html#servlet-delegatingfilterproxy">DelegatingFilterProxy</a> Spring 提供的一个 servlet 过滤器，充当 Servlet 容器和 Spring Application Context 之间的桥梁。 <code>DelegatingFilterProxy</code> 类负责将任何实现 <code>javax.servlet.Filter</code> 的类连接到过滤器链中。</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/FilterChainProxy.html">FilterChainProxy</a> Spring 安全性在内部创建一个名为 <code>springSecurityFilterChain</code> 的 <code>FilterChainProxy</code> bean，包装在 <code>DelegatingFilterProxy</code> 中。 <code>FilterChainProxy</code> 是一个过滤器，它根据安全配置链接多个过滤器。因此， <code>DelegatingFilterProxy</code> 将请求委托给 <code>FilterChainProxy</code> ，后者确定要调用的过滤器。</li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/SecurityFilterChain.html">SecurityFilterChain</a>: <code>SecurityFilterChain</code> 中的安全过滤器是用 <code>FilterChainProxy</code> 注册的 bean。一个应用程序可以有多个 <code>SecurityFilterChain</code> 。 <code>FilterChainProxy</code> 使用 <code>HttpServletRequest</code> 上的 <code>RequestMatcher</code> 接口来确定需要调用哪个 <code>SecurityFilterChain</code> 。</li>
</ol>
<h4 id="spring-security-chain-补充说明">Spring Security Chain 补充说明</h4>
<ul>
<li>Spring Boot 应用程序中的默认后备过滤器链有一个请求匹配器 <code>/**</code> ，这意味着它将应用于所有请求。</li>
<li>默认过滤器链具有预定义的 <code>@Order</code> SecurityProperties.BASIC_AUTH_ORDER。</li>
<li>我们可以通过设置 security.basic.enabled=false 来排除这个完整的过滤器链。</li>
<li>我们可以定义多个过滤器链的顺序。例如，要在默认过滤器链之前调用自定义过滤器链，我们需要设置较低的 <code>@Order</code> 。示例 <code>@Order(SecurityProperties.BASIC_AUTH_ORDER - 10)</code> 。</li>
<li>我们可以使用 <code>FilterRegistrationBean</code> 或扩展 <code>OncePerRequestFilter</code> 在现有过滤器链中插入自定义过滤器（随时调用或针对特定 URL 模式调用）。</li>
<li>对于定义的自定义过滤器，如果未指定@Order，则它是安全链中的最后一个。 （具有默认顺序 <code>LOWEST_PRECEDENCE</code> 。）</li>
<li>我们还可以使用方法 <code>addFilterAfter()</code> 、 <code>addFilterAt()</code> 和 <code>addFilterBefore()</code> 来更好地控制我们定义的自定义过滤器的顺序。</li>
</ul>
<p>我们将在后面的部分中定义自定义过滤器和过滤器链。</p>
<p>现在我们知道 Spring Security 为我们提供了一个默认的过滤器链，它调用一组预定义且有序的过滤器，让我们尝试简要了解链中几个重要过滤器的角色。</p>
<ol>
<li><strong><a href="https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/web/csrf/CsrfFilter.html">org.springframework.security.web.csrf.CsrfFilter</a></strong> : 此过滤器默认将 CSRF 保护应用于所有 REST 端点。要详细了解 Spring Boot 和 Spring Security 中的 CSRF 功能，请参考这篇文章。</li>
<li><strong><a href="https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/web/authentication/logout/LogoutFilter.html">org.springframework.security.web.authentication.logout.LogoutFilter</a></strong> : 当用户注销应用程序时调用此过滤器。调用默认注册的 <code>LogoutHandler</code> 实例，负责使会话无效并清除 <code>SecurityContext</code> 。接下来， <code>LogoutSuccessHandler</code> 的默认实现将用户重定向到新页面 ( <code>/login?logout</code> )。</li>
<li><strong><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/UsernamePasswordAuthenticationFilter.html">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</a></strong> : 使用启动时提供的默认凭据验证 URL ( <code>/login</code> ) 的用户名和密码。</li>
<li><strong><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/ui/DefaultLoginPageGeneratingFilter.html">org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter</a></strong> : 在 <code>/login</code> 处生成默认登录页面 html</li>
<li><strong><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/ui/DefaultLogoutPageGeneratingFilter.html">org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter</a></strong> : 在 <code>/login?logout</code> 处生成默认注销页面 html</li>
<li><strong><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/www/BasicAuthenticationFilter.html">org.springframework.security.web.authentication.www.BasicAuthenticationFilter</a></strong> : 此过滤器负责处理任何具有授权、基本身份验证方案、Base64 编码的用户名密码的 HTTP 请求标头的请求。身份验证成功后， <code>Authentication</code> 对象将被放置在 <code>SecurityContextHolder</code> 中。</li>
<li><strong><a href="https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/web/authentication/AnonymousAuthenticationFilter.html">org.springframework.security.web.authentication.AnonymousAuthenticationFilter</a></strong> : 如果在 <code>SecurityContext</code> 中找不到 <code>Authentication</code> 对象，它会创建一个具有主体 <code>anonymousUser</code> 和角色。</li>
<li><strong><a href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/access/ExceptionTranslationFilter.html">org.springframework.security.web.access.ExceptionTranslationFilter</a></strong> :处理过滤器链中抛出的 <code>AccessDeniedException</code> 和 <code>AuthenticationException</code> 。对于 <code>AuthenticationException</code> ，需要 <code>AuthenticationEntryPoint</code> 实例来处理响应。对于 <code>AccessDeniedException</code> ，此过滤器将委托给 <code>AccessDeniedHandler</code> ，其默认实现为 <code>AccessDeniedHandlerImpl</code> 。</li>
<li><strong><a href="https://docs.spring.io/spring-security/site/docs/6.0.0/api/org/springframework/security/web/access/intercept/FilterSecurityInterceptor.html">org.springframework.security.web.access.intercept.FilterSecurityInterceptor</a></strong> : 此过滤器负责在请求到达控制器之前对通过过滤器链的每个请求进行授权。</li>
</ol>
<h3 id="authentication">Authentication</h3>
<p>身份验证是验证用户凭据并确保其有效性的过程。让我们了解一下 spring 框架如何验证创建的默认凭据：</p>
<p>步骤 1：当启用 FormLogin 时，即向 URL <code>/login</code> 发出请求时， <code>UsernamePasswordAuthenticationFilter</code> 被调用作为安全过滤器链的一部分。该类是基类 <code>AbstractAuthenticationProcessingFilter</code> 的具体实现。当尝试进行身份验证时，过滤器会将请求转发到 <code>AuthenticationManager</code> 。</p>
<p>步骤 2： <code>UsernamePasswordAuthenticationToken</code> 是 <code>Authentication</code> 接口的实现。此类指定身份验证机制必须通过用户名-密码进行。</p>
<p>步骤 3：获得身份验证详细信息后， <code>AuthenticationManager</code> 尝试在 <code>AuthenticationProvider</code> 的适当实现和经过完全身份验证的 <code>Authentication</code> 对象的帮助下对请求进行身份验证被返回。默认实现是 <code>DaoAuthenticationProvider</code> ，它从 <code>UserDetailsService</code> 检索用户详细信息。如果身份验证失败，则抛出 <code>AuthenticationException</code> 。</p>
<p>步骤 4： <code>UserDetailsService</code> 的 <code>loadUserByUsername(username)</code> 方法返回包含用户数据的 <code>UserDetails</code> 对象。如果没有找到具有给定用户名的用户，则抛出 <code>UsernameNotFoundException</code> 。</p>
<p>步骤 5：身份验证成功后， <code>SecurityContext</code> 将更新为当前经过身份验证的用户。</p>
<p>为了理解上面概述的步骤，让我们看一下 Spring Security 文档中定义的身份验证架构。</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/providerManager_hu6933403b7320f6f893a41150b2491685_64311_1210x0_resize_q90_box.JPG" alt="settings"  /></p>
<p><code>ProviderManager</code> 是 <code>AuthenticationManager</code> 最常见的实现。如图所示， <code>ProviderManager</code> 将请求委托给已配置的 <code>AuthenticationProvider</code> 列表，每个列表都会被查询以查看是否可以执行身份验证。如果认证失败，返回 <code>ProviderNotFoundException</code> ，这是 <code>AuthenticationException</code> 的特殊类型，说明 <code>ProviderManager</code> 不支持 <code>Authentication</code></p>
<p><code>AuthenticationEntryPoint</code> 是一个充当身份验证入口点的接口，用于确定客户端在请求资源时是否包含有效的凭据。如果没有，则使用该接口的适当实现来向客户端请求凭证。</p>
<p>现在，让我们了解 <code>Authentication</code> 对象如何绑定整个身份验证过程。 <code>Authentication</code> 接口有以下用途：</p>
<ol>
<li>向 <code>AuthenticationManager</code> 提供用户凭据。</li>
<li>代表 <code>SecurityContext</code> 中当前经过身份验证的用户。 <code>Authentication</code> 的每个实例都必须包含</li>
</ol>
<ul>
<li><strong><code>principal</code></strong> - 这是标识用户的 <code>UserDetails</code> 实例。</li>
<li><strong><code>credentials</code></strong> - 凭证</li>
<li><strong><code>authorities</code></strong> - <code>GrantedAuthority</code> <code>GrantedAuthority</code> 的实例在授权过程中发挥着重要作用。</li>
</ul>
<h4 id="关于-spring-身份验证的附加说明">关于 Spring 身份验证的附加说明</h4>
<ul>
<li>在某些情况下，我们可能需要在单独授权的情况下使用 Spring Security，因为在访问我们的应用程序之前它已经由外部系统进行了可靠的身份验证。请参阅预认证文档了解如何配置和处理此类场景。</li>
<li>Spring 允许通过多种方式来<a href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/storage.html">定制身份验证机制</a>，我们将在后面的部分中介绍其中的几种。</li>
</ul>
<h3 id="authorization-授权">Authorization 授权</h3>
<p>授权是确保访问资源的用户或系统具有有效权限的过程。</p>
<p>在 Spring security 过滤器链中， <code>FilterSecurityInterceptor</code> 触发授权检查。从过滤器的执行顺序可以看出，认证先于授权运行。该过滤器在用户成功通过身份验证后检查有效权限。如果授权失败，则会抛出 <code>AccessDeniedException</code> 。</p>
<h4 id="授予权限">授予权限</h4>
<p>如上一节所示，每个用户实例都包含一个 <code>GrantedAuthority</code> 对象列表。 GrantedAuthority 是一个具有单一方法的接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GrantedAuthority</span> <span class="kd">extends</span> <span class="n">Serializable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="nf">getAuthority</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Spring security 默认情况下调用具体的 <code>GrantedAuthority</code> 实现 <code>SimpleGrantedAuthority</code> 。 <code>SimpleGrantedAuthority</code> 允许我们将角色指定为字符串，自动将它们映射到 <code>GrantedAuthority</code> 实例中。 <code>AuthenticationManager</code> 负责将 <code>GrantedAuthority</code> 对象列表插入到 <code>Authentication</code> 对象中。然后 <code>AccessDecisionManager</code> 使用 <code>getAuthority()</code> 来决定授权是否成功。</p>
<h4 id="授予的权限与角色">授予的权限与角色</h4>
<p>Spring Security 分别使用 <code>hasAuthority()</code> 和 <code>hasRole()</code> 方法通过授予的权限和角色提供授权支持。这些方法用于基于表达式的安全性，并且是接口 <code>SecurityExpressionOperations</code> 的一部分。对于大多数情况，这两种方法可以互换使用，最显着的区别是 <code>hasRole()</code> 不需要指定 ROLE 前缀，而 <code>hasAuthority()</code> 需要显式指定完整的字符串。例如， <code>hasAuthority(&quot;ROLE_ADMIN&quot;)</code> 和 <code>hasRole(&quot;ADMIN&quot;)</code> 执行相同的任务。</p>
<h4 id="spring-授权的补充说明">Spring 授权的补充说明</h4>
<ul>
<li>Spring 允许我们使用 <code>@PreAuthorize</code> 和 <code>@PostAuthorize</code> 注释来配置方法级安全性。正如名称所示，它们允许我们在方法执行之前和之后对用户进行授权。授权检查的条件可以在 Spring 表达式语言 (SpEL) 中指定。我们将在后面的部分中查看一些示例。</li>
<li>我们可以通过公开 <code>GrantedAuthorityDefaults</code> bean 将授权规则配置为使用不同的前缀（ <code>ROLE_</code> 除外）。</li>
</ul>
<h2 id="常见漏洞保护">常见漏洞保护</h2>
<p>默认的 spring security 配置带有默认启用的针对各种攻击的保护功能。我们不会在本文中介绍这些细节。您可以参考 Spring 文档以获取详细指南。但是，要了解 CORS 和 CSRF 上的深入 Spring Security 配置，请参阅以下文章：</p>
<ul>
<li><a href="https://reflectoring.io/spring-cors/">CORS in Spring Security</a></li>
<li><a href="https://reflectoring.io/spring-csrf/">CSRF in Spring Security</a></li>
</ul>
<h2 id="实现安全配置">实现安全配置</h2>
<p>现在我们已经熟悉了 Spring Security 工作原理的细节，接下来让我们了解应用程序中的配置设置，以处理我们在前面几节中简要提到的各种场景。</p>
<h3 id="默认配置">默认配置</h3>
<p><code>org.springframework.boot.autoconfigure.security.servlet</code> 包中的 <code>SpringBootWebSecurityConfiguration</code> 类为 Spring Boot 应用程序提供了一组默认的 Spring 安全配置。该类的反编译版本如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">SpringBootWebSecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@ConditionalOnDefaultWebSecurity</span>
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SecurityFilterChainConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SecurityFilterChainConfiguration</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Order</span><span class="o">(</span><span class="mi">2147483642</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">SecurityFilterChain</span> <span class="nf">defaultSecurityFilterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="o">((</span><span class="n">AuthorizedUrl</span><span class="o">)</span> <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">anyRequest</span><span class="o">()).</span><span class="na">authenticated</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">http</span><span class="o">.</span><span class="na">formLogin</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">http</span><span class="o">.</span><span class="na">httpBasic</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="o">(</span><span class="n">SecurityFilterChain</span><span class="o">)</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Spring 使用上述配置来创建默认的 <code>SecurityFilterChainBean</code> ：</p>
<ol>
<li><code>authorizeRequests()</code> 基于 <code>RequestMatcher</code> 实现限制访问。这里 <code>authorizeRequests().anyRequest()</code> 将允许所有请求。为了更好地控制限制访问，我们可以通过 <code>antMatchers()</code> 指定 URL 模式。</li>
<li><code>authenticated()</code> 要求所有调用的端点在进入过滤器链之前都经过身份验证。</li>
<li><code>formLogin()</code> 调用默认的 <code>FormLoginConfigurer</code> 类，该类加载登录页面以通过用户名密码进行身份验证，并相应地重定向到相应的失败或成功处理程序。有关表单登录工作原理的图示，请参阅 Spring 文档中的详细说明。</li>
<li><code>httpBasic()</code> 调用设置默认值的 <code>HttpBasicConfigurer</code> 以帮助进行基本身份验证。详细理解可以参考 Spring 文档。</li>
</ol>
<h4 id="spring-security-与-securityfilterchain">Spring Security 与 <code>SecurityFilterChain</code></h4>
<ul>
<li>从 Spring Security 5.7.0-M2 开始， <code>WebSecurityConfigurerAdapter</code> 已被弃用并替换为 <code>SecurityFilterChain</code> ，从而进入基于组件的安全配置。</li>
<li>要了解差异，请参阅这篇 <a href="https://spring.io/blog/2022/02/21/spring-security-without-the-websecurityconfigureradapter">Spring 博客文章</a>。</li>
<li>本文中的所有示例都将使用使用 <code>SecurityFilterChain</code> 的较新配置。</li>
</ul>
<h3 id="常见用例">常见用例</h3>
<p>现在我们了解了 Spring Security 默认值的工作原理，让我们看一些场景并相应地自定义配置。</p>
<h4 id="1-自定义默认配置">1. 自定义默认配置</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">ENDPOINTS_WHITELIST</span> <span class="o">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;/css/**&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;/&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;/login&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;/home&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGIN_URL</span> <span class="o">=</span> <span class="s">&#34;/login&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGOUT_URL</span> <span class="o">=</span> <span class="s">&#34;/logout&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGIN_FAIL_URL</span> <span class="o">=</span> <span class="n">LOGIN_URL</span> <span class="o">+</span> <span class="s">&#34;?error&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DEFAULT_SUCCESS_URL</span> <span class="o">=</span> <span class="s">&#34;/home&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">USERNAME</span> <span class="o">=</span> <span class="s">&#34;username&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PASSWORD</span> <span class="o">=</span> <span class="s">&#34;password&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">(</span><span class="n">request</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="n">request</span><span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">ENDPOINTS_WHITELIST</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">formLogin</span><span class="o">(</span><span class="n">form</span> <span class="o">-&gt;</span> <span class="n">form</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="n">LOGIN_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">loginProcessingUrl</span><span class="o">(</span><span class="n">LOGIN_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">failureUrl</span><span class="o">(</span><span class="n">LOGIN_FAIL_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">usernameParameter</span><span class="o">(</span><span class="n">USERNAME</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">passwordParameter</span><span class="o">(</span><span class="n">PASSWORD</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="n">DEFAULT_SUCCESS_URL</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>我们可以自定义登录的各个方面，而不是使用 spring security 登录默认设置：</p>
<ul>
<li><code>loginPage</code> - 自定义默认登录页面。在这里，我们创建了一个自定义 <code>login.html</code> 及其相应的 <code>LoginController</code> 类。</li>
<li><code>loginProcessingUrl</code> - 验证用户名和密码的 URL。</li>
<li><code>failureUrl</code> - 登录失败时定向到的 URL。</li>
<li><code>defaultSuccessUrl</code> - 成功登录后定向到的 URL。在这里，我们创建了一个自定义 <code>homePage.html</code> 及其相应的 <code>HomeController</code> 类。</li>
<li><code>antMatchers()</code> - 过滤掉将成为登录过程一部分的 URL。</li>
</ul>
<p>同样，我们也可以自定义注销过程。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">(</span><span class="n">request</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="n">request</span><span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">ENDPOINTS_WHITELIST</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">formLogin</span><span class="o">(</span><span class="n">form</span> <span class="o">-&gt;</span> <span class="n">form</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="n">LOGIN_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">loginProcessingUrl</span><span class="o">(</span><span class="n">LOGIN_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">failureUrl</span><span class="o">(</span><span class="n">LOGIN_FAIL_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">usernameParameter</span><span class="o">(</span><span class="n">USERNAME</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">passwordParameter</span><span class="o">(</span><span class="n">PASSWORD</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="n">DEFAULT_SUCCESS_URL</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">logout</span><span class="o">(</span><span class="n">logout</span> <span class="o">-&gt;</span> <span class="n">logout</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">logoutUrl</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">invalidateHttpSession</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">deleteCookies</span><span class="o">(</span><span class="s">&#34;JSESSIONID&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="n">LOGIN_URL</span> <span class="o">+</span> <span class="s">&#34;?logout&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>在这里，当用户注销时，http 会话将失效，但会话 cookie 不会被清除。使用 <code>deleteCookies(&quot;JSESSIONID&quot;)</code> 有助于避免基于会话的冲突。</p>
<p>此外，我们可以通过 Spring Security 管理和配置会话。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">(</span><span class="n">request</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="n">request</span><span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">ENDPOINTS_WHITELIST</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">formLogin</span><span class="o">(</span><span class="n">form</span> <span class="o">-&gt;</span> <span class="n">form</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="n">LOGIN_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">loginProcessingUrl</span><span class="o">(</span><span class="n">LOGIN_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">failureUrl</span><span class="o">(</span><span class="n">LOGIN_FAIL_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">usernameParameter</span><span class="o">(</span><span class="n">USERNAME</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">passwordParameter</span><span class="o">(</span><span class="n">PASSWORD</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="n">DEFAULT_SUCCESS_URL</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">logout</span><span class="o">(</span><span class="n">logout</span> <span class="o">-&gt;</span> <span class="n">logout</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">logoutUrl</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">invalidateHttpSession</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">deleteCookies</span><span class="o">(</span><span class="s">&#34;JSESSIONID&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="n">LOGIN_URL</span> <span class="o">+</span> <span class="s">&#34;?logout&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">sessionManagement</span><span class="o">(</span><span class="n">session</span> <span class="o">-&gt;</span> <span class="n">session</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">ALWAYS</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">invalidSessionUrl</span><span class="o">(</span><span class="s">&#34;/invalidSession.htm&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">maximumSessions</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">maxSessionsPreventsLogin</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>它为我们提供了以下会话属性 <code>sessionCreationPolicy</code> 值：</p>
<ol>
<li><code>SessionCreationPolicy.STATELESS</code> - 不会创建或使用任何会话。</li>
<li><code>SessionCreationPolicy.ALWAYS</code> - 如果会话不存在，则始终会创建该会话。</li>
<li><code>SessionCreationPolicy.NEVER</code> - 永远不会创建会话。但如果会话存在，就会使用它。</li>
<li><code>SessionCreationPolicy.IF_REQUIRED</code> - 如果需要，将创建会话。 （默认配置）</li>
</ol>
<p>Other options include: 其他选项包括：</p>
<ul>
<li><code>invalidSessionUrl</code> - 检测到无效会话时重定向到的 URL。</li>
<li><code>maximumSessions</code> - 限制单个用户可以同时拥有的活动会话数。</li>
<li><code>maxSessionsPreventsLogin</code> - 默认值为 <code>false</code> ，表示在现有用户的会话过期时允许经过身份验证的用户访问。 <code>true</code> 表示到达 <code>SessionManagementConfigurer.maximumSessions(int)</code> 时不会对用户进行身份验证。在这种情况下，当检测到多次登录时，它将重定向到 <code>/invalidSession</code> 。</li>
</ul>
<h4 id="2-配置多个过滤器链">2. 配置多个过滤器链</h4>
<p>Spring Security 允许我们拥有多个共存的安全配置，使我们能够更好地控制应用程序。为了演示这一点，让我们为图书馆应用程序创建 REST 端点，该应用程序使用 H2 数据库根据体裁存储书籍。我们的 <code>BookController</code> 类将有一个端点定义如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/library/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;</span> <span class="nf">getBooks</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">genre</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">bookService</span><span class="o">.</span><span class="na">getBook</span><span class="o">(</span><span class="n">genre</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>为了保护此端点，让我们在 <code>SecurityConfiguration</code> 类中使用基本身份验证并配置详细信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="n">BasicAuthProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BasicAuthProperties</span> <span class="n">props</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityConfiguration</span><span class="o">(</span><span class="n">BasicAuthProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">props</span> <span class="o">=</span> <span class="n">props</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">bookFilterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">sessionManagement</span><span class="o">(</span><span class="n">session</span> <span class="o">-&gt;</span> <span class="n">session</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">antMatcher</span><span class="o">(</span><span class="s">&#34;/library/**&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">&#34;/library/**&#34;</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&#34;USER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">httpBasic</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">(</span><span class="n">exception</span> <span class="o">-&gt;</span> <span class="n">exception</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">authenticationEntryPoint</span><span class="o">(</span><span class="n">userAuthenticationErrorHandler</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">accessDeniedHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">UserForbiddenErrorHandler</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">InMemoryUserDetailsManager</span><span class="o">(</span><span class="n">props</span><span class="o">.</span><span class="na">getUserDetails</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">AuthenticationEntryPoint</span> <span class="nf">userAuthenticationErrorHandler</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserAuthenticationErrorHandler</span> <span class="n">userAuthenticationErrorHandler</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">                <span class="k">new</span> <span class="n">UserAuthenticationErrorHandler</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">userAuthenticationErrorHandler</span><span class="o">.</span><span class="na">setRealmName</span><span class="o">(</span><span class="s">&#34;Basic Authentication&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">userAuthenticationErrorHandler</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">ENDPOINTS_WHITELIST</span> <span class="o">=</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;/css/**&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;/login&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;/home&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGIN_URL</span> <span class="o">=</span> <span class="s">&#34;/login&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">LOGIN_FAIL_URL</span> <span class="o">=</span> <span class="n">LOGIN_URL</span> <span class="o">+</span> <span class="s">&#34;?error&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DEFAULT_SUCCESS_URL</span> <span class="o">=</span> <span class="s">&#34;/home&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">USERNAME</span> <span class="o">=</span> <span class="s">&#34;username&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PASSWORD</span> <span class="o">=</span> <span class="s">&#34;password&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Order</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">(</span><span class="n">request</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="n">request</span><span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">ENDPOINTS_WHITELIST</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">antMatcher</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">formLogin</span><span class="o">(</span><span class="n">form</span> <span class="o">-&gt;</span> <span class="n">form</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="n">LOGIN_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">loginProcessingUrl</span><span class="o">(</span><span class="n">LOGIN_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">failureUrl</span><span class="o">(</span><span class="n">LOGIN_FAIL_URL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">usernameParameter</span><span class="o">(</span><span class="n">USERNAME</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">passwordParameter</span><span class="o">(</span><span class="n">PASSWORD</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="n">DEFAULT_SUCCESS_URL</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">logout</span><span class="o">(</span><span class="n">logout</span> <span class="o">-&gt;</span> <span class="n">logout</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">logoutUrl</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">invalidateHttpSession</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">deleteCookies</span><span class="o">(</span><span class="s">&#34;JSESSIONID&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="n">LOGIN_URL</span> <span class="o">+</span> <span class="s">&#34;?logout&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">sessionManagement</span><span class="o">(</span><span class="n">session</span> <span class="o">-&gt;</span> <span class="n">session</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">ALWAYS</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">invalidSessionUrl</span><span class="o">(</span><span class="s">&#34;/invalidSession&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">maximumSessions</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">maxSessionsPreventsLogin</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>让我们仔细看看代码：</p>
<ol>
<li>我们有两个 SecurityFilterChain 方法 <code>bookFilterChain()</code> 和 <code>filterChain()</code> 方法以及 <code>@Order(1)</code> 和 <code>@Order(2)</code> 。它们都将按上述顺序执行。</li>
<li>由于两个过滤器链都满足不同的端点，因此 <code>application.yml</code> 中存在不同的凭据</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">auth</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">users</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">loginadmin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">loginpass</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">bookadmin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">bookpass</span><span class="w">
</span></span></span></code></pre></div><p>为了让 Spring Security 使用这些凭据，我们将 <code>UserDetailsService</code> 自定义为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">InMemoryUserDetailsManager</span><span class="o">(</span><span class="n">props</span><span class="o">.</span><span class="na">getUserDetails</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><ol>
<li>为了满足 <code>AuthenticationException</code> 和 <code>AccessDeniedException</code> ，我们定制了 <code>exceptionHandling()</code> 并配置了自定义类 <code>UserAuthenticationErrorHandler</code> 和 <code>UserForbiddenErrorHandler</code> 。</li>
</ol>
<p>使用此配置，REST 端点的邮递员响应如下所示：</p>
<p>成功的回应:</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/postman01_hu6933403b7320f6f893a41150b2491685_94086_1709x0_resize_q90_box.JPG" alt="settings"  /></p>
<p>未经授权的回应：</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/postman-unauth_hu6933403b7320f6f893a41150b2491685_91990_1705x0_resize_q90_box.JPG" alt="settings"  /></p>
<p>禁止的回应：</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/postman-forbidden_hu6933403b7320f6f893a41150b2491685_84284_1689x0_resize_q90_box.JPG" alt="settings"  /></p>
<h4 id="3-默认情况下保护的其他端点">3. 默认情况下保护的其他端点</h4>
<p>一旦为请求匹配器配置了 Spring Security，默认情况下添加的其他端点就会受到保护。例如，让我们向 <code>BookController</code> 类添加一个端点</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">		<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/library/books/all&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;</span> <span class="nf">getAllBooks</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">bookService</span><span class="o">.</span><span class="na">getAllBooks</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>为了成功调用此端点，我们需要提供基本的身份验证凭据。</p>
<p>没有通过凭据时的错误响应：</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/postman-nocreds_hu6933403b7320f6f893a41150b2491685_78352_1702x0_resize_q90_box.JPG" alt="settings"  /></p>
<p>成功的回应：</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/postman-creds_hu6933403b7320f6f893a41150b2491685_92812_1724x0_resize_q90_box.JPG" alt="settings"  /></p>
<h4 id="4-不安全的特定端点">4. 不安全的特定端点</h4>
<p>我们可以指定需要从安全配置中排除的端点列表。为此，我们首先向 <code>BookController</code> 类添加另一个端点，并添加以下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">		<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/library/info&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">LibraryInfo</span><span class="o">&gt;</span> <span class="nf">getInfo</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">bookService</span><span class="o">.</span><span class="na">getLibraryInfo</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">WebSecurityCustomizer</span> <span class="nf">webSecurityCustomizer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">web</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">web</span><span class="o">.</span><span class="na">ignoring</span><span class="o">().</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/library/info&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>现在，我们应该能够在不传递凭据的情况下从邮递员到达端点：</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/unsecure_hu6933403b7320f6f893a41150b2491685_95757_1686x0_resize_q90_box.JPG" alt="settings"  /></p>
<h4 id="5-添加自定义过滤器">5. 添加自定义过滤器</h4>
<p>Spring 通过执行链中的一系列过滤器来提供安全性。如果我们需要在请求到达控制器之前对其添加额外的检查，Spring Security 为我们提供了以下方法，帮助我们在链中所需的位置添加自定义过滤器。</p>
<ul>
<li>addFilterBefore(Filter filter, Class beforeFilter)：此方法允许我们在链中指定过滤器之前添加自定义过滤器。</li>
<li>addFilterAfter(Filter filter, Class afterFilter)：此方法允许我们在链中指定过滤器之后添加自定义过滤器。</li>
<li>addFilterAt(Filter filter, Class atFilter)：此方法允许我们以相同的优先级在链中的指定过滤器处添加自定义过滤器。添加自定义过滤器后，这两个过滤器都将在过滤器链中被调用（无特定顺序）。</li>
</ul>
<p>让我们看一下示例配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="n">BasicAuthProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BasicAuthProperties</span> <span class="n">props</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityConfiguration</span><span class="o">(</span><span class="n">BasicAuthProperties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">props</span> <span class="o">=</span> <span class="n">props</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">bookFilterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">sessionManagement</span><span class="o">(</span><span class="n">session</span> <span class="o">-&gt;</span> <span class="n">session</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">antMatcher</span><span class="o">(</span><span class="s">&#34;/library/**&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">&#34;/library/**&#34;</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&#34;USER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">httpBasic</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">(</span><span class="n">exception</span> <span class="o">-&gt;</span> <span class="n">exception</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">authenticationEntryPoint</span><span class="o">(</span><span class="n">userAuthenticationErrorHandler</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">accessDeniedHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">UserForbiddenErrorHandler</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">http</span><span class="o">.</span><span class="na">addFilterBefore</span><span class="o">(</span><span class="n">customHeaderValidatorFilter</span><span class="o">(),</span>
</span></span><span class="line"><span class="cl">                <span class="n">BasicAuthenticationFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CustomHeaderValidatorFilter</span> <span class="nf">customHeaderValidatorFilter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">CustomHeaderValidatorFilter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>为了编写自定义过滤器，我们创建一个类 <code>CustomHeaderValidatorFilter</code> ，它扩展了为此目的而创建的特殊过滤器 <code>OncePerRequestFilter</code> 。这确保我们的过滤器对于每个请求仅被调用一次。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomHeaderValidatorFilter</span> <span class="kd">extends</span> <span class="n">OncePerRequestFilter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span>
</span></span><span class="line"><span class="cl">            <span class="o">(</span><span class="n">CustomHeaderValidatorFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Custom filter called...&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">&#34;X-Application-Name&#34;</span><span class="o">)))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FORBIDDEN</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&#34;application/json&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">response</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">ObjectMapper</span><span class="o">().</span>
</span></span><span class="line"><span class="cl">                    <span class="n">writeValueAsString</span><span class="o">(</span><span class="n">CommonException</span><span class="o">.</span><span class="na">headerError</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这里，我们重写了 <code>doFilterInternal()</code> 并添加了我们的逻辑。在这种情况下，仅当请求中传递了所需的标头 <code>X-Application-Name</code> 时，请求才会在过滤器链中继续进行。此外，我们还可以验证该过滤器是否已从日志连接到我们的 <code>SecurityConfiguration</code> 类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Will secure Ant [pattern=&#39;/library/**&#39;] with
</span></span><span class="line"><span class="cl">[org.springframework.security.web.session.DisableEncodeUrlFilter@669469c9,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.context.request.async.
</span></span><span class="line"><span class="cl">   WebAsyncManagerIntegrationFilter@7f39ad3f,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.context.SecurityContextPersistenceFilter@1b901f7b,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.header.HeaderWriterFilter@64f49b3,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.authentication.logout.LogoutFilter@628aea61,
</span></span><span class="line"><span class="cl"> com.reflectoring.security.CustomHeaderValidatorFilter@3d40a3b4,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.authentication.www.
</span></span><span class="line"><span class="cl">   BasicAuthenticationFilter@8d23cd8,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1a1e38ab,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.servletapi.
</span></span><span class="line"><span class="cl">   SecurityContextHolderAwareRequestFilter@5bfdabf3,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.authentication.
</span></span><span class="line"><span class="cl">   AnonymousAuthenticationFilter@7524125c,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.session.SessionManagementFilter@3dc14f80,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.access.ExceptionTranslationFilter@58c16efd,
</span></span><span class="line"><span class="cl"> org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5ab06829]
</span></span></code></pre></div><p>这里为所有端点 <code>/library/**</code> 调用过滤器。为了进一步限制它以满足特定的端点，我们可以将 Filter 类修改为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">		<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">shouldNotFilter</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&#34;/library/books/all&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>通过此更改，对于端点 <code>/library/books/all</code> ，将不会执行 <code>doFilterInternal()</code> 方法。相同的概念适用于使用 <code>addFilterAt()</code> 和 <code>addFilterAfter()</code> 方法添加的过滤器。</p>
<h4 id="6-基于角色的授权">6. 基于角色的授权</h4>
<p>在 Spring Security 的上下文中，授权是在用户通过身份验证后发生的。在前面的部分中，我们查看了处理 <code>AccessDeniedException</code> 的示例。当用户授权失败时抛出该异常。在我们的示例中，我们在 <code>application.yml</code> 中为用户 <code>bookadmin</code> 和 <code>loginadmin</code> 定义了角色：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">auth</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">users</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">loginadmin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">loginpass</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">bookadmin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">password</span><span class="p">:</span><span class="w"> </span><span class="l">bookpass</span><span class="w">
</span></span></span></code></pre></div><p>为了确保授权，我们将 Spring Security 配置为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Order</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">(</span><span class="n">request</span> <span class="o">-&gt;</span>
</span></span><span class="line"><span class="cl">             <span class="n">request</span><span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">ENDPOINTS_WHITELIST</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* Code continued.. */</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>以及</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Order</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">bookFilterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">sessionManagement</span><span class="o">(</span><span class="n">session</span> <span class="o">-&gt;</span> <span class="n">session</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">antMatcher</span><span class="o">(</span><span class="s">&#34;/library/**&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">&#34;/library/**&#34;</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&#34;USER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* Code continued.. */</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>让我们看一下可用于授权端点的方法。</p>
<ul>
<li><strong><code>hasRole(String role)</code></strong> : 如果当前主体具有指定角色，则返回 <code>true</code> 。例如。 <code>hasRole(&quot;ADMIN&quot;)</code></li>
<li><strong><code>hasAnyRole(String... roles)</code></strong> :可以指定多个角色。如果任何角色匹配，则返回 <code>true</code> 。例如。 <code>hasAnyRole(&quot;ADMIN&quot;, &quot;USER&quot;)</code> 注意：在上述两种情况下， <code>ROLE_</code> 前缀默认添加到提供的角色字符串中。</li>
<li><strong><code>hasAuthority(String authority)</code></strong> :如果当前主体具有指定的权限，则返回 <code>true</code> 。例如。 <code>hasAuthority(ROLE_ADMIN)</code></li>
<li><strong><code>hasAnyAuthority(String... authorities)</code></strong> : 可以指定多个权限。如果任何权限匹配，则返回 <code>true</code> 。例如。 <code>hasAnyAuthority(&quot;ROLE_ADMIN&quot;, &quot;ROLE_USER&quot;)</code></li>
</ul>
<h4 id="spring-security-访问控制的附加说明">Spring Security 访问控制的附加说明</h4>
<ul>
<li>上面讨论的所有方法都使用 spEL 来支持更复杂的访问控制。这允许我们使用特定的类来实现 Web 和方法安全性来访问当前主体等值。要了解如何利用 spEL，请参阅此 Spring 文档</li>
<li>另外，如果我们不需要设置授权，我们可以使用方法 <code>permitAll()</code> 和 <code>denyAll()</code> 分别允许或拒绝所有角色和权限。</li>
</ul>
<p>让我们看一下一个示例配置，该配置在同一方法中为不同端点使用不同的角色。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">bookFilterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">&#34;/library/info&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">&#34;/library/books&#34;</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&#34;USER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">&#34;/library/books/all&#34;</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h4 id="7preauthorize-和postauthorize">7.@PreAuthorize 和@PostAuthorize</h4>
<p>Spring Security 允许我们通过 <code>@PreAuthorize</code> 和 <code>@PostAuthorize</code> 注解将安全机制扩展到方法。这些注释使用 spEL 根据传递的参数进行评估和授权。</p>
<ul>
<li><strong><code>@PreAuthorize</code></strong>: 在执行方法之前授权条件。</li>
<li><strong><code>@PostAuthorize</code></strong>: 授权方法执行后的条件。为了使这些注释起作用，我们需要将 <code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code> 添加到我们的配置类中，如下所示：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableGlobalMethodSecurity</span><span class="o">(</span><span class="n">prePostEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="n">BasicAuthProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* ... */</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>接下来我们看看如何使用这些注解。这里我们在 Controller 类中使用了 <code>@PreAuthorize</code> 。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">BookController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BookService</span> <span class="n">bookService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">BookController</span><span class="o">(</span><span class="n">BookService</span> <span class="n">bookService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">bookService</span> <span class="o">=</span> <span class="n">bookService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/library/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;#user == authentication.principal.username&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;</span> <span class="nf">getBooks</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">genre</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                                                  <span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">bookService</span><span class="o">.</span><span class="na">getBook</span><span class="o">(</span><span class="n">genre</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/library/books/all&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;hasRole(&#39;ROLE_USER&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;</span> <span class="nf">getAllBooks</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">bookService</span><span class="o">.</span><span class="na">getAllBooks</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这里，我们演示了使用 <code>@PreAuthorize</code> 注释的两种方法。</p>
<ol>
<li>登录的用户名作为请求参数传递，并使用当前主体进行验证。对于成功的匹配，邮递员会返回有效的响应。</li>
</ol>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/Preauth-success_hu6933403b7320f6f893a41150b2491685_85856_1634x0_resize_q90_box.JPG" alt="settings"  /></p>
<p>如果出现错误，我们会得到：</p>
<p>
  <img loading="lazy" src="https://reflectoring.io/images/posts/getting-started-with-spring-security/Preauth-error_hu6933403b7320f6f893a41150b2491685_94064_1728x0_resize_q90_box.JPG" alt="settings"  /></p>
<ol>
<li><code>@PreAuthorize(&quot;hasRole('ROLE_USER')&quot;)</code> : 仅当当前主体具有 USER 角色时，我们才会收到成功响应。</li>
</ol>
<p>接下来，让我们在 Repository 类中使 ​​ 用 <code>@PostAuthorize</code> 。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Repository</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BookRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="nf">findByGenre</span><span class="o">(</span><span class="n">String</span> <span class="n">genre</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PostAuthorize</span><span class="o">(</span><span class="s">&#34;returnObject.size() &gt; 0&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这里， <code>returnObject</code> 表示 <code>List&lt;Book&gt;</code> 。因此，当 <code>size()</code> 返回 0 时，我们将得到一个错误响应。</p>
<h4 id="自定义授权">自定义授权</h4>
<ul>
<li>要自定义表达式的处理方式，我们需要将 <code>MethodSecurityExpressionHandler</code> 公开为 bean。</li>
<li>Spring 方法安全性是使用 Spring AOP 构建的。有关更多示例，请参阅<a href="https://docs.spring.io/spring-security/reference/servlet/authorization/method-security.html">方法安全文档</a>。</li>
</ul>
<h4 id="8-基于数据库的认证和授权">8. 基于数据库的认证和授权</h4>
<p>在之前的所有示例中，我们都使用 <code>InMemoryUserDetailsManager</code> 配置用户、密码、角色。 Spring Security 允许我们自定义身份验证和授权过程。我们还可以在数据库中配置这些详细信息，并让 Spring Security 相应地访问它们。</p>
<p>有关工作示例，请参阅<a href="https://reflectoring.io/spring-security-password-handling/">本文</a>。它还解释了为了提高安全性而应采用的不同方式处理密码。</p>
<p>让我们概述一下使此配置正常工作所需的步骤。</p>
<p><strong>Step.1</strong> : 通过重写 <code>loadUserByUsername()</code> 自定义 <code>UserDetailsService</code> 以从数据库加载用户凭据。</p>
<p><strong>Step.2</strong> : 根据使用的编码机制创建 <code>PasswordEncoder</code> bean。</p>
<p><strong>Step.3</strong> : 由于 <code>AuthenticationProvider</code> 负责验证凭据，因此自定义并覆盖 <code>authenticate()</code> 以使用数据库凭据进行验证。</p>
<h4 id="有关密码编码器的附加信息">有关密码编码器的附加信息</h4>
<ul>
<li>在 Spring Security 5.0 之前，默认的 <code>PasswordEncoder</code> 是 <code>NoOpPasswordEncoder</code> ，它需要纯文本密码。</li>
<li>从 Spring Security 5.0 开始，我们使用 <code>DelegatingPasswordEncoder</code> 确保使用当前密码存储建议对密码进行编码。</li>
<li>有关 <code>DelegatingPasswordEncoder</code> 的更多信息，请参阅<a href="https://docs.spring.io/spring-security/reference/features/authentication/password-storage.html">此文档</a></li>
</ul>
<h2 id="使用-spring-security-进行测试">使用 Spring Security 进行测试</h2>
<p>现在我们已经了解了各种安全配置的工作原理，让我们看看它们的单元测试。 Spring security 为我们提供了以下依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;artifactId&gt;</span>spring-security-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>此外，我们还添加了 Hamcrest 依赖项。 Hamcrest 是一个框架，允许我们在断言中使用 Matcher 对象来进行更具表现力的响应匹配。请参阅 Hamcrest 文档以深入了解其功能。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;groupId&gt;</span>org.hamcrest<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;artifactId&gt;</span>hamcrest-library<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">			<span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">		<span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>首先，让我们设置 <code>ApplicationContext</code> 来测试 <code>BookController</code> 类。这里我们使用 <code>@Sql</code> 定义了一个示例测试数据</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootTest</span>
</span></span><span class="line"><span class="cl"><span class="nd">@AutoConfigureMockMvc</span>
</span></span><span class="line"><span class="cl"><span class="nd">@SqlGroup</span><span class="o">({</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Sql</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;classpath:init/first.sql&#34;</span><span class="o">,</span> <span class="n">executionPhase</span> <span class="o">=</span> <span class="n">BEFORE_TEST_METHOD</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Sql</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;classpath:init/second.sql&#34;</span><span class="o">,</span> <span class="n">executionPhase</span> <span class="o">=</span> <span class="n">BEFORE_TEST_METHOD</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookControllerTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，让我们看看可用于测试基本身份验证安全端点的各种选项。</p>
<h3 id="withmockuser">@WithMockUser</h3>
<p>顾名思义，我们将此注释与默认用户名 <code>user</code> 、密码 <code>password</code> 和角色 <code>ROLE_USER</code> 一起使用。由于我们正在模拟用户，因此用户不需要实际存在。只要我们的端点是安全的， <code>@WithMockUser</code> 就会成功。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookControllerTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">&#34;TestCase1 Check if spring security applies to the endpoint&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@WithMockUser</span><span class="o">(</span><span class="n">username</span> <span class="o">=</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">,</span> <span class="n">roles</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;USER&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">successIfSecurityApplies</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&#34;/library/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;genre&#34;</span><span class="o">,</span> <span class="s">&#34;Fiction&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;user&#34;</span><span class="o">,</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&#34;X-Application-Name&#34;</span><span class="o">,</span> <span class="s">&#34;Library&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">authenticated</span><span class="o">().</span><span class="na">withUsername</span><span class="o">(</span><span class="s">&#34;bookadmin&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">authenticated</span><span class="o">().</span><span class="na">withRoles</span><span class="o">(</span><span class="s">&#34;USER&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">&#34;$&#34;</span><span class="o">,</span> <span class="n">hasSize</span><span class="o">(</span><span class="mi">3</span><span class="o">)))</span>
</span></span><span class="line"><span class="cl">        <span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">&#34;TestCase2 Fails when wrong roles are provided&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@WithMockUser</span><span class="o">(</span><span class="n">username</span> <span class="o">=</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">,</span> <span class="n">roles</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;ADMIN&#34;</span><span class="o">})</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">failsForWrongAuthorization</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&#34;/library/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;genre&#34;</span><span class="o">,</span> <span class="s">&#34;Fiction&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;user&#34;</span><span class="o">,</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&#34;X-Application-Name&#34;</span><span class="o">,</span> <span class="s">&#34;Library&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isForbidden</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">&#34;TestCase3 Fails when we run the test with no security&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">failsIfSecurityApplies</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&#34;/library/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;genre&#34;</span><span class="o">,</span> <span class="s">&#34;Fiction&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;user&#34;</span><span class="o">,</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&#34;X-Application-Name&#34;</span><span class="o">,</span> <span class="s">&#34;Library&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isUnauthorized</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><strong><code>@WithMockUser(username = &quot;bookadmin&quot;, roles = {&quot;USER&quot;})</code></strong> :这里我们使用用户名 <code>bookadmin</code> 和角色 <code>USER</code> 运行测试。此测试仅用于验证端点是否安全。此外，我们还使用方法 <code>authenticated()</code> 来验证身份验证详细信息，并使用 hamcrest 匹配器 <code>hasSize()</code> 来验证响应对象。</li>
<li><strong><code>@WithMockUser(username = &quot;bookadmin&quot;, roles = {&quot;ADMIN&quot;})</code></strong> : 在这里，我们收到 Forbidden 响应，因为角色不匹配。尽管用户被嘲笑，但角色需要匹配才能获得成功响应。</li>
<li>当没有指定用户细节时，端点没有得到保护，因此我们收到了未授权的响应。</li>
</ul>
<h3 id="withuserdetails">@WithUserDetails</h3>
<p>我们还可以使用在 <code>SecurityConfiguration</code> 类中创建的 <code>UserDetailsService</code> bean，而不是模拟用户。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookControllerTest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">&#34;TestCase4 Run the test with configured UserDetailsService&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@WithUserDetails</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">userDetailsServiceBeanName</span> <span class="o">=</span> <span class="s">&#34;userDetailsService&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">testBookWithConfiguredUserDetails</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&#34;/library/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;genre&#34;</span><span class="o">,</span> <span class="s">&#34;Fantasy&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;user&#34;</span><span class="o">,</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&#34;X-Application-Name&#34;</span><span class="o">,</span> <span class="s">&#34;Library&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">&#34;$&#34;</span><span class="o">,</span> <span class="n">hasSize</span><span class="o">(</span><span class="mi">1</span><span class="o">)))</span>
</span></span><span class="line"><span class="cl">        <span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">&#34;TestCase5 Fails when execution of CustomHeaderValidatorFilter &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;does not meet the criteria&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@WithUserDetails</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">userDetailsServiceBeanName</span> <span class="o">=</span> <span class="s">&#34;userDetailsService&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">failsIfMandatoryHeaderIsMissing</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&#34;/library/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;genre&#34;</span><span class="o">,</span> <span class="s">&#34;Fantasy&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;user&#34;</span><span class="o">,</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isForbidden</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">&#34;TestCase6 Fails when preauthorization &#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;of current principal fails&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@WithUserDetails</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">userDetailsServiceBeanName</span> <span class="o">=</span> <span class="s">&#34;userDetailsService&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">failsIfPreAuthorizeConditionFails</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&#34;/library/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;genre&#34;</span><span class="o">,</span> <span class="s">&#34;Fantasy&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;user&#34;</span><span class="o">,</span> <span class="s">&#34;bookuser&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&#34;X-Application-Name&#34;</span><span class="o">,</span> <span class="s">&#34;Library&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isForbidden</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">        <span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Test</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">&#34;TestCase7 Fails when wrong basic auth credentials are applied&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">testBookWithWrongCredentialsUserDetails</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&#34;/library/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;genre&#34;</span><span class="o">,</span> <span class="s">&#34;Fantasy&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&#34;user&#34;</span><span class="o">,</span> <span class="s">&#34;bookadmin&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&#34;X-Application-Name&#34;</span><span class="o">,</span> <span class="s">&#34;Library&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">httpBasic</span><span class="o">(</span><span class="s">&#34;bookadmin&#34;</span><span class="o">,</span> <span class="s">&#34;password&#34;</span><span class="o">)))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">print</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isUnauthorized</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>通过此配置，端点将使用 <code>userDetailsService</code> bean 进行身份验证。我们可以使用 <code>httpBasic()</code> 来确保拒绝错误的凭据。此外，上述测试验证了预授权和自定义过滤器检查。</p>
<h2 id="结论">结论</h2>
<p>在本文中，我们研究了适用于 Spring Security 的基本概念。此外，我们还解释了 spring 提供的默认配置以及如何覆盖它们。此外，我们还研究了一些常见的用例，并通过单元测试对其进行了验证。正如我们所看到的，Spring 提供了很大的灵活性，允许我们为复杂的应用程序定制安全性。我们可以扩展 <a href="https://github.com/thombergs/code-examples/tree/master/spring-security/getting-started">GitHub</a> 上应用程序中应用的示例配置以满足我们的需求。</p>
<p>原文链接：<a href="https://reflectoring.io/spring-security/">https://reflectoring.io/spring-security/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Security - OAuth2</title>
      <link>https://blog.chensoul.com/posts/2023/08/16/spring-security-with-oauth2/</link>
      <pubDate>Wed, 16 Aug 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/16/spring-security-with-oauth2/</guid>
      <description>OAuth 2.0 基础知识 OAuth 2.0 由 IETF OAuth 工作组开发并于 2012 年 10 月发布。它作为一种开放授权协议，使第三方应用程序能够代表资源所有者对 HTTP 服务进行有限访问。它可以在不泄露用户身份或长期凭证的情况下做到这一点。第三方应用程序本身也可以代表其使用它。
OAuth 的工作原理包括将用户身份验证委托给托管用户帐户的服务，并授权第三方应用程序访问用户的帐户。
让我们考虑一个例子。假设我们要登录网站“clientsite.com”。我们可以通过 Facebook、Github、Google 或 Microsoft 登录。我们选择上面给出的选项中的任何选项，然后我们将被重定向到相应的网站进行登录。如果登录成功，系统会询问我们是否要授予 clientsite.com 访问其请求的特定数据的权限。
我们选择所需的选项，然后使用授权代码或错误代码重定向到 clientsite.com，登录是否成功取决于我们在第三方资源中的操作。这就是 OAuth 2 的基本工作原理。
OAuth 系统涉及五个关键角色。让我们把它们列出来 -
User / Resource Owner − 用户/资源所有者- 最终用户，负责身份验证并同意与客户端共享资源。 User-Agent − 用户代理- 用户使用的浏览器。 Client − 客户端 - 请求访问令牌的应用程序。 Authorization Server − 授权服务器- 用于验证用户/客户端的服务器。它颁发访问令牌并在其整个生命周期内对其进行跟踪。 Resource Server − 资源服务器- 提供对所请求资源的访问的 API。它验证访问令牌并提供授权。 入门 我们将使用 Spring Security 和 OAuth 2.0 开发一个 Spring Boot 应用程序来说明上述内容。我们现在将开发一个带有内存数据库的基本应用程序来存储用户凭据。该应用程序将使我们轻松了解 OAuth 2.</description>
      <content:encoded><![CDATA[<h2 id="oauth-20-基础知识">OAuth 2.0 基础知识</h2>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/oauth_2_fundamentals.jpg" alt="OAuth 2.0 Fundamentals"  /></p>
<p>OAuth 2.0 由 IETF OAuth 工作组开发并于 2012 年 10 月发布。它作为一种开放授权协议，使第三方应用程序能够代表资源所有者对 HTTP 服务进行有限访问。它可以在不泄露用户身份或长期凭证的情况下做到这一点。第三方应用程序本身也可以代表其使用它。</p>
<p>OAuth 的工作原理包括将用户身份验证委托给托管用户帐户的服务，并授权第三方应用程序访问用户的帐户。</p>
<p>让我们考虑一个例子。假设我们要登录网站“clientsite.com”。我们可以通过 Facebook、Github、Google 或 Microsoft 登录。我们选择上面给出的选项中的任何选项，然后我们将被重定向到相应的网站进行登录。如果登录成功，系统会询问我们是否要授予 clientsite.com 访问其请求的特定数据的权限。</p>
<p>我们选择所需的选项，然后使用授权代码或错误代码重定向到 clientsite.com，登录是否成功取决于我们在第三方资源中的操作。这就是 OAuth 2 的基本工作原理。</p>
<p>OAuth 系统涉及五个关键角色。让我们把它们列出来 -</p>
<ul>
<li><strong>User / Resource Owner</strong> − 用户/资源所有者- 最终用户，负责身份验证并同意与客户端共享资源。</li>
<li><strong>User-Agent</strong> − 用户代理- 用户使用的浏览器。</li>
<li><strong>Client</strong> − 客户端 - 请求访问令牌的应用程序。</li>
<li><strong>Authorization Server</strong> − 授权服务器- 用于验证用户/客户端的服务器。它颁发访问令牌并在其整个生命周期内对其进行跟踪。</li>
<li><strong>Resource Server</strong> − 资源服务器- 提供对所请求资源的访问的 API。它验证访问令牌并提供授权。</li>
</ul>
<h3 id="入门">入门</h3>
<p>我们将使用 Spring Security 和 OAuth 2.0 开发一个 Spring Boot 应用程序来说明上述内容。我们现在将开发一个带有内存数据库的基本应用程序来存储用户凭据。该应用程序将使我们轻松了解 OAuth 2.0 与 Spring Security 的工作原理。</p>
<p>让我们使用 Spring 初始化程序在 Java 8 中创建一个 Maven 项目。让我们从 start.spring.io 开始。我们生成一个具有以下依赖项的应用程序 -</p>
<ul>
<li>Spring Web</li>
<li>Spring Security</li>
<li>Cloud OAuth2</li>
<li>Spring Boot Devtools</li>
</ul>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/start_spring.jpg" alt="Start Spring"  />
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/project_metadata.jpg" alt="Project Metadata"  /></p>
<p>通过上面的配置，我们点击 Generate 按钮生成一个项目。该项目将以 zip 文件形式下载。我们将 zip 解压到一个文件夹中。然后我们可以在我们选择的 IDE 中打开该项目。我在这里使用 Spring Tools Suite，因为它针对 Spring 应用程序进行了优化。我们也可以根据需要使用 Eclipse 或 IntelliJ Idea。</p>
<p>因此，我们在 STS 中打开项目，让依赖项被下载。然后我们可以在包资源管理器窗口中看到项目结构。它应该类似于下面的屏幕截图。</p>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/project_in_sts.jpg" alt="Project in STS"  /></p>
<p>如果我们打开 pom.xml 文件，我们可以查看与项目相关的依赖项和其他详细信息。它应该看起来像这样。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>
</span></span><span class="line"><span class="cl">   <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">   <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0
</span></span></span><span class="line"><span class="cl"><span class="s">   https://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;parent&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2.3.1.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/parent&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>com.tutorial<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>spring.security.oauth2<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;name&gt;</span>spring.security.oauth2<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;description&gt;</span>Demo project for Spring Boot<span class="nt">&lt;/description&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;properties&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;spring-cloud.version&gt;</span>Hoxton.SR6<span class="nt">&lt;/spring-cloud.version&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;groupId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-oauth2<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;groupId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span> <span class="nt">&lt;exclusions&gt;</span>    <span class="nt">&lt;exclusion&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.junit.vintage<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>junit-vintage-engine<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/exclusion&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;/exclusions&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-security-test<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependencyManagement&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;version&gt;</span>${spring-cloud.version}<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependencyManagement&gt;&lt;build&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;plugins&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/plugin&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/plugins&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>现在，在我们应用程序的基础包（即 com.tutorial.spring.security.oauth2）中，添加一个名为 config 的新包，我们将在其中添加配置类。</p>
<p>让我们创建第一个配置类 UserConfig，它扩展了 Spring Security 的 WebSecurityConfigurerAdapter 类来管理客户端应用程序的用户。我们给这个类加上@Configuration 注解，告诉 Spring 它是一个配置类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.oauth2.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.NoOpPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.InMemoryUserDetailsManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.UserDetailsManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">UserDetailsManager</span> <span class="n">userDetailsManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InMemoryUserDetailsManager</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="n">UserDetails</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">withUsername</span><span class="o">(</span><span class="s">&#34;john&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="s">&#34;12345&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">build</span><span class="o">();</span> <span class="n">userDetailsManager</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> <span class="k">return</span> <span class="n">userDetailsManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">NoOpPasswordEncoder</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">AuthenticationManager</span> <span class="nf">authenticationManagerBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">authenticationManagerBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后，我们添加 UserDetailsS​​ervice 的 bean 来检索用户详细信息以进行身份 ​​ 验证和授权。为了将其放入 Spring 上下文中，我们用 @Bean 对其进行注释。为了使本教程简单易懂，我们使用 InMemoryUserDetailsManager 实例。对于实际应用程序，我们可以使用其他实现，例如 JdbcUserDetailsManager 来连接到数据库等。为了能够在此示例中轻松创建用户，我们使用 UserDetailsManager 接口，该接口扩展了 UserDetailsS​​ervice 并具有 createUser()、updateUser() 等方法。然后，我们使用构建器类创建一个用户。我们现在给他一个用户名、密码和“读取”权限。然后，使用 createUser() 方法添加新创建的用户并返回 UserDetailsManager 实例，从而将其放入 Spring 上下文中。</p>
<p>为了能够使用我们定义的 UserDetailsS​​ervice，有必要在 Spring 上下文中提供一个 PasswordEncoder bean。再次强调，为了简单起见，我们现在使用 NoOpPasswordEncoder。 NoOpPasswordEncoder 不应该用于实际生产应用程序，因为它不安全。 NoOpPasswordEncoder 不会对密码进行编码，仅适用于开发或测试场景或概念证明。</p>
<p>我们应该始终使用 Spring Security 提供的其他高度安全的选项，其中最流行的是 BCryptPasswordEncoder，我们将在后面的系列教程中使用它。为了将其放入 Spring 上下文中，我们使用 @Bean 注释该方法。</p>
<p>然后，我们重写 WebSecurityConfigurerAdapter 的 AuthenticationManager bean 方法，该方法返回 authenticationManagerBean 以将身份验证管理器放入 Spring 上下文中。</p>
<p>现在，为了添加客户端配置，我们添加一个名为 AuthorizationServerConfig 的新配置类，它扩展了 Spring Security 的 AuthorizationServerConfigurerAdapter 类。 AuthorizationServerConfigurerAdapter 类用于使用 spring security oauth2 模块配置授权服务器。我们也用@Configuration 注释这个类。要将授权服务器功能添加到此类中，我们需要添加 @EnableAuthorizationServer 注释，以便应用程序可以充当授权服务器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.oauth2.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span> <span class="nd">@EnableAuthorizationServer</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationServerConfig</span> <span class="kd">extends</span> <span class="n">AuthorizationServerConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">ClientDetailsServiceConfigurer</span> <span class="n">clients</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">clients</span><span class="o">.</span><span class="na">inMemory</span><span class="o">()</span> <span class="o">.</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;oauthclient1&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;oauthsecret1&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">)</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerEndpointsConfigurer</span> <span class="n">endpoints</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">endpoints</span><span class="o">.</span><span class="na">authenticationManager</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>为了检查 oauth 令牌，Spring Security oauth 公开两个端点 - /oauth/check_token 和 /oauth/token_key。默认情况下，这些端点在 denyAll() 后面受到保护。 tokenKeyAccess() 和 checkTokenAccess() 方法打开这些端点以供使用。</p>
<p>我们将在 UserConfig 类中配置的 AuthenticationManager bean 自动装配为此处的依赖项，稍后我们将使用它。</p>
<p>然后，我们重写 AuthorizationServerConfigurerAdapter 的两个 configure() 方法，以提供客户端详细信息服务的内存中实现。第一种方法使用 ClientDetailsS​​erviceConfigurer 作为参数，顾名思义，允许我们为授权服务器配置客户端。这些客户端代表能够使用该授权服务器功能的应用程序。由于这是学习 OAuth2 实现的基本应用程序，因此我们现在将保持简单并使用具有以下属性的内存中实现 -</p>
<ul>
<li><strong>clientId</strong> − 客户端的 ID。必需的。</li>
<li><strong>secret</strong> − 客户端密码，受信任的客户端所需</li>
<li><strong>scope</strong> − 范围 - 客户端的限制范围，换句话说，客户端权限。如果留空或未定义，则客户端不受任何范围的限制。</li>
<li><strong>authorizedGrantTypes</strong> − 客户端被授权使用的授权类型。 grant type 表示客户端从授权服务器获取 token 的方式。我们将使用“密码”授予类型，因为它是最简单的。稍后，我们将针对另一个用例使用另一种授权类型。</li>
</ul>
<p>在“密码”授权授予类型中，用户需要向我们的客户端应用程序提供他/她的用户名、密码和范围，然后客户端应用程序使用这些凭据以及我们想要从中获取令牌的授权服务器的凭据。</p>
<p>我们重写的另一个 configure()方法使用 AuthorizationServerEndpointsConfigurer 作为参数，用于将 AuthenticationManager 附加到授权服务器配置。</p>
<p>通过这些基本配置，我们的授权服务器就可以使用了。让我们继续启动并使用它。我们将使用 Postman (h ttps://www.postman.com/downloads/) 来提出我们的请求。</p>
<p>使用 STS 时，我们可以启动应用程序并开始在控制台中查看日志。当应用程序启动时，我们可以在控制台中找到应用程序公开的 oauth2 端点。在这些端点中，我们现在将使用以下令牌 -</p>
<p><strong>/oauth/token – 用于获取令牌。</strong></p>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/obtaining_the_token.jpg" alt="Obtaining the Token"  /></p>
<p>如果我们检查这里的邮递员快照，我们可以注意到一些事情。让我们在下面列出它们。</p>
<ul>
<li>URL - 我们的 Spring Boot 应用程序在本地计算机的端口 8080 上运行，因此请求指向 http://localhost:8080。接下来的部分是 /oauth/token，我们知道它是 OAuth 公开的用于生成令牌的端点。</li>
<li>查询参数 - 由于这是“密码”授权授予类型，因此用户需要向我们的客户端应用程序提供他/她的用户名、密码和范围，然后客户端应用程序使用这些凭据及其凭据发送给我们想要令牌的授权服务器从。</li>
<li>客户端授权- Oauth 系统要求客户端获得授权才能提供令牌。因此，在授权标头下，我们提供客户端身份验证信息，即我们在应用程序中配置的用户名和密码。</li>
</ul>
<p>让我们仔细看看查询参数和授权标头 -</p>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/authorization_header.jpg" alt="Authorization Header"  /></p>
<p>查询参数</p>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/client_credentials.jpg" alt="Client Credentials"  /></p>
<p>客户凭证</p>
<p>如果一切正确，我们将能够在响应中看到生成的令牌以及 200 ok 状态。</p>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/response.jpg" alt="Response"  /></p>
<p>响应</p>
<p>我们可以通过输入错误的凭据或不输入凭据来测试我们的服务器，我们将收到一个错误，表明请求未经授权或凭据错误。</p>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/oauth_authorization_server.jpg" alt="OAuth Authorization Server"  /></p>
<p>这是我们的基本 oauth 授权服务器，它使用密码授予类型来生成并提供密码。</p>
<p>接下来，让我们实现一个更安全、更常见的 oauth2 身份验证应用，即使用授权码授予类型。为此，我们将更新当前的应用程序。</p>
<p>授权授予类型与密码授予类型不同，因为用户不必与客户端应用程序共享其凭据。他仅与授权服务器共享它们，作为回报，授权代码被发送到客户端，用于对客户端进行身份验证。它比密码授予类型更安全，因为用户凭据不与客户端应用程序共享，因此用户的信息保持安全。</p>
<p>除非得到用户的批准，客户端应用程序无法访问任何重要的用户信息。</p>
<p>通过几个简单的步骤，我们可以在应用程序中设置一个具有授权授予类型的基本 oauth 服务器。让我们看看如何。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.oauth2.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableAuthorizationServer</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationServerConfig</span> <span class="kd">extends</span> <span class="n">AuthorizationServerConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">ClientDetailsServiceConfigurer</span> <span class="n">clients</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">clients</span><span class="o">.</span><span class="na">inMemory</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;oauthclient1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;oauthsecret1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">and</span><span class="o">()</span> <span class="o">.</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;oauthclient2&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;oauthsecret2&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;authorization_code&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">redirectUris</span><span class="o">(</span><span class="s">&#34;http://locahost:9090&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerEndpointsConfigurer</span> <span class="n">endpoints</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">endpoints</span><span class="o">.</span><span class="na">authenticationManager</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>让我们为此操作添加第二个客户端 oauthclient2，并使用新的密钥和读取范围。在这里，我们已将此客户端的授权类型更改为授权代码。我们还添加了重定向 URI，以便授权服务器可以回调客户端。因此，基本上重定向 URI 就是客户端的 URI。</p>
<p>现在，我们必须在用户和授权服务器之间建立连接。我们必须为授权服务器设置一个接口，用户可以在其中提供凭据。我们使用 Spring Security 的 formLogin() 实现来实现该功能，同时保持简单。我们还确保所有请求都经过身份验证。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.oauth2.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.User</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.NoOpPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.InMemoryUserDetailsManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.UserDetailsManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&#34;deprecation&#34;</span><span class="o">)</span> <span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">UserDetailsManager</span> <span class="n">userDetailsManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InMemoryUserDetailsManager</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">         <span class="n">UserDetails</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">withUsername</span><span class="o">(</span><span class="s">&#34;john&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="s">&#34;12345&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="n">userDetailsManager</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> <span class="k">return</span> <span class="n">userDetailsManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span> <span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">NoOpPasswordEncoder</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">AuthenticationManager</span> <span class="nf">authenticationManagerBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">authenticationManagerBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">http</span><span class="o">.</span><span class="na">formLogin</span><span class="o">();</span> <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这就完成了我们对授权授予类型的设置。现在测试我们的设置并启动我们的应用程序。我们在 http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=oauthclient2&amp;scope=read 启动浏览器。我们将重定向到 Spring Security 的默认表单登录页面。</p>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/oauth_authorization_server_signin.jpg" alt="OAuth Authorization Server Signin"  /></p>
<p>这里，响应类型代码意味着授权服务器将返回一个访问代码，客户端将使用该访问代码进行登录。当我们使用用户凭据时，我们将被询问是否要授予客户端请求的权限，在类似的屏幕如下所示。</p>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/oauth_approval.jpg" alt="OAuth Approval"  /></p>
<p>如果我们批准并单击“授权”，我们将看到我们被重定向到给定的重定向 URL 以及访问代码。在我们的例子中，我们被重定向到 http://locahost:9090/?code=7Hibnw，正如我们在应用程序中指定的那样。我们现在可以使用该代码作为 Postman 中的客户端来登录授权服务器。</p>
<p>
  <img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/postman_authorization.jpg" alt="Postman Authorization"  /></p>
<p>正如我们在这里所看到的，我们在 URL 中使用了从授权服务器收到的代码，并且 grant_type 作为授权代码，范围作为读取。我们充当客户端并提供应用程序中配置的客户端凭据。当我们发出这个请求时，我们会得到我们可以进一步使用的 access_token。</p>
<p>我们已经了解了如何使用 OAuth 2.0 配置 Spring Security。该应用程序非常简单且易于理解，可以帮助我们相当轻松地理解该过程。我们使用了两种授权授予类型，并了解了如何使用它们来获取客户端应用程序的访问令牌。</p>
<p>原文链接：<a href="https://www.tutorialspoint.com/spring_security/spring_security_with_oauth2.htm">https://www.tutorialspoint.com/spring_security/spring_security_with_oauth2.htm</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Spring Security和OAuth2发展过程</title>
      <link>https://blog.chensoul.com/posts/2023/08/15/spring-security-oauth2-history/</link>
      <pubDate>Tue, 15 Aug 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/15/spring-security-oauth2-history/</guid>
      <description>Spring Security 的发展过程 Spring Security 是一个功能强大且广泛使用的安全框架，为企业级应用程序提供了全面的安全性。Spring Security 最初是 Acegi Security 项目的一部分，于 2004 年发布，现在已经成为 Spring 生态系统的核心组件。 Spring Security 的发展过程可以分为三个阶段：
第一阶段：Spring Security 起源于一个名为 Acegi Security 的开源项目，初期重点实现了 Spring 应用的身份认证和授权服务功能。2003 年，Acegi Security 作为一个孵化项目被捐献给 Spring 社区。2004 年，正式作为 Spring 框架的核心组件之一 Absorbed 进 Spring。并更名为 Spring Security。Spring Security 1.0 版本 Spring Security 1.0 版本发布于 2004 年。它提供了最基本的安全功能，包括身份验证和授权。身份验证是验证用户是否是他们所声称的人的过程。授权是确定用户是否有权访问特定资源的过程。 Spring Security 1.0 版本使用了以下技术来实现身份验证和授权：
表单身份验证：表单身份验证是通过用户提交表单来验证用户身份的过程。 基于角色的访问控制 (RBAC)：RBAC 是一种授权模型，它将用户分配到角色，然后这些角色被授予对特定资源的访问权限。 第二阶段：Spring Security 2.0 版本 Spring Security 2.0 版本发布于 2006 年。它提供了更多的安全功能，包括加密和会话管理。加密是将数据转换成无法被他人理解的形式的过程。会话管理是跟踪用户会话的状态的过程。 Spring Security 2.0 版本使用了以下技术来实现加密和会话管理：</description>
      <content:encoded><![CDATA[<h2 id="spring-security-的发展过程">Spring Security 的发展过程</h2>
<p>Spring Security 是一个功能强大且广泛使用的安全框架，为企业级应用程序提供了全面的安全性。Spring Security 最初是 Acegi Security 项目的一部分，于 2004 年发布，现在已经成为 Spring 生态系统的核心组件。 Spring Security 的发展过程可以分为三个阶段：</p>
<p>第一阶段：Spring Security 起源于一个名为 Acegi Security 的开源项目，初期重点实现了 Spring 应用的身份认证和授权服务功能。2003 年，Acegi Security 作为一个孵化项目被捐献给 Spring 社区。2004 年，正式作为 Spring 框架的核心组件之一 Absorbed 进 Spring。并更名为 Spring Security。Spring Security 1.0 版本 Spring Security 1.0 版本发布于 2004 年。它提供了最基本的安全功能，包括身份验证和授权。身份验证是验证用户是否是他们所声称的人的过程。授权是确定用户是否有权访问特定资源的过程。 Spring Security 1.0 版本使用了以下技术来实现身份验证和授权：</p>
<ul>
<li>表单身份验证：表单身份验证是通过用户提交表单来验证用户身份的过程。</li>
<li>基于角色的访问控制 (RBAC)：RBAC 是一种授权模型，它将用户分配到角色，然后这些角色被授予对特定资源的访问权限。</li>
</ul>
<p>第二阶段：Spring Security 2.0 版本 Spring Security 2.0 版本发布于 2006 年。它提供了更多的安全功能，包括加密和会话管理。加密是将数据转换成无法被他人理解的形式的过程。会话管理是跟踪用户会话的状态的过程。 Spring Security 2.0 版本使用了以下技术来实现加密和会话管理：</p>
<ul>
<li>安全套接字层 (SSL)：SSL 是一种加密协议，它可以保护数据在传输过程中不被窃听。</li>
<li>会话管理：Spring Security 提供了自己的会话管理实现，它可以跟踪用户会话的状态。</li>
</ul>
<p>第三阶段：Spring Security 3.0 版本 Spring Security 3.0 版本发布于 2008 年。它是一个重大的版本更新，它提供了许多新的安全功能，包括 OAuth、SAML 和 OpenID。 OAuth 是一种授权框架，它允许第三方应用程序访问用户的资源。SAML 是一种单点登录 (SSO) 协议，它允许用户在一个地方登录，然后访问多个网站。OpenID 是一种开放的身份验证协议，它允许用户使用他们选择的身份提供商来验证他们的身份。 Spring Security 3.0 版本使用了以下技术来实现 OAuth、SAML 和 OpenID：</p>
<ul>
<li>
<p>OAuth：Spring Security 提供了自己的 OAuth 实现，它可以让你轻松地在你的应用程序中使用 OAuth。</p>
</li>
<li>
<p>SAML：Spring Security 提供了自己的 SAML 实现，它可以让你轻松地在你的应用程序中使用 SAML。</p>
</li>
<li>
<p>OpenID：Spring Security 提供了自己的 OpenID 实现，它可以让你轻松地在你的应用程序中使用 OpenID。</p>
</li>
</ul>
<p>以下是 Spring Security 的详细的发展过程和版本变化：</p>
<ol>
<li>
<p>Acegi Security：Acegi Security 是 Spring Security 的前身，最初由 Ben Alex 创建并于 2004 年发布。Acegi Security 提供了一组基于 Spring 的安全性功能，用于保护 Web 应用程序、Web 服务和基于 Spring 的应用程序。</p>
</li>
<li>
<p>Spring Security 2：Spring Security 2 是 Acegi Security 的继任者，于 2006 年发布。Spring Security 2 提供了一些新的功能和改进，例如对 OpenID、LDAP 和 CAS 的支持，以及更好的集成和配置选项。</p>
</li>
<li>
<p>Spring Security 3：Spring Security 3 于 2009 年发布，是 Spring Security 的一个重大更新。Spring Security 3 提供了更多的安全功能和改进，例如对 RESTful Web 服务的支持、基于注解的安全性、更好的 CSRF 防护、更好的密码存储和认证管理等。</p>
</li>
<li>
<p>Spring Security 4：Spring Security 4 于 2015 年发布，带来了一些新的功能和改进，例如对 OAuth2、JWT 和 Spring Boot 的支持、更好的 SSO 和多因素认证等。</p>
</li>
<li>
<p>Spring Security 5：Spring Security 5 于 2017 年发布，是一个重大的更新，带来了一些新的功能和改进，例如对 WebFlux 和 Reactive Spring 的支持、更好的 OAuth2 和 OpenID Connect 的支持、更好的密码编码和认证管理等。</p>
</li>
<li>
<p>Spring Security 5.1：Spring Security 5.1 发布于 2018 年，主要提供了对 Spring Boot 2.1 的支持和一些新的功能，如 Kotlin DSL、OAuth2 支持的私有证书、JWT 生成器等。</p>
</li>
<li>
<p>Spring Security 5.2：Spring Security 5.2 发布于 2019 年，带来了许多改进和新特性，包括对 Spring Cloud Gateway 和 Spring MVC 的 WebFlux 支持、OAuth2 和 OpenID Connect 的改进、更好的密码管理和认证、更好的跨域资源共享（CORS）支持等。</p>
</li>
<li>
<p>Spring Security 5.3：Spring Security 5.3 发布于 2020 年，主要提供了更好的 WebFlux 和 RSocket 支持、更好的 OAuth2 支持、更好的测试和性能、更好的 Kotlin 支持、更好的 JUnit 5 支持等。</p>
</li>
<li>
<p>Spring Security 5.4：Spring Security 5.4 发布于 2021 年，带来了一些新的功能和改进，例如对 Spring Boot 2.4 的支持、更好的 JWT 和 OAuth2 支持、更好的密码编码、更好的 WebFlux 和 RSocket 支持、更好的测试和性能等。</p>
</li>
<li>
<p>Spring Security 5.5：是当前最新的版本，于 2022 年发布。Spring Security 5.5 带来了一些新的功能和改进，包括对 Spring Framework 6 和 Java 17 的支持、更好的密码编码和认证管理、更好的 OAuth2 和 OpenID Connect 支持、更好的 WebFlux 和 RSocket 支持、更好的测试和性能等。</p>
</li>
<li>
<p>Spring Security 5.7：由于<a href="https://javatechonline.com/spring-security-without-websecurityconfigureradapter/">根据 Spring 官网发布的公告</a>，WebSecurityConfigurerAdapter 已从 Spring Security 5.7.0-M2 中弃用。</p>
</li>
<li>
<p>Spring Security 6.0：2022 年 11 月发布，WebSecurityConfigurerAdapter 已从 Spring Security API 中完全删除。它还影响了 2022 年 11 月新发布的 <a href="https://javatechonline.com/new-features-in-spring-boot-3-and-spring-6/">Spring Boot 3.0</a>。</p>
<p>除了不断改进和增强现有功能之外，Spring Security 还增加了对新的安全威胁的防御和支持，例如 CSRF、XSS、CSP 等。此外，Spring Security 还提供了许多有用的扩展和插件，例如 Spring Security OAuth、Spring Security SAML、Spring Security Kerberos 等，以满足不同的安全需求。</p>
</li>
</ol>
<h2 id="spring-security-oauth2-发展">Spring Security OAuth2 发展</h2>
<p><a href="https://github.com/spring-attic/spring-security-oauth">Spring Security OAuth2</a> 是一个用于构建安全的 OAuth2-based 网络应用的框架，它是 Spring Security 的一部分。下面是 Spring Security OAuth2 的发展过程：</p>
<h3 id="1-spring-security-oauth2-v1x--v20">1. Spring Security OAuth2 V1.x – V2.0</h3>
<p>最初的几个版本是为了构建一个安全的 OAuth2-based 网络应用。核心的功能包括：</p>
<ul>
<li>支持 OAuth2 协议的四种授权方式：授权码（authorization code）、隐式授权（implicit）、密码授权（resource owner password credentials）和客户端凭据（client credentials）</li>
<li>提供了一个简单易用的 API 用于构建 OAuth2 服务器和客户端</li>
<li>支持 JWT（JSON Web Tokens）</li>
<li>提供了详细的文档和示例代码</li>
</ul>
<h3 id="2-spring-security-oauth2-v21">2. Spring Security OAuth2 V2.1</h3>
<p>在 2.1 版本中，Spring Security OAuth2 进行了一系列的改进和扩展，包括：</p>
<ul>
<li>支持 OpenID Connect 1.0</li>
<li>支持 Token Introspection Endpoint</li>
<li>更好的支持 JWT，包括 JWS（JSON Web Signatures）和 JWE（JSON Web Encryption）</li>
</ul>
<h3 id="3-spring-security-50-oauth2-login-and-oauth2-client">3. Spring Security 5.0 OAuth2 Login and OAuth2 Client</h3>
<p>在 Spring Security 5.0 中，Spring Security OAuth2 的部分功能被合并到了 Spring Security 5.0 中，提供了 OAuth2 登录和客户端支持。</p>
<h3 id="4-spring-security-51-oauth2-resource-server">4. Spring Security 5.1 OAuth2 Resource Server</h3>
<p>在 Spring Security 5.1 中，Spring Security OAuth2 的资源服务器功能被合并到了 Spring Security 中。</p>
<h3 id="5-spring-security-52-oauth2-authorization-server">5. Spring Security 5.2 OAuth2 Authorization Server</h3>
<p>在 Spring Security 5.2 中，Spring Security OAuth2 的授权服务器功能被合并到了 Spring Security 中。这是 Spring Security OAuth2 的最后一个独立版本。</p>
<h3 id="6-spring-authorization-server">6. Spring Authorization Server</h3>
<p>在 2020 年 4 月，Spring 宣布了一个新的项目——Spring Authorization Server，该项目旨在提供一个用于实现 OAuth 2.1 授权服务器的基础。</p>
<h3 id="7-spring-security-53-and-beyond">7. Spring Security 5.3 and beyond</h3>
<p>在 Spring Security 5.3 和之后的版本中，Spring Security OAuth2 的所有功能都被合并到了 Spring Security 中，而 <a href="https://github.com/spring-attic/spring-security-oauth">Spring Security OAuth2</a> 作为一个独立的项目已经停止开发。与之相对应的 <a href="https://github.com/spring-attic/spring-security-oauth2-boot">Spring Security OAuth Boot 2 Autoconfig</a> 也停止了开发。</p>
<p>总结一下，目前，Spring Security OAuth2 的最新版本为 2.5.2.RELEASE，并且所有类都标注为 @Deprecated，官方也提供了一个迁移文档 <a href="https://github.com/spring-projects/spring-security/wiki/OAuth-2.0-Migration-Guide">OAuth 2.0 Migration Guide</a>。</p>
<h2 id="spring-boot-和-spring-oauth2-版本关系">Spring Boot 和 Spring OAuth2 版本关系</h2>
<p>Spring Boot 和 Spring OAuth2 是可以配合使用的，主要注意版本匹配即可。</p>
<p>Spring Boot 使用了特定版本的 Spring OAuth2 作为依赖。所以使用对应的 Spring Boot 版本，就会自动获取匹配的 Spring OAuth2 版本。</p>
<p>举几个版本的例子：</p>
<ul>
<li>Spring Boot 1.5.x 使用 Spring OAuth2 2.0.x</li>
<li>Spring Boot 2.0.x 使用 Spring OAuth2 2.0.x</li>
<li>Spring Boot 2.1.x 使用 Spring OAuth2 2.1.x</li>
<li>Spring Boot 2.2.x 使用 Spring OAuth2 2.2.x</li>
<li>Spring Boot 2.3.x 使用 Spring OAuth2 2.3.x</li>
</ul>
<p>所以使用 Spring Boot 时，不需要额外指定 Spring OAuth2 的版本，只需要选择匹配的 Spring Boot 版本即可。</p>
<p>在配置和使用 Spring OAuth2 时，只需要参考 Spring OAuth2 的文档即可，不需要特别关注其版本。Spring Boot 会负责管理版本匹配。</p>
<p>此外，从 Spring Boot 1.5 开始，Spring Security 已经集成了 OAuth2 的实现，可以直接使用 Spring Security 来实现 OAuth2，无需引入 Spring OAuth 项目。</p>
<p>总之，Spring Boot 大大简化了 Spring OAuth2 的使用，只需要关注 Spring Boot 版本即可自动获取正确的 Spring OAuth2 版本。</p>
<h2 id="spring-cloud-和-spring-oauth2-版本关系">Spring Cloud 和 Spring OAuth2 版本关系</h2>
<p>Spring Cloud 和 Spring OAuth2 版本之间没有固定的对应关系，但通常来说建议符合以下情况：</p>
<ul>
<li>Spring Cloud 版本越新，内置的 Spring OAuth 支持也会更稳定和完善。</li>
<li>Spring Cloud Hoxton/Greenwich 等主流版本，内置的 Spring OAuth 支持正常使用 Spring Security OAuth2 版本 2.x。</li>
<li>Spring Cloud Edgware 及更早版本，内置的 Spring OAuth 支持建议使用 Spring Security OAuth2 版本 1.x。</li>
<li>即使 Spring Cloud 版本和 Spring Security OAuth 版本不完全匹配，也无大碍，但功能和兼容性会受一定影响。</li>
</ul>
<p>所以一般来说：</p>
<ul>
<li>Spring Cloud Finch/ Greenwich 等最新版本，建议使用 Spring Security OAuth2 版本 2.3.x 及以上。</li>
<li>Spring Cloud Edgware 到 Hoxton，建议使用 Spring Security OAuth2 版本 1.5.x 到 2.3.x 都可以。</li>
<li>Spring Cloud 版本比较早，如 Dalston 以下，建议使用 Spring Security OAuth2 版本 1.0.x 到 1.5.x。</li>
</ul>
<p>但不是说版本一定要完全匹配，主要看自己需要用到的 Spring OAuth 功能是否得到支持。选择版本时优先考虑 Spring Cloud 版本的内置支持程度。此外，也可以根据项目其他依赖选择一个相对稳定的 Spring Security OAuth 版本。</p>
<h2 id="spring-cloud-security">Spring Cloud Security</h2>
<p>Spring Cloud Security 提供了一种集成化的方式来实现微服务应用的安全功能。主要有以下几点：</p>
<ol>
<li>身份认证(Authentication)</li>
</ol>
<p>Spring Cloud Security 支持常见的认证方式，比如基于 OAuth2.0 的认证协议。可以实现集中式的认证管理，登入后获取访问令牌并在各个微服务之间传递。</p>
<ol>
<li>授权(Authorization)</li>
</ol>
<p>支持基于 RBAC 和 ABAC 等授权模型。可以实现集中式的授权管理，给不同用户或组分配不同的访问权限。</p>
<ol>
<li>安全终端(Security Endpoints)</li>
</ol>
<p>提供了安全终端的实现，比如/oauth/token 令牌访问端点、/userinfo 用户信息端点等。</p>
<ol>
<li>加密通信(Encryption)</li>
</ol>
<p>支持在微服务之间进行安全的 HTTP 通信，通过 TLS/SSL 加密数据传输和服务间调用。</p>
<ol>
<li>日志审计(Logging &amp; Auditing)</li>
</ol>
<p>支持收集和记录安全相关的审计日志，比如授权错误日志、登入/登出日志等，方便管理和监控。</p>
<ol>
<li>安全配置(Security Configuration)</li>
</ol>
<p>提供了弹性和易用的安全配置能力，如动态配置安全相关 Bean 等。</p>
<ol>
<li>集成支持(Integration Support)</li>
</ol>
<p>天然支持 Spring Cloud 和 Springboot 项目，无缝集成从认证到授权的全套安全功能。</p>
<p>所以总体来说，Spring Cloud Security 提供了一种标准化和集成的方式来实现微服务环境下的安全需求。开发人员可以更便捷地利用其丰富的功能。</p>
<h2 id="示例">示例</h2>
<h3 id="spring-security-如何实现-json-web-token-的功能">Spring Security 如何实现 JSON Web Token 的功能？</h3>
<p>Spring Security 可以通过如下方式实现 JSON Web Token(JWT)的功能：</p>
<ol>
<li>导入 spring-security-jwt 依赖。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-security-jwt<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>spring-boot-starter-security 版本信息如下：</p>
<ul>
<li>spring-boot-starter-parent 版本号：2.7.5</li>
<li>依赖的 spring-boot-starter-security 版本号：2.7.5</li>
</ul>
<p>spring-boot-starter-security 是 Spring Boot 安全功能的启动器依赖，它会自动引入核心安全依赖：</p>
<ul>
<li>
<p>spring-security-core：Spring Security 的核心模块，提供认证、授权、安全相关的主要接口和组件。</p>
</li>
<li>
<p>spring-security-config：提供了 Spring Security 的基础配置能力，包含过滤器链、密码编码器等。</p>
</li>
<li>
<p>spring-security-web：提供了 web 安全相关的支持，如过滤器、登录表单、注解等。</p>
</li>
<li>
<p>spring-security-crypto：包含密码哈希功能的实现类，用于对密码进行安全的加密存储。</p>
</li>
<li>
<p>spring-security-data：包含了支持 JDBC 和 LDAP 等后端数据源的安全组件。</p>
</li>
<li>
<p>spring-security-oauth2-client：提供了对 OAuth2 客户端功能的支持。主要提供以下 OAuth2 客户端相关功能：</p>
<ul>
<li>客户端注册和资源服务器配置：支持为客户端应用配置 clientId、secret 等信息。</li>
<li>客户端凭证获取：支持 BasicAuth 和密码模式获取 client credentials。</li>
<li>访问令牌请求：实现客户端向授权服务器请求访问令牌的功能，支持 password、refresh_token 等 grant 类型。</li>
<li>令牌存储：提供 TokenStore 接口的实现，支持在会话或数据库中存储/获取访问令牌。</li>
<li>资源服务器访问：通过访问令牌来访问受保护的资源，支持从请求头或参数中提取令牌。</li>
<li>刷新令牌：实现使用 refresh_token 来刷新过期的访问令牌功能。</li>
<li>用户授权：提供类似@PreAuthorize 注解来处理用户授权逻辑。</li>
<li>客户端详情：封装 ClientDetails 实现类，包含客户端注册信息。</li>
<li>默认令牌服务：DefaultTokenServices 实现类管理令牌生命周期。</li>
<li>请求工厂：提供 RestTemplate 和 Apache HTTP Components 等请求客户端。</li>
</ul>
<p>spring-security-oauth2-client 模块同时也提供部分支持其他授权类型：</p>
<ul>
<li>授权码模式(authorization_code)：主流模式，客户端通过 auth code 获取 access token。</li>
<li>密码模式(password)：客户端直接提供用户名密码获取 token，适合 trusted 客户端。</li>
<li>隐藏式授权模式(implicit)：客户端直接获取 access token，不支持 refresh。</li>
<li>客户端模式(client_credentials)：客户端以自身名义请求资源服务，适合机密客户端。</li>
<li>资主授权模式(owner)：类似密码模式但用户需确认通过用户界面。</li>
<li>运行时审批模式(approval_prompt)：用户每次访问都需确认授权。</li>
</ul>
<p>除了上述常见授权类型外，spring-security-oauth2-client 还提供了对以下模式的选择性支持：</p>
<ul>
<li>断路器模式(urn:ietf:params:oauth:grant-type:device_code)</li>
<li>分阶段授权模式(urn:ietf:params:oauth:grant-type:stage)</li>
<li>令牌交换模式(urn:ietf:params:oauth:grant-type:token-exchange)</li>
</ul>
</li>
<li>
<p>spring-security-oauth2-core：OAuth2 协议支持的核心部件。</p>
</li>
</ul>
<p>因此 spring-boot-starter-security 的版本始终保持与 spring-boot-starters 版本一致。</p>
<p>当前较为主流和稳定的 spring-boot 版本有：</p>
<ul>
<li>Spring Boot 2.7.x 最新版</li>
<li>Spring Boot 2.6.x</li>
<li>Spring Boot 2.5.x</li>
</ul>
<p>对应的 spring-boot-starter-security 版本如下：</p>
<ul>
<li>Spring Boot 2.7.x - spring-boot-starter-security 2.7.x</li>
<li>Spring Boot 2.6.x - spring-boot-starter-security 2.6.x</li>
<li>Spring Boot 2.5.x - spring-boot-starter-security 2.5.x</li>
</ul>
<p>所以在选择 spring boot 版本时，直接依赖 spring-boot-starter-security 而不用单独指定版本，就可以保证安全功能的版本一致性。</p>
<p>目前大多数场景下可以使用 Spring Boot 2.6.x 或者 2.7.x 作为选择，它们内置的 spring-boot-starter-security 版本都很成熟。</p>
<ol start="2">
<li>配置 JwtToken enhancer 来生成 JWT 令牌。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">JwtAccessTokenConverter</span> <span class="nf">jwtTokenEnhancer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">JwtAccessTokenConverter</span> <span class="n">converter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JwtAccessTokenConverter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">converter</span><span class="o">.</span><span class="na">setSigningKey</span><span class="o">(</span><span class="s">&#34;123456&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">converter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol start="3">
<li>定义 JwtTokenStore 来保存 JWT 令牌。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">TokenStore</span> <span class="nf">tokenStore</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">new</span> <span class="n">JwtTokenStore</span><span class="o">(</span><span class="n">jwtTokenEnhancer</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol start="4">
<li>在 AuthorizationServerConfigurerAdapter 配置类中设置 tokenStore。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerEndpointsConfigurer</span> <span class="n">endpoints</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">endpoints</span><span class="o">.</span><span class="na">tokenStore</span><span class="o">(</span><span class="n">tokenStore</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol start="5">
<li>
<p>客户端使用 JWT 令牌进行认证访问资源服务器。</p>
</li>
<li>
<p>资源服务器使用 JwtTokenStore 和 JwtAccessTokenConverter 校验 JWT 令牌的合法性。</p>
</li>
<li>
<p>解析 JWTpayload 获取用户信息，实现鉴权决策。</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span> <span class="n">username</span> <span class="o">=</span>  <span class="o">((</span><span class="n">Jwt</span><span class="o">)</span><span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">()).</span><span class="na">getSubject</span><span class="o">();</span>
</span></span></code></pre></div><p>完整代码，配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">JwtAccessTokenConverter</span> <span class="nf">accessTokenConverter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">JwtAccessTokenConverter</span> <span class="n">converter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JwtAccessTokenConverter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">converter</span><span class="o">.</span><span class="na">setSigningKey</span><span class="o">(</span><span class="s">&#34;as123456dfsdf&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">converter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">TokenStore</span> <span class="nf">tokenStore</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">JwtTokenStore</span><span class="o">(</span><span class="n">accessTokenConverter</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">http</span><span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">http</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/oauth/**&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Primary</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">DefaultTokenServices</span> <span class="nf">tokenServices</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">DefaultTokenServices</span> <span class="n">defaultTokenServices</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultTokenServices</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">defaultTokenServices</span><span class="o">.</span><span class="na">setTokenStore</span><span class="o">(</span><span class="n">tokenStore</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">defaultTokenServices</span><span class="o">.</span><span class="na">setSupportRefreshToken</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">defaultTokenServices</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>授权服务器配置，使用客户端模式配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationServerConfig</span> <span class="kd">extends</span> <span class="n">AuthorizationServerConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">TokenStore</span> <span class="n">tokenStore</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">ClientDetailsServiceConfigurer</span> <span class="n">clients</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">clients</span><span class="o">.</span><span class="na">inMemory</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;clientapp&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;$2a$10$6aQQyhlhol4M1KAncczPdu4zX7/TgvjpOU.sWzt7j5Xl6W/z5V4cC&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="err">，</span> <span class="s">&#34;refresh_token&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="err">，</span> <span class="s">&#34;write&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">accessTokenValiditySeconds</span><span class="o">(</span><span class="mi">3600</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerEndpointsConfigurer</span> <span class="n">endpoints</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">endpoints</span><span class="o">.</span><span class="na">tokenStore</span><span class="o">(</span><span class="n">tokenStore</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">authenticationManager</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>主要配置：</p>
<ol>
<li>使用 ClientDetailsServiceConfigurer 配置客户端信息，如 clientId、secret 等</li>
<li>配置 tokenStore</li>
<li>配置 authenticationManager 来获取用户信息</li>
</ol>
<p>这样就实现了基于客户端模式下的授权服务配置，客户端可以使用 clientId/secret 获取访问令牌而无需用户登录。</p>
<p>客户端访问示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST http://localhost:8080/oauth/token -d <span class="s2">&#34;grant_type=password&amp;username=user&amp;password=password&amp;client_id=clientapp&amp;client_secret=secret&#34;</span>
</span></span></code></pre></div><p>让客户端在后台获取访问令牌，资源服务再使用令牌验证授权。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]在 Spring 中实现 OAuth2：使用范围（第 2 部分）</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/using-oauth2-in-spring-scopes/</link>
      <pubDate>Wed, 26 Jul 2023 07:05:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/using-oauth2-in-spring-scopes/</guid>
      <description>我们在上一篇文章中了解了基本的 OAuth2 概念以及如何在 Spring 中实现和执行不同的授权。在这篇文章中，我们将介绍 OAuth2 的另一个重要概念：范围。
OAuth 范围 保护对应用程序的访问通常分两个步骤进行：身份验证和授权。要理解这两个概念，假设您在绝密政府大楼工作。在开始之前，你会得到一张卡片，可以让你进入建筑物。 OAuth 令牌可以看作是允许您访问的卡片。
一旦你进去，你决定去三楼见你的一位同事，在尝试使用你的卡打开三楼的门后，你听到一声嘟嘟声，告诉你你没有被授权。在 OAuth 中，范围是一种定义令牌可以访问哪些资源以及不能访问哪些资源的方法。范围允许访问控制，并且可以被视为相当于传统身份验证中的用户角色。
实现 为了演示范围，我们将使用第 1 部分中的示例。
在资源服务器的控制器中，我们有以下端点：
@RestController(&amp;#34;/&amp;#34;) public class ResourceController { @GetMapping(&amp;#34;/hello&amp;#34;) public String hello(){ return &amp;#34;hello&amp;#34;; } @GetMapping(&amp;#34;/foo&amp;#34;) public String foo(){ return &amp;#34;foo&amp;#34;; } @PostMapping(&amp;#34;/bar&amp;#34;) public String bar(){ return &amp;#34;bar&amp;#34;; } @DeleteMapping(&amp;#34;/test&amp;#34;) public String test(){ return &amp;#34;test&amp;#34;; } } 第一步是使用所需的范围配置授权服务器：
clients.inMemory().withClient(&amp;#34;my-trusted-client&amp;#34;) .authorizedGrantTypes(&amp;#34;password&amp;#34;, &amp;#34;refresh_token&amp;#34;, &amp;#34;implicit&amp;#34;, &amp;#34;client_credentials&amp;#34;, &amp;#34;authorization_code&amp;#34;) .authorities(&amp;#34;CLIENT&amp;#34;) .scopes(&amp;#34;read&amp;#34;, &amp;#34;write&amp;#34;, &amp;#34;trust&amp;#34;) .accessTokenValiditySeconds(60) .redirectUris(&amp;#34;http://localhost:8081/test.html&amp;#34;) .resourceIds(&amp;#34;resource&amp;#34;) .secret(&amp;#34;mysecret&amp;#34;); 要在资源服务器中启用范围检查，我们有两个选项：使用安全配置或使用方法安全性。</description>
      <content:encoded><![CDATA[<p>我们在<a href="/posts/2023/07/26/using-oauth2-in-spring/">上一篇文章</a>中了解了基本的 OAuth2 概念以及如何在 Spring 中实现和执行不同的授权。在这篇文章中，我们将介绍 OAuth2 的另一个重要概念：范围。</p>
<h2 id="oauth-范围">OAuth 范围</h2>
<p>保护对应用程序的访问通常分两个步骤进行：身份验证和授权。要理解这两个概念，假设您在绝密政府大楼工作。在开始之前，你会得到一张卡片，可以让你进入建筑物。 OAuth 令牌可以看作是允许您访问的卡片。</p>
<p>一旦你进去，你决定去三楼见你的一位同事，在尝试使用你的卡打开三楼的门后，你听到一声嘟嘟声，告诉你你没有被授权。在 OAuth 中，范围是一种定义令牌可以访问哪些资源以及不能访问哪些资源的方法。范围允许访问控制，并且可以被视为相当于传统身份验证中的用户角色。</p>
<h2 id="实现">实现</h2>
<p>为了演示范围，我们将使用第 1 部分中的<a href="https://github.com/zak905/oauth2-example">示例</a>。</p>
<p>在<a href="https://github.com/zak905/oauth2-example/blob/master/resource-server/src/main/java/com/gwidgets/examples/resourceserver/ResourceController.java">资源服务器</a>的控制器中，我们有以下端点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourceController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/foo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;foo&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/bar&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">bar</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;bar&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@DeleteMapping</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">test</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;test&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>第一步是使用所需的范围配置<a href="https://github.com/zak905/oauth2-example/blob/master/authorization-server/src/main/java/com/gwidgets/examples/authorizationserver/AuthorizationSecurityConfig.java#L34">授权服务器</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="n">clients</span><span class="o">.</span><span class="na">inMemory</span><span class="o">().</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;my-trusted-client&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;refresh_token&#34;</span><span class="o">,</span> <span class="s">&#34;implicit&#34;</span><span class="o">,</span> <span class="s">&#34;client_credentials&#34;</span><span class="o">,</span> <span class="s">&#34;authorization_code&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;CLIENT&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">,</span> <span class="s">&#34;write&#34;</span><span class="o">,</span> <span class="s">&#34;trust&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">accessTokenValiditySeconds</span><span class="o">(</span><span class="mi">60</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">redirectUris</span><span class="o">(</span><span class="s">&#34;http://localhost:8081/test.html&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">resourceIds</span><span class="o">(</span><span class="s">&#34;resource&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;mysecret&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>要在资源服务器中启用范围检查，我们有两个选项：使用安全配置或使用方法安全性。</p>
<ul>
<li>使用安全配置：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">http</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			 <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span><span class="s">&#34;/hello&#34;</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;read&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			 <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span><span class="s">&#34;/foo&#34;</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;read&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			 <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span><span class="s">&#34;/bar&#34;</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;write&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			 <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">,</span><span class="s">&#34;/test&#34;</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;trust&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">().</span>
</span></span><span class="line"><span class="cl">			 <span class="n">and</span><span class="o">().</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span></code></pre></div><ul>
<li>使用方法安全性：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;read&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;read&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/foo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;foo&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;write&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/bar&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">bar</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;bar&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;trust&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DeleteMapping</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">test</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;test&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>另外，我们需要将 <code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code> 添加到 Spring 可以获取的任何类（ <code>@Configuration</code> 、 <code>@Service</code> 等）。在我们的示例中，我们已将其添加到 <a href="https://github.com/zak905/oauth2-example/blob/master/resource-server/src/main/java/com/gwidgets/examples/resourceserver/ResourceSecurityConfiguration.java#L18">ResourceSecurityConfiguration</a> 类中。 <code>prePostEnabled = true</code> 告诉 Spring 启用前注解和后注解，例如 <code>@PreAuthorize</code> 、 <code>@PostFilter</code> 等&hellip;&hellip;</p>
<p>对于那些想了解 <code>#oauth2.hasScope('trust')</code> 这样的表达式的人来说，它们是使用 <a href="https://docs.spring.io/spring/docs/4.3.12.RELEASE/spring-framework-reference/html/expressions.html">Spring 表达式语言</a>（SpEL）构建的。</p>
<h2 id="行动范围">行动范围</h2>
<p>默认情况下，如果令牌请求中不存在范围，Spring 会假定令牌具有所有配置的范围。让我们首先请求一个具有 <code>read</code> 范围的令牌：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;grant_type=client_credentials&amp;client_id=my-trusted-client&amp;scope=read&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;acadbb31-f126-411d-ae5b-6a278cee2ed6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;read&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>现在，我们可以使用令牌来访问具有 <code>read</code> 范围访问权限的端点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> curl -XGET localhost:8989/hello -H <span class="s2">&#34;Authorization: Bearer acadbb31-f126-411d-ae5b-6a278cee2ed6&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> hello
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl -XGET localhost:8989/foo -H <span class="s2">&#34;Authorization: Bearer acadbb31-f126-411d-ae5b-6a278cee2ed6&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> foo
</span></span></code></pre></div><p>现在，让我们尝试在仅接受 <code>write</code> 范围的端点上使用此令牌：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -XPOST localhost:8989/bar -H <span class="s2">&#34;Authorization: Bearer acadbb31-f126-411d-ae5b-6a278cee2ed6&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;access_denied&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error_description&#34;</span><span class="p">:</span> <span class="s2">&#34;Access is denied&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>由于令牌不具有所需的范围，因此访问被拒绝。让我们尝试获取一个具有 <code>write</code> 范围的新令牌，然后重试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;grant_type=client_credentials&amp;client_id=my-trusted-client&amp;scope=write&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;bf0fa83a-23bd-4633-ac6c-a06f40d53e5f&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">3599</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;write&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -XPOST localhost:8989/bar -H <span class="s2">&#34;Authorization: Bearer bf0fa83a-23bd-4633-ac6c-a06f40d53e5f&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bar
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>范围是 OAuth 的一个重要方面，因为令牌不携带有关其用户或请求者的信息。范围允许限制对资源的访问，以实现更好的访问控制和安全性。在下一篇文章中，我们将了解如何将 Google 和 Facebook 等外部 OAuth 提供商集成到流程中。</p>
<p>原文链接：<a href="http://www.zakariaamine.com/2018-03-01/using-oauth2-in-spring-scopes/">http://www.zakariaamine.com/2018-03-01/using-oauth2-in-spring-scopes/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]在 Spring 中实现 OAuth2：第 1 部分</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/using-oauth2-in-spring/</link>
      <pubDate>Wed, 26 Jul 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/using-oauth2-in-spring/</guid>
      <description>OAuth2 是一组规范，主要提供对 Rest API 的安全访问的方法。 OAuth 的主要目的是允许通过使用令牌来执行身份验证和授权，而不必为每个操作提供凭据。由于本文的重点是实现，并且为了不重新发明轮子，可以查看 OAuth RFC 或维基百科以获取更多理论背景。在这篇文章中，我们将深入探讨 Spring 中的 OAuth2 实现以及如何使用不同的授权类型，但在此之前值得提供一些重要概念的简要定义。
访问令牌和刷新令牌 身份验证成功后将提供访问令牌以及刷新令牌。访问令牌有一个有限的有效期（标准为 1 小时），之后需要刷新令牌才能获取新的访问令牌和新的刷新令牌。 Referesh 令牌通常会在使用后过期。
资源服务器和授权服务器 OAuth 引入了授权服务器的概念，授权服务器是发出访问和刷新令牌的实体，并在每个操作中进行咨询以查看令牌是否有效。资源服务器只是由不同客户端应用程序（前端应用程序、移动设备、其他后端服务&amp;hellip;&amp;hellip;）访问的实际 Rest API。资源服务器和授权服务器可以是不同的实体，也可以是同一实体。
授权类型 OAuth 中最常用的授权有：客户端凭据、密码、授权码和隐式授权。每项资助都有特定的流程和用例，但由于本文的重点不是理论，因此我们将重点关注其实施。有关授权及其用途的更多详细信息，请参阅 OAuth RFC。
实现 在实现方面，我们将使用 Spring Boot 来利用其自动配置和引导功能，并更多地关注我们的核心主题。
资源服务器： 我们有一个资源服务器，其中包含我们希望保护的以下端点：
@RestController(&amp;#34;/&amp;#34;) public class ResourceController { @GetMapping(&amp;#34;/hello&amp;#34;) public String hello(){ return &amp;#34;hello&amp;#34;; } @GetMapping(&amp;#34;/foo&amp;#34;) public String foo(){ return &amp;#34;foo&amp;#34;; } @GetMapping(&amp;#34;/bar&amp;#34;) public String bar(){ return &amp;#34;bar&amp;#34;; } @GetMapping(&amp;#34;/test&amp;#34;) public String test(){ return &amp;#34;test&amp;#34;; } } 为此，我们需要配置一个用 @EnableResourceServer 注释的 ResourceServerConfigurerAdapter bean：</description>
      <content:encoded><![CDATA[<p>OAuth2 是一组规范，主要提供对 Rest API 的安全访问的方法。 OAuth 的主要目的是允许通过使用令牌来执行身份验证和授权，而不必为每个操作提供凭据。由于本文的重点是实现，并且为了不重新发明轮子，可以查看 <a href="https://tools.ietf.org/html/rfc6749">OAuth RFC</a> 或<a href="https://en.wikipedia.org/wiki/OAuth">维基百科</a>以获取更多理论背景。在这篇文章中，我们将深入探讨 Spring 中的 OAuth2 实现以及如何使用不同的授权类型，但在此之前值得提供一些重要概念的简要定义。</p>
<h2 id="访问令牌和刷新令牌"><strong>访问令牌和刷新令牌</strong></h2>
<p>身份验证成功后将提供访问令牌以及刷新令牌。访问令牌有一个有限的有效期（标准为 1 小时），之后需要刷新令牌才能获取新的访问令牌和新的刷新令牌。 Referesh 令牌通常会在使用后过期。</p>
<h2 id="资源服务器和授权服务器">资源服务器和授权服务器</h2>
<p>OAuth 引入了授权服务器的概念，授权服务器是发出访问和刷新令牌的实体，并在每个操作中进行咨询以查看令牌是否有效。资源服务器只是由不同客户端应用程序（前端应用程序、移动设备、其他后端服务&hellip;&hellip;）访问的实际 Rest API。资源服务器和授权服务器可以是不同的实体，也可以是同一实体。</p>
<h2 id="授权类型">授权类型</h2>
<p>OAuth 中最常用的授权有：客户端凭据、密码、授权码和隐式授权。每项资助都有特定的流程和用例，但由于本文的重点不是理论，因此我们将重点关注其实施。有关授权及其用途的更多详细信息，请参阅 <a href="https://tools.ietf.org/html/rfc6749#page-8">OAuth RFC</a>。</p>
<h2 id="实现">实现</h2>
<p>在实现方面，我们将使用 Spring Boot 来利用其自动配置和引导功能，并更多地关注我们的核心主题。</p>
<ul>
<li>资源服务器：</li>
</ul>
<p>我们有一个资源服务器，其中包含我们希望保护的以下端点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourceController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/foo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;foo&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/bar&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">bar</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;bar&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">test</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;test&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>为此，我们需要配置一个用 <code>@EnableResourceServer</code> 注释的 <code>ResourceServerConfigurerAdapter</code> bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableResourceServer</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourceSecurityConfiguration</span> <span class="kd">extends</span> <span class="n">ResourceServerConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">ResourceServerSecurityConfigurer</span> <span class="n">resources</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">resources</span><span class="o">.</span><span class="na">resourceId</span><span class="o">(</span><span class="s">&#34;resource&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/foo&#34;</span><span class="o">,</span> <span class="s">&#34;/bar&#34;</span><span class="o">,</span> <span class="s">&#34;/hello&#34;</span><span class="o">,</span> <span class="s">&#34;/test&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">().</span>
</span></span><span class="line"><span class="cl">                <span class="n">and</span><span class="o">().</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">RemoteTokenServices</span> <span class="nf">LocalTokenService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">final</span> <span class="n">RemoteTokenServices</span> <span class="n">tokenService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RemoteTokenServices</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">tokenService</span><span class="o">.</span><span class="na">setCheckTokenEndpointUrl</span><span class="o">(</span><span class="s">&#34;http://localhost:8081/oauth/check_token&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">tokenService</span><span class="o">.</span><span class="na">setClientId</span><span class="o">(</span><span class="s">&#34;my-client&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">tokenService</span><span class="o">.</span><span class="na">setClientSecret</span><span class="o">(</span><span class="s">&#34;mysecret&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">tokenService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>我们已经告诉 spring 检查端点的身份验证（可以使用 <code>&quot;/*&quot;</code> 或 <code>.anyRequest()</code> 来表示所有端点）。此外，我们还配置了一个 <code>RemoteTokenServices</code> bean 来告诉 Spring 提供令牌检查端点（授权服务器），并配置了客户端 id 和密钥。这样我们的资源服务器就配置好了。最后，我们设置了资源 id，如果多个资源服务器使用该资源（这很常见），则该资源 id 可以在授权服务器中用作标识。</p>
<ul>
<li>授权服务器：</li>
</ul>
<p>为了实现授权服务器，我们将使用内存客户端配置。 Spring Security 还提供了将 oauth 客户端配置存储在更适合生产应用程序的数据库中的可能性。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableAuthorizationServer</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationSecurityConfig</span> <span class="kd">extends</span> <span class="n">AuthorizationServerConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerEndpointsConfigurer</span> <span class="n">endpoints</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">endpoints</span><span class="o">.</span><span class="na">authenticationManager</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">ClientDetailsServiceConfigurer</span> <span class="n">clients</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">clients</span><span class="o">.</span><span class="na">inMemory</span><span class="o">().</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;my-trusted-client&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;refresh_token&#34;</span><span class="o">,</span> <span class="s">&#34;implicit&#34;</span><span class="o">,</span> <span class="s">&#34;client_credentials&#34;</span><span class="o">,</span> <span class="s">&#34;authorization_code&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;ROLE_CLIENT&#34;</span><span class="o">,</span> <span class="s">&#34;ROLE_TRUSTED_CLIENT&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">,</span> <span class="s">&#34;write&#34;</span><span class="o">,</span> <span class="s">&#34;trust&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">accessTokenValiditySeconds</span><span class="o">(</span><span class="mi">60</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">redirectUris</span><span class="o">(</span><span class="s">&#34;http://localhost:8081/test.html&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">resourceIds</span><span class="o">(</span><span class="s">&#34;resource&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;mysecret&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerSecurityConfigurer</span> <span class="n">oauthServer</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                 <span class="n">oauthServer</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">tokenKeyAccess</span><span class="o">(</span><span class="s">&#34;permitAll()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">checkTokenAccess</span><span class="o">(</span><span class="s">&#34;permitAll()&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>除了我们在其中配置客户端、密钥、oauth 范围（下一篇文章中将详细介绍）、权限（与令牌关联的角色）、令牌有效性、资源 id 之外，我们还配置了对 Spring Boot 在 <code>/oauth/check_token</code> 处提供的检查令牌端点的访问，以及对也自动映射在 <code>/oauth/token</code> 处的令牌发行端点的访问。</p>
<h2 id="oauth-的实际应用">OAuth 的实际应用</h2>
<p>我们已将授权服务器配置为在端口 8081 上运行，将资源服务器配置为在端口 8989 上运行。对于下面的所有示例，都使用 <code>curl</code> ，但客户端可以是任何应用程序。</p>
<p>我们首先尝试访问资源服务器中的一个端点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl localhost:8989/foo
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;unauthorized&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error_description&#34;</span><span class="p">:</span> <span class="s2">&#34;Full authentication is required to access this resource&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>让我们获取一个令牌并重试。</p>
<ul>
<li>客户凭证授予：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;grant_type=client_credentials&amp;client_id=my-trusted-client&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;3670fea1-eab3-4981-b80a-e5c57203b20e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">51</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;read write trust&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们现在可以使用令牌来访问受保护的端点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -v localhost:8989/foo -H <span class="s2">&#34;Authorization: Bearer 6bb86f18-e69e-4c2b-8fbf-85d7d5b800a4&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">foo
</span></span></code></pre></div><p>客户端凭据授予不支持刷新令牌。</p>
<ul>
<li>密码授予：</li>
</ul>
<p>就获取令牌的流程而言，密码授予与客户端凭据类似，只是它使用实际的用户凭据。它还意味着需要为应用程序配置用户。 Web 安全配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurity</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">auth</span><span class="o">.</span><span class="na">inMemoryAuthentication</span><span class="o">().</span><span class="na">withUser</span><span class="o">(</span><span class="s">&#34;gwidgets&#34;</span><span class="o">).</span><span class="na">password</span><span class="o">(</span><span class="s">&#34;gwidgets&#34;</span><span class="o">).</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;CLIENT&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		 <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">().</span><span class="na">and</span><span class="o">().</span><span class="na">formLogin</span><span class="o">().</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="s">&#34;/test.html&#34;</span><span class="o">).</span><span class="na">and</span><span class="o">().</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后我们可以使用用户凭据来获取令牌，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;grant_type=password&amp;username=gwidgets&amp;password=gwidgets&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;3670fea1-eab3-4981-b80a-e5c57203b20e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">51</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;read write trust&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>密码授予不支持刷新令牌。</p>
<ul>
<li>隐式授予：</li>
</ul>
<p>隐式授权最适合前端路由应用程序。隐式授权需要基本身份验证和 HTTP 会话。为了执行隐式授权，我们将向授权服务器添加一个简单的 http 页面（它可以位于不同的服务器上）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>we are here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>要执行隐式授予，我们需要在浏览器中导航到以下地址：http://localhost:8081/oauth/authorize?response_type=token&amp;client_id=my-trusted-client&amp;redirect-uri=http://localhost:8081/test.html</p>
<p>
  <img loading="lazy" src="https://s3-eu-west-1.amazonaws.com/gwidgets/login-spring.png" alt="Login redirect"  /></p>
<p>登录后，我们得到一个 OAuth 审批页面（spring 默认提供，但可以自定义）：</p>
<p>
  <img loading="lazy" src="https://s3-eu-west-1.amazonaws.com/gwidgets/oauth-approval.png" alt="OAuth approval"  />
批准令牌的范围后，我们最终会重定向到我们的页面，在该页面中我们在 url 的哈希中找到令牌：</p>
<p>
  <img loading="lazy" src="https://s3-eu-west-1.amazonaws.com/gwidgets/implicit_grant.png" alt="Implicit grant"  /></p>
<ul>
<li>授权码授予：</li>
</ul>
<p>对于授权码授予，我们需要首先以与隐式流程相同的方式进行授权，只不过 <code>response_type</code> 现在是 <code>code</code> 。为此，我们需要导航到：<a href="http://localhost:8081/oauth/authorize?response_type=code&amp;client_id=my-trusted-client&amp;redirect-uri=http://localhost:8081/test.html">http://localhost:8081/oauth/authorize?response_type=code&amp;client_id=my-trusted-client&amp;redirect-uri=http://localhost:8081/test.html</a></p>
<p>然后我们被重定向到登录，登录后，我们被重定向到 OAuth 范围批准，如上一节中的隐式流程。之后，我们被重定向到以下地址：<a href="http://localhost:8081/test.html?code=bD0mVb">http://localhost:8081/test.html?code=bD0mVb</a>，这是我们应用程序的欢迎页面，但带有一个特殊的查询参数： <code>code</code> 。我们将使用 curl 来获取令牌以进行演示，但也可以使用 JavaScript 在页面中完成此操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;grant_type=authorization_code&amp;code=bD0mVb&amp;redirect_uri=http://localhost:8081/test.html&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;0abe701b-0f5a-4d25-81df-f2c4db2af555&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;refresh_token&#34;</span><span class="p">:</span> <span class="s2">&#34;cf6aa9db-3757-465e-af68-b7d59d1f0b77&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">59</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;trust read write&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li>刷新令牌：</li>
</ul>
<p>我们已经看到授权授予是唯一支持刷新令牌的授予。使用访问令牌 60 秒后，它就会过期，我们得到以下响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;invalid_token&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error_description&#34;</span><span class="p">:</span> <span class="s2">&#34;0abe701b-0f5a-4d25-81df-f2c4db2af555&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这意味着访问令牌已过期。要获取新令牌，我们需要使用刷新令牌：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;client_id=my-trusted-client&amp;grant_type=refresh_token&amp;refresh_token=cf6aa9db-3757-465e-af68-b7d59d1f0b77&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;2f9a6609-fc64-4b1e-93a3-8232827da881&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;refresh_token&#34;</span><span class="p">:</span> <span class="s2">&#34;cf6aa9db-3757-465e-af68-b7d59d1f0b77&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">59</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;trust read write&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>每次令牌过期时都可以重复此过程。</p>
<h2 id="总结">总结</h2>
<p>Spring OAuth 提供开箱即用的 OAuth 端点和流程，并且可以成为以最小的努力设置 OAuth 的绝佳解决方案。然而，对于不熟悉 Spring 的开发人员来说，这可能有点令人畏惧，因为很多事情都在幕后发生。希望这篇文章可以帮助您了解全局。在下一篇文章中，我们将讨论使用 OAuth 范围来保护端点。</p>
<p>完整的源代码可以在这里找到：<a href="https://github.com/zak905/oauth2-example">https://github.com/zak905/oauth2-example</a></p>
<p>原文链接：<a href="http://www.zakariaamine.com/2018-01-27/using-oauth2-in-spring/">http://www.zakariaamine.com/2018-01-27/using-oauth2-in-spring/</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
