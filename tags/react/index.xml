<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>React on ChenSoul</title>
    <link>https://blog.chensoul.cc/tags/react/</link>
    <description>Recent content in React on ChenSoul</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 12 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前端学习路线图</title>
      <link>https://blog.chensoul.cc/posts/2023/10/12/frontend-roadmap/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/10/12/frontend-roadmap/</guid>
      <description>前端学习路线图:
Internet： HTTP DNS HTML Basic Semantic HTML Forms and Validations Accessibility SEO CSS Basic Layout Responsive Design JavaScript Baisc DOM Fetch API / Ajax Package Manager npm pnpm yarn Framework Angular Vue.js React Svelte Solid JS Qwik Writing CSS Tailwind Radix UI Shadcn UI CSS Architecture BEM CSS Preprocessors SASS PostCSS Build Module Bundlers parcel Rollup Webpack esbuild Vite Task Runners npm scripts Linters and Formatters Prettier ESLint Test Vitest Jest Playwirte Cypress Authentication Strategies JWT OAuth SSO Basic Auth Session Auth Web Security Basics CORS HTTPS CSP OWASP Security Risks Web Components HTML Templates Custom Elements Shadow DOM Type Checkers TypeScript Server Side Rendering(SSR) Svelte Svelte Kit Vue.</description>
    </item>
    <item>
      <title>React入门：初始化应用的两种方法</title>
      <link>https://blog.chensoul.cc/posts/2023/09/22/react-create-project/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/09/22/react-create-project/</guid>
      <description>在 React 中，您可以使用多种方法来初始化一个应用程序。以下是几种常见的方法：
使用 Create React App（CRA）。Create React App 是一个官方提供的脚手架工具，用于快速创建 React 应用程序的基本结构和配置。 使用 Vite。Vite 是一个快速、简单且现代化的前端构建工具。 create-react-app create-react-app 是一个用于快速创建 React 应用程序的命令行工具。它提供了一个简单的方式来设置和配置一个全新的 React 项目，包括构建、开发服务器和其他常见的配置。
要使用 create-react-app 创建一个新的 React 项目，您可以按照以下步骤进行操作：
安装 Node.js
创建 React 应用：一旦你安装了 Node.js，你可以使用 create-react-app 工具快速创建一个新的 React 应用。
在命令行中运行以下命令来全局安装 create-react-app：
npm install -g create-react-app 创建新的 React 应用：使用以下命令创建一个新的 React 应用： create-react-app my-app 提示：
npx 是在运行命令时临时安装和执行包的工具。这意味着您无需全局安装 create-react-app，而是在运行 npx create-react-app 命令时自动下载和使用最新版本的 create-react-app。
npx create-react-app my-app 这将在当前目录下创建一个名为 &amp;quot;my-app&amp;quot; 的新文件夹，并在此文件夹里做了如下工作：
为你的应用程序安装了一些 npm 包； 写入 react 应用启动所需要的脚本文件； 创建一系列结构化的子文件夹和文件； 如果你的电脑上安装了 git 的话，顺便帮你把 git 仓库也建好。 如果你的电脑上安装了 yarn 的话，create-react-app 会默认使用 yarn 而非 npm。如果你同时安装了 yarn 和 npm，但你希望使用 npm 的话，在 create-react-app 的时候需要输入 --use-npm ：
create-react-app my-app --use-npm 进入应用目录：进入新创建的应用程序目录。在命令行中运行以下命令： cd my-app 启动开发服务器：运行以下命令来启动 React 开发服务器： npm start 先前由 create-react-app 创建的脚本会启动一个地服务 localhost:3000，并打开你的默认浏览器来访问这个服务。成功启动浏览器的话，你的浏览器上会显示如下画面：</description>
    </item>
    <item>
      <title>[译]为恐龙解释现代JavaScript</title>
      <link>https://blog.chensoul.cc/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/</guid>
      <description>图片来自Ryan North的Dinosaur Comics。 如果你从一开始就没有去过那里，那么学习现代 JavaScript 是很困难的。生态系统的发展和变化如此之快，以至于很难理解不同工具试图解决的问题。我从 1998 年开始编程，但直到 2014 年才开始认真学习 JavaScript。当时我记得遇到 Browserify 并盯着它的标语：
Browserify 通过捆绑所有依赖项，让你在浏览器中导入（&amp;lsquo;模块&amp;rsquo;）。
我几乎听不懂这句话中的任何单词，并且努力理解这对我作为开发人员有什么帮助。
本文的目的是提供一个历史背景，说明 JavaScript 工具如何在 2017 年发展到今天的样子。我们将从头开始，像恐龙一样构建一个示例网站 - 没有工具，只有普通的 HTML 和 JavaScript。然后，我们将逐步介绍不同的工具，以查看它们一次解决一个问题。有了这个历史背景，你将能够更好地学习和适应未来不断变化的 JavaScript 环境。让我们开始吧！
更新：我制作了本文的视频课程版本，为了更清晰，我逐步浏览了每个部分，请在此处查看： https://firstclass.actualize.co/p/modern-javascript-explained-for-dinosaurs
以&amp;quot;老派&amp;quot;的方式使用 JavaScript &amp;lt;!-- index.html --&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;JavaScript Example&amp;lt;/title&amp;gt; ** &amp;lt;script src=&amp;#34;index.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; ** &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello from HTML!&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 第 &amp;lt;script src=&amp;quot;index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 行引用同一目录中名为 index.js 的单独 JavaScript 文件：
// index.js console.log(&amp;#34;Hello from JavaScript!&amp;#34;); 这就是制作网站所需的全部内容！现在，假设您想添加一个其他人编写的库，例如 moment.js（一个可以帮助以人类可读的方式格式化日期的库）。例如，您可以在 JavaScript 中使用 moment 函数，如下所示：
moment().startOf(&amp;#34;day&amp;#34;).fromNow(); // 20 hours ago 但这只是假设您在网站上包含 moment.js！在 moment.js 主页 上您会看到以下说明：
嗯，右侧的&amp;quot;安装&amp;quot;部分有很多内容。但是现在让我们忽略它 - 我们可以通过在同一目录中下载 moment.min.js 文件并将其包含在我们的 index.html 文件中来为我们的网站添加 moment.js。
&amp;lt;!-- index.html --&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Example&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;index.</description>
    </item>
  </channel>
</rss>
