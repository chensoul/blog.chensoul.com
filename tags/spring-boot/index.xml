<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>spring boot on ChenSoul</title>
    <link>https://blog.chensoul.com/tags/spring-boot/</link>
    <description>Recent content in spring boot on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 16 Aug 2023 14:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.com/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译]为 Spring Boot 应用程序创建优化的 Docker 映像</title>
      <link>https://blog.chensoul.com/posts/2023/08/16/spring-boot-docker/</link>
      <pubDate>Wed, 16 Aug 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/16/spring-boot-docker/</guid>
      <description>容器已成为打包具有所有软件和操作系统依赖项的应用程序，然后将其传送到不同环境的首选方式。 本文着眼于容器化 Spring Boot 应用程序的不同方法： 使用 Docker 文件构</description>
      <content:encoded><![CDATA[<p>容器已成为打包具有所有软件和操作系统依赖项的应用程序，然后将其传送到不同环境的首选方式。</p>
<p>本文着眼于容器化 Spring Boot 应用程序的不同方法：</p>
<ul>
<li>使用 Docker 文件构建 Docker 镜像，</li>
<li>使用 Cloud-Native Buildpack 从源代码构建 OCI 映像，</li>
<li>通过使用分层工具将 JAR 的各个部分拆分为不同的层，在运行时优化映像。</li>
</ul>
<h2 id="示例代码">示例代码</h2>
<p>本文附有 <a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/spring-boot-docker">GitHub</a> 上的工作代码示例。</p>
<h2 id="容器术语">容器术语</h2>
<p>我们将从整篇文章中使用的容器术语开始：</p>
<ul>
<li><strong>Container image</strong>: 具有特定格式的文件。我们通过运行构建工具将应用程序转换为容器映像。</li>
<li><strong>Container</strong>: 容器镜像的运行时实例。</li>
<li><strong>Container engine</strong>: t负责运行Container的守护进程。</li>
<li><strong>Container host</strong>: 容器引擎运行的主机。</li>
<li><strong>Container registry</strong>: 用于发布和分发容器映像的共享位置。</li>
<li><strong>OCI Standard</strong>: 开放容器倡议 (OCI) 是在 Linux 基金会下形成的一个轻量级、开放的治理结构。 OCI 镜像规范定义了容器镜像格式和运行时的行业标准，以确保所有容器引擎都可以运行任何构建工具生成的容器镜像。</li>
</ul>
<p>为了容器化应用程序，我们将应用程序封装在容器映像中，并将该映像发布到共享注册表。容器运行时从注册表中提取该映像，解压该映像，然后在其中运行应用程序。</p>
<p>Spring Boot 2.3 版本提供了用于构建 OCI 映像的插件。</p>
<p>Docker 恰好是最常用的容器实现，并且我们在示例中使用 Docker，因此本文中所有后续对容器的引用都将指 Docker。</p>
<h2 id="以传统方式构建容器镜像">以传统方式构建容器镜像</h2>
<p>通过向 Docker 文件添加一些指令，可以非常轻松地创建 Spring Boot 应用程序的 Docker 镜像。</p>
<p>我们首先构建一个可执行 JAR，并作为 Docker 文件指令的一部分，在应用必要的自定义后将可执行 JAR 复制到基本 JRE 映像上。</p>
<p>让我们从 Spring Initializr 创建带有 <code>web</code> 、 <code>lombok</code> 和 <code>actuator</code> 依赖项的 Spring Boot 应用程序。我们还添加了一个休息控制器来使用 <code>GET</code> 方法公开 API。</p>
<h3 id="创建-docker-文件">创建 Docker 文件</h3>
<p>接下来，我们通过添加 <code>Dockerfile</code> 来容器化该应用程序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> adoptopenjdk:11-jre-hotspot</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ARG</span> <span class="nv">JAR_FILE</span><span class="o">=</span>target/*.jar<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> <span class="si">${</span><span class="nv">JAR_FILE</span><span class="si">}</span> application.jar<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 8080</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;java&#34;</span><span class="p">,</span><span class="s2">&#34;-jar&#34;</span><span class="p">,</span><span class="s2">&#34;/application.jar&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></div><p>我们的 Docker 文件包含来自 <code>adoptopenjdk</code> 的基本映像，我们在该映像上复制 JAR 文件，然后公开将侦听请求的端口 <code>8080</code> 。</p>
<h3 id="构建应用程序">构建应用程序</h3>
<p>我们首先使用 Maven 或 Gradle 构建应用程序。我们在这里使用 Maven：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mvn clean package
</span></span></code></pre></div><p>这将创建应用程序的可执行 JAR。我们需要将这个可执行 JAR 转换为 Docker 映像，以便在 Docker 引擎中运行。</p>
<h3 id="构建容器镜像">构建容器镜像</h3>
<p>接下来，我们通过从包含之前创建的 Docker 文件的根项目目录运行 <code>docker build</code> 命令，将此可执行 JAR 放入 Docker 映像中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker build  -t usersignup:v1 .
</span></span></code></pre></div><p>我们可以看到使用以下命令列出的图像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">docker images 
</span></span></code></pre></div><p>上述命令的输出包括我们的映像 <code>usersignup</code> 以及 Docker 文件中指定的基础映像 <code>adoptopenjdk</code> 。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">REPOSITORY          TAG                 SIZE
</span></span><span class="line"><span class="cl">usersignup          v1                  249MB
</span></span><span class="line"><span class="cl">adoptopenjdk        11-jre-hotspot      229MB
</span></span></code></pre></div><h3 id="查看容器镜像内的层">查看容器镜像内的层</h3>
<p>让我们看看图像内的图层堆栈。我们将使用 <a href="https://github.com/wagoodman/dive">dive tool</a> 来查看这些图层：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">dive usersignup:v1
</span></span></code></pre></div><p>以下是运行 Dive 命令的部分输出：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/springboot-docker-image/dive1_hubcbf0cf5b8016db6aaa4ee18f24f07bd_217954_995x0_resize_box_3.png" alt="dive screenshot"  />
</p>
<p>正如我们所看到的，应用层构成了图像大小的重要组成部分。作为优化的一部分，我们的目标是在以下部分中减小该层的大小。</p>
<h2 id="使用-buildpack-构建容器镜像">使用 Buildpack 构建容器镜像</h2>
<p>Buildpacks 是各种平台即服务 (PAAS) 产品使用的通用术语，用于从源代码构建容器映像。它由 Heroku 于 2011 年发起，此后已被 Cloud Foundry、Google App Engine、Gitlab、Knative 等采用。</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/springboot-docker-image/Docker_buildpack_hub141f56b152735f30f93b4dac67d723e_39179_522x0_resize_box_3.png" alt="dive screenshot"  />
</p>
<h3 id="云原生-buildpack-的优势">云原生 Buildpack 的优势</h3>
<p>使用 Buildpack 构建映像的一个主要优点是，可以在集中位置（构建器）管理对映像配置的更改，并将其传播到使用该构建器的所有应用程序。</p>
<p>Buildpack 与平台紧密耦合。云原生 Buildpack 通过支持 OCI 映像格式实现跨平台标准化，确保映像可以由 Docker 引擎运行。</p>
<h3 id="使用-spring-boot-插件">使用 Spring Boot 插件</h3>
<p>Spring Boot 插件使用 Buildpack 从源代码创建 OCI 映像。映像是使用 <code>bootBuildImage</code> 任务 (Gradle) 或 <code>spring-boot:build-image</code> 目标 (Maven) 和本地 Docker 安装构建的。</p>
<p>我们可以通过在 <code>image tag</code> 中指定名称来自定义推送到 Docker 注册表所需的镜像名称：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;image&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;name&gt;</span>docker.io/pratikdas/${project.artifactId}:v1<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/image&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div><p>让我们使用 Maven 运行 <code>build-image</code> 目标来构建应用程序并创建容器映像。我们现在没有使用任何 Docker 文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mvn spring-boot:build-image
</span></span></code></pre></div><p>运行此命令将产生类似于以下内容的输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> --- spring-boot-maven-plugin:2.3.3.RELEASE:build-image <span class="o">(</span>default-cli<span class="o">)</span> @ usersignup ---
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Building image <span class="s1">&#39;docker.io/pratikdas/usersignup:v1&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> 
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span>  &gt; Pulling builder image <span class="s1">&#39;gcr.io/paketo-buildpacks/builder:base-platform-api-0.3&#39;</span> 0%
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">.. <span class="o">[</span>creator<span class="o">]</span>     Adding label <span class="s1">&#39;org.springframework.boot.version&#39;</span>
</span></span><span class="line"><span class="cl">.. <span class="o">[</span>creator<span class="o">]</span>     *** Images <span class="o">(</span>c311fe74ec73<span class="o">)</span>:
</span></span><span class="line"><span class="cl">.. <span class="o">[</span>creator<span class="o">]</span>           docker.io/pratikdas/usersignup:v1
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> 
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Successfully built image <span class="s1">&#39;docker.io/pratikdas/usersignup:v1&#39;</span>
</span></span></code></pre></div><p>从输出中，我们可以看到 <code>paketo Cloud-Native buildpack</code> 被用来构建可运行的 OCI 映像。正如我们之前所做的那样，我们可以通过运行以下命令来查看列为 Docker 映像的映像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker images 
</span></span></code></pre></div><p>输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">REPOSITORY                             SIZE
</span></span><span class="line"><span class="cl">paketobuildpacks/run                  84.3MB
</span></span><span class="line"><span class="cl">gcr.io/paketo-buildpacks/builder      652MB
</span></span><span class="line"><span class="cl">pratikdas/usersignup                  257MB
</span></span></code></pre></div><h2 id="使用-jib-构建容器镜像">使用 Jib 构建容器镜像</h2>
<p>Jib 是 Google 的一个镜像构建器插件，提供了一种从源代码构建容器镜像的替代方法。</p>
<p>我们在pom.xml中配置 <code>jib-maven-plugin</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl">      <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;groupId&gt;</span>com.google.cloud.tools<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;artifactId&gt;</span>jib-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;version&gt;</span>2.5.2<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div><p>接下来，我们使用 Maven 命令触发 Jib 插件来构建应用程序并创建容器映像。和以前一样，我们在这里没有使用任何 Docker 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mvn compile jib:build -Dimage<span class="o">=</span>&lt;docker registry name&gt;/usersignup:v1
</span></span></code></pre></div><p>运行上述 Maven 命令后，我们得到以下输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Containerizing application to pratikdas/usersignup:v1...
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Container entrypoint <span class="nb">set</span> to <span class="o">[</span>java, -cp, /app/resources:/app/classes:/app/libs/*, io.pratik.users.UsersignupApplication<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> 
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Built and pushed image as pratikdas/usersignup:v1
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> Executing tasks:
</span></span><span class="line"><span class="cl"><span class="o">[</span>INFO<span class="o">]</span> <span class="o">[==============================]</span> 100.0% <span class="nb">complete</span>
</span></span></code></pre></div><p>输出显示容器映像已构建并推送到注册表。</p>
<h2 id="构建优化镜像的动机和技术">构建优化镜像的动机和技术</h2>
<p>我们优化的主要动机有两个：</p>
<ul>
<li>性能：在容器编排系统中，容器镜像从镜像仓库拉取到运行容器引擎的主机上。这个过程称为调度。从注册表中提取大型映像会导致容器编排系统中的调度时间较长以及 CI 管道中的构建时间较长。</li>
<li>安全性：大尺寸图像也有更大的漏洞表面积。</li>
</ul>
<p>Docker 镜像由一堆层组成，每个层代表 Dockerfile 中的一条指令。每一层都是底层变化的增量。当我们从注册中心拉取Docker镜像时，它是被分层拉取并缓存在主机中的。</p>
<p>Spring Boot 使用“fat JAR”作为其默认打包格式。当我们检查 fat JAR 时，我们可以看到该应用程序只占整个 JAR 的很小一部分。这是变化最频繁的部分。其余部分由 Spring 框架依赖项组成。</p>
<p>优化公式的核心是将应用程序与 Spring 框架依赖项隔离到一个单独的层中。</p>
<p>构成 fat JAR 大部分的依赖项层仅下载一次并缓存在主机系统中。</p>
<p>在应用程序更新和容器调度期间，仅拉取应用程序的薄层，如下图所示：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/springboot-docker-image/Docker_optimized_hu7e3f87c1ee5c9089319f5b74bf96dc0e_337860_521x0_resize_box_3.png" alt="dive screenshot"  />
</p>
<p>让我们在接下来的部分中了解如何为 Spring Boot 应用程序构建这些优化的映像。</p>
<h2 id="使用-buildpack-为-spring-boot-应用程序构建优化的容器映像">使用 Buildpack 为 Spring Boot 应用程序构建优化的容器映像</h2>
<p>Spring Boot 2.3 通过将 fat JAR 的各个部分提取到单独的层中来支持分层。分层功能默认关闭，需要使用 Spring Boot Maven 插件显式启用：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;layers&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;enabled&gt;</span>true<span class="nt">&lt;/enabled&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/layers&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/configuration&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div><p>我们将使用此配置首先使用 Buildpack 生成容器映像，然后在以下部分中使用 Docker 生成容器映像。</p>
<p>让我们运行 Maven <code>build-image</code> 目标来创建容器映像：images/stock/-1200x628-branded.jpg</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mvn spring-boot:build-image
</span></span></code></pre></div><p>如果我们运行 Dive 来查看生成图像中的各层，我们可以看到应用程序层（以红色圈出）在千字节范围内比我们使用 fat JAR 格式获得的要小得多：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/springboot-docker-image/dive-buildpack-layer_hue5f4a8721d8f8ee948ce4b161834cbfd_180286_774x0_resize_box_3.png" alt="dive screenshot"  />
</p>
<h2 id="使用-docker-为-spring-boot-应用程序构建优化的容器映像">使用 Docker 为 Spring Boot 应用程序构建优化的容器映像</h2>
<p>我们还可以使用 Docker 文件创建分层的 JAR Docker 镜像，而不是使用 Maven 或 Gradle 插件。</p>
<p>当我们使用 Docker 时，我们需要执行两个额外的步骤来提取层并将其复制到最终映像中。</p>
<p>使用 Maven 构建并启用分层功能后，生成的 JAR 内容将如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">META-INF/
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">BOOT-INF/lib/
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">BOOT-INF/lib/spring-boot-jarmode-layertools-2.3.3.RELEASE.jar
</span></span><span class="line"><span class="cl">BOOT-INF/classpath.idx
</span></span><span class="line"><span class="cl">BOOT-INF/layers.idx
</span></span></code></pre></div><p>输出显示一个名为 <code>spring-boot-jarmode-layertools</code> 的附加 JAR 和一个 <code>layersfle.idx</code> 文件。分层功能由这个附加 JAR 提供，如下一节所述。</p>
<h3 id="取不同层中的依赖关系">取不同层中的依赖关系</h3>
<p>要查看并从分层 JAR 中提取层，我们使用系统属性 <code>-Djarmode=layertools</code> 来启动 <code>spring-boot-jarmode-layertools</code> JAR 而不是应用程序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">java -Djarmode<span class="o">=</span>layertools -jar target/usersignup-0.0.1-SNAPSHOT.jar
</span></span></code></pre></div><p>运行此命令会生成包含可用命令选项的输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Usage:
</span></span><span class="line"><span class="cl">  java -Djarmode<span class="o">=</span>layertools -jar usersignup-0.0.1-SNAPSHOT.jar
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Available commands:
</span></span><span class="line"><span class="cl">  list     List layers from the jar that can be extracted
</span></span><span class="line"><span class="cl">  extract  Extracts layers from the jar <span class="k">for</span> image creation
</span></span><span class="line"><span class="cl">  <span class="nb">help</span>     Help about any <span class="nb">command</span>
</span></span></code></pre></div><p>输出显示命令 <code>list</code> 、 <code>extract</code> 和 <code>help</code> ，其中 <code>help</code> 是默认命令。让我们使用 <code>list</code> 选项运行命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">java -Djarmode<span class="o">=</span>layertools -jar target/usersignup-0.0.1-SNAPSHOT.jar list
</span></span><span class="line"><span class="cl">dependencies
</span></span><span class="line"><span class="cl">spring-boot-loader
</span></span><span class="line"><span class="cl">snapshot-dependencies
</span></span><span class="line"><span class="cl">application
</span></span></code></pre></div><p>我们可以看到可以作为层添加的依赖项列表。</p>
<p>默认层是：</p>
<table>
<thead>
<tr>
<th style="text-align:left">图层名称</th>
<th style="text-align:left">内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>dependencies</code></td>
<td style="text-align:left">版本不包含 SNAPSHOT 的任何依赖项</td>
</tr>
<tr>
<td style="text-align:left"><code>spring-boot-loader</code></td>
<td style="text-align:left">JAR 加载器类</td>
</tr>
<tr>
<td style="text-align:left"><code>snapshot-dependencies</code></td>
<td style="text-align:left">版本包含 SNAPSHOT 的任何依赖项</td>
</tr>
<tr>
<td style="text-align:left"><code>application</code></td>
<td style="text-align:left">应用程序类和资源</td>
</tr>
</tbody>
</table>
<p>这些层按照应添加到 Docker 映像的顺序在 <code>layers.idx</code> 文件中定义。这些层在第一次拉取后会缓存在主机中，因为它们不会更改。仅将更新的应用程序层下载到主机，由于大小减小，速度更快。</p>
<h3 id="使用在单独层中提取的依赖项构建图像">使用在单独层中提取的依赖项构建图像</h3>
<p>我们将使用称为多阶段构建的方法分两个阶段构建最终图像。在第一阶段，我们将提取依赖项，在第二阶段，我们将提取的依赖项复制到最终映像。</p>
<p>让我们修改 Docker 文件以进行多阶段构建：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="c"># the first stage of our build will extract the layers</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> adoptopenjdk:14-jre-hotspot as builder</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> application</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ARG</span> <span class="nv">JAR_FILE</span><span class="o">=</span>target/*.jar<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> <span class="si">${</span><span class="nv">JAR_FILE</span><span class="si">}</span> application.jar<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> java -Djarmode<span class="o">=</span>layertools -jar application.jar extract<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c"># the second stage of our build will copy the extracted layers</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> adoptopenjdk:14-jre-hotspot</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> application</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder application/dependencies/ ./<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder application/spring-boot-loader/ ./<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder application/snapshot-dependencies/ ./<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder application/application/ ./<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;java&#34;</span><span class="p">,</span> <span class="s2">&#34;org.springframework.boot.loader.JarLauncher&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></div><p>我们将此配置保存在单独的文件中 - <code>Dockerfile2</code> 。</p>
<p>我们使用以下命令构建 Docker 镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">docker build -f Dockerfile2 -t usersignup:v1 .
</span></span></code></pre></div><p>运行此命令后，我们得到以下输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Sending build context to Docker daemon  20.41MB
</span></span><span class="line"><span class="cl">Step 1/12 : FROM adoptopenjdk:14-jre-hotspot as builder
</span></span><span class="line"><span class="cl">14-jre-hotspot: Pulling from library/adoptopenjdk
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">Successfully built a9ebf6970841
</span></span><span class="line"><span class="cl">Successfully tagged userssignup:v1
</span></span></code></pre></div><p>我们可以看到 Docker 镜像是使用镜像 ID 创建的，然后被标记的。</p>
<p>最后，我们像以前一样运行 Dive 命令来检查生成的 Docker 镜像内的层。我们可以指定图像 ID 或标签作为 Dive 命令的输入：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dive userssignup:v1
</span></span></code></pre></div><p>正如我们在输出中看到的，包含应用程序的层现在只有 11 kB，依赖项缓存在单独的层中。</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/springboot-docker-image/dive2_hu3bbff09746513aa7b18660495606ffa4_412354_816x0_resize_box_3.png" alt="dive screenshot"  />
</p>
<h3 id="提取不同层中的内部依赖关系">提取不同层中的内部依赖关系</h3>
<p>我们可以通过在单独的层中提取任何自定义依赖项来进一步减小应用程序层的大小，而不是通过在名为 <code>layers.idx</code> 的 <code>yml</code> 类似文件中声明它们来将它们与应用程序一起打包：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">- &#34;dependencies&#34;:
</span></span><span class="line"><span class="cl">  - &#34;BOOT-INF/lib/&#34;
</span></span><span class="line"><span class="cl">- &#34;spring-boot-loader&#34;:
</span></span><span class="line"><span class="cl">  - &#34;org/&#34;
</span></span><span class="line"><span class="cl">- &#34;snapshot-dependencies&#34;:
</span></span><span class="line"><span class="cl">- &#34;custom-dependencies&#34;:
</span></span><span class="line"><span class="cl">  - &#34;io/myorg/&#34;
</span></span><span class="line"><span class="cl">- &#34;application&#34;:
</span></span><span class="line"><span class="cl">  - &#34;BOOT-INF/classes/&#34;
</span></span><span class="line"><span class="cl">  - &#34;BOOT-INF/classpath.idx&#34;
</span></span><span class="line"><span class="cl">  - &#34;BOOT-INF/layers.idx&#34;
</span></span><span class="line"><span class="cl">  - &#34;META-INF/&#34;
</span></span></code></pre></div><p>在此文件中 - <code>layers.idx</code> 我们添加了一个名为 <code>io.myorg</code> 的自定义依赖项，其中包含从共享存储库中提取的组织依赖项。</p>
<h2 id="结论">结论</h2>
<p>在本文中，我们研究了使用云原生 Buildpack 直接从源代码创建容器映像。这是使用 Docker 构建容器映像的传统方式的替代方案，首先构建 fat 可执行 JAR，然后通过在 Dockerfile 中指定指令将其打包到容器映像中。</p>
<p>我们还考虑通过启用分层功能来优化我们的容器，该功能提取缓存在主机中的单独层中的依赖项，并在容器运行时引擎的调度期间下载应用程序的薄层。</p>
<p>文章中使用的所有源码可以参考<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/spring-boot-docker">Github</a>上的。</p>
<h2 id="命令参考">命令参考</h2>
<p>以下是我们在本文中使用的命令摘要，以供快速参考。</p>
<p>清洁我们的环境：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">docker system prune -a
</span></span></code></pre></div><p>使用 Docker 文件构建容器镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">docker build -f &lt;Docker file name&gt; -t &lt;tag&gt; .
</span></span></code></pre></div><p>从源代码构建容器镜像（没有 Dockerfile）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">mvn spring-boot:build-image
</span></span></code></pre></div><p>查看依赖关系层。在构建应用程序 JAR 之前，确保在 spring-boot-maven-plugin 中启用分层功能：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">java -Djarmode=layertools -jar application.jar list
</span></span></code></pre></div><p>提取依赖层。在构建应用程序 JAR 之前，确保在 spring-boot-maven-plugin 中启用分层功能：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> java -Djarmode=layertools -jar application.jar extract
</span></span></code></pre></div><p>查看容器镜像列表</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">docker images
</span></span></code></pre></div><p>查看容器镜像内的层（确保已安装 dive tool 工具）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">dive &lt;image ID or image tag&gt;
</span></span></code></pre></div><p>原文链接：<a href="https://reflectoring.io/spring-boot-docker/">https://reflectoring.io/spring-boot-docker/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Security：深入了解身份验证和授权</title>
      <link>https://blog.chensoul.com/posts/2023/08/16/spring-security-authentication-and-authorization/</link>
      <pubDate>Wed, 16 Aug 2023 12:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/16/spring-security-authentication-and-authorization/</guid>
      <description>您可以使用本指南来了解 Spring Security 是什么以及其核心功能（如身份验证、授权或常见漏洞保护）如何工作。此外，还有全面的常见问题解答。 （编者注：大约 6500 字，</description>
      <content:encoded><![CDATA[<p>您可以使用本指南来了解 Spring Security 是什么以及其核心功能（如身份验证、授权或常见漏洞保护）如何工作。此外，还有全面的常见问题解答。</p>
<p>（编者注：大约 6500 字，您可能不想尝试在移动设备上阅读本文。将其添加为书签，稍后再回来。）</p>
<h2 id="介绍">介绍</h2>
<p>迟早每个人都需要为其项目添加安全性，在 Spring 生态系统中，您可以借助 Spring Security 库来实现这一点。</p>
<p>因此，您继续将 Spring Security 添加到您的 Spring Boot（或普通 Spring）项目中，然后突然……​</p>
<ul>
<li>&hellip;您有自动生成的登录页面。</li>
<li>&hellip;您无法再执行 POST 请求。</li>
<li>&hellip;​您的整个应用程序处于锁定状态，并提示您输入用户名和密码。</li>
</ul>
<p>在经历了随后的精神崩溃之后，您可能会对这一切是如何运作的感兴趣。</p>
<h3 id="什么是-spring-security-以及它是如何工作的">什么是 Spring Security 以及它是如何工作的？</h3>
<p>简短的回答：
从本质上讲，Spring Security 实际上只是一堆 servlet 过滤器，可帮助您向 Web 应用程序添加身份验证和授权。
它还与 Spring Web MVC（或 Spring Boot）等框架以及 OAuth2 或 SAML 等标准很好地集成。它会自动生成登录/注销页面并防止 CSRF 等常见漏洞。
现在，这并没有什么帮助，不是吗？
幸运的是，还有一个很长的答案：本文的其余部分。</p>
<h2 id="网络应用程序安全101">网络应用程序安全：101</h2>
<p>在成为 Spring Security 大师之前，您需要了解三个重要概念：</p>
<ol>
<li>Authentication 验证</li>
<li>Authorization 授权</li>
<li>Servlet Filters 过滤器</li>
</ol>
<p>建议：不要跳过本节，因为它是 Spring Security 所做的一切的基础。另外，我会让它尽可能有趣。</p>
<h3 id="1-认证">1. 认证</h3>
<p>首先，如果您正在运行典型的（Web）应用程序，您需要用户进行身份验证。这意味着您的应用程序需要验证用户是否是他所声称的人，通常通过用户名和密码检查来完成。</p>
<p>用户：“我是美国总统。我的 <code>*username*</code> 是：potus！”
您的网络应用程序：“当然可以，那么您的 <code>*password*</code> 是什么，总统先生？”
用户：“我的密码是：th3don4ld”。
您的网络应用程序：“正确。欢迎，先生！”</p>
<h3 id="2授权">2、授权</h3>
<p>在更简单的应用程序中，身份验证可能就足够了：用户经过身份验证后，她就可以访问应用程序的每个部分。</p>
<p>但大多数应用程序都有权限（或角色）的概念。想象一下：可以访问您的网上商店面向公众的前端的客户，以及可以访问单独管理区域的管理员。</p>
<p>两种类型的用户都需要登录，但身份验证这一事实并不能说明他们可以在系统中执行哪些操作。因此，您还需要检查经过身份验证的用户的权限，即您需要授权该用户。</p>
<p>用户：“让我玩那个核足球&hellip;&hellip;”。
您的网络应用程序：“等一下，我需要先检查您的 <code>*permissions*</code> ……是的，总统先生，您拥有正确的许可级别。尽情享受吧。”
用户：“那个红色按钮又是什么……​？”</p>
<h3 id="3servlet-过滤器">3.Servlet 过滤器</h3>
<p>最后但并非最不重要的一点是，让我们看一下 Servlet 过滤器。它们与身份验证和授权有什么关系？ （如果您对 Java Servlet 或 Filter 完全陌生，我建议您阅读旧的但仍然非常有效的 Head First Servlets 书。）</p>
<h4 id="为什么使用-servlet-过滤器">为什么使用 Servlet 过滤器？</h4>
<p>回想一下我的<a href="https://www.marcobehler.com/guides/spring-framework">另一篇文章</a>，我们发现基本上任何 Spring Web 应用程序都只是一个 servlet：Spring 的旧式 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-servlet">DispatcherServlet</a>，它将传入的 HTTP 请求（例如来自浏览器）重定向到 @Controllers 或 @RestControllers。
问题是：DispatcherServlet 中没有硬编码安全性，而且您也很可能不想在 @Controllers 中摸索原始 HTTP Basic Auth 标头。最佳情况下，身份验证和授权应该在请求到达 @Controller 之前完成。
幸运的是，在 Java Web 世界中有一种方法可以做到这一点：您可以将过滤器放在 servlet 前面，这意味着您可以考虑编写一个 SecurityFilter 并在 Tomcat（servlet 容器/应用程序服务器）中配置它来过滤每个传入的内容HTTP 请求在到达您的 servlet 之前。</p>
<p><a href="https://www.marcobehler.com/images/servletfilter-1a.png"><img loading="lazy" src="https://www.marcobehler.com/images/servletfilter-1a.png" alt="servletfilter 1a"  />
</a></p>
<h4 id="一个原生的安全过滤器">一个原生的安全过滤器</h4>
<p>SecurityFilter 大约有 4 个任务，简单且过于简化的实现可能如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityServletFilter</span> <span class="kd">extends</span> <span class="n">HttpFilter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">FilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">UsernamePasswordToken</span> <span class="n">token</span> <span class="o">=</span> <span class="n">extractUsernameAndPasswordFrom</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>  <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">notAuthenticated</span><span class="o">(</span><span class="n">token</span><span class="o">))</span> <span class="o">{</span>  <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// either no or wrong username/password
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// unfortunately the HTTP status code is called &#34;unauthorized&#34;, instead of &#34;unauthenticated&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_UNAUTHORIZED</span><span class="o">);</span> <span class="c1">// HTTP 401.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">notAuthorized</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">request</span><span class="o">))</span> <span class="o">{</span> <span class="c1">// (3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// you are logged in, but don&#39;t have the proper rights
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_FORBIDDEN</span><span class="o">);</span> <span class="c1">// HTTP 403
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// allow the HttpRequest to go to Spring&#39;s DispatcherServlet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// and @RestControllers/@Controllers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span> <span class="c1">// (4)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UsernamePasswordToken</span> <span class="nf">extractUsernameAndPasswordFrom</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Either try and read in a Basic Auth HTTP Header, which comes in the form of user:password
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// Or try and find form login request parameters or POST bodies, i.e. &#34;username=me&#34; &amp; &#34;password=&#34;myPass&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">checkVariousLoginOptions</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">notAuthenticated</span><span class="o">(</span><span class="n">UsernamePasswordToken</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// compare the token with what you have in your database...or in-memory...or in LDAP...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">notAuthorized</span><span class="o">(</span><span class="n">UsernamePasswordToken</span> <span class="n">token</span><span class="o">,</span> <span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="c1">// check if currently authenticated user has the permission/role to access this request&#39;s /URI
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="c1">// e.g. /admin needs a ROLE_ADMIN , /callcenter needs ROLE_CALLCENTER, etc.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>首先，过滤器需要从请求中提取用户名/密码。它可以通过基本身份验证 HTTP 标头、表单字段或 cookie 等实现。</li>
<li>然后，过滤器需要根据某些内容（例如数据库）验证用户名/密码组合。</li>
<li>成功验证后，过滤器需要检查用户是否有权访问所请求的 URI。</li>
<li>如果请求通过了所有这些检查，那么过滤器可以让请求传递到您的 DispatcherServlet，即您的 @Controller。</li>
</ol>
<h4 id="过滤器链">过滤器链</h4>
<p>现实检查：虽然上述代码可以编译，但它迟早会导致一个怪物过滤器，其中包含大量用于各种身份验证和授权机制的代码。</p>
<p>然而，在现实世界中，您可以将这个过滤器拆分为多个过滤器，然后将它们链接在一起。</p>
<p>例如，传入的 HTTP 请求将&hellip;​</p>
<ol>
<li>首先，通过 LoginMethodFilter&hellip;​</li>
<li>然后，通过 AuthenticationFilter&hellip;​</li>
<li>然后，通过授权过滤器&hellip;​</li>
<li>最后，点击您的 servlet。</li>
</ol>
<p>这个概念称为 FilterChain，上面过滤器中的最后一个方法调用实际上委托给了该链：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span></code></pre></div><p>使用这样的过滤器（链），您基本上可以处理应用程序中存在的每个身份验证或授权问题，而无需更改实际的应用程序实现（想想：您的@RestControllers / @Controllers）。</p>
<p>有了这些知识，让我们看看 Spring Security 如何利用这种过滤魔法。</p>
<h2 id="filterchain-和安全配置-dsl">FilterChain 和安全配置 DSL</h2>
<p>我们将从 Spring Security 的 FilterChain 开始，以与上一章相反的方向开始介绍 Spring Security。</p>
<h3 id="spring-的-defaultsecurityfilterchain">Spring 的 DefaultSecurityFilterChain</h3>
<p>假设您正确设置了 Spring Security，然后启动您的 Web 应用程序。您将看到以下日志消息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2020-02-25 10:24:27.875  INFO <span class="m">11116</span> --- <span class="o">[</span>           main<span class="o">]</span> o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, <span class="o">[</span>org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@46320c9a, org.springframework.security.web.context.SecurityContextPersistenceFilter@4d98e41b, org.springframework.security.web.header.HeaderWriterFilter@52bd9a27, org.springframework.security.web.csrf.CsrfFilter@51c65a43, org.springframework.security.web.authentication.logout.LogoutFilter@124d26ba, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@61e86192, org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter@10980560, org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter@32256e68, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@52d0f583, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5696c927, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5f025000, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5e7abaf7, org.springframework.security.web.session.SessionManagementFilter@681c0ae6, org.springframework.security.web.access.ExceptionTranslationFilter@15639d09, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4f7be6c8<span class="o">]</span><span class="p">|</span>
</span></span></code></pre></div><p>如果将这一行展开到列表中，看起来 Spring Security 不仅仅安装一个过滤器，而是安装由 15 个（！）不同过滤器组成的整个过滤器链。</p>
<p>因此，当 HTTPRequest 传入时，它将通过所有这 15 个过滤器，然后您的请求最终到达 @RestControllers。顺序也很重要，从列表的顶部开始一直到底部。</p>
<p><a href="https://www.marcobehler.com/images/filterchain-1a.png"><img loading="lazy" src="https://www.marcobehler.com/images/filterchain-1a.png" alt="filterchain 1a"  />
</a></p>
<h3 id="分析spring的filterchain">分析Spring的FilterChain</h3>
<p>详细查看该链中的每个过滤器就太过分了，但这里是对其中一些过滤器的解释。请随意查看 Spring Security 的源代码以了解其他过滤器。</p>
<ul>
<li><strong>BasicAuthenticationFilter</strong>: 尝试在请求中查找基本身份验证 HTTP 标头，如果找到，则尝试使用标头的用户名和密码对用户进行身份验证。</li>
<li><strong>UsernamePasswordAuthenticationFilter</strong>: T尝试查找用户名/密码请求参数/POST 正文，如果找到，则尝试使用这些值对用户进行身份验证。</li>
<li><strong>DefaultLoginPageGeneratingFilter</strong>: 如果您没有明确禁用该功能，则为您生成登录页面。这个过滤器就是您在启用 Spring Security 时获得默认登录页面的原因。</li>
<li><strong>DefaultLogoutPageGeneratingFilter</strong>: 如果您没有明确禁用该功能，则为您生成一个注销页面。</li>
<li><strong>FilterSecurityInterceptor</strong>: 是否经过您的授权。</li>
</ul>
<p>因此，通过这两个过滤器，Spring Security 为您提供了一个登录/注销页面，以及使用基本身份验证或表单登录进行登录的能力，以及一些额外的好东西，例如 CsrfFilter，我们将有一个稍后再看。</p>
<p>中场休息：这些过滤器大部分是 Spring Security。不多也不少。他们做所有的工作。剩下的就是配置它们的工作方式，即要保护哪些 URL、要忽略哪些 URL 以及使用哪些数据库表进行身份验证。</p>
<p>因此，接下来我们需要看看如何配置 Spring Security。</p>
<h3 id="如何配置-spring-securitywebsecurityconfigureradapter">如何配置 Spring Security：WebSecurityConfigurerAdapter</h3>
<p>使用最新的 Spring Security 和/或 Spring Boot 版本，配置 Spring Security 的方法是使用一个类：</p>
<ol>
<li>使用@EnableWebSecurity进行注释。</li>
<li>扩展 WebSecurityConfigurer，它基本上为您提供配置 DSL/方法。使用这些方法，您可以指定应用程序中要保护的 URI 或要启用/禁用的漏洞利用保护。</li>
</ol>
<p>典型的 WebSecurityConfigurerAdapter 如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>  <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">http</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">,</span> <span class="s">&#34;/home&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span> <span class="c1">// (3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span> <span class="c1">// (4)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">       <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span> <span class="c1">// (5)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span> <span class="c1">// (5)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="o">.</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">logout</span><span class="o">()</span> <span class="c1">// (6)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">.</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">httpBasic</span><span class="o">();</span> <span class="c1">// (7)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>带有 @EnableWebSecurity 注释的普通 Spring @Configuration，从 WebSecurityConfigurerAdapter 扩展。</li>
<li>通过重写适配器的configure(HttpSecurity)方法，您将获得一个漂亮的小DSL，您可以用它来配置您的FilterChain。</li>
<li>所有发送至 <code>*/*</code> 和 <code>*/home*</code> 的请求均被允许（允许） - 用户无需进行身份验证。您正在使用 antMatcher，这意味着您还可以在字符串中使用通配符（*、**、?）。</li>
<li>任何其他请求都需要首先对用户进行身份验证，即用户需要登录。</li>
<li>您允许使用自定义登录页面（ <code>*/login*</code> ，即不是 Spring Security 自动生成的）进行表单登录（表单中的用户名/密码）。任何人都应该能够访问登录页面，而不必先登录（permitAll；否则我们就会遇到第 22 条军规！）。</li>
<li>注销页面也是如此</li>
<li>最重要的是，您还允许基本身份验证，即发送 HTTP 基本身份验证标头进行身份验证。</li>
</ol>
<h4 id="如何使用-spring-security-的配置-dsl">如何使用 Spring Security 的配置 DSL</h4>
<p>习惯该 DSL 需要一些时间，但您可以在常见问题解答部分找到更多示例：<a href="https://www.marcobehler.com/guides/spring-security#security-examples">AntMatchers：常见示例</a>。</p>
<p>现在重要的是，您可以在这个 <code>*configure*</code> 方法中指定：</p>
<ol>
<li>要保护哪些 URL (authenticated()) 以及允许哪些 URL (permitAll())。</li>
<li>允许哪些身份验证方法（formLogin()、httpBasic()）以及它们的配置方式。</li>
<li>简而言之：您的应用程序的完整安全配置。</li>
</ol>
<p>注意：您不需要立即覆盖适配器的配置方法，因为它带有一个非常合理的实现 - 默认情况下。它看起来是这样的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">WebSecurityConfigurerAdapter</span> <span class="kd">implements</span>
</span></span><span class="line"><span class="cl">		<span class="n">WebSecurityConfigurer</span><span class="o">&lt;</span><span class="n">WebSecurity</span><span class="o">&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">http</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                    <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>  <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">formLogin</span><span class="o">().</span><span class="na">and</span><span class="o">()</span>   <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="o">.</span><span class="na">httpBasic</span><span class="o">();</span>  <span class="c1">// (3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>要访问应用程序上的任何 URI ( <code>*anyRequest()*</code> )，您需要进行身份验证 (authenticated())。</li>
<li>启用默认设置的表单登录 ( <code>*formLogin()*</code> )。</li>
<li>HTTP 基本身份验证 ( <code>*httpBasic()*</code> ) 也是如此。</li>
</ol>
<p>此默认配置就是您的应用程序在添加 Spring Security 后立即处于锁定状态的原因。很简单，不是吗？</p>
<h4 id="总结websecurityconfigureradapter的dsl配置">总结：WebSecurityConfigurerAdapter的DSL配置</h4>
<p>我们了解到 Spring Security 由几个使用 WebSecurityConfigurerAdapter @Configuration 类配置的过滤器组成。</p>
<p>但缺少一个关键的部分。我们以 Spring 的 BasicAuthFilter 为例。它可以从 HTTP Basic Auth 标头中提取用户名/密码，但它根据什么来验证这些凭据呢？</p>
<p>这自然引出了我们的问题：身份验证如何与 Spring Security 一起工作。</p>
<h2 id="使用-spring-security-进行身份验证">使用 Spring Security 进行身份验证</h2>
<p>当涉及到身份验证和 Spring Security 时，您大致会遇到三种情况：</p>
<ol>
<li>默认值：您可以访问用户的（散列）密码，因为您将他的详细信息（用户名、密码）保存在例如一个数据库表。</li>
<li>不太常见：您无法访问用户的（散列）密码。如果您的用户和密码存储在其他地方（例如提供 REST 身份验证服务的第三方身份管理产品），就会出现这种情况。想想：Atlassian Crowd。</li>
<li>也很受欢迎：您想使用 OAuth2 或“使用 Google/Twitter/等登录”。 (OpenID)，可能与 JWT 结合使用。那么以下内容都不适用，您应该直接进入 OAuth2 章节。</li>
</ol>
<p>注意：根据您的场景，您需要指定不同的 @Bean 才能使 Spring Security 正常工作，否则您最终会得到非常混乱的异常（例如，如果您忘记指定 PasswordEncoder，则会出现 NullPointerException）。记住这一点。</p>
<p>让我们看一下最重要的两个场景。</p>
<h3 id="1-userdetailsservice获取用户密码">1. UserDetailsService：获取用户密码</h3>
<p>假设您有一个存储用户的数据库表。它有几列，但最重要的是它有一个用户名和密码列，您可以在其中存储用户的散列（！）密码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">table</span><span class="w"> </span><span class="n">users</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="w"> </span><span class="nb">int</span><span class="w"> </span><span class="n">auto_increment</span><span class="w"> </span><span class="k">primary</span><span class="w"> </span><span class="k">key</span><span class="p">,</span><span class="w"> </span><span class="n">username</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">));</span><span class="w">
</span></span></span></code></pre></div><p>在这种情况下，Spring Security 需要您定义两个 bean 来启动并运行身份验证。</p>
<ol>
<li>用户详细信息服务。</li>
<li>密码编码器。</li>
</ol>
<p>指定 UserDetailsS​​ervice 就这么简单：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">MyDatabaseUserDetailsService</span><span class="o">();</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>MyDatabaseUserDetailsS​​ervice 实现了 UserDetailsS​​ervice，这是一个非常简单的接口，它由一个返回 UserDetails 对象的方法组成：</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyDatabaseUserDetailsService</span> <span class="kd">implements</span> <span class="n">UserDetailsService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UsernameNotFoundException</span> <span class="o">{</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="c1">// 1. Load the user from the users table by username. If not found, throw UsernameNotFoundException.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="c1">// 2. Convert/wrap the user to a UserDetails object and return it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">someUserDetails</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDetails</span> <span class="kd">extends</span> <span class="n">Serializable</span> <span class="o">{</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="nf">getUsername</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="nf">getPassword</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// &lt;3&gt; more methods:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// isAccountNonExpired,isAccountNonLocked,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// isCredentialsNonExpired,isEnabled
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>UserDetailsS​​ervice 通过用户的用户名加载 UserDetails。请注意，该方法仅采用一个参数：用户名（而不是密码）。</li>
<li>UserDetails 接口具有获取（散列！）密码的方法和获取用户名的方法。</li>
<li>UserDetails 有更多方法，例如帐户处于活动状态还是被阻止、凭据是否已过期或用户拥有什么权限 - 但我们不会在这里介绍它们。</li>
</ol>
<p>因此，您可以像我们上面那样自己实现这些接口，也可以使用 Spring Security 提供的现有接口。</p>
<h4 id="现成的实施">现成的实施</h4>
<p>简单说明一下：您始终可以自己实现 UserDetailsS​​ervice 和 UserDetails 接口。</p>
<p>但是，您还会发现 Spring Security 提供的现成实现，您可以使用/配置/扩展/覆盖。</p>
<ol>
<li><strong>JdbcUserDetailsManager</strong>, 这是一个基于 JDBC（数据库）的 UserDetailsS​​ervice。您可以配置它以匹配您的用户表/列结构。</li>
<li><strong>InMemoryUserDetailsManager</strong>, 它将所有用户详细信息保留在内存中，非常适合测试。</li>
<li><strong>org.springframework.security.core.userdetail.User</strong>, 这是您可以使用的合理的默认 UserDetails 实现。这意味着实体/数据库表和此用户类之间可能存在映射/复制。或者，您可以简单地让您的实体实现 UserDetails 接口。</li>
</ol>
<h4 id="完整的用户详细信息工作流程http-基本身份验证">完整的用户详细信息工作流程：HTTP 基本身份验证</h4>
<p>现在回想一下您的 HTTP 基本身份验证，这意味着您正在使用 Spring Security 和基本身份验证来保护您的应用程序。当您指定 UserDetailsS​​ervice 并尝试登录时会发生以下情况：</p>
<ol>
<li>从过滤器中的 HTTP Basic Auth 标头中提取用户名/密码组合。您无需为此做任何事情，它会在幕后发生。</li>
<li>调用 MyDatabaseUserDetailsS​​ervice 从数据库加载相应的用户，包装为 UserDetails 对象，该对象公开用户的哈希密码。</li>
<li>从 HTTP Basic Auth 标头中获取提取的密码，自动对其进行哈希处理，并将其与 UserDetails 对象中的哈希密码进行比较。如果两者匹配，则用户身份验证成功。</li>
</ol>
<p>这里的所有都是它的。但是等一下，Spring Security 如何对来自客户端的密码进行哈希处理（步骤 3）？用什么算法？</p>
<h4 id="密码编码器">密码编码器</h4>
<p>Spring Security 无法神奇地猜测您首选的密码哈希算法。这就是为什么你需要指定另一个@Bean，一个PasswordEncoder。例如，如果您想对所有密码使用 BCrypt 密码哈希函数（Spring Security 的默认值），则可以在 SecurityConfig 中指定此 @Bean。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">BCryptPasswordEncoder</span> <span class="nf">bCryptPasswordEncoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果您有多种密码哈希算法，因为您有一些旧用户的密码是使用 MD5 存储的（不要这样做），而较新的用户则使用 Bcrypt 甚至是 SHA-256 等第三种算法，该怎么办？然后您将使用以下编码器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">PasswordEncoderFactories</span><span class="o">.</span><span class="na">createDelegatingPasswordEncoder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这个委托编码器如何工作？它将查看 UserDetail 的哈希密码（来自例如您的数据库表），该密码现在必须以 <code>*{prefix}*</code> 开头。那个前缀，就是你的哈希方法！您的数据库表将如下所示：</p>
<table>
<thead>
<tr>
<th>username 用户名</th>
<th>password 密码</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="mailto:john@doe.com">john@doe.com</a></td>
<td>{bcrypt}$2y$12$6t86Rpr3llMANhCUt26oUen2WhvXr/A89Xo9zJion8W7gWgZ/zA0C {bcrypt}$2y$12$6t86Rpr3llMANhCUt26oUen2WhvXr/A89Xo9zJion8W7gWgZ/zA0C</td>
<td></td>
</tr>
<tr>
<td><a href="mailto:my@user.com">my@user.com</a></td>
<td>{sha256}5ffa39f5757a0dad5dfada519d02c6b71b61ab1df51b4ed1f3beed6abe0ff5f6 {sha256}5ffa39f5757a0dad5dfada519d02c6b71b61ab1df51b4ed1f3beed6abe0ff5f6</td>
<td></td>
</tr>
</tbody>
</table>
<p>Spring Security 将：</p>
<ol>
<li>读入这些密码并去掉前缀（ {bcrypt} 或 {sha256} ）。</li>
<li>根据前缀值，使用正确的密码编码器（即 BCryptEncoder 或 SHA256Encoder）</li>
<li>使用该密码编码器对传入的原始密码进行哈希处理，并将其与存储的密码进行比较。</li>
</ol>
<p>这就是密码编码器的全部内容。</p>
<h4 id="摘要获取用户密码">摘要：获取用户密码</h4>
<p>本节的要点是：如果您使用 Spring Security 并有权访问用户的密码，那么：</p>
<ol>
<li>指定 UserDetailsS​​ervice。要么是自定义实现，要么使用并配置 Spring Security 提供的实现。</li>
<li>指定密码编码器。
简而言之，这就是 Spring Security 身份验证。</li>
</ol>
<h3 id="2-authenticationprovider无权访问用户的密码">2. AuthenticationProvider：无权访问用户的密码</h3>
<p>现在，假设您正在使用 Atlassian Crowd 进行集中身份管理。这意味着您所有应用程序的所有用户和密码都存储在 Atlassian Crowd 中，而不再存储在数据库表中。</p>
<p>这有两个含义：</p>
<ol>
<li>您的应用程序中不再有用户密码，因为您不能要求 Crowd 只提供这些密码。</li>
<li>但是，您确实有一个 REST API，您可以使用您的用户名和密码登录。 （对 <code>*/rest/usermanagement/1/authentication*</code> REST 端点的 POST 请求）。</li>
</ol>
<p>如果是这种情况，您不能再使用 UserDetailsS​​ervice，而是需要实现并提供 AuthenticationProvider @Bean。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">AuthenticationProvider</span> <span class="nf">authenticationProvider</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">AtlassianCrowdAuthenticationProvider</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>AuthenticationProvider 主要包含一种方法，简单的实现可能如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AtlassianCrowdAuthenticationProvider</span> <span class="kd">implements</span> <span class="n">AuthenticationProvider</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Authentication</span> <span class="nf">authenticate</span><span class="o">(</span><span class="n">Authentication</span> <span class="n">authentication</span><span class="o">)</span>  <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="kd">throws</span> <span class="n">AuthenticationException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getCredentials</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">            <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">callAtlassianCrowdRestService</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>                                     <span class="c1">// (3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">throw</span> <span class="k">new</span> <span class="n">AuthenticationException</span><span class="o">(</span><span class="s">&#34;could not login&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">UserNamePasswordAuthenticationToken</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">());</span> <span class="c1">// (4)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">// other method ignored
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>与只能访问用户名的 UserDetails load() 方法相比，您现在可以访问完整的身份验证尝试，通常包含用户名和密码。</li>
<li>您可以执行任何您想要验证用户身份的操作，例如调用 REST 服务。</li>
<li>如果身份验证失败，则需要抛出异常。</li>
<li>如果认证成功，需要返回一个完全初始化的UsernamePasswordAuthenticationToken。它是 Authentication 接口的实现，需要将authentiated 字段设置为true（上面使用的构造函数会自动设置）。我们将在下一章介绍权威。</li>
</ol>
<h4 id="完整的-authenticationprovider-工作流程http-基本身份验证">完整的 AuthenticationProvider 工作流程：HTTP 基本身份验证</h4>
<p>现在回想一下您的 HTTP 基本身份验证，这意味着您正在使用 Spring Security 和基本身份验证来保护您的应用程序。当您指定 AuthenticationProvider 并尝试登录时会发生以下情况：</p>
<ol>
<li>从过滤器中的 HTTP Basic Auth 标头中提取用户名/密码组合。您无需为此做任何事情，它会在幕后发生。</li>
<li>使用该用户名和密码调用您的 AuthenticationProvider（例如 AtlassianCrowdAuthenticationProvider），以便您自己进行身份验证（例如 REST 调用）。</li>
</ol>
<p>没有密码散列或类似的事情发生，因为您本质上是委托第三方进行实际的用户名/密码检查。简而言之，这就是 AuthenticationProvider 身份验证！</p>
<h4 id="摘要身份验证提供者">摘要：身份验证提供者</h4>
<p>本节的要点是：如果您使用 Spring Security 并且无权访问用户的密码，则实现并提供 AuthenticationProvider @Bean。</p>
<h2 id="spring-security-授权">Spring Security 授权</h2>
<p>到目前为止，我们只讨论了身份验证，例如用户名和密码检查。</p>
<p>现在让我们看一下 Spring Security 中的权限，或者更确切地说是角色和权限。</p>
<h3 id="什么是授权">什么是授权？</h3>
<p>以典型的电子商务网上商店为例。它可能由以下几部分组成：</p>
<ul>
<li>网上商店本身。我们假设它的 URL 是 <code>*www.youramazinshop.com*</code> 。</li>
<li>也许是呼叫中心代理的区域，他们可以登录并查看客户最近购买了什么或他们的包裹在哪里。它的 URL 可以是 <code>*www.youramazinshop.com/callcenter*</code> 。</li>
<li>一个单独的管理区域，管理员可以在其中登录和管理呼叫中心代理或网上商店的其他技术方面（如主题、性能等）。它的 URL 可以是 <code>*www.youramazinshop.com/admin*</code> 。</li>
</ul>
<p>这具有以下含义，因为仅仅对用户进行身份验证已经不够了：</p>
<ul>
<li>客户显然不应该能够访问呼叫中心或管理区域。他只被允许在网站上购物。</li>
<li>呼叫中心代理不应该能够访问管理区域。</li>
<li>而管理员可以访问网上商店、呼叫中心区域和管理区域。</li>
</ul>
<p>简而言之，您希望根据不同的用户的权限或角色来允许不同的访问权限。</p>
<h3 id="什么是权限什么是角色">什么是权限？什么是角色？</h3>
<p>简单的：</p>
<ul>
<li>权限（最简单的形式）只是一个字符串，它可以是任何类似的内容：user、ADMIN、ROLE_ADMIN 或 53cr37_r0l3。</li>
<li>角色是具有 <code>*ROLE_*</code> 前缀的权限。因此，名为 <code>*ADMIN*</code> 的角色与名为 <code>*ROLE_ADMIN*</code> 的权限相同。</li>
</ul>
<p>角色和权限之间的区别纯粹是概念性的，这常常让 Spring Security 的新手感到困惑。</p>
<h3 id="为什么角色和权限之间有区别">为什么角色和权限之间有区别？</h3>
<p>老实说，我已经阅读了 Spring Security 文档以及关于这个问题的几个相关 StackOverflow 线程，但我无法给你一个明确的、好的答案。</p>
<h3 id="什么是授予权限什么是-simplegrantedauthorities">什么是授予权限？什么是 SimpleGrantedAuthorities？</h3>
<p>当然，Spring Security 不会让你只使用字符串就可以逃脱惩罚。有一个 Java 类代表您的权限 String，一个流行的类是 SimpleGrantedAuthority。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">SimpleGrantedAuthority</span> <span class="kd">implements</span> <span class="n">GrantedAuthority</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">role</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getAuthority</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">role</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>（注意：还有其他权限类，可以让您在字符串旁边存储其他对象（例如主体），我不会在这里介绍它们。现在，我们将仅使用 SimpleGrantedAuthority。）</p>
<h3 id="1-userdetailsservice在哪里存储和获取权限">1. UserDetailsService：在哪里存储和获取权限？</h3>
<p>假设您将用户存储在自己的应用程序中（想想：UserDetailsS​​ervice），您将有一个 Users 表。</p>
<p>现在，您只需向其中添加一个名为“authorities”的列即可。对于本文，我在这里选择了一个简单的字符串列，尽管它可以包含多个以逗号分隔的值。或者，我也可以有一个完全独立的表 AUTHORITIES，但对于本文的范围来说，这样做就可以了。</p>
<p>注意：请参阅什么是权限？什么是角色？：您将权限（即字符串）保存到数据库中。碰巧这些权限以 ROLE_ 前缀开头，因此，就 Spring Security 而言，这些权限也是角色。</p>
<table>
<thead>
<tr>
<th>username 用户名</th>
<th>password 密码</th>
<th>authorities 当局</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="mailto:john@doe.com">john@doe.com</a></td>
<td>{bcrypt}… {bcrypt}&hellip;</td>
<td>ROLE_ADMIN ROLE_管理员</td>
<td></td>
</tr>
<tr>
<td><a href="mailto:my@callcenter.com">my@callcenter.com</a></td>
<td>{sha256}… {sha256}…</td>
<td>ROLE_CALLCENTER ROLE_CALLCENTER</td>
<td></td>
</tr>
</tbody>
</table>
<p>剩下要做的唯一一件事就是调整您的 UserDetailsS​​ervice 以在该权限列中读取。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyDatabaseUserDetailsService</span> <span class="kd">implements</span> <span class="n">UserDetailsService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UsernameNotFoundException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">     <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">.</span><span class="na">findByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">     <span class="n">List</span><span class="o">&lt;</span><span class="n">SimpleGrantedAuthority</span><span class="o">&gt;</span> <span class="n">grantedAuthorities</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">authority</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">SimpleGrantedAuthority</span><span class="o">(</span><span class="n">authority</span><span class="o">)).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="k">return</span> <span class="k">new</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">userdetails</span><span class="o">.</span><span class="na">User</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> <span class="n">grantedAuthorities</span><span class="o">);</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>您只需将数据库列中的任何内容映射到 SimpleGrantedAuthorities 列表即可。完毕。</li>
<li>同样，我们在这里使用 Spring Security 的 UserDetails 基本实现。您还可以在此处使用自己的类实现 UserDetails，甚至可能不需要映射。</li>
</ol>
<h3 id="2-authenticationmanager在哪里存储和获取权限">2. AuthenticationManager：在哪里存储和获取权限？</h3>
<p>当用户来自第三方应用程序（例如 Atlassian Cloud）时，您需要找出他们使用什么概念来支持当局。 Atlassian Crowd 有“角色”的概念，但不赞成使用“组”。</p>
<p>因此，根据您使用的实际产品，您需要将其映射到 AuthenticationProvider 中的 Spring Security 权限。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AtlassianCrowdAuthenticationProvider</span> <span class="kd">implements</span> <span class="n">AuthenticationProvider</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Authentication</span> <span class="nf">authenticate</span><span class="o">(</span><span class="n">Authentication</span> <span class="n">authentication</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">AuthenticationException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getCredentials</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">atlassian</span><span class="o">.</span><span class="na">crowd</span><span class="o">.</span><span class="na">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">callAtlassianCrowdRestService</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">AuthenticationException</span><span class="o">(</span><span class="s">&#34;could not login&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserNamePasswordAuthenticationToken</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> <span class="n">mapToAuthorities</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getGroups</span><span class="o">()));</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">	    <span class="c1">// other method ignored
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>注意：这不是实际的 Atlassian Crowd 代码，但达到了其目的。您针对 REST 服务进行身份验证并获取 JSON User 对象，然后该对象将转换为 atlassian.crowd.User 对象。</li>
<li>该用户可以是一个或多个组的成员，此处假定这些组只是字符串。然后，您可以简单地将这些组映射到 Spring 的“SimpleGrantedAuthority”。</li>
</ol>
<h3 id="重新审视-websecurityconfigureradapter">重新审视 WebSecurityConfigurerAdapter</h3>
<p>到目前为止，我们讨论了很多有关在 Spring Security 中存储和检索经过身份验证的用户的权限的内容。但是如何使用 Spring Security 的 DSL 保护具有不同权限的 URL？简单的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;ROLE_ADMIN&#34;</span><span class="o">)</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/callcenter&#34;</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="s">&#34;ROLE_ADMIN&#34;</span><span class="o">,</span> <span class="s">&#34;ROLE_CALLCENTER&#34;</span><span class="o">)</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span> <span class="c1">// (3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">           <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">httpBasic</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>要访问 <code>*/admin*</code> 区域，您（即用户）需要经过身份验证并拥有权限（一个简单的字符串）ROLE_ADMIN。</li>
<li>要访问 <code>*/callcenter*</code> 区域，您需要经过身份验证并拥有权限 ROLE_ADMIN 或 ROLE_CALLCENTER。</li>
<li>对于任何其他请求，您不需要特定角色，但仍需要进行身份验证。</li>
</ol>
<p>请注意，上面的代码 (1,2) 等效于以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">  <span class="n">http</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">)</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/callcenter&#34;</span><span class="o">).</span><span class="na">hasAnyRole</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">,</span> <span class="s">&#34;CALLCENTER&#34;</span><span class="o">)</span> <span class="c1">// (2)
</span></span></span></code></pre></div><ol>
<li>现在，您不再调用“hasAuthority”，而是调用“hasRole”。注意：Spring Security 将在经过身份验证的用户上查找名为 <code>*ROLE_ADMIN*</code> 的权限。</li>
<li>现在，您不再调用“hasAnyAuthority”，而是调用“hasAnyRole”。注意：Spring Security 将在经过身份验证的用户上查找名为 <code>*ROLE_ADMIN*</code> 或 <code>*ROLE_CALLCENTER*</code> 的权限。</li>
</ol>
<h3 id="hasaccess-和-spel">hasAccess 和 SpEL</h3>
<p>最后但并非最不重要的一点是，配置授权的最强大方法是使用访问方法。它允许您指定几乎任何有效的 SpEL 表达式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">  <span class="n">http</span>
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/admin&#34;</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;hasRole(&#39;admin&#39;) and hasIpAddress(&#39;192.168.1.0/24&#39;) and @myCustomBean.checkAccess(authentication,request)&#34;</span><span class="o">)</span> <span class="c1">// (1)
</span></span></span></code></pre></div><ol>
<li>您正在检查用户是否具有 ROLE_ADMIN、特定的 IP 地址以及自定义 bean 检查。</li>
</ol>
<p>要全面了解 Spring 基于表达式的访问控制的功能，请查看<a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#el-access">官方文档</a>。</p>
<h2 id="常见漏洞保护">常见漏洞保护</h2>
<p>Spring Security 可以帮助您防范多种常见攻击。它从计时攻击开始（即 Spring Security 始终会在登录时对提供的密码进行哈希处理，即使用户不存在），最终提供针对缓存控制攻击、内容嗅探、点击劫持、跨站点脚本等的保护。</p>
<p>在本指南的范围内不可能详细介绍每种攻击。因此，我们只会关注一种最让大多数 Spring Security 新手望而却步的保护措施：跨站点请求伪造。</p>
<h3 id="跨站请求伪造csrf">跨站请求伪造：CSRF</h3>
<p>如果您对 CSRF 完全陌生，您可能需要观看此 YouTube 视频来快速了解它。然而，快速的结论是，默认情况下 Spring Security 使用有效的 CSRF 令牌保护任何传入的 POST（或 PUT/DELETE/PATCH）请求。</p>
<p>这意味着什么？</p>
<h4 id="csrf-和服务器端渲染的-html">CSRF 和服务器端渲染的 HTML</h4>
<p>想象一下银行转账表单或任何表单（如登录表单），这些表单是由 @Controller 借助 Thymeleaf 或 Freemarker 等模板技术呈现的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/transfer&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>  <span class="c">&lt;!-- 1 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;amount&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;routingNumber&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;account&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Transfer&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>启用 Spring Security 后，您将无法再提交该表单。因为 Spring Security 的 CSRFFilter 正在任何 POST (PUT/DELETE) 请求上寻找额外的隐藏参数：所谓的 CSRF 令牌。</p>
<p>默认情况下，它会为每个 HTTP 会话生成这样的令牌并将其存储在那里。您需要确保将其注入到您的任何 HTML 表单中。</p>
<h4 id="csrf-令牌和-thymeleaf">CSRF 令牌和 Thymeleaf</h4>
<p>由于 Thymeleaf 与 Spring Security 具有良好的集成（当与 Spring Boot 一起使用时），您只需将以下代码片段添加到任何表单中，您就可以将令牌从会话中自动注入到您的表单中。更好的是，如果您在表单中使用“th:action”，Thymeleaf 会自动为您注入该隐藏字段，而无需手动执行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/transfer&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>  <span class="c">&lt;!-- 1 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;amount&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;routingNumber&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;account&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Transfer&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;hidden&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;${_csrf.parameterName}&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;${_csrf.token}&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!-- OR --&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">form</span> <span class="na">th:action</span><span class="o">=</span><span class="s">&#34;/transfer&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>  <span class="c">&lt;!-- 2 --&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;amount&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;routingNumber&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;account&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Transfer&#34;</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span></code></pre></div><ol>
<li>在这里，我们手动添加 CSRF 参数。</li>
<li>在这里，我们使用 Thymeleaf 的表单支持。</li>
</ol>
<p>注意：有关 Thymeleaf 的 CSRF 支持的更多信息，请参阅<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">官方文档</a>。</p>
<h4 id="csrf-和其他模板库">CSRF 和其他模板库</h4>
<p>我无法涵盖本节中的所有模板库，但作为最后的手段，您始终可以将 CSRFToken 注入到任何 @Controller 方法中，然后将其简单地添加到模型中以在视图中呈现它或直接作为 HttpServletRequest 请求属性访问它。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMaping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="n">Model</span> <span class="n">model</span><span class="o">,</span> <span class="n">CsrfToken</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// the token will be injected automatically
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="s">&#34;/templates/login&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h4 id="csrf-和-react-或-angular">CSRF 和 React 或 Angular</h4>
<p>对于 Javascript 应用程序来说，情况有些不同，例如 React 或 Angular 单页应用程序。您需要执行以下操作：</p>
<ol>
<li>配置 Spring Security 以使用 CookieCsrfTokenRepository，它将把 CSRFToken 放入 cookie“XSRF-TOKEN”（并将其发送到浏览器）。</li>
<li>让您的 Javascript 应用程序采用该 cookie 值，并将其作为“X-XSRF-TOKEN”标头与每个 POST(/PUT/PATCH/DELETE) 请求一起发送。</li>
</ol>
<p>有关完整的复制粘贴 React 示例，请查看这篇精彩的博客文章：https://developer.okta.com/blog/2018/07/19/simple-crud-react-and-spring-boot。</p>
<h4 id="禁用-csrf">禁用 CSRF</h4>
<p>如果您仅提供无状态 REST API，其中 CSRF 保护没有任何意义，您将完全禁用 CSRF 保护。您将这样做：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="kd">extends</span>
</span></span><span class="line"><span class="cl">   <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">http</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="oauth2">OAuth2</h2>
<p>Spring Security 的 OAuth2 集成是一个复杂的主题，另外 7,000 字就足够了，这不属于本文的范围。</p>
<h2 id="spring集成">Spring集成</h2>
<h3 id="spring-security--spring-framework">Spring Security &amp; Spring Framework</h3>
<p>在本文的大部分内容中，您仅在应用程序的 Web 层上指定了安全配置。您使用 antMatcher 或 regexMatchers 以及 WebSecurityConfigurerAdapter 的 DSL 来保护某些 URL。这是一种完美且标准的安全方法。</p>
<p>除了保护您的网络层之外，还有“纵深防御”的想法。这意味着除了保护 URL 之外，您可能还想保护业务逻辑本身。想想：你的@Controllers、@Components、@Services 甚至@Repositories。简而言之，就是您的 Spring beans。</p>
<h3 id="方法安全性">方法安全性</h3>
<p>该方法称为 <code>*method security*</code> 并通过注释工作，您基本上可以将这些注释放在 Spring bean 的任何公共方法上。您还需要通过在 ApplicationContextConfiguration 上放置 @EnableGlobalMethodSecurity 注释来显式启用方法安全性。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableGlobalMethodSecurity</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">prePostEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">securedEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">jsr250Enabled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="c1">// (3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">YourSecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span><span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>prePostEnabled 属性启用对 Spring 的 <code>*@PreAuthorize*</code> 和 <code>*@PostAuthorize*</code> 注释的支持。支持意味着，除非您将标志设置为 true，否则 Spring 将忽略此注释。</li>
<li>secureEnabled 属性启用对 <code>*@Secured*</code> 注释的支持。支持意味着，除非您将标志设置为 true，否则 Spring 将忽略此注释。</li>
<li>jsr250Enabled 属性启用对 <code>*@RolesAllowed*</code> 注释的支持。支持意味着，除非您将标志设置为 true，否则 Spring 将忽略此注释。</li>
</ol>
<h3 id="preauthorizesecured-和-rolesallowed-之间有什么区别">@PreAuthorize、@Secured 和 @RolesAllowed 之间有什么区别？</h3>
<p>@Secured 和 @RolesAllowed 基本上是相同的，尽管 @Secured 是 Spring 特定的注释，带有 spring-security-core 依赖项，而 @RolesAllowed 是一个标准化注释，存在于 javax.annotation-api 依赖项中。两个注释都采用权限/角色字符串作为值。</p>
<p>@PreAuthorize/@PostAuthorize 也是（较新的）Spring 特定注释，并且比上述注释更强大，因为它们不仅可以包含权限/角色，还可以包含任何有效的 SpEL 表达式。</p>
<p>最后，如果您尝试使用权限/角色不足访问受保护的方法，所有这些注释都会引发 <code>*AccessDeniedException*</code> 。</p>
<p>那么，让我们最终看看这些注释的实际效果。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Secured</span><span class="o">(</span><span class="s">&#34;ROLE_CALLCENTER&#34;</span><span class="o">)</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// == @RolesAllowed(&#34;ADMIN&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="n">BankAccountInfo</span> <span class="nf">get</span><span class="o">(...)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;isAnonymous()&#34;</span><span class="o">)</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// @PreAuthorize(&#34;#contact.name == principal.name&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// @PreAuthorize(&#34;ROLE_ADMIN&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">trackVisit</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>如前所述，@Secured 将权限/角色作为参数。 @RolesAllowed，同样。注意：请记住 <code>*@RolesAllowed(&quot;ADMIN&quot;)*</code> 将检查授予的权限 <code>*ROLE_ADMIN*</code> 。</li>
<li>如前所述，@PreAuthorize 接受权限，但也接受任何有效的 SpEL 表达式。有关常见内置安全表达式（如上面的 <code>*isAnonymous()*</code> ）的列表，而不是编写您自己的 SpEL 表达式，请查看官方文档。</li>
</ol>
<h3 id="我应该使用哪个注释">我应该使用哪个注释？</h3>
<p>这主要是同质性问题，而不是将自己过多地束缚于 Spring 特定的 API（这是一个经常提出的论点）。</p>
<p>如果使用 @Secured，请坚持下去，不要在 28% 的其他 bean 中使用 @RolesAllowed 注释来努力标准化，但永远不会完全实现。</p>
<p>首先，您始终可以使用 @Secured 并在需要时立即切换到 @PreAuthorize。</p>
<h3 id="spring-security-和-spring-web-mvc">Spring Security 和 Spring Web MVC</h3>
<p>至于与 Spring WebMVC 的集成，Spring Security 允许您执行以下操作：</p>
<ol>
<li>除了antMatchers和regexMatchers之外，您还可以使用mvcMatchers。不同之处在于，虽然 antMatchers 和 regexMatchers 基本上使用通配符匹配 URI 字符串，但 mvcMatchers 的行为与 @RequestMappings 完全相同。</li>
<li>将当前经过身份验证的主体注入到 @Controller/@RestController 方法中。</li>
<li>将当前会话 CSRFToken 注入到 @Controller/@RestController 方法中。</li>
<li>正确处理异步请求处理的安全性。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/messages/inbox&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">findMessagesForUser</span><span class="o">(</span><span class="nd">@AuthenticationPrincipal</span> <span class="n">CustomUser</span> <span class="n">customUser</span><span class="o">,</span> <span class="n">CsrfToken</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// (1) (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// .. find messages for this user and return them ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>如果用户经过身份验证，@AuthenticationPrincipal 将注入主体；如果没有用户经过身份验证，则 @AuthenticationPrincipal 将注入 null。该主体是来自 UserDetailsS​​ervice/AuthenticationManager 的对象！</li>
<li>或者您可以将当前会话 CSRFToken 注入每个方法中。</li>
</ol>
<p>如果您不使用 @AuthenticationPrincipal 注释，则必须通过 SecurityContextHolder 自行获取主体。这是一种在遗留 Spring Security 应用程序中常见的技术。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Controller</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/messages/inbox&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">findMessagesForUser</span><span class="o">(</span><span class="n">CsrfToken</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">SecurityContext</span> <span class="n">context</span> <span class="o">=</span> <span class="n">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">         <span class="n">Authentication</span> <span class="n">authentication</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getAuthentication</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="o">(</span><span class="n">authentication</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">()</span> <span class="k">instanceof</span> <span class="n">UserDetails</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">             <span class="n">CustomUser</span> <span class="n">customUser</span> <span class="o">=</span> <span class="o">(</span><span class="n">CustomUser</span><span class="o">)</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">             <span class="c1">// .. find messages for this user and return them ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         <span class="c1">// todo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="spring-security--spring-boot">Spring Security &amp; Spring Boot</h3>
<p>每当您将 spring-boot-starter-security 依赖项添加到 Spring Boot 项目时，Spring Boot 实际上只会为您预先配置 Spring Security。</p>
<p>除此之外，所有安全配置都是通过简单的 Spring Security 概念（例如：WebSecurityConfigurerAdapter、身份验证和授权规则）完成的，这些概念本身与 Spring Boot 无关。</p>
<p>因此，您在本指南中阅读的所有内容都一一适用于将 Spring Security 与 Spring Boot 结合使用。如果您不了解简单的安全性，就不要指望正确理解这两种技术如何协同工作。</p>
<h3 id="spring-security--thymeleaf">Spring Security &amp; Thymeleaf</h3>
<p>Spring Security 与 Thymeleaf 集成良好。它提供了一种特殊的 Spring Security Thymeleaf 方言，允许您将安全表达式直接放入 Thymeleaf HTML 模板中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">sec:authorize</span><span class="o">=</span><span class="s">&#34;isAuthenticated()&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  This content is only shown to authenticated users.
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">sec:authorize</span><span class="o">=</span><span class="s">&#34;hasRole(&#39;ROLE_ADMIN&#39;)&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  This content is only shown to administrators.
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">sec:authorize</span><span class="o">=</span><span class="s">&#34;hasRole(&#39;ROLE_USER&#39;)&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">  This content is only shown to users.
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>有关这两种技术如何协同工作的完整且更详细的概述，请查看官方文档。</p>
<h2 id="faq">FAQ</h2>
<h3 id="spring-security-的最新版本是什么">Spring Security 的最新版本是什么？</h3>
<p>截至 2022 年 5 月，即为 5.7.1.RELEASE。</p>
<p>请注意，如果您使用 Spring Boot 定义的 Spring Security 依赖项，您可能使用的是稍旧的 Spring Security 版本，例如 5.2.1。</p>
<h3 id="较旧的-spring-security-版本是否与最新版本兼容">较旧的 Spring Security 版本是否与最新版本兼容？</h3>
<p>Spring Security 最近经历了一些重大变化。因此，您需要找到目标版本的迁移指南并完成它们：</p>
<ul>
<li>Spring Security 3.x 到 4.x → <a href="https://docs.spring.io/spring-security/site/migrate/current/3-to-4/html5/migrate-3-to-4-jc.html">https://docs.spring.io/spring-security/site/migrate/current/3-to-4/html5/migrate-3-to-4-jc.html</a></li>
<li>Spring Security 4.x 到 5.x(&lt; 5.3) → <a href="https://docs.spring.io/spring-security/site/docs/5.0.15.RELEASE/reference/htmlsingle/#new">https://docs.spring.io/spring-security/site/docs/5.0.15.RELEASE/reference/htmlsingle/#new</a> （不是迁移指南，但有什么新鲜事）</li>
<li>Spring Security 5.x 到 5.3 → <a href="https://docs.spring.io/spring-security/site/docs/5.3.1.RELEASE/reference/html5/#new">https://docs.spring.io/spring-security/site/docs/5.3.1.RELEASE/reference/html5/#new</a> （不是迁移指南，而是新功能）</li>
<li>Spring Security 最新版本 → <a href="https://docs.spring.io/spring-security/reference/whats-new.html">https://docs.spring.io/spring-security/reference/whats-new.html</a>（不是迁移指南，而是新功能）</li>
</ul>
<h3 id="我需要添加哪些依赖项才能使-spring-security-正常工作">我需要添加哪些依赖项才能使 Spring Security 正常工作？</h3>
<h4 id="plain-spring-project">Plain Spring Project</h4>
<p>如果您使用的是普通 Spring 项目（不是 Spring Boot），则需要将以下两个 Maven/Gradle 依赖项添加到您的项目中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-security-web<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.7.1.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-security-config<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;version&gt;</span>5.7.1.RELEASE<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>您还需要在 web.xml 或 Java 配置中配置 SecurityFilterChain。请参阅<a href="https://docs.spring.io/spring-security/site/docs/current/reference/html5/#ns-web-xml">此处</a>如何操作。</p>
<h4 id="spring-boot-project">Spring Boot Project</h4>
<p>如果您正在使用 Spring Boot 项目，则需要将以下 Maven/Gradle 依赖项添加到您的项目中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>其他所有内容都会自动为您配置，您可以立即开始编写 WebSecurityConfigurerAdapter。</p>
<h3 id="如何以编程方式访问-spring-security-中当前经过身份验证的用户">如何以编程方式访问 Spring Security 中当前经过身份验证的用户？</h3>
<p>正如本文中提到的，Spring Security 将当前经过身份验证的用户（或者更确切地说是 SecurityContext）存储在 SecurityContextHolder 内的线程局部变量中。您可以像这样访问它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">SecurityContext</span> <span class="n">context</span> <span class="o">=</span> <span class="n">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Authentication</span> <span class="n">authentication</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getAuthentication</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Object</span> <span class="n">principal</span> <span class="o">=</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">authorities</span> <span class="o">=</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">();</span>
</span></span></code></pre></div><p>请注意，如果您未登录，Spring Security 默认情况下会在 SecurityContextHolder 上设置 <code>*AnonymousAuthenticationToken*</code> 作为身份验证。这会导致一些混乱，因为人们自然会期望那里有一个 null 值。</p>
<h3 id="antmatchers常见示例">AntMatchers：常见示例</h3>
<p>一个无意义的示例显示了最有用的 antMatchers （和 regexMatcher/mvcMatcher）可能性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">http</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/api/user/**&#34;</span><span class="o">,</span> <span class="s">&#34;/api/ticket/**&#34;</span><span class="o">,</span> <span class="s">&#34;/index&#34;</span><span class="o">).</span><span class="na">hasAuthority</span><span class="o">(</span><span class="s">&#34;ROLE_USER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="s">&#34;/forms/**&#34;</span><span class="o">).</span><span class="na">hasAnyRole</span><span class="o">(</span><span class="s">&#34;ADMIN&#34;</span><span class="o">,</span> <span class="s">&#34;CALLCENTER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/user/**&#34;</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;@webSecurity.check(authentication,request)&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="如何在-spring-security-中使用自定义登录页面">如何在 Spring Security 中使用自定义登录页面？</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">http</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="o">.</span><span class="na">permitAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>您的自定义登录页面的 URL。一旦指定此选项，自动生成的登录页面就会消失。</li>
</ol>
<h3 id="如何使用-spring-security-进行编程登录">如何使用 Spring Security 进行编程登录？</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">UserDetails</span> <span class="n">principal</span> <span class="o">=</span> <span class="n">userDetailsService</span><span class="o">.</span><span class="na">loadUserByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">Authentication</span> <span class="n">authentication</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UsernamePasswordAuthenticationToken</span><span class="o">(</span><span class="n">principal</span><span class="o">,</span> <span class="n">principal</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> <span class="n">principal</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="n">SecurityContext</span> <span class="n">context</span> <span class="o">=</span> <span class="n">SecurityContextHolder</span><span class="o">.</span><span class="na">createEmptyContext</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">context</span><span class="o">.</span><span class="na">setAuthentication</span><span class="o">(</span><span class="n">authentication</span><span class="o">);</span>
</span></span></code></pre></div><h3 id="如何仅针对某些路径禁用-csrf">如何仅针对某些路径禁用 CSRF？</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">http</span>
</span></span><span class="line"><span class="cl">       <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">ignoringAntMatchers</span><span class="o">(</span><span class="s">&#34;/api/**&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><h2 id="fin">Fin</h2>
<p>如果您已经读到这里，您现在应该对 Spring Security 生态系统的复杂性有了很好的了解，即使没有 OAuth2。总结一下：</p>
<ol>
<li>如果您对 Spring Security 的 FilterChain 如何工作以及它的默认漏洞保护有什么基本了解（想想：CSRF），这会很有帮助。</li>
<li>确保了解身份验证和授权之间的区别。还有您需要为特定身份验证工作流程指定哪些 @Beans。</li>
<li>确保您了解 Spring Security 的 WebSecurityConfigurerAdapter 的 DSL 以及基于注释的方法安全性。</li>
<li>最后但并非最不重要的一点是，它有助于仔细检查 Spring Security 与其他框架和库（如 Spring MVC 或 Thymeleaf）的集成。</li>
</ol>
<p>今天就够了，因为这真是一段旅程，不是吗？谢谢阅读！</p>
<h2 id="致谢">致谢</h2>
<p>向 Patricio &ldquo;Pato&rdquo; Moschcovich 致以深深的谢意，他不仅对本文进行了校对，还提供了宝贵的反馈！</p>
<p>原文链接：<a href="https://www.marcobehler.com/guides/spring-security">https://www.marcobehler.com/guides/spring-security</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]深入了解Spring事务管理：@Transactional</title>
      <link>https://blog.chensoul.com/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</link>
      <pubDate>Wed, 16 Aug 2023 12:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</guid>
      <description>您可以使用本指南来简单实用地了解 Spring 使用 @Transactional 注释进行事务管理的工作原理。 唯一的先决条件？您需要对 ACID 有一个粗略的了解，即什么是数据库事务以及为什么</description>
      <content:encoded><![CDATA[<p>您可以使用本指南来简单实用地了解 Spring 使用 @Transactional 注释进行事务管理的工作原理。</p>
<p>唯一的先决条件？您需要对 ACID 有一个粗略的了解，即什么是数据库事务以及为什么使用它们。此外，这里不讨论分布式事务或反应式事务，但就 Spring 而言，一般原则仍然适用。</p>
<h2 id="介绍">介绍</h2>
<p>在本指南中，您将了解 Spring 核心事务抽象框架的主要支柱（这是一个令人困惑的术语，不是吗？） - 用大量代码示例进行描述：</p>
<ul>
<li><code>@Transactional</code> （声明式事务管理）与编程式事务管理。</li>
<li>物理事务与逻辑事务。</li>
<li>Spring <code>@Transactional</code> 与 JPA/Hibernate 集成。</li>
<li>Spring <code>@Transactional</code> 与 Spring Boot 或 Spring MVC 集成。</li>
<li>回滚、代理、常见陷阱等等。</li>
</ul>
<p>与 Spring 官方文档相反，本指南不会直接深入探讨 Spring-first 主题，从而让您感到困惑。</p>
<p>相反，您将以非常规的方式学习 Spring 事务管理：从头开始，一步一步。这意味着，从普通的老式 JDBC 事务管理开始。</p>
<p>Why? 为什么？</p>
<p>因为 Spring 所做的一切都是基于这些 JDBC 基础知识。如果您掌握了这些基础知识，稍后您将可以使用 Spring 的 @Transactional 注释节省大量时间。</p>
<h2 id="普通-jdbc-事务管理的工作原理">普通 JDBC 事务管理的工作原理</h2>
<p>如果您在不完全了解 JDBC 事务的情况下考虑跳过本节：请不要这样做。</p>
<h3 id="如何启动提交或回滚-jdbc-事务">如何启动、提交或回滚 JDBC 事务</h3>
<p>第一个重要的收获是：无论您使用 Spring 的 @Transactional 注释、普通 Hibernate、jOOQ 还是任何其他数据库库，都没有关系。</p>
<p>最后，它们都执行相同的操作来打开和关闭（我们称之为“管理”）数据库事务。普通的 JDBC 事务管理代码如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.Connection</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">try</span> <span class="o">(</span><span class="n">connection</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">connection</span><span class="o">.</span><span class="na">setAutoCommit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// execute some SQL statements...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">connection</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">// (3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">connection</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span> <span class="c1">// (4)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>您需要连接到数据库才能启动事务。 DriverManager.getConnection（url，user，password）也可以工作，尽管在大多数企业应用程序中，您将配置一个数据源并从中获取连接。</li>
<li>这是在 Java 中“启动”数据库事务的唯一方法，尽管这个名字听起来有点不对劲。 setAutoCommit(true) 确保每个 SQL 语句自动包装在自己的事务中，而 setAutoCommit(false) 则相反：您是事务的主人，您需要开始调用 <code>*commit*</code> 标志在连接打开的整个时间内都有效，这意味着您只需调用该方法一次，而不是重复。</li>
<li>让我们提交我们的交易&hellip;​</li>
<li>或者，如果出现异常，则回滚我们的更改。</li>
</ol>
<p>是的，这 4 行（过于简单化的）是当你使用 @Transactional 注释时 Spring 所做的一切。在下一章中，您将了解其工作原理。但在我们开始之前，您还需要学习一些知识。</p>
<p>（聪明人的一个快速说明：像 HikariCP 这样的连接池库可能会根据配置自动为您切换自动提交模式。但这是一个高级主题。）</p>
<h3 id="如何使用-jdbc-隔离级别和保存点">如何使用 JDBC 隔离级别和保存点</h3>
<p>如果您已经使用过 Spring 的 @Transactional 注释，您可能遇到过类似的情况：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span><span class="o">=</span><span class="n">TransactionDefinition</span><span class="o">.</span><span class="na">NESTED</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">               <span class="n">isolation</span><span class="o">=</span><span class="n">TransactionDefinition</span><span class="o">.</span><span class="na">ISOLATION_READ_UNCOMMITTED</span><span class="o">)</span>
</span></span></code></pre></div><p>稍后我们将更详细地介绍嵌套 Spring 事务和隔离级别，但再次了解这些参数都可以归结为以下基本 JDBC 代码会有所帮助：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.sql.Connection</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// isolation=TransactionDefinition.ISOLATION_READ_UNCOMMITTED
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">connection</span><span class="o">.</span><span class="na">setTransactionIsolation</span><span class="o">(</span><span class="n">Connection</span><span class="o">.</span><span class="na">TRANSACTION_READ_UNCOMMITTED</span><span class="o">);</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// propagation=TransactionDefinition.NESTED
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Savepoint</span> <span class="n">savePoint</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">setSavepoint</span><span class="o">();</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">connection</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">savePoint</span><span class="o">);</span>
</span></span></code></pre></div><ol>
<li>这就是 Spring 在数据库连接上设置隔离级别的方式。不完全是火箭科学，是吗？</li>
<li>Spring 中的嵌套事务只是 JDBC/数据库保存点。例如，如果您不知道什么是保存点，请查看本<a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/transactions.html">教程</a>。请注意，保存点支持取决于您的 JDBC 驱动程序/数据库。</li>
</ol>
<h2 id="spring-或-spring-boot-的事务管理如何工作">Spring 或 Spring Boot 的事务管理如何工作</h2>
<p>现在您已经对 JDBC 事务有了很好的了解，让我们看看简单的、核心的 Spring 是如何管理事务的。这里的所有内容都一一适用于 Spring Boot 和 Spring MVC，稍后会详细介绍。</p>
<p>Spring 的事务管理或其（名称相当令人困惑的）事务抽象框架实际上是什么？</p>
<p>请记住，事务管理简单地说就是：Spring 如何启动、提交或回滚 JDBC 事务？这听起来是不是很熟悉？</p>
<p>问题是：使用普通 JDBC，您只有一种方法 (setAutocommit(false)) 来管理事务，而 Spring 为您提供了许多不同的、更方便的方法来实现相同的目的。</p>
<h3 id="如何使用spring的程序化事务管理">如何使用Spring的程序化事务管理？</h3>
<p>在 Spring 中定义事务的第一种但很少使用的方法是通过编程方式：通过 TransactionTemplate 或直接通过 PlatformTransactionManager。从代码角度来看，它看起来像这样：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">TransactionTemplate</span> <span class="n">template</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">registerUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Long</span> <span class="n">id</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">status</span> <span class="o">-&gt;</span>  <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// execute some SQL that e.g.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// inserts the user into the db and returns the autogenerated id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>与普通 JDBC 示例相比：</p>
<ul>
<li>您不必自己搞乱打开或关闭数据库连接（try-finally）。相反，您使用事务回调。</li>
<li>您也不必捕获 SQLException，因为 Spring 会为您将这些异常转换为运行时异常。</li>
<li>并且您可以更好地融入 Spring 生态系统。 TransactionTemplate 将在内部使用 TransactionManager，它将使用数据源。所有这些都是您必须在 Spring 上下文配置中指定的 bean，但以后不必再担心。</li>
</ul>
<p>虽然这算是一个小小的改进，但程序化事务管理并不是 Spring 事务框架的主要功能。相反，这都是关于声明式事务管理的。让我们看看那是什么。</p>
<h3 id="如何使用spring的xml声明式事务管理">如何使用Spring的XML声明式事务管理？</h3>
<p>过去，当 XML 配置成为 Spring 项目的标准时，您可以直接在 XML 中配置事务。除了一些遗留的企业项目之外，您将不再在野外找到这种方法，因为它已被更简单的 @Transactional 注释所取代。</p>
<p>我们不会在本指南中详细介绍 XML 配置，但您可以使用此示例作为深入研究的起点 - 如果需要的话（直接取自 Spring 官方文档）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="c">&lt;!-- the transactional advice (what &#39;happens&#39;; see the &lt;aop:advisor/&gt; bean below) --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;tx:advice</span> <span class="na">id=</span><span class="s">&#34;txAdvice&#34;</span> <span class="na">transaction-manager=</span><span class="s">&#34;txManager&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c">&lt;!-- the transactional semantics... --&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;tx:attributes&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- all methods starting with &#39;get&#39; are read-only --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">&#34;get*&#34;</span> <span class="na">read-only=</span><span class="s">&#34;true&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="c">&lt;!-- other methods use the default transaction settings (see below) --&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">&#34;*&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/tx:attributes&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/tx:advice&gt;</span>
</span></span></code></pre></div><p>您使用上面的 XML 块指定 AOP 建议（面向方面​​的编程），然后可以将其应用到 UserService bean，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;aop:config&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">&#34;userServiceOperation&#34;</span> <span class="na">expression=</span><span class="s">&#34;execution(* x.y.service.UserService.*(..))&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">&#34;txAdvice&#34;</span> <span class="na">pointcut-ref=</span><span class="s">&#34;userServiceOperation&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/aop:config&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;x.y.service.UserService&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>您的 UserService bean 将如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">registerUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// execute some SQL that e.g.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// inserts the user into the db and retrieves the autogenerated id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>从 Java 代码的角度来看，这种声明式事务方法看起来比编程方法简单得多。但它会导致大量复杂、冗长的 XML，以及切入点和顾问程序配置。</p>
<p>因此，这就引出了一个问题：是否有比 XML 更好的声明式事务管理方法？是的，有：@Transactional 注释。</p>
<h3 id="如何使用spring的transactional注解声明式事务管理">如何使用Spring的@Transactional注解（声明式事务管理）</h3>
<p>现在让我们看看现代 Spring 事务管理通常是什么样子的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Transactional</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">registerUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="c1">// execute some SQL that e.g.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// inserts the user into the db and retrieves the autogenerated id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// userDao.save(user);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这怎么可能？不再需要 XML 配置，也不需要其他代码。相反，您现在需要做两件事：</p>
<ul>
<li>确保您的 Spring 配置带有 @EnableTransactionManagement 注释（在 Spring Boot 中，这将自动为您完成）。</li>
<li>确保您在 Spring 配置中指定了事务管理器（无论如何您都需要这样做）。</li>
<li>然后 Spring 足够智能，可以透明地为您处理事务：您用 @Transactional 注释注释的任何 bean 的公共方法都将在数据库事务内执行（注意：存在一些陷阱）。</li>
</ul>
<p>因此，要使 @Transactional 注释正常工作，您需要做的就是：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableTransactionManagement</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MySpringConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">PlatformTransactionManager</span> <span class="nf">txManager</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">yourTxManager</span><span class="o">;</span> <span class="c1">// more on that later
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，当我说 Spring 透明地为您处理事务时。那个的真实意义是什么？</p>
<p>借助 JDBC 事务示例中的知识，上面的 @Transactional UserService 代码可以直接转换（简化）为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">registerUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">try</span> <span class="o">(</span><span class="n">connection</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">connection</span><span class="o">.</span><span class="na">setAutoCommit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">            <span class="c1">// execute some SQL that e.g.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// inserts the user into the db and retrieves the autogenerated id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// userDao.save(user); &lt;(2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">            <span class="n">connection</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">connection</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>这只是 JDBC 连接的标准打开和关闭。这就是 Spring 的事务注释自动为您做的事情，而无需您显式地编写它。</li>
<li>这是您自己的代码，通过 DAO 或类似的东西保存用户。</li>
</ol>
<p>这个例子可能看起来有点神奇，但是让我们看看 Spring 如何为您插入这个连接代码。</p>
<h3 id="cglib-和-jdk-代理---transactional-的幕后黑手">CGlib 和 JDK 代理 - @Transactional 的幕后黑手</h3>
<p>Spring 无法真正重写您的 Java 类，就像我上面所做的那样，以插入连接代码（除非您使用字节码编织等高级技术，但我们现在忽略它）。</p>
<p>你的 registerUser() 方法实际上只是调用 userDao.save(user) ，没有办法动态改变它。</p>
<p>但Spring有一个优势。它的核心是一个 IoC 容器。它为您实例化一个 UserService 并确保将该 UserService 自动装配到任何其他需要 UserService 的 bean 中。</p>
<p>现在，每当您在 bean 上使用 @Transactional 时，Spring 都会使用一个小技巧。它不仅实例化 UserService，而且还实例化该 UserService 的事务代理。</p>
<p>它在 Cglib 库的帮助下通过一种称为代理通过子类化的方法来实现这一点。还有其他构建代理的方法（例如动态 JDK 代理），但我们暂时就这样吧。</p>
<p>让我们看看这张图中代理的作用：</p>
<p><a href="https://www.marcobehler.com/images/document1.png"><img loading="lazy" src="https://www.marcobehler.com/images/document1.png" alt="document1"  />
</a></p>
<p>从该图中可以看出，代理有一项工作。</p>
<ul>
<li>打开和关闭数据库连接/事务。</li>
<li>然后委托给真正的 UserService，即您编写的那个。</li>
<li>而其他 bean，例如 UserRestController，永远不会知道它们正在与代理通信，而不是与真实的事物通信。</li>
</ul>
<p><strong>快速考试</strong></p>
<p>看一下下面的源代码，告诉我 Spring 自动构造什么类型的 UserService，假设它带有 @Transactional 标记或具有 @Transactional 方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableTransactionManagement</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">MyAppConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserService</span> <span class="nf">userService</span><span class="o">()</span> <span class="o">{</span>  <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>正确的。 Spring 在这里为您的 UserService 类构造一个动态 CGLib 代理，它可以为您打开和关闭数据库事务。您或任何其他 bean 甚至不会注意到它不是您的 UserService，而是包装您的 UserService 的代理。</li>
</ol>
<h3 id="为什么需要事务管理器如-platformtransactionmanager">为什么需要事务管理器（如 PlatformTransactionManager）？</h3>
<p>现在只缺少一条关键信息，尽管我们已经提到过几次了。</p>
<p>您的 UserService 会动态被代理，并且代理会为您管理事务。但处理所有事务状态（打开、提交、关闭）的不是代理本身，而是代理委托给事务管理器。</p>
<p>Spring 为您提供了 PlatformTransactionManager / TransactionManager 接口，默认情况下，它附带了一些方便的实现。其中之一是数据源事务管理器。</p>
<p>它所做的正是您迄今为止所做的管理事务的操作，但首先，让我们看看所需的 Spring 配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">DataSource</span> <span class="nf">dataSource</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">MysqlDataSource</span><span class="o">();</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">PlatformTransactionManager</span> <span class="nf">txManager</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">());</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>您可以在此处创建特定于数据库或特定于连接池的数据源。本示例使用 MySQL。</li>
<li>在这里，您创建事务管理器，它需要一个数据源才能管理事务。</li>
</ol>
<p>简单如。然后，所有事务管理器都有像“doBegin”（用于启动事务）或“doCommit”这样的方法，它们看起来像这样——直接取自Spring的源代码并进行了一些简化：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DataSourceTransactionManager</span> <span class="kd">implements</span> <span class="n">PlatformTransactionManager</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doBegin</span><span class="o">(</span><span class="n">Object</span> <span class="n">transaction</span><span class="o">,</span> <span class="n">TransactionDefinition</span> <span class="n">definition</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Connection</span> <span class="n">newCon</span> <span class="o">=</span> <span class="n">obtainDataSource</span><span class="o">().</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">con</span><span class="o">.</span><span class="na">setAutoCommit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// yes, that&#39;s it!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doCommit</span><span class="o">(</span><span class="n">DefaultTransactionStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">status</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">().</span><span class="na">getConnectionHolder</span><span class="o">().</span><span class="na">getConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">con</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">TransactionSystemException</span><span class="o">(</span><span class="s">&#34;Could not commit JDBC transaction&#34;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>因此，数据源事务管理器在管理事务时使用与您在 JDBC 部分中看到的完全相同的代码。</p>
<p>考虑到这一点，让我们从上面扩展我们的图片：</p>
<p><a href="https://www.marcobehler.com/images/document2.png"><img loading="lazy" src="https://www.marcobehler.com/images/document2.png" alt="document2"  />
</a></p>
<p>总结一下：</p>
<ol>
<li>如果 Spring 检测到 bean 上的 @Transactional 注释，它会创建该 bean 的动态代理。</li>
<li>代理可以访问事务管理器，并要求它打开和关闭事务/连接。</li>
<li>事务管理器本身将简单地执行您在普通 Java 部分中所做的操作：管理良好的旧 JDBC 连接。</li>
</ol>
<h3 id="物理事务和逻辑事务有什么区别">物理事务和逻辑事务有什么区别？</h3>
<p>想象一下以下两个事务类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">InvoiceService</span> <span class="n">invoiceService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Transactional</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">invoice</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">invoiceService</span><span class="o">.</span><span class="na">createPdf</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// send invoice as email, etc.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InvoiceService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Transactional</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createPdf</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>UserService 有一个事务性 Invoice() 方法。它调用 InvoiceService 上的另一个事务方法 createPdf()。</p>
<p>现在就数据库事务而言，这实际上应该只是一个数据库事务。 （记住：getConnection().setAutocommit(false).commit()。）Spring 调用此物理事务，尽管一开始这听起来有点令人困惑。</p>
<p>然而，从 Spring 的角度来看，发生了两个逻辑事务：第一个在 UserService 中，另一个在 InvoiceService 中。 Spring 必须足够聪明，知道这两个 @Transactional 方法应该使用相同的底层物理数据库事务。</p>
<p>如果对 InvoiceService 进行以下更改，情况会有什么不同？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InvoiceService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="n">Propagation</span><span class="o">.</span><span class="na">REQUIRES_NEW</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createPdf</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>将传播模式更改为 require_new 是告诉 Spring createPDF() 需要在自己的事务中执行，独立于任何其他已存在的事务。回想一下本指南的纯 Java 部分，您是否看到了将事务“拆分”为两半的方法？我也不。</p>
<p>这基本上意味着您的代码将打开两个到数据库的（物理）连接/事务。 （再次：getConnection() x2.setAutocommit(false) x2.commit() x2）Spring 现在必须足够智能，两个逻辑事务部分 (invoice()/createPdf()) 现在也映射到两个不同的物理数据库交易。</p>
<p>所以，总结一下：</p>
<ul>
<li>物理事务：是您实际的 JDBC 事务。</li>
<li>逻辑事务：是（可能嵌套的）@Transactional 注解的（Spring）方法。</li>
</ul>
<p>这使我们能够更详细地介绍传播模式。</p>
<h3 id="transactional-传播级别的用途是什么">@Transactional 传播级别的用途是什么？</h3>
<p>查看 Spring 源代码时，您会发现可以插入 @Transactional 方法的各种传播级别或模式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">  <span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="n">Propagation</span><span class="o">.</span><span class="na">REQUIRED</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="n">Propagation</span><span class="o">.</span><span class="na">REQUIRES_NEW</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// etc
</span></span></span></code></pre></div><p>完整列表：</p>
<ul>
<li>REQUIRED 必需的</li>
<li>SUPPORTS 支持</li>
<li>MANDATORY 强制的</li>
<li>REQUIRES_NEW REQUIRES_NEW</li>
<li>NOT_SUPPORTED 不支持</li>
<li>NEVER 绝不</li>
<li>NESTED 嵌套</li>
</ul>
<p><strong>练习：</strong></p>
<p>在普通 Java 部分中，我向您展示了 JDBC 在事务方面可以执行的所有操作。花点时间思考一下每个 Spring 传播模式最终对您的数据源（或者更确切地说，您的 JDBC 连接）到底做了什么。</p>
<p>那就看看下面的回答吧。</p>
<p><strong>答案：</strong></p>
<ul>
<li><strong>Required (default)</strong>：我的方法需要一个事务，要么为我打开一个事务，要么使用现有的事务 → getConnection()。设置自动提交（假）。犯罪（）。</li>
<li><strong>Supports</strong>：我并不关心事务是否打开，我可以以任何一种方式工作 → 与 JDBC 无关</li>
<li><strong>Mandatory</strong>：我自己不会打开一个事务，但是如果没有人打开一个事务我会哭 → 与 JDBC 无关</li>
<li>**Require_new:*：我想要完全自己的事务 → getConnection()。设置自动提交（假）。犯罪（）。</li>
<li><strong>Not_Supported</strong>：我真的不喜欢事务，我什至会尝试挂起当前正在运行的事务 → 与 JDBC 无关</li>
<li>**Never：**如果其他人启动事务我会哭→与 JDBC 无关</li>
<li><strong>Nested：</strong> 听起来很复杂，但我们只是在谈论保存点！ → 连接.setSavepoint()</li>
</ul>
<p>正如您所看到的，大多数传播模式实际上与数据库或 JDBC 无关，而更多地与您如何使用 Spring 构建程序以及 Spring 期望事务出现的方式/时间/地点有关。</p>
<p>看这个例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="n">Propagation</span><span class="o">.</span><span class="na">MANDATORY</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">myMethod</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// execute some sql
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这种情况下，每当您调用 UserService 类的 myMethod() 时，Spring 都会期望打开一个事务。它本身不会打开一个方法，相反，如果您在没有预先存在的事务的情况下调用该方法，Spring 将抛出异常。请记住这一点，作为“逻辑事务处理”的附加点。</p>
<h3 id="transactional-隔离级别有什么用">@Transactional 隔离级别有什么用？</h3>
<p>此时这几乎是一个棘手的问题，但是当您像这样配置 @Transactional 注释时会发生什么？</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Transactional</span><span class="o">(</span><span class="n">isolation</span> <span class="o">=</span> <span class="n">Isolation</span><span class="o">.</span><span class="na">REPEATABLE_READ</span><span class="o">)</span>
</span></span></code></pre></div><p>是的，它确实会导致这样的结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">connection</span><span class="o">.</span><span class="na">setTransactionIsolation</span><span class="o">(</span><span class="n">Connection</span><span class="o">.</span><span class="na">TRANSACTION_REPEATABLE_READ</span><span class="o">);</span>
</span></span></code></pre></div><p>然而，数据库隔离级别是一个复杂的主题，您应该花一些时间来完全掌握它们。一个好的开始是 Postgres <a href="https://www.postgresql.org/docs/9.5/transaction-iso.html">官方文档</a>及其有关隔离级别的部分。</p>
<p>另请注意，在事务期间切换隔离级别时，您必须确保咨询 JDBC 驱动程序/数据库以了解支持哪些场景，哪些不支持。</p>
<h3 id="最常见的transactional-陷阱">最常见的@Transactional 陷阱</h3>
<p>Spring 初学者通常会遇到一个陷阱。看一下下面的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Transactional</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">invoice</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">createPdf</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// send invoice as email, etc.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="n">Propagation</span><span class="o">.</span><span class="na">REQUIRES_NEW</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createPdf</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>您有一个带有事务发票方法的 UserService 类。它调用 createPDF()，这也是事务性的。</p>
<p>一旦有人调用invoice()，您期望打开多少实际交易？</p>
<p>不，答案不是两个，而是一个。为什么？</p>
<p>让我们回到本指南的代理部分。 Spring 为您创建事务性 UserService 代理，但是一旦您进入 UserService 类并调用其他内部方法，就不再涉及代理。这意味着，您没有新的交易。</p>
<p>我们用一张图来看看：</p>
<p><a href="https://www.marcobehler.com/images/document3.png"><img loading="lazy" src="https://www.marcobehler.com/images/document3.png" alt="document3"  />
</a></p>
<p>您可以使用一些技巧（例如自注入）来绕过此限制。但主要的要点是：始终牢记代理事务边界。</p>
<h3 id="如何在-spring-boot-或-spring-mvc-中使用-transactional">如何在 Spring Boot 或 Spring MVC 中使用 @Transactional</h3>
<p>到目前为止，我们只讨论了简单的、核心的 Spring。但是 Spring Boot 呢？还是Spring Web MVC？他们处理交易的方式有什么不同吗？</p>
<p>最简洁的答案是不。</p>
<p>对于任一框架（或者更确切地说：Spring 生态系统中的所有框架），您将始终使用 <code>*@Transactional*</code> 注释，并结合事务管理器和 @EnableTransactionManagement 注释。没有其他办法。</p>
<p>然而，与 Spring Boot 的唯一区别是，它使用 JDBC 自动配置自动设置 <code>*@EnableTransactionManagement*</code> 注释并为您创建 <code>*PlatformTransactionManager*</code> 。在此处了解有关自动配置的更多信息。</p>
<h3 id="spring-如何处理回滚以及默认回滚策略">Spring 如何处理回滚（以及默认回滚策略）</h3>
<p>有关 Spring 回滚的部分将在本指南的下一版本中处理。</p>
<h2 id="spring-和-jpahibernate-事务管理如何工作">Spring 和 JPA/Hibernate 事务管理如何工作</h2>
<h3 id="目标同步-spring-的-transactional-和-hibernate--jpa">目标：同步 Spring 的 @Transactional 和 Hibernate / JPA</h3>
<p>在某些时候，您会希望 Spring 应用程序与另一个数据库库集成，例如 Hibernate（一种流行的 JPA 实现）或 Jooq 等。</p>
<p>让我们以普通 Hibernate 为例（注意：直接使用 Hibernate，或者通过 JPA 使用 Hibernate 并不重要）。</p>
<p>将之前的 UserService 重写为 Hibernate 如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">;</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionFactory</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// lets open up a transaction. remember setAutocommit(false)!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">session</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// save == insert our objects
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">session</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// and commit it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">session</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">().</span><span class="na">commit</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// close the session == our jdbc connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">session</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>这是一个普通的、旧的 Hibernate SessionFactory，是所有 Hibernate 查询的入口点。</li>
<li>使用 Hibernate API 手动管理会话（即：数据库连接）和事务。</li>
</ol>
<p>然而，上面的代码有一个很大的问题：</p>
<ul>
<li>Hibernate 不会知道 Spring 的 @Transactional 注释。</li>
<li>Spring 的 @Transactional 对 Hibernate 的事务一无所知。</li>
</ul>
<p>但我们实际上希望 Spring 和 Hibernate 能够无缝集成，这意味着它们了解彼此的事务。</p>
<p>用纯代码表示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">SessionFactory</span> <span class="n">sessionFactory</span><span class="o">;</span> <span class="c1">// (1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Transactional</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">sessionFactory</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">().</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> <span class="c1">// (2)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol>
<li>与之前相同的 SessionFactory</li>
<li>但不再需要手动状态管理。相反， getCurrentSession() 和 @Transactional 是同步的。</li>
</ol>
<p>到那里怎么走？</p>
<h3 id="使用-hibernatetransactionmanager">使用 HibernateTransactionManager</h3>
<p>对于这个集成问题有一个非常简单的解决方法：</p>
<p>您将使用 HibernateTransactionManager（如果使用普通 Hibernate）或 JpaTransactionManager（如果通过 JPA 使用 Hibernate），而不是在 Spring 配置中使用 DataSourcePlatformTransactionManager。</p>
<p>专门的 HibernateTransactionManager 将确保：</p>
<ol>
<li>通过 Hibernate（即 SessionFactory）管理事务。</li>
<li>足够聪明，允许 Spring 在非 Hibernate 中使用相同的事务，即 @Transactional Spring 代码。</li>
</ol>
<p>与往常一样，图片可能更容易理解（但请注意，代理和实际服务之间的流程仅在概念上正确且过于简单）。</p>
<p><a href="https://www.marcobehler.com/images/document4.png"><img loading="lazy" src="https://www.marcobehler.com/images/document4.png" alt="document4"  />
</a></p>
<p>简而言之，就是如何集成 Spring 和 Hibernate。</p>
<p>对于其他集成或更深入的理解，快速查看 Spring 提供的所有可能的 PlatformTransactionManager 实现会有所帮助。</p>
<h2 id="fin">Fin</h2>
<p>到目前为止，您应该对事务管理如何与 Spring 框架配合使用以及它如何应用于其他 Spring 库（如 Spring Boot 或 Spring WebMVC）有一个很好的概述。最大的收获应该是，最终使用哪个框架并不重要，这都与 JDBC 基础知识有关。</p>
<p>如果它们正确（记住：getConnection().setAutocommit(false).commit().），您将更容易理解稍后在复杂的企业应用程序中发生的情况。</p>
<p>谢谢阅读。</p>
<h2 id="致谢">致谢</h2>
<p>感谢 Andreas Eisele 对本指南早期版本的反馈。感谢 Ben Horsfield 提供了急需的 Javascript 片段来增强本指南。</p>
<p>原文链接：<a href="https://www.marcobehler.com/guides/spring-transaction-management-transactional-in-depth">https://www.marcobehler.com/guides/spring-transaction-management-transactional-in-depth</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Security - JWT</title>
      <link>https://blog.chensoul.com/posts/2023/08/16/spring-security-with-jwt/</link>
      <pubDate>Wed, 16 Aug 2023 11:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/16/spring-security-with-jwt/</guid>
      <description>简介和概述 JSON Web Token 或 JWT（更常见的名称）是一种开放的互联网标准 (RFC 7519)，用于以紧凑的方式在各方之间安全地传输可信信息。令牌包含编码为 JSON 对</description>
      <content:encoded><![CDATA[<h3 id="简介和概述">简介和概述</h3>
<p>JSON Web Token 或 JWT（更常见的名称）是一种开放的互联网标准 (RFC 7519)，用于以紧凑的方式在各方之间安全地传输可信信息。令牌包含编码为 JSON 对象的声明，并使用私有密钥或公钥/私钥对进行数字签名。它们是独立且可验证的，因为它们经过数字签名。 JWT 可以进行签名和/或加密。</p>
<p>签名的令牌验证令牌中包含的声明的完整性，而加密的令牌则向其他方隐藏声明。</p>
<p>JWT 也可用于信息交换，尽管它们更常用于授权，因为它们比使用内存中随机令牌的会话管理具有很多优势。其中最重要的是允许将身份验证逻辑委托给第三方服务器，例如 AuthO 等。</p>
<p>JWT 令牌分为 3 部分，即标头、有效负载和签名，格式为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>Header<span class="o">]</span>.<span class="o">[</span>Payload<span class="o">]</span>.<span class="o">[</span>Signature<span class="o">]</span>
</span></span></code></pre></div><ul>
<li><strong>Header</strong> − JWT 令牌的标头包含应用于 JWT 的加密操作列表。这可以是签名技术、有关内容类型的元数据信息等。标头以 JSON 对象的形式呈现，该对象被编码为 base64URL。有效 JWT 标头的示例是</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span> <span class="nt">&#34;alg&#34;</span><span class="p">:</span> <span class="s2">&#34;HS256&#34;</span><span class="p">,</span> <span class="nt">&#34;typ&#34;</span><span class="p">:</span> <span class="s2">&#34;JWT&#34;</span> <span class="p">}</span>
</span></span></code></pre></div><p>这里，“alg”为我们提供了有关所用算法类型的信息，“typ”为我们提供了信息的类型。</p>
<ul>
<li><strong>Payload</strong> − JWT 的有效负载部分包含使用令牌传输的实际数据。这部分也称为 JWT 令牌的“声明”部分。索赔可以分为三种类型：注册索赔、公开索赔和私人索赔。</li>
<li>注册的声明是推荐的但不是强制的声明，例如 iss(发行者)、sub(主题)、aud(受众) 等。</li>
<li>公共声明是那些使用 JWT 的人定义的声明。</li>
<li>私人声明或自定义声明是为了在相关方之间共享信息而创建的用户定义的声明。</li>
</ul>
<p>有效负载对象的示例可以是。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span> <span class="nt">&#34;sub&#34;</span><span class="p">:</span> <span class="s2">&#34;12345&#34;</span><span class="p">,</span> <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Johnny Hill&#34;</span><span class="p">,</span> <span class="nt">&#34;admin&#34;</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
</span></span></code></pre></div><p>有效负载对象与标头对象一样，也采用 base64Url 编码，并且该字符串构成 JWT 的第二部分。</p>
<ul>
<li><strong>Signature</strong>− JWT 的签名部分用于验证消息在此过程中没有更改。如果令牌是用私钥签名的，它还会验证发送者的身份。它是使用编码的标头、编码的有效负载、秘密和标头中指定的算法创建的。签名的一个例子是。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">HMACSHA256</span><span class="p">(</span> <span class="nx">base64UrlEncode</span><span class="p">(</span><span class="nx">header</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;.&#34;</span> <span class="o">+</span> <span class="nx">base64UrlEncode</span><span class="p">(</span><span class="nx">payload</span><span class="p">),</span> <span class="nx">secret</span><span class="p">)</span>
</span></span></code></pre></div><p>如果我们输入标头、有效负载和签名，我们会得到一个令牌，如下所示。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-basic" data-lang="basic"><span class="line"><span class="cl"><span class="vg">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9</span><span class="o">.</span><span class="vg">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6I</span>
</span></span><span class="line"><span class="cl"><span class="vg">kpvaG4gRG9lIiwiYWRtaW4iOmZhbHNlfQ</span><span class="o">.</span><span class="vg">gWDlJdpCTIHVYKkJSfAVNUn0ZkAjMxskDDm</span><span class="il">-5</span><span class="vg">Fhe</span>
</span></span><span class="line"><span class="cl"><span class="vg">WJ7xXgW8k5CllcGk4C9qPrfa1GdqfBrbX_1x1E39JY8BYLobAfAg1fs_Ky8Z7U1oCl6HL63yJq_</span>
</span></span><span class="line"><span class="cl"><span class="vg">wVNBHp49hWzg3</span><span class="o">-</span><span class="vg">ERxkqiuTv0tIuDOasIdZ5FtBdtIP5LM9Oc1tsuMXQXCGR8GqGf1Hl2qv8MCyn</span>
</span></span><span class="line"><span class="cl"><span class="vg">NZJuVdJKO_L3WGBJouaTpK1u2SEleVFGI2HFvrX_jS2ySzDxoO9KjbydK0LNv_zOI7kWv</span><span class="o">-</span><span class="vg">gAmA</span>
</span></span><span class="line"><span class="cl"><span class="vg">j</span><span class="o">-</span><span class="vg">v0mHdJrLbxD7LcZJEGRScCSyITzo6Z59_jG_97oNLFgBKJbh12nvvPibHpUYWmZuHkoGvuy5RLUA</span>
</span></span></code></pre></div><p>现在，可以使用承载模式在授权标头中使用此令牌。</p>
<p><strong>Authorization − Bearer</strong> 授权 - 持有者</p>
<p>使用 JWT 令牌进行授权是其最常见的应用。令牌通常在服务器中生成并发送到客户端，并存储在会话存储或本地存储中。要访问受保护的资源，客户端将在标头中发送 JWT，如上所述。我们将在下面的部分中看到 Spring Security 中的 JWT 实现。</p>
<h3 id="使用-jwt-开始使用-spring-security">使用 JWT 开始使用 Spring Security</h3>
<p>我们要开发的应用程序将使用 JWT 处理基本的用户身份验证和授权。让我们开始访问 start.spring.io，我们将在其中创建一个具有以下依赖项的 Maven 应用程序。</p>
<ul>
<li>Spring Web</li>
<li>Spring Security</li>
</ul>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/maven_project_java.jpg" alt="Maven Project Java"  />
</p>
<p>我们生成项目，下载后将其解压到我们选择的文件夹中。然后我们可以使用我们选择的任何 IDE。我将使用 Spring Tools Suite 4，因为它针对 Spring 应用程序进行了最优化。</p>
<p>除了上述依赖项之外，我们还将包含来自 Maven 中央存储库的 io.jsonwebtoken 的 jwt 依赖项，因为它不包含在 spring 初始化程序中。这种依赖关系负责涉及 JWT 的所有操作，包括构建令牌、解析令牌以获取声明等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>jjwt<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;version&gt;</span>0.9.1<span class="nt">&lt;/version&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>我们的 pom.xml 文件现在应该与此类似。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> 
</span></span><span class="line"><span class="cl">   <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span> 
</span></span><span class="line"><span class="cl">   <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 
</span></span></span><span class="line"><span class="cl"><span class="s">   https://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;parent&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2.3.1.RELEASE<span class="nt">&lt;version&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;relativePath</span> <span class="nt">/&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- lookup parent from repository --&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/parent&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>com.spring.security<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>jwtbasic<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;name&gt;</span>jwtbasic<span class="nt">&lt;/name&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;description&gt;</span>Demo project for Spring Boot<span class="nt">&lt;/description&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;properties&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/properties&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependencies&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>io.jsonwebtoken<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>jjwt<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;version&gt;</span>0.9.1<span class="nt">&lt;/version&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>javax.xml.bind<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>jaxb-api<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;exclusions&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;exclusion&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.junit.vintage<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>junit-vintage-engine<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;/exclusion&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/exclusions&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-security-test<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;scope&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependencies&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;build&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;plugins&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;plugin&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;/plugin&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/plugins&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/build&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>现在我们的项目已经设置完毕，我们将创建控制器类 Hello Controller，它公开一个 Get 端点。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.spring.security.jwtbasic.controllers</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在我们将创建一个名为 config 的包，在其中添加扩展 Spring Security 的 WebSecurityConfigurerAdapter 类的配置类。这将为我们提供项目配置和应用程序安全性所需的所有功能和定义。现在，我们通过实现生成相同实例的方法来提供 BcryptPasswordEncoder 实例。我们用 @Bean 注释该方法以添加到 Spring 上下文中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.spring.security.jwtbasic.config</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.http.SessionCreationPolicy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.spring.security.jwtbasic.jwtutils.JwtAuthenticationEntryPoint</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.spring.security.jwtbasic.jwtutils.JwtFilter</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>The JWT includes a secret which we will define in our application.properties file as given below.
JWT 包含一个秘密，我们将在 application.properties 文件中定义该秘密，如下所示。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">secret</span><span class="o">=</span><span class="s">somerandomsecret</span>
</span></span></code></pre></div><p>现在让我们创建一个名为 jwtutils 的包。该包将包含与 JWT 操作相关的所有类和接口，其中包括。</p>
<ul>
<li>生成令牌</li>
<li>验证令牌</li>
<li>检查签名</li>
<li>验证声明和权限</li>
</ul>
<p>在此包中，我们创建第一个类，称为令牌管理器。此类将负责使用 io.jsonwebtoken.Jwts 创建和验证令牌。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.spring.security.jwtbasic.jwtutils</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Base64</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.jsonwebtoken.Claims</span><span class="o">;</span> <span class="kn">import</span> <span class="nn">io.jsonwebtoken.Jwts</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.jsonwebtoken.SignatureAlgorithm</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TokenManager</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="cm">/** 
</span></span></span><span class="line"><span class="cl"><span class="cm">   *
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="n">7008375124389347049L</span><span class="o">;</span> <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">TOKEN_VALIDITY</span> <span class="o">=</span> <span class="n">10</span> <span class="o">*</span> <span class="n">60</span> <span class="o">*</span> <span class="n">60</span><span class="o">;</span> <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${secret}&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">String</span> <span class="n">jwtSecret</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">generateJwtToken</span><span class="o">(</span><span class="n">UserDetails</span> <span class="n">userDetails</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">claims</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">Jwts</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">setClaims</span><span class="o">(</span><span class="n">claims</span><span class="o">).</span><span class="na">setSubject</span><span class="o">(</span><span class="n">userDetails</span><span class="o">.</span><span class="na">getUsername</span><span class="o">())</span> 
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">setIssuedAt</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()))</span> 
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">setExpiration</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="n">TOKEN_VALIDITY</span> <span class="o">*</span> <span class="n">1000</span><span class="o">))</span> 
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">signWith</span><span class="o">(</span><span class="n">SignatureAlgorithm</span><span class="o">.</span><span class="na">HS512</span><span class="o">,</span> <span class="n">jwtSecret</span><span class="o">).</span><span class="na">compact</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">validateJwtToken</span><span class="o">(</span><span class="n">String</span> <span class="n">token</span><span class="o">,</span> <span class="n">UserDetails</span> <span class="n">userDetails</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">getUsernameFromToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">      <span class="n">Claims</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">Jwts</span><span class="o">.</span><span class="na">parser</span><span class="o">().</span><span class="na">setSigningKey</span><span class="o">(</span><span class="n">jwtSecret</span><span class="o">).</span><span class="na">parseClaimsJws</span><span class="o">(</span><span class="n">token</span><span class="o">).</span><span class="na">getBody</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="n">Boolean</span> <span class="n">isTokenExpired</span> <span class="o">=</span> <span class="n">claims</span><span class="o">.</span><span class="na">getExpiration</span><span class="o">().</span><span class="na">before</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">(</span><span class="n">username</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">userDetails</span><span class="o">.</span><span class="na">getUsername</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isTokenExpired</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsernameFromToken</span><span class="o">(</span><span class="n">String</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="kd">final</span> <span class="n">Claims</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">Jwts</span><span class="o">.</span><span class="na">parser</span><span class="o">().</span><span class="na">setSigningKey</span><span class="o">(</span><span class="n">jwtSecret</span><span class="o">).</span><span class="na">parseClaimsJws</span><span class="o">(</span><span class="n">token</span><span class="o">).</span><span class="na">getBody</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">claims</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这里，由于所有令牌都应该有一个到期日期，因此我们从令牌有效性常量开始。在这里，我们希望我们的令牌在生成后 10 分钟内有效。当我们生成令牌时，我们将使用这个值。然后，我们使用 @Value 注释将歌唱键的值从 application.properties 文件中提取到 jwtSecret 字段中。</p>
<p>我们这里有两种方法 -</p>
<ul>
<li><strong>generateJwtToken()</strong> −  此方法用于在用户成功进行身份验证时生成令牌。要在此处创建令牌，我们使用用户名、令牌发行日期和令牌到期日期。正如我们之前讨论的，这将形成令牌或声明的有效负载部分。为了生成令牌，我们使用 Jwts 的 builder() 方法。此方法返回一个新的 JwtBuilder 实例，可用于创建紧凑的 JWT 序列化字符串。</li>
</ul>
<p>为了设置声明，我们使用 setClaims() 方法，然后设置每个声明。对于这个令牌，我们有 setSubject(username)、发行日期和到期日期。我们还可以像上面讨论的那样提出自定义声明。这可以是我们想要的任何值，其中可能包括用户角色、用户权限等。</p>
<p>然后我们设置令牌的签名部分。这是使用 signWith() 方法完成的，我们设置我们喜欢使用的哈希算法和密钥。然后，我们使用compact()方法构建JWT，并根据JWT紧凑序列化规则将其序列化为紧凑的、URL安全的字符串。</p>
<ul>
<li><strong>validateJwtToken()</strong> − 现在已经处理了令牌的生成，我们应该关注令牌作为请求的一部分时的验证过程。验证令牌意味着验证请求是否经过身份验证，并且令牌是生成并发送给用户的令牌。在这里，我们需要解析令牌以获取用户名、角色、权限、有效期等声明。</li>
</ul>
<p>为了验证令牌，我们需要首先解析它。这是使用 Jwts 的 parser() 方法完成的。然后，我们需要设置用于生成令牌的签名密钥，然后在令牌上使用 parseClaimsJws() 方法根据构建器的当前配置状态解析紧凑的序列化 JWS 字符串，并返回生成的 Claims JWS 实例。然后使用 getBody() 方法返回生成令牌时使用的声明实例。</p>
<p>从获得的声明实例中，我们提取主题和到期日期以验证令牌的有效性。用户名应该是用户的用户名，并且令牌不应过期。如果满足这两个条件，我们将返回 true，这表示令牌有效。</p>
<p>我们要创建的下一个类是 JwtUserDetailsS​​ervice。这个类将扩展 Spring security 的 UserDetailsS​​ervice，我们将实现 loadUserByUsername() 方法，如下所示 -</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.spring.security.jwtbasic.jwtutils</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.User</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UsernameNotFoundException</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtUserDetailsService</span> <span class="kd">implements</span> <span class="n">UserDetailsService</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UsernameNotFoundException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="s">&#34;randomuser123&#34;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">username</span><span class="o">))</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="s">&#34;randomuser123&#34;</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">            <span class="s">&#34;$2a$10$slYQmyNdGzTn7ZLBXBChFOC9f6kFjAqPhccnP6DxlWXx2lPk1C3G6&#34;</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">            <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;());</span> 
</span></span><span class="line"><span class="cl">      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">         <span class="k">throw</span> <span class="k">new</span> <span class="n">UsernameNotFoundException</span><span class="o">(</span><span class="s">&#34;User not found with username: &#34;</span> <span class="o">+</span> <span class="n">username</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">      <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这里，由于这是一个基本应用程序，其唯一目的是演示 JWT 身份验证，因此我们使用了一组用户详细信息，而不是使用数据库。为了方便起见，我们将用户名指定为“randomuser123”，并将密码（即“密码”）编码为“$2a$10$slYQmyNdGzTn7ZLBXBChFOC9f6kFjAqPhccnP6DxlWXx2lPk1C3G6”。</p>
<p>接下来，我们为请求和响应模型创建类。这些模型决定了我们的请求和响应格式如何进行身份验证。下面给出的第一个快照是请求模型。正如我们所看到的，我们将在请求中接受两个属性——用户名和密码。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.spring.security.jwtbasic.jwtutils.models</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtRequestModel</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="cm">/** 
</span></span></span><span class="line"><span class="cl"><span class="cm">   * 
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="n">2636936156391265891L</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="nf">JwtRequestModel</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="nf">JwtRequestModel</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="kd">super</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span> <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">password</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>以下是身份验证成功后的响应模型的代码。正如我们所看到的，在身份验证成功后，我们将把令牌发送回用户。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.spring.security.jwtbasic.jwtutils.models</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtResponseModel</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   *
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="n">1L</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">token</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="nf">JwtResponseModel</span><span class="o">(</span><span class="n">String</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">token</span> <span class="o">=</span> <span class="n">token</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getToken</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">token</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在为了进行身份验证，让我们创建一个控制器，如下所示。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.spring.security.jwtbasic.jwtutils</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.BadCredentialsException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.DisabledException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.UsernamePasswordAuthenticationToken</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.CrossOrigin</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PostMapping</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestBody</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RestController</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.spring.security.jwtbasic.jwtutils.models.JwtRequestModel</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.spring.security.jwtbasic.jwtutils.models.JwtResponseModel</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">JwtUserDetailsService</span> <span class="n">userDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">TokenManager</span> <span class="n">tokenManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;&gt;</span> <span class="nf">createToken</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">JwtRequestModel</span>
</span></span><span class="line"><span class="cl">   <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">authenticationManager</span><span class="o">.</span><span class="na">authenticate</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="k">new</span>
</span></span><span class="line"><span class="cl">            <span class="n">UsernamePasswordAuthenticationToken</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">request</span><span class="o">.</span><span class="na">getPassword</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">         <span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">DisabledException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">throw</span> <span class="k">new</span> <span class="n">Exception</span><span class="o">(</span><span class="s">&#34;USER_DISABLED&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">BadCredentialsException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">throw</span> <span class="k">new</span> <span class="n">Exception</span><span class="o">(</span><span class="s">&#34;INVALID_CREDENTIALS&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="kd">final</span> <span class="n">UserDetails</span> <span class="n">userDetails</span> <span class="o">=</span> <span class="n">userDetailsService</span><span class="o">.</span><span class="na">loadUserByUsername</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">      <span class="kd">final</span> <span class="n">String</span> <span class="n">jwtToken</span> <span class="o">=</span> <span class="n">tokenManager</span><span class="o">.</span><span class="na">generateJwtToken</span><span class="o">(</span><span class="n">userDetails</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="k">new</span> <span class="n">JwtResponseModel</span><span class="o">(</span><span class="n">jwtToken</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果我们查看代码，我们可以看到，我们自动装配了三个依赖项，即 JwtUserDetailsS​​ervice、AuthenticationManager 和 TokenManager。虽然我们已经看到了上面 JwtUserDetailsS​​ervice 和 TokenManager 类的实现，但身份验证管理器 bean 是我们将在 WebSecurityConfig 类中创建的一个。</p>
<p>AuthenticationManager 类将负责我们的身份验证。我们将使用 UsernamePasswordAuthenticationToken 模型来验证请求。如果身份验证成功，我们将为用户生成一个 JWT，该 JWT 可以在后续请求的 Authorization 标头中发送以获取任何资源。</p>
<p>正如我们所看到的，我们正在使用 JwtUserDetailsS​​ervice 类的 loadUserByUsername() 方法和 TokenManager 类中的generateJwtToken()。</p>
<p>如上所述，生成的 JWT 作为成功身份验证的响应发送给用户。</p>
<p>现在是我们创建过滤器的时候了。过滤器类将用于跟踪我们的请求并检测它们是否在标头中包含有效令牌。如果令牌有效，我们将继续请求，否则我们将发送 401 错误（未经授权）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.spring.security.jwtbasic.jwtutils</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.FilterChain</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.UsernamePasswordAuthenticationToken</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.context.SecurityContextHolder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.authentication.WebAuthenticationDetailsSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.filter.OncePerRequestFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io.jsonwebtoken.ExpiredJwtException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtFilter</span> <span class="kd">extends</span> <span class="n">OncePerRequestFilter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">JwtUserDetailsService</span> <span class="n">userDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">TokenManager</span> <span class="n">tokenManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">      <span class="n">String</span> <span class="n">tokenHeader</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">&#34;Authorization&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">tokenHeader</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">tokenHeader</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&#34;Bearer &#34;</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">token</span> <span class="o">=</span> <span class="n">tokenHeader</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">7</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">         <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">username</span> <span class="o">=</span> <span class="n">tokenManager</span><span class="o">.</span><span class="na">getUsernameFromToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">         <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalArgumentException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Unable to get JWT Token&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">         <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExpiredJwtException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;JWT Token has expired&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">         <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Bearer String not found in token&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">username</span> <span class="o">&amp;&amp;</span><span class="n">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">getAuthentication</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">UserDetails</span> <span class="n">userDetails</span> <span class="o">=</span> <span class="n">userDetailsService</span><span class="o">.</span><span class="na">loadUserByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="o">(</span><span class="n">tokenManager</span><span class="o">.</span><span class="na">validateJwtToken</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">userDetails</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">UsernamePasswordAuthenticationToken</span>
</span></span><span class="line"><span class="cl">            <span class="n">authenticationToken</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UsernamePasswordAuthenticationToken</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">userDetails</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">userDetails</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">            <span class="n">authenticationToken</span><span class="o">.</span><span class="na">setDetails</span><span class="o">(</span><span class="k">new</span>
</span></span><span class="line"><span class="cl">            <span class="n">WebAuthenticationDetailsSource</span><span class="o">().</span><span class="na">buildDetails</span><span class="o">(</span><span class="n">request</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="n">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">setAuthentication</span><span class="o">(</span><span class="n">authenticationToken</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">         <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>正如我们在上面看到的，我们也在这里自动装配了 JwtUserDetailsS​​ervice 和 TokenManager 类。我们扩展了 SpringSecurity 的 OncePerRequestFilter，确保过滤器针对每个请求运行。我们已经为 OncePerRequestFilter 类的重写方法 doFilterInternal() 提供了实现。</p>
<p>这里的方法从标头中提取令牌并借助 TokenManager 类的 validateJwtToken() 方法对其进行验证。在验证过程中，它会检查用户名和到期日期。如果两个值都有效，我们会将身份验证保存在 Spring Security 上下文中，并让代码继续执行过滤器链中的下一个过滤器。如果任何验证失败或令牌存在问题，或者未找到令牌，我们会抛出适当的异常并发回适当的响应，同时阻止请求继续进行。</p>
<p>为我们的请求创建过滤器后，我们现在创建 JwtAutheticationEntryPoint 类。该类扩展了 Spring 的 AuthenticationEntryPoint 类，并拒绝每个未经身份验证的请求，并向客户端发送错误代码 401。我们重写了 AuthenticationEntryPoint 类的 begin() 方法来做到这一点。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.spring.security.jwtbasic.jwtutils</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.AuthenticationException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.AuthenticationEntryPoint</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtAuthenticationEntryPoint</span> <span class="kd">implements</span> <span class="n">AuthenticationEntryPoint</span><span class="o">,</span>
</span></span><span class="line"><span class="cl"><span class="n">Serializable</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">commence</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span>
</span></span><span class="line"><span class="cl">   <span class="n">response</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">   <span class="n">AuthenticationException</span> <span class="n">authException</span><span class="o">)</span> <span class="kd">throws</span>
</span></span><span class="line"><span class="cl">   <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_UNAUTHORIZED</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">   <span class="s">&#34;Unauthorized&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，让我们回到 WebSecurityConfig 类并完成其余的配置。如果我们还记得的话，我们将需要我们的 Jwt 控制器类的 AuthenticationManager bean，并将我们刚刚创建的过滤器添加到我们的配置中。我们还将配置哪些请求需要进行身份验证，哪些请求不需要进行身份验证。我们还将 AuthenticationEntryPoint 添加到请求中以发回 401 错误响应。因为，我们在使用 jwt 时也不需要维护会话变量，我们可以使会话成为无状态的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.spring.security.jwtbasic.config</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.http.SessionCreationPolicy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.spring.security.jwtbasic.jwtutils.JwtAuthenticationEntryPoint</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.spring.security.jwtbasic.jwtutils.JwtFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">JwtAuthenticationEntryPoint</span> <span class="n">authenticationEntryPoint</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">UserDetailsService</span> <span class="n">userDetailsService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">JwtFilter</span> <span class="n">filter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">auth</span><span class="o">.</span><span class="na">userDetailsService</span><span class="o">(</span><span class="n">userDetailsService</span><span class="o">).</span><span class="na">passwordEncoder</span><span class="o">(</span><span class="n">passwordEncoder</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">AuthenticationManager</span> <span class="nf">authenticationManagerBean</span><span class="o">()</span> <span class="kd">throws</span>
</span></span><span class="line"><span class="cl">   <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">authenticationManagerBean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">http</span><span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">().</span><span class="na">authenticationEntryPoint</span><span class="o">(</span><span class="n">authenticationEntryPoint</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">sessionManagement</span><span class="o">().</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">http</span><span class="o">.</span><span class="na">addFilterBefore</span><span class="o">(</span><span class="n">filter</span><span class="o">,</span> <span class="n">UsernamePasswordAuthenticationFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>正如我们所看到的，我们已经完成了所有这些，现在我们的应用程序已准备就绪。让我们启动应用程序并使用邮递员来发出我们的请求。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/postman_body.jpg" alt="Postman Body"  />
</p>
<p>在这里，我们发出了第一个获取令牌的请求，正如我们所看到的，在提供正确的用户名/密码组合后，我们将取回令牌。</p>
<p>现在，在标头中使用该标记，让我们调用 /hello 端点。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/postman_authorization_body.jpg" alt="Postman Authorization Body"  />
</p>
<p>正如我们所看到的，由于请求已通过身份验证，我们得到了所需的响应。现在，如果我们篡改令牌或不发送 Authorization 标头，我们将收到应用程序中配置的 401 错误。这确保了使用 JWT 保护我们的请求。</p>
<p>原文链接：<a href="https://www.tutorialspoint.com/spring_security/spring_security_with_jwt.htm">https://www.tutorialspoint.com/spring_security/spring_security_with_jwt.htm</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Security - OAuth2</title>
      <link>https://blog.chensoul.com/posts/2023/08/16/spring-security-with-oauth2/</link>
      <pubDate>Wed, 16 Aug 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/16/spring-security-with-oauth2/</guid>
      <description>OAuth 2.0 基础知识 OAuth 2.0 由 IETF OAuth 工作组开发并于 2012 年 10 月发布。它作为一种开放授权协议，使第三方应用程序能够代表资源所有者对 HTTP 服务进行有限访问。它可以在不</description>
      <content:encoded><![CDATA[<h2 id="oauth-20-基础知识">OAuth 2.0 基础知识</h2>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/oauth_2_fundamentals.jpg" alt="OAuth 2.0 Fundamentals"  />
</p>
<p>OAuth 2.0 由 IETF OAuth 工作组开发并于 2012 年 10 月发布。它作为一种开放授权协议，使第三方应用程序能够代表资源所有者对 HTTP 服务进行有限访问。它可以在不泄露用户身份或长期凭证的情况下做到这一点。第三方应用程序本身也可以代表其使用它。</p>
<p>OAuth 的工作原理包括将用户身份验证委托给托管用户帐户的服务，并授权第三方应用程序访问用户的帐户。</p>
<p>让我们考虑一个例子。假设我们要登录网站“clientsite.com”。我们可以通过 Facebook、Github、Google 或 Microsoft 登录。我们选择上面给出的选项中的任何选项，然后我们将被重定向到相应的网站进行登录。如果登录成功，系统会询问我们是否要授予 clientsite.com 访问其请求的特定数据的权限。</p>
<p>我们选择所需的选项，然后使用授权代码或错误代码重定向到 clientsite.com，登录是否成功取决于我们在第三方资源中的操作。这就是OAuth 2的基本工作原理。</p>
<p>OAuth 系统涉及五个关键角色。让我们把它们列出来 -</p>
<ul>
<li><strong>User / Resource Owner</strong> − 用户/资源所有者- 最终用户，负责身份验证并同意与客户端共享资源。</li>
<li><strong>User-Agent</strong> − 用户代理- 用户使用的浏览器。</li>
<li><strong>Client</strong> − 客户端 - 请求访问令牌的应用程序。</li>
<li><strong>Authorization Server</strong> − 授权服务器- 用于验证用户/客户端的服务器。它颁发访问令牌并在其整个生命周期内对其进行跟踪。</li>
<li><strong>Resource Server</strong> − 资源服务器- 提供对所请求资源的访问的API。它验证访问令牌并提供授权。</li>
</ul>
<h3 id="入门">入门</h3>
<p>我们将使用 Spring Security 和 OAuth 2.0 开发一个 Spring Boot 应用程序来说明上述内容。我们现在将开发一个带有内存数据库的基本应用程序来存储用户凭据。该应用程序将使我们轻松了解 OAuth 2.0 与 Spring Security 的工作原理。</p>
<p>让我们使用 Spring 初始化程序在 Java 8 中创建一个 Maven 项目。让我们从 start.spring.io 开始。我们生成一个具有以下依赖项的应用程序 -</p>
<ul>
<li>Spring Web</li>
<li>Spring Security</li>
<li>Cloud OAuth2</li>
<li>Spring Boot Devtools</li>
</ul>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/start_spring.jpg" alt="Start Spring"  />
<img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/project_metadata.jpg" alt="Project Metadata"  />
</p>
<p>通过上面的配置，我们点击Generate按钮生成一个项目。该项目将以 zip 文件形式下载。我们将 zip 解压到一个文件夹中。然后我们可以在我们选择的 IDE 中打开该项目。我在这里使用 Spring Tools Suite，因为它针对 Spring 应用程序进行了优化。我们也可以根据需要使用 Eclipse 或 IntelliJ Idea。</p>
<p>因此，我们在STS中打开项目，让依赖项被下载。然后我们可以在包资源管理器窗口中看到项目结构。它应该类似于下面的屏幕截图。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/project_in_sts.jpg" alt="Project in STS"  />
</p>
<p>如果我们打开 pom.xml 文件，我们可以查看与项目相关的依赖项和其他详细信息。它应该看起来像这样。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span> 
</span></span><span class="line"><span class="cl">   <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span> 
</span></span><span class="line"><span class="cl">   <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 
</span></span></span><span class="line"><span class="cl"><span class="s">   https://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;parent&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2.3.1.RELEASE<span class="nt">&lt;/version&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;relativePath/&gt;</span> <span class="c">&lt;!-- lookup parent from repository --&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/parent&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>com.tutorial<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>spring.security.oauth2<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;name&gt;</span>spring.security.oauth2<span class="nt">&lt;/name&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;description&gt;</span>Demo project for Spring Boot<span class="nt">&lt;/description&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;properties&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;spring-cloud.version&gt;</span>Hoxton.SR6<span class="nt">&lt;/spring-cloud.version&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/properties&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependencies&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-oauth2<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span> <span class="nt">&lt;exclusions&gt;</span>    <span class="nt">&lt;exclusion&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.junit.vintage<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>junit-vintage-engine<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;/exclusion&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;/exclusions&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-security-test<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependencies&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependencyManagement&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependencies&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;version&gt;</span>${spring-cloud.version}<span class="nt">&lt;/version&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;type&gt;</span>pom<span class="nt">&lt;/type&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>import<span class="nt">&lt;/scope&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependencies&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependencyManagement&gt;&lt;build&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;plugins&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/plugin&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/plugins&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/build&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>现在，在我们应用程序的基础包（即 com.tutorial.spring.security.oauth2）中，添加一个名为 config 的新包，我们将在其中添加配置类。</p>
<p>让我们创建第一个配置类 UserConfig，它扩展了 Spring Security 的 WebSecurityConfigurerAdapter 类来管理客户端应用程序的用户。我们给这个类加上@Configuration注解，告诉Spring它是一个配置类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.oauth2.config</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.User</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.NoOpPasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.InMemoryUserDetailsManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.UserDetailsManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">UserDetailsManager</span> <span class="n">userDetailsManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InMemoryUserDetailsManager</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">      <span class="n">UserDetails</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">withUsername</span><span class="o">(</span><span class="s">&#34;john&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="s">&#34;12345&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">build</span><span class="o">();</span> <span class="n">userDetailsManager</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> <span class="k">return</span> <span class="n">userDetailsManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">NoOpPasswordEncoder</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">AuthenticationManager</span> <span class="nf">authenticationManagerBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">authenticationManagerBean</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后，我们添加 UserDetailsS​​ervice 的 bean 来检索用户详细信息以进行身份​​验证和授权。为了将其放入 Spring 上下文中，我们用 @Bean 对其进行注释。为了使本教程简单易懂，我们使用 InMemoryUserDetailsManager 实例。对于实际应用程序，我们可以使用其他实现，例如 JdbcUserDetailsManager 来连接到数据库等。为了能够在此示例中轻松创建用户，我们使用 UserDetailsManager 接口，该接口扩展了 UserDetailsS​​ervice 并具有 createUser()、updateUser() 等方法。然后，我们使用构建器类创建一个用户。我们现在给他一个用户名、密码和“读取”权限。然后，使用 createUser() 方法添加新创建的用户并返回 UserDetailsManager 实例，从而将其放入 Spring 上下文中。</p>
<p>为了能够使用我们定义的UserDetailsS​​ervice，有必要在Spring上下文中提供一个PasswordEncoder bean。再次强调，为了简单起见，我们现在使用 NoOpPasswordEncoder。 NoOpPasswordEncoder 不应该用于实际生产应用程序，因为它不安全。 NoOpPasswordEncoder 不会对密码进行编码，仅适用于开发或测试场景或概念证明。</p>
<p>我们应该始终使用 Spring Security 提供的其他高度安全的选项，其中最流行的是 BCryptPasswordEncoder，我们将在后面的系列教程中使用它。为了将其放入 Spring 上下文中，我们使用 @Bean 注释该方法。</p>
<p>然后，我们重写 WebSecurityConfigurerAdapter 的 AuthenticationManager bean 方法，该方法返回authenticationManagerBean 以将身份验证管理器放入 Spring 上下文中。</p>
<p>现在，为了添加客户端配置，我们添加一个名为 AuthorizationServerConfig 的新配置类，它扩展了 Spring Security 的 AuthorizationServerConfigurerAdapter 类。 AuthorizationServerConfigurerAdapter 类用于使用 spring security oauth2 模块配置授权服务器。我们也用@Configuration注释这个类。要将授权服务器功能添加到此类中，我们需要添加 @EnableAuthorizationServer 注释，以便应用程序可以充当授权服务器。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.oauth2.config</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span> <span class="nd">@EnableAuthorizationServer</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationServerConfig</span> <span class="kd">extends</span> <span class="n">AuthorizationServerConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">ClientDetailsServiceConfigurer</span> <span class="n">clients</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">clients</span><span class="o">.</span><span class="na">inMemory</span><span class="o">()</span> <span class="o">.</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;oauthclient1&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;oauthsecret1&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">)</span> <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerEndpointsConfigurer</span> <span class="n">endpoints</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">endpoints</span><span class="o">.</span><span class="na">authenticationManager</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>为了检查 oauth 令牌，Spring Security oauth 公开两个端点 - /oauth/check_token 和 /oauth/token_key。默认情况下，这些端点在 denyAll() 后面受到保护。 tokenKeyAccess() 和 checkTokenAccess() 方法打开这些端点以供使用。</p>
<p>我们将在 UserConfig 类中配置的 AuthenticationManager bean 自动装配为此处的依赖项，稍后我们将使用它。</p>
<p>然后，我们重写 AuthorizationServerConfigurerAdapter 的两个 configure() 方法，以提供客户端详细信息服务的内存中实现。第一种方法使用 ClientDetailsS​​erviceConfigurer 作为参数，顾名思义，允许我们为授权服务器配置客户端。这些客户端代表能够使用该授权服务器功能的应用程序。由于这是学习 OAuth2 实现的基本应用程序，因此我们现在将保持简单并使用具有以下属性的内存中实现 -</p>
<ul>
<li><strong>clientId</strong> −客户端的 ID。必需的。</li>
<li><strong>secret</strong> − 客户端密码，受信任的客户端所需</li>
<li><strong>scope</strong> − 范围 - 客户端的限制范围，换句话说，客户端权限。如果留空或未定义，则客户端不受任何范围的限制。</li>
<li><strong>authorizedGrantTypes</strong> − 客户端被授权使用的授权类型。 grant type表示客户端从授权服务器获取token的方式。我们将使用“密码”授予类型，因为它是最简单的。稍后，我们将针对另一个用例使用另一种授权类型。</li>
</ul>
<p>在“密码”授权授予类型中，用户需要向我们的客户端应用程序提供他/她的用户名、密码和范围，然后客户端应用程序使用这些凭据以及我们想要从中获取令牌的授权服务器的凭据。</p>
<p>我们重写的另一个configure()方法使用AuthorizationServerEndpointsConfigurer作为参数，用于将AuthenticationManager附加到授权服务器配置。</p>
<p>通过这些基本配置，我们的授权服务器就可以使用了。让我们继续启动并使用它。我们将使用 Postman (h ttps://www.postman.com/downloads/) 来提出我们的请求。</p>
<p>使用 STS 时，我们可以启动应用程序并开始在控制台中查看日志。当应用程序启动时，我们可以在控制台中找到应用程序公开的 oauth2 端点。在这些端点中，我们现在将使用以下令牌 -</p>
<p><strong>/oauth/token – 用于获取令牌。</strong></p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/obtaining_the_token.jpg" alt="Obtaining the Token"  />
</p>
<p>如果我们检查这里的邮递员快照，我们可以注意到一些事情。让我们在下面列出它们。</p>
<ul>
<li>URL - 我们的 Spring Boot 应用程序在本地计算机的端口 8080 上运行，因此请求指向 http://localhost:8080。接下来的部分是 /oauth/token，我们知道它是 OAuth 公开的用于生成令牌的端点。</li>
<li>查询参数 - 由于这是“密码”授权授予类型，因此用户需要向我们的客户端应用程序提供他/她的用户名、密码和范围，然后客户端应用程序使用这些凭据及其凭据发送给我们想要令牌的授权服务器从。</li>
<li>客户端授权- Oauth 系统要求客户端获得授权才能提供令牌。因此，在授权标头下，我们提供客户端身份验证信息，即我们在应用程序中配置的用户名和密码。</li>
</ul>
<p>让我们仔细看看查询参数和授权标头 -</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/authorization_header.jpg" alt="Authorization Header"  />
</p>
<p>查询参数</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/client_credentials.jpg" alt="Client Credentials"  />
</p>
<p>客户凭证</p>
<p>如果一切正确，我们将能够在响应中看到生成的令牌以及 200 ok 状态。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/response.jpg" alt="Response"  />
</p>
<p>响应</p>
<p>我们可以通过输入错误的凭据或不输入凭据来测试我们的服务器，我们将收到一个错误，表明请求未经授权或凭据错误。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/oauth_authorization_server.jpg" alt="OAuth Authorization Server"  />
</p>
<p>这是我们的基本 oauth 授权服务器，它使用密码授予类型来生成并提供密码。</p>
<p>接下来，让我们实现一个更安全、更常见的 oauth2 身份验证应用，即使用授权码授予类型。为此，我们将更新当前的应用程序。</p>
<p>授权授予类型与密码授予类型不同，因为用户不必与客户端应用程序共享其凭据。他仅与授权服务器共享它们，作为回报，授权代码被发送到客户端，用于对客户端进行身份验证。它比密码授予类型更安全，因为用户凭据不与客户端应用程序共享，因此用户的信息保持安全。</p>
<p>除非得到用户的批准，客户端应用程序无法访问任何重要的用户信息。</p>
<p>通过几个简单的步骤，我们可以在应用程序中设置一个具有授权授予类型的基本 oauth 服务器。让我们看看如何。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.oauth2.config</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span> 
</span></span><span class="line"><span class="cl"><span class="nd">@EnableAuthorizationServer</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationServerConfig</span> <span class="kd">extends</span> <span class="n">AuthorizationServerConfigurerAdapter</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">ClientDetailsServiceConfigurer</span> <span class="n">clients</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">clients</span><span class="o">.</span><span class="na">inMemory</span><span class="o">()</span>       
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;oauthclient1&#34;</span><span class="o">)</span>   
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;oauthsecret1&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">and</span><span class="o">()</span> <span class="o">.</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;oauthclient2&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;oauthsecret2&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;authorization_code&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">redirectUris</span><span class="o">(</span><span class="s">&#34;http://locahost:9090&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerEndpointsConfigurer</span> <span class="n">endpoints</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">endpoints</span><span class="o">.</span><span class="na">authenticationManager</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>让我们为此操作添加第二个客户端 oauthclient2，并使用新的密钥和读取范围。在这里，我们已将此客户端的授权类型更改为授权代码。我们还添加了重定向 URI，以便授权服务器可以回调客户端。因此，基本上重定向 URI 就是客户端的 URI。</p>
<p>现在，我们必须在用户和授权服务器之间建立连接。我们必须为授权服务器设置一个接口，用户可以在其中提供凭据。我们使用 Spring Security 的 formLogin() 实现来实现该功能，同时保持简单。我们还确保所有请求都经过身份验证。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.oauth2.config</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.User</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.NoOpPasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.InMemoryUserDetailsManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.UserDetailsManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&#34;deprecation&#34;</span><span class="o">)</span> <span class="nd">@Configuration</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">UserDetailsManager</span> <span class="n">userDetailsManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InMemoryUserDetailsManager</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">         <span class="n">UserDetails</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">withUsername</span><span class="o">(</span><span class="s">&#34;john&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="s">&#34;12345&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">build</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">      <span class="n">userDetailsManager</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> <span class="k">return</span> <span class="n">userDetailsManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span> <span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">NoOpPasswordEncoder</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">    <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">AuthenticationManager</span> <span class="nf">authenticationManagerBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">authenticationManagerBean</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">http</span><span class="o">.</span><span class="na">formLogin</span><span class="o">();</span> <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这就完成了我们对授权授予类型的设置。现在测试我们的设置并启动我们的应用程序。我们在 http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=oauthclient2&amp;scope=read 启动浏览器。我们将重定向到 Spring Security 的默认表单登录页面。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/oauth_authorization_server_signin.jpg" alt="OAuth Authorization Server Signin"  />
</p>
<p>这里，响应类型代码意味着授权服务器将返回一个访问代码，客户端将使用该访问代码进行登录。当我们使用用户凭据时，我们将被询问是否要授予客户端请求的权限，在类似的屏幕如下所示。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/oauth_approval.jpg" alt="OAuth Approval"  />
</p>
<p>如果我们批准并单击“授权”，我们将看到我们被重定向到给定的重定向 URL 以及访问代码。在我们的例子中，我们被重定向到 http://locahost:9090/?code=7Hibnw，正如我们在应用程序中指定的那样。我们现在可以使用该代码作为 Postman 中的客户端来登录授权服务器。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/postman_authorization.jpg" alt="Postman Authorization"  />
</p>
<p>正如我们在这里所看到的，我们在 URL 中使用了从授权服务器收到的代码，并且 grant_type 作为授权代码，范围作为读取。我们充当客户端并提供应用程序中配置的客户端凭据。当我们发出这个请求时，我们会得到我们可以进一步使用的 access_token。</p>
<p>我们已经了解了如何使用 OAuth 2.0 配置 Spring Security。该应用程序非常简单且易于理解，可以帮助我们相当轻松地理解该过程。我们使用了两种授权授予类型，并了解了如何使用它们来获取客户端应用程序的访问令牌。</p>
<p>原文链接：<a href="https://www.tutorialspoint.com/spring_security/spring_security_with_oauth2.htm">https://www.tutorialspoint.com/spring_security/spring_security_with_oauth2.htm</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Security - 表单登录、记住我和注销</title>
      <link>https://blog.chensoul.com/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</link>
      <pubDate>Wed, 16 Aug 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</guid>
      <description>内容 简介和概述 入门（实用指南） 简介和概述 Spring Security 附带了大量内置功能和工具，为我们提供方便。在这个例子中，我们将讨论其中三个有趣且有用的功能 - 表单</description>
      <content:encoded><![CDATA[<h2 id="内容">内容</h2>
<ul>
<li>简介和概述</li>
<li>入门（实用指南）</li>
</ul>
<h2 id="简介和概述">简介和概述</h2>
<p>Spring Security 附带了大量内置功能和工具，为我们提供方便。在这个例子中，我们将讨论其中三个有趣且有用的功能 -</p>
<ul>
<li>表单登录</li>
<li>记住账号</li>
<li>登出</li>
</ul>
<h3 id="表单登录">表单登录</h3>
<p>基于表单的登录是 Spring Security 提供支持的一种用户名/密码身份验证形式。这是通过 Html 表单提供的。</p>
<p>每当用户请求受保护的资源时，Spring Security 都会检查请求的身份验证。如果请求未经过身份验证/授权，用户将被重定向到登录页面。登录页面必须由应用程序以某种方式呈现。 Spring Security 默认提供该登录表单。</p>
<p>此外，如果需要，任何其他配置都必须明确提供，如下所示 -</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="n">http</span> 
</span></span><span class="line"><span class="cl">   <span class="c1">// ... 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="o">.</span><span class="na">formLogin</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">form</span> <span class="o">-&gt;</span> <span class="n">form</span><span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">permitAll</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">   <span class="o">);</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>此代码要求模板文件夹中存在一个 login.html 文件，该文件将在点击 /login 时返回。该 HTML 文件应包含一个登录表单。此外，该请求应该是对 /login 的 post 请求。参数名称应分别为用户名和密码的“username”和“password”。除此之外，表单中还需要包含 CSRF 令牌。</p>
<p>一旦我们完成了代码练习，上面的代码片段就会更加清晰。</p>
<h3 id="记住账号">记住账号</h3>
<p>这种类型的身份验证需要将记住我的 cookie 发送到浏览器。该cookie存储用户信息/身份验证主体，并存储在浏览器中。因此，网站可以在下次会话启动时记住用户的身份。 Spring Security 已为此操作准备了必要的实现。</p>
<p>一种使用散列来保护基于 cookie 的令牌的安全性，而另一种使用数据库或其他持久存储机制来存储生成的令牌。</p>
<h3 id="登出">登出</h3>
<p>默认 URL /logout 通过以下方式注销用户：</p>
<ul>
<li>使 HTTP 会话失效</li>
<li>清除配置的所有 RememberMe 身份验证</li>
<li>清除SecurityContextHolder</li>
<li>重定向到/login?logout</li>
</ul>
<p><strong>WebSecurityConfigurerAdapter</strong> 自动将注销功能应用于 Spring Boot 应用程序。</p>
<p><strong>Getting Started (Practical Guide)</strong> 像往常一样，我们首先访问 start.spring.io。这里我们选择一个maven项目。我们将项目命名为“formlogin”并选择所需的 Java 版本。我在此示例中选择 Java 8。我们还继续添加以下依赖项 -</p>
<ul>
<li>Spring Web</li>
<li>Spring Security</li>
<li><a href="https://www.thymeleaf.org/">Thymeleaf</a></li>
<li>Spring Boot DevTools</li>
</ul>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/spring_initializr.jpg" alt="Spring Initializr"  />
</p>
<p>Thymeleaf 是 Java 的模板引擎。它允许我们快速开发静态或动态网页以在浏览器中呈现。它具有极强的可扩展性，允许我们详细定义和自定义模板的处理。除此之外，我们还可以通过点击此链接了解有关 Thymeleaf 的更多信息。</p>
<p>让我们继续生成项目并下载它。然后，我们将其解压到我们选择的文件夹中，并使用任何 IDE 将其打开。我将使用 Spring Tools Suite 4。它可以从 <a href="https://spring.io/tools">https://spring.io/tools</a> 网站免费下载，并且针对 Spring 应用程序进行了优化。</p>
<p>让我们看一下 pom.xml 文件。它应该看起来与此类似 -</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span>    <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
</span></span><span class="line"><span class="cl">   <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;parent&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2.3.1.RELEASE<span class="nt">&lt;/version&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;relativePath</span> <span class="nt">/&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- lookup parent from repository --&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/parent&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>            com.spring.security<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>formlogin<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;name&gt;</span>formlogin<span class="nt">&lt;/name&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;description&gt;</span>Demo project for Spring Boot<span class="nt">&lt;/description&gt;</span> 
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;properties&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/properties&gt;</span> 
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependencies&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-thymeleaf<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;exclusions&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;exclusion&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.junit.vintage<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>junit-vintage-engine<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/exclusion&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/exclusions&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-security-test<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependencies&gt;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;build&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;plugins&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;plugin&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;/plugin&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/plugins&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/build&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>让我们在默认包下的文件夹 /src/main/java 中创建一个包。我们将其命名为 config，因为我们会将所有配置类放置在这里。因此，名称应该类似于 - com.tutorial.spring.security.formlogin.config。</p>
<h3 id="配置类">配置类</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.formlogin.config</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.User</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.NoOpPasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.InMemoryUserDetailsManager</span><span class="o">;</span> <span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.UserDetailsManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.web.util.matcher.AntPathRequestMatcher</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.spring.security.formlogin.AuthFilter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">protected</span> <span class="n">UserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">UserDetailsManager</span> <span class="n">userDetailsManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InMemoryUserDetailsManager</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">   <span class="n">UserDetails</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">withUsername</span><span class="o">(</span><span class="s">&#34;abby&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">   <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="n">passwordEncoder</span><span class="o">().</span><span class="na">encode</span><span class="o">(</span><span class="s">&#34;12345&#34;</span><span class="o">))</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">build</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">      <span class="n">userDetailsManager</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">userDetailsManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span> <span class="o">};</span> 
</span></span><span class="line"><span class="cl">      <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">      <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">http</span><span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span> <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">anyRequest</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">authenticated</span><span class="o">()</span> <span class="o">.</span><span class="na">and</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">and</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">rememberMe</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">and</span><span class="o">()</span> <span class="o">.</span><span class="na">logout</span><span class="o">()</span> <span class="o">.</span><span class="na">logoutUrl</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">deleteCookies</span><span class="o">(</span><span class="s">&#34;remember-me&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="代码分解">代码分解</h3>
<p>在我们的配置包中，我们创建了 WebSecurityConfig 类。该类扩展了 Spring Security 的 WebSecurityConfigurerAdapter。我们将使用此类进行安全配置，因此让我们用 @Configuration 注释来注释它。因此，Spring Security 知道将此类视为配置类。正如我们所看到的，Spring 使应用程序的配置变得非常容易。</p>
<p>让我们看一下我们的配置类。</p>
<ul>
<li>首先，我们将使用 userDetailsS​​ervice() 方法创建 UserDetailsS​​ervice 类的 bean。我们将使用此 bean 来管理此应用程序的用户。在这里，为了简单起见，我们将使用 InMemoryUserDetailsManager 实例来创建用户。该用户以及我们给定的用户名和密码将包含一个简单的“读取”权限。</li>
<li>现在，让我们看看我们的密码编码器。在本例中，我们将使用 BCryptPasswordEncoder 实例。因此，在创建用户时，我们使用passwordEncoder对我们的明文密码进行编码，如下所示</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="n">passwordEncoder</span><span class="o">().</span><span class="na">encode</span><span class="o">(</span><span class="s">&#34;12345&#34;</span><span class="o">))</span>
</span></span></code></pre></div><ul>
<li>完成上述步骤后，我们继续进行下一个配置。这里，我们重写WebSecurityConfigurerAdapter类的configure方法。该方法将 HttpSecurity 作为参数。我们将对其进行配置以使用我们的表单登录和注销以及记住我功能。</li>
</ul>
<h3 id="http安全配置">HTTP安全配置</h3>
<p>我们可以观察到所有这些功能在 Spring Security 中都可用。让我们详细研究以下部分 -</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">http</span><span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>         
</span></span><span class="line"><span class="cl">   <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">   <span class="o">.</span><span class="na">and</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">   <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">   <span class="o">.</span><span class="na">and</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">   <span class="o">.</span><span class="na">rememberMe</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">   <span class="o">.</span><span class="na">and</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">   <span class="o">.</span><span class="na">logout</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">   <span class="o">.</span><span class="na">logoutUrl</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span> <span class="o">.</span><span class="na">deleteCookies</span><span class="o">(</span><span class="s">&#34;remember-me&#34;</span><span class="o">);</span>
</span></span></code></pre></div><p>这里有几点需要注意 -</p>
<ul>
<li>
<p>我们已经禁用了 csrf 或跨站点请求伪造保护，因为这是一个仅用于演示目的的简单应用程序，所以我们现在可以安全地禁用它。</p>
</li>
<li>
<p>然后我们添加需要对所有请求进行身份验证的配置。正如我们稍后将看到的，为了简单起见，我们将为此应用程序的索引页使用一个“/”端点。</p>
</li>
<li>
<p>之后，我们将使用上面提到的 Spring Security 的 formLogin() 功能。这会生成一个简单的登录页面。</p>
</li>
<li>
<p>然后，我们使用 Spring Security 的 RememberMe() 功能。这将执行两件事。</p>
</li>
<li>
<ul>
<li>首先，它会在我们使用 formLogin() 生成的默认登录表单中添加一个“记住我”复选框。</li>
<li>其次，勾选复选框会生成记住我的 cookie。 cookie 存储用户的身份，浏览器存储它。 Spring Security 在将来的会话中检测 cookie 以自动登录。因此，用户无需再次登录即可再次访问该应用程序。</li>
</ul>
</li>
<li>
<p>最后，我们有 logout() 功能。为此，Spring security 也提供了默认功能。它在这里执行两个重要的功能 -</p>
</li>
<li>
<ul>
<li>使 Http 会话无效，并取消绑定到会话的对象。</li>
<li>它会清除“记住我”cookie。</li>
<li>从 Spring 的安全上下文中删除身份验证。</li>
</ul>
</li>
<li>
<p>我们还提供了一个 logoutSuccessUrl()，以便应用程序在注销后返回到登录页面。这样就完成了我们的应用程序配置。</p>
</li>
</ul>
<h3 id="受保护的内容可选">受保护的内容（可选）</h3>
<p>我们现在将创建一个虚拟索引页面，供用户登录时查看。它还将包含一个注销按钮。</p>
<p>在我们的/src/main/resources/templates中，我们添加一个index.html文件。然后向其中添加一些Html内容。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!doctype html&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- Required meta tags --&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1, shrink-to-fit=no&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- Bootstrap CSS --&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">link</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Hello, world!<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello, world!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;logout&#34;</span><span class="p">&gt;</span>logout<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- Optional JavaScript --&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://code.jquery.com/jquery-3.5.1.slim.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI&#34;</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>此内容来自 Bootstrap 4 入门模板。</p>
<p>我们还添加</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;logout&#34;</span><span class="p">&gt;</span>logout<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>到我们的文件，以便用户可以使用此链接注销应用程序。</p>
<h3 id="资源控制器">资源控制器</h3>
<p>我们已经创建了受保护的资源，现在添加控制器来服务该资源。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.formlogin.controllers</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="nd">@Controller</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthController</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span> <span class="kd">public</span> <span class="n">String</span> <span class="nf">home</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="s">&#34;index&#34;</span><span class="o">;</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>正如我们所看到的，这是一个非常简单的控制器。它只有一个 get 端点，在启动我们的应用程序时为我们的 index.html 文件提供服务。</p>
<h3 id="运行应用程序">运行应用程序</h3>
<p>让我们将应用程序作为 Spring Boot 应用程序运行。当应用程序启动时，我们可以在浏览器上访问 http://localhost:8080。它应该要求我们提供用户名和密码。此外，我们还可以看到“记住我”复选框。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/sign_in.jpg" alt="Sign In"  />
</p>
<h3 id="登录页面">登录页面</h3>
<p>现在，如果我们提供在 WebSecurity 配置文件中配置的用户信息，我们将能够登录。此外，如果我们勾选“记住我”复选框，我们将能够在我们的 WebSecurity 配置文件中看到“记住我”cookie浏览器的开发者工具部分。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/console_application.jpg" alt="Console Application"  />
<img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/console_network.jpg" alt="Console Network"  />
</p>
<p>正如我们所看到的，cookie 是与我们的登录请求一起发送的。</p>
<p>此外，网页中还包含一个用于注销的链接。单击该链接后，我们将退出我们的应用程序并返回到我们的登录页面。</p>
<p>原文链接：<a href="https://www.tutorialspoint.com/spring_security/spring_security_form_login_remember_me_and_logout.htm">https://www.tutorialspoint.com/spring_security/spring_security_form_login_remember_me_and_logout.htm</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Security - 使用数据库表单登录</title>
      <link>https://blog.chensoul.com/posts/2023/08/16/spring-security-form-login-with-database/</link>
      <pubDate>Wed, 16 Aug 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/16/spring-security-form-login-with-database/</guid>
      <description>内容 简介和概述 Spring Security 的基本组件 AuthenticationFilter 认证过滤器 AuthenticationManager 认证管理器 AuthenticationProvider 认证提供者 UserDetailsService 用户详情服务 PasswordEncoder 密码编码器 Spring安全上下文 表单登录 使用数据库登录 登录尝</description>
      <content:encoded><![CDATA[<h2 id="内容">内容</h2>
<ul>
<li>简介和概述</li>
<li>Spring Security 的基本组件
<ul>
<li>AuthenticationFilter 认证过滤器</li>
<li>AuthenticationManager 认证管理器</li>
<li>AuthenticationProvider 认证提供者</li>
<li>UserDetailsService 用户详情服务</li>
<li>PasswordEncoder 密码编码器</li>
<li>Spring安全上下文</li>
<li>表单登录</li>
<li>使用数据库登录</li>
<li>登录尝试限制</li>
</ul>
</li>
<li>入门（实用指南）</li>
</ul>
<h2 id="简介和概述">简介和概述</h2>
<p>除了提供各种内置的身份验证和授权选项之外，Spring Security 还允许我们根据需要自定义身份验证过程。从自定义登录页面到我们自己的自定义身份验证提供程序和身份验证过滤器，我们几乎可以自定义身份验证过程的各个方面。</p>
<p>我们可以定义自己的身份验证过程，范围可以从使用用户名和密码的基本身份验证到复杂的身份验证，例如使用令牌和 OTP 的双因素身份验证。此外，我们可以使用各种数据库 - 关系数据库和非关系数据库，使用各种密码编码器，将恶意用户锁定在其帐户之外，等等。</p>
<p>今天，我们将讨论三种此类自定义，即自定义表单登录、数据库提供的身份验证以及限制登录尝试。尽管这些都是非常基本的用例，但它们仍然可以让我们更仔细地了解 Spring Security 的身份验证和授权过程。我们还将建立一个注册页面，用户可以通过该页面在我们的应用程序中进行注册。</p>
<p>首先我们看一下Spring Security的架构。它从 servlet 过滤器开始。这些过滤器拦截请求，对其执行操作，然后将请求传递到过滤器链中的下一个过滤器或请求处理程序，或者在不满足某些条件时阻止它们。正是在这个过程中，Spring Security 可以对请求进行身份验证并对请求执行各种身份验证检查。</p>
<p>它还可以通过不允许未经身份验证或恶意请求访问我们受保护的资源来阻止它们通过。因此我们的应用程序和资源受到保护。</p>
<h2 id="spring-security-架构的组件">Spring Security 架构的组件</h2>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/components_of_spring_security_architecture.jpg" alt="Components of Spring Security Architecture"  />
</p>
<p>正如我们在上图中看到的那样，Spring Security 的基本组件如下所示。我们将在讨论过程中简要讨论它们。我们还将讨论它们在身份验证和授权过程中的角色。</p>
<h3 id="authenticationfilter-认证过滤器">AuthenticationFilter 认证过滤器</h3>
<p>这是拦截请求并尝试对其进行身份验证的过滤器。在 Spring Security 中，它将请求转换为身份验证对象并将身份验证委托给 AuthenticationManager。</p>
<h3 id="authenticationmanager-认证管理器">AuthenticationManager 认证管理器</h3>
<p>它是身份验证的主要策略接口。它使用单独的方法authenticate()来验证请求。 authenticate() 方法执行身份验证，并在身份验证成功时返回 Authentication 对象，或者在身份验证失败时抛出 AuthenticationException。如果该方法无法决定，它将返回 null。这个过程中的认证过程委托给了我们接下来要讨论的AuthenticationProvider。</p>
<h3 id="authenticationprovider-认证提供者">AuthenticationProvider 认证提供者</h3>
<p>AuthenticationManager 由 ProviderManager 实现，后者将流程委托给一个或多个 AuthenticationProvider 实例。任何实现 AuthenticationProvider 接口的类都必须实现两个方法——authenticate() 和supports()。首先，我们来谈谈supports()方法。它用于检查我们的 AuthenticationProvider 实现类是否支持特定的身份验证类型。如果支持则返回 true，否则返回 false。</p>
<p>接下来是authenticate() 方法。这是身份验证发生的地方。如果支持该认证类型，则启动认证过程。这里这个类可以使用 UserDetailsS​​ervice 实现的 loadUserByUsername() 方法。如果未找到用户，则会抛出 UsernameNotFoundException。</p>
<p>另一方面，如果找到用户，则使用该用户的身份验证详细信息来验证该用户。例如，在基本认证场景中，可以将用户提供的密码与数据库中的密码进行核对。如果发现它们彼此匹配，则说明成功。然后我们可以从此方法返回一个 Authentication 对象，该对象将存储在安全上下文中，我们将在稍后讨论。</p>
<h3 id="userdetailsservice-用户详情服务">UserDetailsService 用户详情服务</h3>
<p>它是Spring Security的核心接口之一。任何请求的身份验证主要取决于 UserDetailsS​​ervice 接口的实现。它最常用于数据库支持的身份验证中以检索用户数据。通过单独的 loadUserByUsername() 方法的实现来检索数据，我们可以在其中提供逻辑来获取用户的用户详细信息。如果未找到用户，该方法将抛出 UsernameNotFoundException。</p>
<h3 id="密码编码器">密码编码器</h3>
<p>在 Spring Security 4 之前，PasswordEncoder 的使用是可选的。用户可以使用内存中身份验证来存储纯文本密码。但Spring Security 5 强制使用PasswordEncoder 来存储密码。这使用其多种实现之一对用户的密码进行编码。最常见的实现是 BCryptPasswordEncoder。此外，我们还可以使用 NoOpPasswordEncoder 的实例来进行开发。它将允许密码以纯文本形式存储。</p>
<p>但它不应该用于生产或现实世界的应用程序。</p>
<h3 id="spring安全上下文">Spring安全上下文</h3>
<p>这是在成功验证后存储当前已验证用户的详细信息的位置。然后，身份验证对象在会话的整个应用程序中可用。因此，如果我们需要用户名或任何其他用户详细信息，我们需要首先获取 SecurityContext。这是通过 SecurityContextHolder（一个帮助程序类）完成的，它提供对安全上下文的访问。</p>
<p>我们可以使用 setAuthentication() 和 getAuthentication() 方法分别存储和检索用户详细信息。</p>
<p>继续，现在让我们讨论我们将在应用程序中使用的三个自定义实现。</p>
<h3 id="表单登录">表单登录</h3>
<p>当我们将 Spring Security 添加到现有 Spring 应用程序时，它会添加一个登录表单并设置一个虚拟用户。这是自动配置模式下的 Spring Security。在此模式下，它还设置默认过滤器、身份验证管理器、身份验证提供程序等。此设置是内存中身份验证设置。我们可以覆盖此自动配置来设置我们自己的用户和身份验证过程。我们还可以设置自定义登录方法，例如自定义登录表单。</p>
<p>Spring Security 只需要了解登录表单的详细信息，例如登录表单的 URI、登录处理 URL 等。然后它将为应用程序呈现我们的登录表单并执行身份验证过程其他提供的配置或Spring自己的实现。</p>
<p>此自定义表单设置只需遵守某些规则即可与 Spring Security 集成。我们需要有一个用户名参数和一个密码参数，参数名称应该是“用户名”和“密码”，因为这些是默认名称。如果我们在自定义中对这些字段使用我们自己的参数名称，我们必须使用 usernameParameter() 和 passwordParameter() 方法通知 Spring Security 这些更改。</p>
<p>同样，对于我们对登录表单或表单登录方法所做的每一次更改，我们都必须使用适当的方法通知 Spring Security 这些更改，以便它可以将它们与身份验证过程集成。</p>
<h3 id="使用数据库登录">使用数据库登录</h3>
<p>正如我们所讨论的，Spring Security 默认情况下自动提供内存中身份验证实现。我们可以通过验证其详细信息存储在数据库中的用户来覆盖这一点。在这种情况下，在对用户进行身份验证时，我们可以根据数据库中的凭据验证用户提供的凭据以进行身份​​验证。我们还可以让新用户在我们的应用程序中注册并将他们的凭据存储在同一数据库中。</p>
<p>此外，我们还可以提供更改或更新其密码、角色或其他数据的方法。因此，这为我们提供了可以使用更长时间的持久用户数据。</p>
<h3 id="登录尝试限制">登录尝试限制</h3>
<p>为了限制应用程序中的登录尝试，我们可以使用 Spring Security 的 isAccountNonLocked 属性。 Spring Security 的 UserDetails 为我们提供了该属性。我们可以设置一种身份验证方法，如果任何用户或其他人提供不正确的凭据超过一定次数，我们可以锁定他们的帐户。即使用户提供了正确的凭据，Spring Security 也会禁用锁定用户的身份验证。这是 Spring Security 提供的内置功能。</p>
<p>我们可以将错误登录尝试的次数存储在数据库中。然后，针对每次错误的身份验证尝试，我们可以更新并检查数据库表。当此类尝试的次数超过给定数量时，我们可以将用户锁定在其帐户之外。因此，在帐户解锁之前，用户将无法再次登录。</p>
<h2 id="入门实用指南">入门（实用指南）</h2>
<p>现在让我们开始我们的应用程序。下面列出了此应用程序所需的工具 -</p>
<ul>
<li><strong>A Java IDE</strong> − 最好是 STS 4，但 Eclipse、IntelliJ Idea 或任何其他 IDE 都可以。</li>
<li>MySql Server Community Edition - 我们需要在我们的系统中下载并安装 MySql Community Server。我们可以点击这里进入官方网站。</li>
<li><a href="https://dev.mysql.com/downloads/workbench/">MySql Workbench</a> −  它是一个 GUI 工具，我们可以用来与 MySql 数据库交互。</li>
</ul>
<h3 id="数据库设置">数据库设置</h3>
<p>我们先设置数据库。我们将为此应用程序使用 MySql 数据库实例。 MySql Server 社区版可供免费下载和使用。我们将使用 MySql Workbench 与 MySql 服务器连接，并创建一个名为“spring”的数据库以与我们的应用程序一起使用。</p>
<p>然后我们将创建两个表 - 用户和尝试 - 来保存我们的用户和登录尝试。如前所述，注册我们的应用程序的用户的详细信息将存储在 users 表中。任何用户的登录尝试次数将根据其用户名存储在 attempts 表中。这样我们就可以跟踪尝试并采取必要的行动。</p>
<p>让我们看一下设置用户表和尝试表的 SQL。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">users</span><span class="w"> </span><span class="p">(</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">username</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">45</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">password</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">45</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">account_non_locked</span><span class="w"> </span><span class="n">TINYINT</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">username</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">attempts</span><span class="w"> </span><span class="p">(</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">id</span><span class="w"> </span><span class="nb">int</span><span class="p">(</span><span class="mi">45</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="n">username</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">45</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="n">attempts</span><span class="w"> </span><span class="nb">varchar</span><span class="p">(</span><span class="mi">45</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>我们现在可以向我们的应用程序添加一个虚拟用户。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">users</span><span class="p">(</span><span class="n">username</span><span class="p">,</span><span class="n">password</span><span class="p">,</span><span class="n">account_non_locked</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span><span class="s1">&#39;12345&#39;</span><span class="p">,</span><span class="w"> </span><span class="k">true</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h3 id="项目设置">项目设置</h3>
<p>像往常一样，我们将使用 Spring 初始化程序来设置我们的项目。我们将使用 Spring Boot 版本 2.3.2 创建一个 Maven 项目。让我们将项目命名为 formlogin（我们可以选择任何我们想要的名称）和组 id 为 com.tutorial.spring.security。此外，我们将在该项目中使用 Java 版本 8。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/project_setup.jpg" alt="Project Setup"  />
</p>
<h3 id="依赖关系">依赖关系</h3>
<p>现在，谈到依赖项，我们将在此演示中使应用程序尽可能简单。我们将继续关注今天要探索的功能。因此，我们将选择最少数量的依赖项，这将有助于我们设置应用程序并快速启动和运行。让我们看一下依赖关系 -</p>
<ul>
<li><strong>Spring Web</strong> − 它捆绑了与 Web 开发相关的所有依赖项，包括 Spring MVC、REST 和嵌入式 Tomcat 服务器。</li>
<li><strong>Spring Security</strong> − 用于实现 Spring Security 提供的安全功能。</li>
<li><strong>Thymeleaf</strong> −  用于 HTML5/XHTML/XML 的服务器端 Java 模板引擎。</li>
<li><strong>Spring Data JPA</strong> −除了使用 JPA 规范定义的所有功能之外，Spring Data JPA 还添加了自己的功能，例如存储库模式的无代码实现以及从方法名称创建数据库查询。</li>
<li><strong>Mysql Driver</strong> − 用于 MySQL 数据库驱动程序。</li>
</ul>
<p>有了这五个依赖项，我们现在就可以设置我们的项目了。让我们点击生成按钮。这会将我们的项目下载为 zip 文件。我们可以将其解压到我们选择的文件夹中。然后我们在 IDE 中打开该项目。为此，我们将使用 Spring Tool Suite 4。例子。</p>
<p>让我们将项目加载到 STS 中。我们的 IDE 需要一些时间来下载依赖项并验证它们。让我们看一下 pom.xml 文件。</p>
<p>pom.xml</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;ISO-8859-1&#34;?&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0 
</span></span></span><span class="line"><span class="cl"><span class="s">   https://maven.apache.org/xsd/maven-4.0.0.xsd&#34;</span> 
</span></span><span class="line"><span class="cl">   <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span> 
</span></span><span class="line"><span class="cl">   <span class="na">xmlns=</span><span class="s">&#34;http://maven.apache.org/POM/4.0.0&#34;</span><span class="nt">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;parent&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>2.3.1.RELEASE<span class="nt">&lt;/version&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;relativePath/&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="c">&lt;!-- lookup parent from repository --&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/parent&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>com.tutorial.spring.security<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>formlogin<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;name&gt;</span>formlogin<span class="nt">&lt;/name&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;description&gt;</span>Demo project for Spring Boot<span class="nt">&lt;/description&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;properties&gt;</span> <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/properties&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;dependencies&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-thymeleaf<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;scope&gt;</span> <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span> <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;exclusions&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;exclusion&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.junit.vintage<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>junit-vintage-engine<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;/exclusion&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;/exclusions&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;dependency&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;artifactId&gt;</span>spring-security-test<span class="nt">&lt;artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/dependencies&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;build&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;plugins&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;plugin&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="nt">&lt;/plugin&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/plugins&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/build&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/project&gt;</span>
</span></span></code></pre></div><p>We can see that our project details along with our dependencies are enlisted here.
我们可以看到我们的项目详细信息以及我们的依赖项都列在这里。</p>
<h3 id="数据源">数据源</h3>
<p>我们将在 application.properties 文件中配置数据源。由于我们将使用本地 MySQL 数据库作为数据源，因此我们在此处提供本地数据库实例的 URL、用户名和密码。我们将我们的数据库命名为“spring”。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">spring.datasource.url</span><span class="o">=</span><span class="s">jdbc:mysql://localhost:3306/spring </span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.username</span><span class="o">=</span><span class="s">root </span>
</span></span><span class="line"><span class="cl"><span class="na">spring.datasource.password</span><span class="o">=</span><span class="s">root</span>
</span></span></code></pre></div><h3 id="实体">实体</h3>
<p>现在让我们创建我们的实体。我们从 User 实体开始，它包含三个字段 - 用户名、密码和 accountNonLocked。该 User 类还实现了 Spring Security 的 UserDetails 接口。此类提供核心用户信息。它用于存储用户数据，稍后可以将其封装到 Authentication 对象中。不建议直接实现接口。</p>
<p>但对于我们的例子，由于这是一个简单的应用程序来演示数据库登录，因此我们直接在这里实现了这个接口以保持简单。我们可以通过在 User 实体周围使用包装类来实现此接口。</p>
<p><strong>User.java</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.formlogin.model</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Collection</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.Column</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.Table</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.GrantedAuthority</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Entity</span> 
</span></span><span class="line"><span class="cl"><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;users&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">implements</span> <span class="n">UserDetails</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="cm">/** 
</span></span></span><span class="line"><span class="cl"><span class="cm">   * 
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="n">1L</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Id</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span> <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;account_non_locked&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">accountNonLocked</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="nf">User</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">accountNonLocked</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">accountNonLocked</span> <span class="o">=</span> <span class="n">accountNonLocked</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">Collection</span><span class="o">&lt;</span> <span class="kd">extends</span> <span class="n">GrantedAuthority</span><span class="o">&gt;</span> <span class="nf">getAuthorities</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="s">&#34;read&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>    
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">password</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">username</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAccountNonExpired</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAccountNonLocked</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">accountNonLocked</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCredentialsNonExpired</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEnabled</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAccountNonLocked</span><span class="o">(</span><span class="n">Boolean</span> <span class="n">accountNonLocked</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">accountNonLocked</span> <span class="o">=</span> <span class="n">accountNonLocked</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">getAccountNonLocked</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">accountNonLocked</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这里要注意 accountNonLocked 字段。 Spring Security 中的每个用户的帐户默认都是解锁的。为了覆盖该属性并在用户超过允许的尝试次数后将用户锁定在其帐户之外，我们将使用该属性。如果用户超过允许的无效尝试次数，我们将使用此属性将他锁定在帐户之外。
Also, during every authentication attempt, we shall be checking this property with the isAccountNonLocked() method along with the credentials to authenticate the user. Any user with a locked account will not be allowed to authenticate into the application.
此外，在每次身份验证尝试期间，我们将使用 isAccountNonLocked() 方法检查此属性以及凭据以对用户进行身份验证。任何帐户被锁定的用户都将不允许通过身份验证进入应用程序。</p>
<p>对于 UserDetails 接口的其他方法，我们现在可以简单地提供一个返回 true 的实现，因为我们不会为此应用程序探索这些属性。</p>
<p>对于该用户的权限列表，我们现在为他分配一个虚拟角色。我们也不会将此属性用于此应用程序。</p>
<p><strong>Attempts.java</strong></p>
<p>继续，让我们创建尝试实体来保存无效尝试计数。在数据库中创建时，我们将在此处包含三个字段 - 用户名、一个名为 attempts 的整数（用于记录尝试次数）和一个标识符。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.formlogin.model</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.GenerationType</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Entity</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Attempts</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Id</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kt">int</span> <span class="n">attempts</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="cm">/** 
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @return the id 
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">id</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="cm">/** 
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @param id the id to set 
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>         
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="cm">/** 
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @return the username 
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">username</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="cm">/** 
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @param username the username to set 
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="cm">/** 
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @return the attempts 
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAttempts</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">attempts</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="cm">/** 
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @param attempts the attempts to set 
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAttempts</span><span class="o">(</span><span class="kt">int</span> <span class="n">attempts</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">.</span><span class="na">attempts</span> <span class="o">=</span> <span class="n">attempts</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="存储库">存储库</h3>
<p>我们已经创建了实体，让我们创建存储库来存储和检索数据。我们将有两个存储库，每个实体类一个。对于这两个存储库接口，我们将扩展 JpaRepository，它为我们提供了内置实现，用于保存和检索 application.properties 文件中配置的数据库中的数据。除了提供的方法或查询之外，我们还可以在此处添加我们的方法或查询。</p>
<p><strong>UserRepository.java</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.formlogin.repository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.model.User</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span> <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="n">Optional</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">findUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>正如所讨论的，我们在此处添加了通过用户名检索用户的方法。这将返回我们的用户详细信息，包括用户名、密码和帐户锁定状态。</p>
<p><strong>AttemptsRepository.java</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.formlogin.repository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.model.Attempts</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Repository</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AttemptsRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">Attempts</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Attempts</span><span class="o">&gt;</span> <span class="nf">findAttemptsByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>类似地，对于 Attempts，在 AttemptsRepository 中，我们添加了一个自定义方法 findAttemptsByUsername(String username) 来获取有关使用用户名的用户尝试的数据。这将返回一个 Attempts 对象，其中包含用户名和用户尝试身份验证失败的次数。</p>
<h3 id="配置">配置</h3>
<p>由于我们将使用自定义登录表单，因此我们必须覆盖 Spring Security 的默认配置。为此，我们创建配置类，该类扩展了 Spring Security 的 WebSecurityConfigurerAdapter 类。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.formlogin.config</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="k">new</span> <span class="n">BCryptPasswordEncoder</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">http</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/register**&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">permitAll</span><span class="o">()</span> <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">and</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span> <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">permitAll</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">and</span><span class="o">()</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">logout</span><span class="o">()</span> <span class="o">.</span><span class="na">invalidateHttpSession</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">clearAuthentication</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">.</span><span class="na">permitAll</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这里我们做了两件事 -</p>
<ul>
<li>
<p>首先，我们指定了将要使用的PasswordEncoder 接口的实现。我们使用 BCryptPasswordEncoder 的实例来对本示例的密码进行编码。 PasswordEncoder 接口有很多实现，我们可以使用其中任何一个。我们在这里选择 BCryptPasswordEncoder 作为最常用的实现。它使用非常强大的 BCrypt 哈希算法对密码进行编码。</p>
<p>它通过加入盐来防止彩虹表攻击来实现这一点。除此之外，bcrypt 是一个自适应函数：随着时间的推移，迭代次数可以增加以使其变慢，因此即使计算能力不断增加，它仍然可以抵抗暴力搜索攻击。</p>
</li>
<li>
<p>其次，我们重写了configure()方法来提供登录方法的实现。</p>
</li>
<li>
<ul>
<li>每当我们使用自定义表单代替 Spring Security 提供的表单进行身份验证时，我们都必须使用 formLogin() 方法通知 Spring Security。</li>
<li>然后我们还指定登录 URL – /login。稍后我们会将 URL 映射到控制器中的自定义登录页面。</li>
<li>我们还指定以 /register、/login 开头的端点和注销页面不需要受到保护。我们使用 PermitAll() 方法来做到这一点。这允许每个人访问这些端点。除了这些端点之外，所有端点都需要进行身份验证()。也就是说，用户必须登录才能访问所有其他端点。</li>
<li>注销时，我们指定会话失效，并清除存储在应用程序 SecurityContext 中的身份验证。</li>
</ul>
</li>
</ul>
<h3 id="安全设置">安全设置</h3>
<p>现在，我们将设置身份验证过程。我们将使用数据库设置身份验证并锁定用户帐户。</p>
<p>让我们首先创建 UserDetailsS​​ervice 的实现。正如我们之前讨论的，我们需要提供使用数据库进行身份验证的自定义实现。这是因为，正如我们所知，Spring Security 默认情况下仅提供内存中的身份验证实现。因此，我们需要使用基于数据库的流程来覆盖该实现。为此，我们需要重写 UserDetailsS​​ervice 的 loadUserByUsername() 方法。</p>
<h3 id="用户详情服务">用户详情服务</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.formlogin.security</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetailsService</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UsernameNotFoundException</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.provisioning.UserDetailsManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.model.User</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.repository.UserRepository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Service</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityUserDetailsService</span> <span class="kd">implements</span> <span class="n">UserDetailsService</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">throws</span> <span class="n">UsernameNotFoundException</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findUserByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&lt;</span> <span class="k">new</span> <span class="n">UsernameNotFoundException</span><span class="o">(</span><span class="s">&#34;User not present&#34;</span><span class="o">));</span> 
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">user</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createUser</span><span class="o">(</span><span class="n">UserDetails</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">userRepository</span><span class="o">.</span><span class="na">save</span><span class="o">((</span><span class="n">User</span><span class="o">)</span> <span class="n">user</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>正如我们在这里看到的，我们在这里实现了 loadUserByUsername() 方法。在这里，我们使用 UserRepository 接口从数据库中获取用户。如果未找到用户，则会抛出 UsernameNotFoundException。</p>
<p>我们还有一个 createUser() 方法。我们将使用此方法将已使用 UserRepository 在我们的应用程序中注册的用户添加到我们的数据库中。</p>
<h3 id="认证提供者">认证提供者</h3>
<p>我们现在将实现我们的自定义身份验证提供程序。它将实现 AuthenticationProvider 接口。我们这里有两个必须重写和实现的方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.formlogin.security</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationProvider</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.BadCredentialsException</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.LockedException</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.UsernamePasswordAuthenticationToken</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.Authentication</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.core.AuthenticationException</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.model.Attempts</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.model.User</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.repository.AttemptsRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.repository.UserRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthProvider</span> <span class="kd">implements</span> <span class="n">AuthenticationProvider</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">ATTEMPTS_LIMIT</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">SecurityUserDetailsService</span> <span class="n">userDetailsService</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">AttemptsRepository</span> <span class="n">attemptsRepository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">Authentication</span> <span class="nf">authenticate</span><span class="o">(</span><span class="n">Authentication</span> <span class="n">authentication</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">throws</span> <span class="n">AuthenticationException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.repository.UserRepository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthProvider</span> <span class="kd">implements</span> <span class="n">AuthenticationProvider</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">ATTEMPTS_LIMIT</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">SecurityUserDetailsService</span> <span class="n">userDetailsService</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">AttemptsRepository</span> <span class="n">attemptsRepository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">Authentication</span> <span class="nf">authenticate</span><span class="o">(</span><span class="n">Authentication</span> <span class="n">authentication</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">throws</span> <span class="n">AuthenticationException</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Attempts</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="n">userAttempts</span> <span class="o">=</span> <span class="n">attemptsRepository</span><span class="o">.</span><span class="na">findAttemptsByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">userAttempts</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">         <span class="n">Attempts</span> <span class="n">attempts</span> <span class="o">=</span> <span class="n">userAttempts</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">         <span class="n">attempts</span><span class="o">.</span><span class="na">setAttempts</span><span class="o">(</span><span class="n">0</span><span class="o">);</span> <span class="n">attemptsRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">attempts</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">      <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kt">void</span> <span class="nf">processFailedAttempts</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Attempts</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="n">userAttempts</span> <span class="o">=</span> <span class="n">attemptsRepository</span><span class="o">.</span><span class="na">findAttemptsByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">userAttempts</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">         <span class="n">Attempts</span> <span class="n">attempts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Attempts</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">         <span class="n">attempts</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">         <span class="n">attempts</span><span class="o">.</span><span class="na">setAttempts</span><span class="o">(</span><span class="n">1</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">         <span class="n">attemptsRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">attempts</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">         <span class="n">Attempts</span> <span class="n">attempts</span> <span class="o">=</span> <span class="n">userAttempts</span><span class="o">.</span><span class="na">get</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">         <span class="n">attempts</span><span class="o">.</span><span class="na">setAttempts</span><span class="o">(</span><span class="n">attempts</span><span class="o">.</span><span class="na">getAttempts</span><span class="o">()</span> <span class="o">+</span> <span class="n">1</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">         <span class="n">attemptsRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">attempts</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="o">(</span><span class="n">attempts</span><span class="o">.</span><span class="na">getAttempts</span><span class="o">()</span> <span class="o">+</span> <span class="n">1</span> <span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="n">ATTEMPTS_LIMIT</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">user</span><span class="o">.</span><span class="na">setAccountNonLocked</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">            <span class="n">userRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">LockedException</span><span class="o">(</span><span class="s">&#34;Too many invalid attempts. Account is locked!!&#34;</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">         <span class="o">}</span> 
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">authentication</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>authenticate() - 此方法返回一个经过完全身份验证的对象，包括成功身份验证时的凭据。然后将该对象存储在 SecurityContext 中。为了执行身份验证，我们将使用应用程序的 SecurityUserDetailsS​​ervice 类的 loaduserByUsername() 方法。在这里我们执行多项操作 -</p>
</li>
<li>
<ul>
<li>
<p>首先，我们从身份验证请求对象中提取用户凭据，该对象作为参数传递给我们的函数。该身份验证对象由 AuthenticationFilter 类准备，并通过 AuthenticationManager 向下传递到 AuthenticationProvider。</p>
</li>
<li>
<p>我们还使用 loadUserByUsername() 方法从数据库中获取用户详细信息。</p>
</li>
<li>
<p>现在，首先，我们检查用户帐户是否由于之前失败的身份验证尝试而被锁定。如果我们发现账户被锁定，我们会抛出LockedException，用户将无法进行身份验证，除非账户再次解锁。</p>
</li>
<li>
<p>如果帐户未锁定，我们会将提供的密码与数据库中针对该用户存储的密码进行匹配。这是使用 PasswordEncoder 接口的 matches() 方法完成的。</p>
</li>
<li>
<p>如果密码匹配，并且帐户尚未被锁定，我们将返回一个经过完全身份验证的对象。这里我们使用了一个实例 UsernamePasswordAuthenticationToken 类（因为它是用户名密码身份验证）来实现身份验证。同时，我们还将尝试计数器重置为 0。</p>
</li>
<li>
<p>另一方面，如果密码不匹配，我们会检查一些条件 -</p>
</li>
<li>
<ul>
<li>如果这是用户第一次尝试，那么他的名字可能不会出现在数据库中。我们使用 AttemptsRepository 中的 findAttemptsByUsername() 方法来检查这一点。</li>
<li>如果未找到，我们会在数据库中为该用户创建一个条目，并将尝试次数设置为 1。</li>
<li>如果找到用户，那么我们将尝试次数增加 1。</li>
<li>然后，我们使用之前定义的常量值检查允许的最大失败尝试次数。</li>
<li>如果该次数超过允许的尝试次数，则用户将被锁定应用程序并引发 LockedException。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>supports() - 我们还有supports方法来检查我们的AuthenticationProvider实现类是否支持我们的身份验证类型。如果匹配、不匹配或无法决定，则分别返回 true、false 或 null。目前我们已将其硬编码为 true。</p>
</li>
</ul>
<h3 id="控制器">控制器</h3>
<p>现在让我们创建控制器包。它将包含我们的 HelloController 类。使用这个控制器类，我们将把视图映射到端点，并在命中相应的端点时提供这些视图。我们还将自动装配该组件中的PasswordEncoder 和UserDetailsS​​ervice 类。这些注入的依赖项将用于创建我们的用户。现在让我们创建端点。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">com.tutorial.spring.security.formlogin.controller</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpSession</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.http.MediaType</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.BadCredentialsException</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.authentication.LockedException</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.PasswordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PostMapping</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestParam</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.model.User</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.tutorial.spring.security.formlogin.security.SecurityUserDetailsService</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl"><span class="nd">@Controller</span> 
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>         
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">SecurityUserDetailsService</span> <span class="n">userDetailsManager</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="s">&#34;index&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">login</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">         <span class="s">&#34;error&#34;</span><span class="o">,</span> <span class="n">getErrorMessage</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="s">&#34;SPRING_SECURITY_LAST_EXCEPTION&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">);</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="s">&#34;login&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/register&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">String</span> <span class="nf">register</span><span class="o">()</span> <span class="o">{</span>  
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="s">&#34;register&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span> 
</span></span><span class="line"><span class="cl">   <span class="nd">@PostMapping</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/register&#34;</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">      <span class="n">consumes</span> <span class="o">=</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_FORM_URLENCODED_VALUE</span><span class="o">,</span> <span class="n">produces</span> <span class="o">=</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_ATOM_XML_VALUE</span><span class="o">,</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="o">)</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span> <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">body</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">));</span> 
</span></span><span class="line"><span class="cl">      <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">passwordEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">body</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">)));</span> 
</span></span><span class="line"><span class="cl">      <span class="n">user</span><span class="o">.</span><span class="na">setAccountNonLocked</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="n">userDetailsManager</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="n">String</span> <span class="nf">getErrorMessage</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">Exception</span> <span class="n">exception</span> <span class="o">=</span> <span class="o">(</span><span class="n">Exception</span><span class="o">)</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">getAttribute</span><span class="o">(</span><span class="n">key</span><span class="o">);</span> 
</span></span><span class="line"><span class="cl">      <span class="n">String</span> <span class="n">error</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">exception</span> <span class="k">instanceof</span> <span class="n">BadCredentialsException</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">         <span class="n">error</span> <span class="o">=</span> <span class="s">&#34;Invalid username and password!&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">exception</span> <span class="k">instanceof</span> <span class="n">LockedException</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">         <span class="n">error</span> <span class="o">=</span> <span class="n">exception</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span> 
</span></span><span class="line"><span class="cl">      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">         <span class="n">error</span> <span class="o">=</span> <span class="s">&#34;Invalid username and password!&#34;</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">      <span class="o">}</span> 
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">error</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>index (&quot;/&quot;) – 该端点将为我们的应用程序的索引页面提供服务。正如我们之前配置的那样，我们将保护此页面并仅允许经过身份验证的用户能够访问此页面。</li>
<li>login (&quot;/login&quot;) – 如前所述，这将用于服务我们的自定义登录页面。任何未经身份验证的用户都将被重定向到此端点进行身份验证。</li>
<li>register(&quot;/register&quot;) (GET) – 我们的应用程序将有两个“注册”端点。其中之一是提供注册页面。另一项任务是处理注册过程。因此，前者将使用 Http GET，后者将使用 POST 端点。</li>
<li>register(&quot;/register&quot;) (POST) – 我们将使用此端点来处理用户注册过程。我们将从参数中获取用户名和密码。然后我们将使用@Autowired 到该组件中的passwordEncoder 对密码进行编码。此时我们还将用户帐户设置为解锁。然后，我们将使用 createUser() 方法将此用户数据保存在用户表中。</li>
</ul>
<p>除了上面的方法之外，我们还有 getErrorMessage() 方法。它用于确定最后抛出的异常以在我们的登录模板中添加消息。这样，我们就可以意识到身份验证错误并显示正确的消息。</p>
<h3 id="资源">资源</h3>
<p>我们已经创建了端点，唯一剩下的就是创建视图。</p>
<p>首先，我们将创建索引页面。只有成功验证后，用户才能访问此页面。该页面可以访问 Servlet 请求对象，使用该对象我们可以显示登录用户的用户名。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns</span><span class="o">=</span><span class="s">&#34;http://www.w3.org/1999/xhtml&#34;</span> <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;https://www.thymeleaf.org&#34;</span> <span class="na">xmlns:sec</span><span class="o">=</span><span class="s">&#34;https://www.thymeleaf.org/thymeleaf-extras-springsecurity3&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">         Hello World!
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">h1</span> <span class="na">th:inline</span><span class="o">=</span><span class="s">&#34;text&#34;</span><span class="p">&gt;</span>Hello [[${#httpServletRequest.remoteUser}]]!<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">th:action</span><span class="o">=</span><span class="s">&#34;@{/logout}&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Sign Out&#34;</span><span class="p">/&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span> 
</span></span></code></pre></div><p>接下来，我们创建登录视图。这将显示我们的自定义登录表单，其中包含用户名和密码字段。在注销或身份验证失败的情况下也会呈现此视图，并将针对每种情况显示适当的消息。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">xmlns</span><span class="o">=</span><span class="s">&#34;http://www.w3.org/1999/xhtml&#34;</span>      <span class="na">xmlns:th</span><span class="o">=</span><span class="s">&#34;https://www.thymeleaf.org&#34;</span> <span class="na">xmlns:sec</span><span class="o">=</span><span class="s">&#34;https://www.thymeleaf.org/thymeleaf-extras-springsecurity3&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Spring Security Example<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">div</span> <span class="na">th:if</span><span class="o">=</span><span class="s">&#34;${param.error}&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">p</span> <span class="na">th:text</span><span class="o">=</span><span class="s">&#34;${session.error}&#34;</span> <span class="na">th:unless</span><span class="o">=</span><span class="s">&#34;${session == null}&#34;</span><span class="p">&gt;</span>[...]<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">div</span> <span class="na">th:if</span><span class="o">=</span><span class="s">&#34;${param.logout}&#34;</span><span class="p">&gt;</span>You have been logged out.<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">form</span> <span class="na">th:action</span><span class="o">=</span><span class="s">&#34;@{/login}&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&gt;
</span></span></span><span class="line"><span class="cl"><span class="s">   &lt;div&gt; 
</span></span></span><span class="line"><span class="cl"><span class="s">      &lt;label&gt; User Name : &lt;input type=&#34;</span><span class="na">text</span><span class="err">&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span> <span class="p">/&gt;</span> <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">label</span><span class="p">&gt;</span> Password: <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="p">/&gt;</span> <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;Sign In&#34;</span> <span class="p">/&gt;</span> <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>接下来，我们创建所需的视图，即寄存器视图。该视图将允许用户在应用程序中注册自己。该用户数据将存储在数据库中，然后用于身份验证。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;ISO-8859-1&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Insert title here<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">&lt;</span><span class="nt">form</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/register&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Register<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>Please fill in this form to create an account.<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;username&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">b</span><span class="p">&gt;</span>Username<span class="p">&lt;/</span><span class="nt">b</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Enter Username&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;username&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;username&#34;</span> <span class="na">required</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">label</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">&gt;&lt;</span><span class="nt">b</span><span class="p">&gt;</span>Password<span class="p">&lt;/</span><span class="nt">b</span><span class="p">&gt;&lt;/</span><span class="nt">label</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Enter Password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">required</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;registerbtn&#34;</span><span class="p">&gt;</span>Register<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">         <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><h3 id="最终项目结构">最终项目结构</h3>
<p>我们最终的项目结构应该与此类似。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/form_login.jpg" alt="Form Login"  />
</p>
<p><strong>运行应用程序</strong></p>
<p>然后我们可以将应用程序作为 SpringBootApp 运行。当我们在浏览器上访问 localhost:8080 时，它会将我们重定向回登录页面。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/running_the_application.jpg" alt="Running the Application"  />
</p>
<p>身份验证成功后，它将带我们进入带有问候语的索引视图。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/hello_users.jpg" alt="Hello Users"  />
</p>
<p>因为，在帐户被锁定之前，我们只允许三次失败的尝试，因此在第三次失败的身份验证中，用户将被锁定，并且该消息会显示在屏幕上。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/third_failed_authentication.jpg" alt="Third Failed Authentication"  />
</p>
<p>在点击 /register 端点时，我们还可以注册一个新用户。</p>
<p><img loading="lazy" src="https://www.tutorialspoint.com/spring_security/images/register.jpg" alt="Register"  />
</p>
<h2 id="结论"><strong>结论</strong></h2>
<p>从今天的文章中，我们学习了如何使用基于注释的配置使用数据库来使用自定义表单进行登录。我们还学习了如何防止多次登录尝试失败。在这样做的过程中，我们已经看到了如何实现我们自己的 AuthenticationProvider 和 UserDetailsS​​ervice 来使用我们的自定义身份验证流程对用户进行身份验证。</p>
<p>原文链接：<a href="https://www.tutorialspoint.com/spring_security/spring_security_form_login_with_database.htm">https://www.tutorialspoint.com/spring_security/spring_security_form_login_with_database.htm</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Boot授权服务器 - 使用 Java 的资源服务器和客户端凭证示例</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/spring-boot-authorization-server/</link>
      <pubDate>Wed, 26 Jul 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/spring-boot-authorization-server/</guid>
      <description>概述 在本文中，我们将创建一个授权服务器，为任何客户端生成 access_token。这称为 OAuth2 的 client_credentials 流程。它主要用于服务间通信。 我们将使用 spring boot oauth2 授</description>
      <content:encoded><![CDATA[<h1 id="概述">概述</h1>
<p>在本文中，我们将创建一个授权服务器，为任何客户端生成 access_token。这称为 OAuth2 的 <code>client_credentials</code> 流程。它主要用于服务间通信。</p>
<p>我们将使用 spring boot oauth2 授权服务器依赖项来创建身份验证服务器。我们还将创建一个资源服务器和客户端来对其进行端到端测试。</p>
<p><img loading="lazy" src="https://miro.medium.com/v2/resize:fit:1400/1*8-okMlYgO09HrFbdEpWm6w.png" alt="img"  />
</p>
<h1 id="spring授权服务器">Spring授权服务器</h1>
<p>我们首先创建授权服务器。</p>
<h2 id="依赖项"><strong>依赖项：</strong></h2>
<p>让我们将以下依赖项添加到我们的项目中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">implementation &#39;org.springframework.security:spring-security-oauth2-authorization-server:1.0.0&#39;
</span></span><span class="line"><span class="cl">implementation &#39;org.springframework.boot:spring-boot-starter-security&#39;
</span></span><span class="line"><span class="cl">implementation &#39;org.springframework.boot:spring-boot-starter-web&#39;
</span></span><span class="line"><span class="cl">testImplementation &#39;org.springframework.boot:spring-boot-starter-test&#39;
</span></span><span class="line"><span class="cl">testImplementation &#39;org.springframework.security:spring-security-test&#39;
</span></span></code></pre></div><p>我们正在使用 spring oauth2 依赖项的最新（当时）稳定版本。</p>
<h2 id="java实现"><strong>Java实现：</strong></h2>
<p>让我们创建一个名为 AuthorizationServerConfig 的配置类，并向该类添加 @Configuration 注解。现在让我们创建以下 bean 来完成配置：</p>
<ul>
<li><strong>SecurityFilterChain</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Order</span><span class="o">(</span><span class="n">Ordered</span><span class="o">.</span><span class="na">HIGHEST_PRECEDENCE</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">SecurityFilterChain</span> <span class="nf">authServerSecurityFilterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">OAuth2AuthorizationServerConfiguration</span><span class="o">.</span><span class="na">applyDefaultSecurity</span><span class="o">(</span><span class="n">http</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>我们将把 bean 的顺序设置为最高，因为我们想首先执行它。</p>
<ul>
<li><strong>RegisteredClientRepository</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">RegisteredClientRepository</span> <span class="nf">registeredClientRepository</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">RegisteredClient</span> <span class="n">registeredClient</span> <span class="o">=</span> <span class="n">RegisteredClient</span><span class="o">.</span><span class="na">withId</span><span class="o">(</span><span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">clientId</span><span class="o">(</span><span class="s">&#34;oauth-client&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">clientSecret</span><span class="o">(</span><span class="s">&#34;{noop}oauth-secret&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">clientAuthenticationMethod</span><span class="o">(</span><span class="n">ClientAuthenticationMethod</span><span class="o">.</span><span class="na">CLIENT_SECRET_BASIC</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">authorizationGrantType</span><span class="o">(</span><span class="n">AuthorizationGrantType</span><span class="o">.</span><span class="na">CLIENT_CREDENTIALS</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">scope</span><span class="o">(</span><span class="n">OidcScopes</span><span class="o">.</span><span class="na">OPENID</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">scope</span><span class="o">(</span><span class="s">&#34;articles.read&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">InMemoryRegisteredClientRepository</span><span class="o">(</span><span class="n">registeredClient</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在让我们使用内存存储库对内容进行硬编码。我们可以根据我们的需要更新这些。</p>
<ul>
<li><strong>JwtDecoder</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">JwtDecoder</span> <span class="nf">jwtDecoder</span><span class="o">(</span><span class="n">JWKSource</span><span class="o">&lt;</span><span class="n">SecurityContext</span><span class="o">&gt;</span> <span class="n">jwkSource</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OAuth2AuthorizationServerConfiguration</span><span class="o">.</span><span class="na">jwtDecoder</span><span class="o">(</span><span class="n">jwkSource</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>我们将使用它来解码令牌以进行验证。</p>
<ul>
<li><strong>JWKSource<SecurityContext></strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">JWKSource</span><span class="o">&lt;</span><span class="n">SecurityContext</span><span class="o">&gt;</span> <span class="nf">jwkSource</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">NoSuchAlgorithmException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">RSAKey</span> <span class="n">rsaKey</span> <span class="o">=</span> <span class="n">generateRsa</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">JWKSet</span> <span class="n">jwkSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JWKSet</span><span class="o">(</span><span class="n">rsaKey</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">(</span><span class="n">jwkSelector</span><span class="o">,</span> <span class="n">securityContext</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">jwkSelector</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">jwkSet</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kd">static</span> <span class="n">RSAKey</span> <span class="nf">generateRsa</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">NoSuchAlgorithmException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">KeyPair</span> <span class="n">keyPair</span> <span class="o">=</span> <span class="n">generateRsaKey</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">RSAPublicKey</span> <span class="n">publicKey</span> <span class="o">=</span> <span class="o">(</span><span class="n">RSAPublicKey</span><span class="o">)</span> <span class="n">keyPair</span><span class="o">.</span><span class="na">getPublic</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">RSAPrivateKey</span> <span class="n">privateKey</span> <span class="o">=</span> <span class="o">(</span><span class="n">RSAPrivateKey</span><span class="o">)</span> <span class="n">keyPair</span><span class="o">.</span><span class="na">getPrivate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">RSAKey</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">publicKey</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">privateKey</span><span class="o">(</span><span class="n">privateKey</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">keyID</span><span class="o">(</span><span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">private</span> <span class="kd">static</span> <span class="n">KeyPair</span> <span class="nf">generateRsaKey</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">NoSuchAlgorithmException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">KeyPairGenerator</span> <span class="n">keyPairGenerator</span> <span class="o">=</span> <span class="n">KeyPairGenerator</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&#34;RSA&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">keyPairGenerator</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">2048</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">keyPairGenerator</span><span class="o">.</span><span class="na">generateKeyPair</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>我们在解码器 bean 中使用这个源，所以我们需要定义它。我们使用 RSA 2048 密钥对，我们也可以在需要时更改它。</p>
<ul>
<li><strong>AuthorizationServerSettings</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">AuthorizationServerSettings</span> <span class="nf">authorizationServerSettings</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">AuthorizationServerSettings</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在我们已经配置了一切，让我们尝试运行应用程序并获取令牌：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST <span class="s1">&#39;http://localhost:9090/oauth2/token?grant_type=client_credentials&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --header <span class="s1">&#39;Authorization: Basic b2F1dGgtY2xpZW50Om9hdXRoLXNlY3JldA==&#39;</span>
</span></span></code></pre></div><p>注意：根据您的配置更新端口号。</p>
<p>它应该给出如下响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;eyJraWQiOiJiYWM0ZmMxYS02MGJiLTQ0ZTAtODU4MC1iNzcwYWU2MjkwZWEiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJvYXV0aC1jbGllbnQiLCJhdWQiOiJvYXV0aC1jbGllbnQiLCJuYmYiOjE2NzQ5ODYzNjcsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTA5MCIsImV4cCI6MTY3NDk4NjY2NywiaWF0IjoxNjc0OTg2MzY3fQ.DxiIbV7jdRnW15WnnqcjFCLyfXmrU_trl1M3nxej_nIWK60Jx9Vm4HzpxBJugemhrMg-qizQ03TTNswfL9AgTIsLeh_D8TDjcQJy6XFWgElxfUYqUFeZmlXPmQKFmmPyIChlSAFbX1L8QvcgFE1c8GHC900RiKVgGLhT5MOZx5l1WBCbNQ_Rv2u9utcz7EqYTb0y_PjD4EC8UaGdGGlqvEAnKvRVIhxRqFarqh-OW4oUfwfwu1xQIvyWphSDegcOjIERFkhVcQeKO-a3zZS9sfJ03ppZhzAsa5O-qswtbzThO9SWQg7JUgyo7qd-zHIRhwPtEWxDGaBt2QGo7jjopw&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;Bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">299</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h1 id="spring资源服务器">Spring资源服务器</h1>
<p>现在让我们创建一个受此身份验证服务器保护的 API 端点，其范围为我们在令牌创建中使用的articles.read。</p>
<h2 id="依赖项-1">依赖项：</h2>
<p>让我们将以下依赖项添加到我们的项目中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">implementation &#39;org.springframework.boot:spring-boot-starter-oauth2-resource-server&#39;
</span></span><span class="line"><span class="cl">implementation &#39;org.springframework.boot:spring-boot-starter-security&#39;
</span></span><span class="line"><span class="cl">implementation &#39;org.springframework.boot:spring-boot-starter-web&#39;
</span></span><span class="line"><span class="cl">testImplementation &#39;org.springframework.boot:spring-boot-starter-test&#39;
</span></span><span class="line"><span class="cl">testImplementation &#39;org.springframework.security:spring-security-test&#39;
</span></span></code></pre></div><h2 id="java实现-1">Java实现：</h2>
<p>让我们首先创建一个简单的 rest 控制器，然后创建一个配置，以在正确的范围内保护该 API。之后，我们将在 application.yml 文件中配置身份验证服务器设置。</p>
<ul>
<li><strong>API控制器</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArticlesController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/articles&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">getArticles</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&#34;Article 1&#34;</span><span class="o">,</span> <span class="s">&#34;Article 2&#34;</span><span class="o">,</span> <span class="s">&#34;Article 3&#34;</span> <span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>我们创建了一个简单的 GET API 端点 /articles，它将返回文章列表。</p>
<ul>
<li><strong>ResourceServerConfig</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourceServerConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="n">SecurityFilterChain</span> <span class="nf">securityFilterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span><span class="s">&#34;/articles/**&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;hasAuthority(&#39;SCOPE_articles.read&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">oauth2ResourceServer</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">jwt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>我们将创建一个配置类并使用@EnableWebSecurity对其进行注释。我们将创建一个 SecurityFilterChain 的 bean，在其中定义 API 和所需的范围。</p>
<ul>
<li><strong>application.yml</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">security</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">oauth2</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resourceserver</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">jwt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">issuer-uri</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:9090</span><span class="w">
</span></span></span></code></pre></div><p>我们在这里定义oauth2配置，注意将issuer-url的端口更新为正确的端口。</p>
<p>现在一切都已配置完毕，让我们启动该服务并向 API 发出带有或不带有令牌的请求。您应该得到一个没有令牌或带有无效令牌的 401 响应，并且您应该得到带有有效令牌的正确响应。</p>
<h1 id="客户端服务器">客户端服务器</h1>
<p>我们现在将创建一个简单的 Spring Boot 项目，它将使用资源服务器创建的 API。我们将在此处配置身份验证服务器详细信息，以便它在发出 API 请求之前自动获取令牌。</p>
<h2 id="依赖项-2">依赖项：</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">implementation &#39;org.springframework.boot:spring-boot-starter-oauth2-client&#39;
</span></span><span class="line"><span class="cl">implementation &#39;org.springframework.boot:spring-boot-starter-web&#39;
</span></span><span class="line"><span class="cl">implementation &#39;org.springframework:spring-webflux&#39;
</span></span><span class="line"><span class="cl">testImplementation &#39;org.springframework.boot:spring-boot-starter-test&#39;
</span></span><span class="line"><span class="cl">testImplementation &#39;org.springframework.security:spring-security-test&#39;
</span></span></code></pre></div><h2 id="java实现-2">Java实现：</h2>
<p>我们首先创建配置类，然后创建一个测试 API 来向资源服务器发出请求。之后，我们将在 application.yml 文件中定义令牌配置。</p>
<ul>
<li>**SecurityConfig **</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="n">SecurityFilterChain</span> <span class="nf">securityFilterChain</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">oauth2Client</span><span class="o">().</span><span class="na">and</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="n">WebClient</span> <span class="nf">webClient</span><span class="o">(</span><span class="n">OAuth2AuthorizedClientManager</span> <span class="n">authorizedClientManager</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ServletOAuth2AuthorizedClientExchangeFilterFunction</span> <span class="n">oauth2Client</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServletOAuth2AuthorizedClientExchangeFilterFunction</span><span class="o">(</span><span class="n">authorizedClientManager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">WebClient</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">oauth2Client</span><span class="o">.</span><span class="na">oauth2Configuration</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="n">OAuth2AuthorizedClientManager</span> <span class="nf">authorizedClientManager</span><span class="o">(</span><span class="n">ClientRegistrationRepository</span> <span class="n">clientRegistrationRepository</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">OAuth2AuthorizedClientService</span> <span class="n">oAuth2AuthorizedClientService</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">OAuth2AccessTokenResponseClient</span><span class="o">&lt;</span><span class="n">OAuth2ClientCredentialsGrantRequest</span><span class="o">&gt;</span> <span class="n">tokenResponseClient</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">OAuth2AuthorizedClientProvider</span> <span class="n">authorizedClientProvider</span> <span class="o">=</span> <span class="n">OAuth2AuthorizedClientProviderBuilder</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">clientCredentials</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span><span class="o">.</span><span class="na">accessTokenResponseClient</span><span class="o">(</span><span class="n">tokenResponseClient</span><span class="o">)).</span><span class="na">clientCredentials</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">var</span> <span class="n">authorizedClientManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AuthorizedClientServiceOAuth2AuthorizedClientManager</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">          <span class="n">clientRegistrationRepository</span><span class="o">,</span> <span class="n">oAuth2AuthorizedClientService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">authorizedClientManager</span><span class="o">.</span><span class="na">setAuthorizedClientProvider</span><span class="o">(</span><span class="n">authorizedClientProvider</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">authorizedClientManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="n">OAuth2AccessTokenResponseClient</span><span class="o">&lt;</span><span class="n">OAuth2ClientCredentialsGrantRequest</span><span class="o">&gt;</span> <span class="nf">tokenResponseClient</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">DefaultClientCredentialsTokenResponseClient</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li><strong>application.yml</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">security</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">oauth2</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">registration</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">articles-client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">client-id</span><span class="p">:</span><span class="w"> </span><span class="l">oauth-client</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">client-secret</span><span class="p">:</span><span class="w"> </span><span class="l">oauth-secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">authorization-grant-type</span><span class="p">:</span><span class="w"> </span><span class="l">client_credentials</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">scope</span><span class="p">:</span><span class="w"> </span><span class="l">articles.read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">client-name</span><span class="p">:</span><span class="w"> </span><span class="l">spring-client</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">provider</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">articles-client</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">token-uri</span><span class="p">:</span><span class="w"> </span><span class="l">http://localhost:9090/oauth2/token</span><span class="w">
</span></span></span></code></pre></div><ul>
<li>客户端API（向资源服务器发出请求）</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArticlesController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">WebClient</span> <span class="n">webClient</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">webClient</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">get</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">&#34;http://127.0.0.1:9091/articles&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">attributes</span><span class="o">(</span><span class="n">clientRegistrationId</span><span class="o">(</span><span class="s">&#34;articles-client&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">retrieve</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">bodyToMono</span><span class="o">(</span><span class="n">String</span><span class="o">[].</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">          <span class="o">.</span><span class="na">block</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>我们可以在这里看到，当我们调用 /test API 时，它会从我们的身份验证服务器获取令牌，然后向我们的资源服务器 /articles 端点发出请求并返回响应。</p>
<p>让我们运行所有三个服务器并向客户端服务器发出请求，它应该返回正确的响应。请注意更新所有位置的端口号。在示例中，我使用了以下端口：</p>
<ul>
<li>9090: auth-server 9090：认证服务器</li>
<li>9091: resource-server 9091：资源服务器</li>
<li>9092: client-server 9092：客户端-服务器</li>
</ul>
<h1 id="结论">结论</h1>
<p>在本文中，我们学习了如何使用 Spring Boot 创建授权服务器以及如何在资源服务器和客户端服务器中配置它。</p>
<p>您可以在此 GitHub 存储库中找到此<a href="https://github.com/kumarprabhashanand/spring-authorization-server">示例的代码</a>。</p>
<p>原文链接：<a href="https://blog.devgenius.io/spring-boot-authorization-server-825230ae0ed2">https://blog.devgenius.io/spring-boot-authorization-server-825230ae0ed2</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Boot异常处理完整指南</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/spring-boot-exception-handling/</link>
      <pubDate>Wed, 26 Jul 2023 08:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/spring-boot-exception-handling/</guid>
      <description>处理异常是构建健壮应用程序的重要部分。 Spring Boot 提供了不止一种方法。 本文将探讨这些方法，并提供一些关于何时某种给定方法可能优于另一种方法的指导。 示</description>
      <content:encoded><![CDATA[<p>处理异常是构建健壮应用程序的重要部分。 Spring Boot 提供了不止一种方法。</p>
<p>本文将探讨这些方法，并提供一些关于何时某种给定方法可能优于另一种方法的指导。</p>
<h2 id="示例代码">示例代码</h2>
<p>本文附有 GitHub 上的工作<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/exception-handling">代码示例</a>。</p>
<h2 id="介绍">介绍</h2>
<p>Spring Boot 为我们提供了处理异常的工具，而不仅仅是简单的“try-catch”块。为了使用这些工具，我们应用了一些注释，使我们能够将异常处理视为横切关注点：</p>
<ul>
<li><a href="https://reflectoring.io/spring-boot-exception-handling/#responsestatus"><code>@ResponseStatus</code></a></li>
<li><a href="https://reflectoring.io/spring-boot-exception-handling/#exceptionhandler"><code>@ExceptionHandler</code></a></li>
<li><a href="https://reflectoring.io/spring-boot-exception-handling/#controlleradvice"><code>@ControllerAdvice</code></a></li>
</ul>
<p>在深入了解这些注释之前，我们将首先了解 Spring 如何处理 Web 控制器抛出的异常——这是捕获异常的最后一道防线。</p>
<p>我们还将查看 Spring Boot 提供的一些配置来修改默认行为。</p>
<p>我们将确定这样做时面临的挑战，然后我们将尝试使用这些注释来克服这些挑战。</p>
<h2 id="spring-boot默认的异常处理机制">Spring Boot默认的异常处理机制</h2>
<p>假设我们有一个名为 <code>ProductController</code> 的控制器，当未找到具有给定 id 的 <code>Product</code> 时，其 <code>getProduct(...)</code> 方法会抛出 <code>NoSuchElementFoundException</code> 运行时异常：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/product&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//constructor omitted for brevity...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl">  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Response</span> <span class="nf">getProduct</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">String</span> <span class="n">id</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// this method throws a &#34;NoSuchElementFoundException&#34; exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">productService</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果我们使用无效的 <code>id</code> 调用 <code>/product</code> API，服务将抛出 <code>NoSuchElementFoundException</code> 运行时异常，我们将得到以下响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2020-11-28T13:24:02.239+00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;Internal Server Error&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;/product/1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们可以看到，除了格式良好的错误响应之外，有效负载没有为我们提供任何有用的信息。甚至 <code>message</code> 字段也是空的，我们可能希望包含“未找到 id 1 的项目”之类的内容。</p>
<p>让我们从修复错误消息问题开始。</p>
<p>Spring Boot 提供了一些属性，我们可以使用它们添加异常消息、异常类，甚至堆栈跟踪作为响应负载的一部分：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">error</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">include-message</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">include-binding-errors</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">include-stacktrace</span><span class="p">:</span><span class="w"> </span><span class="l">on_trace_param</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">include-exception</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></div><p>在 <code>application.yml</code> 中使用这些 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#server-properties">Spring Boot 服务器属性</a>，我们可以在某种程度上改变错误响应。</p>
<p>现在，如果我们使用无效的 <code>id</code> 再次调用 <code>/product</code> API，我们将得到以下响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2020-11-29T09:42:12.287+00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;Internal Server Error&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;Item with id 1 not found&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;/product/1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></div><p>请注意，我们已将属性 <code>include-stacktrace</code> 设置为 <code>on_trace_param</code> ，这意味着仅当我们在 URL ( <code>?trace=true</code> ) 中包含 <code>trace</code> 参数时，我们才会在响应负载中获得堆栈跟踪：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2020-11-29T09:42:12.287+00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;Internal Server Error&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;Item with id 1 not found&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;trace&#34;</span><span class="p">:</span> <span class="s2">&#34;io.reflectoring.exception.exception.NoSuchElementFoundException: Item with id 1 not found...&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;/product/1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></div><p>我们可能希望将 <code>include-stacktrace</code> 标志的值保留为 <code>never</code> ，至少在生产中，因为它可能会揭示我们应用程序的内部工作原理。</p>
<p>继续！状态和错误消息 - <code>500</code> - 表明我们的服务器代码有问题，但实际上这是客户端错误，因为客户端提供了无效的 ID。</p>
<p>我们当前的状态代码没有正确反映这一点。不幸的是，这就是我们可以使用 <code>server.error</code> 配置属性的范围，因此我们必须查看 Spring Boot 提供的注释。</p>
<h2 id="responsestatus"><code>@ResponseStatus</code></h2>
<p>顾名思义， <code>@ResponseStatus</code> 允许我们修改响应的 HTTP 状态。它可以应用在以下地方：</p>
<ul>
<li>关于异常类本身</li>
<li>以及方法上的 <code>@ExceptionHandler</code> 注释</li>
<li>以及类上的 <code>@ControllerAdvice</code> 注释</li>
</ul>
<p>在本节中，我们将仅讨论第一种情况。</p>
<p>让我们回到当前的问题，即我们的错误响应总是给我们 HTTP 状态 500，而不是更具描述性的状态代码。</p>
<p>为了解决这个问题，我们可以用 <code>@ResponseStatus</code> 注释我们的 Exception 类，并在其 <code>value</code> 属性中传入所需的 HTTP 响应状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoSuchElementFoundException</span> <span class="kd">extends</span> <span class="n">RuntimeException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果我们使用无效 ID 调用控制器，此更改将带来更好的响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2020-11-29T09:42:12.287+00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">404</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;Not Found&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;Item with id 1 not found&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;/product/1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></div><p>实现相同目的的另一种方法是扩展 <code>ResponseStatusException</code> 类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoSuchElementFoundException</span> <span class="kd">extends</span> <span class="n">ResponseStatusException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">NoSuchElementFoundException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">HttpHeaders</span> <span class="nf">getResponseHeaders</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// return response headers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>当我们想要操作响应头时，这种方法会派上用场，因为我们可以重写 <code>getResponseHeaders()</code> 方法。</p>
<p><code>@ResponseStatus</code> 与 <code>server.error</code> 配置属性相结合，使我们能够操作 Spring 定义的错误响应负载中的几乎所有字段。</p>
<p>但是如果还想操纵响应负载的结构怎么办？</p>
<p>让我们在下一节中看看如何实现这一目标。</p>
<h2 id="exceptionhandler"><code>@ExceptionHandler</code></h2>
<p><code>@ExceptionHandler</code> 注释在处理异常方面为我们提供了很大的灵活性。对于初学者来说，要使用它，我们只需在控制器本身或 <code>@ControllerAdvice</code> 类中创建一个方法，并用 <code>@ExceptionHandler</code> 注释它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/product&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">//constructor omitted for brevity...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Response</span> <span class="nf">getProduct</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">productService</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">NoSuchElementFoundException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">handleNoSuchElementFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">NoSuchElementFoundException</span> <span class="n">exception</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ResponseEntity</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">exception</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>异常处理程序方法接受一个异常或异常列表作为我们要在定义的方法中处理的参数。我们用 <code>@ExceptionHandler</code> 和 <code>@ResponseStatus</code> 注释该方法来定义我们想要处理的异常和我们想要返回的状态代码。</p>
<p>如果我们不想使用这些注释，那么只需将异常定义为方法的参数也可以：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ExceptionHandler</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">handleNoSuchElementFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">NoSuchElementFoundException</span> <span class="n">exception</span><span class="o">)</span>
</span></span></code></pre></div><p>尽管我们已经在方法签名中提到了它，但在注释中提及异常类是个好主意。它提供了更好的可读性。</p>
<p>此外，处理程序方法上的注释 <code>@ResponseStatus(HttpStatus.NOT_FOUND)</code> 不是必需的，因为传递到 <code>ResponseEnity</code> 的 HTTP 状态将优先，但出于相同的可读性原因，我们仍然保留它。</p>
<p>除了异常参数之外，我们还可以使用 <code>HttpServletRequest</code> 、 <code>WebRequest</code> 或 <code>HttpSession</code> 类型作为参数。</p>
<p>同样，处理程序方法支持各种返回类型，例如 <code>ResponseEntity</code> 、 <code>String</code> 甚至 <code>void</code> 。</p>
<p>在 <code>@ExceptionHandler</code> <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html">java 文档</a>中查找更多输入和返回类型。</p>
<p>在异常处理函数中，我们可以通过输入参数和返回类型的形式使用许多不同的选项，因此我们可以完全控制错误响应。</p>
<p>现在，让我们最终确定 API 的错误响应负载。如果出现任何错误，客户通常会期望两件事：</p>
<ul>
<li>
<p>错误代码告诉客户端它是什么类型的错误。客户端可以在其代码中使用错误代码来驱动基于它的某些业务逻辑。通常，错误代码是标准的 HTTP 状态代码，但我也看到 API 返回自定义错误代码，例如 <code>E001</code> 。</p>
</li>
<li>
<p>一条附加的人类可读消息，提供有关错误的更多信息，甚至提供有关如何修复错误的一些提示或 API 文档的链接。</p>
</li>
</ul>
<p>我们还将添加一个可选的 <code>stackTrace</code> 字段，这将帮助我们在开发环境中进行调试。</p>
<p>最后，我们还想处理响应中的验证错误。您可以在这篇有关使用 Spring Boot 处理验证的文章中找到有关 bean 验证的更多信息。</p>
<p>记住这些点，我们将为错误响应使用以下有效负载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Getter</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Setter</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequiredArgsConstructor</span>
</span></span><span class="line"><span class="cl"><span class="nd">@JsonInclude</span><span class="o">(</span><span class="n">JsonInclude</span><span class="o">.</span><span class="na">Include</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ErrorResponse</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">message</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">String</span> <span class="n">stackTrace</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ValidationError</span><span class="o">&gt;</span> <span class="n">errors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Getter</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Setter</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@RequiredArgsConstructor</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ValidationError</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">field</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">message</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addValidationError</span><span class="o">(</span><span class="n">String</span> <span class="n">field</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">isNull</span><span class="o">(</span><span class="n">errors</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">      <span class="n">errors</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">errors</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ValidationError</span><span class="o">(</span><span class="n">field</span><span class="o">,</span> <span class="n">message</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，让我们将所有这些应用到 <code>NoSuchElementFoundException</code> 处理程序方法中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/product&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@AllArgsConstructor</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TRACE</span> <span class="o">=</span> <span class="s">&#34;trace&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${reflectoring.trace:false}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">printStackTrace</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Product</span> <span class="nf">getProduct</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">String</span> <span class="n">id</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">productService</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@PostMapping</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Product</span> <span class="nf">addProduct</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nd">@Valid</span> <span class="n">ProductInput</span> <span class="n">input</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">productService</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">NoSuchElementFoundException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">handleItemNotFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">NoSuchElementFoundException</span> <span class="n">exception</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Failed to find the requested element&#34;</span><span class="o">,</span> <span class="n">exception</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">buildErrorResponse</span><span class="o">(</span><span class="n">exception</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">MethodArgumentNotValidException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNPROCESSABLE_ENTITY</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">handleMethodArgumentNotValid</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">MethodArgumentNotValidException</span> <span class="n">ex</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ErrorResponse</span> <span class="n">errorResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNPROCESSABLE_ENTITY</span><span class="o">.</span><span class="na">value</span><span class="o">(),</span> 
</span></span><span class="line"><span class="cl">        <span class="s">&#34;Validation error. Check &#39;errors&#39; field for details.&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="n">FieldError</span> <span class="n">fieldError</span> <span class="o">:</span> <span class="n">ex</span><span class="o">.</span><span class="na">getBindingResult</span><span class="o">().</span><span class="na">getFieldErrors</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">errorResponse</span><span class="o">.</span><span class="na">addValidationError</span><span class="o">(</span><span class="n">fieldError</span><span class="o">.</span><span class="na">getField</span><span class="o">(),</span> 
</span></span><span class="line"><span class="cl">          <span class="n">fieldError</span><span class="o">.</span><span class="na">getDefaultMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">unprocessableEntity</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">errorResponse</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">handleAllUncaughtException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">Exception</span> <span class="n">exception</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Unknown error occurred&#34;</span><span class="o">,</span> <span class="n">exception</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">buildErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">exception</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;Unknown error occurred&#34;</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">request</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">buildErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">Exception</span> <span class="n">exception</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">buildErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">exception</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">exception</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> 
</span></span><span class="line"><span class="cl">        <span class="n">httpStatus</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">buildErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">Exception</span> <span class="n">exception</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">String</span> <span class="n">message</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ErrorResponse</span> <span class="n">errorResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">httpStatus</span><span class="o">.</span><span class="na">value</span><span class="o">(),</span> 
</span></span><span class="line"><span class="cl">        <span class="n">exception</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="o">(</span><span class="n">printStackTrace</span> <span class="o">&amp;&amp;</span> <span class="n">isTraceOn</span><span class="o">(</span><span class="n">request</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">      <span class="n">errorResponse</span><span class="o">.</span><span class="na">setStackTrace</span><span class="o">(</span><span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">getStackTrace</span><span class="o">(</span><span class="n">exception</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">httpStatus</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">errorResponse</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isTraceOn</span><span class="o">(</span><span class="n">WebRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="o">[]</span> <span class="n">value</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterValues</span><span class="o">(</span><span class="n">TRACE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">nonNull</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="n">0</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">contentEquals</span><span class="o">(</span><span class="s">&#34;true&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这里需要注意几点：</p>
<h3 id="提供堆栈跟踪">提供堆栈跟踪</h3>
<p>在错误响应中提供堆栈跟踪可以使我们的开发人员和 QA 工程师免去爬行日志文件的麻烦。</p>
<p>正如我们在 <a href="https://reflectoring.io/spring-boot-exception-handling/#spring-boots-default-exception-handling-mechanism">Spring Boot 的默认异常处理机制</a>中看到的，Spring 已经为我们提供了这个功能。但现在，由于我们自己处理错误响应，因此这也需要我们自己处理。</p>
<p>为了实现这一点，我们首先引入了一个名为 <code>reflectoring.trace</code> 的服务器端配置属性，如果将其设置为 <code>true</code> ，为了实现此目的，我们首先引入了一个名为 <code>reflectoring.trace</code> 的服务器端配置属性，如果将其设置为 <code>true</code> ，将启用响应中的 <code>stackTrace</code> 字段。要实际在 API 响应中获取 <code>stackTrace</code> ，我们的客户端还必须传递带有值 <code>true</code> 的 <code>trace</code> 参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl --location --request GET <span class="s1">&#39;http://localhost:8080/product/1?trace=true&#39;</span>
</span></span></code></pre></div><p>现在，由于 <code>stackTrace</code> 的行为由属性文件中的功能标志控制，因此当我们在生产环境中部署时，我们可以将其删除或将其设置为 <code>false</code> 。</p>
<h3 id="捕获所有异常处理程序">捕获所有异常处理程序</h3>
<p><em>需要把他们全都抓到：</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">performSomeOperation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">OperationSpecificException</span> <span class="n">ex</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">catchAllExcetion</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//...  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>作为一项谨慎措施，我们经常用一个包罗万象的 try-catch 异常处理程序块包围顶级方法的主体，以避免任何不需要的副作用或行为。我们控制器中的 <code>handleAllUncaughtException()</code> 方法的行为类似。它将捕获我们没有特定处理程序的所有异常。</p>
<p>我想在这里指出的一件事是，即使我们没有这个包罗万象的异常处理程序，Spring 也会处理它。但我们希望响应采用我们的格式而不是 Spring 的格式，因此我们必须自己处理异常。</p>
<p>包罗万象的处理程序方法也是记录异常的好地方，因为它们可以深入了解可能的错误。我们可以跳过记录字段验证异常，例如 <code>MethodArgumentNotValidException</code> ，因为它们是由于语法上无效的输入而引发的，但我们应该始终在捕获所有处理程序中记录未知异常。</p>
<h3 id="异常处理程序的顺序">异常处理程序的顺序</h3>
<p>提及处理程序方法的顺序并不重要。 Spring将首先寻找最具体的异常处理方法。</p>
<p>如果找不到它，那么它将查找父异常的处理程序，在我们的例子中是 <code>RuntimeException</code> ，如果没有找到，则 <code>handleAllUncaughtException()</code> 方法将最终处理该异常。</p>
<p>这应该可以帮助我们处理这个特定控制器中的异常，但是如果其他控制器也抛出这些相同的异常怎么办？我们如何处理这些？我们是否在所有控制器中创建相同的处理程序，或者创建具有公共处理程序的基类并在所有控制器中扩展它？</p>
<p>幸运的是，我们不必这样做。 Spring 以“控制器建议”的形式为这个问题提供了一个非常优雅的解决方案。</p>
<p>让我们研究一下它们。</p>
<h2 id="controlleradvice"><code>@ControllerAdvice</code></h2>
<blockquote>
<p><strong>为什么称为“控制器建议”？</strong></p>
<p>“建议”一词来自面向方面编程 (AOP)，它允许我们围绕现有方法注入横切代码（称为“建议”）。控制器建议允许我们拦截和修改控制器方法的返回值，在我们的例子中是为了处理异常。</p>
</blockquote>
<p>控制器建议类允许我们将异常处理程序应用于应用程序中的多个或所有控制器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ControllerAdvice</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GlobalExceptionHandler</span> <span class="kd">extends</span> <span class="n">ResponseEntityExceptionHandler</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TRACE</span> <span class="o">=</span> <span class="s">&#34;trace&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${reflectoring.trace:false}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">printStackTrace</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNPROCESSABLE_ENTITY</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">protected</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">handleMethodArgumentNotValid</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">MethodArgumentNotValidException</span> <span class="n">ex</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpHeaders</span> <span class="n">headers</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpStatus</span> <span class="n">status</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">//Body omitted as it&#39;s similar to the method of same name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// in ProductController example...  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">//.....
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">ItemNotFoundException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">handleItemNotFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">ItemNotFoundException</span> <span class="n">itemNotFoundException</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">//Body omitted as it&#39;s similar to the method of same name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// in ProductController example...  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">//.....  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">handleAllUncaughtException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">RuntimeException</span> <span class="n">exception</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">//Body omitted as it&#39;s similar to the method of same name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// in ProductController example...  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">//.....
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">//....
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">handleExceptionInternal</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">Exception</span> <span class="n">ex</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">Object</span> <span class="n">body</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpHeaders</span> <span class="n">headers</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpStatus</span> <span class="n">status</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">buildErrorResponse</span><span class="o">(</span><span class="n">ex</span><span class="o">,</span><span class="n">status</span><span class="o">,</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>处理函数的主体和其他支持代码被省略，因为它们与我们在 @ExceptionHandler 部分看到的代码几乎相同。请在 Github Repo 的 <a href="https://github.com/thombergs/code-examples/blob/master/spring-boot/exception-handling/src/main/java/io/reflectoring/exception/exception/GlobalExceptionHandler.java">GlobalExceptionHandler</a> 类中找到完整的代码。</p>
<p>有几件事是新的，我们稍后会讨论。这里的一个主要区别是这些处理程序将处理应用程序中所有控制器抛出的异常，而不仅仅是 <code>ProductController</code> 。</p>
<p>如果我们想有选择地将控制器建议的范围应用或限制到特定控制器或包，我们可以使用注释提供的属性：</p>
<ul>
<li><code>@ControllerAdvice(&quot;com.reflectoring.controller&quot;)</code> ：我们可以在注释的 <code>value</code> 或 <code>basePackages</code> 参数中传递包名称或包名称列表。这样，控制器建议将仅处理该包控制器的异常。</li>
<li><code>@ControllerAdvice(annotations = Advised.class)</code> ：只有标有 <code>@Advised</code> 注释的控制器才会由控制器建议处理。</li>
</ul>
<p>在 <code>@ControllerAdvice</code> <a href="https://www.javadoc.io/doc/org.springframework/spring-web/4.3.8.RELEASE/org/springframework/web/bind/annotation/ControllerAdvice.html">注释文档</a>中查找其他参数。</p>
<h3 id="responseentityexceptionhandler"><code>ResponseEntityExceptionHandler</code></h3>
<p><code>ResponseEntityExceptionHandler</code> 是控制器建议类的便捷基类。它为内部 Spring 异常提供异常处理程序。如果我们不扩展它，那么所有异常将被重定向到 <code>DefaultHandlerExceptionResolver</code> ，它返回一个 <code>ModelAndView</code> 对象。因为我们的使命是塑造我们自己的错误响应，所以我们不希望这样。</p>
<p>正如您所看到的，我们重写了两个 <code>ResponseEntityExceptionHandler</code> 方法：</p>
<ul>
<li><code>handleMethodArgumentNotValid()</code> ：在 @ExceptionHandler 部分，我们自己实现了一个处理程序。在这里我们只是覆盖了它的行为。</li>
<li><code>handleExceptionInternal()</code> ： <code>ResponseEntityExceptionHandler</code> 中的所有处理程序都使用此函数来构建类似于 <code>buildErrorResponse()</code> 的 <code>ResponseEntity</code> 。如果我们不重写此方法，那么客户端将仅收到响应标头中的 HTTP 状态，但由于我们也希望在响应正文中包含 HTTP 状态，因此我们重写了该方法。</li>
</ul>
<blockquote>
<h4 id="处理-nohandlerfoundexception-需要一些额外的步骤">处理 <code>NoHandlerFoundException</code> 需要一些额外的步骤</h4>
<p>当您尝试调用系统中不存在的API时，会出现此异常。尽管我们通过 <code>ResponseEntityExceptionHandler</code> 类实现其处理程序，但异常仍被重定向到 <code>DefaultHandlerExceptionResolver</code> 。</p>
<p>要将异常重定向到我们的建议，我们需要在属性文件中设置几个属性： <code>spring.mvc.throw-exception-if-no-handler-found=true</code> 和 <code>spring.web.resources.add-mappings=false</code></p>
</blockquote>
<h3 id="使用-controlleradvice-时要记住的一些要点">使用 <code>@ControllerAdvice</code> 时要记住的一些要点</h3>
<ul>
<li>
<p>为了简单起见，项目中始终只有一个控制器建议类。最好有一个应用程序中所有异常的单一存储库。如果您创建多个控制器建议，请尝试使用 <code>basePackages</code> 或 <code>annotations</code> 属性来明确它将建议哪些控制器。</p>
</li>
<li>
<p>Spring 可以按任何顺序处理控制器建议类，除非我们使用 <code>@Order</code> 注释对其进行注释。因此，如果您有多个控制器建议，那么在编写一个包罗万象的处理程序时要小心。特别是当您没有在注释中指定 <code>basePackages</code> 或 <code>annotations</code> 时。</p>
</li>
</ul>
<h2 id="spring如何处理异常">Spring如何处理异常？</h2>
<p>现在我们已经介绍了 Spring 中处理异常的可用机制，让我们简要了解 Spring 如何处理它以及何时一种机制优先于另一种机制。</p>
<p>如果我们还没有构建自己的异常处理程序，请看下面的流程图，它跟踪了 Spring 异常处理的过程：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-exception-handling/spring-exception-handling-mechanism_hubae3aff6e8617ef25d3790cb826a42d7_144133_2512x0_resize_box_3.png" alt="Spring Exception Handling Flow"  />
</p>
<h2 id="结论">结论</h2>
<p>当异常跨越控制器的边界时，它注定会以 JSON 响应或 HTML 网页的形式到达客户端。</p>
<p>在本文中，我们了解了 Spring Boot 如何将这些异常转换为客户友好的输出，以及配置和注释，使我们能够将它们进一步塑造成我们想要的形状。</p>
<p>感谢您的阅读！您可以在 GitHub 上找到工作代码。</p>
<p>原文链接：<a href="https://reflectoring.io/spring-boot-exception-handling/">https://reflectoring.io/spring-boot-exception-handling/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]使用 Spring 的 Null-Safety 注解保护您的代码免受 NullPointerExceptions 的影响</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/spring-boot-null-safety-annotations/</link>
      <pubDate>Wed, 26 Jul 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/spring-boot-null-safety-annotations/</guid>
      <description>NullPointerExceptions （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。 我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添</description>
      <content:encoded><![CDATA[<p><code>NullPointerExceptions</code> （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。</p>
<p>我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添加了适当的检查，以保证对象引用不能为空，或者毕竟在对象为空时采取可能的安全措施。</p>
<p>由于 <code>NullPointerException</code> 是一个运行时异常，因此在代码编译过程中很难找出这种情况。 Java 的类型系统没有办法快速消除危险的空对象引用。</p>
<p>幸运的是，Spring 框架提供了一些注释来解决这个问题。在本文中，我们将学习如何使用这些注释通过 <a href="https://reflectoring.io/categories/spring-boot/">Spring Boot</a> 编写空安全代码。</p>
<h2 id="示例代码">示例代码</h2>
<p>本文附有 GitHub 上的工作<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/spring-boot-null-safe-annotations">代码示例</a>。</p>
<h2 id="spring-中的空安全注解">Spring 中的空安全注解</h2>
<p>在Spring核心包 <code>org.springframework.lang</code> 下，有4个这样的注解：</p>
<ul>
<li><code>@NonNull</code>, <code>@NonNull</code> ，</li>
<li><code>@NonNullFields</code>, <code>@NonNullFields</code> ，</li>
<li><code>@Nullable</code>,</li>
<li><code>@NonNullApi</code>.</li>
</ul>
<p>Eclipse 和 IntelliJ IDEA 等流行的 IDE 可以理解这些注释。它们可以在编译期间警告开发人员潜在的问题。</p>
<p>我们将在本教程中使用 IntelliJ IDEA。让我们通过一些代码示例来了解更多信息。</p>
<p>要创建基础项目，我们可以使用 Spring Initializr。 Spring Boot启动器就是我们所需要的，不需要添加任何额外的依赖项。</p>
<h2 id="ide配置">IDE配置</h2>
<p><strong>请注意，并非所有开发工具都可以显示这些编译警告。如果您没有看到相关警告，请检查 IDE 中的编译器设置。</strong></p>
<h3 id="intellij">IntelliJ</h3>
<p>对于 IntelliJ，我们可以在“Build, Execution, Deployment -&gt; Compiler”下激活注释检查：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/intellij-compiler-settings_hud188e08fdc0139feec7b91a21ff944e5_145688_1866x0_resize_box_3.png" alt="IntelliJ compiler config"  />
</p>
<h3 id="eclipse">Eclipse</h3>
<p>对于 Eclipse，我们可以在“Java -&gt; Compiler -&gt; Errors/Warnings”下找到设置：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/eclipse-compiler-settings_hu8534a04dde40f239dc7f4772e1ef3337_850180_2084x0_resize_box_3.png" alt="Eclipse compiler config"  />
</p>
<h2 id="示例代码-1">示例代码</h2>
<p>让我们使用一个简单的 <code>Employee</code> 类来理解注释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.reflectoring.nullsafety</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// imports 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">LocalDate</span> <span class="n">joiningDate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">pastEmployment</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// standard constructor, getters, setters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h2 id="nonnull"><code>@NonNull</code></h2>
<p>大多数情况下， <code>id</code> 字段（在 <code>Employee</code> 类中）将是一个不可为 null 的值。因此，为了避免任何潜在的 <code>NullPointerException</code> 我们可以将此字段标记为 <code>@NonNull</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@NonNull</span> 
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>现在，如果我们不小心尝试在代码中的任何位置将 <code>id</code> 的值设置为 null，IDE 将显示编译警告：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/nonnull-ide-warning_hu5348352c54dfc5689093e49bbc5394b7_33745_1138x0_resize_box_3.png" alt="IDE warning for NonNull"  />
</p>
<p><code>@NonNull</code> 注释可以在方法、参数或字段级别使用。**</p>
<p>此时，您可能会想“如果一个类有多个非空字段怎么办？”。如果我们必须在每一个之前添加 <code>@NonNull</code> 注释，是不是太罗嗦了？</p>
<p>我们可以通过使用 <code>@NonNullFields</code> 注释来解决这个问题。</p>
<p>以下是 <code>@NonNull</code> 的快速摘要：</p>
<table>
<thead>
<tr>
<th>带注释的元素</th>
<th>影响</th>
</tr>
</thead>
<tbody>
<tr>
<td>field</td>
<td>当字段为空时显示警告</td>
</tr>
<tr>
<td>parameter</td>
<td>当参数为空时显示警告</td>
</tr>
<tr>
<td>method</td>
<td>当方法返回 null 时显示警告</td>
</tr>
<tr>
<td>package</td>
<td>不适用</td>
</tr>
</tbody>
</table>
<h2 id="nonnullfields"><code>@NonNullFields</code></h2>
<p>让我们创建一个 <code>package-info.java</code> 文件以在包级别应用非空字段检查。该文件将包含带有 <code>@NonNullFields</code> 注释的根包名称：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@NonNullFields</span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.reflectoring.nullsafety</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.lang.NonNullFields</span><span class="o">;</span>
</span></span></code></pre></div><p>现在，我们不再需要使用 <code>@NonNull</code> 注释来注释字段。因为默认情况下，该包中类的所有字段现在都被视为非空。而且，我们仍然会看到与以前相同的警告：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/nonnull-ide-warning_hu5348352c54dfc5689093e49bbc5394b7_33745_1138x0_resize_box_3.png" alt="IDE warning for NonNullFields"  />
</p>
<p>这里要注意的另一点是，如果有任何未初始化的字段，那么我们将看到初始化这些字段的警告：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/nonnullfields-ide-warning_huf1e2dea76ed1bc462a15a89ca8946d6c_20352_612x0_resize_box_3.png" alt="IDE warning for NonNull"  />
</p>
<p>以下是 <code>@NonNullFields</code> 的快速摘要：</p>
<table>
<thead>
<tr>
<th>带注释的元素</th>
<th>影响</th>
</tr>
</thead>
<tbody>
<tr>
<td>field</td>
<td>不适用</td>
</tr>
<tr>
<td>parameter</td>
<td>不适用</td>
</tr>
<tr>
<td>method</td>
<td>不适用</td>
</tr>
<tr>
<td>package</td>
<td>如果所应用的包的任何字段为空，则显示警告</td>
</tr>
</tbody>
</table>
<h2 id="nonnullapi"><code>@NonNullApi</code></h2>
<p>到目前为止，您可能已经发现了另一个要求，即对方法参数或返回值进行类似的检查。 <code>@NonNullApi</code> 将会来拯救我们。</p>
<p>与 <code>@NonNullFields</code> 类似，我们可以使用 <code>package-info.java</code> 文件并为目标包添加 <code>@NonNullApi</code> 注释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@NonNullApi</span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.reflectoring.nullsafety</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.lang.NonNullApi</span><span class="o">;</span>
</span></span></code></pre></div><p>现在，如果我们编写方法返回 null 的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.reflectoring.nullsafety</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// imports
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="nf">getPastEmployment</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>  
</span></span></code></pre></div><p>我们可以看到 IDE 现在警告我们有关不可为 null 的返回值：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/nonnullapi-method-ide-warning_hu0f179a30c6c723f579ce7eeee2a50ca2_40298_1084x0_resize_box_3.png" alt="IDE warning for NonNullApi"  />
</p>
<p>以下是 <code>@NonNullApi</code> 的快速摘要：</p>
<table>
<thead>
<tr>
<th>带注释的元素</th>
<th>影响</th>
</tr>
</thead>
<tbody>
<tr>
<td>field</td>
<td>不适用</td>
</tr>
<tr>
<td>parameter</td>
<td>不适用</td>
</tr>
<tr>
<td>method</td>
<td>不适用</td>
</tr>
<tr>
<td>package</td>
<td>如果所应用的包的任何参数或返回值为空，则显示警告</td>
</tr>
</tbody>
</table>
<h2 id="nullable"><code>@Nullable</code></h2>
<p>但这里有一个问题。在某些情况下，特定字段可能为空（无论我们多么想避免它）。</p>
<p>例如， <code>pastEmployment</code> 字段在 <code>Employee</code> 类中可以为空（对于以前没有工作过的人）。但根据我们的安全检查，IDE 认为不可能。</p>
<p>我们可以使用字段上的 <code>@Nullable</code> 注释来表达我们的意图。这将告诉 IDE 该字段在某些情况下可以为空，因此无需触发警报。正如 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/lang/Nullable.html">JavaDoc</a> 所建议的：</p>
<blockquote>
<p>可以与 <code>@NonNullApi</code> 或 <code>@NonNullFields</code> 结合使用，将默认的不可为空语义覆盖为可为空。</p>
</blockquote>
<p>与 <code>NonNull</code> 类似， <code>Nullable</code> 注释可以应用于方法、参数或字段级别。</p>
<p>我们现在可以将 <code>pastEmployment</code> 字段标记为可为空：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.reflectoring.nullsafety</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// imports
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Nullable</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">pastEmployment</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Nullable</span> <span class="n">String</span> <span class="nf">getPastEmployment</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pastEmployment</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>  
</span></span></code></pre></div><p>以下是 <code>@Nullable</code> 的快速摘要：</p>
<table>
<thead>
<tr>
<th>带注释的元素</th>
<th>影响</th>
</tr>
</thead>
<tbody>
<tr>
<td>field</td>
<td>表示该字段可以为空</td>
</tr>
<tr>
<td>parameter</td>
<td>表示参数可以为空</td>
</tr>
<tr>
<td>method</td>
<td>表示该方法可以返回null</td>
</tr>
<tr>
<td>package</td>
<td>不适用</td>
</tr>
</tbody>
</table>
<h2 id="自动构建检查">自动构建检查</h2>
<p>到目前为止，我们正在讨论现代 IDE 如何使编写空安全代码变得更容易。然而，如果我们想在构建管道中进行一些自动代码检查，这在某种程度上也是可行的。</p>
<p><a href="https://spotbugs.github.io/">SpotBugs</a>（著名但已废弃的 <a href="http://findbugs.sourceforge.net/">FindBugs</a> 项目的转世）提供了一个 Maven/Gradle 插件，可以检测由于可空性而导致的代码异味。让我们看看如何使用它。</p>
<p>对于 Maven 项目，我们需要更新 <code>pom.xml</code> 以添加 <a href="https://spotbugs.readthedocs.io/en/latest/maven.html">SpotBugs Maven</a> 插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.github.spotbugs<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spotbugs-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>4.5.2.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- overwrite dependency on spotbugs if you want to specify the version of spotbugs --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>com.github.spotbugs<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spotbugs<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>4.5.3<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div><p>构建项目后，我们可以使用该插件的以下目标：</p>
<ul>
<li>
<p><code>spotbugs</code> 目标分析目标项目。</p>
</li>
<li>
<p><code>check</code> 目标运行 <code>spotbugs</code> 目标，如果发现任何错误，则使构建失败。</p>
</li>
</ul>
<p>如果您使用 Gradle 而不是 Maven，则可以在 <code>build.gradle</code> 文件中配置 SpotBugs Gradle 插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">spotbugsPlugins</span> <span class="s1">&#39;com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">spotbugs</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">toolVersion</span> <span class="o">=</span> <span class="s1">&#39;4.5.3&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>项目更新后，我们可以使用 <code>gradle check</code> 命令运行检查。</p>
<p>SpotBugs 提供了一些规则，通过在 Maven 构建期间处理 <code>@NonNull</code> 注释来标记潜在问题。您可以查看<a href="https://spotbugs.readthedocs.io/en/latest/bugDescriptions.html">错误描述的详细列表</a>。</p>
<p>例如，如果任何用 <code>@NonNull</code> 注释的方法意外返回 null，则 SpotBugs 检查将失败，并显示类似以下内容的错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[ERROR] High: io.reflectoring.nullsafety.Employee.getJoiningDate() may return null, but is declared @Nonnull [io.reflectoring.nullsafety.Employee] At Employee.java:[line 36] NP_NONNULL_RETURN_VIOLATION
</span></span></code></pre></div><h2 id="结论">结论</h2>
<p>这些注解对于Java程序员来说确实是一个福音，可以减少运行时出现 <code>NullPointerException</code> 的可能性。但是请记住，这并不能保证完全的空安全。</p>
<p>Kotlin 使用这些注释来推断 Spring API 的可为空性。</p>
<p>我希望您现在已经准备好在 Spring Boot 中编写 null 安全代码！</p>
<p>原文链接：<a href="https://reflectoring.io/spring-boot-null-safety-annotations/">https://reflectoring.io/spring-boot-null-safety-annotations/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]使用 Spring Boot 和 Spring Security 配置 CORS</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/spring-cors/</link>
      <pubDate>Wed, 26 Jul 2023 07:20:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/spring-cors/</guid>
      <description>跨源资源共享 (CORS) 是一种基于 HTTP 标头的机制，允许服务器显式将某些源列入白名单，并帮助绕过同源策略。 这是必需的，因为浏览器默认应用同源策略以确保安全</description>
      <content:encoded><![CDATA[<p>跨源资源共享 (CORS) 是一种基于 HTTP 标头的机制，允许服务器显式将某些源列入白名单，并帮助绕过同源策略。</p>
<p>这是必需的，因为浏览器默认应用同源策略以确保安全。通过在 Web 应用程序中实施 CORS，网页可以请求额外的资源并从其他域加载到浏览器中。</p>
<p>本文将重点介绍在基于 Spring 的应用程序中实现 CORS 的各种方式。要详细了解 CORS 的工作原理，请参阅这篇优秀的<a href="https://reflectoring.io/complete-guide-to-cors/">介绍性文章</a>。</p>
<h2 id="示例代码">示例代码</h2>
<p>本文附有 GitHub 上的工作<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring">代码示例</a>。</p>
<h2 id="cors-特定-http-响应标头概述">CORS 特定 HTTP 响应标头概述</h2>
<p>CORS 规范定义了服务器返回的一组响应标头，这将是后续部分的重点。</p>
<table>
<thead>
<tr>
<th>响应头</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Access-Control-Allow-Origin</code></td>
<td>以逗号分隔的白名单来源列表或“*”。</td>
</tr>
<tr>
<td><code>Access-Control-Allow-Methods</code></td>
<td>Web 服务器允许跨源请求的 HTTP 方法的逗号分隔列表。</td>
</tr>
<tr>
<td><code>Access-Control-Allow-Headers</code></td>
<td>Web 服务器允许跨源请求的 HTTP 标头的逗号分隔列表。</td>
</tr>
<tr>
<td><code>Access-Control-Expose-Headers</code></td>
<td>客户端脚本认为可以安全显示的以逗号分隔的 HTTP 标头列表。</td>
</tr>
<tr>
<td><code>Access-Control-Allow-Credentials</code></td>
<td>如果浏览器通过传递凭据（以 cookie 或授权标头的形式）向服务器发出请求，则其值设置为 <code>true</code> 。</td>
</tr>
<tr>
<td><code>Access-Control-Max-Age</code></td>
<td>指示预检请求的结果可以缓存多长时间。</td>
</tr>
</tbody>
</table>
<h2 id="设置示例客户端应用程序">设置示例客户端应用程序</h2>
<p>我们将使用一个简单的角度应用程序来调用 REST 端点，我们可以使用浏览器开发人员工具检查这些端点。您可以在 GitHub 上查看<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring/cors-app">源代码</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">    ng serve --open
</span></span></code></pre></div><p>我们应该能够成功启动客户端应用程序。</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/configuring-cors-with-spring/client_hu6933403b7320f6f893a41150b2491685_84510_1441x0_resize_q90_box.JPG" alt="settings"  />
</p>
<h2 id="设置示例服务器应用程序">设置示例服务器应用程序</h2>
<p>我们将使用一个基于 Spring 的示例应用程序，其中包含客户端应用程序可以调用的 <code>GET</code> 和 <code>POST</code> 请求。请注意，您会发现两个独立的应用程序：一个使用 Spring MVC (REST)，另一个使用 Spring Reactive 堆栈。</p>
<p>为简单起见，两个应用程序之间的 CORS 配置相同，并且定义了相同的端点。两台服务器都从不同的端口 8091 和 8092 启动。</p>
<p>与应用程序捆绑在一起的 Maven Wrapper 将用于启动服务。您可以查看 <a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring/SimpleLibraryApplication">Spring REST 源代码</a>和 <a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring/LibraryWebfluxApplication">Spring Reactive 源代码</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">    mvnw clean verify spring-boot:run <span class="o">(</span><span class="k">for</span> Windows<span class="o">)</span>
</span></span><span class="line"><span class="cl">   ./mvnw clean verify spring-boot:run <span class="o">(</span><span class="k">for</span> Linux<span class="o">)</span>
</span></span></code></pre></div><p>一旦 Spring 应用程序成功启动，客户端应用程序应该能够成功从服务器加载数据。</p>
<p>调用 Spring REST 服务器：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/configuring-cors-with-spring/app_hu6933403b7320f6f893a41150b2491685_157341_1871x0_resize_q90_box.JPG" alt="settings"  />

调用 Spring Reactive 服务器：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/configuring-cors-with-spring/app_reactive_hu6933403b7320f6f893a41150b2491685_154439_1859x0_resize_q90_box.JPG" alt="settings"  />
</p>
<h2 id="了解-crossorigin-属性">了解 <code>@CrossOrigin</code> 属性</h2>
<p>在 Spring Boot 应用程序中，我们使用 <code>@CrossOrigin</code> 注解来启用跨域调用。我们先了解一下 <code>@CrossOrigin</code> 支持的属性。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>Description 描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>origins</code></td>
<td>允许您指定允许的来源列表。默认情况下，它允许所有来源。 该属性值将在预检响应和实际响应的 <code>Access-Control-Allow-Origin</code> 标头中设置。 用法示例： <code>@CrossOrigin(origins = &quot;http://localhost:8080&quot;)</code>  <code>@CrossOrigin(origins = {&quot;http://localhost:8080&quot;, &quot;http://testserver:8087&quot;})</code></td>
</tr>
<tr>
<td><code>allowedHeaders</code></td>
<td>允许您指定浏览器发出请求时将接受的标头列表。默认情况下，任何标头都将被允许。此属性中指定的值用于预检响应中的 <code>Access-Control-Allow-Headers</code> 中。  <strong>用法示例：</strong> <code>@CrossOrigin(allowedHeaders = {&quot;Authorization&quot;, &quot;Origin&quot;})</code></td>
</tr>
<tr>
<td><code>exposedHeaders</code></td>
<td>在实际响应标头中设置的标头列表。如果未指定，则只有安全列表中的标头才会被认为可以安全地由客户端脚本公开。  <strong>用法示例：</strong> <code>@CrossOrigin(exposedHeaders = {&quot;Access-Control-Allow-Origin&quot;,&quot;Access-Control-Allow-Credentials&quot;})</code></td>
</tr>
<tr>
<td><code>allowCredentials</code></td>
<td>当需要凭据来调用 API 时，请将 <code>Access-Control-Allow-Credentials</code> 标头值设置为 true。如果不需要凭据，请省略标头。  <strong>用法示例：</strong> <code>@CrossOrigin(allowCredentials = true)</code></td>
</tr>
<tr>
<td><code>maxAge</code></td>
<td>默认 <code>maxAge</code> 设置为 1800 秒（30 分钟）。指示预检响应可以缓存多长时间。  <strong>用法示例：</strong> <code>@CrossOrigin(maxAge = 300)</code></td>
</tr>
</tbody>
</table>
<h2 id="如果不配置cors怎么办">如果不配置CORS怎么办？</h2>
<p>考虑我们的 Spring Boot 应用程序尚未配置为 CORS 支持。如果我们尝试访问在端口 4200 上运行的 Angular 应用程序，我们会在开发人员控制台上看到以下错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Access to XMLHttpRequest at http://localhost:8091 
</span></span><span class="line"><span class="cl">from origin http://localhost:4200 has been blocked by CORS policy: 
</span></span><span class="line"><span class="cl">No &#39;Access-Control-Allow-Origin` header is present on the requested 
</span></span><span class="line"><span class="cl">resource
</span></span></code></pre></div><p><img loading="lazy" src="https://reflectoring.io/images/posts/configuring-cors-with-spring/cors-error_hu6933403b7320f6f893a41150b2491685_149954_1882x0_resize_q90_box.JPG" alt="settings"  />
</p>
<p>这是因为，即使两个应用程序均由 <code>localhost</code> 提供服务，但<a href="https://reflectoring.io/complete-guide-to-cors/#same-origin-vs-cross-origin">由于端口不同</a>，它们不会被视为同一来源。</p>
<h2 id="在-spring-web-mvc-应用程序中配置-cors">在 Spring Web MVC 应用程序中配置 CORS</h2>
<p>使用 Spring Initializr 创建的初始设置包含所有必需的 CORS 依赖项。无需添加外部依赖项。请参阅此<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring/SpringWebApplication">示例 Spring Web 应用程序项目</a>。</p>
<h3 id="在类级别定义-crossorigin">在类级别定义 <code>@CrossOrigin</code></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">maxAge</span> <span class="o">=</span> <span class="n">3600</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;cors-library/managed/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LibraryController</span> <span class="o">{}</span>
</span></span></code></pre></div><p>由于我们已经定义了 <code>@CrossOrigin</code> ：</p>
<ul>
<li>控制器中的所有 <code>@RequestMapping</code> 方法（以及使用速记注释 <code>@GetMapping</code> 、 <code>@PostMapping</code> 等的方法）都将接受跨域请求。</li>
<li>自 <code>maxAge = 3600</code> 起，所有飞行前响应将被缓存 60 分钟。</li>
</ul>
<h3 id="在方法级别定义-crossorigin">在方法级别定义 <code>@CrossOrigin</code></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">&#34;http://localhost:4200&#34;</span><span class="o">,</span> <span class="n">allowedHeaders</span> <span class="o">=</span> <span class="s">&#34;Requestor-Type&#34;</span><span class="o">,</span> <span class="n">exposedHeaders</span> <span class="o">=</span> <span class="s">&#34;X-Get-Header&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;</span> <span class="nf">getBooks</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">headers</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">,</span> <span class="s">&#34;ExampleHeader&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">headers</span><span class="o">(</span><span class="n">headers</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">libraryService</span><span class="o">.</span><span class="na">getAllBooks</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这将产生以下效果：</p>
<ul>
<li>
<p>仅接受来自来源 <code>http://localhost:4200</code> 的请求。</p>
</li>
<li>
<p>如果我们希望只接受某些标头，则可以在 <code>allowedHeaders</code> 属性中指定这些标头。如果浏览器未发送 <code>Requestor-Type</code> 标头，则不会处理该请求。</p>
</li>
<li>
<p>如果我们设置某些响应标头，为了让客户端应用程序能够使用它们，我们需要使用 <code>exposedHeaders</code> 属性显式设置要公开的响应标头列表。</p>
</li>
</ul>
<h3 id="类和方法级别的-crossorigin-组合">类和方法级别的 <code>@CrossOrigin</code> 组合</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">maxAge</span> <span class="o">=</span> <span class="n">3600</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;cors-library/managed/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LibraryController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LibraryController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LibraryService</span> <span class="n">libraryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">LibraryController</span><span class="o">(</span><span class="n">LibraryService</span> <span class="n">libraryService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">libraryService</span> <span class="o">=</span> <span class="n">libraryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">&#34;http://localhost:4200&#34;</span><span class="o">,</span> <span class="n">allowedHeaders</span> <span class="o">=</span> <span class="s">&#34;Requestor-Type&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;</span> <span class="nf">getBooks</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">headers</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">,</span> <span class="s">&#34;ExampleHeader&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">headers</span><span class="o">(</span><span class="n">headers</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">libraryService</span><span class="o">.</span><span class="na">getAllBooks</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>通过在类和方法级别定义注释，其组合属性将应用于方法，即（ <code>origins</code> 、 <code>allowedHeaders</code> 、``）</p>
</li>
<li>
<p>在上述所有情况下，我们可以使用 <code>@CrossOrigin</code> 定义全局 CORS cmaxAgeonconfiguration 和本地配置。对于接受多个值的属性，将应用全局值和本地值的组合（即它们被合并）。对于仅接受单个值的属性，本地值将优先于全局值。</p>
</li>
</ul>
<h3 id="全局启用-cors">全局启用 CORS</h3>
<p>我们可以定义一个适用于定义的所有资源的通用 CORS 配置，而不是分别向每个资源添加 CORS。</p>
<p>在这里，我们将使用 <code>WebMvcConfigurer</code> ，它是 Spring Web MVC 库的一部分</p>
<p>通过重写 <code>addCorsMapping()</code> 方法，我们将为 Spring Web MVC 处理的所有 URL 配置 CORS。</p>
<p>为了全局定义相同的配置（如前几节所述），我们将使用 <code>application.yml</code> 中定义的配置参数来创建一个 bean，如下定义。</p>
<p><code>application.yml</code> 中定义的属性（ <code>allowed-origins</code> 、 <code>allowed-methods</code> 、 <code>max-age</code> 、 <code>allowed-headers</code> 、 <code>exposed-headers</code> ) 是通过 <code>@ConfigurationProperties(prefix = &quot;web&quot;)</code> 映射到自定义类 Cors 的自定义属性</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cors</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">allowed-origins</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;http://localhost:4200&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">allowed-methods</span><span class="p">:</span><span class="w"> </span><span class="l">GET, POST, PATCH, PUT, DELETE, OPTIONS, HEAD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max-age</span><span class="p">:</span><span class="w"> </span><span class="m">3600</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">allowed-headers</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Requestor-Type&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">exposed-headers</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;X-Get-Header&#34;</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">WebMvcConfigurer</span> <span class="nf">corsMappingConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="k">new</span> <span class="n">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="n">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">           <span class="n">WebConfigProperties</span><span class="o">.</span><span class="na">Cors</span> <span class="n">cors</span> <span class="o">=</span> <span class="n">webConfigProperties</span><span class="o">.</span><span class="na">getCors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">           <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedOrigins</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedMethods</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getMaxAge</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="na">allowedHeaders</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedHeaders</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="na">exposedHeaders</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getExposedHeaders</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">       <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<h4 id="corsconfiguration-默认值"><code>CorsConfiguration</code> 默认值</h4>
<p>如果未显式定义一个或多个方法（ <code>allowedOrigins</code> 、 <code>allowedMethods</code> 、 <code>maxAge</code> 、 <code>allowedHeaders</code> 、 <code>exposedHeaders</code> ），则 <code>addMapping()</code> 返回一个 <code>CorsRegistration</code> 对象，该对象应用默认的 <code>CorsConfiguration</code> 。请参阅 Spring 库方法 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html#applyPermitDefaultValues--">CorsConfiguration.applyPermitDefaultValues()</a> 以了解应用的默认值。</p>
</blockquote>
<h2 id="在-spring-webflux-应用程序中配置-cors">在 Spring Webflux 应用程序中配置 CORS</h2>
<p>初始设置是使用 Spring Initializr 创建的，并使用 Spring Webflux、Spring Data R2DBC 和 H2 数据库。无需添加外部依赖项。请参阅<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring/SpringWebfluxApplication">此示例 Spring Webflux 项目</a>。</p>
<h3 id="使用-crossorigin-进行-spring-webflux-的-cors-配置">使用 <code>@CrossOrigin</code> 进行 Spring Webflux 的 CORS 配置</h3>
<p>与Spring MVC类似，在Spring Webflux中我们可以在类级别或方法级别定义 <code>@CrossOrigin</code> 。前面几节中描述的相同 <code>@CrossOrigin</code> 属性将适用。此外，当在类和方法中都定义了注释时，其组合属性将应用于方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">&#34;http://localhost:4200&#34;</span><span class="o">,</span> <span class="n">allowedHeaders</span> <span class="o">=</span> <span class="s">&#34;Requestor-Type&#34;</span><span class="o">,</span> <span class="n">exposedHeaders</span> <span class="o">=</span> <span class="s">&#34;X-Get-Header&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Mono</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;&gt;</span> <span class="nf">getBooks</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">headers</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">,</span> <span class="s">&#34;ExampleHeader&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">headers</span><span class="o">(</span><span class="n">headers</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">libraryService</span><span class="o">.</span><span class="na">getAllBooks</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="在-spring-webflux-中全局启用-cors-配置">在 Spring Webflux 中全局启用 CORS 配置</h3>
<p>要在 Spring Webflux 应用程序中全局定义 CORS，我们使用 <code>WebfluxConfigurer</code> 并覆盖 <code>addCorsMappings()</code> 。与 Spring MVC 类似，它使用带有默认值的 <code>CorsConfiguration</code> ，可以根据需要覆盖默认值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">WebFluxConfigurer</span> <span class="nf">corsMappingConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">WebFluxConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="n">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">WebConfigProperties</span><span class="o">.</span><span class="na">Cors</span> <span class="n">cors</span> <span class="o">=</span> <span class="n">webConfigProperties</span><span class="o">.</span><span class="na">getCors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedOrigins</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedMethods</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getMaxAge</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="na">allowedHeaders</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedHeaders</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="na">exposedHeaders</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getExposedHeaders</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="使用-webfilter-启用-cors">使用 <code>WebFilter</code> 启用 CORS</h3>
<p>Webflux 框架允许通过 <code>CorsWebFilter</code> 全局设置 CORS 配置。我们可以使用 <code>CorsConfiguration</code> 对象来设置所需的配置并注册要与过滤器一起使用的 <code>CorsConfigurationSource</code> 。</p>
<p>但是，默认情况下，过滤器中的 <code>CorsConfiguration</code> 不会将默认配置分配给端点！只能应用指定的配置。</p>
<p>另一种选择是显式调用 <code>CorsConfiguration.applyPermitDefaultValues()</code> 。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">CorsWebFilter</span> <span class="nf">corsWebFilter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">CorsConfiguration</span> <span class="n">corsConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CorsConfiguration</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;http://localhost:4200&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">corsConfig</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="n">3600L</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedHeader</span><span class="o">(</span><span class="s">&#34;Requestor-Type&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">corsConfig</span><span class="o">.</span><span class="na">addExposedHeader</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">UrlBasedCorsConfigurationSource</span> <span class="n">source</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">UrlBasedCorsConfigurationSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">source</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">,</span> <span class="n">corsConfig</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">CorsWebFilter</span><span class="o">(</span><span class="n">source</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="使用-spring-security-启用-cors">使用 Spring Security 启用 CORS</h2>
<p>如果 Spring Security 应用于 Spring 应用程序，则必须在 Spring Security 生效之前处理 CORS，因为预检请求不会包含 cookie，并且 Spring Security 将拒绝该请求，因为它将确定用户未经过身份验证。这里显示的示例将演示基本身份验证。</p>
<p>为了应用 Spring 安全性，我们将添加以下依赖 Maven：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>Gradle:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl">  <span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-security&#39;</span>
</span></span></code></pre></div><h3 id="spring-security-应用于-spring-web-mvc">Spring Security 应用于 Spring Web MVC</h3>
<p>Spring security 默认保护每个端点。但是，这会导致 CORS 错误，因为浏览器的 <code>OPTIONS</code> 预检请求将被阻止。要使 Spring Security 绕过预检请求，我们需要将 <code>http.cors()</code> 添加到 <code>HTTPSecurity</code> 对象，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="n">BasicAuthConfigProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BasicAuthConfigProperties</span> <span class="n">basicAuth</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityConfiguration</span><span class="o">(</span><span class="n">BasicAuthConfigProperties</span> <span class="n">basicAuth</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">basicAuth</span> <span class="o">=</span> <span class="n">basicAuth</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span><span class="o">.</span><span class="na">cors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>要在绕过预检请求后使用 Spring Security 设置额外的 CORS 配置，我们可以使用 <code>@CrossOrigin</code> 注释来配置 CORS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">maxAge</span> <span class="o">=</span> <span class="n">3600</span><span class="o">,</span> <span class="n">allowCredentials</span> <span class="o">=</span> <span class="s">&#34;true&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;cors-library/managed/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LibraryController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LibraryController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LibraryService</span> <span class="n">libraryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">LibraryController</span><span class="o">(</span><span class="n">LibraryService</span> <span class="n">libraryService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">libraryService</span> <span class="o">=</span> <span class="n">libraryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">&#34;http://localhost:4200&#34;</span><span class="o">,</span> <span class="n">allowedHeaders</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;Requestor-Type&#34;</span><span class="o">,</span> <span class="s">&#34;Authorization&#34;</span><span class="o">},</span> <span class="n">exposedHeaders</span> <span class="o">=</span> <span class="s">&#34;X-Get-Header&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;</span> <span class="nf">getBooks</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">headers</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">,</span> <span class="s">&#34;ExampleHeader&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">headers</span><span class="o">(</span><span class="n">headers</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">libraryService</span><span class="o">.</span><span class="na">getAllBooks</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>或者，我们可以创建一个 <code>CorsConfigurationSource</code> bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="n">CorsConfigurationSource</span> <span class="nf">corsConfigurationSource</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">CorsConfiguration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CorsConfiguration</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;http://localhost:4200&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedMethods</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;GET&#34;</span><span class="o">,</span><span class="s">&#34;POST&#34;</span><span class="o">,</span><span class="s">&#34;PATCH&#34;</span><span class="o">,</span> <span class="s">&#34;PUT&#34;</span><span class="o">,</span> <span class="s">&#34;DELETE&#34;</span><span class="o">,</span> <span class="s">&#34;OPTIONS&#34;</span><span class="o">,</span> <span class="s">&#34;HEAD&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowCredentials</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedHeaders</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;Authorization&#34;</span><span class="o">,</span> <span class="s">&#34;Requestor-Type&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setExposedHeaders</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="n">3600L</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">UrlBasedCorsConfigurationSource</span> <span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UrlBasedCorsConfigurationSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">source</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">source</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="spring-security-应用于-spring-webflux">Spring Security 应用于 Spring Webflux</h3>
<p>对于 Webflux，尽管使用 Spring Security，将 CORS 配置应用于传入请求的最首选方法是使用 <code>CorsWebFilter</code> 。我们可以禁用 CORS 与 Spring security 的集成，而是通过提供 <code>CorsConfigurationSource</code> 与 <code>CorsWebFilter</code> 集成：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebFluxSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="n">BasicAuthConfigProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BasicAuthConfigProperties</span> <span class="n">basicAuth</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityConfiguration</span><span class="o">(</span><span class="n">BasicAuthConfigProperties</span> <span class="n">basicAuth</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">basicAuth</span> <span class="o">=</span> <span class="n">basicAuth</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityWebFilterChain</span> <span class="nf">securityWebFilterChain</span><span class="o">(</span><span class="n">ServerHttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span><span class="o">.</span><span class="na">cors</span><span class="o">(</span><span class="n">cors</span> <span class="o">-&gt;</span> <span class="n">cors</span><span class="o">.</span><span class="na">disable</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">securityMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">PathPatternParserServerWebExchangeMatcher</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizeExchange</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">anyExchange</span><span class="o">().</span><span class="na">authenticated</span><span class="o">().</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">httpBasic</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MapReactiveUserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserDetails</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">withDefaultPasswordEncoder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">username</span><span class="o">(</span><span class="n">basicAuth</span><span class="o">.</span><span class="na">getUsername</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="n">basicAuth</span><span class="o">.</span><span class="na">getPassword</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">roles</span><span class="o">(</span><span class="s">&#34;USER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">MapReactiveUserDetailsService</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CorsConfigurationSource</span> <span class="nf">corsConfiguration</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CorsConfiguration</span> <span class="n">corsConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CorsConfiguration</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">applyPermitDefaultValues</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowCredentials</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;GET&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;PATCH&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;POST&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;OPTIONS&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;http://localhost:4200&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowedHeaders</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;Authorization&#34;</span><span class="o">,</span> <span class="s">&#34;Requestor-Type&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setExposedHeaders</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">UrlBasedCorsConfigurationSource</span> <span class="n">source</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">                <span class="k">new</span> <span class="n">UrlBasedCorsConfigurationSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">source</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">,</span> <span class="n">corsConfig</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">source</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CorsWebFilter</span> <span class="nf">corsWebFilter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">CorsWebFilter</span><span class="o">(</span><span class="n">corsConfiguration</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="结论">结论</h2>
<p>简而言之，CORS 配置取决于多个因素：</p>
<ul>
<li>Spring Web / Spring Webflux</li>
<li>本地/全局 CORS 配置</li>
<li>是否使用 Spring Security</li>
</ul>
<p>根据框架，我们可以决定哪种方法效果最好并且最容易实现，这样我们就可以避免 CORS 错误。您可以使用 <a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring">GitHub 上的示例应用程序</a>。</p>
<p>原文链接：<a href="https://reflectoring.io/spring-cors/">https://reflectoring.io/spring-cors/</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
