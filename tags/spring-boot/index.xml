<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>spring boot on ChenSoul</title>
    <link>https://chensoul.github.io/tags/spring-boot/</link>
    <description>Recent content in spring boot on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 13 Oct 2023 07:00:00 +0800</lastBuildDate><atom:link href="https://chensoul.github.io/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[译]Spring Boot3和Spring6中的新特性</title>
      <link>https://chensoul.github.io/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</link>
      <pubDate>Fri, 13 Oct 2023 07:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</guid>
      <description>Spring Boot 3.0 于 2022 年 11 月正式发布，包含一些新功能和改进。这是继大约 4.5 年前发布 Spring Boot 2.0 后 Spring Boot 的第一个主要版本。它也是第一个支持 Spring Framework 6.0 的 Spring Boot GA 版本。作为开发人员，我们需要了解这些更新，才能顺利使用 Spring Boot。毫无疑问，新版本中最大的转变 …</description>
    </item>
    
    <item>
      <title>[译]SPRING BOOT JWT - 如何使用 SPRING SECURITY 和 JSON WEB 令牌保护您的 REST API</title>
      <link>https://chensoul.github.io/posts/2023/09/19/spring-security-jwt/</link>
      <pubDate>Tue, 19 Sep 2023 14:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/09/19/spring-security-jwt/</guid>
      <description>如果您快速搜索如何使用 JSON Web Tokens 在 Spring Boot 中保护 REST API，您会发现很多相同的结果。这些结果包含一种方法，该方法涉及编写自定义过滤器链并引入第三方库来编码和解码 JWT。
在看完这些令人费解且令人困惑的教程后，我说必须有一种更简单的方法来做到这一点。我做了任何直接接触 Spring Security 团队的人都会做的事情，我向他们寻求帮助。他们告诉 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security 与 JWT for REST API</title>
      <link>https://chensoul.github.io/posts/2023/09/19/spring-security-tutorial/</link>
      <pubDate>Tue, 19 Sep 2023 07:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/09/19/spring-security-tutorial/</guid>
      <description>免责声明：Spring Security 5+ 已发布 OAuth JWT 支持。建议使用最新版本的 OAuth 来支持 JWT，而不是使用自定义安全性或过滤器。
Spring 被认为是 Java 生态系统中值得信赖的框架，并且被广泛使用。将 Spring 称为框架不再有效，因为它更多的是涵盖各种框架的总括术语。其中一个框架是 Spring Security，它是一个功能强大且可定制的身份验证和授 …</description>
    </item>
    
    <item>
      <title>[译]Spring Boot项目如何实现JWT认证？</title>
      <link>https://chensoul.github.io/posts/2023/08/18/how-to-implement-jwt-authentication-in-spring-boot-project/</link>
      <pubDate>Fri, 18 Aug 2023 12:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/18/how-to-implement-jwt-authentication-in-spring-boot-project/</guid>
      <description>没有人可以否认这样一个事实：安全性是生产就绪应用程序的一项重要功能。尽管我们可以使用内存身份验证、JDBC 身份验证或通过 UserDetailsS​​ervice 来保护一个 Web 应用程序的安全。但是，当一个应用程序在内部使用其他应用程序的服务时，使用 Web 服务概念实现安全性就变得很重要。在这种情况下，我们使用具有特定有效期的令牌来保护我们的应用程序。此外，我们将学习“ …</description>
    </item>
    
    <item>
      <title>[译]没有WebSecurityConfigurerAdapter的Spring Security.md</title>
      <link>https://chensoul.github.io/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</link>
      <pubDate>Fri, 18 Aug 2023 11:30:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</guid>
      <description>在 Spring Security 模块的上下文中，WebSecurityConfigurerAdapter 是一个抽象类，根据 Spring 官方网站 2022 年 2 月 21 日发布的公告，该类已从 Spring Security 5.7.0-M2 中弃用。它通常用于扩展 configure() 方法由自定义配置子类实现。因此，它鼓励用户转向基于组件的安全配置。为了支持对这种新配置设计的更 …</description>
    </item>
    
    <item>
      <title>[译]如何在Spring Boot2中使用UserDetailsService实现安全性？</title>
      <link>https://chensoul.github.io/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</link>
      <pubDate>Fri, 18 Aug 2023 11:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</guid>
      <description>继续上一篇关于实现 Spring Security 的两种不同方法的文章，在本文中，我们将学习第三种方法“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现 Security？”。经过上一篇文章后，我希望我们都非常熟悉安全性的基础知识，甚至是 Spring Boot 应用程序中的安全性基础知识。这次我们将创建一个用户注册表并将用户及其角色保存到数据库中。
然后， …</description>
    </item>
    
    <item>
      <title>[译]如何在Spring Boot3中使用UserDetailsService实现安全性？</title>
      <link>https://chensoul.github.io/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</link>
      <pubDate>Fri, 18 Aug 2023 11:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</guid>
      <description>作为有关 Spring Security 的系列文章的继续，在本文中我们将学习“如何在 Spring Boot 3 中使用 UserDetailsService 实现 Spring Boot 中的安全性？”。经过前面的文章，我希望我们都非常熟悉安全性的基础知识，甚至 Spring Boot 应用程序中的安全性基础知识。 Spring Boot 3 发布后，我们将在这里实现“使用 Spring …</description>
    </item>
    
    <item>
      <title>[译]Spring Boot项目如何实现Security？</title>
      <link>https://chensoul.github.io/posts/2023/08/18/how-to-implement-security-in-spring-boot-project/</link>
      <pubDate>Fri, 18 Aug 2023 10:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/18/how-to-implement-security-in-spring-boot-project/</guid>
      <description>如今，几乎每个客户都要求在实时应用程序中实现强大的安全功能。安全功能对于保持机密性、完整性和可用性的需求是非常有效的。现实世界中有很多类型的安全性，但我们作为开发人员将重点关注应用程序/软件安全性。
此外，在应用程序安全方面，我们的工作基本上是确保两件事。首先，只有有效的用户才能访问该应用程序。其次，如果用户有效，他/她只能访问该应用程序中允许的数据/信息。我认为，没有什么可以解释它们，因为您必须 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security 和 Spring Boot 入门</title>
      <link>https://chensoul.github.io/posts/2023/08/16/spring-security/</link>
      <pubDate>Wed, 16 Aug 2023 14:40:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/16/spring-security/</guid>
      <description>Spring Security 是一个有助于保护企业应用程序安全的框架。通过与 Spring MVC、Spring Webflux 或 Spring Boot 集成，我们可以创建一个强大且高度可定制的身份验证和访问控制框架。在本文中，我们将解释核心概念并仔细研究 Spring Security 提供的默认配置及其工作原理。我们将进一步尝试自定义它们并分析它们对示例 Spring Boot 应用程序 …</description>
    </item>
    
    <item>
      <title>[译]为 Spring Boot 应用程序创建优化的 Docker 映像</title>
      <link>https://chensoul.github.io/posts/2023/08/16/spring-boot-docker/</link>
      <pubDate>Wed, 16 Aug 2023 14:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/16/spring-boot-docker/</guid>
      <description>容器已成为打包具有所有软件和操作系统依赖项的应用程序，然后将其传送到不同环境的首选方式。
本文着眼于容器化 Spring Boot 应用程序的不同方法：
使用 Docker 文件构建 Docker 镜像， 使用 Cloud-Native Buildpack 从源代码构建 OCI 映像， 通过使用分层工具将 JAR 的各个部分拆分为不同的层，在运行时优化映像。 示例代码 本文附有 GitHub 上的 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security：深入了解身份验证和授权</title>
      <link>https://chensoul.github.io/posts/2023/08/16/spring-security-authentication-and-authorization/</link>
      <pubDate>Wed, 16 Aug 2023 12:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/16/spring-security-authentication-and-authorization/</guid>
      <description>您可以使用本指南来了解 Spring Security 是什么以及其核心功能（如身份验证、授权或常见漏洞保护）如何工作。此外，还有全面的常见问题解答。
（编者注：大约 6500 字，您可能不想尝试在移动设备上阅读本文。将其添加为书签，稍后再回来。）
介绍 迟早每个人都需要为其项目添加安全性，在 Spring 生态系统中，您可以借助 Spring Security 库来实现这一点。
因此， …</description>
    </item>
    
    <item>
      <title>[译]深入了解Spring事务管理：@Transactional</title>
      <link>https://chensoul.github.io/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</link>
      <pubDate>Wed, 16 Aug 2023 12:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</guid>
      <description>您可以使用本指南来简单实用地了解 Spring 使用 @Transactional 注释进行事务管理的工作原理。
唯一的先决条件？您需要对 ACID 有一个粗略的了解，即什么是数据库事务以及为什么使用它们。此外，这里不讨论分布式事务或反应式事务，但就 Spring 而言，一般原则仍然适用。
介绍 在本指南中，您将了解 Spring 核心事务抽象框架的主要支柱（这是一个令人困惑的术语，不是吗？） - …</description>
    </item>
    
    <item>
      <title>[译]Spring Security - JWT</title>
      <link>https://chensoul.github.io/posts/2023/08/16/spring-security-with-jwt/</link>
      <pubDate>Wed, 16 Aug 2023 11:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/16/spring-security-with-jwt/</guid>
      <description>简介和概述 JSON Web Token 或 JWT（更常见的名称）是一种开放的互联网标准 (RFC 7519)，用于以紧凑的方式在各方之间安全地传输可信信息。令牌包含编码为 JSON 对象的声明，并使用私有密钥或公钥/私钥对进行数字签名。它们是独立且可验证的，因为它们经过数字签名。 JWT 可以进行签名和/或加密。
签名的令牌验证令牌中包含的声明的完整性，而加密的令牌则向其他方隐藏声明。
JWT …</description>
    </item>
    
    <item>
      <title>[译]Spring Security - OAuth2</title>
      <link>https://chensoul.github.io/posts/2023/08/16/spring-security-with-oauth2/</link>
      <pubDate>Wed, 16 Aug 2023 10:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/16/spring-security-with-oauth2/</guid>
      <description>OAuth 2.0 基础知识 OAuth 2.0 由 IETF OAuth 工作组开发并于 2012 年 10 月发布。它作为一种开放授权协议，使第三方应用程序能够代表资源所有者对 HTTP 服务进行有限访问。它可以在不泄露用户身份或长期凭证的情况下做到这一点。第三方应用程序本身也可以代表其使用它。
OAuth 的工作原理包括将用户身份验证委托给托管用户帐户的服务，并授权第三方应用程序访问用户的帐 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security - 表单登录、记住我和注销</title>
      <link>https://chensoul.github.io/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</link>
      <pubDate>Wed, 16 Aug 2023 09:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</guid>
      <description>内容 简介和概述 入门（实用指南） 简介和概述 Spring Security 附带了大量内置功能和工具，为我们提供方便。在这个例子中，我们将讨论其中三个有趣且有用的功能 -
表单登录 记住账号 登出 表单登录 基于表单的登录是 Spring Security 提供支持的一种用户名/密码身份验证形式。这是通过 Html 表单提供的。
每当用户请求受保护的资源时，Spring Security 都会 …</description>
    </item>
    
    <item>
      <title>[译]Spring Security - 使用数据库表单登录</title>
      <link>https://chensoul.github.io/posts/2023/08/16/spring-security-form-login-with-database/</link>
      <pubDate>Wed, 16 Aug 2023 08:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/16/spring-security-form-login-with-database/</guid>
      <description>内容 简介和概述 Spring Security 的基本组件 AuthenticationFilter 认证过滤器 AuthenticationManager 认证管理器 AuthenticationProvider 认证提供者 UserDetailsService 用户详情服务 PasswordEncoder 密码编码器 Spring 安全上下文 表单登录 使用数据库登录 登录尝试限制 入门（实 …</description>
    </item>
    
    <item>
      <title>Spring Security和OAuth2发展过程</title>
      <link>https://chensoul.github.io/posts/2023/08/15/spring-security-oauth2-history/</link>
      <pubDate>Tue, 15 Aug 2023 08:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/08/15/spring-security-oauth2-history/</guid>
      <description>Spring Security 的发展过程 Spring Security 是一个功能强大且广泛使用的安全框架，为企业级应用程序提供了全面的安全性。Spring Security 最初是 Acegi Security 项目的一部分，于 2004 年发布，现在已经成为 Spring 生态系统的核心组件。 Spring Security 的发展过程可以分为三个阶段：
第一阶段：Spring …</description>
    </item>
    
    <item>
      <title>[译]Spring Boot授权服务器 - 使用 Java 的资源服务器和客户端凭证示例</title>
      <link>https://chensoul.github.io/posts/2023/07/26/spring-boot-authorization-server/</link>
      <pubDate>Wed, 26 Jul 2023 14:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/07/26/spring-boot-authorization-server/</guid>
      <description>概述 在本文中，我们将创建一个授权服务器，为任何客户端生成 access_token。这称为 OAuth2 的 client_credentials 流程。它主要用于服务间通信。
我们将使用 spring boot oauth2 授权服务器依赖项来创建身份验证服务器。我们还将创建一个资源服务器和客户端来对其进行端到端测试。
Spring 授权服务器 我们首先创建授权服务器。
依赖项： 让我们将以下 …</description>
    </item>
    
    <item>
      <title>[译]Spring Boot异常处理完整指南</title>
      <link>https://chensoul.github.io/posts/2023/07/26/spring-boot-exception-handling/</link>
      <pubDate>Wed, 26 Jul 2023 08:30:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/07/26/spring-boot-exception-handling/</guid>
      <description>处理异常是构建健壮应用程序的重要部分。 Spring Boot 提供了不止一种方法。
本文将探讨这些方法，并提供一些关于何时某种给定方法可能优于另一种方法的指导。
示例代码 本文附有 GitHub 上的工作代码示例。
介绍 Spring Boot 为我们提供了处理异常的工具，而不仅仅是简单的“try-catch”块。为了使用这些工具，我们应用了一些注释，使我们能够将异常处理视为横切关注点： …</description>
    </item>
    
    <item>
      <title>[译]使用 Spring 的 Null-Safety 注解保护您的代码免受 NullPointerExceptions 的影响</title>
      <link>https://chensoul.github.io/posts/2023/07/26/spring-boot-null-safety-annotations/</link>
      <pubDate>Wed, 26 Jul 2023 08:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/07/26/spring-boot-null-safety-annotations/</guid>
      <description>NullPointerExceptions （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。
我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添加了适当的检查，以保证对象引用不能为空，或者毕竟在对象为空时采取可能的安全措施。
由于 NullPointerException 是一个运行时异常，因此在代码编译过程中很难找出这种情况。 Java 的类型系 …</description>
    </item>
    
    <item>
      <title>[译]使用 Spring Boot 和 Spring Security 配置 CORS</title>
      <link>https://chensoul.github.io/posts/2023/07/26/spring-cors/</link>
      <pubDate>Wed, 26 Jul 2023 07:20:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/07/26/spring-cors/</guid>
      <description>跨源资源共享 (CORS) 是一种基于 HTTP 标头的机制，允许服务器显式将某些源列入白名单，并帮助绕过同源策略。
这是必需的，因为浏览器默认应用同源策略以确保安全。通过在 Web 应用程序中实施 CORS，网页可以请求额外的资源并从其他域加载到浏览器中。
本文将重点介绍在基于 Spring 的应用程序中实现 CORS 的各种方式。要详细了解 CORS 的工作原理，请参阅这篇优秀的介绍性文章。
 …</description>
    </item>
    
    <item>
      <title>[译]在 Spring 中实现 OAuth2：使用范围（第 2 部分）</title>
      <link>https://chensoul.github.io/posts/2023/07/26/using-oauth2-in-spring-scopes/</link>
      <pubDate>Wed, 26 Jul 2023 07:05:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/07/26/using-oauth2-in-spring-scopes/</guid>
      <description>我们在上一篇文章中了解了基本的 OAuth2 概念以及如何在 Spring 中实现和执行不同的授权。在这篇文章中，我们将介绍 OAuth2 的另一个重要概念：范围。
OAuth 范围 保护对应用程序的访问通常分两个步骤进行：身份验证和授权。要理解这两个概念，假设您在绝密政府大楼工作。在开始之前，你会得到一张卡片，可以让你进入建筑物。 OAuth 令牌可以看作是允许您访问的卡片。
一旦你进去，你决定 …</description>
    </item>
    
    <item>
      <title>[译]在 Spring 中实现 OAuth2：第 1 部分</title>
      <link>https://chensoul.github.io/posts/2023/07/26/using-oauth2-in-spring/</link>
      <pubDate>Wed, 26 Jul 2023 07:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/07/26/using-oauth2-in-spring/</guid>
      <description>OAuth2 是一组规范，主要提供对 Rest API 的安全访问的方法。 OAuth 的主要目的是允许通过使用令牌来执行身份验证和授权，而不必为每个操作提供凭据。由于本文的重点是实现，并且为了不重新发明轮子，可以查看 OAuth RFC 或维基百科以获取更多理论背景。在这篇文章中，我们将深入探讨 Spring 中的 OAuth2 实现以及如何使用不同的授权类型，但在此之前值得提供一些重要概念的简 …</description>
    </item>
    
    <item>
      <title>[译]使用Spring Boot2和Spring Security 5以及JDBC令牌存储进行Oauth2集中授权</title>
      <link>https://chensoul.github.io/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</link>
      <pubDate>Fri, 14 Jul 2023 09:00:00 +0800</pubDate>
      
      <guid>https://chensoul.github.io/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</guid>
      <description>在这篇文章中，我们将了解如何使用 Spring Boot 2 和 Spring Security 5 OAuth2 来实现集中授权的授权服务器以及如何通过 GUI 对其进行管理，还将提供资源服务器演示以及 github 下的整个项目。
很多示例涵盖了基于早期版本的 Spring boot 2 和 Spring Security 5 使用内存令牌实现 Oauth2，因此想法是使用 MySql 数据库 …</description>
    </item>
    
  </channel>
</rss>
