<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring on ChenSoul</title>
    <link>https://blog.chensoul.cc/tags/spring/</link>
    <description>Recent content in Spring on ChenSoul</description>
    <generator>Hugo -- 0.134.3</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 09 May 2024 00:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>All things about Spring Modulith</title>
      <link>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-spring-modulith/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-spring-modulith/</guid>
      <description>&lt;p&gt;VMware 推出了一个实验性的项目&lt;a href=&#34;https://spring.io/projects/spring-modulith&#34; target=&#34;_blank&#34;&gt;Spring Modulith&lt;/a&gt;，以便于通过模块和事件更好地组织 Spring Boot 3 应用。该项目引入了新的类和注解，但并不会生成代码。它的模块没有使用 Java Platform Module System（JPMS），而是映射到了普通的 Java 包。模块有 API，但是 Spring Modulith 鼓励使用 Spring 应用事件作为“主要的交互方式”。这些事件可以自动持久化到事件日志中。Spring Modulith 还简化了模块和事件的测试。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]Spring Events</title>
      <link>https://blog.chensoul.cc/posts/2023/08/25/spring-events/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/08/25/spring-events/</guid>
      <description>&lt;h2 id=&#34;1-概述&#34;&gt;1. 概述&lt;/h2&gt;
&lt;p&gt;在本教程中，我们将讨论如何在 Spring 中使用事件。&lt;/p&gt;
&lt;p&gt;事件是框架中最容易被忽视的功能之一，但也是最有用的功能之一。与 Spring 中的许多其他功能一样，事件发布是 &lt;code&gt;ApplicationContext&lt;/code&gt; 提供的功能之一。&lt;/p&gt;
&lt;p&gt;有一些简单的准则需要遵循：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果我们使用 Spring Framework 4.2 之前的版本，事件类应该扩展 &lt;code&gt;ApplicationEvent&lt;/code&gt;。从 4.2 版本开始，事件类不再需要扩展 ApplicationEvent 类。&lt;/li&gt;
&lt;li&gt;发布者应该注入一个 &lt;code&gt;ApplicationEventPublisher&lt;/code&gt; 对象。&lt;/li&gt;
&lt;li&gt;监听器应该实现 &lt;code&gt;ApplicationListener&lt;/code&gt; 接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-自定义事件&#34;&gt;2. 自定义事件&lt;/h2&gt;
&lt;p&gt;Spring 允许我们创建和发布默认情况下同步的自定义事件。这有一些优点，例如侦听器能够参与发布者的事务上下文。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[译]使用 Spring 的 Null-Safety 注解保护您的代码免受 NullPointerExceptions 的影响</title>
      <link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</guid>
      <description>&lt;p&gt;&lt;code&gt;NullPointerExceptions&lt;/code&gt; （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。&lt;/p&gt;
&lt;p&gt;我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添加了适当的检查，以保证对象引用不能为空，或者毕竟在对象为空时采取可能的安全措施。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
