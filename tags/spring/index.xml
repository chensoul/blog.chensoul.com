<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>spring on ChenSoul</title>
    <link>https://blog.chensoul.com/tags/spring/</link>
    <description>Recent content in spring on ChenSoul</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 15 Aug 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.com/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Security和OAuth2发展过程</title>
      <link>https://blog.chensoul.com/posts/2023/08/15/spring-security-oauth2-history/</link>
      <pubDate>Tue, 15 Aug 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/08/15/spring-security-oauth2-history/</guid>
      <description>Spring Security的发展过程 Spring Security 是一个功能强大且广泛使用的安全框架，为企业级应用程序提供了全面的安全性。Spring Security 最初是 Acegi Security 项目的一部分</description>
      <content:encoded><![CDATA[<h2 id="spring-security的发展过程">Spring Security的发展过程</h2>
<p>Spring Security 是一个功能强大且广泛使用的安全框架，为企业级应用程序提供了全面的安全性。Spring Security 最初是 Acegi Security 项目的一部分，于2004年发布，现在已经成为 Spring 生态系统的核心组件。 Spring Security 的发展过程可以分为三个阶段：</p>
<p>第一阶段：Spring Security起源于一个名为Acegi Security的开源项目，初期重点实现了Spring应用的身份认证和授权服务功能。2003年，Acegi Security作为一个孵化项目被捐献给Spring社区。2004年，正式作为Spring框架的核心组件之一Absorbed进Spring。并更名为Spring Security。Spring Security 1.0 版本 Spring Security 1.0 版本发布于 2004 年。它提供了最基本的安全功能，包括身份验证和授权。身份验证是验证用户是否是他们所声称的人的过程。授权是确定用户是否有权访问特定资源的过程。 Spring Security 1.0 版本使用了以下技术来实现身份验证和授权：</p>
<ul>
<li>表单身份验证：表单身份验证是通过用户提交表单来验证用户身份的过程。</li>
<li>基于角色的访问控制 (RBAC)：RBAC 是一种授权模型，它将用户分配到角色，然后这些角色被授予对特定资源的访问权限。</li>
</ul>
<p>第二阶段：Spring Security 2.0 版本 Spring Security 2.0 版本发布于 2006 年。它提供了更多的安全功能，包括加密和会话管理。加密是将数据转换成无法被他人理解的形式的过程。会话管理是跟踪用户会话的状态的过程。 Spring Security 2.0 版本使用了以下技术来实现加密和会话管理：</p>
<ul>
<li>安全套接字层 (SSL)：SSL 是一种加密协议，它可以保护数据在传输过程中不被窃听。</li>
<li>会话管理：Spring Security 提供了自己的会话管理实现，它可以跟踪用户会话的状态。</li>
</ul>
<p>第三阶段：Spring Security 3.0 版本 Spring Security 3.0 版本发布于 2008 年。它是一个重大的版本更新，它提供了许多新的安全功能，包括 OAuth、SAML 和 OpenID。 OAuth 是一种授权框架，它允许第三方应用程序访问用户的资源。SAML 是一种单点登录 (SSO) 协议，它允许用户在一个地方登录，然后访问多个网站。OpenID 是一种开放的身份验证协议，它允许用户使用他们选择的身份提供商来验证他们的身份。 Spring Security 3.0 版本使用了以下技术来实现 OAuth、SAML 和 OpenID：</p>
<ul>
<li>
<p>OAuth：Spring Security 提供了自己的 OAuth 实现，它可以让你轻松地在你的应用程序中使用 OAuth。</p>
</li>
<li>
<p>SAML：Spring Security 提供了自己的 SAML 实现，它可以让你轻松地在你的应用程序中使用 SAML。</p>
</li>
<li>
<p>OpenID：Spring Security 提供了自己的 OpenID 实现，它可以让你轻松地在你的应用程序中使用 OpenID。</p>
</li>
</ul>
<p>以下是 Spring Security 的详细的发展过程和版本变化：</p>
<ol>
<li>
<p>Acegi Security：Acegi Security 是 Spring Security 的前身，最初由 Ben Alex 创建并于2004年发布。Acegi Security 提供了一组基于 Spring 的安全性功能，用于保护 Web 应用程序、Web 服务和基于 Spring 的应用程序。</p>
</li>
<li>
<p>Spring Security 2：Spring Security 2 是 Acegi Security 的继任者，于2006年发布。Spring Security 2 提供了一些新的功能和改进，例如对 OpenID、LDAP 和 CAS 的支持，以及更好的集成和配置选项。</p>
</li>
<li>
<p>Spring Security 3：Spring Security 3 于2009年发布，是 Spring Security 的一个重大更新。Spring Security 3 提供了更多的安全功能和改进，例如对 RESTful Web 服务的支持、基于注解的安全性、更好的 CSRF 防护、更好的密码存储和认证管理等。</p>
</li>
<li>
<p>Spring Security 4：Spring Security 4 于2015年发布，带来了一些新的功能和改进，例如对 OAuth2、JWT 和 Spring Boot 的支持、更好的 SSO 和多因素认证等。</p>
</li>
<li>
<p>Spring Security 5：Spring Security 5 于2017年发布，是一个重大的更新，带来了一些新的功能和改进，例如对 WebFlux 和 Reactive Spring 的支持、更好的 OAuth2 和 OpenID Connect 的支持、更好的密码编码和认证管理等。</p>
</li>
<li>
<p>Spring Security 5.1：Spring Security 5.1 发布于 2018 年，主要提供了对 Spring Boot 2.1 的支持和一些新的功能，如 Kotlin DSL、OAuth2 支持的私有证书、JWT 生成器等。</p>
</li>
<li>
<p>Spring Security 5.2：Spring Security 5.2 发布于 2019 年，带来了许多改进和新特性，包括对 Spring Cloud Gateway 和 Spring MVC 的 WebFlux 支持、OAuth2 和 OpenID Connect 的改进、更好的密码管理和认证、更好的跨域资源共享（CORS）支持等。</p>
</li>
<li>
<p>Spring Security 5.3：Spring Security 5.3 发布于 2020 年，主要提供了更好的 WebFlux 和 RSocket 支持、更好的 OAuth2 支持、更好的测试和性能、更好的 Kotlin 支持、更好的 JUnit 5 支持等。</p>
</li>
<li>
<p>Spring Security 5.4：Spring Security 5.4 发布于 2021 年，带来了一些新的功能和改进，例如对 Spring Boot 2.4 的支持、更好的 JWT 和 OAuth2 支持、更好的密码编码、更好的 WebFlux 和 RSocket 支持、更好的测试和性能等。</p>
</li>
<li>
<p>Spring Security 5.5：是当前最新的版本，于2022年发布。Spring Security 5.5 带来了一些新的功能和改进，包括对 Spring Framework 6 和 Java 17 的支持、更好的密码编码和认证管理、更好的 OAuth2 和 OpenID Connect 支持、更好的 WebFlux 和 RSocket 支持、更好的测试和性能等。</p>
<p>除了不断改进和增强现有功能之外，Spring Security 还增加了对新的安全威胁的防御和支持，例如 CSRF、XSS、CSP 等。此外，Spring Security 还提供了许多有用的扩展和插件，例如 Spring Security OAuth、Spring Security SAML、Spring Security Kerberos 等，以满足不同的安全需求。</p>
</li>
</ol>
<h2 id="spring-security-oauth2-发展">Spring Security OAuth2 发展</h2>
<p>Spring Security OAuth2 是一个用于构建安全的 OAuth2-based 网络应用的框架，它是 Spring Security 的一部分。下面是 Spring Security OAuth2 的发展过程：</p>
<h3 id="1-spring-security-oauth2-v1x--v20">1. Spring Security OAuth2 V1.x – V2.0</h3>
<p>最初的几个版本是为了构建一个安全的 OAuth2-based 网络应用。核心的功能包括：</p>
<ul>
<li>支持 OAuth2 协议的四种授权方式：授权码（authorization code）、隐式授权（implicit）、密码授权（resource owner password credentials）和客户端凭据（client credentials）</li>
<li>提供了一个简单易用的 API 用于构建 OAuth2 服务器和客户端</li>
<li>支持 JWT（JSON Web Tokens）</li>
<li>提供了详细的文档和示例代码</li>
</ul>
<h3 id="2-spring-security-oauth2-v21">2. Spring Security OAuth2 V2.1</h3>
<p>在 2.1 版本中，Spring Security OAuth2 进行了一系列的改进和扩展，包括：</p>
<ul>
<li>支持 OpenID Connect 1.0</li>
<li>支持 Token Introspection Endpoint</li>
<li>更好的支持 JWT，包括 JWS（JSON Web Signatures）和 JWE（JSON Web Encryption）</li>
</ul>
<h3 id="3-spring-security-50-oauth2-login-and-oauth2-client">3. Spring Security 5.0 OAuth2 Login and OAuth2 Client</h3>
<p>在 Spring Security 5.0 中，Spring Security OAuth2 的部分功能被合并到了 Spring Security 5.0 中，提供了 OAuth2 登录和客户端支持。</p>
<h3 id="4-spring-security-51-oauth2-resource-server">4. Spring Security 5.1 OAuth2 Resource Server</h3>
<p>在 Spring Security 5.1 中，Spring Security OAuth2 的资源服务器功能被合并到了 Spring Security 中。</p>
<h3 id="5-spring-security-52-oauth2-authorization-server">5. Spring Security 5.2 OAuth2 Authorization Server</h3>
<p>在 Spring Security 5.2 中，Spring Security OAuth2 的授权服务器功能被合并到了 Spring Security 中。这是 Spring Security OAuth2 的最后一个独立版本。</p>
<h3 id="6-spring-authorization-server">6. Spring Authorization Server</h3>
<p>在 2020 年 4 月，Spring 宣布了一个新的项目——Spring Authorization Server，该项目旨在提供一个用于实现 OAuth 2.1 授权服务器的基础。</p>
<h3 id="7-spring-security-53-and-beyond">7. Spring Security 5.3 and beyond</h3>
<p>在 Spring Security 5.3 和之后的版本中，Spring Security OAuth2 的所有功能都被合并到了 Spring Security 中，而 Spring Security OAuth2 作为一个独立的项目已经停止开发。</p>
<h2 id="spring-boot和spring-oauth2版本关系">Spring Boot和Spring OAuth2版本关系</h2>
<p>Spring Boot和Spring OAuth2是可以配合使用的，主要注意版本匹配即可。</p>
<p>Spring Boot使用了特定版本的Spring OAuth2作为依赖。所以使用对应的Spring Boot版本，就会自动获取匹配的Spring OAuth2版本。</p>
<p>举几个版本的例子：</p>
<ul>
<li>Spring Boot 1.5.x 使用 Spring OAuth2 2.0.x</li>
<li>Spring Boot 2.0.x 使用 Spring OAuth2 2.0.x</li>
<li>Spring Boot 2.1.x 使用 Spring OAuth2 2.1.x</li>
<li>Spring Boot 2.2.x 使用 Spring OAuth2 2.2.x</li>
<li>Spring Boot 2.3.x 使用 Spring OAuth2 2.3.x</li>
</ul>
<p>所以使用Spring Boot时，不需要额外指定Spring OAuth2的版本，只需要选择匹配的Spring Boot版本即可。</p>
<p>在配置和使用Spring OAuth2时，只需要参考Spring OAuth2的文档即可，不需要特别关注其版本。Spring Boot会负责管理版本匹配。</p>
<p>此外，从Spring Boot 1.5开始，Spring Security已经集成了OAuth2的实现，可以直接使用Spring Security来实现OAuth2，无需引入Spring OAuth项目。</p>
<p>总之，Spring Boot大大简化了Spring OAuth2的使用，只需要关注Spring Boot版本即可自动获取正确的Spring OAuth2版本。</p>
<h2 id="spring-cloud和spring-oauth2版本关系">Spring Cloud和Spring OAuth2版本关系</h2>
<p>Spring Cloud和Spring OAuth2版本之间没有固定的对应关系，但通常来说建议符合以下情况：</p>
<ul>
<li>Spring Cloud版本越新，内置的Spring OAuth支持也会更稳定和完善。</li>
<li>Spring Cloud Hoxton/Greenwich等主流版本，内置的Spring OAuth支持正常使用Spring Security OAuth2版本2.x。</li>
<li>Spring Cloud Edgware及更早版本，内置的Spring OAuth支持建议使用Spring Security OAuth2版本1.x。</li>
<li>即使Spring Cloud版本和Spring Security OAuth版本不完全匹配，也无大碍，但功能和兼容性会受一定影响。</li>
</ul>
<p>所以一般来说：</p>
<ul>
<li>Spring Cloud Finch/ Greenwich等最新版本，建议使用Spring Security OAuth2版本2.3.x及以上。</li>
<li>Spring Cloud Edgware到Hoxton，建议使用Spring Security OAuth2版本1.5.x到2.3.x都可以。</li>
<li>Spring Cloud版本比较早，如Dalston以下，建议使用Spring Security OAuth2版本1.0.x到1.5.x。</li>
</ul>
<p>但不是说版本一定要完全匹配，主要看自己需要用到的Spring OAuth功能是否得到支持。选择版本时优先考虑Spring Cloud版本的内置支持程度。此外，也可以根据项目其他依赖选择一个相对稳定的Spring Security OAuth版本。</p>
<h2 id="spring-cloud-security">Spring Cloud Security</h2>
<p>Spring Cloud Security提供了一种集成化的方式来实现微服务应用的安全功能。主要有以下几点：</p>
<ol>
<li>身份认证(Authentication)</li>
</ol>
<p>Spring Cloud Security支持常见的认证方式，比如基于OAuth2.0的认证协议。可以实现集中式的认证管理，登入后获取访问令牌并在各个微服务之间传递。</p>
<ol>
<li>授权(Authorization)</li>
</ol>
<p>支持基于RBAC和ABAC等授权模型。可以实现集中式的授权管理，给不同用户或组分配不同的访问权限。</p>
<ol>
<li>安全终端(Security Endpoints)</li>
</ol>
<p>提供了安全终端的实现，比如/oauth/token令牌访问端点、/userinfo用户信息端点等。</p>
<ol>
<li>加密通信(Encryption)</li>
</ol>
<p>支持在微服务之间进行安全的HTTP通信，通过TLS/SSL加密数据传输和服务间调用。</p>
<ol>
<li>日志审计(Logging &amp; Auditing)</li>
</ol>
<p>支持收集和记录安全相关的审计日志，比如授权错误日志、登入/登出日志等，方便管理和监控。</p>
<ol>
<li>安全配置(Security Configuration)</li>
</ol>
<p>提供了弹性和易用的安全配置能力，如动态配置安全相关Bean等。</p>
<ol>
<li>集成支持(Integration Support)</li>
</ol>
<p>天然支持Spring Cloud和Springboot项目，无缝集成从认证到授权的全套安全功能。</p>
<p>所以总体来说，Spring Cloud Security提供了一种标准化和集成的方式来实现微服务环境下的安全需求。开发人员可以更便捷地利用其丰富的功能。</p>
<h2 id="示例">示例</h2>
<h3 id="spring-security如何实现json-web-token的功能">Spring Security如何实现JSON Web Token的功能？</h3>
<p>Spring Security可以通过如下方式实现JSON Web Token(JWT)的功能：</p>
<ol>
<li>导入spring-security-jwt依赖。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework.security<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-security-jwt<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>spring-boot-starter-security版本信息如下：</p>
<ul>
<li>spring-boot-starter-parent版本号：2.7.5</li>
<li>依赖的spring-boot-starter-security版本号：2.7.5</li>
</ul>
<p>spring-boot-starter-security是Spring Boot安全功能的启动器依赖，它会自动引入核心安全依赖：</p>
<ul>
<li>
<p>spring-security-core：Spring Security的核心模块，提供认证、授权、安全相关的主要接口和组件。</p>
</li>
<li>
<p>spring-security-config：提供了Spring Security的基础配置能力，包含过滤器链、密码编码器等。</p>
</li>
<li>
<p>spring-security-web：提供了web安全相关的支持，如过滤器、登录表单、注解等。</p>
</li>
<li>
<p>spring-security-crypto：包含密码哈希功能的实现类，用于对密码进行安全的加密存储。</p>
</li>
<li>
<p>spring-security-data：包含了支持JDBC和LDAP等后端数据源的安全组件。</p>
</li>
<li>
<p>spring-security-oauth2-client：提供了对OAuth2客户端功能的支持。主要提供以下OAuth2客户端相关功能：</p>
<ul>
<li>客户端注册和资源服务器配置：支持为客户端应用配置clientId、secret等信息。</li>
<li>客户端凭证获取：支持BasicAuth和密码模式获取client credentials。</li>
<li>访问令牌请求：实现客户端向授权服务器请求访问令牌的功能，支持password、refresh_token等grant类型。</li>
<li>令牌存储：提供TokenStore接口的实现，支持在会话或数据库中存储/获取访问令牌。</li>
<li>资源服务器访问：通过访问令牌来访问受保护的资源，支持从请求头或参数中提取令牌。</li>
<li>刷新令牌：实现使用refresh_token来刷新过期的访问令牌功能。</li>
<li>用户授权：提供类似@PreAuthorize注解来处理用户授权逻辑。</li>
<li>客户端详情：封装ClientDetails实现类，包含客户端注册信息。</li>
<li>默认令牌服务：DefaultTokenServices实现类管理令牌生命周期。</li>
<li>请求工厂：提供RestTemplate和Apache HTTP Components等请求客户端。</li>
</ul>
<p>spring-security-oauth2-client模块同时也提供部分支持其他授权类型：</p>
<ul>
<li>授权码模式(authorization_code)：主流模式，客户端通过auth code获取access token。</li>
<li>密码模式(password)：客户端直接提供用户名密码获取token，适合trusted客户端。</li>
<li>隐藏式授权模式(implicit)：客户端直接获取access token，不支持refresh。</li>
<li>客户端模式(client_credentials)：客户端以自身名义请求资源服务，适合机密客户端。</li>
<li>资主授权模式(owner)：类似密码模式但用户需确认通过用户界面。</li>
<li>运行时审批模式(approval_prompt)：用户每次访问都需确认授权。</li>
</ul>
<p>除了上述常见授权类型外，spring-security-oauth2-client还提供了对以下模式的选择性支持：</p>
<ul>
<li>断路器模式(urn:ietf:params:oauth:grant-type:device_code)</li>
<li>分阶段授权模式(urn:ietf:params:oauth:grant-type:stage)</li>
<li>令牌交换模式(urn:ietf:params:oauth:grant-type:token-exchange)</li>
</ul>
</li>
<li>
<p>spring-security-oauth2-core：OAuth2协议支持的核心部件。</p>
</li>
</ul>
<p>因此spring-boot-starter-security的版本始终保持与spring-boot-starters版本一致。</p>
<p>当前较为主流和稳定的spring-boot版本有：</p>
<ul>
<li>Spring Boot 2.7.x 最新版</li>
<li>Spring Boot 2.6.x</li>
<li>Spring Boot 2.5.x</li>
</ul>
<p>对应的spring-boot-starter-security版本如下：</p>
<ul>
<li>Spring Boot 2.7.x - spring-boot-starter-security 2.7.x</li>
<li>Spring Boot 2.6.x - spring-boot-starter-security 2.6.x</li>
<li>Spring Boot 2.5.x - spring-boot-starter-security 2.5.x</li>
</ul>
<p>所以在选择spring boot版本时，直接依赖spring-boot-starter-security而不用单独指定版本，就可以保证安全功能的版本一致性。</p>
<p>目前大多数场景下可以使用Spring Boot 2.6.x或者2.7.x作为选择，它们内置的spring-boot-starter-security版本都很成熟。</p>
<ol start="2">
<li>配置JwtToken enhancer来生成JWT令牌。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">JwtAccessTokenConverter</span> <span class="nf">jwtTokenEnhancer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">JwtAccessTokenConverter</span> <span class="n">converter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JwtAccessTokenConverter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">converter</span><span class="o">.</span><span class="na">setSigningKey</span><span class="o">(</span><span class="s">&#34;123456&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">converter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol start="3">
<li>定义JwtTokenStore来保存JWT令牌。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">TokenStore</span> <span class="nf">tokenStore</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">new</span> <span class="n">JwtTokenStore</span><span class="o">(</span><span class="n">jwtTokenEnhancer</span><span class="o">());</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ol start="4">
<li>在AuthorizationServerConfigurerAdapter配置类中设置tokenStore。</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">@Override
</span></span><span class="line"><span class="cl">public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
</span></span><span class="line"><span class="cl">  endpoints.tokenStore(tokenStore());  
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><ol start="5">
<li>
<p>客户端使用JWT令牌进行认证访问资源服务器。</p>
</li>
<li>
<p>资源服务器使用JwtTokenStore和JwtAccessTokenConverter校验JWT令牌的合法性。</p>
</li>
<li>
<p>解析JWTpayload获取用户信息，实现鉴权决策。</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">String username =  ((Jwt)authentication.getPrincipal()).getSubject();
</span></span></code></pre></div><p>完整代码，配置类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">JwtAccessTokenConverter</span> <span class="nf">accessTokenConverter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">JwtAccessTokenConverter</span> <span class="n">converter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JwtAccessTokenConverter</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">converter</span><span class="o">.</span><span class="na">setSigningKey</span><span class="o">(</span><span class="s">&#34;as123456dfsdf&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">converter</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">TokenStore</span> <span class="nf">tokenStore</span><span class="o">()</span> <span class="o">{</span>    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">JwtTokenStore</span><span class="o">(</span><span class="n">accessTokenConverter</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">http</span><span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">http</span> 
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">      <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/oauth/**&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Primary</span> 
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">DefaultTokenServices</span> <span class="nf">tokenServices</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">DefaultTokenServices</span> <span class="n">defaultTokenServices</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultTokenServices</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">defaultTokenServices</span><span class="o">.</span><span class="na">setTokenStore</span><span class="o">(</span><span class="n">tokenStore</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">defaultTokenServices</span><span class="o">.</span><span class="na">setSupportRefreshToken</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">defaultTokenServices</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>授权服务器配置，使用客户端模式配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationServerConfig</span> <span class="kd">extends</span> <span class="n">AuthorizationServerConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">TokenStore</span> <span class="n">tokenStore</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">ClientDetailsServiceConfigurer</span> <span class="n">clients</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">clients</span><span class="o">.</span><span class="na">inMemory</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;clientapp&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;$2a$10$6aQQyhlhol4M1KAncczPdu4zX7/TgvjpOU.sWzt7j5Xl6W/z5V4cC&#34;</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="err">，</span> <span class="s">&#34;refresh_token&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="err">，</span> <span class="s">&#34;write&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">accessTokenValiditySeconds</span><span class="o">(</span><span class="n">3600</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerEndpointsConfigurer</span> <span class="n">endpoints</span><span class="o">)</span> 
</span></span><span class="line"><span class="cl">      <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">endpoints</span><span class="o">.</span><span class="na">tokenStore</span><span class="o">(</span><span class="n">tokenStore</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">authenticationManager</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>主要配置：</p>
<ol>
<li>使用ClientDetailsServiceConfigurer配置客户端信息，如clientId、secret等</li>
<li>配置tokenStore</li>
<li>配置authenticationManager来获取用户信息</li>
</ol>
<p>这样就实现了基于客户端模式下的授权服务配置，客户端可以使用clientId/secret获取访问令牌而无需用户登录。</p>
<p>客户端访问示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST http://localhost:8080/oauth/token -d <span class="s2">&#34;grant_type=password&amp;username=user&amp;password=password&amp;client_id=clientapp&amp;client_secret=secret&#34;</span>
</span></span></code></pre></div><p>让客户端在后台获取访问令牌，资源服务再使用令牌验证授权。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]Spring Boot异常处理完整指南</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/spring-boot-exception-handling/</link>
      <pubDate>Wed, 26 Jul 2023 08:30:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/spring-boot-exception-handling/</guid>
      <description>处理异常是构建健壮应用程序的重要部分。 Spring Boot 提供了不止一种方法。 本文将探讨这些方法，并提供一些关于何时某种给定方法可能优于另一种方法的指导。 示</description>
      <content:encoded><![CDATA[<p>处理异常是构建健壮应用程序的重要部分。 Spring Boot 提供了不止一种方法。</p>
<p>本文将探讨这些方法，并提供一些关于何时某种给定方法可能优于另一种方法的指导。</p>
<h2 id="示例代码">示例代码</h2>
<p>本文附有 GitHub 上的工作<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/exception-handling">代码示例</a>。</p>
<h2 id="介绍">介绍</h2>
<p>Spring Boot 为我们提供了处理异常的工具，而不仅仅是简单的“try-catch”块。为了使用这些工具，我们应用了一些注释，使我们能够将异常处理视为横切关注点：</p>
<ul>
<li><a href="https://reflectoring.io/spring-boot-exception-handling/#responsestatus"><code>@ResponseStatus</code></a></li>
<li><a href="https://reflectoring.io/spring-boot-exception-handling/#exceptionhandler"><code>@ExceptionHandler</code></a></li>
<li><a href="https://reflectoring.io/spring-boot-exception-handling/#controlleradvice"><code>@ControllerAdvice</code></a></li>
</ul>
<p>在深入了解这些注释之前，我们将首先了解 Spring 如何处理 Web 控制器抛出的异常——这是捕获异常的最后一道防线。</p>
<p>我们还将查看 Spring Boot 提供的一些配置来修改默认行为。</p>
<p>我们将确定这样做时面临的挑战，然后我们将尝试使用这些注释来克服这些挑战。</p>
<h2 id="spring-boot默认的异常处理机制">Spring Boot默认的异常处理机制</h2>
<p>假设我们有一个名为 <code>ProductController</code> 的控制器，当未找到具有给定 id 的 <code>Product</code> 时，其 <code>getProduct(...)</code> 方法会抛出 <code>NoSuchElementFoundException</code> 运行时异常：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/product&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//constructor omitted for brevity...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl">  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Response</span> <span class="nf">getProduct</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">String</span> <span class="n">id</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// this method throws a &#34;NoSuchElementFoundException&#34; exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">productService</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果我们使用无效的 <code>id</code> 调用 <code>/product</code> API，服务将抛出 <code>NoSuchElementFoundException</code> 运行时异常，我们将得到以下响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2020-11-28T13:24:02.239+00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;Internal Server Error&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;/product/1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们可以看到，除了格式良好的错误响应之外，有效负载没有为我们提供任何有用的信息。甚至 <code>message</code> 字段也是空的，我们可能希望包含“未找到 id 1 的项目”之类的内容。</p>
<p>让我们从修复错误消息问题开始。</p>
<p>Spring Boot 提供了一些属性，我们可以使用它们添加异常消息、异常类，甚至堆栈跟踪作为响应负载的一部分：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">error</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">include-message</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">include-binding-errors</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">include-stacktrace</span><span class="p">:</span><span class="w"> </span><span class="l">on_trace_param</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">include-exception</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></div><p>在 <code>application.yml</code> 中使用这些 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#server-properties">Spring Boot 服务器属性</a>，我们可以在某种程度上改变错误响应。</p>
<p>现在，如果我们使用无效的 <code>id</code> 再次调用 <code>/product</code> API，我们将得到以下响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2020-11-29T09:42:12.287+00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;Internal Server Error&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;Item with id 1 not found&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;/product/1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></div><p>请注意，我们已将属性 <code>include-stacktrace</code> 设置为 <code>on_trace_param</code> ，这意味着仅当我们在 URL ( <code>?trace=true</code> ) 中包含 <code>trace</code> 参数时，我们才会在响应负载中获得堆栈跟踪：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2020-11-29T09:42:12.287+00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;Internal Server Error&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;Item with id 1 not found&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;trace&#34;</span><span class="p">:</span> <span class="s2">&#34;io.reflectoring.exception.exception.NoSuchElementFoundException: Item with id 1 not found...&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;/product/1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></div><p>我们可能希望将 <code>include-stacktrace</code> 标志的值保留为 <code>never</code> ，至少在生产中，因为它可能会揭示我们应用程序的内部工作原理。</p>
<p>继续！状态和错误消息 - <code>500</code> - 表明我们的服务器代码有问题，但实际上这是客户端错误，因为客户端提供了无效的 ID。</p>
<p>我们当前的状态代码没有正确反映这一点。不幸的是，这就是我们可以使用 <code>server.error</code> 配置属性的范围，因此我们必须查看 Spring Boot 提供的注释。</p>
<h2 id="responsestatus"><code>@ResponseStatus</code></h2>
<p>顾名思义， <code>@ResponseStatus</code> 允许我们修改响应的 HTTP 状态。它可以应用在以下地方：</p>
<ul>
<li>关于异常类本身</li>
<li>以及方法上的 <code>@ExceptionHandler</code> 注释</li>
<li>以及类上的 <code>@ControllerAdvice</code> 注释</li>
</ul>
<p>在本节中，我们将仅讨论第一种情况。</p>
<p>让我们回到当前的问题，即我们的错误响应总是给我们 HTTP 状态 500，而不是更具描述性的状态代码。</p>
<p>为了解决这个问题，我们可以用 <code>@ResponseStatus</code> 注释我们的 Exception 类，并在其 <code>value</code> 属性中传入所需的 HTTP 响应状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoSuchElementFoundException</span> <span class="kd">extends</span> <span class="n">RuntimeException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果我们使用无效 ID 调用控制器，此更改将带来更好的响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;2020-11-29T09:42:12.287+00:00&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="mi">404</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;Not Found&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;message&#34;</span><span class="p">:</span> <span class="s2">&#34;Item with id 1 not found&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;/product/1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></div><p>实现相同目的的另一种方法是扩展 <code>ResponseStatusException</code> 类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoSuchElementFoundException</span> <span class="kd">extends</span> <span class="n">ResponseStatusException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">NoSuchElementFoundException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">HttpHeaders</span> <span class="nf">getResponseHeaders</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// return response headers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>当我们想要操作响应头时，这种方法会派上用场，因为我们可以重写 <code>getResponseHeaders()</code> 方法。</p>
<p><code>@ResponseStatus</code> 与 <code>server.error</code> 配置属性相结合，使我们能够操作 Spring 定义的错误响应负载中的几乎所有字段。</p>
<p>但是如果还想操纵响应负载的结构怎么办？</p>
<p>让我们在下一节中看看如何实现这一目标。</p>
<h2 id="exceptionhandler"><code>@ExceptionHandler</code></h2>
<p><code>@ExceptionHandler</code> 注释在处理异常方面为我们提供了很大的灵活性。对于初学者来说，要使用它，我们只需在控制器本身或 <code>@ControllerAdvice</code> 类中创建一个方法，并用 <code>@ExceptionHandler</code> 注释它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/product&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">//constructor omitted for brevity...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Response</span> <span class="nf">getProduct</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">productService</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">NoSuchElementFoundException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">handleNoSuchElementFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">NoSuchElementFoundException</span> <span class="n">exception</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ResponseEntity</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">exception</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>异常处理程序方法接受一个异常或异常列表作为我们要在定义的方法中处理的参数。我们用 <code>@ExceptionHandler</code> 和 <code>@ResponseStatus</code> 注释该方法来定义我们想要处理的异常和我们想要返回的状态代码。</p>
<p>如果我们不想使用这些注释，那么只需将异常定义为方法的参数也可以：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ExceptionHandler</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">handleNoSuchElementFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">NoSuchElementFoundException</span> <span class="n">exception</span><span class="o">)</span>
</span></span></code></pre></div><p>尽管我们已经在方法签名中提到了它，但在注释中提及异常类是个好主意。它提供了更好的可读性。</p>
<p>此外，处理程序方法上的注释 <code>@ResponseStatus(HttpStatus.NOT_FOUND)</code> 不是必需的，因为传递到 <code>ResponseEnity</code> 的 HTTP 状态将优先，但出于相同的可读性原因，我们仍然保留它。</p>
<p>除了异常参数之外，我们还可以使用 <code>HttpServletRequest</code> 、 <code>WebRequest</code> 或 <code>HttpSession</code> 类型作为参数。</p>
<p>同样，处理程序方法支持各种返回类型，例如 <code>ResponseEntity</code> 、 <code>String</code> 甚至 <code>void</code> 。</p>
<p>在 <code>@ExceptionHandler</code> <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html">java 文档</a>中查找更多输入和返回类型。</p>
<p>在异常处理函数中，我们可以通过输入参数和返回类型的形式使用许多不同的选项，因此我们可以完全控制错误响应。</p>
<p>现在，让我们最终确定 API 的错误响应负载。如果出现任何错误，客户通常会期望两件事：</p>
<ul>
<li>
<p>错误代码告诉客户端它是什么类型的错误。客户端可以在其代码中使用错误代码来驱动基于它的某些业务逻辑。通常，错误代码是标准的 HTTP 状态代码，但我也看到 API 返回自定义错误代码，例如 <code>E001</code> 。</p>
</li>
<li>
<p>一条附加的人类可读消息，提供有关错误的更多信息，甚至提供有关如何修复错误的一些提示或 API 文档的链接。</p>
</li>
</ul>
<p>我们还将添加一个可选的 <code>stackTrace</code> 字段，这将帮助我们在开发环境中进行调试。</p>
<p>最后，我们还想处理响应中的验证错误。您可以在这篇有关使用 Spring Boot 处理验证的文章中找到有关 bean 验证的更多信息。</p>
<p>记住这些点，我们将为错误响应使用以下有效负载：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Getter</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Setter</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequiredArgsConstructor</span>
</span></span><span class="line"><span class="cl"><span class="nd">@JsonInclude</span><span class="o">(</span><span class="n">JsonInclude</span><span class="o">.</span><span class="na">Include</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ErrorResponse</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">status</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">message</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">String</span> <span class="n">stackTrace</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ValidationError</span><span class="o">&gt;</span> <span class="n">errors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Getter</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Setter</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@RequiredArgsConstructor</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ValidationError</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">field</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">message</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addValidationError</span><span class="o">(</span><span class="n">String</span> <span class="n">field</span><span class="o">,</span> <span class="n">String</span> <span class="n">message</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="o">(</span><span class="n">Objects</span><span class="o">.</span><span class="na">isNull</span><span class="o">(</span><span class="n">errors</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">      <span class="n">errors</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">errors</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ValidationError</span><span class="o">(</span><span class="n">field</span><span class="o">,</span> <span class="n">message</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，让我们将所有这些应用到 <code>NoSuchElementFoundException</code> 处理程序方法中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/product&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@AllArgsConstructor</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TRACE</span> <span class="o">=</span> <span class="s">&#34;trace&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${reflectoring.trace:false}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">printStackTrace</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/{id}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Product</span> <span class="nf">getProduct</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="n">String</span> <span class="n">id</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">productService</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@PostMapping</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Product</span> <span class="nf">addProduct</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nd">@Valid</span> <span class="n">ProductInput</span> <span class="n">input</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">productService</span><span class="o">.</span><span class="na">addProduct</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">NoSuchElementFoundException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">handleItemNotFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">NoSuchElementFoundException</span> <span class="n">exception</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Failed to find the requested element&#34;</span><span class="o">,</span> <span class="n">exception</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">buildErrorResponse</span><span class="o">(</span><span class="n">exception</span><span class="o">,</span> <span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">MethodArgumentNotValidException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNPROCESSABLE_ENTITY</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">handleMethodArgumentNotValid</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">MethodArgumentNotValidException</span> <span class="n">ex</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ErrorResponse</span> <span class="n">errorResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNPROCESSABLE_ENTITY</span><span class="o">.</span><span class="na">value</span><span class="o">(),</span> 
</span></span><span class="line"><span class="cl">        <span class="s">&#34;Validation error. Check &#39;errors&#39; field for details.&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="n">FieldError</span> <span class="n">fieldError</span> <span class="o">:</span> <span class="n">ex</span><span class="o">.</span><span class="na">getBindingResult</span><span class="o">().</span><span class="na">getFieldErrors</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">errorResponse</span><span class="o">.</span><span class="na">addValidationError</span><span class="o">(</span><span class="n">fieldError</span><span class="o">.</span><span class="na">getField</span><span class="o">(),</span> 
</span></span><span class="line"><span class="cl">          <span class="n">fieldError</span><span class="o">.</span><span class="na">getDefaultMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">unprocessableEntity</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">errorResponse</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">handleAllUncaughtException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">Exception</span> <span class="n">exception</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Unknown error occurred&#34;</span><span class="o">,</span> <span class="n">exception</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">buildErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">exception</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;Unknown error occurred&#34;</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">request</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">buildErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">Exception</span> <span class="n">exception</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">buildErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">exception</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">exception</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> 
</span></span><span class="line"><span class="cl">        <span class="n">httpStatus</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">        <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">buildErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">Exception</span> <span class="n">exception</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">String</span> <span class="n">message</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpStatus</span> <span class="n">httpStatus</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ErrorResponse</span> <span class="n">errorResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ErrorResponse</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">httpStatus</span><span class="o">.</span><span class="na">value</span><span class="o">(),</span> 
</span></span><span class="line"><span class="cl">        <span class="n">exception</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="o">(</span><span class="n">printStackTrace</span> <span class="o">&amp;&amp;</span> <span class="n">isTraceOn</span><span class="o">(</span><span class="n">request</span><span class="o">)){</span>
</span></span><span class="line"><span class="cl">      <span class="n">errorResponse</span><span class="o">.</span><span class="na">setStackTrace</span><span class="o">(</span><span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">getStackTrace</span><span class="o">(</span><span class="n">exception</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">httpStatus</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">errorResponse</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isTraceOn</span><span class="o">(</span><span class="n">WebRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="o">[]</span> <span class="n">value</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterValues</span><span class="o">(</span><span class="n">TRACE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Objects</span><span class="o">.</span><span class="na">nonNull</span><span class="o">(</span><span class="n">value</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="n">0</span>
</span></span><span class="line"><span class="cl">        <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">[</span><span class="n">0</span><span class="o">].</span><span class="na">contentEquals</span><span class="o">(</span><span class="s">&#34;true&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这里需要注意几点：</p>
<h3 id="提供堆栈跟踪">提供堆栈跟踪</h3>
<p>在错误响应中提供堆栈跟踪可以使我们的开发人员和 QA 工程师免去爬行日志文件的麻烦。</p>
<p>正如我们在 <a href="https://reflectoring.io/spring-boot-exception-handling/#spring-boots-default-exception-handling-mechanism">Spring Boot 的默认异常处理机制</a>中看到的，Spring 已经为我们提供了这个功能。但现在，由于我们自己处理错误响应，因此这也需要我们自己处理。</p>
<p>为了实现这一点，我们首先引入了一个名为 <code>reflectoring.trace</code> 的服务器端配置属性，如果将其设置为 <code>true</code> ，为了实现此目的，我们首先引入了一个名为 <code>reflectoring.trace</code> 的服务器端配置属性，如果将其设置为 <code>true</code> ，将启用响应中的 <code>stackTrace</code> 字段。要实际在 API 响应中获取 <code>stackTrace</code> ，我们的客户端还必须传递带有值 <code>true</code> 的 <code>trace</code> 参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl --location --request GET <span class="s1">&#39;http://localhost:8080/product/1?trace=true&#39;</span>
</span></span></code></pre></div><p>现在，由于 <code>stackTrace</code> 的行为由属性文件中的功能标志控制，因此当我们在生产环境中部署时，我们可以将其删除或将其设置为 <code>false</code> 。</p>
<h3 id="捕获所有异常处理程序">捕获所有异常处理程序</h3>
<p><em>需要把他们全都抓到：</em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">try</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">performSomeOperation</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">OperationSpecificException</span> <span class="n">ex</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">catchAllExcetion</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//...  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>作为一项谨慎措施，我们经常用一个包罗万象的 try-catch 异常处理程序块包围顶级方法的主体，以避免任何不需要的副作用或行为。我们控制器中的 <code>handleAllUncaughtException()</code> 方法的行为类似。它将捕获我们没有特定处理程序的所有异常。</p>
<p>我想在这里指出的一件事是，即使我们没有这个包罗万象的异常处理程序，Spring 也会处理它。但我们希望响应采用我们的格式而不是 Spring 的格式，因此我们必须自己处理异常。</p>
<p>包罗万象的处理程序方法也是记录异常的好地方，因为它们可以深入了解可能的错误。我们可以跳过记录字段验证异常，例如 <code>MethodArgumentNotValidException</code> ，因为它们是由于语法上无效的输入而引发的，但我们应该始终在捕获所有处理程序中记录未知异常。</p>
<h3 id="异常处理程序的顺序">异常处理程序的顺序</h3>
<p>提及处理程序方法的顺序并不重要。 Spring将首先寻找最具体的异常处理方法。</p>
<p>如果找不到它，那么它将查找父异常的处理程序，在我们的例子中是 <code>RuntimeException</code> ，如果没有找到，则 <code>handleAllUncaughtException()</code> 方法将最终处理该异常。</p>
<p>这应该可以帮助我们处理这个特定控制器中的异常，但是如果其他控制器也抛出这些相同的异常怎么办？我们如何处理这些？我们是否在所有控制器中创建相同的处理程序，或者创建具有公共处理程序的基类并在所有控制器中扩展它？</p>
<p>幸运的是，我们不必这样做。 Spring 以“控制器建议”的形式为这个问题提供了一个非常优雅的解决方案。</p>
<p>让我们研究一下它们。</p>
<h2 id="controlleradvice"><code>@ControllerAdvice</code></h2>
<blockquote>
<p><strong>为什么称为“控制器建议”？</strong></p>
<p>“建议”一词来自面向方面编程 (AOP)，它允许我们围绕现有方法注入横切代码（称为“建议”）。控制器建议允许我们拦截和修改控制器方法的返回值，在我们的例子中是为了处理异常。</p>
</blockquote>
<p>控制器建议类允许我们将异常处理程序应用于应用程序中的多个或所有控制器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@ControllerAdvice</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GlobalExceptionHandler</span> <span class="kd">extends</span> <span class="n">ResponseEntityExceptionHandler</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TRACE</span> <span class="o">=</span> <span class="s">&#34;trace&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${reflectoring.trace:false}&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">printStackTrace</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">UNPROCESSABLE_ENTITY</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">protected</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">handleMethodArgumentNotValid</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">MethodArgumentNotValidException</span> <span class="n">ex</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpHeaders</span> <span class="n">headers</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpStatus</span> <span class="n">status</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">//Body omitted as it&#39;s similar to the method of same name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// in ProductController example...  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">//.....
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">ItemNotFoundException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">handleItemNotFoundException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">ItemNotFoundException</span> <span class="n">itemNotFoundException</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">//Body omitted as it&#39;s similar to the method of same name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// in ProductController example...  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">//.....  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">handleAllUncaughtException</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">RuntimeException</span> <span class="n">exception</span><span class="o">,</span> 
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span>
</span></span><span class="line"><span class="cl">  <span class="o">){</span>
</span></span><span class="line"><span class="cl">      <span class="c1">//Body omitted as it&#39;s similar to the method of same name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// in ProductController example...  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">//.....
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="c1">//....
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="nf">handleExceptionInternal</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">Exception</span> <span class="n">ex</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">Object</span> <span class="n">body</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpHeaders</span> <span class="n">headers</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">HttpStatus</span> <span class="n">status</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="n">WebRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">buildErrorResponse</span><span class="o">(</span><span class="n">ex</span><span class="o">,</span><span class="n">status</span><span class="o">,</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>处理函数的主体和其他支持代码被省略，因为它们与我们在 @ExceptionHandler 部分看到的代码几乎相同。请在 Github Repo 的 <a href="https://github.com/thombergs/code-examples/blob/master/spring-boot/exception-handling/src/main/java/io/reflectoring/exception/exception/GlobalExceptionHandler.java">GlobalExceptionHandler</a> 类中找到完整的代码。</p>
<p>有几件事是新的，我们稍后会讨论。这里的一个主要区别是这些处理程序将处理应用程序中所有控制器抛出的异常，而不仅仅是 <code>ProductController</code> 。</p>
<p>如果我们想有选择地将控制器建议的范围应用或限制到特定控制器或包，我们可以使用注释提供的属性：</p>
<ul>
<li><code>@ControllerAdvice(&quot;com.reflectoring.controller&quot;)</code> ：我们可以在注释的 <code>value</code> 或 <code>basePackages</code> 参数中传递包名称或包名称列表。这样，控制器建议将仅处理该包控制器的异常。</li>
<li><code>@ControllerAdvice(annotations = Advised.class)</code> ：只有标有 <code>@Advised</code> 注释的控制器才会由控制器建议处理。</li>
</ul>
<p>在 <code>@ControllerAdvice</code> <a href="https://www.javadoc.io/doc/org.springframework/spring-web/4.3.8.RELEASE/org/springframework/web/bind/annotation/ControllerAdvice.html">注释文档</a>中查找其他参数。</p>
<h3 id="responseentityexceptionhandler"><code>ResponseEntityExceptionHandler</code></h3>
<p><code>ResponseEntityExceptionHandler</code> 是控制器建议类的便捷基类。它为内部 Spring 异常提供异常处理程序。如果我们不扩展它，那么所有异常将被重定向到 <code>DefaultHandlerExceptionResolver</code> ，它返回一个 <code>ModelAndView</code> 对象。因为我们的使命是塑造我们自己的错误响应，所以我们不希望这样。</p>
<p>正如您所看到的，我们重写了两个 <code>ResponseEntityExceptionHandler</code> 方法：</p>
<ul>
<li><code>handleMethodArgumentNotValid()</code> ：在 @ExceptionHandler 部分，我们自己实现了一个处理程序。在这里我们只是覆盖了它的行为。</li>
<li><code>handleExceptionInternal()</code> ： <code>ResponseEntityExceptionHandler</code> 中的所有处理程序都使用此函数来构建类似于 <code>buildErrorResponse()</code> 的 <code>ResponseEntity</code> 。如果我们不重写此方法，那么客户端将仅收到响应标头中的 HTTP 状态，但由于我们也希望在响应正文中包含 HTTP 状态，因此我们重写了该方法。</li>
</ul>
<blockquote>
<h4 id="处理-nohandlerfoundexception-需要一些额外的步骤">处理 <code>NoHandlerFoundException</code> 需要一些额外的步骤</h4>
<p>当您尝试调用系统中不存在的API时，会出现此异常。尽管我们通过 <code>ResponseEntityExceptionHandler</code> 类实现其处理程序，但异常仍被重定向到 <code>DefaultHandlerExceptionResolver</code> 。</p>
<p>要将异常重定向到我们的建议，我们需要在属性文件中设置几个属性： <code>spring.mvc.throw-exception-if-no-handler-found=true</code> 和 <code>spring.web.resources.add-mappings=false</code></p>
</blockquote>
<h3 id="使用-controlleradvice-时要记住的一些要点">使用 <code>@ControllerAdvice</code> 时要记住的一些要点</h3>
<ul>
<li>
<p>为了简单起见，项目中始终只有一个控制器建议类。最好有一个应用程序中所有异常的单一存储库。如果您创建多个控制器建议，请尝试使用 <code>basePackages</code> 或 <code>annotations</code> 属性来明确它将建议哪些控制器。</p>
</li>
<li>
<p>Spring 可以按任何顺序处理控制器建议类，除非我们使用 <code>@Order</code> 注释对其进行注释。因此，如果您有多个控制器建议，那么在编写一个包罗万象的处理程序时要小心。特别是当您没有在注释中指定 <code>basePackages</code> 或 <code>annotations</code> 时。</p>
</li>
</ul>
<h2 id="spring如何处理异常">Spring如何处理异常？</h2>
<p>现在我们已经介绍了 Spring 中处理异常的可用机制，让我们简要了解 Spring 如何处理它以及何时一种机制优先于另一种机制。</p>
<p>如果我们还没有构建自己的异常处理程序，请看下面的流程图，它跟踪了 Spring 异常处理的过程：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-exception-handling/spring-exception-handling-mechanism_hubae3aff6e8617ef25d3790cb826a42d7_144133_2512x0_resize_box_3.png" alt="Spring Exception Handling Flow"  />
</p>
<h2 id="结论">结论</h2>
<p>当异常跨越控制器的边界时，它注定会以 JSON 响应或 HTML 网页的形式到达客户端。</p>
<p>在本文中，我们了解了 Spring Boot 如何将这些异常转换为客户友好的输出，以及配置和注释，使我们能够将它们进一步塑造成我们想要的形状。</p>
<p>感谢您的阅读！您可以在 GitHub 上找到工作代码。</p>
<p>原文链接：<a href="https://reflectoring.io/spring-boot-exception-handling/">https://reflectoring.io/spring-boot-exception-handling/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]使用 Spring 的 Null-Safety 注解保护您的代码免受 NullPointerExceptions 的影响</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/spring-boot-null-safety-annotations/</link>
      <pubDate>Wed, 26 Jul 2023 08:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/spring-boot-null-safety-annotations/</guid>
      <description>NullPointerExceptions （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。 我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添</description>
      <content:encoded><![CDATA[<p><code>NullPointerExceptions</code> （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。</p>
<p>我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添加了适当的检查，以保证对象引用不能为空，或者毕竟在对象为空时采取可能的安全措施。</p>
<p>由于 <code>NullPointerException</code> 是一个运行时异常，因此在代码编译过程中很难找出这种情况。 Java 的类型系统没有办法快速消除危险的空对象引用。</p>
<p>幸运的是，Spring 框架提供了一些注释来解决这个问题。在本文中，我们将学习如何使用这些注释通过 <a href="https://reflectoring.io/categories/spring-boot/">Spring Boot</a> 编写空安全代码。</p>
<h2 id="示例代码">示例代码</h2>
<p>本文附有 GitHub 上的工作<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/spring-boot-null-safe-annotations">代码示例</a>。</p>
<h2 id="spring-中的空安全注解">Spring 中的空安全注解</h2>
<p>在Spring核心包 <code>org.springframework.lang</code> 下，有4个这样的注解：</p>
<ul>
<li><code>@NonNull</code>, <code>@NonNull</code> ，</li>
<li><code>@NonNullFields</code>, <code>@NonNullFields</code> ，</li>
<li><code>@Nullable</code>,</li>
<li><code>@NonNullApi</code>.</li>
</ul>
<p>Eclipse 和 IntelliJ IDEA 等流行的 IDE 可以理解这些注释。它们可以在编译期间警告开发人员潜在的问题。</p>
<p>我们将在本教程中使用 IntelliJ IDEA。让我们通过一些代码示例来了解更多信息。</p>
<p>要创建基础项目，我们可以使用 Spring Initializr。 Spring Boot启动器就是我们所需要的，不需要添加任何额外的依赖项。</p>
<h2 id="ide配置">IDE配置</h2>
<p><strong>请注意，并非所有开发工具都可以显示这些编译警告。如果您没有看到相关警告，请检查 IDE 中的编译器设置。</strong></p>
<h3 id="intellij">IntelliJ</h3>
<p>对于 IntelliJ，我们可以在“Build, Execution, Deployment -&gt; Compiler”下激活注释检查：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/intellij-compiler-settings_hud188e08fdc0139feec7b91a21ff944e5_145688_1866x0_resize_box_3.png" alt="IntelliJ compiler config"  />
</p>
<h3 id="eclipse">Eclipse</h3>
<p>对于 Eclipse，我们可以在“Java -&gt; Compiler -&gt; Errors/Warnings”下找到设置：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/eclipse-compiler-settings_hu8534a04dde40f239dc7f4772e1ef3337_850180_2084x0_resize_box_3.png" alt="Eclipse compiler config"  />
</p>
<h2 id="示例代码-1">示例代码</h2>
<p>让我们使用一个简单的 <code>Employee</code> 类来理解注释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.reflectoring.nullsafety</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// imports 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">LocalDate</span> <span class="n">joiningDate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">pastEmployment</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// standard constructor, getters, setters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h2 id="nonnull"><code>@NonNull</code></h2>
<p>大多数情况下， <code>id</code> 字段（在 <code>Employee</code> 类中）将是一个不可为 null 的值。因此，为了避免任何潜在的 <code>NullPointerException</code> 我们可以将此字段标记为 <code>@NonNull</code> ：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@NonNull</span> 
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>现在，如果我们不小心尝试在代码中的任何位置将 <code>id</code> 的值设置为 null，IDE 将显示编译警告：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/nonnull-ide-warning_hu5348352c54dfc5689093e49bbc5394b7_33745_1138x0_resize_box_3.png" alt="IDE warning for NonNull"  />
</p>
<p><code>@NonNull</code> 注释可以在方法、参数或字段级别使用。**</p>
<p>此时，您可能会想“如果一个类有多个非空字段怎么办？”。如果我们必须在每一个之前添加 <code>@NonNull</code> 注释，是不是太罗嗦了？</p>
<p>我们可以通过使用 <code>@NonNullFields</code> 注释来解决这个问题。</p>
<p>以下是 <code>@NonNull</code> 的快速摘要：</p>
<table>
<thead>
<tr>
<th>带注释的元素</th>
<th>影响</th>
</tr>
</thead>
<tbody>
<tr>
<td>field</td>
<td>当字段为空时显示警告</td>
</tr>
<tr>
<td>parameter</td>
<td>当参数为空时显示警告</td>
</tr>
<tr>
<td>method</td>
<td>当方法返回 null 时显示警告</td>
</tr>
<tr>
<td>package</td>
<td>不适用</td>
</tr>
</tbody>
</table>
<h2 id="nonnullfields"><code>@NonNullFields</code></h2>
<p>让我们创建一个 <code>package-info.java</code> 文件以在包级别应用非空字段检查。该文件将包含带有 <code>@NonNullFields</code> 注释的根包名称：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@NonNullFields</span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.reflectoring.nullsafety</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.lang.NonNullFields</span><span class="o">;</span>
</span></span></code></pre></div><p>现在，我们不再需要使用 <code>@NonNull</code> 注释来注释字段。因为默认情况下，该包中类的所有字段现在都被视为非空。而且，我们仍然会看到与以前相同的警告：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/nonnull-ide-warning_hu5348352c54dfc5689093e49bbc5394b7_33745_1138x0_resize_box_3.png" alt="IDE warning for NonNullFields"  />
</p>
<p>这里要注意的另一点是，如果有任何未初始化的字段，那么我们将看到初始化这些字段的警告：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/nonnullfields-ide-warning_huf1e2dea76ed1bc462a15a89ca8946d6c_20352_612x0_resize_box_3.png" alt="IDE warning for NonNull"  />
</p>
<p>以下是 <code>@NonNullFields</code> 的快速摘要：</p>
<table>
<thead>
<tr>
<th>带注释的元素</th>
<th>影响</th>
</tr>
</thead>
<tbody>
<tr>
<td>field</td>
<td>不适用</td>
</tr>
<tr>
<td>parameter</td>
<td>不适用</td>
</tr>
<tr>
<td>method</td>
<td>不适用</td>
</tr>
<tr>
<td>package</td>
<td>如果所应用的包的任何字段为空，则显示警告</td>
</tr>
</tbody>
</table>
<h2 id="nonnullapi"><code>@NonNullApi</code></h2>
<p>到目前为止，您可能已经发现了另一个要求，即对方法参数或返回值进行类似的检查。 <code>@NonNullApi</code> 将会来拯救我们。</p>
<p>与 <code>@NonNullFields</code> 类似，我们可以使用 <code>package-info.java</code> 文件并为目标包添加 <code>@NonNullApi</code> 注释：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@NonNullApi</span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.reflectoring.nullsafety</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.lang.NonNullApi</span><span class="o">;</span>
</span></span></code></pre></div><p>现在，如果我们编写方法返回 null 的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.reflectoring.nullsafety</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// imports
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="nf">getPastEmployment</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>  
</span></span></code></pre></div><p>我们可以看到 IDE 现在警告我们有关不可为 null 的返回值：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/spring-boot-null-safety-annotations/nonnullapi-method-ide-warning_hu0f179a30c6c723f579ce7eeee2a50ca2_40298_1084x0_resize_box_3.png" alt="IDE warning for NonNullApi"  />
</p>
<p>以下是 <code>@NonNullApi</code> 的快速摘要：</p>
<table>
<thead>
<tr>
<th>带注释的元素</th>
<th>影响</th>
</tr>
</thead>
<tbody>
<tr>
<td>field</td>
<td>不适用</td>
</tr>
<tr>
<td>parameter</td>
<td>不适用</td>
</tr>
<tr>
<td>method</td>
<td>不适用</td>
</tr>
<tr>
<td>package</td>
<td>如果所应用的包的任何参数或返回值为空，则显示警告</td>
</tr>
</tbody>
</table>
<h2 id="nullable"><code>@Nullable</code></h2>
<p>但这里有一个问题。在某些情况下，特定字段可能为空（无论我们多么想避免它）。</p>
<p>例如， <code>pastEmployment</code> 字段在 <code>Employee</code> 类中可以为空（对于以前没有工作过的人）。但根据我们的安全检查，IDE 认为不可能。</p>
<p>我们可以使用字段上的 <code>@Nullable</code> 注释来表达我们的意图。这将告诉 IDE 该字段在某些情况下可以为空，因此无需触发警报。正如 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/lang/Nullable.html">JavaDoc</a> 所建议的：</p>
<blockquote>
<p>可以与 <code>@NonNullApi</code> 或 <code>@NonNullFields</code> 结合使用，将默认的不可为空语义覆盖为可为空。</p>
</blockquote>
<p>与 <code>NonNull</code> 类似， <code>Nullable</code> 注释可以应用于方法、参数或字段级别。</p>
<p>我们现在可以将 <code>pastEmployment</code> 字段标记为可为空：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nn">io.reflectoring.nullsafety</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// imports
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Nullable</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">pastEmployment</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Nullable</span> <span class="n">String</span> <span class="nf">getPastEmployment</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pastEmployment</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>  
</span></span></code></pre></div><p>以下是 <code>@Nullable</code> 的快速摘要：</p>
<table>
<thead>
<tr>
<th>带注释的元素</th>
<th>影响</th>
</tr>
</thead>
<tbody>
<tr>
<td>field</td>
<td>表示该字段可以为空</td>
</tr>
<tr>
<td>parameter</td>
<td>表示参数可以为空</td>
</tr>
<tr>
<td>method</td>
<td>表示该方法可以返回null</td>
</tr>
<tr>
<td>package</td>
<td>不适用</td>
</tr>
</tbody>
</table>
<h2 id="自动构建检查">自动构建检查</h2>
<p>到目前为止，我们正在讨论现代 IDE 如何使编写空安全代码变得更容易。然而，如果我们想在构建管道中进行一些自动代码检查，这在某种程度上也是可行的。</p>
<p><a href="https://spotbugs.github.io/">SpotBugs</a>（著名但已废弃的 <a href="http://findbugs.sourceforge.net/">FindBugs</a> 项目的转世）提供了一个 Maven/Gradle 插件，可以检测由于可空性而导致的代码异味。让我们看看如何使用它。</p>
<p>对于 Maven 项目，我们需要更新 <code>pom.xml</code> 以添加 <a href="https://spotbugs.readthedocs.io/en/latest/maven.html">SpotBugs Maven</a> 插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>com.github.spotbugs<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spotbugs-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>4.5.2.0<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;dependencies&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- overwrite dependency on spotbugs if you want to specify the version of spotbugs --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;groupId&gt;</span>com.github.spotbugs<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;artifactId&gt;</span>spotbugs<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;version&gt;</span>4.5.3<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/dependencies&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div><p>构建项目后，我们可以使用该插件的以下目标：</p>
<ul>
<li>
<p><code>spotbugs</code> 目标分析目标项目。</p>
</li>
<li>
<p><code>check</code> 目标运行 <code>spotbugs</code> 目标，如果发现任何错误，则使构建失败。</p>
</li>
</ul>
<p>如果您使用 Gradle 而不是 Maven，则可以在 <code>build.gradle</code> 文件中配置 SpotBugs Gradle 插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl"><span class="n">dependencies</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">spotbugsPlugins</span> <span class="s1">&#39;com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">spotbugs</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">toolVersion</span> <span class="o">=</span> <span class="s1">&#39;4.5.3&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>项目更新后，我们可以使用 <code>gradle check</code> 命令运行检查。</p>
<p>SpotBugs 提供了一些规则，通过在 Maven 构建期间处理 <code>@NonNull</code> 注释来标记潜在问题。您可以查看<a href="https://spotbugs.readthedocs.io/en/latest/bugDescriptions.html">错误描述的详细列表</a>。</p>
<p>例如，如果任何用 <code>@NonNull</code> 注释的方法意外返回 null，则 SpotBugs 检查将失败，并显示类似以下内容的错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">[ERROR] High: io.reflectoring.nullsafety.Employee.getJoiningDate() may return null, but is declared @Nonnull [io.reflectoring.nullsafety.Employee] At Employee.java:[line 36] NP_NONNULL_RETURN_VIOLATION
</span></span></code></pre></div><h2 id="结论">结论</h2>
<p>这些注解对于Java程序员来说确实是一个福音，可以减少运行时出现 <code>NullPointerException</code> 的可能性。但是请记住，这并不能保证完全的空安全。</p>
<p>Kotlin 使用这些注释来推断 Spring API 的可为空性。</p>
<p>我希望您现在已经准备好在 Spring Boot 中编写 null 安全代码！</p>
<p>原文链接：<a href="https://reflectoring.io/spring-boot-null-safety-annotations/">https://reflectoring.io/spring-boot-null-safety-annotations/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]使用 Spring Boot 和 Spring Security 配置 CORS</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/spring-cors/</link>
      <pubDate>Wed, 26 Jul 2023 07:20:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/spring-cors/</guid>
      <description>跨源资源共享 (CORS) 是一种基于 HTTP 标头的机制，允许服务器显式将某些源列入白名单，并帮助绕过同源策略。 这是必需的，因为浏览器默认应用同源策略以确保安全</description>
      <content:encoded><![CDATA[<p>跨源资源共享 (CORS) 是一种基于 HTTP 标头的机制，允许服务器显式将某些源列入白名单，并帮助绕过同源策略。</p>
<p>这是必需的，因为浏览器默认应用同源策略以确保安全。通过在 Web 应用程序中实施 CORS，网页可以请求额外的资源并从其他域加载到浏览器中。</p>
<p>本文将重点介绍在基于 Spring 的应用程序中实现 CORS 的各种方式。要详细了解 CORS 的工作原理，请参阅这篇优秀的<a href="https://reflectoring.io/complete-guide-to-cors/">介绍性文章</a>。</p>
<h2 id="示例代码">示例代码</h2>
<p>本文附有 GitHub 上的工作<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring">代码示例</a>。</p>
<h2 id="cors-特定-http-响应标头概述">CORS 特定 HTTP 响应标头概述</h2>
<p>CORS 规范定义了服务器返回的一组响应标头，这将是后续部分的重点。</p>
<table>
<thead>
<tr>
<th>响应头</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Access-Control-Allow-Origin</code></td>
<td>以逗号分隔的白名单来源列表或“*”。</td>
</tr>
<tr>
<td><code>Access-Control-Allow-Methods</code></td>
<td>Web 服务器允许跨源请求的 HTTP 方法的逗号分隔列表。</td>
</tr>
<tr>
<td><code>Access-Control-Allow-Headers</code></td>
<td>Web 服务器允许跨源请求的 HTTP 标头的逗号分隔列表。</td>
</tr>
<tr>
<td><code>Access-Control-Expose-Headers</code></td>
<td>客户端脚本认为可以安全显示的以逗号分隔的 HTTP 标头列表。</td>
</tr>
<tr>
<td><code>Access-Control-Allow-Credentials</code></td>
<td>如果浏览器通过传递凭据（以 cookie 或授权标头的形式）向服务器发出请求，则其值设置为 <code>true</code> 。</td>
</tr>
<tr>
<td><code>Access-Control-Max-Age</code></td>
<td>指示预检请求的结果可以缓存多长时间。</td>
</tr>
</tbody>
</table>
<h2 id="设置示例客户端应用程序">设置示例客户端应用程序</h2>
<p>我们将使用一个简单的角度应用程序来调用 REST 端点，我们可以使用浏览器开发人员工具检查这些端点。您可以在 GitHub 上查看<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring/cors-app">源代码</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">    ng serve --open
</span></span></code></pre></div><p>我们应该能够成功启动客户端应用程序。</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/configuring-cors-with-spring/client_hu6933403b7320f6f893a41150b2491685_84510_1441x0_resize_q90_box.JPG" alt="settings"  />
</p>
<h2 id="设置示例服务器应用程序">设置示例服务器应用程序</h2>
<p>我们将使用一个基于 Spring 的示例应用程序，其中包含客户端应用程序可以调用的 <code>GET</code> 和 <code>POST</code> 请求。请注意，您会发现两个独立的应用程序：一个使用 Spring MVC (REST)，另一个使用 Spring Reactive 堆栈。</p>
<p>为简单起见，两个应用程序之间的 CORS 配置相同，并且定义了相同的端点。两台服务器都从不同的端口 8091 和 8092 启动。</p>
<p>与应用程序捆绑在一起的 Maven Wrapper 将用于启动服务。您可以查看 <a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring/SimpleLibraryApplication">Spring REST 源代码</a>和 <a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring/LibraryWebfluxApplication">Spring Reactive 源代码</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">    mvnw clean verify spring-boot:run <span class="o">(</span><span class="k">for</span> Windows<span class="o">)</span>
</span></span><span class="line"><span class="cl">   ./mvnw clean verify spring-boot:run <span class="o">(</span><span class="k">for</span> Linux<span class="o">)</span>
</span></span></code></pre></div><p>一旦 Spring 应用程序成功启动，客户端应用程序应该能够成功从服务器加载数据。</p>
<p>调用 Spring REST 服务器：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/configuring-cors-with-spring/app_hu6933403b7320f6f893a41150b2491685_157341_1871x0_resize_q90_box.JPG" alt="settings"  />

调用 Spring Reactive 服务器：</p>
<p><img loading="lazy" src="https://reflectoring.io/images/posts/configuring-cors-with-spring/app_reactive_hu6933403b7320f6f893a41150b2491685_154439_1859x0_resize_q90_box.JPG" alt="settings"  />
</p>
<h2 id="了解-crossorigin-属性">了解 <code>@CrossOrigin</code> 属性</h2>
<p>在 Spring Boot 应用程序中，我们使用 <code>@CrossOrigin</code> 注解来启用跨域调用。我们先了解一下 <code>@CrossOrigin</code> 支持的属性。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>Description 描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>origins</code></td>
<td>允许您指定允许的来源列表。默认情况下，它允许所有来源。 该属性值将在预检响应和实际响应的 <code>Access-Control-Allow-Origin</code> 标头中设置。 用法示例： <code>@CrossOrigin(origins = &quot;http://localhost:8080&quot;)</code>  <code>@CrossOrigin(origins = {&quot;http://localhost:8080&quot;, &quot;http://testserver:8087&quot;})</code></td>
</tr>
<tr>
<td><code>allowedHeaders</code></td>
<td>允许您指定浏览器发出请求时将接受的标头列表。默认情况下，任何标头都将被允许。此属性中指定的值用于预检响应中的 <code>Access-Control-Allow-Headers</code> 中。  <strong>用法示例：</strong> <code>@CrossOrigin(allowedHeaders = {&quot;Authorization&quot;, &quot;Origin&quot;})</code></td>
</tr>
<tr>
<td><code>exposedHeaders</code></td>
<td>在实际响应标头中设置的标头列表。如果未指定，则只有安全列表中的标头才会被认为可以安全地由客户端脚本公开。  <strong>用法示例：</strong> <code>@CrossOrigin(exposedHeaders = {&quot;Access-Control-Allow-Origin&quot;,&quot;Access-Control-Allow-Credentials&quot;})</code></td>
</tr>
<tr>
<td><code>allowCredentials</code></td>
<td>当需要凭据来调用 API 时，请将 <code>Access-Control-Allow-Credentials</code> 标头值设置为 true。如果不需要凭据，请省略标头。  <strong>用法示例：</strong> <code>@CrossOrigin(allowCredentials = true)</code></td>
</tr>
<tr>
<td><code>maxAge</code></td>
<td>默认 <code>maxAge</code> 设置为 1800 秒（30 分钟）。指示预检响应可以缓存多长时间。  <strong>用法示例：</strong> <code>@CrossOrigin(maxAge = 300)</code></td>
</tr>
</tbody>
</table>
<h2 id="如果不配置cors怎么办">如果不配置CORS怎么办？</h2>
<p>考虑我们的 Spring Boot 应用程序尚未配置为 CORS 支持。如果我们尝试访问在端口 4200 上运行的 Angular 应用程序，我们会在开发人员控制台上看到以下错误：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Access to XMLHttpRequest at http://localhost:8091 
</span></span><span class="line"><span class="cl">from origin http://localhost:4200 has been blocked by CORS policy: 
</span></span><span class="line"><span class="cl">No &#39;Access-Control-Allow-Origin` header is present on the requested 
</span></span><span class="line"><span class="cl">resource
</span></span></code></pre></div><p><img loading="lazy" src="https://reflectoring.io/images/posts/configuring-cors-with-spring/cors-error_hu6933403b7320f6f893a41150b2491685_149954_1882x0_resize_q90_box.JPG" alt="settings"  />
</p>
<p>这是因为，即使两个应用程序均由 <code>localhost</code> 提供服务，但<a href="https://reflectoring.io/complete-guide-to-cors/#same-origin-vs-cross-origin">由于端口不同</a>，它们不会被视为同一来源。</p>
<h2 id="在-spring-web-mvc-应用程序中配置-cors">在 Spring Web MVC 应用程序中配置 CORS</h2>
<p>使用 Spring Initializr 创建的初始设置包含所有必需的 CORS 依赖项。无需添加外部依赖项。请参阅此<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring/SpringWebApplication">示例 Spring Web 应用程序项目</a>。</p>
<h3 id="在类级别定义-crossorigin">在类级别定义 <code>@CrossOrigin</code></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">maxAge</span> <span class="o">=</span> <span class="n">3600</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;cors-library/managed/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LibraryController</span> <span class="o">{}</span>
</span></span></code></pre></div><p>由于我们已经定义了 <code>@CrossOrigin</code> ：</p>
<ul>
<li>控制器中的所有 <code>@RequestMapping</code> 方法（以及使用速记注释 <code>@GetMapping</code> 、 <code>@PostMapping</code> 等的方法）都将接受跨域请求。</li>
<li>自 <code>maxAge = 3600</code> 起，所有飞行前响应将被缓存 60 分钟。</li>
</ul>
<h3 id="在方法级别定义-crossorigin">在方法级别定义 <code>@CrossOrigin</code></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">&#34;http://localhost:4200&#34;</span><span class="o">,</span> <span class="n">allowedHeaders</span> <span class="o">=</span> <span class="s">&#34;Requestor-Type&#34;</span><span class="o">,</span> <span class="n">exposedHeaders</span> <span class="o">=</span> <span class="s">&#34;X-Get-Header&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;</span> <span class="nf">getBooks</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">headers</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">,</span> <span class="s">&#34;ExampleHeader&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">headers</span><span class="o">(</span><span class="n">headers</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">libraryService</span><span class="o">.</span><span class="na">getAllBooks</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这将产生以下效果：</p>
<ul>
<li>
<p>仅接受来自来源 <code>http://localhost:4200</code> 的请求。</p>
</li>
<li>
<p>如果我们希望只接受某些标头，则可以在 <code>allowedHeaders</code> 属性中指定这些标头。如果浏览器未发送 <code>Requestor-Type</code> 标头，则不会处理该请求。</p>
</li>
<li>
<p>如果我们设置某些响应标头，为了让客户端应用程序能够使用它们，我们需要使用 <code>exposedHeaders</code> 属性显式设置要公开的响应标头列表。</p>
</li>
</ul>
<h3 id="类和方法级别的-crossorigin-组合">类和方法级别的 <code>@CrossOrigin</code> 组合</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">maxAge</span> <span class="o">=</span> <span class="n">3600</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;cors-library/managed/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LibraryController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LibraryController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LibraryService</span> <span class="n">libraryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">LibraryController</span><span class="o">(</span><span class="n">LibraryService</span> <span class="n">libraryService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">libraryService</span> <span class="o">=</span> <span class="n">libraryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">&#34;http://localhost:4200&#34;</span><span class="o">,</span> <span class="n">allowedHeaders</span> <span class="o">=</span> <span class="s">&#34;Requestor-Type&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;</span> <span class="nf">getBooks</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">headers</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">,</span> <span class="s">&#34;ExampleHeader&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">headers</span><span class="o">(</span><span class="n">headers</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">libraryService</span><span class="o">.</span><span class="na">getAllBooks</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><ul>
<li>
<p>通过在类和方法级别定义注释，其组合属性将应用于方法，即（ <code>origins</code> 、 <code>allowedHeaders</code> 、``）</p>
</li>
<li>
<p>在上述所有情况下，我们可以使用 <code>@CrossOrigin</code> 定义全局 CORS cmaxAgeonconfiguration 和本地配置。对于接受多个值的属性，将应用全局值和本地值的组合（即它们被合并）。对于仅接受单个值的属性，本地值将优先于全局值。</p>
</li>
</ul>
<h3 id="全局启用-cors">全局启用 CORS</h3>
<p>我们可以定义一个适用于定义的所有资源的通用 CORS 配置，而不是分别向每个资源添加 CORS。</p>
<p>在这里，我们将使用 <code>WebMvcConfigurer</code> ，它是 Spring Web MVC 库的一部分</p>
<p>通过重写 <code>addCorsMapping()</code> 方法，我们将为 Spring Web MVC 处理的所有 URL 配置 CORS。</p>
<p>为了全局定义相同的配置（如前几节所述），我们将使用 <code>application.yml</code> 中定义的配置参数来创建一个 bean，如下定义。</p>
<p><code>application.yml</code> 中定义的属性（ <code>allowed-origins</code> 、 <code>allowed-methods</code> 、 <code>max-age</code> 、 <code>allowed-headers</code> 、 <code>exposed-headers</code> ) 是通过 <code>@ConfigurationProperties(prefix = &quot;web&quot;)</code> 映射到自定义类 Cors 的自定义属性</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cors</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">allowed-origins</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;http://localhost:4200&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">allowed-methods</span><span class="p">:</span><span class="w"> </span><span class="l">GET, POST, PATCH, PUT, DELETE, OPTIONS, HEAD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">max-age</span><span class="p">:</span><span class="w"> </span><span class="m">3600</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">allowed-headers</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Requestor-Type&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">exposed-headers</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;X-Get-Header&#34;</span><span class="w">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">WebMvcConfigurer</span> <span class="nf">corsMappingConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="k">new</span> <span class="n">WebMvcConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">       <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="n">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">           <span class="n">WebConfigProperties</span><span class="o">.</span><span class="na">Cors</span> <span class="n">cors</span> <span class="o">=</span> <span class="n">webConfigProperties</span><span class="o">.</span><span class="na">getCors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">           <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedOrigins</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedMethods</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getMaxAge</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="na">allowedHeaders</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedHeaders</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="na">exposedHeaders</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getExposedHeaders</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">       <span class="o">}</span>
</span></span><span class="line"><span class="cl">   <span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<h4 id="corsconfiguration-默认值"><code>CorsConfiguration</code> 默认值</h4>
<p>如果未显式定义一个或多个方法（ <code>allowedOrigins</code> 、 <code>allowedMethods</code> 、 <code>maxAge</code> 、 <code>allowedHeaders</code> 、 <code>exposedHeaders</code> ），则 <code>addMapping()</code> 返回一个 <code>CorsRegistration</code> 对象，该对象应用默认的 <code>CorsConfiguration</code> 。请参阅 Spring 库方法 <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html#applyPermitDefaultValues--">CorsConfiguration.applyPermitDefaultValues()</a> 以了解应用的默认值。</p>
</blockquote>
<h2 id="在-spring-webflux-应用程序中配置-cors">在 Spring Webflux 应用程序中配置 CORS</h2>
<p>初始设置是使用 Spring Initializr 创建的，并使用 Spring Webflux、Spring Data R2DBC 和 H2 数据库。无需添加外部依赖项。请参阅<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring/SpringWebfluxApplication">此示例 Spring Webflux 项目</a>。</p>
<h3 id="使用-crossorigin-进行-spring-webflux-的-cors-配置">使用 <code>@CrossOrigin</code> 进行 Spring Webflux 的 CORS 配置</h3>
<p>与Spring MVC类似，在Spring Webflux中我们可以在类级别或方法级别定义 <code>@CrossOrigin</code> 。前面几节中描述的相同 <code>@CrossOrigin</code> 属性将适用。此外，当在类和方法中都定义了注释时，其组合属性将应用于方法。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">&#34;http://localhost:4200&#34;</span><span class="o">,</span> <span class="n">allowedHeaders</span> <span class="o">=</span> <span class="s">&#34;Requestor-Type&#34;</span><span class="o">,</span> <span class="n">exposedHeaders</span> <span class="o">=</span> <span class="s">&#34;X-Get-Header&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Mono</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;&gt;</span> <span class="nf">getBooks</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">headers</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">,</span> <span class="s">&#34;ExampleHeader&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">headers</span><span class="o">(</span><span class="n">headers</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">libraryService</span><span class="o">.</span><span class="na">getAllBooks</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="在-spring-webflux-中全局启用-cors-配置">在 Spring Webflux 中全局启用 CORS 配置</h3>
<p>要在 Spring Webflux 应用程序中全局定义 CORS，我们使用 <code>WebfluxConfigurer</code> 并覆盖 <code>addCorsMappings()</code> 。与 Spring MVC 类似，它使用带有默认值的 <code>CorsConfiguration</code> ，可以根据需要覆盖默认值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">WebFluxConfigurer</span> <span class="nf">corsMappingConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">WebFluxConfigurer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCorsMappings</span><span class="o">(</span><span class="n">CorsRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">WebConfigProperties</span><span class="o">.</span><span class="na">Cors</span> <span class="n">cors</span> <span class="o">=</span> <span class="n">webConfigProperties</span><span class="o">.</span><span class="na">getCors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">registry</span><span class="o">.</span><span class="na">addMapping</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="na">allowedOrigins</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedOrigins</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="na">allowedMethods</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedMethods</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="na">maxAge</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getMaxAge</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="na">allowedHeaders</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getAllowedHeaders</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="na">exposedHeaders</span><span class="o">(</span><span class="n">cors</span><span class="o">.</span><span class="na">getExposedHeaders</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">};</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="使用-webfilter-启用-cors">使用 <code>WebFilter</code> 启用 CORS</h3>
<p>Webflux 框架允许通过 <code>CorsWebFilter</code> 全局设置 CORS 配置。我们可以使用 <code>CorsConfiguration</code> 对象来设置所需的配置并注册要与过滤器一起使用的 <code>CorsConfigurationSource</code> 。</p>
<p>但是，默认情况下，过滤器中的 <code>CorsConfiguration</code> 不会将默认配置分配给端点！只能应用指定的配置。</p>
<p>另一种选择是显式调用 <code>CorsConfiguration.applyPermitDefaultValues()</code> 。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="n">CorsWebFilter</span> <span class="nf">corsWebFilter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">CorsConfiguration</span> <span class="n">corsConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CorsConfiguration</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;http://localhost:4200&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">corsConfig</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="n">3600L</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;*&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedHeader</span><span class="o">(</span><span class="s">&#34;Requestor-Type&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">corsConfig</span><span class="o">.</span><span class="na">addExposedHeader</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">UrlBasedCorsConfigurationSource</span> <span class="n">source</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">UrlBasedCorsConfigurationSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">source</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">,</span> <span class="n">corsConfig</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">CorsWebFilter</span><span class="o">(</span><span class="n">source</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="使用-spring-security-启用-cors">使用 Spring Security 启用 CORS</h2>
<p>如果 Spring Security 应用于 Spring 应用程序，则必须在 Spring Security 生效之前处理 CORS，因为预检请求不会包含 cookie，并且 Spring Security 将拒绝该请求，因为它将确定用户未经过身份验证。这里显示的示例将演示基本身份验证。</p>
<p>为了应用 Spring 安全性，我们将添加以下依赖 Maven：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-security<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>Gradle:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-groovy" data-lang="groovy"><span class="line"><span class="cl">  <span class="n">implementation</span> <span class="s1">&#39;org.springframework.boot:spring-boot-starter-security&#39;</span>
</span></span></code></pre></div><h3 id="spring-security-应用于-spring-web-mvc">Spring Security 应用于 Spring Web MVC</h3>
<p>Spring security 默认保护每个端点。但是，这会导致 CORS 错误，因为浏览器的 <code>OPTIONS</code> 预检请求将被阻止。要使 Spring Security 绕过预检请求，我们需要将 <code>http.cors()</code> 添加到 <code>HTTPSecurity</code> 对象，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="n">BasicAuthConfigProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BasicAuthConfigProperties</span> <span class="n">basicAuth</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityConfiguration</span><span class="o">(</span><span class="n">BasicAuthConfigProperties</span> <span class="n">basicAuth</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">basicAuth</span> <span class="o">=</span> <span class="n">basicAuth</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span><span class="o">.</span><span class="na">cors</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>要在绕过预检请求后使用 Spring Security 设置额外的 CORS 配置，我们可以使用 <code>@CrossOrigin</code> 注释来配置 CORS：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">maxAge</span> <span class="o">=</span> <span class="n">3600</span><span class="o">,</span> <span class="n">allowCredentials</span> <span class="o">=</span> <span class="s">&#34;true&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RestController</span>
</span></span><span class="line"><span class="cl"><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;cors-library/managed/books&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LibraryController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">LibraryController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LibraryService</span> <span class="n">libraryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">LibraryController</span><span class="o">(</span><span class="n">LibraryService</span> <span class="n">libraryService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">libraryService</span> <span class="o">=</span> <span class="n">libraryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">&#34;http://localhost:4200&#34;</span><span class="o">,</span> <span class="n">allowedHeaders</span> <span class="o">=</span> <span class="o">{</span><span class="s">&#34;Requestor-Type&#34;</span><span class="o">,</span> <span class="s">&#34;Authorization&#34;</span><span class="o">},</span> <span class="n">exposedHeaders</span> <span class="o">=</span> <span class="s">&#34;X-Get-Header&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">BookDto</span><span class="o">&gt;&gt;</span> <span class="nf">getBooks</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpHeaders</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">headers</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">,</span> <span class="s">&#34;ExampleHeader&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">().</span><span class="na">headers</span><span class="o">(</span><span class="n">headers</span><span class="o">).</span><span class="na">body</span><span class="o">(</span><span class="n">libraryService</span><span class="o">.</span><span class="na">getAllBooks</span><span class="o">(</span><span class="n">type</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>或者，我们可以创建一个 <code>CorsConfigurationSource</code> bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl"><span class="n">CorsConfigurationSource</span> <span class="nf">corsConfigurationSource</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">CorsConfiguration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CorsConfiguration</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;http://localhost:4200&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedMethods</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;GET&#34;</span><span class="o">,</span><span class="s">&#34;POST&#34;</span><span class="o">,</span><span class="s">&#34;PATCH&#34;</span><span class="o">,</span> <span class="s">&#34;PUT&#34;</span><span class="o">,</span> <span class="s">&#34;DELETE&#34;</span><span class="o">,</span> <span class="s">&#34;OPTIONS&#34;</span><span class="o">,</span> <span class="s">&#34;HEAD&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowCredentials</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedHeaders</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;Authorization&#34;</span><span class="o">,</span> <span class="s">&#34;Requestor-Type&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setExposedHeaders</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">configuration</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="n">3600L</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">UrlBasedCorsConfigurationSource</span> <span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UrlBasedCorsConfigurationSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">source</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">,</span> <span class="n">configuration</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">source</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="spring-security-应用于-spring-webflux">Spring Security 应用于 Spring Webflux</h3>
<p>对于 Webflux，尽管使用 Spring Security，将 CORS 配置应用于传入请求的最首选方法是使用 <code>CorsWebFilter</code> 。我们可以禁用 CORS 与 Spring security 的集成，而是通过提供 <code>CorsConfigurationSource</code> 与 <code>CorsWebFilter</code> 集成：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebFluxSecurity</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="n">BasicAuthConfigProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">BasicAuthConfigProperties</span> <span class="n">basicAuth</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityConfiguration</span><span class="o">(</span><span class="n">BasicAuthConfigProperties</span> <span class="n">basicAuth</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">basicAuth</span> <span class="o">=</span> <span class="n">basicAuth</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">SecurityWebFilterChain</span> <span class="nf">securityWebFilterChain</span><span class="o">(</span><span class="n">ServerHttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span><span class="o">.</span><span class="na">cors</span><span class="o">(</span><span class="n">cors</span> <span class="o">-&gt;</span> <span class="n">cors</span><span class="o">.</span><span class="na">disable</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">securityMatcher</span><span class="o">(</span><span class="k">new</span> <span class="n">PathPatternParserServerWebExchangeMatcher</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizeExchange</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">anyExchange</span><span class="o">().</span><span class="na">authenticated</span><span class="o">().</span><span class="na">and</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">httpBasic</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MapReactiveUserDetailsService</span> <span class="nf">userDetailsService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">UserDetails</span> <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="na">withDefaultPasswordEncoder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">username</span><span class="o">(</span><span class="n">basicAuth</span><span class="o">.</span><span class="na">getUsername</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="n">basicAuth</span><span class="o">.</span><span class="na">getPassword</span><span class="o">())</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">roles</span><span class="o">(</span><span class="s">&#34;USER&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">MapReactiveUserDetailsService</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CorsConfigurationSource</span> <span class="nf">corsConfiguration</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CorsConfiguration</span> <span class="n">corsConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CorsConfiguration</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">applyPermitDefaultValues</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowCredentials</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;GET&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;PATCH&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;POST&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">addAllowedMethod</span><span class="o">(</span><span class="s">&#34;OPTIONS&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;http://localhost:4200&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowedHeaders</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;Authorization&#34;</span><span class="o">,</span> <span class="s">&#34;Requestor-Type&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setExposedHeaders</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;X-Get-Header&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">UrlBasedCorsConfigurationSource</span> <span class="n">source</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">                <span class="k">new</span> <span class="n">UrlBasedCorsConfigurationSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">source</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">,</span> <span class="n">corsConfig</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">source</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CorsWebFilter</span> <span class="nf">corsWebFilter</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">CorsWebFilter</span><span class="o">(</span><span class="n">corsConfiguration</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="结论">结论</h2>
<p>简而言之，CORS 配置取决于多个因素：</p>
<ul>
<li>Spring Web / Spring Webflux</li>
<li>本地/全局 CORS 配置</li>
<li>是否使用 Spring Security</li>
</ul>
<p>根据框架，我们可以决定哪种方法效果最好并且最容易实现，这样我们就可以避免 CORS 错误。您可以使用 <a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/cors/configuring-cors-with-spring">GitHub 上的示例应用程序</a>。</p>
<p>原文链接：<a href="https://reflectoring.io/spring-cors/">https://reflectoring.io/spring-cors/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]使用Spring Boot Actuator公开有用的信息端点</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/spring-boot-info-endpoint/</link>
      <pubDate>Wed, 26 Jul 2023 07:05:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/spring-boot-info-endpoint/</guid>
      <description>在分布式、快节奏的环境中，开发团队通常希望了解他们部署应用程序的时间、部署的应用程序版本、部署的 Git 提交等等。 Spring Boot Actuator帮助我们监控</description>
      <content:encoded><![CDATA[<p>在分布式、快节奏的环境中，开发团队通常希望了解他们部署应用程序的时间、部署的应用程序版本、部署的 Git 提交等等。</p>
<p>Spring Boot Actuator帮助我们监控和管理应用程序。它公开了提供应用程序运行状况、指标和其他相关信息的各种端点。</p>
<p>在本文中，我们将了解如何使用 Spring Boot Actuator 和 Maven/Gradle 构建插件将此类信息添加到我们的项目中。</p>
<h2 id="示例代码">示例代码</h2>
<p>本文附有 GitHub 上的工作<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/spring-boot-app-info">代码示例</a>。</p>
<h2 id="启用-spring-boot-执行器">启用 Spring Boot 执行器</h2>
<p>Spring Boot Actuator是Spring Boot的一个子项目。在本节中，我们将快速了解如何引导示例项目并启用 <code>/info</code> 端点。如果您想了解更多有关 Spring Boot Actuator 的信息，已经有一个很棒的<a href="https://reflectoring.io/exploring-a-spring-boot-app-with-actuator-and-jq/">教程</a>了。</p>
<p>让我们使用 <a href="https://start.spring.io/">Spring Initializr</a> 快速创建一个 Spring Boot 项目。我们将需要以下依赖项：</p>
<table>
<thead>
<tr>
<th>依赖性</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td>Spring Boot Actuator</td>
<td>公开应用程序管理端点，例如 <code>info</code> 。</td>
</tr>
<tr>
<td>Spring Web</td>
<td>启用 Web 应用程序行为。</td>
</tr>
</tbody>
</table>
<p>如果有帮助，这里是 <a href="https://start.spring.io/#!type=maven-project&amp;language=java&amp;platformVersion=2.6.4&amp;packaging=jar&amp;jvmVersion=11&amp;groupId=io.reflectoring&amp;artifactId=demo&amp;name=Demo%20Application&amp;description=Demo%20project%20for%20Spring%20Boot%20Application%20Info&amp;packageName=io.reflectoring.demo&amp;dependencies=web,actuator">Maven</a> 和 <a href="https://start.spring.io/#!type=gradle-project&amp;language=java&amp;platformVersion=2.6.4&amp;packaging=jar&amp;jvmVersion=11&amp;groupId=io.reflectoring&amp;artifactId=demo&amp;name=Demo%20Application&amp;description=Demo%20project%20for%20Spring%20Boot%20Application%20Info&amp;packageName=io.reflectoring.demo&amp;dependencies=web,actuator">Gradle</a> 中预填充项目的链接。</p>
<p>项目构建后，我们将通过 HTTP 公开内置的 <code>/info</code> 端点。默认情况下， <code>/info</code> Web 端点处于禁用状态。我们可以通过在 <code>application.properties</code> 配置中添加 <code>management.endpoints.web.exposure.include</code> 属性来简单地启用它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">management.endpoints.web.exposure.include</span><span class="o">=</span><span class="s">health,info</span>
</span></span></code></pre></div><p>让我们运行 Spring Boot 应用程序并在浏览器中打开 URL <code>http://localhost:8080/actuator/info</code> 。目前还看不到任何有用的东西，因为我们仍然需要进行一些配置更改。在下一节中，我们将了解如何在此响应中添加信息丰富的构建信息。</p>
<blockquote>
<h4 id="保护端点">保护端点</h4>
<p>如果您公开公开端点，请确保适当<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.security">保护</a>它们。我们不应在不知情的情况下泄露任何敏感信息。</p>
</blockquote>
<h2 id="spring-boot应用程序信息">Spring Boot应用程序信息</h2>
<p>Spring 从应用程序上下文中定义的各种 <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/actuate/info/InfoContributor.html">InfoContributor</a> bean 收集有用的应用程序信息。下面是默认 <code>InfoContributor</code> beans 的摘要：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>Bean Name</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>build</code></td>
<td><code>BuildInfoContributor</code></td>
<td>公开构建信息。</td>
</tr>
<tr>
<td><code>env</code></td>
<td><code>EnvironmentInfoContributor</code></td>
<td>公开 <code>Environment</code> 中名称以 <code>info.</code> 开头的任何属性</td>
</tr>
<tr>
<td><code>git</code></td>
<td><code>GitInfoContributor</code></td>
<td>公开 Git 相关信息。</td>
</tr>
<tr>
<td><code>java</code></td>
<td><code>JavaInfoContributor</code></td>
<td>公开 Java 运行时信息。</td>
</tr>
</tbody>
</table>
<p><strong>默认情况下， <code>env</code> 和 <code>java</code> 贡献者被禁用。</strong></p>
<p>首先，我们将通过在 <code>application.properties</code> 中添加以下键值对来启用 <code>java</code> 贡献者：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">management.info.java.enabled</span><span class="o">=</span><span class="s">true</span>
</span></span></code></pre></div><p>让我们重新运行该应用程序。如果我们在浏览器中再次打开执行器 <code>/info</code> 端点，我们会得到如下输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;java&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;vendor&#34;</span><span class="p">:</span> <span class="s2">&#34;Eclipse Adoptium&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;11.0.14&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;runtime&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;OpenJDK Runtime Environment&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;11.0.14+9&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;jvm&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;OpenJDK 64-Bit Server VM&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;vendor&#34;</span><span class="p">:</span> <span class="s2">&#34;Eclipse Adoptium&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;11.0.14+9&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>根据安装的 Java 版本，您可能会看到不同的值。</p>
<p>现在，是时候显示环境变量了。 Spring 会选取属性名称以 <code>info</code> 开头的任何环境变量。要查看实际效果，让我们在 <code>application.properties</code> 文件中添加以下属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">management.info.env.enabled</span><span class="o">=</span><span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">info.app.website</span><span class="o">=</span><span class="s">reflectoring.io</span>
</span></span></code></pre></div><p>重新启动应用程序后，我们将开始看到添加到执行器 <code>info</code> 端点的以下信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;app&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;website&#34;</span><span class="p">:</span> <span class="s2">&#34;reflectoring.io&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>请随意添加您想要的任意数量的信息变量:)</p>
<p>在以下部分中，我们将了解如何添加 Git 和应用程序构建特定信息。</p>
<h2 id="添加构建信息">添加构建信息</h2>
<p>添加有用的<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.build.generate-info">构建信息</a>有助于快速识别构建工件名称、版本、创建时间等。它可以方便地检查团队是否部署了应用程序的相关版本。 Spring Boot 允许使用 Maven 或 Gradle 构建插件轻松添加此内容。</p>
<h3 id="使用-maven-插件">使用 Maven 插件</h3>
<p>Spring Boot Maven 插件捆绑了许多有用的功能，例如创建可执行 jar 或 war 存档、运行应用程序等。它还提供了一种添加应用程序构建信息的方法。</p>
<p>如果存在有效的 <code>META-INF/build-info.properties</code> 文件，Spring Boot Actuator 将显示构建详细信息。 Spring Boot Maven 插件的 <code>build-info</code> 目标是创建此文件。</p>
<p>如果您使用 Spring Initializr 引导项目，则默认情况下该插件将出现在 <code>pom.xml</code> 中。我们只需添加 <code>build-info</code> 执行目标，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;version&gt;</span>2.6.4<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;executions&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;execution&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;goals&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;goal&gt;</span>build-info<span class="nt">&lt;/goal&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;/goals&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/execution&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/executions&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div><p>如果我们现在运行命令 <code>./mvnw spring-boot:run</code> （对于 Linux/macOS）或 <code>mvnw.bat spring-boot:run</code> （对于 Windows），所需的文件将在 <code>target/classes/META-INF/build-info.properties</code> 中创建。</p>
<p><strong>文件内容将与此类似：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-properties" data-lang="properties"><span class="line"><span class="cl"><span class="na">build.artifact</span><span class="o">=</span><span class="s">spring-boot-build-info</span>
</span></span><span class="line"><span class="cl"><span class="na">build.group</span><span class="o">=</span><span class="s">io.reflectoring</span>
</span></span><span class="line"><span class="cl"><span class="na">build.name</span><span class="o">=</span><span class="s">spring-boot-build-info</span>
</span></span><span class="line"><span class="cl"><span class="na">build.time</span><span class="o">=</span><span class="s">2022-03-06T05\:53\:45.236Z</span>
</span></span><span class="line"><span class="cl"><span class="na">build.version</span><span class="o">=</span><span class="s">0.0.1-SNAPSHOT</span>
</span></span></code></pre></div><p>我们还可以使用 <code>additionalProperties</code> 属性将自定义属性添加到此列表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;execution&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;goals&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;goal&gt;</span>build-info<span class="nt">&lt;/goal&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/goals&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;additionalProperties&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;custom.key1&gt;</span>value1<span class="nt">&lt;/custom.key1&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&lt;custom.key2&gt;</span>value2<span class="nt">&lt;/custom.key2&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/additionalProperties&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/execution&gt;</span>
</span></span></code></pre></div><p>如果我们现在运行应用程序并在浏览器中打开 <code>http://localhost:8080/actuator/info</code> 端点，我们将看到类似于以下内容的响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;build&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;custom&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key2&#34;</span><span class="p">:</span> <span class="s2">&#34;value2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;key1&#34;</span><span class="p">:</span> <span class="s2">&#34;value1&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;0.0.1-SNAPSHOT&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;artifact&#34;</span><span class="p">:</span> <span class="s2">&#34;spring-boot-build-info&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;spring-boot-build-info&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;time&#34;</span><span class="p">:</span> <span class="s2">&#34;2022-03-06T06:34:30.306Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;io.reflectoring&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>如果您想排除任何可以使用 <code>excludeInfoProperties</code> 配置的属性。让我们看看如何排除 <code>artifact</code> 属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;excludeInfoProperties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;infoProperty&gt;</span>artifact<span class="nt">&lt;/infoProperty&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/excludeInfoProperties&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span>
</span></span></code></pre></div><p>请参阅 Spring Boot <a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#goals-build-info">官方文档</a>了解更多信息。</p>
<p>现在，是时候看看我们如何使用 Spring Boot Gradle 插件实现相同的输出了。</p>
<h3 id="使用-gradle-插件">使用 Gradle 插件</h3>
<p>添加构建信息的最简单方法是使用插件 DSL。在 <code>build.gradle</code> 文件中，我们需要添加以下块：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gradle" data-lang="gradle"><span class="line"><span class="cl"><span class="n">springBoot</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">buildInfo</span><span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>如果我们现在同步 Gradle 项目，我们可以看到一个新任务 <code>bootBuildInfo</code> 可供使用。运行该任务将生成带有构建信息的类似 <code>build/resources/main/META-INF/build-info.properties</code> 文件（源自项目）。使用 DSL，我们可以自定义现有值或添加新属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gradle" data-lang="gradle"><span class="line"><span class="cl"><span class="n">springBoot</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">buildInfo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">properties</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Sample App&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="n">additional</span> <span class="o">=</span> <span class="o">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;customKey&#39;</span><span class="o">:</span> <span class="s1">&#39;customValue&#39;</span>
</span></span><span class="line"><span class="cl">      <span class="o">]</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>是时候使用 <code>./gradlew bootRun</code> （对于 macOS/Linux）或 <code>gradlew.bat bootRun</code> （对于 Windows）命令运行应用程序了。应用程序运行后，我们可以在浏览器中打开 <code>http://localhost:8080/actuator/info</code> 端点并找到响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;build&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;customKey&#34;</span><span class="p">:</span> <span class="s2">&#34;customValue&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;0.0.1-SNAPSHOT&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;artifact&#34;</span><span class="p">:</span> <span class="s2">&#34;spring-boot-build-info&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Sample App&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;time&#34;</span><span class="p">:</span> <span class="s2">&#34;2022-03-06T09:11:53.380Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="s2">&#34;io.reflectoring&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们可以通过将其值设置为 <code>null</code> 来从生成的构建信息中排除任何默认属性。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gradle" data-lang="gradle"><span class="line"><span class="cl"><span class="n">properties</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">group</span> <span class="o">=</span> <span class="kc">null</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>想了解更多关于该插件的信息，可以参考 Spring Boot <a href="https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#integrating-with-actuator">官方文档</a>。</p>
<h2 id="添加-git-信息">添加 Git 信息</h2>
<p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.build.generate-git-info">Git 信息</a>可以方便地快速识别生产中是否存在相关代码或者分布式部署是否与预期同步。 Spring Boot 可以使用 Maven 和 Gradle 插件轻松地将 Git 属性包含在 Actuator 端点中。</p>
<p>使用这个插件我们可以生成一个 <code>git.properties</code> 文件。此文件的存在将自动配置 <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/info/GitProperties.html">GitProperties</a> bean，供 <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/actuate/info/GitInfoContributor.html">GitInfoContributor</a> bean 使用来整理相关信息。</p>
<p><strong>默认情况下，将公开以下信息：</strong></p>
<ul>
<li><code>git.branch</code></li>
<li><code>git.commit.id</code></li>
<li><code>git.commit.time</code></li>
</ul>
<p>以下管理应用程序属性控制 Git 相关信息：</p>
<table>
<thead>
<tr>
<th>应用属性</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>management.info.git.enabled=false</code></td>
<td>完全从 <code>info</code> 端点禁用 Git 信息</td>
</tr>
<tr>
<td><code>management.info.git.mode=full</code></td>
<td>显示 <code>git.properties</code> 文件中的所有属性</td>
</tr>
</tbody>
</table>
<h3 id="使用-maven-插件-1">使用 Maven 插件</h3>
<p><a href="https://github.com/git-commit-id/git-commit-id-maven-plugin">Maven Git Commit ID 插件</a>通过 <code>spring-boot-starter-parent</code> pom.xml 进行管理。要使用它，我们必须编辑 <code>pom.xml</code> 如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;groupId&gt;</span>pl.project13.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;artifactId&gt;</span>git-commit-id-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div><p>如果我们运行该项目并在浏览器中打开 <code>/actuator/info</code> 端点，它将返回Git相关信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;git&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;branch&#34;</span><span class="p">:</span> <span class="s2">&#34;main&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;commit&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;5404bdf&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;time&#34;</span><span class="p">:</span> <span class="s2">&#34;2022-03-06T10:34:16Z&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们还可以检查 <code>target/classes/git.properties</code> 下生成的文件。这对我来说是这样的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">#Generated by Git-Commit-Id-Plugin
</span></span><span class="line"><span class="cl">git.branch=main
</span></span><span class="line"><span class="cl">git.build.host=mylaptop
</span></span><span class="line"><span class="cl">git.build.time=2022-03-06T23\:22\:16+0530
</span></span><span class="line"><span class="cl">git.build.user.email=user@email.com
</span></span><span class="line"><span class="cl">git.build.user.name=user
</span></span><span class="line"><span class="cl">git.build.version=0.0.1-SNAPSHOT
</span></span><span class="line"><span class="cl">git.closest.tag.commit.count=
</span></span><span class="line"><span class="cl">git.closest.tag.name=
</span></span><span class="line"><span class="cl">git.commit.author.time=2022-03-06T22\:46\:56+0530
</span></span><span class="line"><span class="cl">git.commit.committer.time=2022-03-06T22\:46\:56+0530
</span></span><span class="line"><span class="cl">git.commit.id=e9fa20d4914367c1632e3a0eb8ca4d2f32b31a89
</span></span><span class="line"><span class="cl">git.commit.id.abbrev=e9fa20d
</span></span><span class="line"><span class="cl">git.commit.id.describe=e9fa20d-dirty
</span></span><span class="line"><span class="cl">git.commit.id.describe-short=e9fa20d-dirty
</span></span><span class="line"><span class="cl">git.commit.message.full=Update config
</span></span><span class="line"><span class="cl">git.commit.message.short=Update config
</span></span><span class="line"><span class="cl">git.commit.time=2022-03-06T22\:46\:56+0530
</span></span><span class="line"><span class="cl">git.commit.user.email=saikat@email.com
</span></span><span class="line"><span class="cl">git.commit.user.name=Saikat
</span></span><span class="line"><span class="cl">git.dirty=true
</span></span><span class="line"><span class="cl">git.local.branch.ahead=NO_REMOTE
</span></span><span class="line"><span class="cl">git.local.branch.behind=NO_REMOTE
</span></span><span class="line"><span class="cl">git.remote.origin.url=Unknown
</span></span><span class="line"><span class="cl">git.tags=
</span></span><span class="line"><span class="cl">git.total.commit.count=2
</span></span></code></pre></div><p>这个插件带有很多<a href="https://github.com/git-commit-id/git-commit-id-maven-plugin/blob/master/docs/using-the-plugin.md">配置</a>选项。例如，要包含/排除特定属性，我们可以添加 <code>configuration</code> 部分，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;excludeProperties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;excludeProperty&gt;</span>time<span class="nt">&lt;/excludeProperty&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/excludeProperties&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;includeOnlyProperties&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;property&gt;</span>git.commit.id<span class="nt">&lt;/property&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/includeOnlyProperties&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/configuration&gt;</span>
</span></span></code></pre></div><p>它将生成如下输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;git&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;commit&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;5404bdf&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><blockquote>
<p>译者备注：</p>
<p>使用 4.9.10 版本时，如果想指定输出内容，需要这样设置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;plugin&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>pl.project13.maven<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>git-commit-id-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;version&gt;</span>4.9.10<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;executions&gt;</span>
</span></span><span class="line"><span class="cl">       <span class="nt">&lt;execution&gt;</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&lt;goals&gt;</span>
</span></span><span class="line"><span class="cl">               <span class="nt">&lt;goal&gt;</span>revision<span class="nt">&lt;/goal&gt;</span>
</span></span><span class="line"><span class="cl">           <span class="nt">&lt;/goals&gt;</span>
</span></span><span class="line"><span class="cl">       <span class="nt">&lt;/execution&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/executions&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;configuration&gt;</span>
</span></span><span class="line"><span class="cl">       <span class="nt">&lt;generateGitPropertiesFile&gt;</span>true<span class="nt">&lt;/generateGitPropertiesFile&gt;</span>
</span></span><span class="line"><span class="cl">       <span class="nt">&lt;dateFormat&gt;</span>yyyy-MM-dd HH:mm:ss<span class="nt">&lt;/dateFormat&gt;</span>
</span></span><span class="line"><span class="cl">       <span class="nt">&lt;dateFormatTimeZone&gt;</span>GMT+8<span class="nt">&lt;/dateFormatTimeZone&gt;</span>           <span class="nt">&lt;includeOnlyProperties&gt;</span>git.branch,git.build.time,git.build.version,git.commit.id,git.commit.time,git.commit.message.full<span class="nt">&lt;/includeOnlyProperties&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;/configuration&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/plugin&gt;</span>
</span></span></code></pre></div></blockquote>
<p>现在让我们看看 Gradle 用户可以使用哪些选项。</p>
<h3 id="使用-gradle-插件-1">使用 Gradle 插件</h3>
<p>在 <code>build.gradle</code> 中，我们将添加 <code>gradle-git-properties</code> 插件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gradle" data-lang="gradle"><span class="line"><span class="cl"><span class="n">plugins</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="s1">&#39;com.gorylenko.gradle-git-properties&#39;</span> <span class="n">version</span> <span class="s1">&#39;2.4.0&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在让我们构建 Gradle 项目。我们可以看到 <code>build/resources/main/git.properties</code> 文件已创建。并且，执行器 <code>info</code> 端点将显示相同的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;git&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;branch&#34;</span><span class="p">:</span> <span class="s2">&#34;main&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;commit&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;5404bdf&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;time&#34;</span><span class="p">:</span> <span class="s2">&#34;2022-03-06T10:34:16Z&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>该插件也提供了多种使用属性 <code>gitProperties</code> 配置输出的方法。例如，我们通过添加以下内容来限制要出现的键：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gradle" data-lang="gradle"><span class="line"><span class="cl"><span class="n">gitProperties</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">keys</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;git.commit.id&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>重新运行应用程序现在将显示有限的 Git 信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;git&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;commit&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;5404bdf&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="结论">结论</h2>
<p>在本文中，我们学习了如何使用 Spring Actuator 来公开有关我们应用程序的相关信息。我们了解了如何将有关构建、环境、Git 和 Java 环境的信息添加到 Actuator <code>/info</code> 端点。我们还研究了如何通过 Maven/Gradle 构建插件配置和控制所有这些信息。</p>
<p>您可以使用 GitHub 上的<a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/spring-boot-app-info">代码</a>来尝试一个完整的应用程序来说明这些想法。</p>
<p>原文链接：<a href="https://reflectoring.io/spring-boot-info-endpoint/">https://reflectoring.io/spring-boot-info-endpoint/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]在 Spring 中实现 OAuth2：使用范围（第 2 部分）</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/using-oauth2-in-spring-scopes/</link>
      <pubDate>Wed, 26 Jul 2023 07:05:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/using-oauth2-in-spring-scopes/</guid>
      <description>我们在上一篇文章中了解了基本的 OAuth2 概念以及如何在 Spring 中实现和执行不同的授权。在这篇文章中，我们将介绍 OAuth2 的另一个重要概念：范围。 OAuth 范围 保护对应用程</description>
      <content:encoded><![CDATA[<p>我们在<a href="/posts/2023/07/26/using-oauth2-in-spring/">上一篇文章</a>中了解了基本的 OAuth2 概念以及如何在 Spring 中实现和执行不同的授权。在这篇文章中，我们将介绍 OAuth2 的另一个重要概念：范围。</p>
<h2 id="oauth-范围">OAuth 范围</h2>
<p>保护对应用程序的访问通常分两个步骤进行：身份验证和授权。要理解这两个概念，假设您在绝密政府大楼工作。在开始之前，你会得到一张卡片，可以让你进入建筑物。 OAuth 令牌可以看作是允许您访问的卡片。</p>
<p>一旦你进去，你决定去三楼见你的一位同事，在尝试使用你的卡打开三楼的门后，你听到一声嘟嘟声，告诉你你没有被授权。在 OAuth 中，范围是一种定义令牌可以访问哪些资源以及不能访问哪些资源的方法。范围允许访问控制，并且可以被视为相当于传统身份验证中的用户角色。</p>
<h2 id="实现">实现</h2>
<p>为了演示范围，我们将使用第 1 部分中的<a href="https://github.com/zak905/oauth2-example">示例</a>。</p>
<p>在<a href="https://github.com/zak905/oauth2-example/blob/master/resource-server/src/main/java/com/gwidgets/examples/resourceserver/ResourceController.java">资源服务器</a>的控制器中，我们有以下端点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourceController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/foo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;foo&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/bar&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">bar</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;bar&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@DeleteMapping</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">test</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;test&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>第一步是使用所需的范围配置<a href="https://github.com/zak905/oauth2-example/blob/master/authorization-server/src/main/java/com/gwidgets/examples/authorizationserver/AuthorizationSecurityConfig.java#L34">授权服务器</a>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="n">clients</span><span class="o">.</span><span class="na">inMemory</span><span class="o">().</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;my-trusted-client&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;refresh_token&#34;</span><span class="o">,</span> <span class="s">&#34;implicit&#34;</span><span class="o">,</span> <span class="s">&#34;client_credentials&#34;</span><span class="o">,</span> <span class="s">&#34;authorization_code&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;CLIENT&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">,</span> <span class="s">&#34;write&#34;</span><span class="o">,</span> <span class="s">&#34;trust&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">accessTokenValiditySeconds</span><span class="o">(</span><span class="n">60</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">redirectUris</span><span class="o">(</span><span class="s">&#34;http://localhost:8081/test.html&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">resourceIds</span><span class="o">(</span><span class="s">&#34;resource&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;mysecret&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"> 
</span></span></code></pre></div><p>要在资源服务器中启用范围检查，我们有两个选项：使用安全配置或使用方法安全性。</p>
<ul>
<li>使用安全配置：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">http</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">			 <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span><span class="s">&#34;/hello&#34;</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;read&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			 <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span><span class="s">&#34;/foo&#34;</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;read&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			 <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span><span class="s">&#34;/bar&#34;</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;write&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			 <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">,</span><span class="s">&#34;/test&#34;</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;trust&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">().</span>
</span></span><span class="line"><span class="cl">			 <span class="n">and</span><span class="o">().</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span></code></pre></div><ul>
<li>使用方法安全性：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;read&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;read&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/foo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;foo&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;write&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/bar&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">bar</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;bar&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@PreAuthorize</span><span class="o">(</span><span class="s">&#34;#oauth2.hasScope(&#39;trust&#39;)&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@DeleteMapping</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">test</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;test&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span></code></pre></div><p>另外，我们需要将 <code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code> 添加到 Spring 可以获取的任何类（ <code>@Configuration</code> 、 <code>@Service</code> 等）。在我们的示例中，我们已将其添加到 <a href="https://github.com/zak905/oauth2-example/blob/master/resource-server/src/main/java/com/gwidgets/examples/resourceserver/ResourceSecurityConfiguration.java#L18">ResourceSecurityConfiguration</a> 类中。 <code>prePostEnabled = true</code> 告诉 Spring 启用前注解和后注解，例如 <code>@PreAuthorize</code> 、 <code>@PostFilter</code> 等&hellip;&hellip;</p>
<p>对于那些想了解 <code>#oauth2.hasScope('trust')</code> 这样的表达式的人来说，它们是使用 <a href="https://docs.spring.io/spring/docs/4.3.12.RELEASE/spring-framework-reference/html/expressions.html">Spring 表达式语言</a>（SpEL）构建的。</p>
<h2 id="行动范围">行动范围</h2>
<p>默认情况下，如果令牌请求中不存在范围，Spring 会假定令牌具有所有配置的范围。让我们首先请求一个具有 <code>read</code> 范围的令牌：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;grant_type=client_credentials&amp;client_id=my-trusted-client&amp;scope=read&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;acadbb31-f126-411d-ae5b-6a278cee2ed6&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;read&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span></code></pre></div><p>现在，我们可以使用令牌来访问具有 <code>read</code> 范围访问权限的端点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> curl -XGET localhost:8989/hello -H <span class="s2">&#34;Authorization: Bearer acadbb31-f126-411d-ae5b-6a278cee2ed6&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> hello
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">curl -XGET localhost:8989/foo -H <span class="s2">&#34;Authorization: Bearer acadbb31-f126-411d-ae5b-6a278cee2ed6&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> foo
</span></span></code></pre></div><p>现在，让我们尝试在仅接受 <code>write</code> 范围的端点上使用此令牌：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -XPOST localhost:8989/bar -H <span class="s2">&#34;Authorization: Bearer acadbb31-f126-411d-ae5b-6a278cee2ed6&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;access_denied&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;error_description&#34;</span><span class="p">:</span> <span class="s2">&#34;Access is denied&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>由于令牌不具有所需的范围，因此访问被拒绝。让我们尝试获取一个具有 <code>write</code> 范围的新令牌，然后重试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;grant_type=client_credentials&amp;client_id=my-trusted-client&amp;scope=write&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;bf0fa83a-23bd-4633-ac6c-a06f40d53e5f&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">3599</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;write&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -XPOST localhost:8989/bar -H <span class="s2">&#34;Authorization: Bearer bf0fa83a-23bd-4633-ac6c-a06f40d53e5f&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bar
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>范围是 OAuth 的一个重要方面，因为令牌不携带有关其用户或请求者的信息。范围允许限制对资源的访问，以实现更好的访问控制和安全性。在下一篇文章中，我们将了解如何将 Google 和 Facebook 等外部 OAuth 提供商集成到流程中。</p>
<p>原文链接：<a href="http://www.zakariaamine.com/2018-03-01/using-oauth2-in-spring-scopes/">http://www.zakariaamine.com/2018-03-01/using-oauth2-in-spring-scopes/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[译]在 Spring 中实现 OAuth2：第 1 部分</title>
      <link>https://blog.chensoul.com/posts/2023/07/26/using-oauth2-in-spring/</link>
      <pubDate>Wed, 26 Jul 2023 07:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/26/using-oauth2-in-spring/</guid>
      <description>OAuth2 是一组规范，主要提供对 Rest API 的安全访问的方法。 OAuth 的主要目的是允许通过使用令牌来执行身份验证和授权，而不必为每个操作提供凭据。由于本文的重点是</description>
      <content:encoded><![CDATA[<p>OAuth2 是一组规范，主要提供对 Rest API 的安全访问的方法。 OAuth 的主要目的是允许通过使用令牌来执行身份验证和授权，而不必为每个操作提供凭据。由于本文的重点是实现，并且为了不重新发明轮子，可以查看 <a href="https://tools.ietf.org/html/rfc6749">OAuth RFC</a> 或<a href="https://en.wikipedia.org/wiki/OAuth">维基百科</a>以获取更多理论背景。在这篇文章中，我们将深入探讨 Spring 中的 OAuth2 实现以及如何使用不同的授权类型，但在此之前值得提供一些重要概念的简要定义。</p>
<h2 id="访问令牌和刷新令牌"><strong>访问令牌和刷新令牌</strong></h2>
<p>身份验证成功后将提供访问令牌以及刷新令牌。访问令牌有一个有限的有效期（标准为 1 小时），之后需要刷新令牌才能获取新的访问令牌和新的刷新令牌。 Referesh 令牌通常会在使用后过期。</p>
<h2 id="资源服务器和授权服务器">资源服务器和授权服务器</h2>
<p>OAuth 引入了授权服务器的概念，授权服务器是发出访问和刷新令牌的实体，并在每个操作中进行咨询以查看令牌是否有效。资源服务器只是由不同客户端应用程序（前端应用程序、移动设备、其他后端服务&hellip;&hellip;）访问的实际 Rest API。资源服务器和授权服务器可以是不同的实体，也可以是同一实体。</p>
<h2 id="授权类型">授权类型</h2>
<p>OAuth 中最常用的授权有：客户端凭据、密码、授权码和隐式授权。每项资助都有特定的流程和用例，但由于本文的重点不是理论，因此我们将重点关注其实施。有关授权及其用途的更多详细信息，请参阅 <a href="https://tools.ietf.org/html/rfc6749#page-8">OAuth RFC</a>。</p>
<h2 id="实现">实现</h2>
<p>在实现方面，我们将使用 Spring Boot 来利用其自动配置和引导功能，并更多地关注我们的核心主题。</p>
<ul>
<li>资源服务器：</li>
</ul>
<p>我们有一个资源服务器，其中包含我们希望保护的以下端点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@RestController</span><span class="o">(</span><span class="s">&#34;/&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourceController</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/hello&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hello</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/foo&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">foo</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;foo&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/bar&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">bar</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;bar&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;/test&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">test</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;test&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>为此，我们需要配置一个用 <code>@EnableResourceServer</code> 注释的 <code>ResourceServerConfigurerAdapter</code> bean：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableResourceServer</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourceSecurityConfiguration</span> <span class="kd">extends</span> <span class="n">ResourceServerConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">ResourceServerSecurityConfigurer</span> <span class="n">resources</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">resources</span><span class="o">.</span><span class="na">resourceId</span><span class="o">(</span><span class="s">&#34;resource&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">http</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/foo&#34;</span><span class="o">,</span> <span class="s">&#34;/bar&#34;</span><span class="o">,</span> <span class="s">&#34;/hello&#34;</span><span class="o">,</span> <span class="s">&#34;/test&#34;</span><span class="o">).</span><span class="na">authenticated</span><span class="o">().</span>
</span></span><span class="line"><span class="cl">                <span class="n">and</span><span class="o">().</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">RemoteTokenServices</span> <span class="nf">LocalTokenService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">final</span> <span class="n">RemoteTokenServices</span> <span class="n">tokenService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RemoteTokenServices</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">tokenService</span><span class="o">.</span><span class="na">setCheckTokenEndpointUrl</span><span class="o">(</span><span class="s">&#34;http://localhost:8081/oauth/check_token&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">tokenService</span><span class="o">.</span><span class="na">setClientId</span><span class="o">(</span><span class="s">&#34;my-client&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">tokenService</span><span class="o">.</span><span class="na">setClientSecret</span><span class="o">(</span><span class="s">&#34;mysecret&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">tokenService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>我们已经告诉 spring 检查端点的身份验证（可以使用 <code>&quot;/*&quot;</code> 或 <code>.anyRequest()</code> 来表示所有端点）。此外，我们还配置了一个 <code>RemoteTokenServices</code> bean 来告诉 Spring 提供令牌检查端点（授权服务器），并配置了客户端 id 和密钥。这样我们的资源服务器就配置好了。最后，我们设置了资源 id，如果多个资源服务器使用该资源（这很常见），则该资源 id 可以在授权服务器中用作标识。</p>
<ul>
<li>授权服务器：</li>
</ul>
<p>为了实现授权服务器，我们将使用内存客户端配置。 Spring Security 还提供了将 oauth 客户端配置存储在更适合生产应用程序的数据库中的可能性。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableAuthorizationServer</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationSecurityConfig</span> <span class="kd">extends</span> <span class="n">AuthorizationServerConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerEndpointsConfigurer</span> <span class="n">endpoints</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">endpoints</span><span class="o">.</span><span class="na">authenticationManager</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">ClientDetailsServiceConfigurer</span> <span class="n">clients</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">clients</span><span class="o">.</span><span class="na">inMemory</span><span class="o">().</span><span class="na">withClient</span><span class="o">(</span><span class="s">&#34;my-trusted-client&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorizedGrantTypes</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;refresh_token&#34;</span><span class="o">,</span> <span class="s">&#34;implicit&#34;</span><span class="o">,</span> <span class="s">&#34;client_credentials&#34;</span><span class="o">,</span> <span class="s">&#34;authorization_code&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;ROLE_CLIENT&#34;</span><span class="o">,</span> <span class="s">&#34;ROLE_TRUSTED_CLIENT&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">scopes</span><span class="o">(</span><span class="s">&#34;read&#34;</span><span class="o">,</span> <span class="s">&#34;write&#34;</span><span class="o">,</span> <span class="s">&#34;trust&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">accessTokenValiditySeconds</span><span class="o">(</span><span class="n">60</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">redirectUris</span><span class="o">(</span><span class="s">&#34;http://localhost:8081/test.html&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">resourceIds</span><span class="o">(</span><span class="s">&#34;resource&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">secret</span><span class="o">(</span><span class="s">&#34;mysecret&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthorizationServerSecurityConfigurer</span> <span class="n">oauthServer</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                 <span class="n">oauthServer</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">tokenKeyAccess</span><span class="o">(</span><span class="s">&#34;permitAll()&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">checkTokenAccess</span><span class="o">(</span><span class="s">&#34;permitAll()&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>除了我们在其中配置客户端、密钥、oauth 范围（下一篇文章中将详细介绍）、权限（与令牌关联的角色）、令牌有效性、资源 id 之外，我们还配置了对 Spring Boot 在 <code>/oauth/check_token</code> 处提供的检查令牌端点的访问，以及对也自动映射在 <code>/oauth/token</code> 处的令牌发行端点的访问。</p>
<h2 id="oauth-的实际应用">OAuth 的实际应用</h2>
<p>我们已将授权服务器配置为在端口 8081 上运行，将资源服务器配置为在端口 8989 上运行。对于下面的所有示例，都使用 <code>curl</code> ，但客户端可以是任何应用程序。</p>
<p>我们首先尝试访问资源服务器中的一个端点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl localhost:8989/foo
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;unauthorized&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;error_description&#34;</span><span class="p">:</span> <span class="s2">&#34;Full authentication is required to access this resource&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>让我们获取一个令牌并重试。</p>
<ul>
<li>客户凭证授予：</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;grant_type=client_credentials&amp;client_id=my-trusted-client&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;3670fea1-eab3-4981-b80a-e5c57203b20e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">51</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;read write trust&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们现在可以使用令牌来访问受保护的端点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -v localhost:8989/foo -H <span class="s2">&#34;Authorization: Bearer 6bb86f18-e69e-4c2b-8fbf-85d7d5b800a4&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">foo
</span></span></code></pre></div><p>客户端凭据授予不支持刷新令牌。</p>
<ul>
<li>密码授予：</li>
</ul>
<p>就获取令牌的流程而言，密码授予与客户端凭据类似，只是它使用实际的用户凭据。它还意味着需要为应用程序配置用户。 Web安全配置如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableWebSecurity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSecurity</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">auth</span><span class="o">.</span><span class="na">inMemoryAuthentication</span><span class="o">().</span><span class="na">withUser</span><span class="o">(</span><span class="s">&#34;gwidgets&#34;</span><span class="o">).</span><span class="na">password</span><span class="o">(</span><span class="s">&#34;gwidgets&#34;</span><span class="o">).</span><span class="na">authorities</span><span class="o">(</span><span class="s">&#34;CLIENT&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	 
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		 <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">().</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">().</span><span class="na">and</span><span class="o">().</span><span class="na">formLogin</span><span class="o">().</span><span class="na">defaultSuccessUrl</span><span class="o">(</span><span class="s">&#34;/test.html&#34;</span><span class="o">).</span><span class="na">and</span><span class="o">().</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后我们可以使用用户凭据来获取令牌，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;grant_type=password&amp;username=gwidgets&amp;password=gwidgets&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;3670fea1-eab3-4981-b80a-e5c57203b20e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">51</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;read write trust&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>密码授予不支持刷新令牌。</p>
<ul>
<li>隐式授予：</li>
</ul>
<p>隐式授权最适合前端路由应用程序。隐式授权需要基本身份验证和 HTTP 会话。为了执行隐式授权，我们将向授权服务器添加一个简单的 http 页面（它可以位于不同的服务器上）：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Title<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>we are here<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>要执行隐式授予，我们需要在浏览器中导航到以下地址：http://localhost:8081/oauth/authorize?response_type=token&amp;client_id=my-trusted-client&amp;redirect-uri=http://localhost:8081/test.html</p>
<p><img loading="lazy" src="https://s3-eu-west-1.amazonaws.com/gwidgets/login-spring.png" alt="Login redirect"  />
</p>
<p>登录后，我们得到一个OAuth审批页面（spring默认提供，但可以自定义）：</p>
<p><img loading="lazy" src="https://s3-eu-west-1.amazonaws.com/gwidgets/oauth-approval.png" alt="OAuth approval"  />

批准令牌的范围后，我们最终会重定向到我们的页面，在该页面中我们在 url 的哈希中找到令牌：</p>
<p><img loading="lazy" src="https://s3-eu-west-1.amazonaws.com/gwidgets/implicit_grant.png" alt="Implicit grant"  />
</p>
<ul>
<li>授权码授予：</li>
</ul>
<p>对于授权码授予，我们需要首先以与隐式流程相同的方式进行授权，只不过 <code>response_type</code> 现在是 <code>code</code> 。为此，我们需要导航到：<a href="http://localhost:8081/oauth/authorize?response_type=code&amp;client_id=my-trusted-client&amp;redirect-uri=http://localhost:8081/test.html">http://localhost:8081/oauth/authorize?response_type=code&amp;client_id=my-trusted-client&amp;redirect-uri=http://localhost:8081/test.html</a></p>
<p>然后我们被重定向到登录，登录后，我们被重定向到 OAuth 范围批准，如上一节中的隐式流程。之后，我们被重定向到以下地址：<a href="http://localhost:8081/test.html?code=bD0mVb">http://localhost:8081/test.html?code=bD0mVb</a>，这是我们应用程序的欢迎页面，但带有一个特殊的查询参数： <code>code</code> 。我们将使用curl 来获取令牌以进行演示，但也可以使用JavaScript 在页面中完成此操作：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;grant_type=authorization_code&amp;code=bD0mVb&amp;redirect_uri=http://localhost:8081/test.html&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;0abe701b-0f5a-4d25-81df-f2c4db2af555&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;refresh_token&#34;</span><span class="p">:</span> <span class="s2">&#34;cf6aa9db-3757-465e-af68-b7d59d1f0b77&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">59</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;trust read write&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><ul>
<li>刷新令牌：</li>
</ul>
<p>我们已经看到授权授予是唯一支持刷新令牌的授予。使用访问令牌 60 秒后，它就会过期，我们得到以下响应：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;error&#34;</span><span class="p">:</span> <span class="s2">&#34;invalid_token&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;error_description&#34;</span><span class="p">:</span> <span class="s2">&#34;0abe701b-0f5a-4d25-81df-f2c4db2af555&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span></code></pre></div><p>这意味着访问令牌已过期。要获取新令牌，我们需要使用刷新令牌：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -X POST --user my-trusted-client:mysecret localhost:8081/oauth/token -d <span class="s1">&#39;client_id=my-trusted-client&amp;grant_type=refresh_token&amp;refresh_token=cf6aa9db-3757-465e-af68-b7d59d1f0b77&#39;</span> -H <span class="s2">&#34;Accept: application/json&#34;</span>
</span></span></code></pre></div><p>回复：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;access_token&#34;</span><span class="p">:</span> <span class="s2">&#34;2f9a6609-fc64-4b1e-93a3-8232827da881&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;token_type&#34;</span><span class="p">:</span> <span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;refresh_token&#34;</span><span class="p">:</span> <span class="s2">&#34;cf6aa9db-3757-465e-af68-b7d59d1f0b77&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;expires_in&#34;</span><span class="p">:</span> <span class="mi">59</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;trust read write&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>每次令牌过期时都可以重复此过程。</p>
<h2 id="总结">总结</h2>
<p>Spring OAuth 提供开箱即用的 OAuth 端点和流程，并且可以成为以最小的努力设置 OAuth 的绝佳解决方案。然而，对于不熟悉 Spring 的开发人员来说，这可能有点令人畏惧，因为很多事情都在幕后发生。希望这篇文章可以帮助您了解全局。在下一篇文章中，我们将讨论使用 OAuth 范围来保护端点。</p>
<p>完整的源代码可以在这里找到：<a href="https://github.com/zak905/oauth2-example">https://github.com/zak905/oauth2-example</a></p>
<p>原文链接：<a href="http://www.zakariaamine.com/2018-01-27/using-oauth2-in-spring/">http://www.zakariaamine.com/2018-01-27/using-oauth2-in-spring/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Ambassador</title>
      <link>https://blog.chensoul.com/posts/2023/07/06/java-design-patterns-ambassador/</link>
      <pubDate>Thu, 06 Jul 2023 09:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/07/06/java-design-patterns-ambassador/</guid>
      <description>本文主要介绍 Ambassador 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计模</description>
      <content:encoded><![CDATA[<p>本文主要介绍 Ambassador 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="目的">目的</h2>
<p>在客户端上提供帮助程序服务实例，并从共享资源上转移常用功能。</p>
<blockquote>
<p>Ambassador 设计模式的主要目的是将客户端应用程序与远程服务器之间的通信细节隔离开来，从而使客户端应用程序可以专注于自己的业务逻辑，而不必关注网络通信细节和错误处理。</p>
<p>在传统的客户端应用程序中，通常需要处理大量的网络通信细节和错误处理，这会使代码变得复杂且难以维护。而使用 Ambassador 设计模式可以将这些细节和处理逻辑集中在一个单独的类中，从而使客户端应用程序的代码更加简洁、易于维护和扩展。</p>
<p>此外，使用 Ambassador 设计模式还可以提高客户端应用程序与远程服务器之间的通信安全性和可靠性。例如，Ambassador 类可以负责统一处理所有的网络通信，从而可以更轻松地实现安全性和可靠性控制。</p>
</blockquote>
<h2 id="解释">解释</h2>
<p>假设有一个旧版的远程服务，该服务提供了许多客户端访问的功能，但由于用户的大量请求，导致连接问题变得普遍。此外，新的请求频率规则需要同时实现延迟检测和客户端日志功能。为了解决这些问题，可以使用 Ambassador 设计模式。</p>
<p><a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/ambassador">微软文档</a> 做了如下阐述</p>
<blockquote>
<p>可以将大使服务视为与客户端位于同一位置的进程外代理。 此模式对于以语言不可知的方式减轻常见的客户端连接任务（例如监视，日志记录，路由，安全性（如TLS）和弹性模式）的工作很有用。 它通常与旧版应用程序或其他难以修改的应用程序一起使用，以扩展其网络功能。 它还可以使专业团队实现这些功能。</p>
</blockquote>
<p>在该模式中，可以创建一个 Ambassador 类来充当客户端应用程序和远程服务之间的代理。Ambassador 类负责处理所有的网络通信细节和错误处理，并实现新的请求频率规则，包括延迟检测和客户端日志功能。</p>
<p>具体来说，Ambassador 类可以实现以下功能：</p>
<ol>
<li>延迟检测：在请求到达远程服务之前，Ambassador 类可以检测请求的时间戳，并计算出请求的延迟时间。如果请求的延迟时间超过了预设的阈值，Ambassador 类可以将请求拒绝。</li>
<li>客户端日志功能：Ambassador 类可以记录请求的时间戳、请求的内容和响应的内容，并将这些信息保存到客户端的日志文件中。这样可以帮助客户端应用程序进行调试和故障排除。</li>
<li>连接问题处理：Ambassador 类可以监控远程服务的连接状态，并在连接出现问题时进行自动重试。同时，Ambassador 类还可以实现一些优化策略，例如使用连接池等，以提高连接的可靠性和性能。</li>
</ol>
<p><strong>程序示例</strong></p>
<p>有了上面的介绍我们将在这个例子中模仿功能。我们有一个用远程服务实现的接口，同时也是大使服务。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">interface</span> <span class="nc">RemoteServiceInterface</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="nf">doRemoteFunction</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>表示为单例的远程服务。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RemoteService</span> <span class="kd">implements</span> <span class="n">RemoteServiceInterface</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOGGER</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">RemoteService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">RemoteService</span> <span class="n">service</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">RemoteService</span> <span class="nf">getRemoteService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">service</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RemoteService</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">RemoteService</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">doRemoteFunction</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">waitTime</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)</span> <span class="n">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="n">1000</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">sleep</span><span class="o">(</span><span class="n">waitTime</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">LOGGER</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Thread sleep interrupted&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">waitTime</span> <span class="o">&gt;=</span> <span class="n">200</span> <span class="o">?</span> <span class="n">value</span> <span class="o">*</span> <span class="n">10</span> <span class="o">:</span> <span class="o">-</span><span class="n">1</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>服务大使添加了像日志和延迟检测的额外功能</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServiceAmbassador</span> <span class="kd">implements</span> <span class="n">RemoteServiceInterface</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOGGER</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">ServiceAmbassador</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RETRIES</span> <span class="o">=</span> <span class="n">3</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DELAY_MS</span> <span class="o">=</span> <span class="n">3000</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">ServiceAmbassador</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">doRemoteFunction</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">safeCall</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">long</span> <span class="nf">checkLatency</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="n">RemoteService</span><span class="o">.</span><span class="na">getRemoteService</span><span class="o">().</span><span class="na">doRemoteFunction</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Long</span> <span class="n">timeTaken</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Time taken (ms): &#34;</span> <span class="o">+</span> <span class="n">timeTaken</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kt">long</span> <span class="nf">safeCall</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">retries</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)</span> <span class="n">FAILURE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">RETRIES</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">(</span><span class="n">retries</span> <span class="o">&gt;=</span> <span class="n">RETRIES</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">FAILURE</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="o">((</span><span class="n">result</span> <span class="o">=</span> <span class="n">checkLatency</span><span class="o">(</span><span class="n">value</span><span class="o">))</span> <span class="o">==</span> <span class="n">FAILURE</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Failed to reach remote: (&#34;</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">1</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;)&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">retries</span><span class="o">++;</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">sleep</span><span class="o">(</span><span class="n">DELAY_MS</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">LOGGER</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Thread sleep state interrupted&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>客户端具有用于与远程服务进行交互的本地服务大使：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">LOGGER</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Client</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ServiceAmbassador</span> <span class="n">serviceAmbassador</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceAmbassador</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">long</span> <span class="nf">useService</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="n">serviceAmbassador</span><span class="o">.</span><span class="na">doRemoteFunction</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Service result: &#34;</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这是两个使用该服务的客户端。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Client</span> <span class="n">host1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Client</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Client</span> <span class="n">host2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Client</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">host1</span><span class="o">.</span><span class="na">useService</span><span class="o">(</span><span class="n">12</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">host2</span><span class="o">.</span><span class="na">useService</span><span class="o">(</span><span class="n">73</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Here&rsquo;s the output for running the example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Time</span> <span class="nf">taken</span> <span class="o">(</span><span class="n">ms</span><span class="o">):</span> <span class="n">111</span>
</span></span><span class="line"><span class="cl"><span class="n">Service</span> <span class="n">result</span><span class="o">:</span> <span class="n">120</span>
</span></span><span class="line"><span class="cl"><span class="n">Time</span> <span class="nf">taken</span> <span class="o">(</span><span class="n">ms</span><span class="o">):</span> <span class="n">931</span>
</span></span><span class="line"><span class="cl"><span class="n">Failed</span> <span class="n">to</span> <span class="n">reach</span> <span class="n">remote</span><span class="o">:</span> <span class="o">(</span><span class="n">1</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Time</span> <span class="nf">taken</span> <span class="o">(</span><span class="n">ms</span><span class="o">):</span> <span class="n">665</span>
</span></span><span class="line"><span class="cl"><span class="n">Failed</span> <span class="n">to</span> <span class="n">reach</span> <span class="n">remote</span><span class="o">:</span> <span class="o">(</span><span class="n">2</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Time</span> <span class="nf">taken</span> <span class="o">(</span><span class="n">ms</span><span class="o">):</span> <span class="n">538</span>
</span></span><span class="line"><span class="cl"><span class="n">Failed</span> <span class="n">to</span> <span class="n">reach</span> <span class="n">remote</span><span class="o">:</span> <span class="o">(</span><span class="n">3</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Service</span> <span class="n">result</span><span class="o">:</span> <span class="o">-</span><span class="n">1</span>
</span></span></code></pre></div><h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/ambassador.urm-75077e88.png" alt="alt text"  />
</p>
<h2 id="适用场景">适用场景</h2>
<p>Ambassador 设计模式适用于以下场景：</p>
<ol>
<li>当客户端应用程序需要与远程服务器进行通信，并且需要处理与网络通信相关的所有细节时。</li>
<li>当客户端应用程序需要隔离与远程服务器的通信细节时，以便更好地专注于自己的业务逻辑。</li>
<li>当客户端应用程序需要处理与远程服务器的通信错误时。</li>
<li>当客户端应用程序需要实现新的请求频率规则，例如延迟检测和客户端日志功能等。</li>
<li>当客户端应用程序需要在不更改旧版远程服务代码的情况下，对远程服务进行定制化扩展时。</li>
</ol>
<h2 id="典型用例">典型用例</h2>
<p>Ambassador 设计模式可以用于许多场景，以下是其中的一些典型用例：</p>
<h3 id="限流和熔断保护">限流和熔断保护</h3>
<p>在分布式系统中，服务之间的调用是通过网络进行的，网络延迟、故障和不可用性是常见的问题。当一个服务被频繁调用时，可能会导致其过载或崩溃，从而影响整个系统的稳定性和可用性。使用 Ambassador 设计模式可以实现对服务的请求流量和执行频率进行限制，同时也可以实现熔断保护，当一个服务出现故障或不可用时，自动切换到备用服务。</p>
<h4 id="限流">限流</h4>
<p>当使用 Ambassador 设计模式时，可以在 Ambassador 类中实现新的请求频率规则。以下是一个简单的例子，说明如何使用 Ambassador 设计模式来实现请求频率规则：</p>
<p>假设有一个客户端应用程序需要向远程服务器发送请求，并且需要实现以下请求频率规则：每个客户端在 10 秒钟内只能发送 10 个请求。如果客户端发送的请求超过了这个限制，服务器将返回 429 Too Many Requests 错误。</p>
<p>为了实现这个规则，可以创建一个 Ambassador 类来充当客户端应用程序和远程服务器之间的代理。在 Ambassador 类中，可以使用计数器和定时器来实现请求频率控制逻辑。</p>
<p>具体来说，Ambassador 类可以实现以下功能：</p>
<ol>
<li>定义计数器和定时器：在 Ambassador 类的构造函数中，可以定义一个计数器和一个定时器。计数器用于记录客户端发送的请求次数，定时器用于在每个 10 秒钟后重置计数器的值。</li>
<li>处理请求：在 Ambassador 类的处理请求方法中，可以首先检查计数器的值是否超过了限制。如果超过了限制，则返回 429 Too Many Requests 错误；否则，将请求发送到远程服务器，并将计数器的值增加 1。</li>
<li>处理定时器：在 Ambassador 类中，可以使用定时器来定期重置计数器的值。当定时器触发时，将计数器的值设置为 0。</li>
</ol>
<p>以下是一个基于 Java 8 的 Ambassador 设计模式的示例代码，使用了 Java 8 中的 HttpClient 类来发送 HTTP 请求：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.time.Instant</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ScheduledExecutorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.atomic.LongAdder</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ambassador</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LongAdder</span> <span class="n">counter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LongAdder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">scheduler</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Instant</span> <span class="n">lastResetTime</span> <span class="o">=</span> <span class="n">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查计数器是否超过了限制
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">counter</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">10</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 返回“Too Many Requests”错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">counter</span><span class="o">.</span><span class="na">decrementAndGet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;429 Too Many Requests&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 发送请求到远程服务器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">sendRequest</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 检查是否需要重置计数器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Instant</span> <span class="n">currentTime</span> <span class="o">=</span> <span class="n">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">currentTime</span><span class="o">.</span><span class="na">getEpochSecond</span><span class="o">()</span> <span class="o">-</span> <span class="n">lastResetTime</span><span class="o">.</span><span class="na">getEpochSecond</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">10</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">counter</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="n">lastResetTime</span> <span class="o">=</span> <span class="n">currentTime</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 返回响应结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="nf">sendRequest</span><span class="o">(</span><span class="n">String</span> <span class="n">url</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 发送 HTTP GET 请求并返回响应结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">HttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClient</span><span class="o">.</span><span class="na">newHttpClient</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">HttpRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="n">HttpRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="n">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">url</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">GET</span><span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">HttpResponse</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">HttpResponse</span><span class="o">.</span><span class="na">BodyHandlers</span><span class="o">.</span><span class="na">ofString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="o">|</span> <span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 处理请求异常
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="s">&#34;500 Internal Server Error&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Ambassador</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 定时重置计数器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">scheduler</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">counter</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">lastResetTime</span> <span class="o">=</span> <span class="n">Instant</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">},</span> <span class="n">10</span><span class="o">,</span> <span class="n">10</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 关闭定时器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">scheduler</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述代码中，Ambassador 类使用了 LongAdder 类型的计数器和 ScheduledExecutorService 类型的定时器，并实现了处理请求的方法 handleRequest。当客户端调用 handleRequest 方法时，Ambassador 类会检查计数器的值是否超过了限制。如果超过了限制，则返回 429 Too Many Requests 错误；否则，将请求发送到远程服务器，并将计数器的值增加 1。同时，Ambassador 类还会使用 ScheduledExecutorService 来定期重置计数器的值。</p>
<h4 id="熔断">熔断</h4>
<p>Ambassador 设计模式可以使用熔断模式来保护服务免受故障或不可用性的影响。熔断模式是一种防止故障扩散的机制，当服务出现故障或不可用时，熔断器会自动切换到备用服务，并在一段时间内停止发送请求。如果备用服务也出现故障或不可用，熔断器会重新启动并继续发送请求。以下是一个使用 Ambassador 设计模式实现熔断的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.atomic.AtomicInteger</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.logging.Level</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.logging.Logger</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Ambassador</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicInteger</span> <span class="n">failureCount</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicBoolean</span> <span class="n">circuitBreaker</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicBoolean</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Service</span> <span class="n">primaryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Service</span> <span class="n">backupService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">failureThreshold</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Ambassador</span><span class="o">(</span><span class="n">Service</span> <span class="n">primaryService</span><span class="o">,</span> <span class="n">Service</span> <span class="n">backupService</span><span class="o">,</span> <span class="kt">int</span> <span class="n">failureThreshold</span><span class="o">,</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxConcurrentRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">primaryService</span> <span class="o">=</span> <span class="n">primaryService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">backupService</span> <span class="o">=</span> <span class="n">backupService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">failureThreshold</span> <span class="o">=</span> <span class="n">failureThreshold</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">timeout</span> <span class="o">=</span> <span class="n">timeout</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">maxConcurrentRequests</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Ambassador</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="n">String</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">TimeoutException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查熔断器状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">circuitBreaker</span><span class="o">.</span><span class="na">get</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 返回备用服务的响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">backupService</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 创建 Callable 对象，并设置超时时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">task</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">primaryService</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">timeout</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 重置故障计数器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">failureCount</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="o">|</span> <span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 处理请求异常
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="c1">// 增加故障计数器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">failureCount</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 检查故障计数器是否超过阈值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">failureCount</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">failureThreshold</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// 启动熔断器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">circuitBreaker</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                    <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">WARNING</span><span class="o">,</span> <span class="s">&#34;Circuit breaker is tripped, switching to backup service&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 返回备用服务的响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span> <span class="n">backupService</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">TimeoutException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 处理请求超时异常
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">throw</span> <span class="k">new</span> <span class="n">TimeoutException</span><span class="o">(</span><span class="s">&#34;Request timed out&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 检查熔断器状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">circuitBreaker</span><span class="o">.</span><span class="na">get</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// 创建定时任务，定时重置熔断器状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">ScheduledExecutorService</span> <span class="n">scheduler</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                    <span class="n">scheduler</span><span class="o">.</span><span class="na">schedule</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="c1">// 重置故障计数器和熔断器状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                        <span class="n">failureCount</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                        <span class="n">circuitBreaker</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                        <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">INFO</span><span class="o">,</span> <span class="s">&#34;Circuit breaker is reset, switching back to primary service&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                        <span class="c1">// 关闭定时任务调度器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                        <span class="n">scheduler</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                    <span class="o">},</span> <span class="n">timeout</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>需要注意的是，在实际应用中，我们需要根据业务需求和系统负载来设置故障计数器的阈值和熔断器的停止时间。如果故障计数器的值超过了阈值，熔断器会启动，并在一定时间内停止发送请求。在熔断器停止期间，Ambassador 类会将所有请求转发到备用服务。当熔断器停止时间到达后，Ambassador 类会重新启动熔断器，并将请求转发到主服务进行处理。同时，我们还需要考虑并发请求的数量和请求的响应时间，以便更好地保证系统的稳定性和性能。</p>
<h3 id="安全过滤器">安全过滤器</h3>
<p>在 Web 应用程序中，安全过滤器通常用于检查输入数据的合法性和防止攻击，如 SQL 注入、跨站脚本攻击等。使用 Ambassador 设计模式可以将安全过滤器部署在应用程序的前端，检查所有的输入数据，防止攻击和恶意行为。</p>
<p>下面是一个简单的示例，演示如何使用 Ambassador 设计模式来实现安全过滤器：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityFilter</span> <span class="kd">implements</span> <span class="n">Service</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Service</span> <span class="n">service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityFilter</span><span class="o">(</span><span class="n">Service</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">service</span> <span class="o">=</span> <span class="n">service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">String</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查输入数据，防止攻击和恶意行为
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">isValid</span><span class="o">(</span><span class="n">request</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;Invalid request&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用服务处理请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查输入数据是否包含恶意代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Pattern</span> <span class="n">pattern</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&#34;&lt;script&gt;(.*?)&lt;/script&gt;&#34;</span><span class="o">,</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">CASE_INSENSITIVE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">!</span><span class="n">pattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">request</span><span class="o">).</span><span class="na">find</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述代码中，我们创建了一个 SecurityFilter 类，实现了 Service 接口，并在构造函数中传入了一个服务对象。在 process 方法中，我们首先检查输入数据，防止攻击和恶意行为，然后调用服务处理请求。</p>
<p>在 isValid 方法中，我们使用正则表达式检查输入数据是否包含恶意代码。在这个例子中，我们检查输入数据中是否包含 <code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 标签，如果包含则认为是恶意代码。</p>
<p>在实际应用中，我们可以根据具体的业务需求和安全策略，设计更加复杂和完善的安全过滤器。同时，我们还可以使用其他的设计模式和技术，如拦截器、过滤器链、黑白名单、加密算法等，来提高应用程序的安全性和可靠性。</p>
<p>以下是更进一步优化后的 SecurityFilter 类示例代码，其中使用了过滤器链和黑白名单来实现更加灵活和可配置的安全过滤器，同时增加了日志记录和异常处理，以便更好地监控和调试系统：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.logging.Level</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.logging.Logger</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityFilter</span> <span class="kd">implements</span> <span class="n">Service</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Service</span> <span class="n">service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Filter</span><span class="o">&gt;</span> <span class="n">filters</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">whiteList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">blackList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">SecurityFilter</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SecurityFilter</span><span class="o">(</span><span class="n">Service</span> <span class="n">service</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">service</span> <span class="o">=</span> <span class="n">service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">filters</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">whiteList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">blackList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFilter</span><span class="o">(</span><span class="n">Filter</span> <span class="n">filter</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">filters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">filter</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addWhiteList</span><span class="o">(</span><span class="n">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">whiteList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pattern</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addBlackList</span><span class="o">(</span><span class="n">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">blackList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pattern</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">String</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查白名单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(!</span><span class="n">isAllowed</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">whiteList</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">WARNING</span><span class="o">,</span> <span class="s">&#34;Request not allowed: &#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;Request not allowed&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查黑名单
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">isBlocked</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">blackList</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">logger</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">WARNING</span><span class="o">,</span> <span class="s">&#34;Request blocked: &#34;</span> <span class="o">+</span> <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;Request blocked&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 执行过滤器链
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="n">Filter</span> <span class="n">filter</span> <span class="o">:</span> <span class="n">filters</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">request</span> <span class="o">=</span> <span class="n">filter</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用服务处理请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isAllowed</span><span class="o">(</span><span class="n">String</span> <span class="n">request</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">patterns</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查请求是否在白名单中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">patterns</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">anyMatch</span><span class="o">(</span><span class="n">pattern</span> <span class="o">-&gt;</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="n">pattern</span><span class="o">,</span> <span class="n">request</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isBlocked</span><span class="o">(</span><span class="n">String</span> <span class="n">request</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">patterns</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查请求是否在黑名单中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">patterns</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">anyMatch</span><span class="o">(</span><span class="n">pattern</span> <span class="o">-&gt;</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="n">pattern</span><span class="o">,</span> <span class="n">request</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Filter</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="nf">doFilter</span><span class="o">(</span><span class="n">String</span> <span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="负载均衡">负载均衡</h3>
<p>在分布式系统中，负载均衡通常用于将请求分发到多个服务器上，以实现高可用性和容错性。使用 Ambassador 设计模式可以实现负载均衡，将请求分发到多个服务实例上，从而提高系统的可用性和性能。</p>
<p>下面是一个简单的示例，演示如何使用 Ambassador 设计模式来实现负载均衡：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ThreadLocalRandom</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoadBalancer</span> <span class="kd">implements</span> <span class="n">Service</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LoadBalancingStrategy</span> <span class="n">strategy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">LoadBalancer</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">,</span> <span class="n">LoadBalancingStrategy</span> <span class="n">strategy</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">services</span> <span class="o">=</span> <span class="n">services</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">strategy</span> <span class="o">=</span> <span class="n">strategy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">process</span><span class="o">(</span><span class="n">String</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 根据负载均衡策略选择服务实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Service</span> <span class="n">service</span> <span class="o">=</span> <span class="n">strategy</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">services</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用选择的服务处理请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">LoadBalancingStrategy</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Service</span> <span class="nf">select</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">RandomStrategy</span> <span class="kd">implements</span> <span class="n">LoadBalancingStrategy</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Service</span> <span class="nf">select</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 随机选择一个服务实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">ThreadLocalRandom</span><span class="o">.</span><span class="na">current</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="n">services</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">services</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">RoundRobinStrategy</span> <span class="kd">implements</span> <span class="n">LoadBalancingStrategy</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Service</span> <span class="nf">select</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 轮询选择服务实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Service</span> <span class="n">service</span> <span class="o">=</span> <span class="n">services</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">1</span><span class="o">)</span> <span class="o">%</span> <span class="n">services</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">service</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述代码中，我们创建了一个 LoadBalancer 类，实现了 Service 接口，并在构造函数中传入了一个服务列表和一个负载均衡策略。在 process 方法中，我们根据负载均衡策略选择一个服务实例，然后调用选择的服务处理请求。</p>
<p>在 LoadBalancingStrategy 接口中，我们定义了一个 select 方法，用于选择服务实例。在 RandomStrategy 类中，我们使用 ThreadLocalRandom 来随机选择一个服务实例。在 RoundRobinStrategy 类中，我们使用轮询算法来选择服务实例。</p>
<p>在实际应用中，我们可以根据具体的业务需求和性能指标，选择合适的负载均衡策略和算法，如加权轮询、最少连接数、哈希算法等，来实现更加高效和灵活的负载均衡。同时，我们还可以使用其他的设计模式和技术，如缓存、异步处理、分布式锁等，来进一步提高系统的可用性和性能。需要注意的是，在设计负载均衡器时，我们需要根据实际情况和负载均衡算法的特点，合理地分配服务实例和请求，避免出现负载不均衡或性能瓶颈的问题。</p>
<p>以下是经过优化后的负载均衡器的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ConcurrentHashMap</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ThreadLocalRandom</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.atomic.AtomicInteger</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.function.Function</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoadBalancer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">LoadBalancingStrategy</span> <span class="n">strategy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">weights</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">LoadBalancer</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">,</span> <span class="n">LoadBalancingStrategy</span> <span class="n">strategy</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">services</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">services</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">strategy</span> <span class="o">=</span> <span class="n">strategy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Service</span> <span class="n">service</span> <span class="o">:</span> <span class="n">services</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">weights</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">service</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Service</span> <span class="nf">getService</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">strategy</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">services</span><span class="o">,</span> <span class="n">weights</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setWeight</span><span class="o">(</span><span class="n">Service</span> <span class="n">service</span><span class="o">,</span> <span class="kt">int</span> <span class="n">weight</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">weights</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">service</span><span class="o">,</span> <span class="n">weight</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">LoadBalancer</span> <span class="nf">create</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">,</span> <span class="n">LoadBalancingStrategy</span> <span class="n">strategy</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">LoadBalancer</span><span class="o">(</span><span class="n">services</span><span class="o">,</span> <span class="n">strategy</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">LoadBalancer</span> <span class="nf">createWithRoundRobin</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">LoadBalancer</span><span class="o">(</span><span class="n">services</span><span class="o">,</span> <span class="n">LoadBalancingStrategy</span><span class="o">.</span><span class="na">ROUND_ROBIN</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">LoadBalancer</span> <span class="nf">createWithRandom</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">LoadBalancer</span><span class="o">(</span><span class="n">services</span><span class="o">,</span> <span class="n">LoadBalancingStrategy</span><span class="o">.</span><span class="na">RANDOM</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">enum</span> <span class="n">LoadBalancingStrategy</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">RANDOM</span><span class="o">(</span><span class="n">services</span> <span class="o">-&gt;</span> <span class="n">services</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">ThreadLocalRandom</span><span class="o">.</span><span class="na">current</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="n">services</span><span class="o">.</span><span class="na">size</span><span class="o">()))),</span>
</span></span><span class="line"><span class="cl">        <span class="n">ROUND_ROBIN</span><span class="o">(</span><span class="n">services</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">AtomicInteger</span> <span class="n">index</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">services</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">.</span><span class="na">getAndIncrement</span><span class="o">()</span> <span class="o">%</span> <span class="n">services</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">private</span> <span class="kd">final</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;,</span> <span class="n">Service</span><span class="o">&gt;</span> <span class="n">selector</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">LoadBalancingStrategy</span><span class="o">(</span><span class="n">Function</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;,</span> <span class="n">Service</span><span class="o">&gt;</span> <span class="n">selector</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">this</span><span class="o">.</span><span class="na">selector</span> <span class="o">=</span> <span class="n">selector</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="n">Service</span> <span class="nf">select</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">services</span><span class="o">,</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">weights</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">services</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">services</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;Services cannot be empty&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">services</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">services</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">List</span><span class="o">&lt;</span><span class="n">Service</span><span class="o">&gt;</span> <span class="n">candidates</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">services</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">*</span> <span class="n">100</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">Service</span> <span class="n">service</span> <span class="o">:</span> <span class="n">services</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">weight</span> <span class="o">=</span> <span class="n">weights</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">service</span><span class="o">,</span> <span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">weight</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">candidates</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">service</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">selector</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">candidates</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述代码中，我们进行了以下优化：</p>
<ol>
<li>使用了 ConcurrentHashMap 来代替 HashMap，确保在并发环境下的线程安全性。</li>
<li>使用了枚举类型来代替字符串常量，提高代码的可读性和安全性。</li>
<li>使用了 Lambda 表达式和方法引用来简化负载均衡策略的实现。</li>
<li>使用了静态工厂方法来创建负载均衡器对象，提高代码的可读性和灵活性。</li>
<li>重构了 select 方法，将其实现逻辑从 LoadBalancer 类中抽离出来，并优化了权重的处理逻辑。</li>
</ol>
<h3 id="缓存">缓存</h3>
<p>缓存可以提高应用程序的性能和响应速度，减少对数据库等后端资源的访问。使用 Ambassador 设计模式可以将缓存部署在应用程序的前端，将请求转发给缓存服务器进行处理，减少对后端资源的访问，提高系统的性能和响应速度。</p>
<p>以下是一个使用 Java 实现的简单示例，演示了如何使用 Ambassador 设计模式将请求转发给缓存服务器：</p>
<p>假设我们有一个简单的电子商务应用程序，用户可以浏览商品、下单、支付等操作。为了提高系统的性能和响应速度，我们可以在应用程序的前端部署一个缓存服务器，并使用 Ambassador 设计模式将请求转发给缓存服务器进行处理。在这个应用程序中，我们假设有一个名为 <code>ProductService</code> 的服务，用于获取商品信息。我们可以在应用程序的前端部署一个缓存服务器，并使用 Ambassador 设计模式将请求转发给缓存服务器。</p>
<p>首先，我们需要定义一个 <code>ProductService</code> 接口，用于获取商品信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>接下来，我们定义一个 <code>ProductServiceImpl</code> 类，实现 <code>ProductService</code> 接口，并用于从后端数据库获取商品信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceImpl</span> <span class="kd">implements</span> <span class="n">ProductService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 从后端数据库获取商品信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="n">Product</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&#34;Product &#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后，我们定义一个 <code>ProductCache</code> 类，用于缓存商品信息：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductCache</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Product</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">putProduct</span><span class="o">(</span><span class="n">Product</span> <span class="n">product</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">product</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">product</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>接下来，我们定义一个 <code>ProductCacheService</code> 类，实现 <code>ProductService</code> 接口，并用于从缓存服务器获取商品信息。如果缓存服务器中没有所需的数据，那么就将请求转发给后端服务进行处理，并将处理结果缓存起来：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductCacheService</span> <span class="kd">implements</span> <span class="n">ProductService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">backendService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductCache</span> <span class="n">cache</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ProductCacheService</span><span class="o">(</span><span class="n">ProductService</span> <span class="n">backendService</span><span class="o">,</span> <span class="n">ProductCache</span> <span class="n">cache</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">backendService</span> <span class="o">=</span> <span class="n">backendService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cache</span> <span class="o">=</span> <span class="n">cache</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">getProductById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">product</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 缓存服务器中没有所需的数据，将请求转发给后端服务进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">product</span> <span class="o">=</span> <span class="n">backendService</span><span class="o">.</span><span class="na">getProductById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 将处理结果缓存起来，以便后续的请求可以直接从缓存服务器获取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">cache</span><span class="o">.</span><span class="na">putProduct</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">product</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>最后，我们定义一个 <code>ProductServiceAmbassador</code> 类，用于接收来自应用程序的请求，并根据一定的规则将请求转发给缓存服务器或后端服务。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceAmbassador</span> <span class="kd">implements</span> <span class="n">ProductService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">cacheService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">backendService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="n">cachedIds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">cacheExpireTime</span> <span class="o">=</span> <span class="n">60</span> <span class="o">*</span> <span class="n">1000L</span><span class="o">;</span> <span class="c1">// 缓存过期时间为 60 秒
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ProductServiceAmbassador</span><span class="o">(</span><span class="n">ProductService</span> <span class="n">cacheService</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">ProductService</span> <span class="n">backendService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cacheService</span> <span class="o">=</span> <span class="n">cacheService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">backendService</span> <span class="o">=</span> <span class="n">backendService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Long</span> <span class="n">cachedTime</span> <span class="o">=</span> <span class="n">cachedIds</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果商品 ID 在缓存中存在，并且缓存未过期，那么就直接返回缓存中的商品信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">cachedTime</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">cachedTime</span> <span class="o">&lt;</span> <span class="n">cacheExpireTime</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">cacheService</span><span class="o">.</span><span class="na">getProductById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果商品 ID 在缓存中不存在，或者缓存已过期，那么就将请求转发给后端服务进行处理，并将处理结果缓存起来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="n">backendService</span><span class="o">.</span><span class="na">getProductById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cacheService</span><span class="o">.</span><span class="na">putProduct</span><span class="o">(</span><span class="n">product</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">cachedIds</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">product</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="服务发现和路由">服务发现和路由</h3>
<p>在分布式系统中，服务发现和路由通常用于将请求路由到正确的服务实例上，以实现高可用性和容错性。使用 Ambassador 设计模式可以实现服务发现和路由，将请求路由到正确的服务实例上，从而提高系统的可用性和性能。</p>
<p>以下是一个使用 Ambassador 设计模式实现服务发现和路由的 Java 示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Product</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductDiscoveryClient</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getInstances</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductDiscoveryClientImpl</span> <span class="kd">implements</span> <span class="n">ProductDiscoveryClient</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getInstances</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 假装从服务注册中心获取服务实例列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;http://localhost:8080&#34;</span><span class="o">,</span> <span class="s">&#34;http://localhost:8081&#34;</span><span class="o">,</span> <span class="s">&#34;http://localhost:8082&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductRoutingStrategy</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">String</span> <span class="nf">getRoute</span><span class="o">(</span><span class="n">String</span> <span class="n">productId</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">instances</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductRoutingStrategyImpl</span> <span class="kd">implements</span> <span class="n">ProductRoutingStrategy</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getRoute</span><span class="o">(</span><span class="n">String</span> <span class="n">productId</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">instances</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 假装使用负载均衡算法选择一个服务实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="n">instances</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;/product/&#34;</span> <span class="o">+</span> <span class="n">productId</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceAmbassador</span> <span class="kd">implements</span> <span class="n">ProductService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductDiscoveryClient</span> <span class="n">discoveryClient</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductRoutingStrategy</span> <span class="n">routingStrategy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ProductServiceAmbassador</span><span class="o">(</span><span class="n">ProductDiscoveryClient</span> <span class="n">discoveryClient</span><span class="o">,</span> <span class="n">ProductRoutingStrategy</span> <span class="n">routingStrategy</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">discoveryClient</span> <span class="o">=</span> <span class="n">discoveryClient</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">routingStrategy</span> <span class="o">=</span> <span class="n">routingStrategy</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">restTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestTemplate</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">instances</span> <span class="o">=</span> <span class="n">discoveryClient</span><span class="o">.</span><span class="na">getInstances</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">route</span> <span class="o">=</span> <span class="n">routingStrategy</span><span class="o">.</span><span class="na">getRoute</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">instances</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">ResponseEntity</span><span class="o">&lt;</span><span class="n">Product</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForEntity</span><span class="o">(</span><span class="n">route</span><span class="o">,</span> <span class="n">Product</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们定义了一个 <code>ProductService</code> 接口和一个 <code>Product</code> 类，用于表示商品服务和商品信息。然后，我们定义了一个 <code>ProductDiscoveryClient</code> 接口和一个 <code>ProductDiscoveryClientImpl</code> 类，用于获取服务实例列表。在 <code>ProductDiscoveryClientImpl</code> 类中，我们假装从服务注册中心获取服务实例列表，这里我们将服务实例列表硬编码为三个本地的 HTTP 地址。</p>
<p>接下来，我们定义了一个 <code>ProductRoutingStrategy</code> 接口和一个 <code>ProductRoutingStrategyImpl</code> 类，用于选择服务实例。在 <code>ProductRoutingStrategyImpl</code> 类中，我们使用了随机负载均衡算法来选择一个服务实例，并将商品 ID 和服务实例的 URL 拼接在一起，形成最终的路由信息。</p>
<p>在最后，我们定义了一个 <code>ProductServiceAmbassador</code> 类，用于实现商品服务的代理。在 <code>ProductServiceAmbassador</code> 类中，我们使用了依赖注入（DI）的方式来注入 <code>ProductDiscoveryClient</code> 和 <code>ProductRoutingStrategy</code> 的实现类。在 <code>getProductById</code> 方法中，我们首先通过 <code>ProductDiscoveryClient</code> 获取服务实例列表，然后使用 <code>ProductRoutingStrategy</code> 选择一个服务实例，并将商品 ID 和服务实例的 URL 拼接在一起，形成最终的路由信息。最后，我们使用 <code>RestTemplate</code> 发送 HTTP GET 请求，并将响应的 JSON 数据转换为 <code>Product</code> 对象返回。</p>
<p>使用 Ambassador 设计模式可以实现服务发现和路由，从而提高系统的可用性和性能，使得服务消费者无需关心服务实例的具体位置和负载均衡算法，只需要通过代理对象来访问服务即可。</p>
<h3 id="日志记录和监控">日志记录和监控</h3>
<p>在分布式系统中，日志记录和监控通常用于跟踪服务的运行状态和性能指标，以便进行故障排除和性能优化。使用 Ambassador 设计模式可以将日志记录和监控部署在应用程序的前端，监控服务的运行状态和性能指标，从而实现故障排除和性能优化。</p>
<p>以下是一个使用 Ambassador 设计模式实现日志记录和监控的 Java 示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Product</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductLogger</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">logRequest</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">logResponse</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">Product</span> <span class="n">product</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductLoggerImpl</span> <span class="kd">implements</span> <span class="n">ProductLogger</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">ProductLoggerImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">logRequest</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Requesting product with ID: {}&#34;</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">logResponse</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">Product</span> <span class="n">product</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Received product with ID: {}, Name: {}&#34;</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">product</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ProductMonitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">recordLatency</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="kt">long</span> <span class="n">latency</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">incrementCounter</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductMonitorImpl</span> <span class="kd">implements</span> <span class="n">ProductMonitor</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">StatsDClient</span> <span class="n">statsd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ProductMonitorImpl</span><span class="o">(</span><span class="n">String</span> <span class="n">host</span><span class="o">,</span> <span class="kt">int</span> <span class="n">port</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">statsd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NonBlockingStatsDClient</span><span class="o">(</span><span class="s">&#34;product-service&#34;</span><span class="o">,</span> <span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">recordLatency</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="kt">long</span> <span class="n">latency</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">statsd</span><span class="o">.</span><span class="na">recordExecutionTime</span><span class="o">(</span><span class="s">&#34;product.latency&#34;</span><span class="o">,</span> <span class="n">latency</span><span class="o">,</span> <span class="s">&#34;id:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">incrementCounter</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">statsd</span><span class="o">.</span><span class="na">increment</span><span class="o">(</span><span class="s">&#34;product.counter&#34;</span><span class="o">,</span> <span class="s">&#34;id:&#34;</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductServiceAmbassador</span> <span class="kd">implements</span> <span class="n">ProductService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductService</span> <span class="n">productService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductLogger</span> <span class="n">logger</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ProductMonitor</span> <span class="n">monitor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ProductServiceAmbassador</span><span class="o">(</span><span class="n">ProductService</span> <span class="n">productService</span><span class="o">,</span> <span class="n">ProductLogger</span> <span class="n">logger</span><span class="o">,</span> <span class="n">ProductMonitor</span> <span class="n">monitor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">productService</span> <span class="o">=</span> <span class="n">productService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">logger</span> <span class="o">=</span> <span class="n">logger</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">monitor</span> <span class="o">=</span> <span class="n">monitor</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Product</span> <span class="nf">getProductById</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="na">logRequest</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">Product</span> <span class="n">product</span> <span class="o">=</span> <span class="n">productService</span><span class="o">.</span><span class="na">getProductById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">logger</span><span class="o">.</span><span class="na">logResponse</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">product</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">long</span> <span class="n">latency</span> <span class="o">=</span> <span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">monitor</span><span class="o">.</span><span class="na">recordLatency</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">latency</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">monitor</span><span class="o">.</span><span class="na">incrementCounter</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">product</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个示例中，我们定义了一个 <code>ProductService</code> 接口和一个 <code>Product</code> 类，用于表示商品服务和商品信息。然后，我们定义了一个 <code>ProductLogger</code> 接口和一个 <code>ProductLoggerImpl</code> 类，用于记录请求和响应的日志信息。在 <code>ProductLoggerImpl</code> 类中，我们使用了 <code>SLF4J</code> 日志框架来记录日志信息。</p>
<p>接下来，我们定义了一个 <code>ProductMonitor</code> 接口和一个 <code>ProductMonitorImpl</code> 类，用于记录运行状态和性能指标。在 <code>ProductMonitorImpl</code> 类中，我们使用了 <code>StatsD</code> 客户端来记录运行状态和性能指标，例如请求的延迟和调用次数等。在 <code>ProductMonitorImpl</code> 的构造函数中，我们可以指定 <code>StatsD</code> 客户端的主机和端口。</p>
<p>最后，我们定义了一个 <code>ProductServiceAmbassador</code> 类，用于实现商品服务的代理。在 <code>ProductServiceAmbassador</code> 类中，我们通过依赖注入（DI）的方式将 <code>ProductService</code>、<code>ProductLogger</code> 和 <code>ProductMonitor</code> 的实现类注入到构造函数中。在 <code>getProductById</code> 方法中，我们首先调用 <code>ProductLogger</code> 的 <code>logRequest</code> 方法来记录请求的日志信息。然后，我们使用 <code>System.currentTimeMillis()</code> 来记录请求的开始时间，然后调用 <code>ProductService</code> 的 <code>getProductById</code> 方法来获取商品信息。接下来，我们使用 <code>System.currentTimeMillis()</code> 来记录请求的结束时间，并调用 <code>ProductLogger</code> 的 <code>logResponse</code> 方法来记录响应的日志信息。最后，我们计算请求的延迟，并调用 <code>ProductMonitor</code> 的 <code>recordLatency</code> 方法来记录请求的延迟，调用 <code>ProductMonitor</code> 的 <code>incrementCounter</code> 方法来记录调用次数。</p>
<p>使用 Ambassador 设计模式可以将日志记录和监控部署在应用程序的前端，从而监控服务的运行状态和性能指标，并提供实时的故障排除和性能优化。由于日志记录和监控是与业务逻辑解耦的，因此我们可以随时在运行时添加、删除或更改日志记录和监控的实现，而不影响应用程序的正常运行。</p>
<h2 id="已知使用">已知使用</h2>
<p>Ambassador 设计模式通常用于分布式系统中，用于解决服务间的通信问题和负载均衡问题。许多开源框架和工具都使用了 Ambassador 模式来实现服务代理和增强等功能。以下是一些常见的使用了 Ambassador 模式的开源框架和工具：</p>
<ol>
<li>Istio：Istio 是一个流行的服务网格框架，它使用了 Ambassador 模式来实现服务代理和增强等功能，例如流量管理、安全认证、监控和日志等。</li>
<li>Envoy：Envoy 是一个高性能的代理服务器，它使用了 Ambassador 模式来实现负载均衡、流量转发和服务代理等功能。</li>
<li>Linkerd：Linkerd 是另一个流行的服务网格框架，它使用了 Ambassador 模式来实现服务代理和增强等功能，例如负载均衡、故障恢复和流量管理等。</li>
<li>Open Service Mesh：Open Service Mesh 是一个开源的服务网格框架，它使用了 Ambassador 模式来实现服务代理和增强等功能，例如流量管理、安全认证和监控等。</li>
<li>Consul：Consul 是一个流行的服务发现和配置工具，它使用了 Ambassador 模式来实现服务代理和增强等功能，例如负载均衡、健康检查和故障恢复等。</li>
<li>Kubernetes：Kubernetes 是一个流行的容器编排平台，它使用了 Ambassador 模式来实现服务代理和增强等功能，例如服务发现、负载均衡和流量管理等。</li>
<li>Nginx：Nginx 是一个高性能的 Web 服务器和反向代理服务器，它使用了 Ambassador 模式来实现负载均衡、流量转发和服务代理等功能。</li>
<li>Kong：Kong 是一个开源的 API 网关，它使用了 Ambassador 模式来实现流量管理、安全认证和监控等功能。</li>
<li>Traefik：Traefik 是一个流行的反向代理和负载均衡器，它使用了 Ambassador 模式来实现服务代理和增强等功能，例如动态配置、自动发现和流量转发等。</li>
</ol>
<p>当然，Java 生态系统中也有许多开源框架和工具使用了 Ambassador 模式。以下是其中的一些：</p>
<ol>
<li>Spring Cloud Netflix：Spring Cloud Netflix 是一个流行的微服务框架，它使用了 Netflix OSS 中的 Ribbon 和 Zuul 组件来实现服务代理和增强等功能，例如负载均衡、服务发现和路由等。</li>
<li>Spring Cloud Gateway：Spring Cloud Gateway 是 Spring Cloud 生态系统中的一个新型 API 网关，它使用了 Reactor Netty 和 Spring WebFlux 等技术来实现服务代理和增强等功能，例如负载均衡、路由和限流等。</li>
<li>Netflix OSS：Netflix OSS 是 Netflix 开源的一组分布式系统工具，其中包括了许多使用了 Ambassador 模式的组件，例如 Ribbon、Hystrix、Zuul 和 Eureka 等。</li>
<li>Micronaut：Micronaut 是一个轻量级的 Java 框架，它使用了 Netty 和 Reactive Streams 等技术来实现服务代理和增强等功能，例如负载均衡、服务发现和路由等。</li>
<li>Vert.x：Vert.x 是一个高性能的异步编程框架，它使用了 Netty 和 Reactive Streams 等技术来实现服务代理和增强等功能，例如负载均衡、路由和限流等。</li>
</ol>
<h3 id="spring-cloud-gateway">Spring Cloud Gateway</h3>
<p>Spring Cloud Gateway 是 Spring Cloud 生态系统中的一个新型 API 网关，它使用了 Reactor Netty 和 Spring WebFlux 等技术来实现服务代理和增强等功能。它的设计理念就是基于 Ambassador 模式来构建的，它将每个后端服务都看作一个独立的实体，通过一个中央入口点来统一管理和控制。</p>
<p>下面通过代码来说明 Spring Cloud Gateway 如何使用 Ambassador 模式。假设我们有两个后端服务，一个是 user-service，一个是 order-service，我们希望通过 Spring Cloud Gateway 来实现负载均衡和路由的功能。</p>
<p>首先，我们需要添加 Spring Cloud Gateway 依赖，可以在 Maven 中添加以下依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-gateway<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>然后，我们需要在配置文件中配置 Spring Cloud Gateway，例如 application.yml 文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">routes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">user-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://user-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">predicates</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">Path=/users/**</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">order-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">uri</span><span class="p">:</span><span class="w"> </span><span class="l">lb://order-service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">predicates</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">Path=/orders/**</span><span class="w">
</span></span></span></code></pre></div><p>这段配置代码的意思是，我们定义了两个路由规则，一个是对于 /users/** 的请求，将会被路由到 user-service 服务上，另一个是对于 /orders/** 的请求，将会被路由到 order-service 服务上。其中，uri 前缀的 lb:// 表示使用负载均衡的方式来路由请求，这里我们使用了 Spring Cloud LoadBalancer 组件来实现负载均衡的功能。</p>
<p>最后，我们需要在启动类上添加 @EnableGateway 注解，来启用 Spring Cloud Gateway：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@SpringBootApplication</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableDiscoveryClient</span>
</span></span><span class="line"><span class="cl"><span class="nd">@EnableGateway</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GatewayApplication</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">GatewayApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这样，我们就完成了 Spring Cloud Gateway 的配置和启用。通过以上的配置和代码，我们实现了 Ambassador 模式的基本功能，即通过一个中央入口点来统一管理和控制后端服务。同时，由于 Spring Cloud Gateway 基于 Reactor Netty 和 Spring WebFlux 等技术实现，它也具有非常高的性能和可扩展性。</p>
<p>Spring Cloud Gateway 源码中的实现方式，主要是基于 Reactor Netty 和 Spring WebFlux 框架来实现的。它的核心组件是 GatewayFilter 和 RouteLocator，其中 GatewayFilter 用于实现各种过滤器，例如请求转发、重定向、限流和认证等，而 RouteLocator 用于实现动态路由和负载均衡等功能。</p>
<p>具体来说，Spring Cloud Gateway 的工作原理如下：</p>
<ol>
<li>Spring Cloud Gateway 接收客户端的请求，然后根据配置文件中的路由规则，选择一个合适的路由器进行处理。</li>
<li>路由器会根据请求的 URL 和配置文件中的路由规则，选择一个或多个过滤器对请求进行处理。过滤器可以选择性地修改请求和响应，或者中断请求并返回响应。</li>
<li>过滤器将处理后的请求发送到后端服务，然后将响应返回给客户端。</li>
<li>在处理请求和响应的过程中，Spring Cloud Gateway 支持多种协议和格式，例如 HTTP、WebSocket、JSON 和 XML 等。</li>
</ol>
<p>在 Spring Cloud Gateway 的源码中，它的核心组件是 GatewayFilter 和 RouteLocator。其中，GatewayFilter 是一个过滤器接口，它定义了一个过滤器的基本方法链，开发者可以通过实现 GatewayFilter 接口来实现自定义的过滤器。而 RouteLocator 则是一个路由规则接口，它定义了一个动态路由表，开发者可以通过实现 RouteLocator 接口来实现自定义的路由规则，例如基于服务发现的路由规则。</p>
<blockquote>
<p>Spring Cloud Gateway 支持 WebSocket 协议。WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议，它允许客户端和服务器之间进行实时交互和通信。Spring Cloud Gateway 通过支持 WebSocket 协议，可以实现实时通信、推送和广播等功能。</p>
<p>要在 Spring Cloud Gateway 中支持 WebSocket 协议，需要进行以下步骤：</p>
<ol>
<li>
<p>引入 Spring Cloud Gateway WebSocket 依赖，可以在 Maven 中添加以下依赖：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-gateway-websocket<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></div></li>
<li>
<p>配置 Spring Cloud Gateway，需要在 application.yml 或 application.properties 文件中添加以下配置：</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w"> </span><span class="nt">spring</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="nt">cloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="nt">gateway</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="nt">websockets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span></code></pre></div><pre><code>  这段配置代码的意思是，启用 Spring Cloud Gateway 的 WebSocket 支持。
</code></pre>
<ol start="3">
<li>
<p>配置 WebSocket 路由，需要在 application.yml 或 application.properties 文件中添加以下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"></code></pre></div></li>
</ol>
<p>spring:
cloud:
gateway:
routes:
- id: ws-route
uri: ws://localhost:8080
predicates:
- Path=/ws/**</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">这段配置代码的意思是，将 /ws/** 的请求路由到 uri 为 ws://localhost:8080 的 WebSocket 服务上。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">4. 实现 WebSocket 处理器，需要编写一个实现 WebSocketHandler 接口的处理器，例如：
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">```java
</span></span><span class="line"><span class="cl">@Component
</span></span><span class="line"><span class="cl">public class EchoWebSocketHandler implements WebSocketHandler {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    @Override
</span></span><span class="line"><span class="cl">       public Mono&lt;Void&gt; handle(WebSocketSession session) {
</span></span><span class="line"><span class="cl">        // 处理 WebSocketSession
</span></span><span class="line"><span class="cl">        return session.send(session.receive().map(msg -&gt; session.textMessage(&#34;Echo: &#34; + msg.getPayloadAsText())));
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><p>这段代码的意思是，实现一个处理器，用来处理 WebSocketSession。在此示例中，处理器会将接收到的消息进行回显，并返回给客户端。</p>
<ol start="5">
<li>
<p>配置 WebSocket 处理器，需要在 application.yml 或 application.properties 文件中添加以下配置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"></code></pre></div></li>
</ol>
<p>spring:
cloud:
gateway:
routes:
- id: ws-route
uri: ws://localhost:8080
predicates:
- Path=/ws/**
filters:
- name: WebSocket
args:
handler: echoWebSocketHandler
subprotocols: subprotocol1, subprotocol2</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">这段配置代码的意思是，将 WebSocket 处理器 echoWebSocketHandler 绑定到 WebSocket 路由上，并指定了子协议 subprotocol1 和 subprotocol2。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">这样，我们就完成了在 Spring Cloud Gateway 中支持 WebSocket 协议的配置和代码实现。通过以上的配置和代码，我们可以在 Spring Cloud Gateway 上实现 WebSocket 的功能，例如实时通信、推送和广播等。
</span></span></code></pre></div></blockquote>
<h2 id="相关模式">相关模式</h2>
<ul>
<li><a href="https://java-design-patterns.com/patterns/proxy/">Proxy</a></li>
</ul>
<h2 id="其他">其他</h2>
<h3 id="ambassador-和-aop">Ambassador 和 AOP</h3>
<p>Ambassador 设计模式和 AOP（面向切面编程）都是用于实现横切关注点的设计模式。它们都可以在不修改现有代码的情况下，往程序中添加一些额外的行为，例如日志记录、性能监控、安全验证等。</p>
<p>Ambassador 设计模式是一种结构型设计模式，它通过代理对象来隐藏底层服务的实现细节，并提供一些额外的功能，例如服务发现、负载均衡、日志记录和监控等。在 Ambassador 设计模式中，代理对象和原始对象都实现了同一个接口，代理对象负责将调用转发到原始对象，并在调用前后执行一些额外的逻辑。</p>
<p>AOP 也是一种结构型设计模式，它通过将横切关注点从业务逻辑中分离出来，实现了一种基于切面的模块化设计。在 AOP 中，横切关注点被封装成切面，并通过切点和通知来定义切面的行为。在程序运行期间，AOP 框架会动态地将切面织入到目标对象的方法调用中，从而实现切面的功能。</p>
<p>虽然 Ambassador 设计模式和 AOP 都可以实现横切关注点，但它们的应用场景和目的略有不同。Ambassador 设计模式通常用于实现与底层服务相关的功能，例如服务发现、负载均衡、日志记录和监控等。而 AOP 则更加通用，可以用于实现任何与业务逻辑无关的功能，例如事务管理、安全验证、性能监控等。此外，AOP 还可以通过切面的织入顺序来实现一些复杂的功能，例如事务嵌套和并发控制等。</p>
<p>在实践中，Ambassador 设计模式和 AOP 可以结合使用，从而实现更加灵活和可扩展的应用程序设计。例如，在使用 Ambassador 设计模式实现服务调用时，我们可以使用 AOP 来记录请求和响应的日志信息，或者实现安全验证和性能监控等功能。在这种情况下，Ambassador 设计模式和 AOP 通常是相互补充的，可以在不同的层次上实现横切关注点的功能。</p>
<h3 id="ambassador-和代理">Ambassador 和代理</h3>
<p>Ambassador 设计模式和代理模式都是结构型设计模式，它们都使用代理对象来隐藏真实对象的实现细节，并提供一些额外的功能。然而，它们的目的和实现方式略有不同。</p>
<p>代理模式是一种结构型设计模式，它通过代理对象来控制对真实对象的访问。在代理模式中，代理对象和真实对象实现相同的接口，代理对象负责将方法调用传递给真实对象，并在此基础上添加一些额外的逻辑，例如权限控制、缓存、远程访问等。代理模式可以在不修改现有代码的情况下，为真实对象提供额外的功能和保护。</p>
<p>Ambassador 设计模式也是一种结构型设计模式，它通过代理对象来隐藏底层服务的实现细节，并提供一些额外的功能，例如服务发现、负载均衡、日志记录和监控等。在 Ambassador 设计模式中，代理对象和底层服务实现相同的接口，代理对象负责将调用转发到底层服务，并在此基础上添加一些额外的逻辑。Ambassador 设计模式通常用于实现与底层服务相关的功能。</p>
<p>Ambassador 设计模式和代理模式在某些方面确实非常相似，它们都使用代理对象来隐藏真实对象的实现细节，并提供一些额外的功能。然而，它们的目的和应用场景略有不同，这也是它们的区别所在。</p>
<p>代理模式通常用于控制对真实对象的访问，例如权限控制、缓存、远程访问等。它的重点在于实现对真实对象的保护和控制。代理模式的应用场景非常广泛，可以用于任何需要对真实对象进行访问控制和保护的场景。</p>
<p>Ambassador 设计模式则更加专注于底层服务的代理和增强，例如服务发现、负载均衡、日志记录和监控等。它通常用于分布式系统中，用于解决服务间的通信问题和负载均衡问题。Ambassador 设计模式的重点在于为底层服务提供代理和增强功能，以便更好地管理和控制底层服务。</p>
<p>虽然 Ambassador 设计模式和代理模式在某些方面非常相似，但它们在实际应用中通常被用于不同的场景和目的。在实践中，我们可以根据具体的需求和应用场景来选择使用哪种模式，或者将它们结合起来使用，以实现更加灵活和可扩展的应用程序设计。</p>
<h2 id="参考文章">参考文章</h2>
<ol>
<li><a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/ambassador">Ambassador Pattern</a>: 该文章介绍了 Ambassador 模式的概念和应用场景，并提供了一些实际案例供参考。</li>
<li><a href="https://dzone.com/articles/design-patterns-for-microservices-ambassador-anti">Design Patterns for Microservices: Ambassador, Anti-Corruption Layer, and Backends for Frontends</a> : 这篇文章介绍了在微服务架构中使用的两种设计模式：Ambassador 模式和 Anti-corruption Layer 模式。。</li>
<li><a href="https://itnext.io/ambassador-and-istio-edge-proxy-and-service-mesh-814aac9f23df">The Ambassador pattern and Istio</a>: 这篇文章介绍了如何使用 Istio 和 Ambassador 模式来实现微服务的边缘代理和服务网格。</li>
<li><a href="https://medium.com/bb-tutorials-and-thoughts/kubernetes-learn-ambassador-container-pattern-bc2e1331bd3a">Kubernetes — Learn Ambassador Container Pattern</a> 介绍了如何在 Kubernetes 中使用 Ambassador 模式来解决微服务通信的问题。</li>
<li><a href="https://blog.getambassador.io/api-gateway-vs-service-mesh-104c01fa4784">Ambassador vs API Gateway</a>: 该文章对比了 Ambassador 模式和传统的 API 网关的优缺点，分析了它们在不同场景下的应用和适用性。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Active Object</title>
      <link>https://blog.chensoul.com/posts/2023/05/26/java-design-patterns-active-object/</link>
      <pubDate>Fri, 26 May 2023 10:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/26/java-design-patterns-active-object/</guid>
      <description>本文主要介绍 Active Object 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计</description>
      <content:encoded><![CDATA[<p>本文主要介绍  Active Object 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="目的">目的</h2>
<p>活动对象（Active Object）是一种设计模式，其主要目的是将并发和异步处理的问题从客户端代码中分离出来，从而提高系统的性能、可靠性和可维护性。活动对象模式是一种能够帮助开发人员处理多线程、异步和并发问题的设计模式。</p>
<p>在传统的并发编程模型中，客户端代码需要直接管理线程和锁等细节，这样会导致代码复杂度和维护成本的增加，同时也容易出现各种问题，如死锁、竞态条件等。活动对象模式通过引入活动对象来解决这些问题，活动对象将客户端代码发送的消息添加到内部的消息队列中，并使用单独的线程异步处理这些消息。这种模式可以提高系统的性能和可扩展性，同时使得客户端代码更加简单和易于维护。</p>
<p>活动对象模式的目的包括：</p>
<ol>
<li>将并发和异步处理的问题从客户端代码中分离出来，从而使得客户端代码更加简单和易于维护。客户端代码只需要发送消息即可，不需要关心异步处理的细节，活动对象将并发和异步处理的问题封装起来，提供简单的接口供客户端使用。</li>
<li>提高系统的性能和可扩展性。活动对象使用单独的线程池异步处理消息，可以更好地利用系统资源，提高系统的性能和可扩展性。</li>
<li>提高系统的可靠性和健壮性。活动对象将消息添加到内部的消息队列中，避免了竞态条件和死锁等问题，从而提高了系统的可靠性和健壮性。</li>
<li>将多线程和异步处理的细节封装起来，使得客户端代码更加抽象和通用。客户端代码可以使用相同的接口来访问不同的服务，从而提高代码的复用性和可维护性。</li>
</ol>
<h2 id="解释">解释</h2>
<p>活动对象模式的核心思想是将并发和异步处理的问题从客户端代码中分离出来。具体来说，活动对象模式包含以下几个关键组件：</p>
<ol>
<li>活动对象（Active Object）：活动对象是一个封装了某种服务的对象，它将客户端代码发送的消息添加到内部的消息队列中，并使用单独的线程异步处理这些消息。活动对象通常包含一个消息队列和一个线程池，用于异步处理消息。</li>
<li>方法调用请求（Method Invocation Request）：客户端代码向活动对象发送方法调用请求，包括方法名和参数列表等信息。活动对象将方法调用请求封装为一个消息对象，并添加到内部的消息队列中。</li>
<li>消息队列（Message Queue）：消息队列是活动对象内部用于存储方法调用请求的队列。活动对象将客户端代码发送的消息添加到消息队列中，并使用单独的线程异步处理这些消息。</li>
<li>线程池（Thread Pool）：线程池是活动对象用于异步处理消息的线程池。活动对象从消息队列中取出消息，并使用线程池中的线程异步处理这些消息。</li>
</ol>
<p><strong>程序示例</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ActiveCreature</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">ActiveCreature</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="n">Thread</span> <span class="n">thread</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">ActiveCreature</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">              <span class="n">requests</span><span class="o">.</span><span class="na">take</span><span class="o">().</span><span class="na">run</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">              <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">          <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">eat</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">requests</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">          <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;{} is eating!&#34;</span><span class="o">,</span><span class="n">name</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">          <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;{} has finished eating!&#34;</span><span class="o">,</span><span class="n">name</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">roam</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">requests</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span> 
</span></span><span class="line"><span class="cl">          <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;{} has started to roam and the wastelands.&#34;</span><span class="o">,</span><span class="n">name</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">name</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在该示例代码中，<code>ActiveCreature</code> 类封装了一个消息队列，用于异步处理客户端代码发送的消息。具体来说，该示例代码包含以下几个关键组件：</p>
<ol>
<li><code>BlockingQueue&lt;Runnable&gt;</code> 类型的 <code>requests</code> 属性：该属性表示消息队列，用于存储客户端代码发送的消息。客户端代码可以通过 <code>eat()</code> 和 <code>roam()</code> 方法向消息队列中添加消息。</li>
<li><code>Thread</code> 类型的 <code>thread</code> 属性：该属性表示活动对象的线程，用于异步处理消息队列中的消息。</li>
<li><code>String</code> 类型的 <code>name</code> 属性：该属性表示活动对象的名称。</li>
<li><code>ActiveCreature(String name)</code> 构造方法：该方法用于创建一个活动对象，初始化消息队列和线程等属性。在该方法中，我们创建了一个新的线程，并使用 <code>requests.take().run()</code> 从消息队列中取出消息并异步处理。</li>
<li><code>eat()</code> 和 <code>roam()</code> 方法：这两个方法用于向消息队列中添加消息，表示活动对象正在吃和漫游。在这两个方法中，我们将一个 <code>Runnable</code> 对象添加到消息队列中，并在其 <code>run()</code> 方法中执行相应的操作，如输出日志等。</li>
<li><code>name()</code> 方法：该方法用于获取活动对象的名称。</li>
</ol>
<p>在总体上，该示例代码实现了活动对象模式的基本功能，将并发和异步处理的问题从客户端代码中分离出来，并提供了简单的接口供客户端调用。客户端代码只需要调用 <code>eat()</code> 和 <code>roam()</code> 方法即可，不需要关心异步处理的细节，活动对象将并发和异步处理的问题封装起来，提供简单的接口供客户端使用。</p>
<p>需要注意的是，在该示例代码中，我们使用了阻塞队列 <code>BlockingQueue&lt;Runnable&gt;</code> 来实现消息队列，该队列提供了线程安全的添加和移除操作，保证了消息的有序性和正确性。同时，在活动对象的线程中使用了 <code>requests.take().run()</code> 操作来从消息队列中取出消息并异步处理，这种方式可以保证消息的有序性和正确性，并避免了竞态条件和死锁等问题。</p>
<p>我们可以看到，任何将扩展ActiveCreature的类都将具有自己的控制线程来执行和调用方法。</p>
<p>例如，兽人类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Orc</span> <span class="kd">extends</span> <span class="n">ActiveCreature</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Orc</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，我们可以创建多个生物，例如兽人，告诉他们吃东西和散步，然后他们将在自己的控制线程上执行它：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
</span></span><span class="line"><span class="cl">    <span class="n">var</span> <span class="n">app</span> <span class="o">=</span> <span class="k">new</span> <span class="n">App</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">ActiveCreature</span> <span class="n">creature</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">creatures</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">creature</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Orc</span><span class="o">(</span><span class="n">Orc</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">creature</span><span class="o">.</span><span class="na">eat</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">creature</span><span class="o">.</span><span class="na">roam</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">      <span class="o">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exit</span><span class="o">(</span><span class="n">1</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span></code></pre></div><h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/active-object.urm-0bce814e.png" alt="alt text"  />
</p>
<h2 id="举例">举例</h2>
<p>以下是一个简单的活动对象示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">process</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 创建一个异步任务，并将其提交到线程池中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 模拟复杂的处理逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 返回处理结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="s">&#34;Processed message: &#34;</span> <span class="o">+</span> <span class="n">message</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 关闭线程池
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例代码中，<code>ActiveObject</code> 类封装了一个异步处理服务，客户端代码可以使用该服务异步处理消息。<code>ActiveObject</code> 类中的 <code>process()</code> 方法接收一个消息，并将其封装为一个异步任务，然后提交到线程池中异步处理。<code>process()</code> 方法返回一个 <code>Future</code> 对象，可以用于获取异步处理的结果。在该示例代码中，异步任务只是简单地模拟了处理逻辑，实际上可以根据需要编写更加复杂的异步处理逻辑。</p>
<p>下面是一个使用 <code>ActiveObject</code> 类的示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutionException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ActiveObject</span> <span class="n">activeObject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActiveObject</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 发送消息到活动对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">activeObject</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="s">&#34;Hello, world!&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 等待异步处理完成，并获取处理结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 关闭活动对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">activeObject</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例代码中，客户端代码使用 <code>ActiveObject</code> 类异步处理了一条消息，并等待异步处理完成后获取处理结果。需要注意的是，在使用 <code>ActiveObject</code> 类时，客户端代码只需要发送消息即可，不需要关心异步处理的细节，从而使得客户端代码更加简单和易于维护。</p>
<p>下面是一个复杂的活动对象示例代码，该代码模拟了一个银行账户系统，支持存款、取款和查询余额等操作。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.CompletableFuture</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BankAccount</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">double</span> <span class="n">balance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">BankAccount</span><span class="o">(</span><span class="kt">double</span> <span class="n">initialBalance</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">balance</span> <span class="o">=</span> <span class="n">initialBalance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="nf">deposit</span><span class="o">(</span><span class="kt">double</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CompletableFuture</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">balance</span> <span class="o">+=</span> <span class="n">amount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">future</span><span class="o">.</span><span class="na">complete</span><span class="o">(</span><span class="n">balance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="nf">withdraw</span><span class="o">(</span><span class="kt">double</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CompletableFuture</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">future</span><span class="o">.</span><span class="na">complete</span><span class="o">(</span><span class="n">balance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">future</span><span class="o">.</span><span class="na">completeExceptionally</span><span class="o">(</span><span class="k">new</span> <span class="n">InsufficientFundsException</span><span class="o">(</span><span class="s">&#34;Insufficient funds&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="nf">getBalance</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CompletableFuture</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">future</span><span class="o">.</span><span class="na">complete</span><span class="o">(</span><span class="n">balance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">InsufficientFundsException</span> <span class="kd">extends</span> <span class="n">RuntimeException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">InsufficientFundsException</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>   
</span></span></code></pre></div><h2 id="缺点">缺点</h2>
<p>虽然活动对象模式具有许多优点，但也存在一些缺点，如下所述：</p>
<ol>
<li>复杂性：活动对象模式需要使用异步处理和事件驱动机制，这增加了系统的复杂性。在设计、实现和测试时，需要考虑许多因素，如并发控制、锁定、死锁、线程池大小、任务队列大小等。</li>
<li>性能下降：在处理大量请求时，活动对象模式可能会导致性能下降。这是因为活动对象模式需要创建许多线程和任务，这会增加系统的负载和开销。此外，如果任务队列或线程池过大，会导致内存和CPU资源的浪费。</li>
<li>调试难度：由于活动对象模式使用异步处理和事件驱动机制，因此在调试时可能会出现难以预测的行为。例如，多个线程可能会同时访问共享资源，导致死锁或竞态条件，从而导致应用程序崩溃或出现其他问题。</li>
<li>状态管理：由于活动对象模式使用异步处理和事件驱动机制，因此在处理请求时需要管理对象的状态。这可能会导致状态同步和状态不一致的问题，从而影响系统的正确性和可靠性。</li>
<li>缺乏标准化：活动对象模式没有标准化的实现方式，因此在不同的应用程序和框架中可能会有不同的实现方式和限制。这使得活动对象模式在不同的环境中难以移植和重用。</li>
</ol>
<p>总的来说，活动对象模式是一种强大的设计模式，可以用于实现异步处理、事件驱动、高性能、可伸缩和可靠的应用程序。但是，它也存在一些缺点，需要仔细考虑和权衡。在使用活动对象模式时，需要关注系统的复杂性、性能、调试难度、状态管理和标准化等问题。</p>
<h2 id="应用">应用</h2>
<h3 id="在开源框架中的应用">在开源框架中的应用</h3>
<p>活动对象设计模式在许多开源框架中都得到了广泛应用，以下是几个常见的例子：</p>
<ol>
<li>Akka框架：Akka是一个轻量级的Actor模型框架，通过将并发和异步处理的问题从客户端代码中分离出来，提高了系统的性能、可靠性和可维护性。在Akka中，每个Actor都是一个活动对象，通过消息传递的方式进行通信和协作。Akka提供了丰富的API和工具，可以方便地创建和管理Actor，实现高性能和可扩展的系统。</li>
<li>Vert.x框架：Vert.x是一个基于事件驱动的异步框架，提供了多种语言的API和工具，支持构建高性能和可扩展的应用程序。在Vert.x中，每个组件都是一个活动对象，可以通过Vert.x的事件总线进行通信和协作。Vert.x提供了丰富的异步API和工具，可以方便地处理并发和异步问题。</li>
<li>RxJava框架：RxJava是一个基于响应式编程的异步框架，提供了丰富的操作符和工具，支持构建高性能和可维护的应用程序。在RxJava中，每个Observable都是一个活动对象，可以通过异步流的方式进行通信和协作。RxJava提供了丰富的操作符和工具，可以方便地处理并发和异步问题，并支持响应式编程的多种特性，如响应式流、背压控制等。</li>
<li>Netty框架：Netty是一个基于事件驱动的异步网络通信框架，提供了丰富的API和工具，支持构建高性能和可扩展的网络应用程序。在Netty中，每个Channel都是一个活动对象，可以通过事件的方式进行通信和协作。Netty提供了丰富的异步API和工具，可以方便地处理网络通信和异步问题，并支持多种协议和编解码器。</li>
<li>Spring框架：Spring是一个广泛使用的企业级Java框架，提供了丰富的API和工具，支持构建高性能和可维护的应用程序。在Spring中，可以使用异步处理、响应式编程和事件驱动等方式实现活动对象模式。Spring提供了丰富的异步API和工具，可以方便地处理异步和并发问题。</li>
<li>JMS框架：JMS是Java消息服务的标准，提供了异步消息传递的方式，支持构建可靠、高性能和可扩展的消息系统。在JMS中，可以使用活动对象模式实现异步消息的处理和分发。JMS提供了丰富的API和工具，可以方便地处理异步消息的生产和消费。</li>
<li>Apache Camel框架：Apache Camel是一个基于企业级集成模式的开源框架，提供了丰富的组件和工具，支持构建可扩展、高性能和可靠的应用程序。在Camel中，可以使用活动对象模式实现异步消息的处理和路由。Camel提供了丰富的组件和工具，可以方便地处理异步消息的路由和转换。</li>
</ol>
<p>下面是一个使用Spring异步处理和事件驱动机制实现活动对象模式的示例代码，该示例代码使用了Spring Boot框架和Spring Reactor库：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">reactor.core.publisher.Flux</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">reactor.core.publisher.Mono</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">reactor.core.scheduler.Schedulers</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">MessageHandler</span> <span class="nf">messageHandler</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">MessageHandler</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageHandler</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">MessageRepository</span> <span class="n">messageRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Mono</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Mono</span><span class="o">.</span><span class="na">fromCallable</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 处理消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Received message: &#34;</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">messageRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="n">Message</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}).</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">boundedElastic</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Flux</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="nf">getAllMessages</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Flux</span><span class="o">.</span><span class="na">defer</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">Flux</span><span class="o">.</span><span class="na">fromIterable</span><span class="o">(</span><span class="n">messageRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">()))</span>
</span></span><span class="line"><span class="cl">                <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="n">Schedulers</span><span class="o">.</span><span class="na">boundedElastic</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Entity</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Message</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Id</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">content</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Message</span><span class="o">()</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Message</span><span class="o">(</span><span class="n">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>   
</span></span></code></pre></div><p>在上述示例代码中，我们定义了一个 <code>MessageHandler</code> 类作为活动对象，用于异步处理消息的接收和存储。该类使用了Spring异步处理和事件驱动机制来实现活动对象模式，客户端代码只需要调用相应的方法即可，不需要关心异步处理的细节。</p>
<p>具体来说，该示例代码包含以下几个部分：</p>
<ol>
<li>
<p><code>AppConfig</code> 配置类：该类用于配置Spring Bean，定义了一个 <code>messageHandler()</code> 方法，返回一个 <code>MessageHandler</code> 对象。</p>
</li>
<li>
<p><code>MessageHandler</code> 活动对象类：该类包含了两个方法：<code>handleMessage()</code> 和 <code>getAllMessages()</code>。<code>handleMessage()</code> 方法用于处理消息，将消息存储到数据库中；<code>getAllMessages()</code> 方法用于获取所有的消息。这两个方法都使用了Spring的异步处理机制和事件驱动机制，使用了 Reactor 库中的 <code>Mono</code> 和 <code>Flux</code> 类。</p>
</li>
<li>
<p><code>Message</code> JPA实体类：该类用于表示消息对象，使用了JPA注解。</p>
</li>
</ol>
<p>在 <code>handleMessage()</code> 方法中，我们使用了 <code>Mono.fromCallable()</code> 方法来异步处理消息的接收和存储，将处理操作提交到线程池中执行，然后返回 <code>Mono&lt;Void&gt;</code> 对象，以便客户端代码可以等待处理操作完成。我们还使用了 <code>subscribeOn()</code> 方法来指定异步处理的线程池，以提高系统的性能和可伸缩性。</p>
<p>在 <code>getAllMessages()</code> 方法中，我们使用了 <code>Flux.defer()</code> 方法来异步获取所有的消息，将获取操作提交到线程池中执行，然后返回 <code>Flux&lt;Message&gt;</code> 对象，以便客户端代码可以异步获取消息。我们同样使用了 <code>subscribeOn()</code> 方法来指定异步处理的线程池。</p>
<p>通过使用Spring异步处理和事件驱动机制，我们可以实现高性能、可靠和可扩展的活动对象模式，提高系统的性能和可维护性。</p>
<p>下面是一个使用活动对象模式实现异步消息处理和分发的JMS示例代码，该示例代码使用了ActiveMQ作为JMS消息中间件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">javax.jms.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">org.apache.activemq.ActiveMQConnectionFactory</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.CompletableFuture</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JMSMessageHandler</span> <span class="kd">implements</span> <span class="n">MessageListener</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Connection</span> <span class="n">connection</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Session</span> <span class="n">session</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Destination</span> <span class="n">destination</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">JMSMessageHandler</span><span class="o">(</span><span class="n">String</span> <span class="n">brokerUrl</span><span class="o">,</span> <span class="n">String</span> <span class="n">destinationName</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">JMSException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ConnectionFactory</span> <span class="n">connectionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActiveMQConnectionFactory</span><span class="o">(</span><span class="n">brokerUrl</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">connection</span> <span class="o">=</span> <span class="n">connectionFactory</span><span class="o">.</span><span class="na">createConnection</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">connection</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">session</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">createSession</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="n">Session</span><span class="o">.</span><span class="na">AUTO_ACKNOWLEDGE</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">destination</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createQueue</span><span class="o">(</span><span class="n">destinationName</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">MessageConsumer</span> <span class="n">consumer</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createConsumer</span><span class="o">(</span><span class="n">destination</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">consumer</span><span class="o">.</span><span class="na">setMessageListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="nf">send</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CompletableFuture</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createTextMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">MessageProducer</span> <span class="n">producer</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createProducer</span><span class="o">(</span><span class="n">destination</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">producer</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">textMessage</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">future</span><span class="o">.</span><span class="na">complete</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JMSException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">future</span><span class="o">.</span><span class="na">completeExceptionally</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">future</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="n">Messagemessage</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">CompletableFuture</span><span class="o">.</span><span class="na">runAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="k">instanceof</span> <span class="n">TextMessage</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">TextMessage</span> <span class="n">textMessage</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextMessage</span><span class="o">)</span> <span class="n">message</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">textMessage</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// 处理消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Received message: &#34;</span> <span class="o">+</span> <span class="n">text</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">JMSException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">});</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">JMSException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上述示例代码中，<code>JMSMessageHandler</code> 类表示一个JMS消息处理器，可以异步处理来自JMS队列的消息，并将处理结果发送回JMS队列。该类使用了活动对象模式来实现异步消息的处理和分发，客户端代码只需要发送消息即可，不需要关心异步处理的细节。</p>
<p>具体来说，该类包含以下几个方法：</p>
<ol>
<li>
<p><code>JMSMessageHandler(String brokerUrl, String destinationName)</code> 构造方法：该方法用于创建一个JMS消息处理器对象，连接到指定的JMS消息中间件并订阅指定的队列。</p>
</li>
<li>
<p><code>send(String message)</code> 方法：该方法用于发送消息到JMS队列中，客户端代码可以调用该方法将消息发送到指定的队列。</p>
</li>
<li>
<p><code>onMessage(Message message)</code> 方法：该方法是 <code>MessageListener</code> 接口的回调方法，用于异步处理队列中的消息，并将处理结果发送回JMS队列。</p>
</li>
<li>
<p><code>close()</code> 方法：该方法用于关闭JMS连接和线程池，释放资源。</p>
</li>
</ol>
<p>在 <code>send()</code> 方法中，我们使用了 <code>CompletableFuture</code> 对象来异步处理消息的发送，将发送操作提交到线程池中执行，然后返回 <code>CompletableFuture</code> 对象，以便客户端代码可以等待发送操作完成。</p>
<p>在 <code>onMessage()</code> 方法中，我们使用了 <code>CompletableFuture.runAsync()</code> 方法来异步处理消息的处理，将处理操作提交到线程池中执行，然后返回 <code>CompletableFuture</code> 对象，以便客户端代码可以等待处理操作完成。</p>
<p>通过使用活动对象模式和异步处理技术，我们可以实现高性能、可靠和可扩展的JMS消息处理器，提高系统的性能和可维护性。</p>
<h3 id="在项目中的使用">在项目中的使用</h3>
<p>在公司的项目中，用到过活动对象这个设计模式，只是之前并不清楚这个模式。使用场景是，发送飞书通知和拨打语音电话时，将请求添加到一个内部阻塞队列，然后单独启动一个线程去消费这个队列。</p>
<p>以下是拨打语音电话的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Tencent Cloud Vms SendTtsVoice
</span></span></span><span class="line"><span class="cl"><span class="cm"> * https://cloud.tencent.com/document/product/1128/51558
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="nd">@AllArgsConstructor</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VmsServiceImpl</span> <span class="kd">implements</span> <span class="n">VmsService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">PREFIX_PHONE</span> <span class="o">=</span> <span class="s">&#34;86&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">VoiceSenderRequest</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">TtsVoiceSender</span> <span class="n">ttsVoiceSender</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">final</span> <span class="n">AsyncVmsThread</span> <span class="n">asyncVmsThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AsyncVmsThread</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@PostConstruct</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">asyncVmsThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@PreDestroy</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">destroy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">asyncVmsThread</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendAsync</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">NoticeTarget</span><span class="o">&gt;</span> <span class="n">noticeUsers</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">templateId</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">templateId</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">CollectionUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">noticeUsers</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="o">(</span><span class="n">NoticeTarget</span> <span class="n">noticeUser</span> <span class="o">:</span> <span class="n">noticeUsers</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="o">(!</span><span class="n">noticeUser</span><span class="o">.</span><span class="na">getType</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">NoticeTargetTypeEnum</span><span class="o">.</span><span class="na">PHONE</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">queue</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="k">new</span> <span class="n">VoiceSenderRequest</span><span class="o">().</span><span class="na">setNoticeUser</span><span class="o">(</span><span class="n">noticeUser</span><span class="o">).</span><span class="na">setTemplateId</span><span class="o">(</span><span class="n">templateId</span><span class="o">).</span><span class="na">setParams</span><span class="o">(</span><span class="n">params</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">throw</span> <span class="k">new</span> <span class="n">BusinessException</span><span class="o">(</span><span class="s">&#34;线程被中断&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">send</span><span class="o">(</span><span class="n">String</span> <span class="n">phone</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">templateId</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">templateId</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">isBlank</span><span class="o">(</span><span class="n">phone</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">BusinessException</span><span class="o">(</span><span class="s">&#34;参数不能为空&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">TtsVoiceSenderResult</span> <span class="n">ttsVoiceSenderResult</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">ttsVoiceSenderResult</span> <span class="o">=</span> <span class="n">ttsVoiceSender</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">PREFIX_PHONE</span><span class="o">,</span> <span class="n">phone</span><span class="o">,</span> <span class="n">templateId</span><span class="o">,</span> <span class="n">params</span><span class="o">,</span> <span class="n">2</span><span class="o">,</span> <span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">ttsVoiceSenderResult</span><span class="o">.</span><span class="na">result</span> <span class="o">!=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">BusinessException</span><span class="o">(</span><span class="n">ttsVoiceSenderResult</span><span class="o">.</span><span class="na">errMsg</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">ttsVoiceSenderResult</span><span class="o">.</span><span class="na">result</span> <span class="o">==</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AsyncVmsThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">AtomicBoolean</span> <span class="n">isRunning</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicBoolean</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="nf">AsyncVmsThread</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kd">super</span><span class="o">(</span><span class="s">&#34;vmsSender&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="o">(</span><span class="n">isRunning</span><span class="o">.</span><span class="na">get</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">ThreadUtil</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">2000L</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="n">VoiceSenderRequest</span> <span class="n">voiceSenderRequest</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">				<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">voiceSenderRequest</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">					<span class="n">send</span><span class="o">(</span><span class="n">voiceSenderRequest</span><span class="o">.</span><span class="na">getNoticeUser</span><span class="o">().</span><span class="na">getId</span><span class="o">(),</span> <span class="n">voiceSenderRequest</span><span class="o">.</span><span class="na">getTemplateId</span><span class="o">(),</span> <span class="n">voiceSenderRequest</span><span class="o">.</span><span class="na">getParams</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;{}&#34;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;发送语音电话给[%s]出现异常: %s&#34;</span><span class="o">,</span> <span class="n">voiceSenderRequest</span><span class="o">.</span><span class="na">getNoticeUser</span><span class="o">(),</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()),</span> <span class="n">e</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">isRunning</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Data</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Accessors</span><span class="o">(</span><span class="n">chain</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">class</span> <span class="nc">VoiceSenderRequest</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">NoticeTarget</span> <span class="n">noticeUser</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">Integer</span> <span class="n">templateId</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="kd">private</span> <span class="n">String</span><span class="o">[]</span> <span class="n">params</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>优化之后的代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Thread</span> <span class="n">thread</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">16</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="n">queueSize</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="o">(</span><span class="n">isProcessingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">processRequest</span><span class="o">(</span><span class="n">requests</span><span class="o">.</span><span class="na">take</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="o">(</span><span class="n">sleepMillis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object thread interrupted, reason: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">},</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">task</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Error processing request: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(!</span><span class="n">requests</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Ignore exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">isAcceptingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">requests</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="s">&#34;Active object is no longer accepting requests&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">name</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>该类具有构造函数，用于创建具有给定名称和指定大小阻塞请求队列的Active Object。Active Object在后台的单独线程上运行，该线程在循环中执行，直到被中断。它使用<code>run</code>方法执行添加到请求队列中的请求。<code>run</code>方法接受一个<code>Runnable</code>对象，并将其添加到请求队列中。如果Active Object不再接受请求，则抛出<code>IllegalStateException</code>。</p>
<p><code>shutdown</code>方法用于停止Active Object。它首先将<code>isAcceptingRequests</code>标志设置为false，这将防止将任何进一步的请求添加到队列中。然后等待队列变为空，然后将<code>isProcessingRequests</code>标志设置为false，并中断Active Object的线程。</p>
<p>这个类本身已经是一个很好的Active Object模式的实现了，但是如果需要更高的性能或更好的扩展性，还可以进行一些优化：</p>
<ol>
<li>
<p>使用线程池：当前的实现中，每个Active Object都有一个单独的线程来处理请求。如果需要处理大量的Active Object，这将会产生很多线程，从而影响系统的性能和稳定性。可以使用线程池来管理线程，从而更好地控制线程的数量和资源的使用。</p>
<blockquote>
<p>如果在使用ActiveObject时要执行耗时的任务，可以将任务放到一个单独的线程池中执行，以避免阻塞ActiveObject实例的请求处理线程。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">ExecutorService</span> <span class="n">executorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Thread</span> <span class="n">thread</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">16</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="n">queueSize</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">5</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="o">(</span><span class="n">isProcessingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">processRequest</span><span class="o">(</span><span class="n">requests</span><span class="o">.</span><span class="na">take</span><span class="o">(),</span> <span class="n">executorService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="o">(</span><span class="n">sleepMillis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object thread interrupted, reason: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">},</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">,</span> <span class="n">ExecutorService</span> <span class="n">executorService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">executorService</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Error processing request: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(!</span><span class="n">requests</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Ignore exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">executorService</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">isAcceptingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">requests</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="s">&#34;Active object is no longer accepting requests&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">name</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在修改后的代码中，添加了一个私有变量executorService，用于存储一个线程池对象，其中线程池的大小为5。在构造方法中，创建了一个新的FixedThreadPoolExecutor实例，并将其作为executorService的值。该线程池会在ActiveObject实例中处理耗时任务，避免阻塞请求队列的处理。</p>
<p>在processRequest方法中，使用executorService.submit(task).get()来提交并执行任务。在执行任务时，使用了get()方法来同步获取任务的执行结果，以确保任务执行完成后再处理下一个请求。</p>
<p>在shutdown方法中，添加了executorService.shutdown()来关闭线程池。该方法会等待所有任务执行完成后关闭线程池，并防止新任务被提交。这样可以确保所有任务都被处理完毕后才关闭ActiveObject实例。</p>
<p>需要注意的是，在使用线程池时，要根据具体的业务需求和系统资源情况选择合适的线程池大小和类型，避免线程池过大或过小，从而影响系统性能或导致线程池拥堵。</p>
</blockquote>
</li>
<li>
<p>优化请求的处理：当前实现中，每个请求都会在执行完毕后等待100毫秒。如果请求处理较快，这将浪费很多时间。可以根据实际情况优化请求的处理方式，例如设置一个最小执行时间，或者使用更高效的数据结构来管理请求队列。</p>
<blockquote>
<p>在当前的实现中，使用了一个阻塞队列LinkedBlockingQueue来管理请求队列。这种数据结构的优点是可以保证线程安全，但是在高并发场景下可能会成为瓶颈，因为它是基于链表实现的，每次添加或删除元素时都需要进行同步操作，可能会影响性能。</p>
<p>如果需要更高效的请求队列管理方式，可以考虑使用无锁的并发队列，例如Disruptor或ConcurrentLinkedQueue。这些数据结构可以在高并发场景下提供更好的性能和可扩展性，但是需要更加复杂的实现和使用方法，需要根据具体的场景进行权衡和选择。如果使用Disruptor，需要进行更加细致的配置和调优，以便发挥最大的性能优势。如果使用ConcurrentLinkedQueue，需要考虑并发问题，例如使用CAS操作来保证线程安全。</p>
<p>如果使用ConcurrentLinkedQueue来管理请求队列，需要考虑并发问题，因为该数据结构是非阻塞的，多个线程可以同时对其进行操作，可能会导致并发问题，例如竞态条件和内存一致性问题。</p>
<p>为了保证线程安全，可以使用CAS（Compare and Swap）操作来实现原子性的元素插入和删除。CAS操作可以保证只有一个线程能够成功修改共享变量的值，其他线程需要重试或者等待。</p>
<p>例如，在ActiveObject类中，可以将请求队列声明为ConcurrentLinkedQueue类型，并使用CAS操作来实现元素的插入和删除：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="o">(</span><span class="n">isProcessingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">Runnable</span> <span class="n">task</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">task</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">task</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object thread interrupted, reason: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">},</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>  
</span></span></code></pre></div><p>在上面的代码中，使用了ConcurrentLinkedQueue来替换了原有的阻塞队列LinkedBlockingQueue，并使用了poll方法来获取队列中的下一个元素，而不是take方法，这样可以避免线程阻塞。然后使用CAS操作来实现元素的添加，使用了offer方法，并检查返回值是否为true，如果为false则表示CAS操作失败，需要重试或者等待。</p>
<p>需要注意的是，ConcurrentLinkedQueue并不能保证元素的顺序，因此在处理请求时需要注意顺序问题，不能保证先进先出的顺序。如果需要保证顺序，可以使用其他的数据结构，例如BlockingQueue。</p>
</blockquote>
</li>
</ol>
<p>上面的代码已经很不错了，但还有一些可以优化的地方：</p>
<ol>
<li>使用工厂方法来创建ActiveObject实例</li>
</ol>
<p>可以将ActiveObject类中的构造方法改为私有的，然后提供一个工厂方法来创建ActiveObject实例。这样可以将ActiveObject的创建逻辑与客户端代码分离，使得客户端代码更加简洁和易于维护。</p>
<ol start="2">
<li>将日志记录器作为静态变量</li>
</ol>
<p>可以将日志记录器作为静态变量，以便在整个类中共享。这样可以避免在每个方法中都创建一个日志记录器，提高代码的可读性和性能。</p>
<ol start="3">
<li>使用线程安全的单例模式</li>
</ol>
<p>可以使用线程安全的单例模式来确保ActiveObject实例的唯一性。这样可以避免在多个地方创建多个ActiveObject实例，从而导致系统资源浪费或数据不一致。</p>
<p>修改后的代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">ActiveObject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ActiveObject</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">ExecutorService</span> <span class="n">executorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">Thread</span> <span class="n">thread</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="n">queueSize</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">5</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="o">(</span><span class="n">isProcessingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">processRequest</span><span class="o">(</span><span class="n">requests</span><span class="o">.</span><span class="na">take</span><span class="o">(),</span> <span class="n">executorService</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="o">(</span><span class="n">sleepMillis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object thread interrupted, reason: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">},</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">processRequest</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">,</span> <span class="n">ExecutorService</span> <span class="n">executorService</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">executorService</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Error processing request: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ActiveObject</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">getInstance</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">16</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">publicvoid</span> <span class="nf">submit</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">isAcceptingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">requests</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Error submitting request: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object is not accepting requests&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ActiveObject</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">ActiveObject</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActiveObject</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="o">(!</span><span class="n">requests</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Ignore exception
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">isProcessingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">executorService</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">thread</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>上面的代码已经很不错了，但还有一些可以进一步优化的地方：</p>
<ol>
<li>使用线程池来管理线程，而不是每次创建一个新的线程。这样可以减少线程的创建和销毁的开销，提高代码的性能。</li>
</ol>
<ol start="2">
<li>
<p>使用Lambda表达式简化代码，使代码更加简洁和易于理解。例如，可以将线程中的while循环改为Lambda表达式，简化代码。</p>
</li>
<li>
<p>使用CompletableFuture来实现异步处理，将请求的处理过程和结果的返回分离开来。这样可以提高代码的可读性和可维护性，同时也可以提高代码的性能。</p>
</li>
<li>
<p>使用ThreadFactory来命名线程，以便更好地跟踪线程的执行情况以及排查问题。</p>
</li>
<li>
<p>使用CompletableFuture的exceptionally方法处理异常，以避免在处理请求时出现异常而导致整个线程停止。</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ActiveObject</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">ActiveObject</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">ActiveObject</span><span class="o">&gt;</span> <span class="n">INSTANCES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">THREAD_POOL_SIZE</span> <span class="o">=</span> <span class="n">5</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">requests</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">ExecutorService</span> <span class="n">executorService</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">CompletableFuture</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="n">processingFuture</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="nf">ActiveObject</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">requests</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="n">queueSize</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">executorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">THREAD_POOL_SIZE</span><span class="o">,</span> <span class="k">new</span> <span class="n">ThreadFactory</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="kd">private</span> <span class="n">AtomicInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">(</span><span class="n">0</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="kd">public</span> <span class="n">Thread</span> <span class="nf">newThread</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="s">&#34;ActiveObject-&#34;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&#34;-&#34;</span> <span class="o">+</span> <span class="n">count</span><span class="o">.</span><span class="na">getAndIncrement</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">});</span>
</span></span><span class="line"><span class="cl">		<span class="n">processingFuture</span> <span class="o">=</span> <span class="n">CompletableFuture</span><span class="o">.</span><span class="na">runAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="o">(</span><span class="n">isAcceptingRequests</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">executorService</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">requests</span><span class="o">.</span><span class="na">take</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="o">(</span><span class="n">sleepMillis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">						<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">					<span class="o">}</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">interrupt</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&#34;Active Object thread interrupted, reason: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">				<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Error processing request: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// 发送告警信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="o">}</span>
</span></span><span class="line"><span class="cl">			<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="o">}).</span><span class="na">exceptionally</span><span class="o">(</span><span class="n">e</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&#34;Exception occurred in ActiveObject thread: {}&#34;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="o">});</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">submit</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">task</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">requests</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">isAcceptingRequests</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">processingFuture</span><span class="o">.</span><span class="na">cancel</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">executorService</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ActiveObject</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">getInstance</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">16</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">ActiveObject</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">Long</span> <span class="n">sleepMillis</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">ActiveObject</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">INSTANCES</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActiveObject</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">queueSize</span><span class="o">,</span> <span class="n">sleepMillis</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">			<span class="n">INSTANCES</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">instance</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="o">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="总结">总结</h2>
<p>活动对象模式是一种支持异步处理和事件驱动的设计模式，适用于一些需要高性能、可伸缩和可靠的应用场景。以下是几个适用于活动对象模式的使用场景：</p>
<ol>
<li>大规模并发处理：在大规模并发的情况下，使用传统的同步处理方式会导致系统性能下降和响应时间延长。使用活动对象模式可以将并发请求转换成异步事件，通过事件驱动机制实现高性能和可伸缩。</li>
<li>高吞吐量数据处理：在需要处理大量数据的情况下，使用活动对象模式可以利用多核CPU和异步处理技术，提高系统的处理能力和吞吐量。</li>
<li>异步消息传递：在需要异步处理消息的情况下，使用活动对象模式可以实现异步消息的处理和分发，提高系统的可靠性和可维护性。</li>
<li>分布式系统：在分布式系统中，使用活动对象模式可以实现异步消息传递和事件驱动，提高系统的可靠性和可伸缩性。同时，活动对象模式还可以通过分布式锁和分布式计算等技术实现分布式并发控制和计算，提高系统的性能和可靠性。</li>
<li>UI和后台逻辑分离：在需要将UI和后台逻辑分离的情况下，使用活动对象模式可以实现UI和后台逻辑的解耦和异步处理，提高系统的可维护性和可扩展性。</li>
<li>异步IO操作：在需要进行异步IO操作的情况下，使用活动对象模式可以实现非阻塞IO和异步事件处理，提高系统的性能和响应时间。</li>
</ol>
<p>总的来说，活动对象模式适用于一些需要异步处理、事件驱动、高性能、可伸缩和可靠的应用场景。通过使用活动对象模式，可以提高系统的性能和可维护性，同时降低系统的复杂度和成本。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Abstract Document</title>
      <link>https://blog.chensoul.com/posts/2023/05/22/java-design-patterns-abstract-document/</link>
      <pubDate>Mon, 22 May 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/22/java-design-patterns-abstract-document/</guid>
      <description>本文主要介绍 Abstract Document 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计</description>
      <content:encoded><![CDATA[<p>本文主要介绍  Abstract Document 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="目的">目的</h2>
<p>使用动态属性，并在保持类型安全的同时实现非类型化语言的灵活性。</p>
<blockquote>
<p>抽象文档模式中的属性对象可以动态添加和删除属性，并且属性类型是在运行时确定的，这使得抽象文档模式具有一定的灵活性和可扩展性。</p>
<p>在抽象文档模式中，属性对象通常使用 Map 或者 List 等数据结构来实现。动态属性的添加和删除可以通过 Map 的 put 和 remove 方法实现，而属性的类型可以通过泛型来确定。</p>
</blockquote>
<h2 id="解释">解释</h2>
<p>抽象文档模式使您能够处理其他非静态属性。 此模式使用特征的概念来实现类型安全，并将不同类的属性分离为一组接口。</p>
<p>真实世界例子</p>
<blockquote>
<p>考虑由多个部分组成的汽车。 但是，我们不知道特定汽车是否真的拥有所有零件，或者仅仅是零件中的一部分。 我们的汽车是动态而且非常灵活的。</p>
</blockquote>
<p>通俗的说</p>
<blockquote>
<p>抽象文档模式允许在对象不知道的情况下将属性附加到对象。</p>
</blockquote>
<p>维基百科说</p>
<blockquote>
<p>面向对象的结构设计模式，用于组织松散类型的键值存储中的对象并使用类型化的视图公开数据。 该模式的目的是在强类型语言中实现组件之间的高度灵活性，在这种语言中，可以在不丢失类型安全支持的情况下，将新属性动态地添加到对象树中。 该模式利用特征将类的不同属性分成不同的接口。</p>
</blockquote>
<p><strong>程序示例</strong></p>
<p>让我们首先定义基类<code>Document</code>和<code>AbstractDocument</code>。 它们基本上使对象拥有属性映射和任意数量的子对象。</p>
<blockquote>
<p>以下代码在 java 8 中编译正常。</p>
</blockquote>
<p>Document 接口：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">constructor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><blockquote>
<p>以下接口不使用 Java 8的Stream API：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div></blockquote>
<p>AbstractDocument 抽象类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractDocument</span> <span class="kd">implements</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">protected</span> <span class="nf">AbstractDocument</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">properties</span><span class="o">,</span> <span class="s">&#34;properties map is required&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">properties</span> <span class="o">=</span> <span class="n">properties</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">properties</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">properties</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">constructor</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// java 9
</span></span></span><span class="line"><span class="cl"><span class="c1">//		return Stream.ofNullable(get(key))
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.filter(Objects::nonNull)
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.map(el -&gt; (List&lt;Map&lt;String, Object&gt;&gt;) el)
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.findAny()
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.stream()
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.flatMap(Collection::stream)
</span></span></span><span class="line"><span class="cl"><span class="c1">//			.map(constructor);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">		<span class="c1">// java 8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">key</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">el</span> <span class="o">-&gt;</span> <span class="n">el</span> <span class="k">instanceof</span> <span class="n">List</span><span class="o">&lt;?&gt;)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">el</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;&gt;)</span> <span class="n">el</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">List</span><span class="o">::</span><span class="n">stream</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">orElseGet</span><span class="o">(</span><span class="n">Stream</span><span class="o">::</span><span class="n">empty</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">constructor</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">properties</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>接下来，我们定义一个枚举“属性”和一组类型，价格，模型和零件的接口。 这使我们能够为Car类创建静态外观的界面。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">enum</span> <span class="n">Property</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">PARTS</span><span class="o">,</span> <span class="n">TYPE</span><span class="o">,</span> <span class="n">PRICE</span><span class="o">,</span> <span class="n">MODEL</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HasType</span> <span class="kd">extends</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">default</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getType</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">get</span><span class="o">(</span><span class="n">Property</span><span class="o">.</span><span class="na">TYPE</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HasPrice</span> <span class="kd">extends</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">default</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">Number</span><span class="o">&gt;</span> <span class="nf">getPrice</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">((</span><span class="n">Number</span><span class="o">)</span> <span class="n">get</span><span class="o">(</span><span class="n">Property</span><span class="o">.</span><span class="na">PRICE</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HasModel</span> <span class="kd">extends</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">default</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">getModel</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">get</span><span class="o">(</span><span class="n">Property</span><span class="o">.</span><span class="na">MODEL</span><span class="o">.</span><span class="na">toString</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HasParts</span> <span class="kd">extends</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">default</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">Part</span><span class="o">&gt;</span> <span class="nf">getParts</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">children</span><span class="o">(</span><span class="n">Property</span><span class="o">.</span><span class="na">PARTS</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">Part</span><span class="o">::</span><span class="k">new</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Part</span> <span class="kd">extends</span> <span class="n">AbstractDocument</span> <span class="kd">implements</span> <span class="n">HasType</span><span class="o">,</span> <span class="n">HasModel</span><span class="o">,</span> <span class="n">HasPrice</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Part</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">properties</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在我们准备介绍 <code>Car</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Car</span> <span class="kd">extends</span> <span class="n">AbstractDocument</span> <span class="kd">implements</span> <span class="n">HasModel</span><span class="o">,</span> <span class="n">HasPrice</span><span class="o">,</span> <span class="n">HasParts</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Car</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">properties</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>最后是完整示例中的<code>Car</code>构造和使用方式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Program entry point.
</span></span></span><span class="line"><span class="cl"><span class="cm">	 *
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * @param args command line args
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Constructing parts and car&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">wheelProperties</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">TYPE</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;wheel&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">MODEL</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;15C&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">PRICE</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">100L</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">doorProperties</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">TYPE</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;door&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">MODEL</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;Lambo&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">PRICE</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">300L</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">carProperties</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">MODEL</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&#34;300SL&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">PRICE</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">10000L</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">Property</span><span class="o">.</span><span class="na">PARTS</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">wheelProperties</span><span class="o">,</span> <span class="n">doorProperties</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">Car</span> <span class="n">car</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Car</span><span class="o">(</span><span class="n">carProperties</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;Here is our car:&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;-&gt; model: {}&#34;</span><span class="o">,</span> <span class="n">car</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;-&gt; price: {}&#34;</span><span class="o">,</span> <span class="n">car</span><span class="o">.</span><span class="na">getPrice</span><span class="o">().</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;-&gt; parts: &#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">car</span><span class="o">.</span><span class="na">getParts</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">p</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;\t{}/{}/{}&#34;</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">			<span class="n">p</span><span class="o">.</span><span class="na">getType</span><span class="o">().</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">			<span class="n">p</span><span class="o">.</span><span class="na">getModel</span><span class="o">().</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">),</span>
</span></span><span class="line"><span class="cl">			<span class="n">p</span><span class="o">.</span><span class="na">getPrice</span><span class="o">().</span><span class="na">orElse</span><span class="o">(</span><span class="kc">null</span><span class="o">))</span>
</span></span><span class="line"><span class="cl">		<span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>再来一个示例代码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="kd">extends</span> <span class="n">AbstractDocument</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">Person</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">super</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="s">&#34;John Doe&#34;</span><span class="o">,</span>  
</span></span><span class="line"><span class="cl">      <span class="s">&#34;age&#34;</span><span class="o">,</span> <span class="n">30</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;hobbies&#34;</span><span class="o">,</span> <span class="n">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;Sports&#34;</span><span class="o">,</span> <span class="s">&#34;Music&#34;</span><span class="o">));</span>     
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">          
</span></span><span class="line"><span class="cl">          
</span></span><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersonApp</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Person</span> <span class="n">person</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;name: {}&#34;</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;age: {}&#34;</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;hobbies: {}&#34;</span><span class="o">,</span> <span class="n">person</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;hobbies&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/abstract-document-9f6a2e8d.png" alt="alt text"  />
</p>
<h2 id="适用性">适用性</h2>
<p>使用抽象文档模式，当</p>
<ul>
<li>需要即时添加新属性</li>
<li>你想要一种灵活的方式来以树状结构组织域</li>
<li>你想要更宽松的耦合系统</li>
</ul>
<p>下面是抽象文档模式的一些实际应用：</p>
<h3 id="1xml-和-json-解析">1、XML 和 JSON 解析</h3>
<p>抽象文档模式可以用于解析 XML 和 JSON 数据。由于 XML 和 JSON 数据通常包含动态属性，因此抽象文档模式可以提供一种灵活的方式来处理这些数据。通过将 XML 或 JSON 数据映射到文档和属性对象，可以轻松地访问和修改这些数据。</p>
<h4 id="xml解析">XML解析</h4>
<p>假设我们有一个简单的XML文件，内容如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bookstore&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;book</span> <span class="na">category=</span><span class="s">&#34;cooking&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;title</span> <span class="na">lang=</span><span class="s">&#34;en&#34;</span><span class="nt">&gt;</span>Everyday Italian<span class="nt">&lt;/title&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;author&gt;</span>Giada De Laurentiis<span class="nt">&lt;/author&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;year&gt;</span>2005<span class="nt">&lt;/year&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;price&gt;</span>30.00<span class="nt">&lt;/price&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/book&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;book</span> <span class="na">category=</span><span class="s">&#34;children&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;title</span> <span class="na">lang=</span><span class="s">&#34;en&#34;</span><span class="nt">&gt;</span>Harry Potter<span class="nt">&lt;/title&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;author&gt;</span>J.K. Rowling<span class="nt">&lt;/author&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;year&gt;</span>2003<span class="nt">&lt;/year&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;price&gt;</span>29.99<span class="nt">&lt;/price&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;/book&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bookstore&gt;</span>
</span></span></code></pre></div><p>我们可以使用抽象文档模式来解析这个XML文件，首先定义一个<code>Document</code>接口，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后定义一个具体的XML文档类，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">XmlDocument</span> <span class="kd">implements</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Element</span> <span class="n">element</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="nf">XmlDocument</span><span class="o">(</span><span class="n">Element</span> <span class="n">element</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">.</span><span class="na">element</span> <span class="o">=</span> <span class="n">element</span><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">element</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">element</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">NodeList</span> <span class="n">nodes</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getElementsByTagName</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nodes</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">XmlDocument</span><span class="o">((</span><span class="n">Element</span><span class="o">)</span> <span class="n">nodes</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">children</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个具体的XML文档类中，我们实现了<code>Document</code>接口的三个方法，其中<code>children</code>方法使用了DOM API来获取子元素列表，并将每个子元素包装成一个新的<code>XmlDocument</code>对象。</p>
<p>现在，我们可以使用这个具体的XML文档类来解析XML文件，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">DocumentBuilderFactory</span> <span class="n">dbFactory</span> <span class="o">=</span> <span class="n">DocumentBuilderFactory</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">DocumentBuilder</span> <span class="n">dBuilder</span> <span class="o">=</span> <span class="n">dbFactory</span><span class="o">.</span><span class="na">newDocumentBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Document</span> <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XmlDocument</span><span class="o">(</span><span class="n">dBuilder</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&#34;books.xml&#34;</span><span class="o">)).</span><span class="na">getDocumentElement</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 获取根元素的属性值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">String</span> <span class="n">bookstoreCategory</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;category&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 获取所有书的信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">books</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;book&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="n">Document</span> <span class="n">book</span> <span class="o">:</span> <span class="n">books</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">category</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;category&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">title</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">book</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;title&#34;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="n">author</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">book</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;author&#34;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">year</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">book</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;year&#34;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">price</span> <span class="o">=</span> <span class="o">(</span><span class="kt">double</span><span class="o">)</span> <span class="n">book</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;price&#34;</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Category: &#34;</span> <span class="o">+</span> <span class="n">category</span> <span class="o">+</span> <span class="s">&#34;, Title: &#34;</span> <span class="o">+</span> <span class="n">title</span> <span class="o">+</span> <span class="s">&#34;, Author: &#34;</span> <span class="o">+</span> <span class="n">author</span> <span class="o">+</span> <span class="s">&#34;, Year: &#34;</span> <span class="o">+</span> <span class="n">year</span> <span class="o">+</span> <span class="s">&#34;, Price: &#34;</span> <span class="o">+</span> <span class="n">price</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h4 id="json解析">JSON解析</h4>
<p>假设我们有一个简单的JSON文件，以下是<code>example.json</code>文件的内容：：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;John Smith&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="mi">35</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;address&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;street&#34;</span><span class="p">:</span> <span class="s2">&#34;123 Main St&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;city&#34;</span><span class="p">:</span> <span class="s2">&#34;Anytown&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;state&#34;</span><span class="p">:</span> <span class="s2">&#34;CA&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;zip&#34;</span><span class="p">:</span> <span class="s2">&#34;12345&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;phone&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;home&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;number&#34;</span><span class="p">:</span> <span class="s2">&#34;555-1234&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;work&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;number&#34;</span><span class="p">:</span> <span class="s2">&#34;555-5678&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>我们可以使用抽象文档模式来解析这个JSON文件，首先定义一个<code>Document</code>接口，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>然后定义一个具体的JSON文档类，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">com.google.gson.*</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonDocument</span> <span class="kd">implements</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">JsonObject</span> <span class="n">object</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">JsonDocument</span><span class="o">(</span><span class="n">JsonObject</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">JsonElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">element</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">isJsonPrimitive</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonPrimitive</span> <span class="n">primitive</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAsJsonPrimitive</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">primitive</span><span class="o">.</span><span class="na">isNumber</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">primitive</span><span class="o">.</span><span class="na">getAsNumber</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">primitive</span><span class="o">.</span><span class="na">isBoolean</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">primitive</span><span class="o">.</span><span class="na">getAsBoolean</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">primitive</span><span class="o">.</span><span class="na">getAsString</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">isJsonObject</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">new</span> <span class="n">JsonDocument</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">getAsJsonObject</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">isJsonArray</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonArray</span> <span class="n">array</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAsJsonArray</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">JsonElement</span> <span class="n">child</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">JsonDocument</span><span class="o">(</span><span class="n">child</span><span class="o">.</span><span class="na">getAsJsonObject</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">children</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">object</span><span class="o">.</span><span class="na">addProperty</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">Number</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">object</span><span class="o">.</span><span class="na">addProperty</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="o">(</span><span class="n">Number</span><span class="o">)</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">Boolean</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">object</span><span class="o">.</span><span class="na">addProperty</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="o">(</span><span class="n">Boolean</span><span class="o">)</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">Document</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonDocument</span> <span class="n">jsonDocument</span> <span class="o">=</span> <span class="o">(</span><span class="n">JsonDocument</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">object</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">jsonDocument</span><span class="o">.</span><span class="na">object</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">List</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonArray</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonArray</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">Document</span> <span class="n">child</span> <span class="o">:</span> <span class="n">children</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">JsonDocument</span> <span class="n">jsonChild</span> <span class="o">=</span> <span class="o">(</span><span class="n">JsonDocument</span><span class="o">)</span> <span class="n">child</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">array</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">jsonChild</span><span class="o">.</span><span class="na">object</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">object</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">array</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">JsonElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">element</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">element</span><span class="o">.</span><span class="na">isJsonArray</span><span class="o">())</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonArray</span> <span class="n">array</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="na">getAsJsonArray</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">JsonElement</span> <span class="n">child</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">children</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">JsonDocument</span><span class="o">(</span><span class="n">child</span><span class="o">.</span><span class="na">getAsJsonObject</span><span class="o">()));</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">children</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在，我们可以使用这个具体的JSON文档类来解析JSON文件，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonParsingExample</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 读取JSON文件并解析
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">Gson</span> <span class="n">gson</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Gson</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonElement</span> <span class="n">jsonElement</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">fromJson</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&#34;example.json&#34;</span><span class="o">),</span> <span class="n">JsonElement</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">JsonDocument</span> <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JsonDocument</span><span class="o">(</span><span class="n">jsonElement</span><span class="o">.</span><span class="na">getAsJsonObject</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取根元素的属性值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">JsonDocument</span> <span class="n">address</span> <span class="o">=</span> <span class="o">(</span><span class="n">JsonDocument</span><span class="o">)</span> <span class="n">doc</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;address&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">street</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">address</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;street&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">city</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">address</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;city&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">state</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">address</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;state&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">String</span> <span class="n">zip</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">address</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;zip&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 获取电话号码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">List</span><span class="o">&lt;</span><span class="n">Document</span><span class="o">&gt;</span> <span class="n">phoneList</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="na">children</span><span class="o">(</span><span class="s">&#34;phone&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="o">(</span><span class="n">Document</span> <span class="n">phone</span> <span class="o">:</span> <span class="n">phoneList</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">String</span> <span class="n">type</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">phone</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;type&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">String</span> <span class="n">number</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">phone</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&#34;number&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">type</span> <span class="o">+</span> <span class="s">&#34;: &#34;</span> <span class="o">+</span> <span class="n">number</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="2动态配置">2、动态配置</h3>
<p>抽象文档模式可以用于动态配置。通过将配置数据映射到文档和属性对象，可以轻松地访问和修改配置数据。此外，由于抽象文档模式支持动态属性，因此可以在运行时添加或删除属性，从而使配置更加灵活。</p>
<p>假设有一个学生信息管理系统，需要存储和检索学生信息。学生信息包括学生姓名、学生年龄、学生性别、学生家庭地址等属性。由于学生属性可能会随时变化，因此需要使用一种灵活的方式来处理这些属性，并且需要轻松地访问和修改这些属性。</p>
<p>为了实现这个功能，可以使用抽象文档模式。定义一个学生文档类（StudentDocument），该类包含学生属性的访问器和修改器方法，并且支持动态属性。然后，定义一个学生属性类（Property），该类包含属性名称、属性类型和属性值等属性，并且支持动态属性。最后，使用一个构建器（Builder）类来创建具体的学生文档对象，并将学生属性添加到文档中。</p>
<p>示例代码如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Property</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">Object</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Property</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getValue</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Property</span><span class="o">&gt;</span> <span class="n">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getProperty</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Property</span> <span class="n">property</span> <span class="o">:</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">property</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">property</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProperty</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="n">Property</span> <span class="n">property</span> <span class="o">:</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">property</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">property</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">properties</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Property</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StudentDocument</span> <span class="kd">extends</span> <span class="n">Document</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">getProperty</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">setProperty</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">getProperty</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">setProperty</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getGender</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">getProperty</span><span class="o">(</span><span class="s">&#34;gender&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">String</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">setProperty</span><span class="o">(</span><span class="s">&#34;gender&#34;</span><span class="o">,</span> <span class="n">gender</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAddress</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">getProperty</span><span class="o">(</span><span class="s">&#34;address&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddress</span><span class="o">(</span><span class="n">Stringaddress</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">setProperty</span><span class="o">(</span><span class="s">&#34;address&#34;</span><span class="o">,</span> <span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StudentBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">StudentDocument</span> <span class="n">student</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StudentDocument</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">student</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">student</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setGender</span><span class="o">(</span><span class="n">String</span> <span class="n">gender</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">student</span><span class="o">.</span><span class="na">setGender</span><span class="o">(</span><span class="n">gender</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAddress</span><span class="o">(</span><span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">student</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">StudentDocument</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">student</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>使用抽象文档模式，可以轻松地访问和修改学生属性，如下所示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">StudentBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StudentBuilder</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;Tom&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">18</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="o">.</span><span class="na">setGender</span><span class="o">(</span><span class="s">&#34;Male&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="s">&#34;Beijing&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">StudentDocument</span> <span class="n">student</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span> <span class="c1">// 输出：Tom
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">student</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="s">&#34;Shanghai&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getAddress</span><span class="o">());</span> <span class="c1">// 输出：Shanghai
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">student</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">&#34;phoneNumber&#34;</span><span class="o">,</span> <span class="s">&#34;1234567890&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">student</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;phoneNumber&#34;</span><span class="o">));</span> <span class="c1">// 输出：1234567890
</span></span></span></code></pre></div><h3 id="3业务规则引擎">3、业务规则引擎</h3>
<p>抽象文档模式可以用于实现业务规则引擎。通过将规则数据映射到文档和属性对象，可以轻松地访问和修改规则数据。此外，由于抽象文档模式支持动态属性，因此可以在运行时添加或删除规则，从而使规则引擎更加灵活。</p>
<p>假设我们有一个简单的业务规则，用于确定用户是否有资格获得某项奖励。这个规则可能涉及到多个条件，例如用户的年龄、所在地区以及购物金额等。</p>
<p>我们可以将这个规则表示为一个文档，例如一个JSON文档，其中每个属性对应一个规则条件。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;age&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;&gt;=&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="mi">18</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;region&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;in&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;east&#34;</span><span class="p">,</span> <span class="s2">&#34;south&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;amount&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;operator&#34;</span><span class="p">:</span> <span class="s2">&#34;&gt;=&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>然后，我们可以使用抽象文档模式来解析这个文档，并将其转换为一个规则对象。例如，我们可以创建一个名为<code>Rule</code>的类，它包含三个属性：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Rule</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">key</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">operator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">secondValue</span><span class="o">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Rule</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">operator</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">operator</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Rule</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">String</span> <span class="n">operator</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">,</span> <span class="n">Object</span> <span class="n">secondValue</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">operator</span> <span class="o">=</span> <span class="n">operator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">secondValue</span> <span class="o">=</span> <span class="n">secondValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">evaluate</span><span class="o">(</span><span class="n">Document</span> <span class="n">document</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Object</span> <span class="n">documentValue</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">documentValue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">switch</span> <span class="o">(</span><span class="n">operator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;&gt;=&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;&lt;=&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;&gt;&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;&lt;&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;==&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span><span class="n">value</span><span class="o">)</span> <span class="o">==</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;!=&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">!=</span> <span class="n">0</span><span class="o">;</span>  
</span></span><span class="line"><span class="cl">          	<span class="k">case</span> <span class="s">&#34;in&#34;</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">List</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">listValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;?&gt;)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">item</span> <span class="o">:</span> <span class="n">listValue</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="o">(</span><span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">item</span><span class="o">)</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                        <span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;not in&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">            		<span class="kt">boolean</span> <span class="n">found</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">List</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">listValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;?&gt;)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">item</span> <span class="o">:</span> <span class="n">listValue</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="o">(</span><span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">item</span><span class="o">)</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                            <span class="n">found</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                          	<span class="k">break</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                        <span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="o">!</span><span class="n">found</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          	<span class="k">case</span> <span class="s">&#34;between&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">secondValue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">cmp1</span> <span class="o">=</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">cmp2</span> <span class="o">=</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">secondValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">cmp1</span> <span class="o">&gt;=</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">cmp2</span> <span class="o">&lt;=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;not between&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">secondValue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">cmp1</span> <span class="o">=</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">cmp2</span> <span class="o">=</span> <span class="n">compare</span><span class="o">(</span><span class="n">documentValue</span><span class="o">,</span> <span class="n">secondValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">cmp1</span> <span class="o">&lt;</span> <span class="n">0</span> <span class="o">||</span> <span class="n">cmp2</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          	<span class="k">case</span> <span class="s">&#34;regex&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">documentValue</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strDocumentValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">documentValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">strDocumentValue</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="n">strValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;startswith&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="o">(</span><span class="n">documentValue</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strDocumentValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">documentValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">strDocumentValue</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="n">strValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;endswith&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">documentValue</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strDocumentValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">documentValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">strDocumentValue</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="n">strValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="s">&#34;like&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">documentValue</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strDocumentValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">documentValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="n">strDocumentValue</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">strValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">          	<span class="k">case</span> <span class="s">&#34;not like&#34;</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="n">documentValue</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">value</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="n">String</span> <span class="n">strDocumentValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">documentValue</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="o">!</span><span class="n">strDocumentValue</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">strValue</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">           	<span class="k">default</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Object</span> <span class="n">a</span><span class="o">,</span> <span class="n">Object</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="k">instanceof</span> <span class="n">Number</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="k">instanceof</span> <span class="n">Number</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">Double</span><span class="o">.</span><span class="na">compare</span><span class="o">(((</span><span class="n">Number</span><span class="o">)</span> <span class="n">a</span><span class="o">).</span><span class="na">doubleValue</span><span class="o">(),</span> <span class="o">((</span><span class="n">Number</span><span class="o">)</span> <span class="n">b</span><span class="o">).</span><span class="na">doubleValue</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="k">instanceof</span> <span class="n">String</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">a</span><span class="o">).</span><span class="na">compareTo</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">b</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">a</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">compareTo</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><code>Rule</code>类有一个<code>evaluate</code>方法，它接受一个<code>Document</code>对象，并根据规则条件对文档进行评估。例如，对于上面的规则文档，我们可以创建三个<code>Rule</code>对象：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Rule</span> <span class="n">ageRule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rule</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">,</span> <span class="s">&#34;between&#34;</span><span class="o">,</span> <span class="n">18</span><span class="o">,</span> <span class="n">30</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="n">Rule</span> <span class="n">regionRule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rule</span><span class="o">(</span><span class="s">&#34;region&#34;</span><span class="o">,</span> <span class="s">&#34;in&#34;</span><span class="o">,</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;east&#34;</span><span class="o">,</span> <span class="s">&#34;south&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl"><span class="n">Rule</span> <span class="n">amountRule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rule</span><span class="o">(</span><span class="s">&#34;amount&#34;</span><span class="o">,</span> <span class="s">&#34;&gt;=&#34;</span><span class="o">,</span> <span class="n">1000</span><span class="o">);</span>
</span></span></code></pre></div><p>然后，我们可以将这些规则应用于用户数据，例如一个存储在数据库中的用户记录。我们可以将用户数据表示为一个文档，例如一个XML文档：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;user&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;name&gt;</span>John Doe<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;age&gt;</span>25<span class="nt">&lt;/age&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;region&gt;</span>east<span class="nt">&lt;/region&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&lt;amount&gt;</span>1200<span class="nt">&lt;/amount&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/user&gt;</span>
</span></span></code></pre></div><p>我们可以使用抽象文档模式解析该文档并将其转换为<code>Document</code>对象。然后，我们可以使用<code>Rule</code>对象和<code>Document</code>对象来评估用户是否有资格获得奖励。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Document</span> <span class="n">userDocument</span> <span class="o">=</span> <span class="o">...</span> <span class="c1">// 解析用户数据为一个Document对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">boolean</span> <span class="n">isEligible</span> <span class="o">=</span> <span class="n">ageRule</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">userDocument</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">regionRule</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">userDocument</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">amountRule</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">userDocument</span><span class="o">);</span>
</span></span></code></pre></div><h3 id="4数据库映射">4、数据库映射</h3>
<p>抽象文档模式可以用于将数据库数据映射到文档和属性对象上。通过将数据库表映射到文档对象，将表的列映射到属性对象，可以轻松地访问和修改数据库数据。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java设计模式：Abstract Factory</title>
      <link>https://blog.chensoul.com/posts/2023/05/22/java-design-patterns-abstract-factory/</link>
      <pubDate>Mon, 22 May 2023 14:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/05/22/java-design-patterns-abstract-factory/</guid>
      <description>本文主要介绍 Abstract Factory 模式，在 Java Design Patterns 网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。 Java Design Patterns 提供了各种 Java 设计</description>
      <content:encoded><![CDATA[<p>本文主要介绍  Abstract Factory 模式，在 <a href="https://java-design-patterns.com/">Java Design Patterns</a>  网站上有对该模式进行介绍。这里主要是做个笔记，并添加一些扩展，以加深对该设计模式的理解。</p>
<blockquote>
<p><a href="https://java-design-patterns.com/">Java Design Patterns</a> 提供了各种 Java 设计模式的介绍、示例代码和用例说明。该网站旨在帮助 Java 开发人员了解和应用各种常见的设计模式，以提高代码的可读性、可维护性和可扩展性。</p>
<p>Java Design Patterns 网站提供了多种设计模式分类方式，包括创建型模式（Creational Patterns）、结构型模式（Structural Patterns）和行为型模式（Behavioral Patterns），以及其他一些常见的模式。</p>
<p>对于每个设计模式，该网站提供了详细的介绍、示例代码和用例说明，并且提供了一些常见的使用场景和注意事项。开发人员可以根据自己的需求选择适合自己的设计模式，并且可以参考示例代码和用例说明来理解和应用该模式。</p>
<p>此外，Java Design Patterns 网站还提供了一些其他资源，如设计模式的 UML 图、设计模式的优缺点、设计模式的比较等。这些资源可以帮助开发人员更好地理解和应用设计模式。</p>
<p>中文网站：<a href="https://java-design-patterns.com/zh/">https://java-design-patterns.com/zh/</a></p>
<p>Github 上源码仓库（非官方）：<a href="https://github.com/iluwatar/java-design-patterns">https://github.com/iluwatar/java-design-patterns</a></p>
</blockquote>
<h2 id="目的">目的</h2>
<p>抽象工厂（Abstract Factory）是一种创建型设计模式，它提供了一种方式来创建一系列相关或依赖对象的家族，而无需指定它们具体的类。</p>
<p>抽象工厂模式使用一个抽象工厂接口来定义一组相关的工厂方法，每个工厂方法都能够创建一组相关的产品。具体的工厂实现了这个接口，并能够创建具体的产品。客户端代码只需要使用抽象工厂接口来创建产品，而不需要关心具体的产品实现。</p>
<h2 id="解释">解释</h2>
<p>真实世界例子</p>
<blockquote>
<p>要创建一个王国，我们需要具有共同主题的对象。精灵王国需要精灵国王、精灵城堡和精灵军队，而兽人王国需要兽人国王、兽人城堡和兽人军队。王国中的对象之间存在依赖关系。</p>
</blockquote>
<p>通俗的说</p>
<blockquote>
<p>工厂的工厂； 一个将单个但相关/从属的工厂分组在一起而没有指定其具体类别的工厂。</p>
</blockquote>
<p>维基百科上说</p>
<blockquote>
<p>抽象工厂模式提供了一种封装一组具有共同主题的单个工厂而无需指定其具体类的方法</p>
</blockquote>
<p><strong>程序示例</strong></p>
<p>翻译上面的王国示例。 首先，我们为王国中的对象提供了一些接口和实现。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Castle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="nf">getDescription</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">King</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="nf">getDescription</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Army</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">String</span> <span class="nf">getDescription</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Elven implementations -&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElfCastle</span> <span class="kd">implements</span> <span class="n">Castle</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DESCRIPTION</span> <span class="o">=</span> <span class="s">&#34;This is the Elven castle!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">DESCRIPTION</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElfKing</span> <span class="kd">implements</span> <span class="n">King</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DESCRIPTION</span> <span class="o">=</span> <span class="s">&#34;This is the Elven king!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">DESCRIPTION</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElfArmy</span> <span class="kd">implements</span> <span class="n">Army</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DESCRIPTION</span> <span class="o">=</span> <span class="s">&#34;This is the Elven Army!&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">DESCRIPTION</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Orcish implementations similarly -&gt; ...
</span></span></span></code></pre></div><p>然后我们有了王国工厂的抽象和实现</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">KingdomFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Castle</span> <span class="nf">createCastle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">King</span> <span class="nf">createKing</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">Army</span> <span class="nf">createArmy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElfKingdomFactory</span> <span class="kd">implements</span> <span class="n">KingdomFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Castle</span> <span class="nf">createCastle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">ElfCastle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">King</span> <span class="nf">createKing</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">ElfKing</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Army</span> <span class="nf">createArmy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">ElfArmy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrcKingdomFactory</span> <span class="kd">implements</span> <span class="n">KingdomFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Castle</span> <span class="nf">createCastle</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">OrcCastle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">King</span> <span class="nf">createKing</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">OrcKing</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Army</span> <span class="nf">createArmy</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="n">OrcArmy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>现在我们有了抽象工厂，使我们可以制作相关对象的系列，即精灵王国工厂创建了精灵城堡，国王和军队等。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">KingdomFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ElfKingdomFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Castle</span> <span class="n">castle</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createCastle</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">King</span> <span class="n">king</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createKing</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">Army</span> <span class="n">army</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createArmy</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">castle</span><span class="o">.</span><span class="na">getDescription</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">king</span><span class="o">.</span><span class="na">getDescription</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">army</span><span class="o">.</span><span class="na">getDescription</span><span class="o">();</span>
</span></span></code></pre></div><p>程序输出:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">This</span> <span class="n">is</span> <span class="n">the</span> <span class="n">Elven</span> <span class="n">castle</span><span class="o">!</span>
</span></span><span class="line"><span class="cl"><span class="n">This</span> <span class="n">is</span> <span class="n">the</span> <span class="n">Elven</span> <span class="n">king</span><span class="o">!</span>
</span></span><span class="line"><span class="cl"><span class="n">This</span> <span class="n">is</span> <span class="n">the</span> <span class="n">Elven</span> <span class="n">Army</span><span class="o">!</span>
</span></span></code></pre></div><p>现在，我们可以为不同的王国工厂设计工厂。 在此示例中，我们创建了FactoryMaker，负责返回ElfKingdomFactory或OrcKingdomFactory的实例。 客户可以使用FactoryMaker来创建所需的具体工厂，该工厂随后将生产不同的具体对象（军队，国王，城堡）。 在此示例中，我们还使用了一个枚举来参数化客户要求的王国工厂类型。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">FactoryMaker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">enum</span> <span class="n">KingdomType</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">ELF</span><span class="o">,</span> <span class="n">ORC</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">KingdomFactory</span> <span class="nf">makeFactory</span><span class="o">(</span><span class="n">KingdomType</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">switch</span> <span class="o">(</span><span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="n">ELF</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">ElfKingdomFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="n">ORC</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">OrcKingdomFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">default</span> <span class="o">-&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&#34;KingdomType not supported.&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="o">};</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@Slf4j</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Kingdom</span> <span class="n">kingdom</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Kingdom</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="n">Kingdom</span> <span class="nf">getKingdom</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">kingdom</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">App</span> <span class="n">app</span> <span class="o">=</span> <span class="k">new</span> <span class="n">App</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;elf kingdom&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">createKingdom</span><span class="o">(</span><span class="n">KingdomType</span><span class="o">.</span><span class="na">ELF</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getArmy</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getCastle</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getKing</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;orc kingdom&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">createKingdom</span><span class="o">(</span><span class="n">KingdomType</span><span class="o">.</span><span class="na">ORC</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getArmy</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getCastle</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">kingdom</span><span class="o">.</span><span class="na">getKing</span><span class="o">().</span><span class="na">getDescription</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">  <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h2 id="类图">类图</h2>
<p><img loading="lazy" src="https://java-design-patterns.com/assets/abstract-factory.urm-fe0340de.png" alt="alt text"  />
</p>
<h2 id="优缺点">优缺点</h2>
<p>优点包括：</p>
<ol>
<li>抽象工厂模式能够帮助我们创建具有高内聚性的对象家族，这些对象家族之间相互协作，从而构成一个完整的系统。</li>
<li>抽象工厂模式能够保证客户端代码与具体产品实现之间的解耦，从而让系统更加灵活和可扩展。</li>
<li>抽象工厂模式能够隐藏产品的具体实现细节，从而提高系统的安全性和稳定性。</li>
</ol>
<p>而缺点则包括：</p>
<ol>
<li>抽象工厂模式比较复杂，需要定义许多接口和抽象类，这会增加系统的复杂性和开发成本。</li>
<li>如果需要添加新的产品族，那么就需要修改抽象工厂接口以及所有的具体工厂实现，这会带来一定的风险和不便。</li>
<li>抽象工厂模式可能会导致系统的扩展性受限，因为一旦定义了抽象工厂接口，就不能够轻易地修改它。</li>
</ol>
<p>在《Effective Java》中，作者还提到了一个关于抽象工厂模式的建议：在设计抽象工厂接口时，要考虑到未来可能的变化。例如，如果我们预计将来可能会添加新的产品族，那么就应该尽量设计一个灵活的抽象工厂接口，以便在不修改现有代码的情况下添加新的产品族。</p>
<p>举例：<a href="https://www.digitalocean.com/community/tutorials/abstract-factory-design-pattern-in-java">Abstract Factory Design Pattern in Java</a></p>
<p>Computer.java：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"> <span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">getRAM</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">getHDD</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">getCPU</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">(){</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;RAM= &#34;</span><span class="o">+</span><span class="k">this</span><span class="o">.</span><span class="na">getRAM</span><span class="o">()+</span><span class="s">&#34;, HDD=&#34;</span><span class="o">+</span><span class="k">this</span><span class="o">.</span><span class="na">getHDD</span><span class="o">()+</span><span class="s">&#34;, CPU=&#34;</span><span class="o">+</span><span class="k">this</span><span class="o">.</span><span class="na">getCPU</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>PC.java：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PC</span> <span class="kd">extends</span> <span class="n">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">PC</span><span class="o">(</span><span class="n">String</span> <span class="n">ram</span><span class="o">,</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">,</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">=</span><span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">=</span><span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">=</span><span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getRAM</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getHDD</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCPU</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>Server.java：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Server</span> <span class="kd">extends</span> <span class="n">Computer</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">Server</span><span class="o">(</span><span class="n">String</span> <span class="n">ram</span><span class="o">,</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">,</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">=</span><span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">=</span><span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">=</span><span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getRAM</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getHDD</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCPU</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>抽象工厂方法：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ComputerAbstractFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Computer</span> <span class="nf">createComputer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PCFactory</span> <span class="kd">implements</span> <span class="n">ComputerAbstractFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">PCFactory</span><span class="o">(</span><span class="n">String</span> <span class="n">ram</span><span class="o">,</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">,</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">=</span><span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">=</span><span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">=</span><span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Computer</span> <span class="nf">createComputer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">PC</span><span class="o">(</span><span class="n">ram</span><span class="o">,</span><span class="n">hdd</span><span class="o">,</span><span class="n">cpu</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServerFactory</span> <span class="kd">implements</span> <span class="n">ComputerAbstractFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="nf">ServerFactory</span><span class="o">(</span><span class="n">String</span> <span class="n">ram</span><span class="o">,</span> <span class="n">String</span> <span class="n">hdd</span><span class="o">,</span> <span class="n">String</span> <span class="n">cpu</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">ram</span><span class="o">=</span><span class="n">ram</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">hdd</span><span class="o">=</span><span class="n">hdd</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">this</span><span class="o">.</span><span class="na">cpu</span><span class="o">=</span><span class="n">cpu</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="nd">@Override</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="n">Computer</span> <span class="nf">createComputer</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="k">new</span> <span class="n">Server</span><span class="o">(</span><span class="n">ram</span><span class="o">,</span><span class="n">hdd</span><span class="o">,</span><span class="n">cpu</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>工厂类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComputerFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">Computer</span> <span class="nf">getComputer</span><span class="o">(</span><span class="n">ComputerAbstractFactory</span> <span class="n">factory</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">factory</span><span class="o">.</span><span class="na">createComputer</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>测试：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestDesignPatterns</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">testAbstractFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testAbstractFactory</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">Computer</span> <span class="n">pc</span> <span class="o">=</span> <span class="n">ComputerFactory</span><span class="o">.</span><span class="na">getComputer</span><span class="o">(</span><span class="k">new</span> <span class="n">PCFactory</span><span class="o">(</span><span class="s">&#34;2 GB&#34;</span><span class="o">,</span><span class="s">&#34;500 GB&#34;</span><span class="o">,</span><span class="s">&#34;2.4 GHz&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">Computer</span> <span class="n">server</span> <span class="o">=</span> <span class="n">ComputerFactory</span><span class="o">.</span><span class="na">getComputer</span><span class="o">(</span><span class="k">new</span> <span class="n">ServerFactory</span><span class="o">(</span><span class="s">&#34;16 GB&#34;</span><span class="o">,</span><span class="s">&#34;1 TB&#34;</span><span class="o">,</span><span class="s">&#34;2.9 GHz&#34;</span><span class="o">));</span>
</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;AbstractFactory PC Config::&#34;</span><span class="o">+</span><span class="n">pc</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;AbstractFactory Server Config::&#34;</span><span class="o">+</span><span class="n">server</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>输出结果：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">AbstractFactory PC Config::RAM<span class="o">=</span> <span class="m">2</span> GB, <span class="nv">HDD</span><span class="o">=</span><span class="m">500</span> GB, <span class="nv">CPU</span><span class="o">=</span>2.4 GHz
</span></span><span class="line"><span class="cl">AbstractFactory Server Config::RAM<span class="o">=</span> <span class="m">16</span> GB, <span class="nv">HDD</span><span class="o">=</span><span class="m">1</span> TB, <span class="nv">CPU</span><span class="o">=</span>2.9 GHz
</span></span></code></pre></div><p>类图：<img loading="lazy" src="../../../../../../../Downloads/Abstract-Factory-Pattern-ComputerFactory.png" alt="Abstract-Factory-Pattern-ComputerFactory"  />
</p>
<h2 id="适用性">适用性</h2>
<p>在以下情况下使用抽象工厂模式</p>
<ul>
<li>该系统应独立于其产品的创建，组成和表示方式</li>
<li>系统应配置有多个产品系列之一</li>
<li>相关产品对象系列旨在一起使用，你需要强制执行此约束</li>
<li>你想提供产品的类库，并且只想暴露它们的接口，而不是它们的实现。</li>
<li>从概念上讲，依赖项的生存期比使用者的生存期短。</li>
<li>你需要一个运行时值来构建特定的依赖关系</li>
<li>你想决定在运行时从系列中调用哪种产品。</li>
<li>你需要提供一个或更多仅在运行时才知道的参数，然后才能解决依赖关系。</li>
<li>当你需要产品之间的一致性时</li>
<li>在向程序添加新产品或产品系列时，您不想更改现有代码。</li>
</ul>
<h2 id="相关模式">相关模式</h2>
<ul>
<li><a href="https://java-design-patterns.com/patterns/factory-method/">Factory Methodopen</a></li>
<li><a href="https://java-design-patterns.com/patterns/factory-kit/">Factory Kit</a></li>
</ul>
<h2 id="使用">使用</h2>
<p>jdk中以下类使用了抽象工厂模式：</p>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">javax.xml.parsers.DocumentBuilderFactoryopen</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--">javax.xml.transform.TransformerFactoryopen</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--">javax.xml.xpath.XPathFactoryopen</a></li>
</ul>
<p>以下是一些常见的开源框架和库：</p>
<ol>
<li>Spring Framework：Spring Framework 是一个流行的 Java 应用程序框架，它使用了抽象工厂模式来创建不同类型的对象，例如数据源、事务管理器和消息队列等。</li>
<li>Hibernate ORM：Hibernate ORM 是一个用于管理对象关系映射（ORM）的框架，它使用了抽象工厂模式来创建数据库连接、事务管理器和查询语句等对象。</li>
<li>Apache Commons：Apache Commons 是一个开源的 Java 工具库，它包含了许多常用的工具类和函数。其中，一些模块（例如 Commons Codec 和 Commons Pool）使用了抽象工厂模式来创建不同类型的对象。</li>
<li>Apache Struts：Apache Struts 是一个基于 MVC（模型-视图-控制器）模式的 Web 应用程序框架，它使用了抽象工厂模式来创建不同类型的 Action 类和结果类型。</li>
<li>Apache CXF：Apache CXF 是一个用于构建 Web 服务的框架，它使用了抽象工厂模式来创建不同类型的 Web 服务端点和客户端。</li>
<li>Apache Axis：Apache Axis 是一个用于构建 Web 服务的框架，它使用了抽象工厂模式来创建不同类型的 Web 服务端点和客户端。</li>
<li>Apache Log4j：Apache Log4j 是一个流行的 Java 日志框架，它使用了抽象工厂模式来创建不同类型的日志记录器和 Appender（日志输出器）。</li>
<li>Apache Commons Configuration：Apache Commons Configuration 是一个用于读取和写入配置文件的库，它使用了抽象工厂模式来创建不同类型的配置对象，例如 XMLConfiguration 和 PropertiesConfiguration 等。</li>
</ol>
<p>除此之外，许多其他的开源框架和库也使用了抽象工厂模式，例如 Hibernate、MyBatis、JDBC、JPA、JUnit 等。这些框架和库使用抽象工厂模式的原因是它能够帮助创建具有高内聚性的对象家族，并且能够保证客户端代码与具体产品实现之间的解耦。同时，抽象工厂模式也能够隐藏产品的具体实现细节，从而提高系统的安全性和稳定性。这些优点让抽象工厂模式成为了这些框架和库中常用的设计模式之一。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>《Effective Java 3》笔记5：依赖注入优于硬编码资源</title>
      <link>https://blog.chensoul.com/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/</link>
      <pubDate>Mon, 17 Apr 2023 17:00:00 +0800</pubDate>
      
      <guid>https://blog.chensoul.com/posts/2023/04/17/prefer-dependency-injection-to-hardwiring-resources/</guid>
      <description>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。 介绍 依赖注入是软件工程中使用的一种设计模式，用</description>
      <content:encoded><![CDATA[<p>本文是 《Effective Java 3》第二章的学习笔记，在整理笔记过程中，通过 chatgpt 的帮助做了一些扩展。</p>
<h2 id="介绍">介绍</h2>
<p>依赖注入是软件工程中使用的一种设计模式，用于将组件和依赖项相互解耦。而不是在组件内部创建和管理依赖项，我们从外部传递它们。这种方法可以帮助创建更模块化和灵活的代码。</p>
<p>相比之下，硬编码资源涉及在组件内部直接创建和管理依赖项。这种方法可能会使代码不太灵活，难以维护。</p>
<h2 id="举例">举例</h2>
<p>许多类依赖于一个或多个底层资源。例如，拼写检查程序依赖于字典。常见做法是，将这种类实现为静态实用工具类：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Inappropriate use of static utility - inflexible &amp; untestable!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpellChecker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Lexicon</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="o">...;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SpellChecker</span><span class="o">()</span> <span class="o">{}</span> <span class="c1">// Noninstantiable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">suggestions</span><span class="o">(</span><span class="n">String</span> <span class="n">typo</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>类似地，我们也经常看到它们的单例实现：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Inappropriate use of singleton - inflexible &amp; untestable!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpellChecker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">INSTANCE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SpellChecker</span><span class="o">(...);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Lexicon</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="o">...;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="nf">SpellChecker</span><span class="o">(...)</span> <span class="o">{}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">suggestions</span><span class="o">(</span><span class="n">String</span> <span class="n">typo</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这两种方法都不令人满意，因为它们假设只使用一个字典。在实际应用中，每种语言都有自己的字典，特殊的字典用于特殊的词汇表。另外，最好使用一个特殊的字典进行测试。</p>
<p>你可以尝试让 SpellChecker 支持多个字典：首先取消 dictionary 字段的 final 修饰，并在现有的拼写检查器中添加更改 dictionary 的方法。但是在并发环境中这种做法是笨拙的、容易出错的和不可行的。<strong>静态实用工具类和单例不适用于由底层资源参数化的类。</strong></p>
<p>所需要的是支持类的多个实例的能力（在我们的示例中是 SpellChecker），每个实例都使用客户端需要的资源（在我们的示例中是 dictionary）。满足此要求的一个简单模式是在<strong>创建新实例时将资源传递给构造函数。</strong> 这是依赖注入的一种形式：字典是拼写检查器的依赖项，在创建它时被注入到拼写检查器中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// Dependency injection provides flexibility and testability
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpellChecker</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Lexicon</span> <span class="n">dictionary</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">SpellChecker</span><span class="o">(</span><span class="n">Lexicon</span> <span class="n">dictionary</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">dictionary</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">dictionary</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">suggestions</span><span class="o">(</span><span class="n">String</span> <span class="n">typo</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>依赖注入模式非常简单，许多程序员在不知道其名称的情况下使用了多年。虽然拼写检查器示例只有一个资源（字典），但是依赖注入可以处理任意数量的资源和任意依赖路径。它保持了不可变性，因此多个客户端可以共享依赖对象（假设客户端需要相同的底层资源）。<strong>依赖注入同样适用于构造函数、静态工厂和构建器</strong>。</p>
<p>以下是这些情况的示例：</p>
<h3 id="构造函数">构造函数</h3>
<p>在构造函数中使用依赖注入是最常见的方式。例如，假设我们有一个名为<code>UserService</code>的类，它需要一个能够验证用户的<code>UserValidator</code>接口作为依赖项。我们可以像这样在构造函数中注入<code>UserValidator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><h3 id="静态工厂">静态工厂</h3>
<p>静态工厂是一种创建对象的方式，它将创建对象的逻辑封装在一个静态方法中。例如，假设我们有一个名为<code>UserServiceFactory</code>的类，它负责创建<code>UserService</code>实例。我们可以像这样在静态工厂方法中注入<code>UserValidator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceFactory</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">UserService</span> <span class="nf">createUserService</span><span class="o">(</span><span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">userValidator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><h3 id="构建器">构建器</h3>
<p>构建器是一种创建对象的方式，它将创建对象的逻辑封装在一个构建器类中。例如，假设我们有一个名为<code>UserServiceBuilder</code>的类，它负责创建<code>UserService</code>实例。我们可以像这样在构建器类中注入<code>UserValidator</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceBuilder</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserServiceBuilder</span> <span class="nf">withUserValidator</span><span class="o">(</span><span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">UserService</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">userValidator</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>这样，我们可以使用构建器来创建<code>UserService</code>实例，并在构建器中注入<code>UserValidator</code>。例如：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">UserValidator</span> <span class="n">userValidator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomUserValidator</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceBuilder</span><span class="o">().</span><span class="na">withUserValidator</span><span class="o">(</span><span class="n">userValidator</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span></span></code></pre></div><p>这种模式的一个有用变体是将资源工厂传递给构造函数。资源工厂是一种创建和提供对象的方式，它可以在需要时动态地创建和返回资源。在将资源工厂传递给构造函数时，我们可以将对象的创建和配置逻辑从类中移除，从而实现更好的可测试性和可维护性。</p>
<p>以下是一个使用资源工厂传递给构造函数的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="n">ResourceFactory</span> <span class="n">resourceFactory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">resourceFactory</span><span class="o">.</span><span class="na">createUserValidator</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">resourceFactory</span><span class="o">.</span><span class="na">createDataSource</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">authenticate</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// perform authentication using userValidator and dataSource
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>UserService</code>类需要一个能够验证用户的<code>UserValidator</code>实例和一个<code>DataSource</code>实例。这两个依赖项都是通过资源工厂来创建的。通过将资源工厂传递给构造函数，我们可以将对象的创建和配置逻辑从类中移除，并使其更加灵活和可维护。</p>
<p>例如，假设我们有一个名为<code>MySqlResourceFactory</code>的类，它实现了<code>ResourceFactory</code>接口，并用于创建<code>UserValidator</code>和<code>DataSource</code>实例。我们可以像这样使用它来创建<code>UserService</code>实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">ResourceFactory</span> <span class="n">resourceFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MySqlResourceFactory</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">resourceFactory</span><span class="o">);</span>
</span></span></code></pre></div><p>使用这种方法，我们将<code>UserService</code>类与具体的资源实现解耦，并使其更加灵活和可维护。同时，我们可以轻松地模拟和测试<code>UserService</code>类，因为我们可以在测试中传递不同的资源工厂实现，而不需要依赖于外部资源。</p>
<h3 id="函数式接口">函数式接口</h3>
<p>在Java 8中，<code>Supplier&lt;T&gt;</code>是一个函数式接口，用于表示一个无参数函数，该函数返回类型为<code>T</code>。由于其函数式特性，<code>Supplier&lt;T&gt;</code>非常适合表示工厂，因为它可以提供一种通用的方式来创建对象。</p>
<p>以下是一个使用<code>Supplier&lt;T&gt;</code>表示工厂的示例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">UserValidator</span> <span class="n">userValidator</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="nf">UserService</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">UserValidator</span><span class="o">&gt;</span> <span class="n">userValidatorFactory</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">.</span><span class="na">userValidator</span> <span class="o">=</span> <span class="n">userValidatorFactory</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">authenticate</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// perform authentication using userValidator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在上面的示例中，<code>UserService</code>类的构造函数接受一个<code>Supplier&lt;UserValidator&gt;</code>作为参数。这个<code>Supplier</code>可以在需要时动态地创建<code>UserValidator</code>实例。在<code>UserService</code>类中，我们可以通过调用<code>userValidatorFactory.get()</code>来获取<code>UserValidator</code>实例。</p>
<p>例如，假设我们有一个名为<code>CustomUserValidator</code>的类，它实现了<code>UserValidator</code>接口，并用于验证用户。我们可以像这样使用<code>UserService</code>类和<code>Supplier&lt;T&gt;</code>来创建<code>UserService</code>实例：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">UserValidator</span><span class="o">&gt;</span> <span class="n">userValidatorFactory</span> <span class="o">=</span> <span class="n">CustomUserValidator</span><span class="o">::</span><span class="k">new</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserService</span><span class="o">(</span><span class="n">userValidatorFactory</span><span class="o">);</span>
</span></span></code></pre></div><p>在上面的示例中，<code>userValidatorFactory</code>是一个<code>Supplier&lt;UserValidator&gt;</code>实例，它使用<code>CustomUserValidator::new</code>构造函数引用来创建<code>UserValidator</code>实例。通过将这个<code>Supplier</code>传递给<code>UserService</code>类的构造函数，我们可以创建<code>UserService</code>实例，而无需显式地创建<code>UserValidator</code>实例。</p>
<p>使用<code>Supplier&lt;T&gt;</code>表示工厂可以使我们的代码更加简洁和灵活。它可以使对象的创建更加通用，并允许我们在需要时动态地创建对象。同时，由于<code>Supplier&lt;T&gt;</code>是一个函数式接口，我们可以使用lambda表达式和方法引用来创建工厂，使代码更加简洁和易于理解。</p>
<h2 id="优点">优点</h2>
<p>以下是使用依赖注入比硬编码资源的优点：</p>
<ol>
<li>可测试性：使用依赖注入，很容易创建和注入模拟对象进行测试。这样，我们可以将正在测试的组件隔离开来，并专注于测试其行为，而不必担心其依赖项的行为。</li>
<li>灵活性：使用依赖注入，我们可以轻松地用不同实现替换依赖项。这在需要更改组件的行为而不更改其代码时非常有用。</li>
<li>解耦：依赖注入有助于将组件与其依赖项解耦，使代码更加模块化并易于维护。</li>
<li>关注点分离：依赖注入将依赖项的创建和管理与组件本身分离，允许更清晰地分离关注点。</li>
</ol>
<h2 id="运用">运用</h2>
<p>依赖注入是一种常见的设计模式，被广泛应用于许多开源框架中。以下是一些常见的开源框架和库，它们使用依赖注入来管理对象之间的依赖关系：</p>
<ol>
<li>Spring Framework：Spring是一个非常流行的Java框架，它使用依赖注入来管理应用程序中的对象之间的依赖关系。Spring通过<code>@Autowired</code>注解和XML配置文件来实现依赖注入。</li>
<li>Google Guice：Guice是一个轻量级的依赖注入框架，它使用Java注解来实现依赖注入。Guice提供了一个<code>Binder</code>接口，使用户可以配置注入规则。</li>
<li>Dagger：Dagger是一个基于Java和Android平台的依赖注入框架，它使用Java注解和代码生成技术来实现依赖注入。Dagger提供了一个<code>Component</code>接口，用于表示应用程序对象之间的依赖关系。</li>
<li>CDI：CDI是Java EE 6中引入的一种依赖注入框架，它使用Java注解和XML配置文件来实现依赖注入。CDI提供了一个<code>BeanManager</code>接口，使用户可以配置和管理应用程序对象之间的依赖关系。</li>
<li>Micronaut：Micronaut是一个轻量级的依赖注入框架，它使用Java注解和字节码生成技术来实现依赖注入。Micronaut提供了一个<code>@Inject</code>注解，用于标记需要注入的依赖项。</li>
<li>Weld：Weld是一个Java SE和Java EE的依赖注入框架，它使用Java注解和XML配置文件来实现依赖注入。Weld提供了一个<code>BeanManager</code>接口，用于配置和管理应用程序对象之间的依赖关系。</li>
<li>PicoContainer：PicoContainer是一个轻量级的依赖注入框架，它使用Java注解和代码生成技术来实现依赖注入。PicoContainer提供了一个<code>Container</code>接口，用于表示应用程序对象之间的依赖关系。</li>
<li>HK2：HK2是Java EE 8和Jakarta EE 9的依赖注入框架，它使用Java注解和XML配置文件来实现依赖注入。HK2提供了一个<code>ServiceLocator</code>接口，用于配置和管理应用程序对象之间的依赖关系。</li>
<li>Micrometer：Micrometer是一个用于度量应用程序性能的库，它使用依赖注入来管理度量记录器之间的依赖关系。Micrometer支持多种依赖注入框架，包括Spring和Guice。</li>
<li>Google Dagger Hilt：Dagger Hilt是一个基于Dagger 2的依赖注入库，它使用注解来管理对象之间的依赖关系。它提供了一些附加功能，例如使用<code>@ViewModelInject</code>注解来注入ViewModel依赖项。</li>
<li>Quarkus：Quarkus是一个用于构建可扩展的Java应用程序的框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括CDI、Spring和Guice。</li>
<li>Micronaut Data：Micronaut Data是一个用于管理数据库访问的库，它使用依赖注入来管理数据访问对象之间的依赖关系。它支持多种ORM框架，包括Hibernate和JDBC。</li>
<li>Akka：Akka是一个用于构建事件驱动应用程序的库，它使用依赖注入来管理Actor之间的依赖关系。它提供了一个<code>@Inject</code>注解，用于标记需要注入的依赖项。</li>
<li>JHipster：JHipster是一个用于生成现代Web应用程序的框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括Spring和Guice。</li>
<li>Vert.x：Vert.x是一个基于事件驱动的应用程序框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括CDI和Guice。</li>
<li>Quarkus Reactive：Quarkus Reactive是一个用于构建反应式应用程序的框架，它使用依赖注入来管理应用程序对象之间的依赖关系。它支持多种依赖注入框架，包括CDI和Spring。</li>
<li>Micronaut Security：Micronaut Security是一个用于管理Web应用程序安全的库，它使用依赖注入来管理安全服务之间的依赖关系。它支持多种安全框架，包括Spring Security和Apache Shiro。</li>
<li>Eclipse MicroProfile：Eclipse MicroProfile是一个用于构建微服务的框架，它使用依赖注入来管理微服务之间的依赖关系。它支持多种依赖注入框架，包括CDI和Guice。</li>
<li>Kotlin Koin：Koin是一个用于Kotlin应用程序的依赖注入库，它使用DSL语法来管理应用程序对象之间的依赖关系。它支持单例、工厂和懒加载等不同的注入模式。</li>
<li>Spring Cloud：Spring Cloud是一个用于构建分布式系统的框架，它使用依赖注入来管理分布式系统之间的依赖关系。它支持多种依赖注入框架，包括Spring和Guice。</li>
<li>Micronaut HTTP Client：Micronaut HTTP Client是一个用于管理HTTP客户端的库，它使用依赖注入来管理HTTP客户端之间的依赖关系。它支持多种HTTP客户端实现，包括Apache HttpClient和Netty。</li>
<li>Quarkus Security：Quarkus Security是一个用于管理Web应用程序安全的库，它使用依赖注入来管理安全服务之间的依赖关系。它支持多种安全框架，包括Spring Security和Apache Shiro。</li>
</ol>
<p>这些框架和库都使用依赖注入来管理对象之间的依赖关系，使代码更加灵活、可维护和可测试。它们提供了一些不同的注入技术和API，以适应不同的应用场景和需求。</p>
<h3 id="spring依赖注入">Spring依赖注入</h3>
<p>在Spring框架中，依赖注入是核心特性之一。Spring使用依赖注入来管理应用程序对象之间的依赖关系，以实现松耦合、可测试和可扩展的代码。以下是Spring中使用依赖注入的方法：</p>
<ol>
<li>注解：Spring使用注解将依赖项注入到对象中。常用的注解包括<code>@Autowired</code>、<code>@Qualifier</code>和<code>@Value</code>。其中，<code>@Autowired</code>注解用于自动装配依赖项，<code>@Qualifier</code>注解用于指定依赖项的名称或限定符，<code>@Value</code>注解用于从属性文件或环境变量中注入值。</li>
<li>XML配置文件：Spring也支持使用XML配置文件来定义对象之间的依赖关系。在XML配置文件中，可以使用<code>&lt;bean&gt;</code>元素定义对象，并使用<code>&lt;property&gt;</code>元素设置对象的属性和依赖项。</li>
<li>Java配置类：Spring还支持使用Java配置类来定义对象之间的依赖关系。在Java配置类中，可以使用<code>@Configuration</code>注解定义配置类，并使用<code>@Bean</code>注解定义对象，并使用<code>@Autowired</code>注解注入依赖项。</li>
</ol>
<p>以下是一些在Spring中使用依赖注入的例子：</p>
<p><strong>1、自动装配示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Component</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyService</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">private</span> <span class="kd">final</span> <span class="n">MyRepository</span> <span class="n">myRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Autowired</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="nf">MyService</span><span class="o">(</span><span class="n">MyRepository</span> <span class="n">myRepository</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">this</span><span class="o">.</span><span class="na">myRepository</span> <span class="o">=</span> <span class="n">myRepository</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>MyService</code>类通过构造函数注入了<code>MyRepository</code>依赖。在<code>MyService</code>对象创建时，Spring框架自动装配并注入了<code>MyRepository</code>对象。</p>
<p><strong>2、XML配置示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myService&#34;</span> <span class="na">class=</span><span class="s">&#34;com.example.MyService&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&#34;myRepository&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/bean&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;myRepository&#34;</span> <span class="na">class=</span><span class="s">&#34;com.example.MyRepository&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>在这个例子中，<code>MyService</code>类和<code>MyRepository</code>类被定义为Spring的bean，并在XML配置文件中指定它们之间的依赖关系。在<code>MyService</code>对象创建时，Spring框架自动创建并注入了<code>MyRepository</code>对象。</p>
<p><strong>3、Java配置示例：</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">MyService</span> <span class="nf">myService</span><span class="o">(</span><span class="n">MyRepository</span> <span class="n">myRepository</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="k">new</span> <span class="n">MyService</span><span class="o">(</span><span class="n">myRepository</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">   <span class="kd">public</span> <span class="n">MyRepository</span> <span class="nf">myRepository</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">return</span> <span class="k">new</span> <span class="n">MyRepository</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>在这个例子中，<code>AppConfig</code>类通过<code>@Bean</code>注解定义了<code>MyService</code>对象和<code>MyRepository</code>对象，并通过方法参数的方式注入了<code>MyRepository</code>依赖。在应用程序启动时，Spring框架会自动创建并注入这些对象。</p>
<h4 id="spring依赖注入意事项">Spring依赖注入意事项</h4>
<p>在使用Spring中的依赖注入时，有一些注意事项需要注意，以确保代码的正确性和可维护性。</p>
<ol>
<li>依赖项注入的顺序：如果一个类依赖于多个其他类，那么这些依赖项的注入顺序可能会影响到代码的正确性。为了避免这种情况，可以使用<code>@DependsOn</code>注解指定依赖项之间的顺序。</li>
<li>循环依赖：如果两个或多个类之间出现循环依赖，那么会导致对象无法正确创建。为了避免这种情况，可以使用构造函数注入或setter注入来解决循环依赖问题。</li>
<li>作用域：Spring提供了多种作用域，包括单例、原型和请求作用域等。在使用依赖注入时，需要了解每种作用域的区别和适用场景，并选择合适的作用域。</li>
<li>配置文件管理：在使用XML配置文件或Java配置类时，需要注意配置文件或类的管理和维护。可以使用Spring的Profile功能来管理不同的配置文件或类，并根据不同的环境或需求来选择合适的配置。</li>
<li>依赖注入类型选择：Spring支持多种依赖注入类型，包括构造函数注入、setter注入和字段注入等。需要根据情况选择合适的依赖注入类型，并考虑到代码的可测试性和可维护性。</li>
</ol>
<h4 id="如何避免循环依赖问题">如何避免循环依赖问题</h4>
<p>循环依赖是指两个或多个类之间相互依赖而导致无法正确创建对象的情况。在Spring中，可以通过以下几种方式来避免循环依赖问题：</p>
<ol>
<li>使用构造函数注入：构造函数注入是指依赖项通过构造函数的方式进行注入。这种方式可以避免循环依赖问题，因为对象的创建顺序是确定的，每个对象都必须先创建其依赖项，然后才能创建自身。</li>
<li>使用setter注入：setter注入是指依赖项通过setter方法进行注入。这种方式可以避免循环依赖问题，因为对象的创建顺序是不确定的，每个对象都可以先创建自身，然后再通过setter方法注入其依赖项。</li>
<li>使用<code>@Lazy</code>注解：<code>@Lazy</code>注解可以延迟依赖项的注入，直到对象第一次使用该依赖项时才进行注入。这种方式可以避免循环依赖问题，因为对象的创建顺序是不确定的，每个对象都可以先创建自身，然后再等待其依赖项被注入。</li>
<li>优化依赖关系：如果出现循环依赖问题，可以通过优化依赖关系来解决。例如，将依赖项抽象成接口或抽象类，然后通过不同的实现类来解决循环依赖问题。</li>
</ol>
<h4 id="spring多种依赖注入类的优缺点">Spring多种依赖注入类的优缺点</h4>
<p>Spring支持多种依赖注入类型，包括构造函数注入、setter注入和字段注入等。各种依赖注入类型的优缺点如下：</p>
<p><strong>1、构造函数注入</strong></p>
<p>优点：</p>
<ul>
<li>对象创建时依赖项已经确定，可以保证依赖项的完整性和正确性。</li>
<li>依赖项是只读的，可以保证对象的不变性。</li>
</ul>
<p>缺点：</p>
<ul>
<li>构造函数注入比较繁琐，需要在每个类中添加构造函数和依赖项参数。</li>
</ul>
<p><strong>2、setter注入</strong></p>
<p>优点：</p>
<ul>
<li>setter注入比较灵活，可以随时注入或更改依赖项。</li>
<li>可以使用默认构造函数创建对象，简化代码。</li>
</ul>
<p>缺点：</p>
<ul>
<li>对象创建时依赖项可能还未注入，需要进行null检查。</li>
<li>setter方法是公共的，可能会影响对象的不变性。</li>
</ul>
<p><strong>3、字段注入</strong></p>
<p>优点：</p>
<ul>
<li>简单方便，不需要手动编写构造函数或setter方法。</li>
<li>可以使用默认构造函数创建对象，简化代码。</li>
</ul>
<p>缺点：</p>
<ul>
<li>依赖项是公共的，可能会影响对象的不变性。</li>
<li>对象创建时依赖项可能还未注入，需要进行null检查。</li>
</ul>
<p>总的来说，**构造函数注入是最推荐的依赖注入方式，因为它可以保证对象的完整性和正确性。**setter注入和字段注入则比较灵活，但需要注意依赖项的注入时机和可能对对象不变性的影响。根据具体的情况和需求，可以选择合适的依赖注入方式。</p>
<h2 id="总结">总结</h2>
<p>总之，不要使用单例或静态实用工具类来实现依赖于一个或多个底层资源的类，这些资源的行为会影响类的行为，也不要让类直接创建这些资源。相反，将创建它们的资源或工厂传递给构造函数（或静态工厂或构建器）。这种操作称为依赖注入，它将大大增强类的灵活性、可复用性和可测试性。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
