<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sso on ChenSoul</title>
    <link>https://blog.chensoul.cc/tags/sso/</link>
    <description>Recent content in Sso on ChenSoul</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 11 Jan 2024 07:00:00 +0800</lastBuildDate>
    <atom:link href="https://blog.chensoul.cc/tags/sso/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024-01-11｜Session和Cookie的区别、单点登录和三方登录的区别</title>
      <link>https://blog.chensoul.cc/posts/2024/01/11/til/</link>
      <pubDate>Thu, 11 Jan 2024 07:00:00 +0800</pubDate>
      <guid>https://blog.chensoul.cc/posts/2024/01/11/til/</guid>
      <description>今天做了什么：
1、观看 B 站 《SSO单点登录》视频
2、参考 https://github.com/jOOQ/jOOL 和 https://github.com/vavr-io/vavr ，将 CheckedXXX 的类加入公司项目中。
涉及的类有：Async.java、Blocking.java、CheckedBiConsumer.java、CheckedBiFunction.java、CheckedBiPredicate.java、CheckedComparator.java、CheckedConsumer.java、CheckedFunction.java、CheckedPredicate.java、CheckedRunnable.java、CheckedSupplier.java、FunctionUtils.java、OnceConsumer.java、SameExecutorCompletionStage.java、UncheckedException.java，并添加单元测试类。
示例代码：
@FunctionalInterface public interface CheckedConsumer&amp;lt;T&amp;gt; { void accept(T t) throws Throwable; default CheckedConsumer&amp;lt;T&amp;gt; andThen(CheckedConsumer&amp;lt;? super T&amp;gt; after) { Objects.requireNonNull(after, &amp;#34;after is null&amp;#34;); return (T t) -&amp;gt; { accept(t); after.accept(t); }; } static &amp;lt;T&amp;gt; Consumer&amp;lt;T&amp;gt; sneaky(CheckedConsumer&amp;lt;T&amp;gt; consumer) { return unchecked(consumer, RETHROW_ALL); } static &amp;lt;T&amp;gt; Consumer&amp;lt;T&amp;gt; unchecked(CheckedConsumer&amp;lt;T&amp;gt; consumer) { return unchecked(consumer, THROWABLE_TO_RUNTIME_EXCEPTION); } static &amp;lt;T&amp;gt; Consumer&amp;lt;T&amp;gt; unchecked(CheckedConsumer&amp;lt;T&amp;gt; consumer, Consumer&amp;lt;Throwable&amp;gt; handler) { return t -&amp;gt; { try { consumer.accept(t); } catch (Throwable e) { handler.accept(e); throw new IllegalStateException(&amp;#34;Exception handler must throw a RuntimeException&amp;#34;, e); } }; } } 3、重构公司微服务框架
4、明天待办事项：</description>
    </item>
  </channel>
</rss>
